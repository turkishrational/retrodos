     1                                  ; ****************************************************************************
     2                                  ; RETRODOS.SYS (MSDOS 6.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 01/10/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 25/06/2023 - Retro DOS v4.2 (Modified MSDOS 6.22)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 26/12/2018 (Retro DOS 4.0), 28/12/2022 (Retro DOS 4.1, MSDOS 5.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15 (2.11)
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm retrodos.s -l retrodos.lst -o MSDOS.SYS -Z error.txt)) 
    11                                  ; ----------------------------------------------------------------------------
    12                                  
    13                                  ; 20/12/2022 - Modifications for initiating IO.SYS by Retro DOS v2 boot sector
    14                                  ;
    15                                  ;	       (Retro DOS v2 BS loads IO.SYS & MSDOS.SYS as single kernel file
    16                                  ;	       with name of 'MSDOS.SYS'. Retro DOS init code -for IO.SYS init-
    17                                  ;	       is different than original MSDOS IO.SYS LOADER and INIT code.)
    18                                  ;
    19                                  ;	       ((RETRODOS.SYS/MSDOS.SYS can be loaded by a fake IO.SYS for
    20                                  ;		using it with MSDOS 5.0 boot sector & as bootable MSDOS disk.
    21                                  ;		For that, fake IO.SYS must load 'MSDOS.SYS' at 1000h:0000h.))		-	
    22                                  ; 		
    23                                  ; 18/12/2022 - Modified MSDOS 5.0 IO.SYS (for using with MSDOS 5 boot sector)
    24                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    25                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    26                                  
    27                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    28                                  ;     (as included binary, 'IOSYS5.BIN') 
    29                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    30                                  ;						        (except MSLOAD code)
    31                                        
    32                                  ;------- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    33                                  ;	 at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    34                                  ;	 moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    35                                  ;	 Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    36                                  ;	 SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    37                                  ;	 (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    38                                  
    39                                  ; ----------------------------------------------------------------------------
    40                                  
    41                                  ;=============================================================================
    42                                  ; Modified from 'retrodos3.s', Retro DOS v3.0 Kernel (IBMBIO.COM) Source code
    43                                  ; by Erdogan Tan, 10/09/2018
    44                                  ;=============================================================================
    45                                  
    46                                  ; MSBIO (IO.SYS 6.0) source files:
    47                                  ; 	MSBIO1.ASM,MSCHAR.ASM,MSDISK.ASM,MSDIOCTL.ASM,MSINT13.ASM,MSBIO2.ASM
    48                                  ;	MSINIT.ASM,SYSINIT1.ASM,SYSCONF.ASM,SYSPRE.ASM,SYSINIT2.ASM 
    49                                  ;	SYSIMES.ASM,POWER.ASM,PTIME.ASM,MSEND.ASM
    50                                  
    51                                  ;=============================================================================
    52                                  ; MSBIO
    53                                  ;=============================================================================
    54                                  ;msbio1+mschar+msdisk+msdioctl+msint13+msbio2+
    55                                  ;msinit+sysinit1+sysconf+syspre+sysinit2+sysimes+power+ptime+
    56                                  ;msend,msbio,msbio;
    57                                  
    58                                  ;=============================================================================
    59                                  ; RETRO DOS kernel versions by Erdogan Tan (2018-2022)
    60                                  ;=============================================================================
    61                                  
    62                                  ;Retro DOS v1.0 == MSDOS 1.25 -- derived from MSDOS 1.25 source code 
    63                                  ;Retro DOS v2.0 == MSDOS 2.11 -- derived from MSDOS 2.11 source code 
    64                                  ;Retro DOS v3.0 == MSDOS 3.30 -- derived from MSDOS 3.3 & 6.0 source code 
    65                                  ;Retro DOS v4.0 == MSDOS 6.21 -- derived from MSDOS 6.0 source code (2019) (*)
    66                                  ;Retro DOS v4.0 == MSDOS 5.0+ -- derived from MSDOS 6.0 source code (2022) (**)
    67                                  ;Retro DOS v4.1 == MSDOS 5.0+ -- will be optimized -shortened- version (2023)
    68                                  ;Retro DOS v4.2 == MSDOS 6.21 -- will be MSDOS 6.21 (6.22) compatible (2023)(?)
    69                                  ;Retro DOS v5.0 == PCDOS 7.10 -- will be derived from IBM PCDOS 7.1 source code
    70                                  
    71                                  ;(*) unfinished, draft, canceled (failed in 2019)
    72                                  ;(**) MSDOS 5.0 IO.SYS & SYSINIT, MSDOS 5.0-6.22 mixed MSDOS.SYS (successed)
    73                                  ;(?) MSDOS 6.21 IO.SYS & SYSINIT, MSDOS 6.21 MSDOS.SYS except doublespace
    74                                  
    75                                  ;Disassembly: (reverse engineering via IDA Pro Free)
    76                                  
    77                                  ;Retro DOS v1.0 <-- IBM PCDOS 1.1
    78                                  ;Retro DOS v2.0 <-- IBM PCDOS 2.1 & MSDOS 2.11
    79                                  ;Retro DOS v3.0 <-- IBM PCDOS 3.3 & MSDOS 3.3
    80                                  ;Retro DOS v4.0 <-- MSDOS 6.21 ; 2018-2019 (*)
    81                                  ;Retro DOS v4.0 <-- MSDOS 5.0 ; 2022 (**)
    82                                  ;Retro DOS v5.0 <-- IBM PCDOS 7.1 
    83                                  
    84                                  ;-----------------------------------------------------------------------------
    85                                  ; MSDOS 6.21 IO.SYS (13/02/1994)
    86                                  ;-----------------------------------------------------------------------------
    87                                  
    88                                  SECTOR_SIZE     equ     0200h		; size of a sector
    89                                  PAUSE_KEY       equ     7200h		; scancode + charcode of PAUSE key
    90                                  KEYBUF_NEXT     equ     041Ah		; next character in keyboard buffer
    91                                  KEYBUF_FREE     equ     041Ch		; next free slot in keyboard buffer
    92                                  KEYBUF          equ     041Eh		; keyboard buffer data
    93                                  LOGICAL_DRIVE   equ     0504h		; linear address of logical drive byte
    94                                  ;DOS_SEGMENT	equ     00BFh ; v1.1	; segment in which DOS will run
    95                                  DOS_SEGMENT	equ     00C4h		; Retro DOS v1.0 - 13/02/2018
    96                                  BIO_SEGMENT     equ     0060h		; segment in which BIO is running
    97                                  
    98                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "DISKPRM.INC" - 24/07/1987)
    99                                  ; The following structure defines the disk parameter table
   100                                  ; pointed to by Interrupt vector 1EH (location 0:78H)
   101                                  
   102                                  struc	DISK_PARMS
   103 00000000 ??                      .DISK_SPECIFY_1:  resb	1
   104 00000001 ??                      .DISK_SPECIFY_2:  resb	1
   105 00000002 ??                      .DISK_MOTOR_WAIT: resb  1	; Wait till motor off
   106 00000003 ??                      .DISK_SECTOR_SIZ: resb 	1	; Bytes/Sector (2 = 512)
   107 00000004 ??                      .DISK_EOT:	  resb  1	; Sectors per track (MAX)
   108 00000005 ??                      .DISK_RW_GAP:	  resb  1	; Read Write Gap
   109 00000006 ??                      .DISK_DTL:	  resb	1
   110 00000007 ??                      .DISK_FORMT_GAP:  resb  1	; Format Gap Length
   111 00000008 ??                      .DISK_FILL:	  resb  1	; Format Fill Byte
   112 00000009 ??                      .DISK_HEAD_STTL:  resb  1	; Head Settle Time (MSec)
   113 0000000A ??                      .DISK_MOTOR_STRT: resb  1	; Motor start delay
   114                                  .size:
   115                                  endstruc
   116                                  
   117                                  ; 09/03/2019 - Retro DOS v4.0
   118                                  ; -------------------------------------------------------------------------
   119                                  ; MSEQU.INC, MSDOS 6.0, 1991
   120                                  
   121                                  ftoobig 	equ	80h
   122                                  fbig		equ	40h
   123                                  romstatus	equ	1
   124                                  romread 	equ	2
   125                                  romwrite	equ	3
   126                                  romverify	equ	4
   127                                  romformat	equ	5
   128                                  
   129                                  ; 26/12/2018 (Retro DOS 4.0 - MSDOS 6.0 "MSBDS.INC" - 1991)
   130                                  ; -------------------------------------------------------------------------
   131                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "MSBDS.INC" - 24/07/1987)
   132                                  ;
   133                                  ;  BDS is the Bios Data Structure.
   134                                  ;
   135                                  ;  There is one BDS for each logical drive in the system. All the BDS's
   136                                  ;  are linked together in a list with the pointer to the first BDS being
   137                                  ;  found in START_BDS. The BDS hold various values important to the disk
   138                                  ;  drive. For example there is a field for last time accesses. As actions
   139                                  ;  take place in the system the BDS are update to reflect the actions.
   140                                  ;  For example is there is a read to a disk the last access field for the
   141                                  ;  BDS for that drive is update to the current time.
   142                                  ;
   143                                  ; Values for various flags in BDS.flags.
   144                                  ;
   145                                  
   146                                  fnon_removable	    equ     01h 	;For non-removable media
   147                                  fchangeline	    equ     02h 	;If changeline supported on drive
   148                                  return_fake_bpb     equ     04h 	; When set, don't do a build BPB
   149                                  					; just return the fake one
   150                                  good_tracklayout    equ     08h 	; The track layout has no funny sectors
   151                                  fi_am_mult	    equ     10h 	;If more than one logical for this physical
   152                                  fi_own_physical     equ     20h 	;Signify logical owner of this physical
   153                                  fchanged	    equ     40h 	;Indicates media changed
   154                                  set_dasd_true	    equ     80h 	; Set DASD before next format
   155                                  fchanged_by_format  equ    100h		;Media changed by format
   156                                  ; MSDOS 6.0
   157                                  unformatted_media   equ    200h 	;Fixed disk only
   158                                  
   159                                  ;
   160                                  ; Various form factors to describe media
   161                                  ;
   162                                  
   163                                  ff48tpi 	    equ     0
   164                                  ff96tpi 	    equ     1
   165                                  ffSmall 	    equ     2
   166                                  ffHardFile	    equ     5
   167                                  ffOther 	    equ     7
   168                                  ; MSDOS 6.0 ("MSBDS.INC", 1991)
   169                                  ff288		    equ     9	; 2.88 MB drive
   170                                  ; Retro DOS v4.0 feature only !
   171                                  ;ff144		    equ	   10	; 1.44 MB drive			
   172                                  
   173                                  ; 26/05/2019
   174                                  
   175                                  struc	BDS	; BDS_Type
   176 00000000 ????????                .link:		resd 1		; Link to next BDS
   177 00000004 ??                      .drivenum:	resb 1		; Physical drive number
   178 00000005 ??                      .drivelet:	resb 1		; DOS drive number
   179                                  
   180                                  	;We want to embed a BPB declaration here, but we can't initialize
   181                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   182                                  	;of the BPB declaration.
   183                                  .BPB:	
   184 00000006 ????                    .bytespersec:	resw 1		; bytes per sectors ; def = 512
   185 00000008 ??                      .secperclus:	resb 1		; sectors per cluster
   186 00000009 ????                    .resectors:	resw 1		; reserved sectors
   187 0000000B ??                      .fats:		resb 1		; number of fats
   188 0000000C ????                    .direntries:	resw 1		; number of root directory entries
   189 0000000E ????                    .totalsecs16:	resw 1		; total sectors on medium
   190 00000010 ??                      .media:		resb 1		; media descriptor byte ; def = 0F8h
   191 00000011 ????                    .fatsecs: 	resw 1		; number of fat sectors
   192 00000013 ????                    .secpertrack:	resw 1		; sectors per track
   193 00000015 ????                    .heads:		resw 1		; number of heads
   194                                  ;.hiddensecs:	resw 1		; hidden sectors
   195                                  ; MSDOS 6.0
   196 00000017 ????????                .hiddensecs:	resd 1		; hidden sectors	
   197 0000001B ????????                .totalsecs32:	resd 1		; big total sectors		
   198                                  ;
   199 0000001F ??                      .fatsiz:	resb 1		; flags...
   200 00000020 ????                    .opcnt:		resw 1		; open ref. count
   201                                  ;.volid:	resb 12		; volume ID of medium
   202 00000022 ??                      .formfactor:	resb 1		; form factor index
   203 00000023 ????                    .flags:		resw 1		; various flags ; def: 0020h
   204 00000025 ????                    .cylinders:	resw 1		; number of cylinders
   205                                  ;
   206                                  .R_BPB:  			; recommended BPB
   207 00000027 ????                    .rbytespersec:	resw 1		
   208 00000029 ??                      .rsecperclus:	resb 1
   209 0000002A ????                    .rresectors: 	resw 1
   210 0000002C ??                      .rfats:		resb 1
   211 0000002D ????                    .rdirentries:	resw 1
   212 0000002F ????                    .rtotalsecs16:	resw 1
   213 00000031 ??                      .rmedia: 	resb 1
   214 00000032 ????                    .rfatsecs:	resw 1
   215 00000034 ????                    .rsecpertrack: 	resw 1
   216 00000036 ????                    .rheads:	resw 1
   217 00000038 ????????                .rhidsecs: 	resd 1
   218 0000003C ????????                .rtotalsecs32: 	resd 1
   219 00000040 ????????????            .rreserved:	resb 6		; not used (reserved)
   220                                  ;
   221 00000046 ??                      .track:		resb 1		; last track accessed on drive
   222                                  .bdsm_ismini:
   223 00000047 ????                    .tim_lo:	resw 1		; time of last access. keep
   224                                  .bdsm_hidden_trks:
   225 00000049 ????                    .tim_hi:	resw 1		; these contiguous.
   226 0000004B <res Ch>                .volid:		resb 12		; volume id of medium
   227                                  	       ;db "NO NAME    ",0
   228 00000057 ????????                .vol_serial:	resd 1	; current volume serial number from boot record
   229 0000005B <res 9h>                .filesys_id:	resb 9	; current file system id from boot record
   230                                  	       ;db "FAT12   ",0
   231                                  .size:			
   232                                  endstruc
   233                                  
   234                                  ;The assembler will generate bad data for "size bds_volid",
   235                                  ;so we'll define an equate here.
   236                                  
   237                                  VOLID_SIZ	equ	12
   238                                  
   239                                  ;bdsm_ismini	equ	bds_tim_lo	; overlapping bds_tim_lo
   240                                  ;bdsm_hidden_trks equ	bds_tim_hi	; overlapping bds_tim_hi
   241                                  
   242                                  max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
   243                                  
   244                                  ; 29/12/2018
   245                                  ; Retro DOS v4.0
   246                                  ;
   247                                  ; MSDOS 6.0 - BOOTFORM.INC
   248                                  
   249                                  BOOT_SIZE	    EQU	 512
   250                                  EXT_BOOT_SIGNATURE  EQU	 29h ; 41 ; Extended boot signature
   251                                  
   252                                  struc EBPB ; EXT_BPB_INFO
   253 00000000 ????                    .BYTESPERSECTOR:    resw 1
   254 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   255 00000003 ????                    .RESERVEDSECTORS:   resw 1
   256 00000005 ??                      .NUMBEROFFATS:	    resb 1
   257 00000006 ????                    .ROOTENTRIES:	    resw 1
   258 00000008 ????                    .TOTALSECTORS:	    resw 1
   259 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   260 0000000B ????                    .SECTORSPERFAT:	    resw 1
   261 0000000D ????                    .SECTORSPERTRACK:   resw 1
   262 0000000F ????                    .HEADS:		    resw 1
   263 00000011 ????????                .HIDDENSECTORS:	    resd 1
   264 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   265                                  .size:
   266                                  endstruc
   267                                  
   268                                  ;EXT_PHYDRV, EXT_CURHD included in the header for OS2.
   269                                  struc EXT_BOOT ; EXT_IBMBOOT_HEADER
   270 00000000 ??????                  .JUMP:		resb 3
   271 00000003 ????????????????        .OEM:		resb 8
   272 0000000B <res 19h>               .BPB:		resb EBPB.size
   273 00000024 ??                      .PHYDRV:	resb 1
   274 00000025 ??                      .CURHD:		resb 1
   275 00000026 ??                      .SIG:		resb 1
   276 00000027 ????????                .SERIAL:	resd 1
   277 0000002B <res Bh>                .VOL_LABEL:	resb 11
   278 00000036 ????????????????        .SYSTEM_ID:	resb 8
   279                                  .size:
   280                                  endstruc
   281                                  
   282                                  %define BOOT_SIGNATURE	[BOOT_SIZE-2]
   283                                  
   284                                  ; 23/03/2018
   285                                  
   286                                  ;STATIC REQUEST HEADER (DEVSYM.INC, MSDOS 6.0, 1991)
   287                                  STRUC SRHEAD
   288 00000000 ??                      .REQLEN:	resb 1		;LENGTH IN BYTES OF REQUEST BLOCK
   289 00000001 ??                      .REQUNIT:	resb 1		;DEVICE UNIT NUMBER
   290 00000002 ??                      .REQFUNC:	resb 1		;TYPE OF REQUEST
   291 00000003 ????                    .REQSTAT:	resw 1		;STATUS WORD
   292 00000005 ????????????????        	       	resb 8		;RESERVED FOR QUEUE LINKS
   293                                  .size:
   294                                  endstruc
   295                                  
   296                                  ; GENERIC IOCTL REQUEST STRUCTURE (DEVSYM.INC, MSDOS 6.0, 1991)
   297                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
   298                                  ;
   299                                  struc IOCTL_REQ
   300                                  	       ;DB    (SIZE SRHEAD) DUP(?)
   301 00000000 <res Dh>                		resb SRHEAD.size	
   302                                  			    	; GENERIC IOCTL ADDITION.
   303 0000000D ??                      .MAJORFUNCTION:	resb 1		;FUNCTION CODE
   304 0000000E ??                      .MINORFUNCTION:	resb 1		;FUNCTION CATEGORY
   305 0000000F ????                    .REG_SI:	resw 1
   306 00000011 ????                    .REG_DI:	resw 1
   307 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
   308                                  endstruc
   309                                  
   310                                  ; GENERIC IOCTL CATEGORY CODES  (IOCTL.INC, MSDOS 6.0, 1991)
   311                                  IOC_OTHER	EQU	0	; Other device control J.K. 4/29/86
   312                                  IOC_SE		EQU	1	; SERIAL DEVICE CONTROL
   313                                  IOC_TC		EQU	2	; TERMINAL CONTROL
   314                                  IOC_SC		EQU	3	; SCREEN CONTROL
   315                                  IOC_KC		EQU	4	; KEYBOARD CONTROL
   316                                  IOC_PC		EQU	5	; PRINTER CONTROL
   317                                  IOC_DC		EQU	8	; DISK CONTROL (SAME AS RAWIO)
   318                                  
   319                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
   320                                  GEN_IOCTL_WRT_TRK   EQU   40H
   321                                  GEN_IOCTL_RD_TRK    EQU   60H
   322                                  GEN_IOCTL_FN_TST    EQU   20H	; USED TO DIFF. BET READS AND WRTS
   323                                  
   324                                  ;struc A_RETRYCOUNT  ; (IOCTL.INC, MSDOS 6.0, 1991)
   325                                  ;.RC_COUNT:	resw 	1
   326                                  ;endstruc
   327                                  
   328                                  ; 29/05/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
   329                                  
   330                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   331                                  
   332                                  ;struc SYSDEV
   333                                  ; .NEXT:  resd 1	;POINTER TO NEXT DEVICE HEADER
   334                                  ; .ATT:	  resw 1	;ATTRIBUTES OF THE DEVICE
   335                                  ; .STRAT: resw 1	;STRATEGY ENTRY POINT
   336                                  ; .INT:	  resw 1	;INTERRUPT ENTRY POINT
   337                                  ; .NAME:  resb 8	;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   338                                  ; .size:
   339                                  ;endstruc
   340                                  
   341                                  ; 27/03/2018 - DEVSYM.INC - MSDOS 3.3 - 24/07/1987
   342                                  
   343                                  ;
   344                                  ; ATTRIBUTE BIT MASKS
   345                                  ;
   346                                  ; CHARACTER DEVICES:
   347                                  ;
   348                                  ; BIT 15 -> MUST BE 1
   349                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   350                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
   351                                  ;     12 -> UNUSED
   352                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
   353                                  ;     10 -> MUST BE 0
   354                                  ;      9 -> MUST BE 0
   355                                  ;      8 -> UNUSED
   356                                  ;      7 -> UNUSED
   357                                  ;      6 -> UNUSED
   358                                  ;      5 -> UNUSED
   359                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
   360                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
   361                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
   362                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
   363                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
   364                                  ;
   365                                  ; BLOCK DEVICES:
   366                                  ;
   367                                  ; BIT 15 -> MUST BE 0
   368                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   369                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
   370                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
   371                                  ;	    THE SAME PLACE.
   372                                  ;     12 -> UNUSED
   373                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
   374                                  ;     10 -> MUST BE 0
   375                                  ;      9 -> MUST BE 0
   376                                  ;      8 -> UNUSED
   377                                  ;      7 -> UNUSED
   378                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
   379                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
   380                                  ;      5 -> UNUSED
   381                                  ;      4 -> UNUSED
   382                                  ;      3 -> UNUSED
   383                                  ;      2 -> UNUSED
   384                                  ;      1 -> UNUSED
   385                                  ;      0 -> UNUSED
   386                                  ;
   387                                  
   388                                  DEVTYP	       EQU   8000H	    ; BIT 15 - 1 IF CHAR, 0 IF BLOCK
   389                                  CHARDEV        EQU   8000H
   390                                  DEVIOCTL       EQU   4000H	    ; BIT 14 - CONTROL MODE BIT
   391                                  ISFATBYDEV     EQU   2000H	    ; BIT 13 - DEVICE USES FAT ID BYTES,
   392                                  				    ;  COMP MEDIA.
   393                                  OUTTILBUSY     EQU   2000H	    ; OUTPUT UNTIL BUSY IS ENABLED
   394                                  ISNET	       EQU   1000H	    ; BIT 12 - 1 IF A NET DEVICE, 0 IF
   395                                  				    ;  NOT.  CURRENTLY BLOCK ONLY.
   396                                  DEVOPCL        EQU   0800H	    ; BIT 11 - 1 IF THIS DEVICE HAS
   397                                  				    ;  OPEN,CLOSE AND REMOVABLE MEDIA
   398                                  				    ;  ENTRY POINTS, 0 IF NOT
   399                                  
   400                                  EXTENTBIT      EQU   0400H	    ; BIT 10 - CURRENTLY 0 ON ALL DEVS
   401                                  				    ;  THIS BIT IS RESERVED FOR FUTURE USE
   402                                  				    ;  TO EXTEND THE DEVICE HEADER BEYOND
   403                                  				    ;  ITS CURRENT FORM.
   404                                  
   405                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
   406                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
   407                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
   408                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
   409                                  
   410                                  ; 18/03/2019 - Retro DOS v4.0
   411                                  IOQUERY	       EQU   0080H	    ;Bit 7 - Supports generic IOCtl query M017
   412                                  
   413                                  DEV320	       EQU   0040H	    ;BIT 6 - FOR BLOCK DEVICES, THIS
   414                                  				    ;DEVICE SUPPORTS SET/GET MAP OF
   415                                  				    ;LOGICAL DRIVES, AND SUPPORTS
   416                                  				    ;GENERIC IOCTL CALLS.
   417                                  				    ;FOR CHARACTER DEVICES, THIS
   418                                  				    ;DEVICE SUPPORTS GENERIC IOCTL.
   419                                  				    ;THIS IS A DOS 3.2 DEVICE DRIVER.
   420                                  ISSPEC	       EQU   0010H	    ;BIT 4 - THIS DEVICE IS SPECIAL
   421                                  ISCLOCK        EQU   0008H	    ;BIT 3 - THIS DEVICE IS THE CLOCK DEVICE.
   422                                  ISNULL	       EQU   0004H	    ;BIT 2 - THIS DEVICE IS THE NULL DEVICE.
   423                                  ISCOUT	       EQU   0002H	    ;BIT 1 - THIS DEVICE IS THE CONSOLE OUTPUT.
   424                                  ISCIN	       EQU   0001H	    ;BIT 0 - THIS DEVICE IS THE CONSOLE INPUT.
   425                                  ; 23/07/2019 - Retro DOS v4.0
   426                                  EXTDRVR	       EQU   0002h ; (MSDOS 6.0, DEVSYM.INC, 1991)
   427                                  
   428                                  ; 27/05/2018 - Retro DOS v3.0 
   429                                  ; [MSDOS 3.3, MSDISK.ASM]
   430                                  
   431                                  struc INT13FRAME
   432 00000000 ????                    .oldbp:	resw 1
   433 00000002 ????                    .oldax:	resw 1
   434 00000004 ????                    .oldbx:	resw 1
   435 00000006 ????                    .oldcx:	resw 1
   436 00000008 ????                    .olddx:	resw 1
   437 0000000A ????????                .olddd:	resd 1
   438 0000000E ????                    .oldf:	resw 1
   439                                  .size:
   440                                  endstruc
   441                                  
   442                                  ; 02/06/2018 - Retro DOS v3.0
   443                                  ; [MSDOS 3.3, BIOSTRUC.INC]
   444                                  
   445                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   446 00000000 ????                    .bios_sd_leng:		resw 1				  
   447 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
   448                                  .bios_sd_scnd_modelbyte: 
   449 00000003 ??                      			resb 1					  
   450 00000004 ??                      			resb 1					  
   451 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
   452 00000006 ????????                			resb 4					  
   453                                  endstruc
   454                                  
   455                                  ;-----------------------------------------------------------------------------
   456                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
   457                                  ;-----------------------------------------------------------------------------
   458                                  ; 11/03/2019 - Retro DOS v4.0
   459                                  
   460                                  ; 18/03/2019
   461                                  DSK_TIMEOUT_ERR 	EQU	80h	; Time out error (no media present).
   462                                  DSK_CHANGELINE_ERR	EQU	06h	; Change line error
   463                                  DSK_ILLEGAL_COMBINATION EQU	0Ch	; Return code of ah=18h function.
   464                                  MULTI_TRK_ON		EQU	10000000b ; User specified multitrack=on,
   465                                  					  ; or system turns
   466                                  ; IOCTL.INC - MSDOS 6.0 - 1991
   467                                  ; ............................................................................
   468                                  
   469                                  ;*** J.K.
   470                                  ;General Guide -
   471                                  ;Category Code:
   472                                  ; 0... .... DOS Defined
   473                                  ; 1... .... User defined
   474                                  ; .xxx xxxx Code
   475                                  
   476                                  ;Function Code:
   477                                  ; 0... .... Return error if unsupported
   478                                  ; 1... .... Ignore if unsupported
   479                                  ; .0.. .... Intercepted by DOS
   480                                  ; .1.. .... Passed to driver
   481                                  ; ..0. .... Sends data/commands to device
   482                                  ; ..1. .... Quries data/info from device
   483                                  ; ...x .... Subfunction
   484                                  ;
   485                                  ; Note that "Sends/queries" data bit is intended only to regularize the
   486                                  ; function set.  It plays no critical role; some functions may contain both
   487                                  ; command and query elements. The convention is that such commands are
   488                                  ; defined as "sends data".
   489                                  
   490                                  ;*****************************;*
   491                                  ; BLOCK DRIVERS 	      ;*
   492                                  ;*****************************;*
   493                                  
   494                                  ; IOCTL SUB-FUNCTIONS
   495                                  IOCTL_GET_DEVICE_INFO	EQU	0
   496                                  IOCTL_SET_DEVICE_INFO	EQU	1
   497                                  IOCTL_READ_HANDLE	EQU	2
   498                                  IOCTL_WRITE_HANDLE	EQU	3
   499                                  IOCTL_READ_DRIVE	EQU	4
   500                                  IOCTL_WRITE_DRIVE	EQU	5
   501                                  IOCTL_GET_INPUT_STATUS	EQU	6
   502                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   503                                  IOCTL_CHANGEABLE?	EQU	8
   504                                  IOCTL_DeviceLocOrRem?	EQU	9
   505                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
   506                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
   507                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
   508                                  GENERIC_IOCTL		EQU	0Dh   ;13
   509                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
   510                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
   511                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
   512                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
   513                                  
   514                                  ; GENERIC IOCTL SUB-FUNCTIONS
   515                                  RAWIO			EQU	8
   516                                  
   517                                  ; RAWIO SUB-FUNCTIONS
   518                                  GET_DEVICE_PARAMETERS	EQU	60H
   519                                  SET_DEVICE_PARAMETERS	EQU	40H
   520                                  READ_TRACK		EQU	61H
   521                                  WRITE_TRACK		EQU	41H
   522                                  VERIFY_TRACK		EQU	62H
   523                                  FORMAT_TRACK		EQU	42H
   524                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
   525                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
   526                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
   527                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
   528                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
   529                                  
   530                                  
   531                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
   532                                  BUILD_DEVICE_BPB	EQU	000000001B
   533                                  
   534                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
   535                                  INSTALL_FAKE_BPB	EQU	000000001B
   536                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
   537                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
   538                                  
   539                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
   540                                  STATUS_FOR_FORMAT	EQU	000000001B
   541                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
   542                                  ; CODES RETURNED FROM FORMAT STATUS CALL
   543                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
   544                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
   545                                  
   546                                  ; DEVICETYPE VALUES
   547                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
   548                                  DEV_5INCH		EQU	0
   549                                  DEV_5INCH96TPI		EQU	1
   550                                  DEV_3INCH720KB		EQU	2
   551                                  DEV_8INCHSS		EQU	3
   552                                  DEV_8INCHDS		EQU	4
   553                                  DEV_HARDDISK		EQU	5
   554                                  DEV_OTHER		EQU	7
   555                                  ;DEV_3INCH1440KB	EQU	7
   556                                  DEV_3INCH2880KB		EQU	9
   557                                  ; Retro DOS v2.0 - 26/03/2018
   558                                  ;;DEV_TAPE		EQU	6
   559                                  ;;DEV_ERIMO		EQU	8
   560                                  ;DEV_3INCH2880KB	EQU	9
   561                                  DEV_3INCH1440KB		EQU	10
   562                                  
   563                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   564                                  					; CURRENTLY SUPPORT.
   565                                  MAX_DEV_TYPE		EQU	10
   566                                  
   567                                  struc A_SECTORTABLE
   568 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   569 00000002 ????                    .ST_SECTORSIZE:		resw	1
   570                                  .size:
   571                                  endstruc
   572                                  
   573                                  ; MSDOS 6.0 - BPB.INC - 1991
   574                                  ; ####
   575                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   576                                  ;
   577                                  ;	The BPB contains information about the disk structure. It dates
   578                                  ;	back to the earliest FAT systems and so FAT information is
   579                                  ;	intermingled with physical driver information.
   580                                  ;
   581                                  ;	A boot sector contains a BPB for its device; for other disks
   582                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   583                                  ;	information in the DPB.
   584                                  ;
   585                                  ;	The BDS structure contains a BPB within it.
   586                                  ;
   587                                  
   588                                  struc A_BPB
   589 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   590 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   591 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   592 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   593 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   594 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   595 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   596 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   597 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   598 0000000F ????                    .BPB_HEADS:		resw	1
   599 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   600 00000013 ????                    			resw	1
   601 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   602 00000017 ????                    			resw	1
   603 00000019 ????????????            			resb	6	; NOTE:  many times these
   604                                  ;					; 	 6 bytes are omitted
   605                                  ;					;	 when BPB manipulations
   606                                  ;					;	 are performed!
   607                                  .size:
   608                                  endstruc
   609                                  ; ####
   610                                  
   611                                  struc A_DEVICEPARAMETERS
   612 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   613 00000001 ??                      .DP_DEVICETYPE:		resb	1
   614 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   615 00000004 ????                    .DP_CYLINDERS:		resw	1
   616 00000006 ??                      .DP_MEDIATYPE:		resb	1
   617 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
   618 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   619 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   620                                  endstruc
   621                                  
   622                                  struc A_TRACKREADWRITEPACKET
   623 00000000 ??                      .TRWP_SPECIALFUNCTIONS:	resb	1
   624 00000001 ????                    .TRWP_HEAD:		resw	1
   625 00000003 ????                    .TRWP_CYLINDER:		resw	1
   626 00000005 ????                    .TRWP_FIRSTSECTOR:	resw	1
   627 00000007 ????                    .TRWP_SECTORSTOREADWRITE: resw	1
   628 00000009 ????????                .TRWP_TRANSFERADDRESS:	resd	1
   629                                  endstruc
   630                                  
   631                                  ;AN001; - FP_TRACKCOUNT is only meaningful when FP_SPECIALFUNCTIONS bit 1 = 1.
   632                                  struc A_FORMATPACKET
   633 00000000 ??                      .FP_SPECIALFUNCTIONS:	resb	1  ; db ?
   634 00000001 ????                    .FP_HEAD: 		resw	1  ; dw ? 
   635 00000003 ????                    .FP_CYLINDER:		resw	1  ; dw ?
   636 00000005 ????                    .FP_TRACKCOUNT:		resw	1  ; dw 1 ; !
   637                                  endstruc
   638                                  
   639                                  struc A_VERIFYPACKET
   640 00000000 ??                      .VP_SPECIALFUNCTIONS:	resb	1
   641 00000001 ????                    .VP_HEAD: 		resw	1
   642 00000003 ????                    .VP_CYLINDER:		resw	1
   643                                  endstruc
   644                                  
   645                                  struc A_MEDIA_ID_INFO
   646 00000000 ????                    .MI_LEVEL:		resw	1  ; dw 0 ; !		;J.K. 87 Info. level
   647 00000002 ????????                .MI_SERIAL:		resd	1  ; dd ?		;J.K. 87 Serial #
   648 00000006 <res Bh>                .MI_LABEL:		resb	11 ; db 11 DUP (' ') ;!	;J.K. 87 volume label
   649 00000011 ????????????????        .MI_SYSTEM:		resb 	8  ; db 8 DUP (' ')  ;!	;J.K. 87 File system type
   650                                  endstruc
   651                                  
   652                                  struc A_DISKACCESS_CONTROL	   ;AN002; Unpublished function. Only for Hard file.
   653 00000000 ??                      .DAC_SPECIALFUNCTIONS:	resb 	1  ; db 0 ; ! ;AN002; Always 0
   654 00000001 ??                      .DAC_ACCESS_FLAG: 	resb 	1  ; db 0 ; ! 
   655                                  				   ; Non Zero - allow disk I/O to unformatted hard file
   656                                  endstruc			   ; 0 - Disallow disk I/O to unformatted hard file
   657                                  
   658                                  
   659                                  struc A_MEDIA_SENSE			; Media sense structure added 5.00
   660 00000000 ??                      .MS_ISDEFAULT:		resb	1	; If 1 type returned is drv default
   661 00000001 ??                      .MS_DEVICETYPE:		resb	1	; Drive type 
   662 00000002 ??                      .MS_RESERVED1:		resb	1	; RESERVED
   663 00000003 ??                      .MS_RESERVED2:		resb 	1	; RESERVED 
   664                                  endstruc
   665                                  
   666                                  ;********************************;*
   667                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
   668                                  ;********************************;*
   669                                  
   670                                  ;RAWIO SUB-FUNCTIONS
   671                                  GET_RETRY_COUNT 	EQU	65H
   672                                  SET_RETRY_COUNT 	EQU	45H
   673                                  
   674                                  struc A_RETRYCOUNT
   675 00000000 ????                    .RC_COUNT:		resw 1
   676                                  endstruc
   677                                  
   678                                  ;********************************;*		;J.K. 4/29/86
   679                                  ; CHARACTER DEVICES (SCREEN)	 ;*
   680                                  ;********************************;*		;J.K. 4/29/86
   681                                  ;
   682                                  ;SC_MODE_INFO	 struc
   683                                  ;SC_INFO_LENGTH 	 DW	 9
   684                                  ;SC_MODE		 DB	 0
   685                                  ;SC_COLORS		 DW	 0
   686                                  ;SC_WIDTH		 DW	 0
   687                                  ;SC_LENGTH		 DW	 0
   688                                  ;SC_MODE_INFO	 ends
   689                                  ;
   690                                  ;SC_INFO_PACKET_LENGTH	 EQU	 9		 ;LENGTH OF THE INFO PACKET.
   691                                  
   692                                  ;SUBFUNCTIONS FOR CON$GENIOCTL
   693                                  ;GET_SC_MODE		 EQU	 60h
   694                                  ;SET_SC_MODE		 EQU	 40h
   695                                  ;The following subfunctions are reserved for installable CODE PAGE switch
   696                                  ;console devices. - J.K. 4/29/86
   697                                  ;Get_active_codepage	 equ	 6Ah
   698                                  ;Invoke_active_codepage  equ	 4Ah
   699                                  ;Start_designate_codepage equ	 4Ch
   700                                  ;End_designate_codepage  equ	 4Dh
   701                                  ;Get_list_of_designated_codepage equ 6Bh
   702                                  ;J.K. 4/29/86 *** End of Con$genioctl equates & structures
   703                                  
   704                                  ;-----------------------------------------------------------------------------
   705                                  ; MULT.INC - MSDOS 6.0 - 1991
   706                                  ;-----------------------------------------------------------------------------
   707                                  ; 18/03/2019
   708                                  
   709                                  ; The current set of defined multiplex channels is (* means documented):
   710                                  ;
   711                                  ;   Channel(h)  Issuer          Receiver    Function
   712                                  ;      00       server          PSPRINT     print job control
   713                                  ;     *01       print/apps      PRINT       Queueing of files
   714                                  ;      02       BIOS            REDIR       signal open/close of printers
   715                                  ;
   716                                  ;      05       command         REDIR       obtain text of net int 24 message
   717                                  ;     *06       server/assign   ASSIGN      Install check
   718                                  ;
   719                                  ;      08       external driver IBMBIO      interface to internal routines
   720                                  ;
   721                                  ;      10       sharer/server   Sharer      install check
   722                                  ;      11       DOS/server      Redir       install check/redirection funcs
   723                                  ;      12       sharer/redir    DOS         dos functions and structure maint
   724                                  ;      13       MSNET           MSNET       movement of NCBs
   725                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
   726                                  ;                                           of alternative INT_13 drivers after
   727                                  ;                                           boot_up
   728                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
   729                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
   730                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
   731                                  ;      16       WIN386          WIN386      Windows communications
   732                                  ;      17       Clipboard       WINDOWS     Clipboard interface
   733                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
   734                                  ;      19       Shell
   735                                  ;      1A       Ansi.sys
   736                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
   737                                  ;
   738                                  ;      40h      OS/2
   739                                  ;      41h      Lanman
   740                                  ;      42h      Lanman
   741                                  ;      43h      Himem
   742                                  ;                               AL = 20h    reserved for Mach 20 Himem support
   743                                  ;                               AL = 30h    reserved for Himem external A20 code
   744                                  ;      44h      Dosextender
   745                                  ;      45H      Windows profiler
   746                                  ;      46h      Windows/286 DOS extender
   747                                  ;      47h      Basic Compiler Vn. 7.0
   748                                  ;      48h      Doskey
   749                                  ;      49h      DOS 5.x install 
   750                                  ;      4Ah      Multi Purpose
   751                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
   752                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
   753                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
   754                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
   755                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
   756                                  ;
   757                                  ;                multSmartdrv           10h
   758                                  ;                multMagicdrv           11h
   759                                  ;      4Bh      Task Switcher API
   760                                  ;
   761                                  ;      4Ch      APPS            APM             Advanced power management
   762                                  ;      4Dh      Kana Kanji Converter, MSKK
   763                                  ;
   764                                  ;      51h      ODI real mode support driver (for Chicago)
   765                                  ;
   766                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
   767                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
   768                                  ;
   769                                  ;      55h      COMMAND.COM
   770                                  ;                multCOMFIRST           0 - API to determine whether 1st
   771                                  ;                                           instance of command.com
   772                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
   773                                  ;                                           instance of ROM COMMAND
   774                                  ;      56h      Sewell Development
   775                                  ;               INTERLNK
   776                                  ;
   777                                  ;      57h      Iomega Corp.
   778                                  ;
   779                                  ;      AB       Unspecified IBM use
   780                                  ;      AC       Graphics
   781                                  ;      AD       NLS (toronto)
   782                                  ;      AE
   783                                  ;      AF       Mode
   784                                  ;      B0       GRAFTABL        GRAFTABL
   785                                  ;
   786                                  ;      D7       Banyan VINES
   787                                  
   788                                  multMULT	  equ	4Ah
   789                                  
   790                                  multMULTSWPDSK	  equ	0	; Swap Disk in drive A (BIOS)
   791                                  multMULTGETHMAPTR equ	1	; Get available HMA & ptr
   792                                  multMULTALLOCHMA  equ	2	; Allocate HMA (bx == no of bytes)
   793                                  multMULTTASKSHELL equ	5	; Shell/switcher API
   794                                  multMULTRPLTOM	  equ	6	; Top Of Memory for RPL support
   795                                  
   796                                  ;-----------------------------------------------------------------------------
   797                                  ; WIN386.INC - MSDOS 6.0 - 1991
   798                                  ;-----------------------------------------------------------------------------
   799                                  ; 18/03/2019
   800                                  
   801                                  ; WIN386.INC
   802                                  ;
   803                                  ;  Symbols and structures relating to WIN386 support.
   804                                  ;
   805                                  ;  Used by files in both the DOS and the BIOS.
   806                                  ;
   807                                  ;  Created: 7-13-89 by MRW
   808                                  ;
   809                                  
   810                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
   811                                  
   812                                  MultWin386		equ     16h	; Int 2f multiplex number
   813                                  
   814                                  Win386_Init		equ	05h	; Win386 initialization
   815                                  Win386_Exit		equ	06h	; Win386 exit
   816                                  Win386_Devcall		equ	07h	; Win386 device call out
   817                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
   818                                  
   819                                  ; ============================================================================
   820                                  
   821                                  ;bpbx		struc ;	(sizeof=0x19)	
   822                                  ;
   823                                  ;bytespersec	dw ?			; base 10
   824                                  ;secperclust	db ?			; base 10
   825                                  ;rsvdsecs	dw ?			; base 10
   826                                  ;numfats	db ?			; base 10
   827                                  ;rootdirents	dw ?			; base 10
   828                                  ;totalsize16	dw ?			; base 10
   829                                  ;mediaid	db ?
   830                                  ;fatsecs	dw ?			; base 10
   831                                  ;secpertrack	dw ?			; base 10
   832                                  ;heads		dw ?			; base 10
   833                                  ;hiddensecs_lw	dw ?			; base 10
   834                                  ;hiddensecs_hw	dw ?			; base 10
   835                                  ;totalsecs_lw	dw ?			; base 10
   836                                  ;totalsecs_hw	dw ?			; base 10
   837                                  ;
   838                                  ;bpbx		ends
   839                                  
   840                                  ;-----------------------------------------------------------------------------
   841                                  ;
   842                                  ; +-------------------------------------------------------------------------+
   843                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
   844                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
   845                                  ; |			 Licensed to: Freeware version			    |
   846                                  ; +-------------------------------------------------------------------------+
   847                                  ;
   848                                  ; Input	MD5   :	B2FA03653E5C5D545327EE28B8A24356
   849                                  ; Input	CRC32 :	20FC79BF
   850                                  
   851                                  ;-----------------------------------------------------------------------------
   852                                  
   853                                  ;		.386
   854                                  ;		.model flat
   855                                  
   856                                  ; ============================================================================
   857                                  
   858                                  ; 10/12/2022
   859                                  ; 09/12/2022
   860                                  ; 21/10/2022
   861                                  ; 19/10/2022
   862                                  ; 17/10/2022, 18/10/2022
   863                                  ; 15/10/2022, 16/10/2022
   864                                  ; 03/10/2022
   865                                  ; 02/10/2022
   866                                  ; 01/10/2022 - Erdogan Tan
   867                                  
   868                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
   869                                  
   870                                  ;-----------------------------------------------------------------------------
   871                                  ; Start of (MSDOS 5.0) IO.SYS (IBMBIO.COM)
   872                                  ;-----------------------------------------------------------------------------
   873                                  
   874                                  		; [ORG 0]		; segment 0x0070h
   875                                  
   876                                  ;=============================================================================
   877                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
   878                                  ;=============================================================================
   879                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
   880                                  
   881                                  section .BIOSDATA vstart=0
   882                                  
   883                                  ;--- DOSBIOS data segment ----------------------------------------------------
   884                                  ;-----------------------------------------------------------------------------
   885                                  
   886                                  ;Bios_Data segment
   887                                  
   888                                  BData_start:				
   889 00000000 E96017                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
   890                                  ; ----------------------------------------------------------------------------
   891                                  
   892 00000003 0000                    DosDataSg:	dw 0
   893                                  
   894                                  ; DOS's int 2f handler will exit via a jump through here.
   895                                  ; This is how the BIOS hooks int2f
   896                                  			
   897 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
   898 00000006 [9108]                  off_706:	dw int_2f
   899 00000008 7000                    word_708:	dw 70h			; KERNEL_SEGMENT
   900                                  
   901 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
   902                                  					; This is to maintain binary compatibility
   903                                  					; with DISK based DOS 5.0
   904                                  
   905                                  ; This is a byte used for special key handling in the resident
   906                                  ; console device driver. It must be here so that it can be included
   907                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
   908                                  
   909 0000000C 00                      altah:		db 0			; special key handling
   910                                  			
   911 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
   912 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
   913                                  
   914                                  ; PTRSAV - pointer save
   915                                  ;
   916                                  ; This variable holds the pointer to the Request Header passed by a program
   917                                  ; wishing to use a device driver. When the strategy routine is called it 
   918                                  ; puts the address of the Request header in this variable and returns.
   919                                  		
   920 00000012 00000000                ptrsav:		dd 0			
   921                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
   922 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
   923 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero			
   924 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through	
   925 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).			
   926 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
   927 00000021 0000                    auxnum:		dw 0			; which aux device was requested			
   928                                  
   929                                  ;-----------------------------------------------------------------------------
   930                                  
   931                                  res_dev_list:
   932                                  
   933                                  ; Device Header for the CON Device Driver
   934                                  
   935                                  CONHeader:				; HEADER FOR DEVICE "CON"
   936 00000023 [3500]                  		dw auxdev2
   937 00000025 7000                    		dw 70h	
   938 00000027 1380                    word_727:	dw 8013h
   939 00000029 [F506]                  		dw strategy
   940 0000002B [0007]                  		dw con_entry
   941 0000002D 434F4E2020202020        aCon:		db 'CON     '           
   942 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"	
   943 00000037 7000                    		dw 70h
   944 00000039 0080                    		dw 8000h
   945 0000003B [F506]                  		dw strategy
   946 0000003D [2107]                  		dw aux0_entry
   947 0000003F 4155582020202020        aAux:		db 'AUX     '
   948 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
   949 00000049 7000                    		dw 70h
   950 0000004B C0A0                    word_74B:	dw 0A0C0h
   951 0000004D [F506]                  		dw strategy
   952 0000004F [0507]                  		dw prn0_entry
   953 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
   954 00000059 [6B00]                  timdev:		dw dskdev	
   955 0000005B 7000                    		dw 70h
   956 0000005D 0880                    		dw 8008h
   957 0000005F [F506]                  		dw strategy
   958 00000061 [3907]                  		dw tim_entry
   959 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
   960 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
   961 0000006D 7000                    		dw 70h
   962 0000006F C208                    		dw 8C2h
   963                                  		;dw offset strategy
   964                                  		;dw offset dsk_entry
   965                                  		; 19/10/2022
   966 00000071 [F506]                  		dw strategy
   967 00000073 [3E07]                  		dw dsk_entry
   968                                  
   969                                  ; maximum number of drives
   970                                  
   971 00000075 04                      drvmax:		db 4			
   972 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed		
   973 00000077 00                      fhave96:	db 0			; flag to indicate presence of
   974                                  					; 96tpi support		
   975 00000078 00                      single:		db 0			; used to detect single drive systems		
   976 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
   977                                  					; used by console driver.			
   978 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
   979                                  					; drive. (examined by checksingle).
   980                                  		
   981 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"	
   982 0000007D 7000                    		dw 70h
   983 0000007F 0080                    		dw 8000h
   984 00000081 [F506]                  		dw strategy
   985 00000083 [2107]                  		dw aux0_entry
   986 00000085 434F4D3120202020        aCom1:		db 'COM1    '
   987 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1	
   988 0000008F 7000                    		dw 70h
   989 00000091 C0A0                    		dw 0A0C0h
   990 00000093 [F506]                  		dw strategy
   991 00000095 [0C07]                  		dw prn1_entry
   992 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
   993 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2	
   994 000000A1 7000                    		dw 70h
   995 000000A3 C0A0                    		dw 0A0C0h
   996 000000A5 [F506]                  		dw strategy
   997 000000A7 [1307]                  		dw prn2_entry
   998 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
   998 000000B2 0000               
   999                                  
  1000                                  ;M058; Start of changes
  1001                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  1002                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  1003                                  ;cannot change for them to work. Even ProComm does this.
  1004                                  
  1005 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h		
  1006                                  
  1007 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  1008 000000BA 7000                    		dw 70h
  1009 000000BC C0A0                    		dw 0A0C0h
  1010 000000BE [F506]                  		dw strategy
  1011 000000C0 [1A07]                  		dw prn3_entry
  1012 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  1013 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  1014 000000CC 7000                    		dw 70h
  1015 000000CE 0080                    		dw 8000h
  1016 000000D0 [F506]                  		dw strategy
  1017 000000D2 [2707]                  		dw aux1_entry
  1018                                  		; 19/10/2022
  1019 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  1020                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  1021 000000DC [EE00]                  		dw com4dev
  1022 000000DE 7000                    		dw 70h
  1023 000000E0 0080                    		dw 8000h
  1024                                  		;dw offset strategy
  1025                                  		;dw offset aux2_entry
  1026 000000E2 [F506]                  		dw strategy
  1027 000000E4 [2D07]                  		dw aux2_entry	
  1028 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  1029 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"	
  1030 000000F0 7000                    		dw 70h
  1031 000000F2 0080                    		dw 8000h
  1032 000000F4 [F506]                  		dw strategy
  1033 000000F6 [3307]                  		dw aux3_entry
  1034 000000F8 434F4D3420202020        		db 'COM4    '
  1035                                  
  1036                                  ;-----------------------------------------------------------------------------
  1037                                  
  1038 00000100 10                      RomVectors:	db 10h			
  1039 00000101 00000000                Old10:		dd 0
  1040 00000105 13                      		db 13h
  1041 00000106 00000000                Old13:		dd 0			
  1042 0000010A 15                      		db 15h
  1043 0000010B 00000000                Old15:		dd 0			
  1044 0000010F 19                      		db 19h
  1045 00000110 00000000                Old19:		dd 0
  1046 00000114 1B                      		db 1Bh
  1047 00000115 00000000                Old1B:		dd 0
  1048                                  
  1049                                  ;EndRomVectors	equ $
  1050                                  
  1051                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  1052                                  
  1053                                  ;-----------------------------------------------------------------------------
  1054                                  
  1055 00000119 [4E03]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  1056 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  1057                                  
  1058                                  ; (MSDOS 3.3) NOTE:
  1059                                  ; Some floppy drives do not have changeline support. The result is a
  1060                                  ; large amount of inefficiency in the code. A media-check always returns
  1061                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  1062                                  ; always discard any cached data.
  1063                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  1064                                  ; The following three items are used to do this. The logical door latch is
  1065                                  ; based on the premise that it is not physically possible to change floppy
  1066                                  ; disks in a drive in under two seconds (most people take about 10). The
  1067                                  ; logical door latch is implemented by saving the time of the last successful
  1068                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  1069                                  ; current time is compared to the saved time. If less than two seconds have
  1070                                  ; passed then the value "No Change" is returned. If more than two seconds
  1071                                  ; have passed the value "Don't Know" is returned.
  1072                                  ;    There is one complecation to this algorithm. Some programs change the
  1073                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  1074                                  ; This possibility is detected by counting the number of disk operations
  1075                                  ; which occur without any time passing. If this count exceeds the value of
  1076                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  1077                                  ; Know". The variable "AccessCount" is used to keep track of the number
  1078                                  ; of disk operation which occur without the time changing.
  1079                                  
  1080 0000011D 00                      accesscount:	db 0			
  1081 0000011E FF                      tim_drv:	db 0FFh			
  1082 0000011F 00                      medbyt:		db 0
  1083                                  wrtverify:	; 15/10/2022			
  1084 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  1085 00000121 00                      verify:		db 0			; 1 if verify after write
  1086 00000122 0000                    seccnt:		dw 0			
  1087 00000124 00                      		db 0			; -- pad where hardnum was
  1088 00000125 01                      dsktnum:	db 1			; number of diskette drives			
  1089                                  
  1090                                  ; (MSDOS 3.3) NOTE:
  1091                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  1092                                  ; have to be made to read the diskette. Consequently a large head settle
  1093                                  ; time was always used in the I/O operations. To get around this problem
  1094                                  ; we need to continually adjust the head settle time. The following
  1095                                  ; algorithm is used:
  1096                                  ;
  1097                                  ;   Get the current head settle value.
  1098                                  ;   If it is 1, then
  1099                                  ;	set slow = 15
  1100                                  ;   else
  1101                                  ;	set slow = value
  1102                                  ;   ...
  1103                                  ;   if we are seeking and writing then
  1104                                  ;	use slow
  1105                                  ;   else
  1106                                  ;	use fast
  1107                                  ;   ...
  1108                                  ;   restore current head settle value
  1109                                  
  1110 00000126 00                      motorstartup:	db 0			; value from table
  1111 00000127 00                      settlecurrent:	db 0			; value	from table
  1112 00000128 00                      settleslow:	db 0			; slow settle value
  1113 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  1114 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  1115 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  1116 0000012C 09                      eot:		db 9			
  1117 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table			
  1118 00000131 00                      cursec:		db 0			; current sector
  1119 00000132 00                      curhd:		db 0			; current head
  1120 00000133 0000                    curtrk:		dw 0			; current track
  1121 00000135 0000                    spsav:		dw 0			; save the stack pointer
  1122 00000137 08                      formt_eot:	db 8			; eot used for format
  1123 00000138 00                      hdnum:		db 0			; head number
  1124 00000139 0000                    trknum:		dw 0			; track	being manipulated
  1125 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  1126                                  
  1127                                  ;-----------------------------------------------------------------------------
  1128                                  
  1129                                  ; disk errors returned from the IBM rom
  1130                                  
  1131 0000013C CC                      errin:		db 0CCh			; write	fault error
  1132 0000013D 80                      		db 80h			; no response
  1133 0000013E 40                      		db 40h			; seek failure
  1134 0000013F 10                      		db 10h			; bad crc
  1135 00000140 08                      		db 8			; dma overrun
  1136 00000141 06                      		db 6			; media	change
  1137 00000142 04                      		db 4			; sector not found
  1138 00000143 03                      		db 3			; write	attempt	to write-protect disk
  1139 00000144 00                      lsterr:		db 0			; all other errors
  1140                                  
  1141                                  ; returned error codes corresponding to above
  1142                                  
  1143 00000145 0A                      errout:		db 10			; write	fault error
  1144 00000146 02                      		db 2			; no response
  1145 00000147 06                      		db 6			; seek failure
  1146 00000148 04                      		db 4			; bad crc
  1147 00000149 04                      		db 4			; dma overrun
  1148 0000014A 0F                      		db 15			; invalid media	change
  1149 0000014B 08                      		db 8			; sector not found
  1150 0000014C 00                      		db 0			; write	attempt	to write-protect disk
  1151 0000014D 0C                      		db 12			; general error
  1152                                  
  1153                                  ;-----------------------------------------------------------------------------
  1154                                  
  1155                                  ; 30/12/2018 - Retro DOS v4.0
  1156                                  
  1157                                  ; read in boot sector here, read done in readboot.
  1158                                  ; also read sector for dma check for hard disk.
  1159                                  ;
  1160                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  1161                                  ; in them which causes the byte after the buffer to be trashed
  1162                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  1163                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  1164                                  ; makes that system more-or-less work.
  1165                                  
  1166                                  disksector:	;db 512 dup(0)		; read in boot sector here
  1167                                  		; 19/10/2022
  1168 0000014E 00<rep 200h>            		times 512 db 0
  1169                                  
  1170                                  ;-----------------------------------------------------------------------------
  1171                                  
  1172                                  ; 30/12/2018 - Retro DOS v4.0
  1173                                  ;-----------------------------------------------------------------------------
  1174                                  ; 25/05/2018 (04/04/2018)
  1175                                  ;*****************************************************************************
  1176                                  ;	"bds" contains information for each drive in the system.
  1177                                  ;	various values are patched whenever actions are performed.
  1178                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  1179                                  ;	the bpb has not been filled. link also set to -1 to signify end
  1180                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  1181                                  ;	that the parameters have not been set.
  1182                                  
  1183                                  bds1:		;dw offset bds2
  1184 0000034E [B203]                  		dw bds2	; 19/10/2022
  1185 00000350 7000                    		dw 70h			; dword	link to	next structure
  1186 00000352 00                      		db 0			; int 13h drive	number
  1187 00000353 00                      		db 0			; logical drive	letter
  1188 00000354 0002                    fdrive1:	dw 512			
  1189                                  					; physical sector size in bytes
  1190 00000356 FF                      		db 0FFh			; sectors/allocation unit
  1191 00000357 0100                    		dw 1			; reserved sectors for dos
  1192 00000359 02                      		db 2			; no of	file allocation	tables
  1193 0000035A 4000                    		dw 64			; number of root directory entries
  1194 0000035C 6801                    		dw 360			; number sectors (at 512 bytes each)
  1195 0000035E 00                      		db 0			; media	descriptor, initially 0
  1196 0000035F 0200                    		dw 2			; number of fat	sectors
  1197 00000361 0900                    		dw 9			; sector limit (sectors	per track)
  1198 00000363 0100                    		dw 1			; head limit (number of	heads -	1)
  1199 00000365 0000                    		dw 0			; hidden sector	count (low word)
  1200 00000367 0000                    		dw 0			; hidden sector	(high)
  1201 00000369 0000                    		dw 0			; number sectors (low)
  1202 0000036B 0000                    		dw 0			; number sectors (high)
  1203 0000036D 00                      		db 0			; true => large	fats
  1204 0000036E 0000                    		dw 0			; open ref. count
  1205 00000370 03                      		db 3			; form factor
  1206 00000371 2000                    		dw 20h			; various flags
  1207 00000373 2800                    		dw 40			; number of cylinders
  1208 00000375 0002                    recommended_bps: dw 512			; recommended bps for this drive
  1209 00000377 01                      		db 1
  1210 00000378 0100                    		dw 1
  1211 0000037A 02                      		db 2
  1212 0000037B E000                    		dw 224			; number of root directory entries
  1213 0000037D 6801                    		dw 360
  1214 0000037F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  1215 00000380 0200                    		dw 2
  1216 00000382 0900                    		dw 9
  1217 00000384 0200                    		dw 2
  1218 00000386 0000                    		dw 0
  1219 00000388 0000                    		dw 0
  1220 0000038A 0000                    		dw 0
  1221 0000038C 0000                    		dw 0
  1222                                  		;db 6 dup(0)
  1223 0000038E 00<rep 6h>              		times 6 db 0		; 19/10/2022
  1224 00000394 FF                      		db 0FFh			; last track accessed on this drive
  1225 00000395 FFFF                    word_A95:	dw 0FFFFh		; keep these two contiguous (?)
  1226 00000397 FFFF                    		dw 0FFFFh
  1227 00000399 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  1227 000003A2 202000             
  1228 000003A5 00000000                		dd 0			; current volume serial	from boot record
  1229 000003A9 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  1230                                  ; ----
  1231                                  
  1232 000003B2 [1604]                  bds2:		dw bds3		
  1233 000003B4 7000                    		dw 70h
  1234 000003B6 00                      		db 0
  1235 000003B7 00                      		db 0
  1236 000003B8 0002                    fdrive2:	dw 512			
  1237 000003BA FF0100024000680100-     byte_ABA:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1237 000003C3 020009000100       
  1238 000003C9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1238 000003D2 00000320002800     
  1239 000003D9 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1239 000003E2 01F002000900       
  1240 000003E8 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1240 000003F1 00000000000000FF   
  1241 000003F9 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1241 00000402 4D                 
  1242 00000403 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1242 0000040C 00464154           
  1243 00000410 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1244                                  ; ----
  1245                                  
  1246 00000416 [7A04]                  bds3:		dw bds4		
  1247 00000418 7000                    		dw 70h
  1248 0000041A 00                      		db 0
  1249 0000041B 00                      		db 0
  1250 0000041C 0002                    fdrive3:	dw 512			
  1251 0000041E FF0100024000680100-     		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1251 00000427 020009000100       
  1252 0000042D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1252 00000436 00000320002800     
  1253 0000043D 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1253 00000446 01F002000900       
  1254 0000044C 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1254 00000455 00000000000000FF   
  1255 0000045D FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1255 00000466 4D                 
  1256 00000467 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1256 00000470 00464154           
  1257 00000474 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1258                                  ; ----
  1259                                  
  1260 0000047A FFFF                    bds4:		dw 0FFFFh		
  1261 0000047C 7000                    		dw 70h
  1262 0000047E 00                      		db 0
  1263 0000047F 00                      		db 0
  1264 00000480 0002                    fdrive4:	dw 512			
  1265 00000482 FF0100024000680100-     byte_B82:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1265 0000048B 020009000100       
  1266 00000491 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1266 0000049A 00000320002800     
  1267 000004A1 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1267 000004AA 01F002000900       
  1268 000004B0 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1268 000004B9 00000000000000FF   
  1269 000004C1 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1269 000004CA 4D                 
  1270 000004CB 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1270 000004D4 00464154           
  1271 000004D8 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1272                                  
  1273                                  ;-----------------------------------------------------------------------------
  1274                                  
  1275 000004DE 03                      sm92:		db 3			; .spf			
  1276 000004DF 09                      		db 9			; .spt
  1277 000004E0 70                      		db 112	; 70h		; .cdire
  1278 000004E1 A005                    		dw 1440	; 2*9*80	; .csec
  1279 000004E3 02                      		db 2			; .spau
  1280 000004E4 02                      		db 2			; .chead
  1281                                  
  1282 000004E5 00                      keyrd_func:	db 0			
  1283 000004E6 01                      keysts_func:	db 1			
  1284 000004E7 00                      printdev:	db 0			; printer device index
  1285                                  
  1286                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  1287 000004E8 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  1288                                  
  1289 000004F0 0000                    daycnt:		dw 0			
  1290 000004F2 00                      t_switch:	db 0			; flag for updating daycnt
  1291 000004F3 00                      havecmosclock:	db 0			
  1292 000004F4 13                      base_century:	db 19			
  1293 000004F5 50                      base_year:	db 80			
  1294 000004F6 1F1C1F1E1F1E1F1F1E-     month_tab:	db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 
  1294 000004FF 1F1E1F             
  1295 00000502 [FD14]                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  1296 00000504 7000                    		dw 70h ; 17/10/2022	
  1297 00000506 [2C14]                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  1298 00000508 7000                    		dw 70h ; 17/10/2022
  1299 0000050A 00                      set_id_flag:	db 0			; flag for getbp routine
  1300 0000050B 464154313220202000      fat_12_id:	db 'FAT12   ',0         
  1301 00000514 464154313620202000      fat_16_id:	db 'FAT16   ',0         
  1302 0000051D 4E4F204E414D452020-     vol_no_name:	db 'NO NAME    ',0      
  1302 00000526 202000             
  1303                                  
  1304 00000529 0000                    temp_h:		dw 0			; temporary for	32 bit calculation
  1305 0000052B 0000                    start_sec_h:	dw 0			; starting sector number high word
  1306 0000052D 0000                    saved_word:	dw 0			; tempory saving place for a word
  1307 0000052F 0000                    multrk_flag:	dw 0			
  1308 00000531 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  1309 00000532 0000                    vretry_cnt:	dw 0			
  1310 00000534 0000                    soft_ecc_cnt:	dw 0			
  1311 00000536 00                      multitrk_format_flag: db 0		; multi	track format request flag
  1312 00000537 0000                    xfer_seg:	dw 0			; temp for transfer segment
  1313                                  
  1314                                  ; variables for msdioctl.asm module
  1315                                  
  1316                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  1317                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  1318                                  ;	n	bytes per sector
  1319                                  ;      ---	----------------
  1320                                  ;	0	      128
  1321                                  ;	1	      256
  1322                                  ;	2	      512
  1323                                  ;	3	     1024
  1324                                  
  1325                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  1326                                  ;					; we support (was 40 in dos 3.2)
  1327                                  
  1328 00000539 2400                    sectorspertrack: dw 36			
  1329 0000053B 00000102                tracktable:	db 0, 0, 1, 2		
  1330 0000053F 00000202                		db 0, 0, 2, 2
  1331 00000543 00000302                		db 0, 0, 3, 2
  1332 00000547 00000402                		db 0, 0, 4, 2
  1333 0000054B 00000502                		db 0, 0, 5, 2
  1334 0000054F 00000602                		db 0, 0, 6, 2
  1335 00000553 00000702                		db 0, 0, 7, 2
  1336 00000557 00000802                		db 0, 0, 8, 2
  1337 0000055B 00000902                		db 0, 0, 9, 2
  1338 0000055F 00000A02                		db 0, 0, 10, 2
  1339 00000563 00000B02                		db 0, 0, 11, 2
  1340 00000567 00000C02                		db 0, 0, 12, 2
  1341 0000056B 00000D02                		db 0, 0, 13, 2
  1342 0000056F 00000E02                		db 0, 0, 14, 2
  1343 00000573 00000F02                		db 0, 0, 15, 2
  1344 00000577 00001002                		db 0, 0, 16, 2
  1345 0000057B 00001102                		db 0, 0, 17, 2
  1346 0000057F 00001202                		db 0, 0, 18, 2
  1347 00000583 00001302                		db 0, 0, 19, 2
  1348 00000587 00001402                		db 0, 0, 20, 2
  1349 0000058B 00001502                		db 0, 0, 21, 2
  1350 0000058F 00001602                		db 0, 0, 22, 2
  1351 00000593 00001702                		db 0, 0, 23, 2
  1352 00000597 00001802                		db 0, 0, 24, 2
  1353 0000059B 00001902                		db 0, 0, 25, 2
  1354 0000059F 00001A02                		db 0, 0, 26, 2
  1355 000005A3 00001B02                		db 0, 0, 27, 2
  1356 000005A7 00001C02                		db 0, 0, 28, 2
  1357 000005AB 00001D02                		db 0, 0, 29, 2
  1358 000005AF 00001E02                		db 0, 0, 30, 2
  1359 000005B3 00001F02                		db 0, 0, 31, 2
  1360 000005B7 00002002                		db 0, 0, 32, 2
  1361 000005BB 00002102                		db 0, 0, 33, 2
  1362 000005BF 00002202                		db 0, 0, 34, 2
  1363 000005C3 00002302                		db 0, 0, 35, 2
  1364 000005C7 00002402                		db 0, 0, 36, 2
  1365 000005CB 00<rep 6Ch>             		times 108 db 0		; 19/10/2022
  1366                                  		;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  1367                                  					; times	((4*63)	- 144) db 0
  1368                                  
  1369                                  ;-----------------------------------------------------------------------------
  1370                                  
  1371                                  ; this is a real ugly place to put this
  1372                                  ; it should really go in the bds
  1373                                  
  1374 00000637 00                      mediatype:	db 0			
  1375 00000638 00                      media_set_for_format: db 0		; 1 if we have done an int 13 set media
  1376                                  					; type for format call
  1377 00000639 00                      had_format_error: db 0			; 1 if the previous format operation
  1378                                  					; failed.
  1379                                  
  1380                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  1381                                  ; the one passed by "new roms" before we perform a format operation. the old
  1382                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  1383                                  ; this table does not contain the previously saved dpt.
  1384                                  		
  1385 0000063A FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  1386 0000063E FF                      model_byte:	db 0FFh			; model	byte set at init time
  1387 0000063F 00                      secondary_model_byte: db 0
  1388                                  		
  1389 00000640 00                      int19sem:	db 0			; indicate that all int 19
  1390                                  					; initialization is complete
  1391                                  		
  1392                                  ;; we assume the following remain contiguous and their order doesn't change
  1393                                  ;i19_lst:
  1394                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  1395                                  ;	public	int19old&aa
  1396                                  ;		db	aa&h	; store the number as a byte
  1397                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  1398                                  ;	endm
  1399                                  
  1400                                  ; 21/10/2022
  1401                                  
  1402 00000641 02                      i19_lst:	db 2			
  1403                                  					; Int19old&aa
  1404 00000642 FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  1405 00000646 08                      		db 8
  1406 00000647 FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  1407 0000064B 09                      		db 9
  1408 0000064C FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  1409 00000650 0A                      		db 0Ah
  1410 00000651 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  1411 00000655 0B                      		db 0Bh
  1412 00000656 FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  1413 0000065A 0C                      		db 0Ch
  1414 0000065B FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  1415 0000065F 0D                      		db 0Dh
  1416 00000660 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  1417 00000664 0E                      		db 0Eh
  1418 00000665 FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  1419 00000669 70                      		db 70h
  1420 0000066A FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  1421 0000066E 72                      		db 72h
  1422 0000066F FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  1423 00000673 73                      		db 73h
  1424 00000674 FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  1425 00000678 74                      		db 74h
  1426 00000679 FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  1427 0000067D 76                      		db 76h
  1428 0000067E FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  1429 00000682 77                      		db 77h
  1430 00000683 FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  1431                                  
  1432                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  1433                                  
  1434                                  ;-----------------------------------------------------------------------------
  1435                                  
  1436 00000687 [5403]                  dskdrvs:	dw fdrive1	
  1437 00000689 [B803]                  		dw fdrive2
  1438 0000068B [1C04]                  		dw fdrive3
  1439 0000068D [8004]                  		dw fdrive4
  1440                                  
  1441                                  ;M011 -- made all hard drive stuff variable
  1442                                  		;dw 22 dup(0)		; up to	26 drives for mini disks
  1443 0000068F 0000<rep 16h>           		times 22 dw 0	; 19/10/2022
  1444                                  
  1445                                  ;-----------------------------------------------------------------------------
  1446                                  
  1447                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  1448                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  1449                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  1450                                  
  1451                                  ;variables for dynamic relocatable modules
  1452                                  ;these should be stay resident.
  1453                                  
  1454 000006BB 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  1455                                  					; for p12 machine
  1456                                  
  1457                                  ; data structures for real-time date and time
  1458                                  			
  1459 000006BF 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  1460                                  
  1461 000006C3 0000                    month_table:	dw 0			; january
  1462 000006C5 1F00                    		dw 31			; february
  1463 000006C7 3B00                    		dw 59
  1464 000006C9 5A00                    		dw 90
  1465 000006CB 7800                    		dw 120
  1466 000006CD 9700                    		dw 151
  1467 000006CF B500                    		dw 181
  1468 000006D1 D400                    		dw 212
  1469 000006D3 F300                    		dw 243
  1470 000006D5 1101                    		dw 273
  1471 000006D7 3001                    		dw 304
  1472 000006D9 4E01                    		dw 334			; december
  1473                                  
  1474 000006DB 0000                    daycnt2:	dw 0			
  1475 000006DD 00                      feb29:		db 0			; february 29 in a leap	year flag
  1476                                  
  1477                                  ;-----------------------------------------------------------------------------
  1478                                  ;
  1479                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  1480                                  ; by Erdogan Tan (Istanbul) ! free source code !
  1481                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  1482                                  
  1483                                  ; ----------------------------------------------------------------------------
  1484                                  
  1485                                  ;************************************************************************
  1486                                  ;*									*
  1487                                  ;*	Entry points into Bios_Code routines. The segment values	*
  1488                                  ;*	  are plugged in by seg_reinit.					*
  1489                                  ;*									*
  1490                                  ;************************************************************************
  1491                                  
  1492                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  1493                                  ; BIOSCODE_SEGMENT equ 2C7h
  1494                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  1495                                  
  1496                                  ; 01/10/2022 - Erdogan Tan
  1497                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  1498                                  ;  addresses, they will be changed to table labels later)
  1499                                  
  1500                                  ; 09/12/2022
  1501                                  %if 0
  1502                                  cdev:		dw 43h,	2C7h		; chardev_entry
  1503                                  					; at 2C7h:43h =	70h:25B3h
  1504                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  1505                                  					; at 2C7h:396h = 70h:2906h
  1506                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  1507                                  					; at 2C7h:1302h	= 70h:3872h
  1508                                  i13x:		dw 154Bh, 2C7h		; i13z
  1509                                  					; at 2C7h:154Bh	= 70h:3ABBh
  1510                                  %endif
  1511                                  
  1512                                  ; 09/12/2022
  1513 000006DE [4300]A102              cdev:		dw chardev_entry, IOSYSCODESEG
  1514 000006E2 [8B03]A102              ttticks:	dw time_to_ticks, IOSYSCODESEG
  1515 000006E6 [B812]A102              bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  1516 000006EA [F514]A102              i13x:		dw i13z, IOSYSCODESEG
  1517                                  
  1518                                  end_BC_entries:	; 15/10/2022
  1519                                  
  1520                                  ;************************************************************************
  1521                                  ;*									*
  1522                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  1523                                  ;*									*
  1524                                  ;************************************************************************
  1525                                  
  1526                                  cbreak:					
  1527 000006EE 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  1528                                  					; indicate break key set
  1529                                  intret:					
  1530 000006F4 CF                      		iret
  1531                                  
  1532                                  ; =============== S U B	R O U T	I N E ========================================
  1533                                  
  1534                                  
  1535                                  ;************************************************************************
  1536                                  ;*									*
  1537                                  ;*	strategy - store es:bx (device driver request packet)		*
  1538                                  ;*		     away at [ptrsav] for next driver function call	*
  1539                                  ;*									*
  1540                                  ;************************************************************************
  1541                                  
  1542                                  strategy:	; proc far		
  1543 000006F5 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  1544                                  					; away at [ptrsav] for next driver function call
  1545 000006FA 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  1546 000006FF CB                      		retf
  1547                                  
  1548                                  ; ----------------------------------------------------------------------------
  1549                                  
  1550                                  ;************************************************************************
  1551                                  ;*									*
  1552                                  ;*	device driver entry points. these are the initial		*
  1553                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  1554                                  ;*	  in the case of our resident drivers, they'll just		*
  1555                                  ;*	  stick a fake return address on the stack which		*
  1556                                  ;*	  points to dispatch tables and possibly some unit		*
  1557                                  ;*	  numbers, and then call through a common entry point		*
  1558                                  ;*	  which can take care of a20 switching				*
  1559                                  ;*									*
  1560                                  ;************************************************************************
  1561                                  
  1562                                  ; 01/10/2022 - Erdogan Tan
  1563                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  1564                                  ;  addresses, they will be changed to table labels later)
  1565                                  
  1566                                  ; 09/12/2022
  1567                                  
  1568                                  con_entry:				
  1569 00000700 E84000                  		call	cdev_entry
  1570                                  ; ----------------------------------------------------------------------------
  1571                                  		;dw 0E4h		; con_table
  1572 00000703 [E300]                  		dw con_table	
  1573                                  					; 2C7h:0E4h = 70h:2654h
  1574                                  ; ----------------------------------------------------------------------------
  1575                                  
  1576                                  prn0_entry:				
  1577 00000705 E83B00                  		call	cdev_entry
  1578                                  ; ----------------------------------------------------------------------------
  1579                                  		;dw 0FBh		; prn_table
  1580 00000708 [FA00]                  		dw prn_table
  1581                                  					; 2C7h:0FBh = 70h:266Bh
  1582 0000070A 0000                    		db 0, 0
  1583                                  ; ----------------------------------------------------------------------------
  1584                                  
  1585                                  prn1_entry:				
  1586 0000070C E83400                  		call	cdev_entry
  1587                                  ; ----------------------------------------------------------------------------
  1588                                  		;dw 0FBh		; prn_table
  1589 0000070F [FA00]                  		dw prn_table
  1590                                  					; 2C7h:0FBh = 70h:266Bh
  1591 00000711 0001                    		db 0, 1
  1592                                  ; ----------------------------------------------------------------------------
  1593                                  
  1594                                  prn2_entry:				
  1595 00000713 E82D00                  		call	cdev_entry
  1596                                  ; ----------------------------------------------------------------------------
  1597                                  		;dw 0FBh		; prn_table
  1598 00000716 [FA00]                  		dw prn_table
  1599                                  					; 2C7h:0FBh = 70h:266Bh
  1600 00000718 0102                    		db 1, 2
  1601                                  ; ----------------------------------------------------------------------------
  1602                                  
  1603                                  prn3_entry:				
  1604 0000071A E82600                  		call	cdev_entry
  1605                                  ; ----------------------------------------------------------------------------
  1606                                  		;dw 0FBh		; prn_table
  1607 0000071D [FA00]                  		dw prn_table
  1608                                  					; 2C7h:0FBh = 70h:266Bh
  1609 0000071F 0203                    		db 2, 3
  1610                                  ; ----------------------------------------------------------------------------
  1611                                  
  1612                                  aux0_entry:				
  1613 00000721 E81F00                  		call	cdev_entry
  1614                                  ; ----------------------------------------------------------------------------
  1615                                  		;dw 130h		; aux_table
  1616 00000724 [2F01]                  		dw aux_table
  1617                                  					; 2C7h:130h = 70h:26A0h
  1618 00000726 00                      		db 0
  1619                                  ; ----------------------------------------------------------------------------
  1620                                  
  1621                                  aux1_entry:				
  1622 00000727 E81900                  		call	cdev_entry
  1623                                  ; ----------------------------------------------------------------------------
  1624                                  		;dw 130h		; aux_table
  1625 0000072A [2F01]                  		dw aux_table
  1626                                  					; 2C7h:130h = 70h:26A0h
  1627 0000072C 01                      		db 1
  1628                                  ; ----------------------------------------------------------------------------
  1629                                  
  1630                                  aux2_entry:				
  1631 0000072D E81300                  		call	cdev_entry
  1632                                  ; ----------------------------------------------------------------------------
  1633                                  		;dw 130h		; aux_table
  1634 00000730 [2F01]                  		dw aux_table
  1635                                  					; 2C7h:130h = 70h:26A0h
  1636 00000732 02                      		db 2
  1637                                  ; ----------------------------------------------------------------------------
  1638                                  
  1639                                  aux3_entry:				
  1640 00000733 E80D00                  		call	cdev_entry
  1641                                  ; ----------------------------------------------------------------------------
  1642                                  		;dw 130h		; aux_table
  1643 00000736 [2F01]                  		dw aux_table
  1644                                  					; 2C7h:130h = 70h:26A0h
  1645 00000738 03                      		db 3
  1646                                  ; ----------------------------------------------------------------------------
  1647                                  
  1648                                  tim_entry:				
  1649 00000739 E80700                  		call	cdev_entry
  1650                                  ; ----------------------------------------------------------------------------
  1651                                  		;dw 147h		; tim_table
  1652 0000073C [4601]                  		dw tim_table
  1653                                  					; 2C7h:147h = 70h:26B7h
  1654                                  ; ----------------------------------------------------------------------------
  1655                                  
  1656                                  ; 15/10/2022
  1657                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  1658                                  ; 09/12/2022
  1659                                  DSKTBL equ dsktbl
  1660                                  
  1661                                  dsk_entry:				
  1662 0000073E E80200                  		call	cdev_entry
  1663                                  ; ----------------------------------------------------------------------------
  1664                                  		;dw 4A2h		; dsktbl
  1665 00000741 [9604]                  		dw DSKTBL		; 09/12/2022
  1666                                  					; 2C7h:4A2h = 70h:2A12h
  1667                                  
  1668                                  ; =============== S U B	R O U T	I N E ========================================
  1669                                  
  1670                                  ;************************************************************************
  1671                                  ;*									*
  1672                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  1673                                  ;*	This code assumes that if Segment of Device request packet is	*
  1674                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  1675                                  ;*	A20 is already on.						*
  1676                                  ;*									*
  1677                                  ;************************************************************************
  1678                                  
  1679                                  cdev_entry:	; proc near		
  1680 00000743 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1681 00000749 740D                    		jz	short ce_enter_codeseg
  1682                                  				; optimized for DOS in HMA
  1683 0000074B 50                      		push	ax
  1684 0000074C 2EA1[0300]              		mov	ax, [cs:DosDataSg]
  1685 00000750 2E3906[1400]            		cmp	[cs:ptrsav+2], ax
  1686 00000755 58                      		pop	ax
  1687 00000756 7505                    		jnz	short not_from_dos
  1688                                  				; jump is coded this way to fall thru
  1689                                  				; in 99.99% of the cases
  1690                                  ce_enter_codeseg:
  1691 00000758 2EFF2E[DE06]            		jmp	far [cs:cdev]			
  1692                                  		;jmp	dword ptr cs:cdev
  1693                                  ;-----------------------------------------------------------------------------
  1694                                  
  1695                                  not_from_dos:				
  1696 0000075D E86200                  		call	EnsureA20On
  1697 00000760 EBF6                    		jmp	short ce_enter_codeseg
  1698                                  
  1699                                  ;************************************************************************
  1700                                  ;*									*
  1701                                  ;*	outchr - this is our int 29h handler. it writes the		*
  1702                                  ;*	   character in al on the display using int 10h ttywrite	*
  1703                                  ;*									*
  1704                                  ;************************************************************************
  1705                                  
  1706                                  outchr:					
  1707 00000762 50                      		push	ax		; int 29h handler
  1708 00000763 56                      		push	si
  1709 00000764 57                      		push	di
  1710 00000765 55                      		push	bp
  1711 00000766 53                      		push	bx
  1712 00000767 B40E                    		mov	ah, 0Eh
  1713 00000769 BB0700                  		mov	bx, 7
  1714 0000076C CD10                    		int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  1715                                  					; AL = character, BH = display page (alpha modes)
  1716                                  					; BL = foreground color	(graphics modes)
  1717 0000076E 5B                      		pop	bx
  1718 0000076F 5D                      		pop	bp
  1719 00000770 5F                      		pop	di
  1720 00000771 5E                      		pop	si
  1721 00000772 58                      		pop	ax
  1722 00000773 CF                      		iret
  1723                                  ;-----------------------------------------------------------------------------
  1724                                  
  1725                                  ;************************************************************************
  1726                                  ;*									*
  1727                                  ;*	block13 - our int13 hooker					*
  1728                                  ;*									*
  1729                                  ;************************************************************************
  1730                                  
  1731                                  block13:				
  1732 00000774 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1733 0000077A 7408                    		jz	short skipa20
  1734 0000077C E85400                  		call	IsA20Off	; A20 Off?
  1735 0000077F 7503                    		jnz	short skipa20
  1736 00000781 E84300                  		call	EnableA20	; assure a20 enabled
  1737                                  
  1738                                  skipa20:				
  1739 00000784 2E8C1E[1C00]            		mov	[cs:i13_ds], ds	; save caller's ds for call-through
  1740 00000789 9C                      		pushf			; fake interrupt
  1741 0000078A 2EFF1E[EA06]            		call	far [cs:i13x]
  1742                                  		;call	dword ptr cs:i13x
  1743                                  					; call through Bios_Code entry table
  1744 0000078F 2E8E1E[1C00]            		mov	ds, [cs:i13_ds]
  1745 00000794 CA0200                  		retf	2
  1746                                  
  1747                                  ; =============== S U B	R O U T	I N E =======================================
  1748                                  
  1749                                  ; the int13 hook calls back here to call-through to the ROM
  1750                                  ; this is necessary because some people have extended their
  1751                                  ; ROM BIOSs to use ds as a parameter/result register and
  1752                                  ; our int13 hook relies heavily on ds to access Bios_Data
  1753                                  
  1754                                  call_orig13:	; proc far		
  1755 00000797 8E1E[1C00]              		mov	ds, [i13_ds]	; get caller's ds register
  1756 0000079B 9C                      		pushf			; simulate an int13
  1757 0000079C 2EFF1E[B400]            		call	far [cs:Orig13]
  1758                                  		;call	cs:Orig13
  1759 000007A1 2E8C1E[1C00]            		mov	[cs:i13_ds], ds
  1760 000007A6 0E                      		push	cs
  1761 000007A7 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  1762                                  
  1763 000007A8 9C                      		pushf
  1764                                  		; 10/12/2022
  1765                                  		; ds = cs
  1766 000007A9 803E[0D00]00            		cmp	byte [inHMA], 0	; 16/10/2022
  1767                                  		;cmp	byte [cs:inHMA], 0
  1768 000007AE 7408                    		jz	short corig13_popf_retf
  1769 000007B0 E82000                  		call	IsA20Off
  1770 000007B3 7503                    		jnz	short corig13_popf_retf
  1771 000007B5 E80F00                  		call	EnableA20
  1772                                  corig13_popf_retf:			
  1773 000007B8 9D                      		popf
  1774 000007B9 CB                      		retf
  1775                                  
  1776                                  ;-----------------------------------------------------------------------------
  1777                                  
  1778                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  1779                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  1780                                  
  1781 000007BA 9000FFFF                HiMem:		dd 0FFFF0090h		
  1782 000007BE 80000000                LoMem:		dd 80h
  1783                                  
  1784                                  ; ----------------------------------------------------------------------------			
  1785                                  
  1786                                  ; =============== S U B	R O U T	I N E ========================================
  1787                                  
  1788                                  
  1789                                  ;************************************************************************
  1790                                  ;*									*
  1791                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  1792                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  1793                                  ;*									*
  1794                                  ;************************************************************************
  1795                                  
  1796                                  EnsureA20On:	; proc near		
  1797 000007C2 E80E00                  		call	IsA20Off
  1798                                  		;jz	short EnableA20
  1799                                  		;retn
  1800                                  		; 18/12/2022
  1801 000007C5 750B                    		jnz	short A20On_retn	
  1802                                  
  1803                                  ; =============== S U B	R O U T	I N E ========================================
  1804                                  
  1805                                  
  1806                                  EnableA20:	; proc near		
  1807 000007C7 50                      		push	ax
  1808 000007C8 53                      		push	bx
  1809 000007C9 B405                    		mov	ah, 5	 ; local enable a20
  1810                                  		;call	cs:xms
  1811 000007CB 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  1812 000007D0 5B                      		pop	bx
  1813 000007D1 58                      		pop	ax
  1814                                  A20On_retn:	; 18/12/2022	
  1815 000007D2 C3                      		retn
  1816                                  
  1817                                  ; =============== S U B	R O U T	I N E ========================================
  1818                                  
  1819                                  
  1820                                  IsA20Off:	; proc near		
  1821 000007D3 1E                      		push	ds
  1822 000007D4 06                      		push	es
  1823 000007D5 51                      		push	cx
  1824 000007D6 56                      		push	si
  1825 000007D7 57                      		push	di
  1826 000007D8 2EC536[BA07]            		lds	si, [cs:HiMem]
  1827 000007DD 2EC43E[BE07]            		les	di, [cs:LoMem]
  1828 000007E2 B90800                  		mov	cx, 8
  1829 000007E5 F3A7                    		repe cmpsw
  1830 000007E7 5F                      		pop	di
  1831 000007E8 5E                      		pop	si
  1832 000007E9 59                      		pop	cx
  1833 000007EA 07                      		pop	es
  1834 000007EB 1F                      		pop	ds
  1835 000007EC C3                      		retn
  1836                                  
  1837                                  ; ----------------------------------------------------------------------------
  1838                                  
  1839                                  DisableA20:
  1840 000007ED 50                      		push	ax
  1841 000007EE 53                      		push	bx
  1842 000007EF B406                    		mov	ah, 6		; local disable A20
  1843 000007F1 2EFF1E[0E00]            		call	far [cs:xms]
  1844                                  		;call	cs:xms
  1845 000007F6 5B                      		pop	bx
  1846 000007F7 58                      		pop	ax
  1847 000007F8 C3                      		retn
  1848                                  
  1849                                  ; ----------------------------------------------------------------------------
  1850                                  
  1851                                  ;************************************************************************
  1852                                  ;*									*
  1853                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  1854                                  ;*	  interrupt vectors before resuming the original int19 code	*
  1855                                  ;*									*
  1856                                  ;************************************************************************
  1857                                  
  1858                                  int19:					
  1859 000007F9 0E                      		push	cs
  1860 000007FA 1F                      		pop	ds
  1861 000007FB 8E06[1A00]              		mov	es, [zeroseg]	; 16/10/2022
  1862 000007FF B90500                  		mov	cx, 5		; NUMROMVECTORS
  1863                                  		;mov	si, offset RomVectors
  1864 00000802 BE[0001]                		mov	si, RomVectors	; 19/10/2022
  1865                                  next_int:				
  1866 00000805 AC                      		lodsb			; get int number
  1867 00000806 98                      		cbw			; assume < 128
  1868 00000807 D1E0                    		shl	ax, 1
  1869 00000809 D1E0                    		shl	ax, 1		; int *	4
  1870 0000080B 89C7                    		mov	di, ax
  1871 0000080D AD                      		lodsw
  1872 0000080E AB                      		stosw
  1873 0000080F AD                      		lodsw
  1874 00000810 AB                      		stosw			; install the saved vector
  1875 00000811 E2F2                    		loop	next_int
  1876 00000813 803E[4006]00            		cmp	byte [int19sem], 0 ; 19/10/2022
  1877 00000818 7422                    		jz	short doint19
  1878 0000081A BE[4106]                		mov	si, i19_lst	; stacks code has changed these hardware interrupt vectors
  1879                                  					; stkinit in sysinit1 will initialize int19oldxx values
  1880 0000081D B90E00                  		mov	cx, 14		; num_i19
  1881                                  
  1882                                  i19_restore_loop:			
  1883 00000820 AC                      		lodsb			; get interrupt	number
  1884 00000821 98                      		cbw			; assume < 128
  1885 00000822 89C7                    		mov	di, ax
  1886 00000824 AD                      		lodsw			; get original vector offset
  1887 00000825 89C3                    		mov	bx, ax		; save it
  1888 00000827 AD                      		lodsw
  1889 00000828 83FBFF                  		cmp	bx, 0FFFFh	; check	for 0ffffh (unlikely segment)
  1890 0000082B 740D                    		jz	short i19_restor_1 ; opt no need to check selector too
  1891 0000082D 83F8FF                  		cmp	ax, 0FFFFh	; opt 0ffffh is	unlikely offset
  1892 00000830 7408                    		jz	short i19_restor_1
  1893 00000832 01FF                    		add	di, di
  1894 00000834 01FF                    		add	di, di
  1895 00000836 93                      		xchg	ax, bx
  1896 00000837 AB                      		stosw
  1897 00000838 93                      		xchg	ax, bx
  1898 00000839 AB                      		stosw			; put the vector back
  1899                                  
  1900                                  i19_restor_1:				
  1901 0000083A E2E4                    		loop	i19_restore_loop
  1902                                  
  1903                                  doint19:				
  1904 0000083C 803E[0D00]00            		cmp	byte [inHMA], 0	; ; Is dos running from	HMA
  1905 00000841 7403                    		jz	short SkipVDisk
  1906 00000843 E83000                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  1907                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  1908                                  					; the memory above 1MB during a	warm boot.
  1909                                  SkipVDisk:				
  1910 00000846 CD19                    		int	19h		; DISK BOOT
  1911                                  					; causes reboot	of disk	system
  1912                                  
  1913                                  ; =============== S U B	R O U T	I N E ========================================
  1914                                  
  1915                                  ;-----------------------------------------------------------------------------
  1916                                  ;
  1917                                  ; procedure : int15
  1918                                  ;
  1919                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  1920                                  ;		If it recognizes ctrl-alt-del and if DOS was
  1921                                  ;		is running high, it Erases the VDISK header
  1922                                  ;		present at 1MB boundary
  1923                                  ;
  1924                                  ;-----------------------------------------------------------------------------
  1925                                  
  1926                                  ; 16/10/2022
  1927                                  ;DELKEY		equ	53h
  1928                                  ;ROMDATASEG	equ	40h
  1929                                  KBFLAG		equ	17h
  1930                                  ;CTRLSTATE	equ	04h
  1931                                  ;ALTSTATE	equ	08h
  1932                                  
  1933                                  Int15:		; proc near		
  1934                                  		;cmp	ax, 4F00h+DELKEY
  1935 00000848 3D534F                  		cmp	ax, 4F53h	; del keystroke ?
  1936 0000084B 7405                    		jz	short int15_1
  1937 0000084D 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1938                                  		;jmp	cs:Old15
  1939                                  ; ----------------------------------------------------------------------------
  1940                                  
  1941                                  int15_1:				
  1942 00000852 1E                      		push	ds
  1943 00000853 50                      		push	ax
  1944 00000854 B84000                  		mov	ax, 40h		; ROMDATASEG
  1945 00000857 8ED8                    		mov	ds, ax
  1946                                  		;mov	al, ds:17h	; [KBFLAG]
  1947                                  		; 16/10/2022
  1948 00000859 A01700                  		mov	al, [KBFLAG]
  1949 0000085C 240C                    		and	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1950 0000085E 3C0C                    		cmp	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1951 00000860 750C                    		jnz	short int15_2
  1952 00000862 0E                      		push	cs
  1953 00000863 1F                      		pop	ds
  1954 00000864 803E[0D00]00            		cmp	byte [inHMA], 0	; is DOS running from HMA
  1955 00000869 7403                    		jz	short int15_2
  1956 0000086B E80800                  		call	EraseVDiskHead
  1957                                  int15_2:				
  1958 0000086E 58                      		pop	ax
  1959 0000086F 1F                      		pop	ds
  1960 00000870 F9                      		stc
  1961 00000871 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1962                                  		;jmp	cs:Old15
  1963                                  
  1964                                  ; =============== S U B	R O U T	I N E ========================================
  1965                                  
  1966                                  ;-----------------------------------------------------------------------------
  1967                                  ;
  1968                                  ; procedure : EraseVDiskHead
  1969                                  ;
  1970                                  ;		Erases the VDisk Header present in the 1MB boundary
  1971                                  ;
  1972                                  ;-----------------------------------------------------------------------------
  1973                                  
  1974                                  EraseVDiskHead:	; proc near		
  1975 00000876 50                      		push	ax
  1976 00000877 51                      		push	cx
  1977 00000878 57                      		push	di
  1978 00000879 06                      		push	es
  1979 0000087A E845FF                  		call	EnsureA20On
  1980 0000087D B8FFFF                  		mov	ax, 0FFFFh	; HMA seg
  1981 00000880 8EC0                    		mov	es, ax
  1982 00000882 BF1000                  		mov	di, 10h		; point	to VDISK header
  1983 00000885 B91000                  		mov	cx, 10h		; size of vdisk	header
  1984 00000888 31C0                    		xor	ax, ax
  1985 0000088A F3AB                    		rep stosw		; clear	it
  1986 0000088C 07                      		pop	es
  1987 0000088D 5F                      		pop	di
  1988 0000088E 59                      		pop	cx
  1989 0000088F 58                      		pop	ax
  1990 00000890 C3                      		retn
  1991                                  
  1992                                  ; ----------------------------------------------------------------------------
  1993                                  
  1994                                  ;************************************************************************
  1995                                  ;*									*
  1996                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  1997                                  ;*	  it returns through one of the three functions that follow.	*
  1998                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  1999                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  2000                                  ;*									*
  2001                                  ;************************************************************************
  2002                                  
  2003                                  int_2f:		
  2004 00000891 2EFF2E[E606]            		jmp	far [cs:bcode_i2f] ; 16/10/2022			
  2005                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  2006                                  
  2007                                  ; ----------------------------------------------------------------------------
  2008                                  
  2009                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  2010                                  ; note:  is it really necessary to transiton out and then back in?
  2011                                  ;	 It's not as if this is a really speed critical function.
  2012                                  ;	 might as well do whatever's most compact.
  2013                                  
  2014                                  i2f_dskentry:				
  2015 00000896 E9A5FE                  		jmp	dsk_entry
  2016                                  
  2017                                  ; ----------------------------------------------------------------------------
  2018                                  
  2019                                  ;************************************************************************
  2020                                  ;*									*
  2021                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  2022                                  ;*		is done. presently does nothing. affects no		*
  2023                                  ;*		registers!						*
  2024                                  ;*									*
  2025                                  ;************************************************************************
  2026                                  
  2027                                  ; 09/12/2022
  2028                                  ; re_init_:
  2029                                  re_init:				; called back by sysinit after
  2030 00000899 CB                      		retf			; a bunch of stuff is done.
  2031                                  					; presently does nothing
  2032                                  
  2033                                  ; ----------------------------------------------------------------------------
  2034                                  
  2035                                  ;SR; WIN386 support
  2036                                  
  2037                                  ; WIN386 instance data structure
  2038                                  ;
  2039                                  ; Here is a Win386 startup info structure which we set up and to which
  2040                                  ; we return a pointer when Win386 initializes.
  2041                                  
  2042 0000089A 0300                    Win386_SI:	db 3, 0			; SI_Version
  2043                                  					; Startup Info for Win386
  2044 0000089C 00000000                SI_Next:	dd 0			; pointer to next info structure
  2045 000008A0 00000000                		dd 0			; a field we don't need
  2046 000008A4 00000000                		dd 0			; another field	we don't need
  2047 000008A8 [AC08]                  SI_Instance:	dw Instance_Table
  2048 000008AA 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  2049                                  
  2050                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  2051                                  ; areas. Note that the address and size of the hardware stacks must
  2052                                  ; be calculated and inserted at boot time.
  2053                                  
  2054 000008AC 00005000                Instance_Table:	dw 0, 50h		; print	screen status...
  2055 000008B0 0200                    		dw 2			; ... 2	bytes
  2056 000008B2 0E005000                		dw 0Eh,	50h		; ROM Basic data...
  2057 000008B6 1400                    		dw 14h			; ... 14H bytes
  2058 000008B8 [0C00]                  		dw altah		; a con	device buffer...
  2059 000008BA 7000                    		dw 70h			; Bios_Data segment
  2060 000008BC 0100                    		dw 1			; ... 1 byte
  2061                                  
  2062                                  NextStack:
  2063                                  
  2064                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  2065                                  ;	instance items WILL NOT be filled in by SYSINIT.
  2066                                  ;	That's just fine as long as these are the last items
  2067                                  ;	in the instance list since the first item is initialized
  2068                                  ;	to 0000 at load time.
  2069                                  
  2070 000008BE 00000000                		dw 0, 0			; pointer to next stack	to be used...
  2071 000008C2 0200                    		dw 2			; ... 2 bytes
  2072 000008C4 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  2073 000008C8 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  2074 000008CA 00000000                		dd 0			; terminate the	instance table
  2075                                  
  2076                                  					;SR;
  2077 000008CE 00                      IsWin386:	db 0			; Flag to indicate whether
  2078                                  					; Win386 is running or not
  2079                                  ;-----------------------------------------------------------------------------
  2080                                  
  2081                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  2082                                  ;when we call it including checking of A20. The code being only about 
  2083                                  ;30 bytes, we might as well put it in BIOS_DATA
  2084                                  
  2085                                  V86_Crit_SetFocus:			
  2086 000008CF 57                      		push	di
  2087 000008D0 06                      		push	es
  2088 000008D1 53                      		push	bx
  2089 000008D2 50                      		push	ax
  2090 000008D3 31FF                    		xor	di, di
  2091 000008D5 8EC7                    		mov	es, di
  2092 000008D7 BB1500                  		mov	bx, 15h		; Device ID of DOSMGR device
  2093 000008DA B88416                  		mov	ax, 1684h	; Get API entry	point
  2094 000008DD CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  2095                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  2096                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  2097 000008DF 8CC0                    		mov	ax, es
  2098 000008E1 09F8                    		or	ax, di
  2099 000008E3 740B                    		jz	short Skip	; Here,	es:di is address of API	routine.
  2100                                  					; Set up stack frame to	simulate a call.
  2101 000008E5 0E                      		push	cs
  2102                                  		;mov	ax, offset Skip
  2103 000008E6 B8[F008]                		mov	ax, Skip
  2104 000008E9 50                      		push	ax
  2105 000008EA 06                      		push	es
  2106 000008EB 57                      		push	di		; API far call address
  2107 000008EC B80100                  		mov	ax, 1		; SetFocus function number
  2108 000008EF CB                      		retf			; do the call
  2109                                  ;-----------------------------------------------------------------------------
  2110                                  
  2111                                  Skip:					
  2112 000008F0 58                      		pop	ax
  2113 000008F1 5B                      		pop	bx
  2114 000008F2 07                      		pop	es
  2115 000008F3 5F                      		pop	di
  2116 000008F4 CB                      		retf
  2117                                  
  2118                                  ;End WIN386 support
  2119                                  
  2120                                  ; ----------------------------------------------------------------------------
  2121                                  
  2122                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2123                                  
  2124                                  ; 09/12/2022
  2125                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  2126                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  2127                                  ; (followings are in sysinit segment)
  2128                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  2129                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  2130                                  ;DEVICELIST	equ 273h
  2131                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  2132                                  ;MEMORYSIZE	equ 292h	
  2133                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  2134                                  ;DEFAULTDRIVE	equ 296h
  2135                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  2136                                  ;;currentdoslocation equ 271h
  2137                                  ;CURRENTDOSLOCATION equ 271h
  2138                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  2139                                  ;SYSINITSTART	equ 267h
  2140                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  2141                                  ; 18/10/2022
  2142                                  ;toomanydrivesflag equ 3FFh 
  2143                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  2144                                  
  2145                                  ; ----------------------------------------------------------------------------
  2146                                  
  2147 000008F5 FFFF                    FreeHMAPtr:	dw 0FFFFh		
  2148                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2149                                  					; (procedure in	SYSINIT	segment)
  2150                                  ; 17/10/2022
  2151 000008F7 [BE0A]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2152 000008F9 4104                    		dw SYSINITSEG	
  2153                                  
  2154                                  ;SR;
  2155                                  ; A communication block has been setup between the DOS and the BIOS. All
  2156                                  ;the data starting from SysinitPresent will be part of the data block. 
  2157                                  ;Right now, this is the only data being communicated. It can be expanded 
  2158                                  ;later to add more stuff
  2159                                  
  2160 000008FB 00                      SysinitPresent:	db 0			
  2161 000008FC 0000                    endfloppy:	db 0, 0
  2162                                  
  2163                                  ; ----------------------------------------------------------------------------			
  2164                                  
  2165                                  ; Bios_Data ends
  2166                                  	
  2167                                  ; Possibly disposable BIOS data
  2168                                  ; This data follows the	regular	BIOS data,
  2169                                  ; and is part of the same group.
  2170                                  
  2171 000008FE 4E4F204E414D452020-     nul_vid:	db 'NO NAME    ',0      
  2171 00000907 202000             
  2172                                  					; null volume id
  2173 0000090A 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    ',0      
  2173 00000913 202000             
  2174                                  					; vid scratch buffer
  2175 00000916 80                      harddrv:	db 80h			
  2176                                  
  2177                                  end96tpi:
  2178                                  
  2179                                  ;;*********************************************************************
  2180                                  ;;memory allocation for bdss
  2181                                  ;;*********************************************************************
  2182                                  ;
  2183                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  2184                                  ;
  2185                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  2186                                  ;
  2187                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  2188                                  
  2189 00000917 FFFF                    bdss:		dw 0FFFFh		
  2190 00000919 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2190 00000922 0210000000F8       
  2191 00000928 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2191 00000931 000000000000000003 
  2192 0000093A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2192 00000943 00000000000000     
  2193 0000094A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2193 00000953 000000000000000000 
  2194 0000095C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2194 00000965 4E414D45           
  2195 00000969 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2195 00000972 46415431           
  2196 00000976 3220202000              		db 32h,	20h, 20h, 20h, 0
  2197 0000097B FFFF                    		dw 0FFFFh
  2198 0000097D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2198 00000986 0210000000F8       
  2199 0000098C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2199 00000995 000000000000000003 
  2200 0000099E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2200 000009A7 00000000000000     
  2201 000009AE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2201 000009B7 000000000000000000 
  2202 000009C0 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2202 000009C9 4E414D45           
  2203 000009CD 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2203 000009D6 46415431           
  2204 000009DA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2205 000009DF FFFF                    		dw 0FFFFh
  2206 000009E1 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2206 000009EA 0210000000F8       
  2207 000009F0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2207 000009F9 000000000000000003 
  2208 00000A02 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2208 00000A0B 00000000000000     
  2209 00000A12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2209 00000A1B 000000000000000000 
  2210 00000A24 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2210 00000A2D 4E414D45           
  2211 00000A31 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2211 00000A3A 46415431           
  2212 00000A3E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2213 00000A43 FFFF                    		dw 0FFFFh
  2214 00000A45 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2214 00000A4E 0210000000F8       
  2215 00000A54 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2215 00000A5D 000000000000000003 
  2216 00000A66 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2216 00000A6F 00000000000000     
  2217 00000A76 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2217 00000A7F 000000000000000000 
  2218 00000A88 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2218 00000A91 4E414D45           
  2219 00000A95 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2219 00000A9E 46415431           
  2220 00000AA2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2221 00000AA7 FFFF                    		dw 0FFFFh
  2222 00000AA9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2222 00000AB2 0210000000F8       
  2223 00000AB8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2223 00000AC1 000000000000000003 
  2224 00000ACA 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2224 00000AD3 00000000000000     
  2225 00000ADA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2225 00000AE3 000000000000000000 
  2226 00000AEC 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2226 00000AF5 4E414D45           
  2227 00000AF9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2227 00000B02 46415431           
  2228 00000B06 3220202000              		db 32h,	20h, 20h, 20h, 0
  2229 00000B0B FFFF                    		dw 0FFFFh
  2230 00000B0D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2230 00000B16 0210000000F8       
  2231 00000B1C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2231 00000B25 000000000000000003 
  2232 00000B2E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2232 00000B37 00000000000000     
  2233 00000B3E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2233 00000B47 000000000000000000 
  2234 00000B50 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2234 00000B59 4E414D45           
  2235 00000B5D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2235 00000B66 46415431           
  2236 00000B6A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2237 00000B6F FFFF                    		dw 0FFFFh
  2238 00000B71 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2238 00000B7A 0210000000F8       
  2239 00000B80 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2239 00000B89 000000000000000003 
  2240 00000B92 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2240 00000B9B 00000000000000     
  2241 00000BA2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2241 00000BAB 000000000000000000 
  2242 00000BB4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2242 00000BBD 4E414D45           
  2243 00000BC1 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2243 00000BCA 46415431           
  2244 00000BCE 3220202000              		db 32h,	20h, 20h, 20h, 0
  2245 00000BD3 FFFF                    		dw 0FFFFh
  2246 00000BD5 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2246 00000BDE 0210000000F8       
  2247 00000BE4 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2247 00000BED 000000000000000003 
  2248 00000BF6 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2248 00000BFF 00000000000000     
  2249 00000C06 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2249 00000C0F 000000000000000000 
  2250 00000C18 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2250 00000C21 4E414D45           
  2251 00000C25 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2251 00000C2E 46415431           
  2252 00000C32 3220202000              		db 32h,	20h, 20h, 20h, 0
  2253 00000C37 FFFF                    		dw 0FFFFh
  2254 00000C39 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2254 00000C42 0210000000F8       
  2255 00000C48 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2255 00000C51 000000000000000003 
  2256 00000C5A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2256 00000C63 00000000000000     
  2257 00000C6A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2257 00000C73 000000000000000000 
  2258 00000C7C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2258 00000C85 4E414D45           
  2259 00000C89 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2259 00000C92 46415431           
  2260 00000C96 3220202000              		db 32h,	20h, 20h, 20h, 0
  2261 00000C9B FFFF                    		dw 0FFFFh
  2262 00000C9D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2262 00000CA6 0210000000F8       
  2263 00000CAC 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2263 00000CB5 000000000000000003 
  2264 00000CBE 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2264 00000CC7 00000000000000     
  2265 00000CCE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2265 00000CD7 000000000000000000 
  2266 00000CE0 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2266 00000CE9 4E414D45           
  2267 00000CED 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2267 00000CF6 46415431           
  2268 00000CFA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2269 00000CFF FFFF                    		dw 0FFFFh
  2270 00000D01 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2270 00000D0A 0210000000F8       
  2271 00000D10 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2271 00000D19 000000000000000003 
  2272 00000D22 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2272 00000D2B 00000000000000     
  2273 00000D32 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2273 00000D3B 000000000000000000 
  2274 00000D44 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2274 00000D4D 4E414D45           
  2275 00000D51 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2275 00000D5A 46415431           
  2276 00000D5E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2277 00000D63 FFFF                    		dw 0FFFFh
  2278 00000D65 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2278 00000D6E 0210000000F8       
  2279 00000D74 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2279 00000D7D 000000000000000003 
  2280 00000D86 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2280 00000D8F 00000000000000     
  2281 00000D96 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2281 00000D9F 000000000000000000 
  2282 00000DA8 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2282 00000DB1 4E414D45           
  2283 00000DB5 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2283 00000DBE 46415431           
  2284 00000DC2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2285 00000DC7 FFFF                    		dw 0FFFFh
  2286 00000DC9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2286 00000DD2 0210000000F8       
  2287 00000DD8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2287 00000DE1 000000000000000003 
  2288 00000DEA 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2288 00000DF3 00000000000000     
  2289 00000DFA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2289 00000E03 000000000000000000 
  2290 00000E0C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2290 00000E15 4E414D45           
  2291 00000E19 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2291 00000E22 46415431           
  2292 00000E26 3220202000              		db 32h,	20h, 20h, 20h, 0
  2293 00000E2B FFFF                    		dw 0FFFFh
  2294 00000E2D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2294 00000E36 0210000000F8       
  2295 00000E3C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2295 00000E45 000000000000000003 
  2296 00000E4E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2296 00000E57 00000000000000     
  2297 00000E5E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2297 00000E67 000000000000000000 
  2298 00000E70 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2298 00000E79 4E414D45           
  2299 00000E7D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2299 00000E86 46415431           
  2300 00000E8A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2301 00000E8F FFFF                    		dw 0FFFFh
  2302 00000E91 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2302 00000E9A 0210000000F8       
  2303 00000EA0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2303 00000EA9 000000000000000003 
  2304 00000EB2 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2304 00000EBB 00000000000000     
  2305 00000EC2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2305 00000ECB 000000000000000000 
  2306 00000ED4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2306 00000EDD 4E414D45           
  2307 00000EE1 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2307 00000EEA 46415431           
  2308 00000EEE 3220202000              		db 32h,	20h, 20h, 20h, 0
  2309 00000EF3 FFFF                    		dw 0FFFFh
  2310 00000EF5 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2310 00000EFE 0210000000F8       
  2311 00000F04 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2311 00000F0D 000000000000000003 
  2312 00000F16 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2312 00000F1F 00000000000000     
  2313 00000F26 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2313 00000F2F 000000000000000000 
  2314 00000F38 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2314 00000F41 4E414D45           
  2315 00000F45 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2315 00000F4E 46415431           
  2316 00000F52 3220202000              		db 32h,	20h, 20h, 20h, 0
  2317 00000F57 FFFF                    		dw 0FFFFh
  2318 00000F59 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2318 00000F62 0210000000F8       
  2319 00000F68 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2319 00000F71 000000000000000003 
  2320 00000F7A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2320 00000F83 00000000000000     
  2321 00000F8A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2321 00000F93 000000000000000000 
  2322 00000F9C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2322 00000FA5 4E414D45           
  2323 00000FA9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2323 00000FB2 46415431           
  2324 00000FB6 3220202000              		db 32h,	20h, 20h, 20h, 0
  2325 00000FBB FFFF                    		dw 0FFFFh
  2326 00000FBD 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2326 00000FC6 0210000000F8       
  2327 00000FCC 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2327 00000FD5 000000000000000003 
  2328 00000FDE 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2328 00000FE7 00000000000000     
  2329 00000FEE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2329 00000FF7 000000000000000000 
  2330 00001000 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2330 00001009 4E414D45           
  2331 0000100D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2331 00001016 46415431           
  2332 0000101A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2333 0000101F FFFF                    		dw 0FFFFh
  2334 00001021 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2334 0000102A 0210000000F8       
  2335 00001030 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2335 00001039 000000000000000003 
  2336 00001042 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2336 0000104B 00000000000000     
  2337 00001052 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2337 0000105B 000000000000000000 
  2338 00001064 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2338 0000106D 4E414D45           
  2339 00001071 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2339 0000107A 46415431           
  2340 0000107E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2341 00001083 FFFF                    		dw 0FFFFh
  2342 00001085 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2342 0000108E 0210000000F8       
  2343 00001094 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2343 0000109D 000000000000000003 
  2344 000010A6 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2344 000010AF 00000000000000     
  2345 000010B6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2345 000010BF 000000000000000000 
  2346 000010C8 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2346 000010D1 4E414D45           
  2347 000010D5 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2347 000010DE 46415431           
  2348 000010E2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2349 000010E7 FFFF                    		dw 0FFFFh
  2350 000010E9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2350 000010F2 0210000000F8       
  2351 000010F8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2351 00001101 000000000000000003 
  2352 0000110A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2352 00001113 00000000000000     
  2353 0000111A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2353 00001123 000000000000000000 
  2354 0000112C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2354 00001135 4E414D45           
  2355 00001139 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2355 00001142 46415431           
  2356 00001146 3220202000              		db 32h,	20h, 20h, 20h, 0
  2357 0000114B FFFF                    		dw 0FFFFh
  2358 0000114D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2358 00001156 0210000000F8       
  2359 0000115C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2359 00001165 000000000000000003 
  2360 0000116E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2360 00001177 00000000000000     
  2361 0000117E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2361 00001187 000000000000000000 
  2362 00001190 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2362 00001199 4E414D45           
  2363 0000119D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2363 000011A6 46415431           
  2364 000011AA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2365 000011AF FFFF                    		dw 0FFFFh
  2366 000011B1 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2366 000011BA 0210000000F8       
  2367 000011C0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2367 000011C9 000000000000000003 
  2368 000011D2 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2368 000011DB 00000000000000     
  2369 000011E2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2369 000011EB 000000000000000000 
  2370 000011F4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2370 000011FD 4E414D45           
  2371 00001201 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2371 0000120A 46415431           
  2372 0000120E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2373 00001213 FFFF                    		dw 0FFFFh
  2374 00001215 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2374 0000121E 0210000000F8       
  2375 00001224 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2375 0000122D 000000000000000003 
  2376 00001236 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2376 0000123F 00000000000000     
  2377 00001246 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2377 0000124F 000000000000000000 
  2378 00001258 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2378 00001261 4E414D45           
  2379 00001265 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2379 0000126E 46415431           
  2380 00001272 3220202000              		db 32h,	20h, 20h, 20h, 0
  2381 00001277 FFFF                    		dw 0FFFFh
  2382 00001279 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2382 00001282 0210000000F8       
  2383 00001288 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2383 00001291 000000000000000003 
  2384 0000129A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2384 000012A3 00000000000000     
  2385 000012AA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2385 000012B3 000000000000000000 
  2386 000012BC 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2386 000012C5 4E414D45           
  2387 000012C9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2387 000012D2 46415431           
  2388 000012D6 3220202000              		db 32h,	20h, 20h, 20h, 0
  2389 000012DB 00                      		db 0
  2390                                  
  2391                                  ;---------------------------------------------------------------------------
  2392                                  ; Possibly disposable data, goes at end of data group
  2393                                  ;***************************************************************************
  2394                                  
  2395                                  ; Possibly disposable data, goes at end of data group
  2396                                  
  2397                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  2398                                  ;
  2399                                  ;	entry:	(ah) = function, 02 or 0a for read.
  2400                                  ;		(dl) = drive number (80h or 81h).
  2401                                  ;		(dh) = head number.
  2402                                  ;		(ch) = cylinder number.
  2403                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  2404                                  ;		(al) = number of sectors.
  2405                                  ;		(es:bx) = address of read buffer.
  2406                                  ;		for more on register contents see rom bios listing.
  2407                                  ;		stack set up for return by an iret.
  2408                                  ;
  2409                                  ;	exit:	(ah) = status of current operation.
  2410                                  ;		(cy) = 1 if failed, 0 if successful.
  2411                                  ;		for other register contents see rom bios listing.
  2412                                  ;
  2413                                  ;	uses:	
  2414                                  ;
  2415                                  ;
  2416                                  ;	warning: uses old13 vector for non-read calls.
  2417                                  ;		does direct calls to the at rom.
  2418                                  ;		does segment arithmatic.
  2419                                  ;
  2420                                  ;	effects: performs disk i/o operation.
  2421                                  
  2422                                  ; 16/10/2022
  2423                                  ; 28/05/2019
  2424                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  2425                                  
  2426                                  ;* offsets into cmd_block for registers
  2427                                  
  2428                                  pre_comp equ 0	;write pre-compensation
  2429                                  sec_cnt	 equ 1	;sector count
  2430                                  sec_num	 equ 2	;sector number
  2431                                  cyl_low	 equ 3	;cylinder number, low part
  2432                                  cyl_high equ 4	;cylinder number, high part
  2433                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  2434                                  		;            bit 4 = drive number, bits 3-0 have head number)
  2435                                  cmd_reg  equ 6	;command register
  2436                                  
  2437                                  ; 01/10/2022
  2438                                  disk_status1	equ 74h
  2439                                  hf_num		equ 75h
  2440                                  control_byte	equ 76h
  2441                                  
  2442                                  ibm_disk_io:				
  2443 000012DC 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  2444 000012DF 720A                    		jb	short atd1	; pass through floppy disk calls. 
  2445 000012E1 80FC02                  		cmp	ah, 2
  2446 000012E4 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  2447 000012E6 80FC0A                  		cmp	ah, 0Ah
  2448 000012E9 7405                    		jz	short atd2	; and call 0Ah (read long).
  2449                                  atd1:
  2450 000012EB 2EFF2E[0601]            		jmp	far [cs:Old13]					
  2451                                  		;jmp	cs:Old13	; use rom int 13h handler
  2452                                  ;-----------------------------------------------------------------------------
  2453                                  
  2454                                  atd2:					
  2455 000012F0 53                      		push	bx
  2456 000012F1 51                      		push	cx
  2457 000012F2 52                      		push	dx
  2458 000012F3 57                      		push	di
  2459 000012F4 1E                      		push	ds
  2460 000012F5 06                      		push	es
  2461 000012F6 50                      		push	ax
  2462 000012F7 B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  2463                                  					; establish bios segment addressing
  2464 000012FA 8ED8                    		mov	ds, ax
  2465                                  		; 16/10/2022
  2466 000012FC C606740000              		mov	byte [disk_status1], 0
  2467                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  2468                                  					; initially no error code.
  2469 00001301 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  2470 00001304 3A167500                		cmp	dl, [hf_num]
  2471                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  2472 00001308 7207                    		jb	short atd3	; disk number in range
  2473                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  2474 0000130A C606740001              		mov	byte [disk_status1], 1
  2475 0000130F EB20                    		jmp	short atd4	; disk number out of range error,
  2476                                  					; return
  2477                                  ; ----------------------------------------------------------------------------
  2478                                  
  2479                                  atd3:					
  2480 00001311 53                      		push	bx
  2481 00001312 8CC0                    		mov	ax, es
  2482 00001314 C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  2483 00001317 01D8                    		add	ax, bx
  2484 00001319 8EC0                    		mov	es, ax
  2485 0000131B 5B                      		pop	bx
  2486 0000131C 83E30F                  		and	bx, 0Fh
  2487 0000131F 0E                      		push	cs
  2488 00001320 E8DF00                  		call	check_dma
  2489 00001323 720C                    		jb	short atd4	; abort if dma across segment boundary
  2490 00001325 58                      		pop	ax
  2491 00001326 50                      		push	ax
  2492 00001327 E81A00                  		call	setcmd		; set up command block for disk op
  2493 0000132A BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  2494 0000132D EE                      		out	dx, al		; write out command modifier
  2495 0000132E E86B00                  		call	docmd		; carry out command
  2496                                  ; ----------------------------------------------------------------------------
  2497                                  
  2498                                  atd4:	
  2499                                  
  2500                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  2501                                  ;	      and save a couple bytes while were at it.
  2502                                  				
  2503 00001331 58                      		pop	ax
  2504                                  		;mov	ah, ds:74h	; [disk_status1]
  2505 00001332 8A267400                		mov	ah, [disk_status1]
  2506 00001336 08E4                    		or	ah, ah
  2507 00001338 7401                    		jz	short atd5
  2508 0000133A F9                      		stc
  2509                                  atd5:					
  2510 0000133B 07                      		pop	es
  2511 0000133C 1F                      		pop	ds
  2512 0000133D 5F                      		pop	di
  2513 0000133E 5A                      		pop	dx
  2514 0000133F 59                      		pop	cx
  2515 00001340 5B                      		pop	bx
  2516 00001341 CA0200                  		retf	2		; far return, dropping flags
  2517                                  
  2518                                  ; =============== S U B	R O U T	I N E ========================================
  2519                                  
  2520                                  ;***	setcmd - set up cmd_block for the disk operation
  2521                                  ;
  2522                                  ;	entry:	(ds) = bios data segment.
  2523                                  ;		(es:bx) in seg:000x form.
  2524                                  ;		other registers as in int 13h call
  2525                                  ;	
  2526                                  ;	exit:	cmd_block set up for disk read call.
  2527                                  ;		control_byte set up for disk operation.
  2528                                  ;		(al) = control byte modifier
  2529                                  ;
  2530                                  ;	sets the fields of cmd_block using the register contents
  2531                                  ;	and the contents of the disk parameter block for the given drive.
  2532                                  ;
  2533                                  ;	warning: (ax) destroyed.
  2534                                  ;		does direct calls to the at rom.
  2535                                  
  2536                                  setcmd:		; proc near		
  2537                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  2538                                  		; 16/10/2022
  2539 00001344 A24300                  		mov	[cmd_block+sec_cnt], al
  2540                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  2541 00001347 C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  2542 0000134C 80FC02                  		cmp	ah, 2
  2543 0000134F 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  2544 00001351 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  2545                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  2546                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  2547                                  setc1:					
  2548 00001356 88C8                    		mov	al, cl
  2549 00001358 243F                    		and	al, 3Fh		; mask sector number
  2550                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  2551                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  2552 0000135A A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  2553 0000135D 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  2554 00001361 88C8                    		mov	al, cl
  2555 00001363 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  2556                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  2557 00001366 A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  2558 00001369 89D0                    		mov	ax, dx
  2559 0000136B C0E004                  		shl	al, 4		; drive	number
  2560 0000136E 80E40F                  		and	ah, 0Fh
  2561 00001371 08E0                    		or	al, ah		; head number
  2562 00001373 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  2563                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  2564 00001375 A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  2565 00001378 06                      		push	es
  2566 00001379 53                      		push	bx
  2567 0000137A 0E                      		push	cs
  2568 0000137B E85C00                  		call	get_vec
  2569 0000137E 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  2570                                  			 		; write pre-comp from disk parameters
  2571 00001382 C1E802                  		shr	ax, 2
  2572                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  2573 00001385 A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  2574                                  					; only use low part
  2575 00001388 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  2576                                  					; control byte modifier
  2577 0000138C 5B                      		pop	bx
  2578 0000138D 07                      		pop	es
  2579                                  		;mov	ah, ds:76h	; [control_byte]
  2580 0000138E 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  2581 00001392 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  2582 00001395 08C4                    		or	ah, al
  2583                                  		;mov	ds:76h,	ah
  2584 00001397 88267600                		mov	[control_byte], ah ; mov [76h],al
  2585 0000139B C3                      		retn
  2586                                  
  2587                                  ; =============== S U B	R O U T	I N E ========================================
  2588                                  
  2589                                  ;***	docmd - carry out read operation to at hard disk
  2590                                  ;
  2591                                  ;	entry:	(es:bx) = address for read in data.
  2592                                  ;		cmd_block set up for disk read.
  2593                                  ;
  2594                                  ;	exit:	buffer at (es:bx) contains data read.
  2595                                  ;		disk_status1 set to error code (0 if success).
  2596                                  ;
  2597                                  ;	
  2598                                  ;
  2599                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  2600                                  ;		no check is made for dma boundary overrun.
  2601                                  ;
  2602                                  ;	effects: programs disk controller.
  2603                                  ;		performs disk input.
  2604                                  
  2605                                  docmd:		; proc near		
  2606 0000139C 89DF                    		mov	di, bx
  2607 0000139E 0E                      		push	cs
  2608 0000139F E84000                  		call	command
  2609 000013A2 7535                    		jnz	short doc3
  2610                                  doc1:					
  2611 000013A4 0E                      		push	cs
  2612 000013A5 E84200                  		call	waitt		; wait for controller to complete read
  2613 000013A8 752F                    		jnz	short doc3
  2614 000013AA B90001                  		mov	cx, 256		; 256 words per sector
  2615 000013AD BAF001                  		mov	dx, 1F0h	; hf_port
  2616 000013B0 FC                      		cld			; string op goes up
  2617 000013B1 FA                      		cli			; disable interrupts
  2618                                  					; (bug was forgetting this)
  2619                                  
  2620                                  ;	M062 -- some of these old machines have intermittent failures
  2621                                  ;		when the read is done at full speed. Instead of using
  2622                                  ;		a string rep instruction, we'll use a loop. There is
  2623                                  ;		a slight performance hit, but it only affects these
  2624                                  ;		very old machines with an exact date code match, and
  2625                                  ;		it makes said machines more reliable
  2626                                  ;
  2627                                  ;M062	repz	insw		;read in sector
  2628                                  
  2629                                  rsct_loop:				
  2630 000013B2 6D                      		insw
  2631 000013B3 E2FD                    		loop	rsct_loop
  2632 000013B5 FB                      		sti
  2633                                  		; 16/10/2022
  2634 000013B6 F606480002              		test	byte [cmd_block+cmd_reg], 02h
  2635                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  2636                                  					; (ds =	40h)
  2637 000013BB 7410                    		jz	short doc2	; no ecc bytes to read.
  2638 000013BD 0E                      		push	cs
  2639 000013BE E83100                  		call	wait_drq	; wait for controller to complete read
  2640 000013C1 7216                    		jb	short doc3
  2641 000013C3 B90400                  		mov	cx, 4		; 4 bytes of ecc
  2642 000013C6 BAF001                  		mov	dx, 1F0h	; hf_port
  2643 000013C9 FA                      		cli
  2644 000013CA F36C                    		rep insb		; read in ecc
  2645 000013CC FB                      		sti
  2646                                  doc2:					
  2647 000013CD 0E                      		push	cs
  2648 000013CE E82900                  		call	check_status
  2649 000013D1 7506                    		jnz	short doc3	; operation failed
  2650                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  2651 000013D3 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  2652 000013D7 75CB                    		jnz	short doc1	; loop while more sectors to read
  2653                                  doc3:					
  2654 000013D9 C3                      		retn
  2655                                  
  2656                                  ; =============== S U B	R O U T	I N E ========================================
  2657                                  
  2658                                  ;***	define where the rom routines are actually located
  2659                                  ;	   in the buggy old AT BIOS that we might need to
  2660                                  ;	   install a special level of int13 handler for
  2661                                  
  2662                                  ; 16/10/2022
  2663                                  
  2664                                  romsegment 	equ 0F000h  ; segment
  2665                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  2666                                  romwait		equ 2E7Fh   ; offset in romsegment
  2667                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  2668                                  romcheck_status equ 2EF8h   ; offset in romsegment
  2669                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  2670                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  2671                                  romfret		equ 0FF65h  ; far return in rom	
  2672                                  
  2673                                  ;***	get_vec - get pointer to hard disk parameters.
  2674                                  ;
  2675                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  2676                                  ;
  2677                                  ;	exit:	(es:bx) = address of disk parameters table.
  2678                                  ;
  2679                                  ;	uses:	ax for segment computation.
  2680                                  ;
  2681                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  2682                                  ;	or 70h (disk 1).
  2683                                  ;	
  2684                                  ;	warning: (ax) destroyed.
  2685                                  ;		this does a direct call to the at rom.
  2686                                  
  2687                                  get_vec:	; proc near		
  2688                                  		;push	0FF65h		; romfret ; far	return in rom
  2689                                  		;jmp	far ptr	0F000h:2F8Eh
  2690                                  		; 16/10/2022
  2691 000013DA 6865FF                  		push	romfret		; far return in rom
  2692 000013DD EA8E2F00F0              		jmp	romsegment:romget_vec
  2693                                  
  2694                                  ; =============== S U B	R O U T	I N E ========================================
  2695                                  
  2696                                  ;***	command - send contents of cmd_block to disk controller.
  2697                                  ;
  2698                                  ;	entry:	control_byte 
  2699                                  ;		cmd_block - set up with values for hard disk controller.
  2700                                  ;
  2701                                  ;	exit:	disk_status1 = error code.
  2702                                  ;		nz if error, zr for no error.
  2703                                  ;
  2704                                  ;
  2705                                  ;	warning: (ax), (cx), (dx) destroyed.
  2706                                  ;		does a direct call to the at rom.
  2707                                  ;
  2708                                  ;	effects: programs disk controller.
  2709                                  
  2710                                  command:	; proc near		
  2711                                  		;push	0FF65h		; romfret ; far	return in rom
  2712                                  		;jmp	far ptr	0F000h:2E1Eh
  2713                                  		; 16/10/2022
  2714 000013E2 6865FF                  		push	romfret		; far return in rom
  2715 000013E5 EA1E2E00F0              		jmp	romsegment:romcommand
  2716                                  
  2717                                  ; =============== S U B	R O U T	I N E ========================================
  2718                                  
  2719                                  ;***	waitt - wait for disk interrupt
  2720                                  ;
  2721                                  ;	entry:	nothing.
  2722                                  ;
  2723                                  ;	exit:	disk_status1 = error code.
  2724                                  ;		nz if error, zr if no error.
  2725                                  ;
  2726                                  ;
  2727                                  ;	warning: (ax), (bl), (cx) destroyed.
  2728                                  ;		does a direct call to the at rom.
  2729                                  ;		
  2730                                  ;	effects: calls int 15h, function 9000h.
  2731                                  
  2732                                  waitt:		; proc near		
  2733                                  		;push	0FF65h		; romfret ; far	return in rom
  2734                                  		;jmp	far ptr	0F000h:2E7Fh
  2735                                  		; 16/10/2022
  2736 000013EA 6865FF                  		push	romfret		; far return in rom
  2737 000013ED EA7F2E00F0              		jmp	romsegment:romwait
  2738                                  
  2739                                  ; =============== S U B	R O U T	I N E ========================================
  2740                                  
  2741                                  ;***	wait_drq - wait for data request.
  2742                                  ;
  2743                                  ;	entry:	nothing.
  2744                                  ;
  2745                                  ;	exit:	disk_status1 = error code.
  2746                                  ;		cy if error, nc if no error.
  2747                                  ;
  2748                                  ;	warning: (al), (cx), (dx) destroyed.
  2749                                  ;		does a direct call to the at rom.
  2750                                  
  2751                                  wait_drq:	; proc near		
  2752                                  		;push	0FF65h		; romfret ; far	return in rom
  2753                                  		;jmp	far ptr	0F000h:2EE2h
  2754                                  		; 16/10/2022
  2755 000013F2 6865FF                  		push	romfret		; far return in rom
  2756 000013F5 EAE22E00F0              		jmp	romsegment:romwait_drq
  2757                                  
  2758                                  ; =============== S U B	R O U T	I N E ========================================
  2759                                  
  2760                                  ;***	check_status - check hard disk status.
  2761                                  ;
  2762                                  ;	entry:	nothing.
  2763                                  ;
  2764                                  ;	exit:	disk_status1 = error code.
  2765                                  ;		nz if error, zr if no error.
  2766                                  ;
  2767                                  ;	warning: (ax), (cx), (dx) destroyed.
  2768                                  ;		does a direct call to the at rom.
  2769                                  
  2770                                  check_status:	; proc near		
  2771                                  		;push	0FF65h		; romfret ; far	return in rom
  2772                                  		;jmp	far ptr	0F000h:2EF8h
  2773                                  		; 16/10/2022
  2774 000013FA 6865FF                  		push	romfret		; far return in rom
  2775 000013FD EAF82E00F0              		jmp	romsegment:romcheck_status
  2776                                  
  2777                                  ; =============== S U B	R O U T	I N E ========================================
  2778                                  
  2779                                  ;***	check_dma - check for dma overrun 64k segment.
  2780                                  ;
  2781                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  2782                                  ;		cmd_block set up for operation.
  2783                                  ;
  2784                                  ;	exit:	disk_status1 - error code.
  2785                                  ;		cy if error, nc if no error.
  2786                                  ;
  2787                                  ;	warning: does a direct call to the at rom.
  2788                                  
  2789                                  check_dma:	; proc near		
  2790                                  		;push	0FF65h		; romfret ; far	return in rom
  2791                                  		;jmp	far ptr	0F000h:2F69h
  2792                                  		; 16/10/2022
  2793 00001402 6865FF                  		push	romfret		; far return in rom
  2794 00001405 EA692F00F0              		jmp	romsegment:romcheck_dma
  2795                                  
  2796                                  ;-----------------------------------------------------------------------------
  2797                                  
  2798                                  endatrom:
  2799                                  
  2800                                  ; ----------------------------------------------------------------------------
  2801                                  
  2802                                  ;; M015 -- begin changes
  2803                                  ;;
  2804                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  2805                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  2806                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  2807                                  ;; If our init code detects this error, it will install this
  2808                                  ;; special Int13 hook through the same mechanism that was set
  2809                                  ;; up for the IBM patch above. This code is also dynamically
  2810                                  ;; relocated by MSINIT.
  2811                                  
  2812                                  compaq_disk_io:
  2813 0000140A 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  2814                                  					;
  2815                                  					; the following	label defines the end of the at	rom patch.
  2816                                  					; this is used at configuration	time.
  2817                                  					;
  2818                                  					; warning!!!
  2819                                  					; this code will be dynamically	relocated by msinit
  2820 0000140D 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  2821                                  no_hookit:				
  2822                                  		;jmp	cs:Old13
  2823                                  		; 16/10/2022
  2824 0000140F 2EFF2E[0601]            		jmp	far [cs:Old13]
  2825                                  
  2826                                  ; ----------------------------------------------------------------------------
  2827                                  
  2828                                  mebbe_hookit:				
  2829 00001414 80FA80                  		cmp	dl, 80h
  2830 00001417 72F6                    		jb	short no_hookit
  2831 00001419 1E                      		push	ds
  2832 0000141A 50                      		push	ax
  2833 0000141B B84000                  		mov	ax, 40h
  2834 0000141E 8ED8                    		mov	ds, ax
  2835 00001420 58                      		pop	ax
  2836 00001421 9C                      		pushf
  2837                                  		;call	cs:Old13
  2838                                  		; 16/10/2022
  2839 00001422 2EFF1E[0601]            		call	far [cs:Old13]
  2840 00001427 1F                      		pop	ds
  2841 00001428 CA0200                  		retf	2
  2842                                  
  2843                                  ; ----------------------------------------------------------------------------
  2844                                  
  2845 0000142B 00                      end_compaq_i13hook: db 0			
  2846                                  
  2847                                  ; =============== S U B	R O U T	I N E ========================================
  2848                                  
  2849                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  2850                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  2851                                  
  2852                                  daycnt_to_day:	; proc far
  2853                                  
  2854                                  ; entry: [daycnt] = number of days since 1-1-80
  2855                                  ;
  2856                                  ; return: ch - century in bcd
  2857                                  ;	  cl - year in bcd
  2858                                  ;	  dh - month in bcd
  2859                                  ;	  dl - day in bcd
  2860                                  
  2861                                  		; 16/10/2022		
  2862 0000142C 2EFF36[F004]            		push	word [cs:daycnt] ; save daycnt
  2863 00001431 2E813E[F004]891C        		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  2864                                  					; # days from 1-1-1980 to 1-1-2000
  2865 00001438 730E                    		jnb	short century20
  2866 0000143A 2EC606[F404]13          		mov	byte [cs:base_century], 19
  2867 00001440 2EC606[F504]50          		mov	byte [cs:base_year], 80
  2868 00001446 EB13                    		jmp	short years
  2869                                  ; ----------------------------------------------------------------------------
  2870                                  		
  2871                                  century20:				
  2872 00001448 2EC606[F404]14          		mov	byte [cs:base_century], 20
  2873 0000144E 2EC606[F504]00          		mov	byte [cs:base_year], 0
  2874 00001454 2E812E[F004]891C        		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  2875                                  					; adjust daycnt
  2876                                  years:					
  2877 0000145B 31D2                    		xor	dx, dx
  2878 0000145D 2EA1[F004]              		mov	ax, [cs:daycnt]
  2879 00001461 BBB505                  		mov	bx, 1461	; (366+365*3)
  2880                                  					; # of days in a Leap year block
  2881 00001464 F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
  2882 00001466 2E8916[F004]            		mov	[cs:daycnt], dx	; save daycnt left
  2883 0000146B B304                    		mov	bl, 4
  2884 0000146D F6E3                    		mul	bl		; AX = # of years. Less	than 100
  2885 0000146F 2E0006[F504]            		add	[cs:base_year], al ; So, ah = 0. Adjust year
  2886 00001474 2EFF06[F004]            		inc	word [cs:daycnt]	; set daycnt to	1 base
  2887 00001479 2E813E[F004]6E01        		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  2888 00001480 7626                    		jbe	short leapyear	; within 366+355+355+355 days.
  2889 00001482 2EFE06[F504]            		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  2890 00001487 2E812E[F004]6E01        		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  2891 0000148E B90300                  		mov	cx, 3		; And next three years are normal
  2892                                  regularyear:				
  2893 00001491 2E813E[F004]6D01        		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  2894 00001498 7614                    		jbe	short yeardone	; {if (daycnt >	365)
  2895 0000149A 2EFE06[F504]            		inc	byte [cs:base_year]	;   { daycnt -=	365
  2896 0000149F 2E812E[F004]6D01        		sub	word [cs:daycnt], 365	;   }
  2897 000014A6 E2E9                    		loop	regularyear	; }
  2898                                  					;
  2899                                  					; should never fall through loop
  2900                                  leapyear:				
  2901 000014A8 2EC606[F704]1D          		mov	byte [cs:month_tab+1], 29 ; leap year.
  2902                                  					; change month table.
  2903                                  yeardone:				
  2904 000014AE 31DB                    		xor	bx, bx
  2905 000014B0 31D2                    		xor	dx, dx
  2906 000014B2 2EA1[F004]              		mov	ax, [cs:daycnt]
  2907                                  		;mov	si, offset month_tab
  2908 000014B6 BE[F604]                		mov	si, month_tab	; 19/10/2022
  2909 000014B9 B90C00                  		mov	cx, 12
  2910                                  months:					
  2911 000014BC FEC3                    		inc	bl
  2912                                  
  2913                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  2914                                  		;mov	dl, [cs:si]
  2915                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  2916                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  2917                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  2918                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  2919                                  		
  2920 000014BE 8A14                    		mov	dl, [si] ; ?	; mov dl, [cs:si]
  2921 000014C0 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
  2922                                  					; dh=0
  2923 000014C2 7605                    		jbe	short month_done
  2924 000014C4 46                      		inc	si		; next month
  2925 000014C5 29D0                    		sub	ax, dx		; adjust daycnt
  2926 000014C7 E2F3                    		loop	months		;
  2927                                  					; should never fall through loop
  2928                                  month_done:				
  2929 000014C9 2EC606[F704]1C          		mov	byte [cs:month_tab+1], 28
  2930                                  					; restore month table value
  2931 000014CF 88DA                    		mov	dl, bl
  2932 000014D1 2E8A36[F504]            		mov	dh, [cs:base_year]
  2933 000014D6 2E8A0E[F404]            		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  2934 000014DB 2EFF1E[0205]            		call	far [cs:bintobcd]
  2935                                  		;call	cs:bintobcd	; convert "day"	to bcd
  2936                                  					; dl = bcd day,	al = month
  2937 000014E0 86D0                    		xchg	dl, al
  2938 000014E2 2EFF1E[0205]            		call	far [cs:bintobcd]
  2939                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  2940 000014E7 86F0                    		xchg	dh, al
  2941 000014E9 2EFF1E[0205]            		call	far [cs:bintobcd]
  2942                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  2943 000014EE 86C8                    		xchg	cl, al
  2944 000014F0 2EFF1E[0205]            		call	far [cs:bintobcd]
  2945                                  		;call	cs:bintobcd	; ch = bcd century
  2946 000014F5 88C5                    		mov	ch, al
  2947 000014F7 2E8F06[F004]            		pop	word [cs:daycnt] ; restore original value
  2948 000014FC CB                      		retf
  2949                                  
  2950                                  enddaycnttoday:	
  2951                                  
  2952                                  ; =============== S U B	R O U T	I N E ========================================
  2953                                  
  2954                                  bin_to_bcd:	; proc far		; real time clock support
  2955                                  
  2956                                  ;convert a binary input in al (less than 63h or 99 decimal)
  2957                                  ;into a bcd value in al. ah destroyed.	
  2958                                  		
  2959 000014FD 51                      		push	cx		
  2960 000014FE D40A                    		aam			; al=high digit	bcd, ah=low digit bc
  2961 00001500 B104                    		mov	cl, 4
  2962 00001502 D2E4                    		shl	ah, cl		; mov the high digit to	high nibble
  2963 00001504 08E0                    		or	al, ah
  2964 00001506 59                      		pop	cx
  2965 00001507 CB                      		retf
  2966                                  
  2967                                  ; ----------------------------------------------------------------------------
  2968                                  
  2969                                  ; the k09 requires the routines for reading the clock because of the suspend/
  2970                                  ; resume facility. the system clock needs to be reset after resume.
  2971                                  
  2972                                  ; the following routine is executed at resume time when the system
  2973                                  ; powered on after suspension. it reads the real time clock and
  2974                                  ; resets the system time and date, and then irets.
  2975                                  
  2976                                  ; warning!!! this code will be dynamically relocated by msinit.
  2977                                  
  2978                                  int6c:					
  2979 00001508 0E                      		push	cs
  2980 00001509 1F                      		pop	ds
  2981 0000150A 8F06[BB06]              		pop	word [int6c_ret_addr]	; pop off return address
  2982 0000150E 8F06[BD06]              		pop	word [int6c_ret_addr+2]
  2983 00001512 9D                      		popf
  2984 00001513 E81300                  		call	read_real_date	; get the date from the clock
  2985 00001516 FA                      		cli
  2986 00001517 8936[F004]              		mov	[daycnt], si	; update dos copy of date
  2987 0000151B FB                      		sti
  2988 0000151C E8CB00                  		call	read_real_time	; get the time from the	rtc
  2989 0000151F FA                      		cli
  2990 00001520 B401                    		mov	ah, 1
  2991 00001522 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  2992                                  					; CX:DX	= clock	count
  2993                                  					; Return: time of day set
  2994 00001524 FB                      		sti
  2995                                  		;jmp	int6c_ret_addr	; long jump
  2996                                  		; 16/10/2022
  2997 00001525 FF2E[BB06]              		jmp	far [int6c_ret_addr] ; long jump
  2998                                  
  2999                                  ; =============== S U B	R O U T	I N E ========================================
  3000                                  
  3001                                  ;   read_real_date reads real-time clock for date and returns the number
  3002                                  ;   of days elapsed since 1-1-80 in si
  3003                                  
  3004                                  read_real_date:	; proc near		
  3005 00001529 50                      		push	ax
  3006 0000152A 51                      		push	cx
  3007 0000152B 52                      		push	dx
  3008 0000152C 30E4                    		xor	ah, ah		; throw	away clock roll	over
  3009 0000152E CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  3010                                  					; Return: CX:DX	= clock	count
  3011                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  3012                                  					; midnight
  3013                                  					; Otherwise, AL	> 0
  3014 00001530 5A                      		pop	dx
  3015 00001531 59                      		pop	cx
  3016 00001532 58                      		pop	ax
  3017 00001533 50                      		push	ax
  3018 00001534 53                      		push	bx
  3019 00001535 51                      		push	cx
  3020 00001536 52                      		push	dx
  3021 00001537 2EC706[DB06]0100        		mov	word [cs:daycnt2], 1
  3022                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  3023 0000153E B404                    		mov	ah, 4
  3024 00001540 CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  3025                                  					; Return: DL = day in BCD
  3026                                  					; DH = month in	BCD
  3027                                  					; CL = year in BCD
  3028                                  					; CH = century (19h or 20h)
  3029 00001542 7303                    		jnb	short read_ok
  3030 00001544 E99300                  		jmp	r_d_ret
  3031                                  ;-----------------------------------------------------------------------------
  3032                                  
  3033                                  read_ok:				
  3034 00001547 882E[BF06]              		mov	[bin_date_time], ch
  3035 0000154B 880E[C006]              		mov	[bin_date_time+1], cl
  3036 0000154F 8836[C106]              		mov	[bin_date_time+2], dh
  3037 00001553 8816[C206]              		mov	[bin_date_time+3], dl
  3038 00001557 2EC706[DB06]0200        		mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  3039 0000155E E84201                  		call	bcd_verify	; verify bcd values in range
  3040 00001561 7277                    		jb	short r_d_ret	;  some	value out of range
  3041 00001563 2EC706[DB06]0300        		mov	word [cs:daycnt2], 3
  3042 0000156A E8E600                  		call	date_verify
  3043 0000156D 726B                    		jb	short r_d_ret
  3044 0000156F 2EC706[DB06]0000        		mov	word [cs:daycnt2], 0
  3045 00001576 E8AA00                  		call	in_bin
  3046 00001579 A0[C006]                		mov	al, [bin_date_time+1]
  3047 0000157C 98                      		cbw
  3048 0000157D 803E[BF06]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  3049 00001582 7503                    		jnz	short century_19 ; no
  3050 00001584 83C064                  		add	ax, 100		; add in a century
  3051                                  
  3052                                  century_19:				
  3053 00001587 83E850                  		sub	ax, 80		; subtract off 1-1-80
  3054 0000158A B104                    		mov	cl, 4		; leap year every 4
  3055 0000158C F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  3056 0000158E 88E3                    		mov	bl, ah		; save odd years
  3057 00001590 98                      		cbw			; zero ah
  3058 00001591 B9B505                  		mov	cx, 1461	; 366+(3*365)
  3059                                  					; # of days in leap year blocks
  3060 00001594 F7E1                    		mul	cx
  3061 00001596 2EA3[DB06]              		mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  3062 0000159A 88D8                    		mov	al, bl		; get odd years	count
  3063 0000159C 98                      		cbw
  3064 0000159D 09C0                    		or	ax, ax
  3065 0000159F 740C                    		jz	short leap_year
  3066 000015A1 B96D01                  		mov	cx, 365		; days in year
  3067 000015A4 F7E1                    		mul	cx
  3068 000015A6 2E0106[DB06]            		add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  3069 000015AB EB07                    		jmp	short leap_adjustment ;	account	for leap year
  3070                                  					; possibly account for a leap day
  3071                                  ;-----------------------------------------------------------------------------
  3072                                  
  3073                                  leap_year:				
  3074 000015AD 803E[C106]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  3075 000015B2 7605                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  3076                                  leap_adjustment:			
  3077 000015B4 2EFF06[DB06]            		inc	word [cs:daycnt2] ; account for leap day
  3078                                  no_leap_adjustment:			
  3079 000015B9 8A0E[C206]              		mov	cl, [bin_date_time+3] ; get days of month
  3080 000015BD 30ED                    		xor	ch, ch
  3081 000015BF 49                      		dec	cx		; because of offset from day 1,	not day	0
  3082 000015C0 2E010E[DB06]            		add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  3083 000015C5 8A0E[C106]              		mov	cl, [bin_date_time+2] ; get month
  3084 000015C9 30ED                    		xor	ch, ch
  3085 000015CB 49                      		dec	cx		; january starts at offset 0
  3086 000015CC D1E1                    		shl	cx, 1		; word offset
  3087 000015CE BE[C306]                		mov	si, month_table
  3088 000015D1 01CE                    		add	si, cx
  3089                                  		; 16/10/2022
  3090                                  		; ds must be same with cs here, if so..
  3091                                  		; what for cs: prefixes are used !?)
  3092                                  		; mov	ax, [cs:si]
  3093                                  		; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  3094 000015D3 8B04                    		mov	ax, [si]	; mov ax, [cs:si]
  3095                                  					; get #	days in	previous months
  3096 000015D5 2E0106[DB06]            		add	[cs:daycnt2], ax
  3097                                  r_d_ret:				
  3098 000015DA 2E8B36[DB06]            		mov	si, [cs:daycnt2]
  3099 000015DF 5A                      		pop	dx
  3100 000015E0 59                      		pop	cx
  3101 000015E1 5B                      		pop	bx
  3102 000015E2 58                      		pop	ax
  3103 000015E3 C3                      		retn
  3104                                  
  3105                                  ;-----------------------------------------------------------------------------
  3106                                  
  3107                                  r_t_retj:				
  3108 000015E4 31C9                    		xor	cx, cx
  3109 000015E6 31D2                    		xor	dx, dx
  3110 000015E8 EB38                    		jmp	short r_t_ret
  3111                                  
  3112                                  ; =============== S U B	R O U T	I N E ========================================
  3113                                  
  3114                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  3115                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  3116                                  
  3117                                  read_real_time:	; proc near		
  3118 000015EA B402                    		mov	ah, 2
  3119 000015EC CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  3120                                  					; Return: CH = hours in	BCD
  3121                                  					; CL = minutes in BCD
  3122                                  					; DH = seconds in BCD
  3123 000015EE 72F4                    		jb	short r_t_retj
  3124 000015F0 882E[BF06]              		mov	[bin_date_time], ch ; hours
  3125 000015F4 880E[C006]              		mov	[bin_date_time+1], cl ; minutes
  3126 000015F8 8836[C106]              		mov	[bin_date_time+2], dh ; seconds
  3127 000015FC C606[C206]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  3128 00001601 E89F00                  		call	bcd_verify
  3129 00001604 72DE                    		jb	short r_t_retj
  3130 00001606 E88500                  		call	time_verify
  3131 00001609 72D9                    		jb	short r_t_retj
  3132 0000160B E81500                  		call	in_bin		; from bcd to bin
  3133 0000160E 8A2E[BF06]              		mov	ch, [bin_date_time]
  3134 00001612 8A0E[C006]              		mov	cl, [bin_date_time+1]
  3135 00001616 8A36[C106]              		mov	dh, [bin_date_time+2]
  3136 0000161A 8A16[C206]              		mov	dl, [bin_date_time+3]
  3137                                  		; 16/10/2022
  3138                                  		; 17/09/2022
  3139                                  		; 31/05/2019
  3140 0000161E FF1E[E206]              		call	far [ttticks] 
  3141                                  		;call	dword ptr ttticks ; note: indirect far call
  3142                                  					; cx:dx	= number of ticks
  3143                                  					; (at 18.2 ticks per sec.)
  3144                                  r_t_ret:				
  3145 00001622 C3                      		retn
  3146                                  
  3147                                  ; =============== S U B	R O U T	I N E =======================================
  3148                                  
  3149                                  ;   in_bin converts bin_date_time values from bcd to bin
  3150                                  
  3151                                  in_bin:		; proc near		
  3152 00001623 A0[BF06]                		mov	al, [bin_date_time] ; century or hours
  3153 00001626 E81F00                  		call	bcd_to_bin
  3154 00001629 A2[BF06]                		mov	[bin_date_time], al
  3155 0000162C A0[C006]                		mov	al, [bin_date_time+1] ; years or minutes
  3156 0000162F E81600                  		call	bcd_to_bin
  3157 00001632 A2[C006]                		mov	[bin_date_time+1], al
  3158 00001635 A0[C106]                		mov	al, [bin_date_time+2] ; months or seconds
  3159 00001638 E80D00                  		call	bcd_to_bin
  3160 0000163B A2[C106]                		mov	[bin_date_time+2], al
  3161 0000163E A0[C206]                		mov	al, [bin_date_time+3] ; days (not used for time)
  3162 00001641 E80400                  		call	bcd_to_bin
  3163 00001644 A2[C206]                		mov	[bin_date_time+3], al
  3164 00001647 C3                      		retn
  3165                                  
  3166                                  ; =============== S U B	R O U T	I N E =======================================
  3167                                  
  3168                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  3169                                  ;   a binary representation in al
  3170                                  ;   ah is destroyed
  3171                                  
  3172                                  bcd_to_bin:	; proc near		
  3173 00001648 88C4                    		mov	ah, al
  3174 0000164A 240F                    		and	al, 0Fh
  3175 0000164C B104                    		mov	cl, 4
  3176 0000164E D2EC                    		shr	ah, cl
  3177 00001650 D50A                    		aad
  3178 00001652 C3                      		retn
  3179                                  
  3180                                  ; =============== S U B	R O U T	I N E ========================================
  3181                                  
  3182                                  ;   date_verify loosely checks bcd date values to be in range
  3183                                  ;   in bin_date_time
  3184                                  
  3185                                  date_verify:	; proc near		
  3186 00001653 803E[BF06]20            		cmp	byte [bin_date_time], 20h ; century check
  3187 00001658 7732                    		ja	short date_error
  3188 0000165A 740E                    		jz	short century_20 ; jmp in 21th century
  3189 0000165C 803E[BF06]19            		cmp	byte [bin_date_time], 19h ; century check
  3190                                  		;jb	short date_error
  3191                                  		; 12/12/2022
  3192 00001661 722A                    		jb	short date_err2
  3193 00001663 803E[C006]80            		cmp	byte [bin_date_time+1], 80h ; year check
  3194                                  		;jb	short date_error
  3195                                  		; 12/12/2022
  3196 00001668 7223                    		jb	short date_err2
  3197                                  century_20:				
  3198 0000166A 803E[C006]99            		cmp	byte [bin_date_time+1], 99h ; year check
  3199 0000166F 771B                    		ja	short date_error
  3200 00001671 803E[C106]12            		cmp	byte [bin_date_time+2], 12h ; month check
  3201 00001676 7714                    		ja	short date_error
  3202 00001678 803E[C106]00            		cmp	byte [bin_date_time+2], 0
  3203                                  		;jbe	short date_error
  3204 0000167D 760D                    		jna	short date_error
  3205 0000167F 803E[C206]31            		cmp	byte [bin_date_time+3], 31h ; day check
  3206 00001684 7706                    		ja	short date_error
  3207                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  3208                                  		;;jbe	short date_error
  3209                                  		;jna	short date_error
  3210                                  		; 12/12/2022
  3211                                  		; cf=0
  3212                                  		;clc
  3213                                  		; 12/12/2022
  3214 00001686 803E[C206]01            		cmp	byte [bin_date_time+3], 1 ; day check
  3215 0000168B C3                      		retn
  3216                                  ;-----------------------------------------------------------------------------
  3217                                  
  3218                                  date_error:				
  3219 0000168C F9                      		stc
  3220                                  date_err2:
  3221 0000168D C3                      		retn
  3222                                  
  3223                                  ; =============== S U B	R O U T	I N E ========================================
  3224                                  
  3225                                  ; time_verify very loosely checks bcd date values to be in range
  3226                                  ; in bin_date_time
  3227                                  
  3228                                  time_verify:	; proc near		
  3229 0000168E 803E[BF06]24            		cmp	byte [bin_date_time], 24h ; hour check
  3230 00001693 770C                    		ja	short time_error
  3231 00001695 803E[C006]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  3232 0000169A 7705                    		ja	short time_error
  3233                                  		; 12/12/2022h
  3234                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  3235                                  		;ja	short time_error
  3236                                  		;clc
  3237                                  		;retn
  3238                                  		; 12/12/2022
  3239 0000169C 803E[C106]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  3240                                  time_error:
  3241                                  bv_error:	
  3242 000016A1 F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  3243 000016A2 C3                      		retn
  3244                                  
  3245                                  ; ----------------------------------------------------------------------------
  3246                                  
  3247                                  ;time_error:				
  3248                                  		;stc
  3249                                  		;retn
  3250                                  
  3251                                  ; =============== S U B	R O U T	I N E ========================================
  3252                                  
  3253                                  ;   bcd_verify checks values in bin_date_time to be valid
  3254                                  ;   bcd numerals.  carry set if any nibble out of range
  3255                                  
  3256                                  bcd_verify:	; proc near		
  3257 000016A3 B90400                  		mov	cx, 4		; 4 bytes to check
  3258 000016A6 BB[BF06]                		mov	bx, bin_date_time
  3259                                  bv_loop:				
  3260 000016A9 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  3261 000016AB 88C4                    		mov	ah, al
  3262 000016AD 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  3263                                  					; is 1's place in range?
  3264 000016B0 3C0A                    		cmp	al, 10
  3265 000016B2 77ED                    		ja	short bv_error	; jmp out of range
  3266 000016B4 D0EC                    		shr	ah, 1
  3267 000016B6 D0EC                    		shr	ah, 1
  3268 000016B8 D0EC                    		shr	ah, 1
  3269 000016BA D0EC                    		shr	ah, 1
  3270 000016BC 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  3271 000016BF 80FC0A                  		cmp	ah, 10		; is 10's place in range
  3272 000016C2 77DD                    		ja	short bv_error	; jmp out of range
  3273 000016C4 43                      		inc	bx		; next byte
  3274 000016C5 49                      		dec	cx
  3275 000016C6 75E1                    		jnz	short bv_loop
  3276 000016C8 F8                      		clc			; set success flag
  3277 000016C9 C3                      		retn
  3278                                  ; ----------------------------------------------------------------------------
  3279                                  
  3280                                  		; 12/12/2022
  3281                                  ;bv_error:				
  3282                                  		;stc			; set error flag
  3283                                  		;retn
  3284                                  
  3285                                  ; ----------------------------------------------------------------------------
  3286                                  
  3287                                  endk09:
  3288                                  
  3289                                  ; ----------------------------------------------------------------------------
  3290                                  
  3291                                  ;------------------------------------------------------------------------
  3292                                  ;									:
  3293                                  ;	System initialization						:
  3294                                  ;									:
  3295                                  ;	The entry conditions are established by the bootstrap		:
  3296                                  ;	loader and are considered unknown. The following jobs		:
  3297                                  ;	will be performed by this module:				:
  3298                                  ;									:
  3299                                  ;	1.	All device initialization is performed			:
  3300                                  ;	2.	A local stack is set up and DS:SI are set		:
  3301                                  ;		to point to an initialization table. Then		:
  3302                                  ;		an inter-segment call is made to the first		:
  3303                                  ;		byte of the dos 					:
  3304                                  ;	3.	Once the dos returns from this call the ds		:
  3305                                  ;		register has been set up to point to the start		:
  3306                                  ;		of free memory. The initialization will then		:
  3307                                  ;		load the command program into this area 		:
  3308                                  ;		beginning at 100 hex and transfer control to		:
  3309                                  ;		this program.						:
  3310                                  ;									:
  3311                                  ;------------------------------------------------------------------------
  3312                                  
  3313                                  ; 01/10/2022
  3314                                  ; 08/01/2018 - Retro DOS v4.0
  3315                                  
  3316                                  ; drvfat must be the first location of freeable space!
  3317                                  
  3318                                  
  3319                                  align 2
  3320                                  		;db 90h
  3321                                  
  3322                                  ; 20/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  3323                                  ; ((no need to read/load 'MSDOS.SYS', it is already loaded))
  3324                                  ; (((bios_l,bios_h,doscnt,fatloc,md_sectorsize,temp_cluster,last_fat_sec_num
  3325                                  ;   would be used to read 'MSDOS.SYS' from disk, now they are not needed)))
  3326                                  	
  3327 000016CA 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  3328                                  ;bios_l:	dw 0			; first	sector of data (low word)
  3329                                  ;bios_h:	dw 0			; first	sector of data (high word)
  3330                                  ;doscnt:	dw 0			; how many sectors to read
  3331 000016CC 00                      fbigfat:	db 0			; flags	for drive
  3332                                  ;fatloc:	dw 0			; seg addr of fat sector
  3333 000016CD 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  3334 000016CF 80                      rom_drv_num:	db 80h			; rom drive number
  3335                                  ;md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  3336                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  3337                                  ;last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  3338                                  
  3339                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  3340                                  ; call to determine drive parameters.
  3341                                  
  3342 000016D0 02                      num_heads:	db 2			; number of heads returned by rom
  3343 000016D1 09                      sec_trk:	db 9			; sec/trk returned by rom
  3344 000016D2 28                      num_cyln:	db 40			; number of cylinders returned by rom
  3345 000016D3 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  3346                                  
  3347                                  ; ----------------------------------------------------------------------------
  3348                                  
  3349 000016D4 0002000140000000        disktable:	dw 512,	256, 64, 0	; warning !!! old values
  3350 000016DC 0008010270000000        		dw 2048, 513, 112, 0
  3351 000016E4 0020020400010000        		dw 8192, 1026, 256, 0
  3352 000016EC A87F030800020000        		dw 32680, 2051,	512, 0	; warning !!! old values
  3353 000016F4 FFFF041000040000        		dw 65535, 4100,	1024, 0	; default disktable under
  3354                                  					; the assumption of total fat size <= 128 kb,
  3355                                  					; and the maximum size of fat entry = 16 bit.
  3356                                  
  3357 000016FC 0000A87F0308000200-     disktable2:	dw 0, 32680, 2051, 512,	0 
  3357 00001705 00                 
  3358                                  					; for compatibility.
  3359 00001706 040000000204000240-     		dw 4, 0, 402h, 200h, 40h ; covers upto 134 mb media.
  3359 0000170F 00                 
  3360                                  					; fbig = 40h
  3361 00001710 080000000308000240-     		dw 8, 0, 803h, 200h, 40h ; upto	268 mb
  3361 00001719 00                 
  3362 0000171A 100000000410000240-     		dw 10h,	0, 1004h, 200h,	40h ; upto 536 mb
  3362 00001723 00                 
  3363 00001724 200000000520000240-     		dw 20h,	0, 2005h, 200h,	40h ; upto 1072	mb
  3363 0000172D 00                 
  3364 0000172E 400000000640000240-     		dw 40h,	0, 4006h, 200h,	40h ; upto 2144	mb
  3364 00001737 00                 
  3365 00001738 800000000780000240-     		dw 80h,	0, 8007h, 200h,	40h ; upto 4288	mb...
  3365 00001741 00                 
  3366                                  					
  3367                                  ; ----------------------------------------------------------------------------
  3368                                  
  3369                                  ;******************************************************
  3370                                  ;variables for mini disk initialization
  3371                                  ;******************************************************
  3372                                  
  3373                                  ; 01/10/2022
  3374                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  3375                                  
  3376 00001742 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  3377 00001743 00                      hnum:		db 0			; real number of hardfiles
  3378 00001744 [8706]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  3379 00001746 [1709]                  end_of_bdss:	dw bdss			; offset value of the ending address
  3380                                  					; of bds table. needed to figure out
  3381                                  					; the dosdatasg address.
  3382 00001748 0000                    mini_hdlim:	dw 0			
  3383 0000174A 0000                    mini_seclim:	dw 0
  3384                                  
  3385                                  ;end of mini disk init variables **********************
  3386                                  
  3387                                  ; ----------------------------------------------------------------------------
  3388                                  			
  3389 0000174C 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  3390                                  
  3391                                  ; 13/12/2022
  3392                                  %if 0
  3393                                  
  3394                                  ;align 2
  3395                                  		db  90h	
  3396                                  
  3397                                  ; the following are the recommended bpbs for the media that we know of so far.
  3398                                  
  3399                                  ;struc bpbx
  3400                                  ;   resw 1 ; 512
  3401                                  ;   resb 1
  3402                                  ;   resw 1 ; 1
  3403                                  ;   resb 1 ; 2
  3404                                  ;   resw 1
  3405                                  ;   resw 1
  3406                                  ;   resb 1
  3407                                  ;   resw 1
  3408                                  ;   resw 1
  3409                                  ;   resw 1 ; 2
  3410                                  ;   resw 1
  3411                                  ;   resw 1 ; hidden sector high
  3412                                  ;   resd 1 ; extended total sectors
  3413                                  ;.size:
  3414                                  ;endstruc
  3415                                  
  3416                                  ; 08/01/2019 - Retro DOS v4.0
  3417                                  
  3418                                  ; 20/04/2019
  3419                                  
  3420                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  3421                                  
  3422                                  ; 09/12/2022
  3423                                  BPB48T:
  3424                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  3425                                  		; 48 tpi diskettes	;
  3426                                  		dw	512		; physical sector size in bytes
  3427                                  		db	2		; sectors/allocation unit
  3428                                  		dw	1		; reserved sectors for dos
  3429                                  		db	2		; number of allocation tables
  3430                                  		dw	112		; number of directory entries
  3431                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  3432                                  		db	0FDh		; media descriptor
  3433                                  		dw	2		; number of fat sectors
  3434                                  		dw	9		; sectors per track
  3435                                  		dw	2		; heads
  3436                                  		dw	0		; hidden sector count (low word)
  3437                                  		dw	0		; hidden sector (high)
  3438                                  		dw	0		; number of sectors (low)
  3439                                  		dw	0		; number of sectors (high)					
  3440                                  
  3441                                  		db 90h
  3442                                  ;align 2
  3443                                  BPB96T:
  3444                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  3445                                  		; 96 tpi diskettes	;
  3446                                  		dw	512		; physical sector size in bytes
  3447                                  		db	1		; sectors/allocation unit
  3448                                  		dw	1		; reserved sectors for dos
  3449                                  		db	2		; number of allocation tables
  3450                                  		dw	224		; number of directory entries
  3451                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  3452                                  		db	0F9h		; media descriptor
  3453                                  		dw	7		; number of fat sectors
  3454                                  		dw	15		; sectors per track
  3455                                  		dw	2		; heads
  3456                                  		dw	0		; hidden sector count (low word)
  3457                                  		dw	0		; hidden sector (high)
  3458                                  		dw	0		; number of sectors (low)
  3459                                  		dw	0		; number of sectors (high)
  3460                                  
  3461                                  		db 90h
  3462                                  ;align 2
  3463                                  BPB35:
  3464                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  3465                                  		; 3.5" diskettes - 720 KB ;		
  3466                                  		dw	512		; physical sector size in bytes
  3467                                  		db	2		; sectors/allocation unit
  3468                                  		dw	1		; reserved sectors for dos
  3469                                  		db	2		; number of allocation tables
  3470                                  		dw	112		; number of directory entries
  3471                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  3472                                  		db	0F9h		; media descriptor
  3473                                  		dw	3		; number of fat sectors
  3474                                  		dw	9		; sectors per track
  3475                                  		dw	2		; heads
  3476                                  		dw	0		; hidden sector count (low word)
  3477                                  		dw	0		; hidden sector (high)
  3478                                  		dw	0		; number of sectors (low)
  3479                                  		dw	0		; number of sectors (high)
  3480                                  
  3481                                  		db 90h
  3482                                  ;align 2
  3483                                  
  3484                                  ;align 2
  3485                                  ;BPB144:
  3486                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  3487                                  ;
  3488                                  ;		dw	512		; physical sector size in bytes
  3489                                  ;		db	1		; sectors/allocation unit
  3490                                  ;		dw	1		; reserved sectors for dos
  3491                                  ;		db	2		; number of allocation tables
  3492                                  ;		dw	224		; number of directory entries
  3493                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  3494                                  ;		db	0F0h		; media descriptor
  3495                                  ;		dw	9		; number of fat sectors
  3496                                  ;		dw	18		; sectors per track
  3497                                  ;		dw	2		; heads
  3498                                  ;		dw	0		; hidden sector count (low word)
  3499                                  ;		dw	0		; hidden sector (high)
  3500                                  ;		dw	0		; number of sectors (low)
  3501                                  ;		dw	0		; number of sectors (high)
  3502                                  ;
  3503                                  ;		db 90h
  3504                                  ;align 2
  3505                                  
  3506                                  BPB288:
  3507                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  3508                                  		; 3.5" diskettes - 2.88 MB ;	 
  3509                                  		dw	512		; physical sector size in bytes
  3510                                  		db	2		; sectors/allocation unit
  3511                                  		dw	1		; reserved sectors for dos
  3512                                  		db	2		; number of allocation tables
  3513                                  		dw	240		; number of directory entries
  3514                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  3515                                  		db	0F0h		; media descriptor
  3516                                  		dw	3		; number of fat sectors
  3517                                  		dw	9		; sectors per track
  3518                                  		dw	2		; heads
  3519                                  		dw	0		; hidden sector count (low word)
  3520                                  		dw	0		; hidden sector (high)
  3521                                  		dw	0		; number of sectors (low)
  3522                                  		dw	0		; number of sectors (high)
  3523                                  
  3524                                  		db 90h			;
  3525                                  ;align 2
  3526                                  
  3527                                  %endif
  3528                                  
  3529                                  ; ----------------------------------------------------------------------------
  3530                                  					; align	2
  3531                                  ; 09/12/2022
  3532                                  %if 0
  3533                                  bpbtable:	dw bpb48t		; 48tpi	drives
  3534                                  		dw bpb96t		; 96tpi	drives
  3535                                  		dw bpb35		; 3.5" drives
  3536                                  		dw bpb35		; unused 8" diskette
  3537                                  		dw bpb35		; unused 8" diskette
  3538                                  		dw bpb35		; used for hard	disk
  3539                                  		dw bpb35		; used for tape	drive
  3540                                  		dw bpb35		; FFOTHER
  3541                                  		dw bpb35		; ERIMO
  3542                                  		dw bpb288		; 2.88MB drive
  3543                                  		;
  3544                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  3545                                  %endif
  3546                                  
  3547                                  ; 13/12/2022
  3548                                  %if 0
  3549                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  3550                                  		dw BPB96T		; 96tpi	drives
  3551                                  		dw BPB35		; 3.5" drives
  3552                                  		dw BPB35		; unused 8" diskette
  3553                                  		dw BPB35		; unused 8" diskette
  3554                                  		dw BPB35		; used for hard	disk
  3555                                  		dw BPB35		; used for tape	drive
  3556                                  		dw BPB35		; FFOTHER
  3557                                  		dw BPB35		; ERIMO
  3558                                  		dw BPB288		; 2.88MB drive
  3559                                  		;
  3560                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  3561                                  
  3562                                  %endif
  3563                                  
  3564                                  ; ----------------------------------------------------------------------------
  3565                                  
  3566                                  ;	entry point to call utility functions in Bios_Code. At this time,
  3567                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  3568                                  ;	  will not yet be moved to its final resting place, so we know
  3569                                  ;	  it'll be low.
  3570                                  ;
  3571                                  ;	to use this function, do a "push cs" and load bp with the offset of
  3572                                  ;	  the function you want to call in Bios_Code. This routine will
  3573                                  ;	  push the address of a retf in Bios_Code onto the stack which
  3574                                  ;	  will get executed when the utility function finishes. It will
  3575                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  3576                                  ;	  and a retf
  3577                                  
  3578                                  ; 16/10/2022
  3579                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  3580                                  ; 09/12/2022
  3581                                  BC_RETF equ bc_retf
  3582                                  
  3583                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  3584                                  					; 2C7h:0C8h = 70h:2638h
  3585 00001755 [C800]                  		dw BC_RETF
  3586                                  
  3587                                  ; ----------------------------------------------------------------------------
  3588                                  
  3589                                  call_bios_code:	; proc far			
  3590 00001757 2EFF36[5517]            		push	word [cs:addr_of_bcretf] 
  3591                                  					; set up near return to far return
  3592 0000175C 2EFF36[E006]            		push	word [cs:cdev+2] ; push Bios_Code segment
  3593 00001761 55                      		push	bp		; save offset of utility function
  3594 00001762 CB                      		retf			; far jump to (DOS)BIOS code
  3595                                  
  3596                                  ; ----------------------------------------------------------------------------
  3597                                  		
  3598                                  		; 20/12/2022
  3599                                  ;flp_drvs	db 0			
  3600                                  
  3601                                  ; ----------------------------------------------------------------------------
  3602                                  
  3603                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0, classic/old MICROSOFT DOS method)
  3604                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel files, original/new method) (*)
  3605                                  ;      (*) (for using Retro DOS kernel 'MSDOS.SYS' with Retro DOS boot sector)
  3606                                  
  3607                                  ;-----------------------------------------------------------------------------
  3608                                  ; entry point from boot sector
  3609                                  ;-----------------------------------------------------------------------------
  3610                                  
  3611                                  init:		; 27/12/2018
  3612                                  		; MSDOS 6.0 (MSINIT.ASM)
  3613                                  		;=============================================================
  3614                                  		;
  3615                                  		; entry from boot sector. the register contents are:
  3616                                  		;
  3617                                  		;   dl = int 13 drive number we booted from
  3618                                  		;   ch = media byte
  3619                                  		;   bx = first data sector on disk.
  3620                                  		;   ax = first data sector (high)
  3621                                  		;   di = sectors/fat for the boot media.
  3622                                  
  3623                                  		; 07/04/2018
  3624                                  		;=============================================================
  3625                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  3626                                                  ; DL = [bsDriveNumber]
  3627                                  		; DH = [bsMedia]
  3628                                  		; AX = [bsSectors] ; Total sectors
  3629                                  		; DS = 0, SS = 0
  3630                                  		; BP = 7C00h
  3631                                  	
  3632                                  ; 20/12/2022
  3633                                  ; Changing original MSDOS 5.0 IO.SYS init code with Retro DOS v4.0 init code.		
  3634                                  %if 0	
  3635                                  		cli
  3636                                  
  3637                                  		push	ax
  3638                                  		xor	ax, ax
  3639                                  		mov	ds, ax
  3640                                  		pop	ax
  3641                                  %endif
  3642                                  
  3643                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3644                                  
  3645                                  KERNEL_SEGMENT equ 70h	; (DOS BIOSDATA SEGMENT)
  3646                                  BSSECPERTRACK equ 18h	; boot sector offset 18h (for Retro DOS & MSDOS)	
  3647                                  
  3648                                  ;-----------------------------------------------------------------------------
  3649                                  ; initialization - stage 1
  3650                                  ;-----------------------------------------------------------------------------
  3651                                  ; 02/06/2018 - Retro DOS v3.0
  3652                                  		
  3653                                  		; 21/12/2022
  3654                                  		; Move Retro DOS v2.0 boot sector parameters to 0060h:0
  3655                                  		;mov	bx, 60h
  3656                                  		;mov	es, bx
  3657                                  		;mov	si, bp
  3658                                  		;sub	di, di
  3659                                  		;mov	cx, 35 ; 70 bytes, 35 words
  3660                                  		;;mov	cl, 35
  3661                                  		;rep	movsw
  3662                                  
  3663 00001763 0E                      		push	cs
  3664 00001764 1F                      		pop	ds
  3665                                  
  3666                                  		; 20/03/2019 - Retro DOS v4.0
  3667                                  		;cli		; turn interrupts off while manupulating stack
  3668                                  		;mov	ss, cx	; set stack segment register
  3669 00001765 BC0007                  		mov	sp, 0700h ; move stack pointer to safe place
  3670                                  		;sti		; turn interrupts on
  3671                                  
  3672                                  		; 27/03/2018
  3673                                  		;mov	cx, KERNEL_SIZE	; words !
  3674                                  
  3675                                  		; 20/03/2019
  3676 00001768 B90080                  		mov	cx, 32768 ; 65536 bytes
  3677                                  
  3678                                  		; 21/12/2022
  3679                                  		; 07/04/2018
  3680 0000176B BB7000                  		mov	bx, KERNEL_SEGMENT ; 0070h
  3681                                  		;mov	bl, KERNEL_SEGMENT
  3682 0000176E 8EC3                    		mov	es, bx
  3683 00001770 31FF                    		xor	di, di
  3684 00001772 89FE                    		mov	si, di
  3685                                  		
  3686                                  		; Move KERNEL file from 1000h:0 to 0070h:0
  3687                                  		; (Retro DOS v2 BS loads 'MSDOS.SYS' at 1000h:0000h)
  3688 00001774 F3A5                    		rep	movsw
  3689                                  
  3690                                  		; 20/03/2019 - Retro DOS v4.0
  3691 00001776 53                      		push	bx
  3692 00001777 68[7B17]                		push	init0
  3693 0000177A CB                      		retf
  3694                                  init0:	
  3695                                  		; 20/12/2022
  3696                                  		; (combined kernel file > 64KB)
  3697                                  
  3698                                  		; 20/03/2019
  3699 0000177B B520                    		mov	ch, 20h
  3700 0000177D 8ED9                    		mov	ds, cx ; 2000h
  3701                                  		;mov	cx, 1070h
  3702 0000177F B97010                  		mov	cx, KERNEL_SEGMENT+1000h ; 20/12/2022
  3703 00001782 8EC1                    		mov	es, cx
  3704                                  		
  3705                                  		; 21/12/2022
  3706                                  		KERNEL_SIZE equ END_OF_KERNEL - BData_start
  3707                                  
  3708 00001784 B9[CA5D]                		mov	cx, KERNEL_SIZE - 32768
  3709                                  		;xor	si, si
  3710                                  		;xor	di, di
  3711 00001787 F3A5                    		rep	movsw
  3712                                  
  3713                                  		; 17/06/2018 
  3714 00001789 8EDB                    		mov	ds, bx
  3715                                  		; 21/03/2019
  3716 0000178B 8EC3                    		mov	es, bx
  3717                                  ;init0:
  3718                                  ;		;push	es
  3719                                  ;		push	bx ; 20/03/2019
  3720                                  ;		push	init1 ; 07/04/2018
  3721                                  ;		retf	; jump to 0070h:init1
  3722                                  ;init:
  3723                                  init1:
  3724                                  		; 20/12/2022
  3725                                  		; Change INT 1Eh diskette parameters table and INT 1Eh address
  3726                                  		; for full MSDOS compatibility.
  3727                                  
  3728 0000178D 8EC1                    		mov	es, cx ; 0
  3729 0000178F 8ED9                    		mov	ds, cx ; 0
  3730                                  
  3731 00001791 B82205                  		mov	ax, SEC9
  3732                                  
  3733                                  		;mov	bx, 1Eh*4  ; [0078h] ; INT 1Eh vector/pointer
  3734 00001794 B378                    		mov	bl, 1Eh*4
  3735                                  				; INT 1Eh points to diskette parms table
  3736                                  
  3737                                  		; check if the table is already at 0:SEC9 (0:0522h)
  3738                                   		; (do not move the DPT if is not original ROMBIOS table)
  3739                                  
  3740                                  		;;or	[bx+2],cx [(1Eh*4)+2] ; [007Ah] ; segment
  3741                                  		;;jnz	short mov_dpt
  3742                                  
  3743                                  		;cmp	ax, [bx]  ; [1Eh*4] = 0522h ?
  3744                                  		;je	short dont_mov_dpt
  3745                                  
  3746                                  		;mov	si, [bx] ; [1Eh*4]		
  3747                                  ;mov_dpt:
  3748                                  		;mov	ds, [bx+2] ; [(1Eh*4)+2] ; [007Ah] ; segment
  3749 00001796 C537                    		lds	si, [bx]
  3750 00001798 89C7                    		mov	di, ax  ; SEC9
  3751 0000179A B10B                    		mov	cl, 11
  3752                                  		;cld
  3753 0000179C F3A4                    		rep	movsb
  3754                                  
  3755                                  		; Set INT 1Eh vector/pointer to the new DPT address
  3756 0000179E 8ED9                    		mov	ds, cx ; 0
  3757 000017A0 8907                    		mov	[bx], ax ; SEC9	; [007Eh] ; 1Eh*4  ; offset
  3758 000017A2 894F02                  		mov	[bx+2], cx ; 0  ; [007Ah] ; 1Eh*4+2 ; segment
  3759                                  ;dont_mov_dpt:
  3760                                  
  3761                                  ; 20/12/2022 - Retro DOS v4.0
  3762                                  %if 0
  3763                                  		; 27/12/2018 - Retro DOS v4.0
  3764                                  		; 'Starting MS-DOS...' message
  3765                                  		; (MSDOS 6.21, IO.SYS Segment: 423h, Offset: 5673h)
  3766                                  		; (0070h:96A3h)
  3767                                  
  3768                                    	    	mov     si, SYSINIT_START+StartMsg ; 18/03/2019
  3769                                  		mov     ah, 0Eh
  3770                                  		;bh = 0
  3771                                          	mov     bl, 7		; "normal" attribute and page
  3772                                  startmsg_nxt_chr:  
  3773                                  		lodsb
  3774                                  		or	al, al
  3775                                          	jz	short startmsg_ok
  3776                                         
  3777                                  		int	10h		; video write
  3778                                          	jmp	short startmsg_nxt_chr
  3779                                  
  3780                                  ;flp_drvs:	db  0 	; 27/12/2018 - Retro DOS v4.0
  3781                                  
  3782                                  startmsg_ok:
  3783                                  
  3784                                  %endif
  3785                                  
  3786                                  ;-----------------------------------------------------------------------------
  3787                                  ; initialization - stage 2
  3788                                  ;-----------------------------------------------------------------------------
  3789                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3790                                  
  3791                                  
  3792                                  ; 19/03/2018
  3793                                  ; Retro DOS v2.0 (24/02/2018)
  3794                                  ; [REF: MSDOS 3.3, MSBIO, "MSINIT.ASM"  (24/07/1987)]
  3795                                  
  3796                                  ;------------------------------------------------------------------------
  3797                                  ;									:
  3798                                  ;	System initialization						:
  3799                                  ;									:
  3800                                  ;	The entry conditions are established by the bootstrap		:
  3801                                  ;	loader and are considered unknown. The following jobs		:
  3802                                  ;	will be performed by this module:				:
  3803                                  ;									:
  3804                                  ;	1.	All device initialization is performed			:
  3805                                  ;	2.	A local stack is set up and DS:SI are set		:
  3806                                  ;		to point to an initialization table. Then		:
  3807                                  ;		an inter-segment call is made to the first		:
  3808                                  ;		byte of the dos 					:
  3809                                  ;	3.	Once the dos returns from this call the ds		:
  3810                                  ;		register has been set up to point to the start		:
  3811                                  ;		of free memory. The initialization will then		:
  3812                                  ;		load the command program into this area 		:
  3813                                  ;		beginning at 100 hex and transfer control to		:
  3814                                  ;		this program.						:
  3815                                  ;									:
  3816                                  ;------------------------------------------------------------------------
  3817                                  		
  3818                                  		; 20/12/2022
  3819                                  		; ----------------------
  3820                                  		; Registers
  3821                                  		; ----------------------
  3822                                  		; DL = [bsDriveNumber]
  3823                                  		; DH = [bsMedia]
  3824                                  		; DS = 0, ES = 0, SS = 0
  3825                                  		; BP = 7C00h
  3826                                  		; SP = 700h
  3827                                  		; ----------------------
  3828                                  		; CX = 0				
  3829                                  
  3830                                  ; 02/10/2022 - 20/12/2022
  3831                                  ; ------------------------------------------------------------------------------
  3832                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  3833                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  3834                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  3835                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  3836                                  ;	moves kernel to segment 70h at first, then sets diskette parameters
  3837                                  ;	at segment 50h (while MSDOS 5.0 boot sector and then MSLOAD sets this).
  3838                                  ; ------------------------------------------------------------------------------
  3839                                  
  3840                                  ; msload will check the extended boot record and set ax, bx accordingly.
  3841                                  ;
  3842                                  ;;	msload passes a 32 bit sector number hi word in ax and low in bx
  3843                                  ;;	save this in cs:bios_h and cs:bios_l. this is for the start of
  3844                                  ;;	data sector of the bios.
  3845                                  ;
  3846                                  ;		mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  3847                                  ;		mov	[cs:bios_l], bx
  3848                                  
  3849                                  ; with the following information from msload, we don't need the
  3850                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  3851                                  ;     limitation of msbio.com file.
  3852                                  
  3853                                  		; 21/12/2022
  3854 000017A5 FA                      		cli
  3855                                  
  3856 000017A6 0E                      		push	cs		; Save a peck of interrupt vectors...
  3857 000017A7 07                      		pop	es
  3858                                  		;push	cx
  3859                                  		;push	di
  3860                                  		; 20/12/2022
  3861 000017A8 B105                    		mov	cl, 5
  3862                                  		;mov	cx, 5		; NUMROMVECTORS
  3863                                  					; no. of rom vectors to	be saved
  3864                                  		;mov	si, offset RomVectors ; point to list of int vectors
  3865 000017AA BE[0001]                		mov	si, RomVectors
  3866                                  next_int_:		
  3867 000017AD 2E                      		cs	; 16/10/2022
  3868 000017AE AC                      		lodsb		
  3869                                  		;lods	byte ptr cs:[si] ; cs lodsb
  3870 000017AF 98                      		cbw			; ax = interrupt number
  3871 000017B0 D1E0                    		shl	ax, 1
  3872 000017B2 D1E0                    		shl	ax, 1		; int no * 4
  3873 000017B4 89C7                    		mov	di, ax		; interrupt vector address
  3874 000017B6 87F7                    		xchg	si, di		; rombios interrupt vector address in si
  3875                                  					; saving address in di
  3876                                  		;lodsw			; movsw
  3877                                  		;stosw
  3878                                  		;lodsw			; movsw
  3879                                  		;stosw			; save the vector
  3880                                  		; 20/12/2022
  3881 000017B8 A5                      		movsw
  3882 000017B9 A5                      		movsw		
  3883                                  
  3884 000017BA 87F7                    		xchg	si, di
  3885 000017BC E2EF                    		loop	next_int_
  3886                                  		
  3887                                  		;pop	di
  3888                                  		;pop	cx
  3889                                  
  3890                                  ; we need to save int13 in two places in case we are running on an at.
  3891                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  3892                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  3893                                  ; rom int13 routine, we must have that rom address also stored away.
  3894                                  
  3895                                  		; 20/12/2022
  3896                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  3897                                  		;mov	[cs:Orig13], ax
  3898                                  		;mov	ax, [cs:Old13+2]
  3899                                  		;mov	[cs:Orig13+2], ax
  3900                                  
  3901                                  		; 16/10/2022
  3902 000017BE C7064C00[7407]          		mov	word [13h*4], block13
  3903                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  3904                                  					; set up int 13	for new	action
  3905 000017C4 8C0E4E00                		mov	[13h*4+2], cs
  3906                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  3907 000017C8 C7065400[4808]          		mov	word [15h*4], Int15
  3908                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  3909                                  					; set up int 15	for new	action
  3910 000017CE 8C0E5600                		mov	[15h*4+2], cs
  3911                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  3912 000017D2 C7066400[F907]          		mov	word [19h*4], int19
  3913                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  3914                                  					; set up int 19	for new	action
  3915 000017D8 8C0E6600                		mov	[19h*4+2], cs
  3916                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  3917                                  
  3918                                  		; 20/12/2022
  3919 000017DC 0E                      		push	cs
  3920 000017DD 1F                      		pop	ds
  3921                                  		
  3922 000017DE A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  3923 000017E1 A3[B400]                		mov	[Orig13], ax
  3924 000017E4 A1[0801]                		mov	ax, [Old13+2]
  3925 000017E7 A3[B600]                		mov	[Orig13+2], ax
  3926                                  					; ;
  3927 000017EA FB                      		sti
  3928 000017EB CD11                    		int	11h		; EQUIPMENT DETERMINATION
  3929                                  					; Return: AX = equipment flag bits
  3930                                  
  3931                                  ; we have to support a system that does not have any diskette
  3932                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  3933                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  3934                                  ; otherwise, the system has only hardfiles.
  3935                                  ;
  3936                                  ; important thing is that still, for compatibility reason, the drive letter
  3937                                  ; for the hardfiles start from "c".  so, we still need to allocate dummy bds
  3938                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  3939                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  3940                                  ; drives will get "invalid drive letter ..." message. we are going to
  3941                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  3942                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  3943                                  
  3944                                  ; check the register returned by the equipment determination interrupt
  3945                                  ; we have to handle the case of no diskettes in the system by faking
  3946                                  ; two dummy drives.
  3947                                  ;
  3948                                  ; if the register indicates that we do have floppy drives we don't need
  3949                                  ; to do anything special.
  3950                                  ;
  3951                                  ; if the register indicates that we don't have any floppy drives then
  3952                                  ; what we need to do is set the fakefloppydrv variable, change the
  3953                                  ; register to say that we do have floppy drives and then go to execute
  3954                                  ; the code which starts at notsingle. this is because we can skip the
  3955                                  ; code given below which tries to find if there are one or two drives
  3956                                  ; since we already know about this.
  3957                                  
  3958                                  		; 06/05/2019 - Retro DOS v4.0
  3959 000017ED 88C1                    		mov	cl, al
  3960                                  
  3961                                  		; 12/12/2022
  3962 000017EF A801                    		test	al, 1
  3963                                  		;test	ax, 1		; floppy drives	present	?
  3964 000017F1 751F                    		jnz	short normalfloppydrv ;	yes.
  3965                                  
  3966                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  3967                                  ; whether it is an old ROM BIOS or a new one
  3968                                  ;
  3969                                  ; WARNING !!!
  3970                                  ;
  3971                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  3972                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  3973                                  
  3974                                  		; 20/12/2022
  3975                                  		;push	ax
  3976                                  		;push	bx
  3977                                  		;push	cx
  3978 000017F3 52                      		push	dx
  3979                                  		;push	di
  3980 000017F4 06                      		push	es
  3981 000017F5 B408                    		mov	ah, 8
  3982 000017F7 B200                    		mov	dl, 0
  3983 000017F9 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  3984                                  					; DL = drive number
  3985                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  3986                                  					; DL = number of consecutive drives
  3987                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  3988 000017FB 7202                    		jc	short _gdskp_error
  3989                                  		;;mov	[cs:flp_drvs], dl
  3990                                  		; 20/12/2022
  3991                                  		; ds = cs
  3992                                  		;mov	[flp_drvs], dl
  3993 000017FD 88D1                    		mov	cl, dl
  3994                                  _gdskp_error:	
  3995                                  		; 20/12/2022			
  3996 000017FF 07                      		pop	es
  3997                                  		;pop	di
  3998 00001800 5A                      		pop	dx
  3999                                  		;pop	cx
  4000                                  		;pop	bx
  4001                                  		;pop	ax
  4002                                  		
  4003 00001801 720F                    		jc	short normalfloppydrv
  4004                                  					; if error it is an old ROM BIOS
  4005                                  					; so, lets assume that ROM BIOS lied
  4006                                  		; 20/12/2022
  4007                                  		; ds = cs
  4008                                  		;cmp	byte [flp_drvs], 0
  4009                                  		;;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  4010                                  		;jz	short _set_fake_flpdrv
  4011                                  		;;mov	al, [cs:flp_drvs]
  4012                                  		;mov	al, [flp_drvs]
  4013                                  		;;dec	al		; make it zero based
  4014                                  		;; 18/12/2022
  4015                                  		;dec	ax
  4016                                  		;jmp	short got_num_flp_drvs
  4017                                  		
  4018                                  		; 20/12/2022
  4019 00001803 08C9                    		or	cl, cl ; [flp_drvs]
  4020 00001805 7403                    		jz	short _set_fake_flpdrv		
  4021 00001807 49                      		dec	cx	
  4022 00001808 EB0C                    		jmp	short got_num_flp_drvs
  4023                                  ; ----------------------------------------------------------------------------
  4024                                  
  4025                                  _set_fake_flpdrv:
  4026                                  		;20/12/2022
  4027                                  		; ds = cs
  4028 0000180A FEC1                    		inc	cl	; cl = 1
  4029 0000180C 880E[D316]              		mov	[fakefloppydrv], cl ; 1
  4030                                  		;mov	byte [fakefloppydrv], 1		
  4031                                  		;;mov	byte [cs:fakefloppydrv], 1
  4032                                  					; we don't have any floppy drives.
  4033                                  		; 20/12/2022
  4034                                  		;mov	ax, 1
  4035 00001810 EB0A                    		jmp	short settwodrive ; well then set it for two drives!
  4036                                  ; ----------------------------------------------------------------------------
  4037                                  
  4038                                  normalfloppydrv:			; yes, bit 0 is 1.			
  4039                                  		; 20/12/2022
  4040                                  		;rol	al, 1		; there	exist floppy drives.
  4041                                  		;rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  4042 00001812 D0C1                    		rol	cl, 1
  4043 00001814 D0C1                    		rol	cl, 1
  4044                                  got_num_flp_drvs:			
  4045                                  		;;and	ax, 3		; only look at bits 0 &	1
  4046                                  		; 18/12/2022
  4047                                  		;and	al, 3
  4048                                  		; 20/12/2022
  4049 00001816 80E103                  		and	cl, 3
  4050 00001819 7505                    		jnz	short notsingle	; zero means single drive system
  4051                                  		; 20/12/2022
  4052 0000181B 41                      		inc	cx
  4053                                  		;inc	ax		; pretend it's a two drive system
  4054                                  settwodrive:				; set this to two fakedrives
  4055                                  		; 20/12/2022
  4056                                  		; ds = cs
  4057 0000181C FE06[7800]              		inc	byte [single]
  4058                                  		;inc	byte [cs:single] ; remember this
  4059                                  notsingle:	
  4060                                  		; 20/12/2022			
  4061                                  		;inc	ax		; ax has number	of drives, 2-4
  4062                                  		;			; is also 0 indexed boot drive if we
  4063                                  		;			; booted off hard file
  4064                                  		;mov	cl, al		; ch is	fat id,	cl # floppies
  4065                                  		; 20/12/2022
  4066 00001820 FEC1                    		inc	cl	; cl >= 2
  4067                                  
  4068                                  ; 16/10/2022
  4069                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  4070                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  4071                                  BRKADR	 EQU	1BH * 4	; 6CH, 1BH break vector address
  4072                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  4073                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  4074                                  SEC9	EQU	522h	; address of disk parameters
  4075                                  CHROUT	EQU	29h
  4076                                  LSTDRV	EQU     504h
  4077                                  
  4078                                  ; determine whether we booted from floppy or hard disk...
  4079                                  
  4080                                  		; 20/12/2022
  4081 00001822 88C8                    		mov	al, cl	; 26/05/2019
  4082                                  
  4083 00001824 F6C280                  		test	dl, 80h		; boot from floppy ?
  4084 00001827 7502                    		jnz	short gothrd	; no.
  4085 00001829 31C0                    		xor	ax, ax		; indicate boot	from drive a
  4086                                  gothrd:					
  4087                                  
  4088                                  ; MSDOS 6.0
  4089                                  ;   ax = 0-based drive we booted from
  4090                                  ;   bios_l, bios_h set.
  4091                                  ;   cl = number of floppies including fake one
  4092                                  ;   ch = media byte
  4093                                  
  4094                                  ; Retro DOS 4.0 - 27/12/2018 
  4095                                  ;  (from Retro DOS v2.0 boot sector)
  4096                                  ;   dl = int 13 drive number we booted from
  4097                                  ;   dh = media byte
  4098                                  
  4099                                  		; 20/12/2022
  4100 0000182B 88F5                    		mov	ch, dh		; 01/07/2018
  4101                                  
  4102                                  		; cl = number of floppies
  4103                                  		; ch = media byte
  4104                                  
  4105                                  		; set up local stack
  4106                                  
  4107                                  		; 20/12/2022
  4108                                  		;xor	dx, dx		; ax = 0-based drive we	booted from
  4109                                  					; bios_l, bios_h set.
  4110                                  					; cl = number of floppies including fake one
  4111                                  					; ch = media byte
  4112                                  		; 20/12/2022
  4113                                  		; es = ds = cs
  4114                                  		; ss = 0
  4115                                  		; sp = 700h
  4116                                  
  4117                                  		; 20/12/2022
  4118                                  		;cli
  4119                                  		;mov	ss, dx		; set stack segment and stack pointer
  4120                                  		;mov	sp, 700h
  4121                                  		;sti
  4122                                  
  4123 0000182D 51                      		push	cx ; (***) 	; save number of floppies and media byte
  4124                                  		
  4125 0000182E 88EC                    		mov	ah, ch		; FAT ID to AH
  4126 00001830 50                      		push	ax ; (**)	; save boot drive number and media byte
  4127                                  		
  4128                                  ; let model_byte, secondary_model_byte be set here!!!
  4129                                  
  4130 00001831 B4C0                    		mov	ah, 0C0h
  4131 00001833 CD15                    		int	15h	; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  4132 00001835 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  4133 00001837 80FC00                  		cmp	ah, 0
  4134 0000183A 7510                    		jnz	short no_rom_system_conf
  4135                                  
  4136                                  ;		; 20/12/2022
  4137                                  ;		; (Programmer's Guide to the AMIBIOS, page 268)
  4138                                  ;		; (https://stanislavs.org/helppc/int_15-c0.html)
  4139                                  ;
  4140                                  ;		INT 15h, ah = C0h - Return System Configuration Parameters (PS/2 only)
  4141                                  ;
  4142                                  ;		on return:
  4143                                  ;		CF = 0 if successful
  4144                                  ;		   = 1 if error
  4145                                  ;		AH = when CF set, 80h for PC & PCjr, 86h for XT
  4146                                  ;	     	    (BIOS after 11/8/82) and AT (BIOS after 1/10/84)
  4147                                  ;
  4148                                  ;		ES:BX = pointer to system descriptor table in ROM of the format:
  4149                                  ;
  4150                                  ;		Offset Size	     Description
  4151                                  ;
  4152                                  ;		  00   word   length of descriptor (8 minimum)
  4153                                  ;		  02   byte   model byte (same as F000:FFFE, not reliable)
  4154                                  ;		  03   byte   secondary model byte
  4155                                  ;		  04   byte   BIOS revision level (zero based)
  4156                                  ;		  05   byte   feature information, see below
  4157                                  ;		  06   dword  reserved
  4158                                  
  4159                                  		; 20/12/2022
  4160                                  		; ds = cs
  4161 0000183C 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  4162 00001840 A2[3E06]                		mov	[model_byte], al
  4163                                  		;mov	[cs:model_byte], al
  4164                                  					; get/save model byte
  4165 00001843 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  4166 00001847 A2[3F06]                		mov	[secondary_model_byte], al
  4167                                  		;mov	[cs:secondary_model_byte], al
  4168                                  					; get/save secondary model byte
  4169 0000184A EB0C                    		jmp	short turn_timer_on
  4170                                  ;-----------------------------------------------------------------------------
  4171                                  
  4172                                  no_rom_system_conf:			
  4173 0000184C BEFFFF                  		mov	si, 0FFFFh
  4174 0000184F 8EC6                    		mov	es, si
  4175                                  		; 20/12/2022
  4176 00001851 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  4177 00001855 A2[3E06]                		mov	[model_byte], al
  4178                                  		;mov	[cs:model_byte], al ; save model byte
  4179                                  turn_timer_on:				
  4180 00001858 B020                    		mov	al, 20h	; ' '   ; turn on the timer
  4181 0000185A E620                    		out	20h, al		; Interrupt controller,	8259A.
  4182                                  					; AKPORT
  4183                                  
  4184                                  ; some olivetti m24 machines have an 8530 serial communications
  4185                                  ; chip installed at io address 50h and 52h. if we're running
  4186                                  ; on one of those, we must inhibit the normal aux port initialization
  4187                                  
  4188                                  		; 20/12/2022
  4189                                  		; ds = cs
  4190 0000185C 803E[3E06]00            		cmp	byte [model_byte], 0
  4191                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  4192 00001861 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  4193                                  					; (except olivetti m24)
  4194 00001863 E466                    		in	al, 66h		; is 8530 installed?
  4195 00001865 A820                    		test	al, 20h
  4196 00001867 740A                    		jz	short not_olivetti_m24 ; we're done if not
  4197 00001869 B00F                    		mov	al, 0Fh		; double check
  4198 0000186B E650                    		out	50h, al
  4199 0000186D E450                    		in	al, 50h
  4200 0000186F A801                    		test	al, 1		; this test was	copied from olivetti
  4201 00001871 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  4202                                  
  4203                                  not_olivetti_m24:
  4204 00001873 B003                    		mov	al, 3		; init com4
  4205 00001875 E89F08                  		call	aux_init
  4206 00001878 B002                    		mov	al, 2		; init com3
  4207 0000187A E89A08                  		call	aux_init
  4208 0000187D B001                    		mov	al, 1		; init com2
  4209 0000187F E89508                  		call	aux_init
  4210 00001882 30C0                    		xor	al, al		; init com1
  4211 00001884 E89008                  		call	aux_init
  4212                                  
  4213                                  skip_aux_port_init:			
  4214 00001887 B002                    		mov	al, 2		; init lpt3
  4215 00001889 E88308                  		call	print_init
  4216 0000188C B001                    		mov	al, 1		; init lpt2
  4217 0000188E E87E08                  		call	print_init
  4218 00001891 30C0                    		xor	al, al		; init lpt1
  4219 00001893 E87908                  		call	print_init
  4220                                  
  4221 00001896 31D2                    		xor	dx, dx	; 0
  4222 00001898 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  4223 0000189A 8EC2                    		mov	es, dx
  4224 0000189C 31C0                    		xor	ax, ax
  4225                                  		; 16/10/2022
  4226 0000189E BF3405                  		mov	di, INITSPOT	; 0534h
  4227                                  		;mov	di, 534h	; INITSPOT (0000h:0534h)
  4228                                  					; IBM wants 4 zeros here
  4229 000018A1 AB                      		stosw
  4230 000018A2 AB                      		stosw
  4231 000018A3 8CC8                    		mov	ax, cs		; fetch	segment
  4232 000018A5 C7066C00[EE06]          		mov	word [BRKADR], cbreak
  4233                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  4234                                  					; break	entry point
  4235 000018AB A36E00                  		mov	[BRKADR+2], ax		
  4236                                  		;mov	ds:6Eh,	ax	; vector for break
  4237 000018AE C706A400[6207]          		mov	word [CHROUT*4], outchr
  4238                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  4239 000018B4 A3A600                  		mov	[CHROUT*4+2], ax
  4240                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  4241                                  
  4242 000018B7 BF0400                  		mov	di, 4
  4243 000018BA BB[F406]                		mov	bx, intret ; 19/10/2022
  4244                                  		;mov	bx, offset intret ; intret (cs:intret)
  4245                                  					; will initialize rest of interrupts
  4246 000018BD 93                      		xchg	ax, bx
  4247 000018BE AB                      		stosw			; location 4
  4248 000018BF 93                      		xchg	ax, bx		; cs:
  4249 000018C0 AB                      		stosw			; int 1	; location 6
  4250 000018C1 83C704                  		add	di, 4
  4251 000018C4 93                      		xchg	ax, bx
  4252 000018C5 AB                      		stosw			; location 12
  4253 000018C6 93                      		xchg	ax, bx		; cs:
  4254 000018C7 AB                      		stosw			; int 3	; location 14
  4255 000018C8 93                      		xchg	ax, bx
  4256 000018C9 AB                      		stosw			; location 16
  4257 000018CA 93                      		xchg	ax, bx		; cs:
  4258 000018CB AB                      		stosw			; int 4	; location 18
  4259                                  
  4260                                  
  4261                                  ;		; 20/12/2022
  4262                                  ;		; (https://stanislavs.org/helppc/bios_data_area.html)
  4263                                  ;		Address Size	   Description	 (BIOS/DOS Data Area)
  4264                                  ;	
  4265                                  ;		50:00	byte	Print screen status byte
  4266                                  ;				 00 = PrtSc not active,
  4267                                  ;				 01 = PrtSc in progress
  4268                                  ;				 FF = error
  4269                                  ;		50:01  3 bytes	Used by BASIC
  4270                                  ;		50:04	byte	DOS single diskette mode flag, 0=A:, 1=B:
  4271                                  ;		50:05  10bytes	POST work area
  4272                                  ;		50:0F	byte	BASIC shell flag; set to 2 if current shell
  4273                                  ;		50:10	word	BASICs default DS value (DEF SEG)
  4274                                  ;		50:12	dword	Pointer to BASIC INT 1C interrupt handler
  4275                                  ;		50:16	dword	Pointer to BASIC INT 23 interrupt handler
  4276                                  ;		50:1A	dword	Pointer to BASIC INT 24 disk error handler
  4277                                  ;		50:20	word	DOS dynamic storage
  4278                                  ;		50:22  14bytes	DOS diskette initialization table (INT 1E)
  4279                                  ;		50:30	4bytes	MODE command
  4280                                  ;		70:00		I/O drivers from IO.SYS/IBMBIO.COM
  4281                                  
  4282 000018CC 89160005                		mov	[0500h], dx ; 0
  4283                                  		;mov	ds:500h, dx	; set print screen & break = 0
  4284 000018D0 89160405                		mov	[LSTDRV], dx	; [0504h]
  4285                                  		;mov	ds:504h, dx	; clean	out last drive spec
  4286                                  
  4287                                  ; we need to initialize the cs:motorstartup variable from the disk
  4288                                  ; parameter table at sec9. the offsets in this table are defined in
  4289                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  4290                                  
  4291 000018D4 A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  4292                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  4293                                  					; [522h+0Ah]
  4294                                  		; 20/12/2022
  4295                                  		; ds = 0
  4296                                  
  4297 000018D7 2EA2[2601]              		mov	[cs:motorstartup], al
  4298 000018DB 2E803E[3E06]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  4299 000018E1 720B                    		jb	short no_diddle	; no
  4300 000018E3 C7062B050F02            		mov	word [SEC9+09h], 20Fh
  4301                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  4302                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  4303 000018E9 C6062205DF              		mov	byte [SEC9+0], 0DFh
  4304                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  4305                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  4306                                  no_diddle:				
  4307 000018EE CD12                    		int	12h		; MEMORY SIZE -
  4308                                  					; Return: AX = number of contiguous 1K blocks of memory
  4309 000018F0 B106                    		mov	cl, 6
  4310 000018F2 D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  4311                                  		
  4312                                  		; 20/12/2022
  4313                                  		; 03/07/2018 - 27/12/2018
  4314                                  		;pop	cx ; (**)
  4315                                  		;mov	[cs:drvfat], cx
  4316                                  		
  4317 000018F4 50                      		push	ax ; (*)	; save real top	of memory
  4318                                  
  4319                                  		; 27/12/2018 - (MSDOS 6.0, 6.21)
  4320                                  
  4321                                  ;M068 - BEGIN
  4322                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  4323                                  
  4324                                  		; 20/12/2022
  4325                                  		; ds = 0
  4326                                  
  4327                                  		;push	ds
  4328                                  		;push	bx		; pushes not required but since this
  4329                                  					; happens to be a last minute change
  4330                                  					; & since it is only init code.
  4331                                  		;xor	bx, bx
  4332                                  		;mov	ds, bx
  4333                                  		
  4334                                  		;mov	bx, ds:0BCh	; [2Fh*4]
  4335 000018F5 8B1EBC00                		mov	bx, [2Fh*4]
  4336                                  		;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  4337 000018F9 8E1EBE00                		mov	ds, [2Fh*4+2]
  4338 000018FD 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  4339                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  4340 00001902 750F                    		jnz	short SkipRPL
  4341 00001904 807F054C                		cmp	byte [bx+5], 'L'
  4342                                  		;cmp	byte ptr [bx+5], 'L'
  4343 00001908 7509                    		jnz	short SkipRPL
  4344 0000190A 89C2                    		mov	dx, ax		; get TOM into DX
  4345 0000190C B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  4346 0000190F CD2F                    		int	2Fh		; Get new TOM from any RPL
  4347 00001911 89D0                    		mov	ax, dx
  4348                                  SkipRPL:	
  4349                                  		; 20/12/2022		
  4350                                  		;pop	bx
  4351                                  		;pop	ds
  4352                                  
  4353                                  ;M068 - END
  4354                                  		; 20/12/2022
  4355                                  		; 27/12/2018
  4356 00001913 0E                      		push	cs
  4357 00001914 1F                      		pop	ds
  4358                                  
  4359                                  		; 18/03/2019 - Retro DOS v4.0
  4360                                  		;sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  4361                                  		;mov	[cs:fatloc], ax	; location to read fat
  4362                                  
  4363                                  		; 01/07/2018
  4364                                  		; 08/04/2018
  4365                                  		; 28/03/2018
  4366                                  		; MSDOS 6.0 - MSINIT.ASM, 1991
  4367 00001915 83E840                  		sub	ax, 64
  4368 00001918 A3[CD16]                		mov	[init_bootseg], ax ; 20/12/2022
  4369                                  		;mov	[cs:init_bootseg], ax
  4370                                  
  4371                                  		; 27/12/2018 - Retro DOS v4.0
  4372                                  		;pop	ax ; (*)	; get back real top of memory
  4373 0000191B 5A                      		pop	dx ; (*)
  4374                                  
  4375                                  		; 20/12/2022
  4376                                  		; 27/12/2018
  4377 0000191C 59                      		pop	cx ; (**)
  4378 0000191D 890E[CA16]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  4379                                  
  4380                                  		; 20/12/2022
  4381                                  
  4382                                  		;mov	dx, 46Dh	; SYSINIT segment
  4383 00001921 BA4104                  		mov	dx, SYSINITSEG	; 17/10/2022
  4384 00001924 8EDA                    		mov	ds, dx
  4385                                  
  4386                                  ; set pointer to resident device driver chain
  4387                                  
  4388                                  		; 17/10/2022
  4389 00001926 C706[7302][2300]        		mov	word [DEVICELIST], res_dev_list
  4390                                  		;mov	word [273h], res_dev_list
  4391                                  		;;mov	word ptr ds:273h, offset res_dev_list
  4392                                  					; [SYSINIT+DEVICE_LIST]
  4393 0000192C 8C0E[7502]              		mov	[DEVICELIST+2], cs		
  4394                                  		;mov	[275h], cs
  4395                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  4396                                  
  4397 00001930 A3[9202]                		mov	[MEMORYSIZE], ax
  4398                                  		;mov	[292h], ax
  4399                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  4400                                  
  4401 00001933 FEC1                    		inc	cl
  4402 00001935 880E[9602]              		mov	[DEFAULTDRIVE], cl
  4403                                  		;mov	[296h], cl
  4404                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  4405                                  
  4406 00001939 C706[7102]2E09          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  4407                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  4408                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  4409                                  					; dos_load_seg
  4410                                  
  4411                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  4412                                  ; printer cards. we initialize this value to point to an iret only if
  4413                                  ;
  4414                                  ; 1) the original segment points to storage inside valid ram.
  4415                                  ;
  4416                                  ; 2) the original segment is 0F000:xxxx
  4417                                  
  4418                                  		;;mov	ax, 46Dh	; SYSINIT segment
  4419                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  4420                                  		;mov	es, ax
  4421                                  		; 20/12/2022
  4422                                  		;push	ds ; SYSINITSEG
  4423                                  		;pop	es
  4424 0000193F 8EC2                    		mov	es, dx ; SYSINITSEG
  4425 00001941 31C0                    		xor	ax, ax ; 0
  4426 00001943 8ED8                    		mov	ds, ax		; segment 0
  4427                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  4428 00001945 A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  4429                                  		; 18/10/2022
  4430 00001948 263B06[9202]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  4431                                  		;cmp	ax, es:292h	; [ES:SYSINIT+MEMORY_SIZE]  ; (condition 1)
  4432 0000194D 7605                    		jbe	short resetintf
  4433 0000194F 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  4434 00001952 750A                    		jnz	short keepintf
  4435                                  resetintf:	
  4436 00001954 C7063C00[F406]          		mov	word [0Fh*4], intret			
  4437                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  4438 0000195A 8C0E3E00                		mov	word [0Fh*4+2], cs
  4439                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  4440                                  keepintf:				
  4441                                  ; end important
  4442                                  
  4443                                  ; 17/10/2022
  4444                                  ; 28/12/2018 - Retro DOS v4.0
  4445                                  
  4446                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  4447                                  ;
  4448                                  ; we will check if the system has ibm extended keyboard by
  4449                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  4450                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  4451                                  ; for the extended keyboard function. use cx as the temporary register.
  4452                                  
  4453                                  		; 20/12/2022
  4454                                  		; ds = 0
  4455                                  		;xor	cx, cx
  4456                                  		;mov	ds, cx
  4457                                  
  4458 0000195E 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  4459                                  
  4460                                  		; 20/12/2022
  4461                                  		; 20/03/2019
  4462 00001962 0E                      		push	cs
  4463 00001963 1F                      		pop	ds
  4464                                  
  4465                                  		;test	cl, 00010000b ; 10h
  4466 00001964 F6C110                  		test	cl, 10h		; extended keyboard ?
  4467 00001967 740A                    		jz	short org_key	; no, original keyboard
  4468                                  
  4469                                  		; 20/12/2022
  4470                                  		;  ds = cs
  4471 00001969 C606[E504]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  4472 0000196E C606[E604]11            		mov	byte [keysts_func], 11h
  4473                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  4474                                  		;mov	byte [cs:keysts_func], 11h
  4475                                  					; change for extended keyboard functions
  4476                                  org_key:
  4477                                  
  4478                                  ; 02/06/2018 - Retro DOS v3.0
  4479                                  
  4480                                  ;**************************************************************
  4481                                  ;	will initialize the number of drives
  4482                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  4483                                  ;	the indications are as follows:
  4484                                  ;
  4485                                  ;	bits	7	6	drives
  4486                                  ;		0	0	1
  4487                                  ;		0	1	2
  4488                                  ;		1	0	3
  4489                                  ;		1	1	4
  4490                                  ;**************************************************************
  4491                                  		
  4492                                  		; 20/12/2022
  4493                                  		; ds = cs		
  4494                                  		;push	cs
  4495                                  		;pop	ds
  4496                                  		; 21/12/2022
  4497                                  		;push	cs
  4498                                  		;pop	es
  4499                                  
  4500 00001973 E8E608                  		call	cmos_clock_read	; If cmos clock	exists,
  4501                                  					; then set the system time according to	that.
  4502                                  					; also,	reset the cmos clock rate.
  4503                                  		; 18/10/2022
  4504                                  		;mov	word ptr BData_start, offset harddrv ;
  4505                                  					; set up pointer to hdrive
  4506                                  		; 02/10/2022
  4507 00001976 C706[0000][1609]        		mov	word [hdrv_pat], harddrv 
  4508                                  		
  4509                                  		; 20/12/2022
  4510                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)			
  4511 0000197C 58                      		pop	ax ; (***)	; number of floppies and FAT ID
  4512 0000197D 30E4                    		xor	ah, ah		; chuck	fat id byte
  4513 0000197F A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  4514 00001982 A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  4515 00001985 D1E0                    		shl	ax, 1
  4516 00001987 0106[4417]              		add	[last_dskdrv_table], ax
  4517                                  
  4518 0000198B B280                    		mov	dl, 80h
  4519 0000198D B408                    		mov	ah, 8
  4520 0000198F CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4521                                  					; DL = drive number
  4522                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4523                                  					; DL = number of consecutive drives
  4524                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4525 00001991 7204                    		jc	short enddrv
  4526 00001993 8816[4317]              		mov	[hnum], dl	; save number of hard disk drives
  4527                                  enddrv:
  4528                                  		; 21/12/2022
  4529 00001997 0E                      		push	cs
  4530 00001998 07                      		pop	es
  4531                                  
  4532                                  ; scan the list of drives to determine their type. we have three flavors of
  4533                                  ; diskette drives:
  4534                                  ;
  4535                                  ;   48tpi drives    we do nothing special for them
  4536                                  ;   96tpi drives    mark the fact that they have changeline support.
  4537                                  ;   3.5"  drives    mark changeline support and small.
  4538                                  ;
  4539                                  ; the following code uses registers for certain values:
  4540                                  ;
  4541                                  ;   dl - physical drive
  4542                                  ;   ds:di - points to current bds
  4543                                  ;   cx - flag bits for bds
  4544                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  4545                                  					
  4546 00001999 30D2                    		xor	dl, dl
  4547                                  
  4548                                  		; 20/12/2022
  4549                                  		; ds = cs
  4550                                  		; 17/06/2018		 
  4551                                  		;push	cs
  4552                                  		;pop	ds
  4553                                  
  4554 0000199B C606[2C01]09            		mov	byte [eot], 9
  4555 000019A0 BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  4556                                  					; to set aside two bdss	for the	two fake floppy	drives
  4557                                  
  4558                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  4559                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  4560                                  
  4561                                  ; check to see if we are faking floppy drives. if not we don't
  4562                                  ; do anything special. if we are faking floppy drives we need
  4563                                  ; to set aside two bdss for the two fake floppy drives. we
  4564                                  ; don't need to initalise any fields though. so starting at start_bds
  4565                                  ; use the link field in the bds structure to go to the second bds
  4566                                  ; in the list and initalise it's link field to -1 to set the end of
  4567                                  ; the list. then jump to the routine at dohard to allocate/initialise
  4568                                  ; the bds for harddrives.
  4569                                  
  4570 000019A3 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  4571 000019A8 750B                    		jnz	short loop_drive
  4572 000019AA 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4573                                  					; di <-	first bds link
  4574 000019AC 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4575                                  					; di <-	second bds link
  4576 000019AE C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  4577 000019B2 E90F01                  		jmp	dohard		; allocate/initialise bds for harddrives
  4578                                  ;-----------------------------------------------------------------------------
  4579                                  
  4580                                  loop_drive:				
  4581 000019B5 3A16[7500]              		cmp	dl, [drvmax]
  4582 000019B9 7203                    		jb	short got_more
  4583 000019BB E90201                  		jmp	done_drives
  4584                                  ;-----------------------------------------------------------------------------
  4585                                  
  4586                                  got_more:				
  4587 000019BE 31C9                    		xor	cx, cx		; zero all flags
  4588 000019C0 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4589                                  					; get next bds
  4590 000019C2 B600                    		mov	dh, 0 ; ff48tpi
  4591                                  					; set form factor to 48	tpi
  4592 000019C4 C606[D216]28            		mov	byte [num_cyln], 40 ; 40 tracks per	side
  4593                                  		
  4594                                  		; 20/12/2022
  4595                                  		;push	ds ; 11/05/2019	
  4596 000019C9 57                      		push	di
  4597 000019CA 52                      		push	dx
  4598 000019CB 51                      		push	cx
  4599 000019CC 06                      		push	es ; ((*)) ; 20/12/2022	
  4600                                  		
  4601 000019CD B408                    		mov	ah, 8
  4602 000019CF CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4603                                  					; DL = drive number
  4604                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4605                                  					; DL = number of consecutive drives
  4606                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4607 000019D1 7276                    		jc	short noparmsfromrom
  4608                                  
  4609                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  4610                                  ; in this case, we are going to put bogus informations to bds table.
  4611                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  4612                                  ; they are calculated at the later time. this is just for the diagnostic
  4613                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  4614                                  ; this should only happen with drive b.
  4615                                  
  4616 000019D3 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  4617 000019D6 7505                    		jnz	short pfr_ok
  4618                                  
  4619                                  		;mov	ch, 39		; rom gave wrong info.
  4620                                  		;mov	cl, 9		; let's default to 360k.
  4621                                  		; 20/12/2022
  4622 000019D8 B90927                  		mov	cx, 2709h
  4623                                  
  4624 000019DB B601                    		mov	dh, 1
  4625                                  pfr_ok:					
  4626 000019DD FEC6                    		inc	dh		; make number of heads 1-based
  4627 000019DF FEC5                    		inc	ch		; make number of cylinders 1-based
  4628 000019E1 8836[D016]              		mov	[num_heads], dh	; save parms returned by rom
  4629 000019E5 80E13F                  		and	cl, 3Fh	; 00111111b ; extract sectors/track
  4630 000019E8 880E[D116]              		mov	[sec_trk], cl
  4631 000019EC 882E[D216]              		mov	[num_cyln], ch	; assume less than 256 cylinders!!
  4632                                  
  4633                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  4634                                  
  4635 000019F0 3A0E[2C01]              		cmp	cl, [eot]	; may set carry
  4636                                  		;jbe	short eot_ok
  4637                                  		; 09/12/2022
  4638 000019F4 7504                    		jne	short eotok
  4639 000019F6 880E[2C01]              		mov	[eot], cl
  4640                                  ;eot_ok:					
  4641                                  eotok:
  4642                                  		; 20/12/2022
  4643 000019FA 07                      		pop	es ; ((*)) es = cs = ds		
  4644 000019FB 59                      		pop	cx
  4645 000019FC 5A                      		pop	dx
  4646 000019FD 5F                      		pop	di
  4647                                  		;pop	ds ; 20/12/2022
  4648                                  
  4649                                  ; Check	for presence of	changeline
  4650                                  
  4651 000019FE B415                    		mov	ah, 15h
  4652 00001A00 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4653                                  					; DL = drive ID
  4654                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4655                                  					; CX:DX	= number of sectors on the media
  4656 00001A02 720D                    		jc	short changeline_done
  4657 00001A04 80FC02                  		cmp	ah, 2		; check	for presence of	changeline
  4658 00001A07 7508                    		jnz	short changeline_done
  4659                                  
  4660                                  ; we have a drive with change line support.
  4661                                  
  4662 00001A09 80C902                  		or	cl, 2		; fchangeline
  4663                                  					; signal type
  4664 00001A0C C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  4665                                  
  4666                                  ; we now try to set up the form factor for the types of media that we know
  4667                                  ; and can recognise. for the rest, we set the form factor as "other".
  4668                                  
  4669                                  changeline_done:
  4670                                  
  4671                                  ; 40 cylinders and 9 or less sec/trk, treat as 48 tpi medium.
  4672                                  			
  4673 00001A11 803E[D216]28            		cmp	byte [num_cyln], 40
  4674 00001A16 750B                    		jnz	short try_80
  4675 00001A18 803E[D116]09            		cmp	byte [sec_trk], 9
  4676 00001A1D 7653                    		jbe	short nextdrive
  4677                                  gotother:				
  4678 00001A1F B607                    		mov	dh, 7 ; ffOther ; we have a "strange" medium 
  4679 00001A21 EB4F                    		jmp	short nextdrive
  4680                                  ;-----------------------------------------------------------------------------
  4681                                  
  4682                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  4683                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  4684                                  
  4685                                  try_80:					
  4686 00001A23 803E[D216]50            		cmp	byte [num_cyln], 80
  4687 00001A28 75F5                    		jnz	short gotother
  4688 00001A2A B609                    		mov	dh, 9 ; ff288	; assume 2.88 MB drive
  4689 00001A2C 803E[D116]24            		cmp	byte [sec_trk], 36 ; is it	?
  4690 00001A31 743F                    		jz	short nextdrive	; yeah,	go update
  4691                                  
  4692                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  4693                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  4694                                  		;mov	dh, ff144
  4695                                  		;cmp	byte [sec_trk], 18
  4696                                  		;je	short nextdrive
  4697                                  
  4698 00001A33 803E[D116]0F            		cmp	byte [sec_trk], 15
  4699 00001A38 740B                    		jz	short got96
  4700                                  		
  4701 00001A3A 803E[D116]09            		cmp	byte [sec_trk], 9
  4702 00001A3F 75DE                    		jnz	short gotother
  4703                                  		
  4704 00001A41 B602                    		mov	dh, 2 ; ffSmall
  4705 00001A43 EB2D                    		jmp	short nextdrive
  4706                                  ; ----------------------------------------------------------------------------
  4707                                  
  4708                                  got96:					
  4709 00001A45 B601                    		mov	dh, 1 ; ff96tpi
  4710 00001A47 EB29                    		jmp	short nextdrive
  4711                                  ; ----------------------------------------------------------------------------
  4712                                  
  4713                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  4714                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  4715                                  
  4716                                  noparmsfromrom:				
  4717                                  		; 20/12/2022
  4718 00001A49 07                      		pop	es ; ((*)) 
  4719 00001A4A 59                      		pop	cx
  4720 00001A4B 5A                      		pop	dx
  4721 00001A4C 5F                      		pop	di
  4722                                  		;pop	ds ; 20/12/2022
  4723                                  		
  4724 00001A4D B415                    		mov	ah, 15h
  4725 00001A4F CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4726                                  					; DL = drive ID
  4727                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4728                                  					; CX:DX	= number of sectors on the media
  4729 00001A51 721F                    		jc	short nextdrive
  4730                                  		
  4731 00001A53 80FC02                  		cmp	ah, 2		; is there changeline?
  4732 00001A56 751A                    		jnz	short nextdrive
  4733                                  
  4734 00001A58 80C902                  		or	cl, 2 ; fchangeline
  4735 00001A5B C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi drives
  4736 00001A60 C606[D216]50            		mov	byte [num_cyln], 80
  4737 00001A65 B601                    		mov	dh, 1 ; ff96tpi 
  4738 00001A67 B00F                    		mov	al, 15
  4739 00001A69 3A06[2C01]              		cmp	al, [eot]
  4740 00001A6D 7603                    		jbe	short nextdrive ; eot_ok2
  4741 00001A6F A2[2C01]                		mov	[eot], al
  4742                                  ; ----------------------------------------------------------------------------
  4743                                  
  4744                                  ;eot_ok2:
  4745                                  nextdrive:				
  4746 00001A72 80C920                  		or	cl, 20h	; fi_own_physical
  4747                                  					; set this true	for all	drives
  4748 00001A75 88D7                    		mov	bh, dl		; save int13 drive number
  4749                                  
  4750                                  ; we need to do special things if we have a single drive system and are setting
  4751                                  ; up a logical drive. it needs to have the same int13 drive number as its
  4752                                  ; counterpart, but the next drive letter. also reset ownership flag.
  4753                                  ; we detect the presence of this situation by examining the flag single for the
  4754                                  ; value 2.
  4755 00001A77 803E[7800]02            		cmp	byte [single], 2
  4756 00001A7C 7505                    		jnz	short not_special
  4757 00001A7E FECF                    		dec	bh		; int13	drive number same for logical drive
  4758 00001A80 80F120                  		xor	cl, 20h	; fi_own_physical
  4759                                  					; reset	ownership flag for logical drive
  4760                                  not_special:
  4761                                  
  4762                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  4763                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  4764                                  ; form factor is of type "ffother".
  4765                                  				
  4766 00001A83 31C0                    		xor	ax, ax		; fill BDS for drive
  4767 00001A85 A0[D016]                		mov	al, [num_heads]
  4768 00001A88 894536                  		mov	[di+36h], ax	; [di+BDS.rheads]
  4769 00001A8B A0[D116]                		mov	al, [sec_trk]
  4770 00001A8E 894534                  		mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  4771 00001A91 894D23                  		mov	[di+23h], cx	; [di+BDS.flags]
  4772 00001A94 887522                  		mov	[di+22h], dh	; [di+BDS.formfactor]
  4773 00001A97 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  4774 00001A9A 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  4775 00001A9D 8A1E[D216]              		mov	bl, [num_cyln]
  4776 00001AA1 885D25                  		mov	[di+25h], bl	; [di+BDS.cylinders]
  4777 00001AA4 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  4778 00001AA9 7511                    		jnz	short no_single
  4779 00001AAB C606[7800]02            		mov	byte [single], 2 ; Don't forget we have
  4780                                  					; single drive system
  4781                                  		; 18/12/2022
  4782 00001AB0 80C910                  		or	cl, 10h
  4783                                  		;or	cx, 10h	; fi_am_mult
  4784                                  					; set that this	is one of several drives
  4785 00001AB3 094D23                  		or	[di+23h], cx	; [di+BDS.flags]
  4786                                  					; save flags
  4787 00001AB6 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4788                                  					; move to next BDS in list
  4789 00001AB8 FEC2                    		inc	dl		; add a	number
  4790 00001ABA EBB6                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  4791                                  ; ----------------------------------------------------------------------------
  4792                                  
  4793                                  no_single:				
  4794                                  		;inc	dl
  4795                                  		; 18/12/2022
  4796 00001ABC 42                      		inc	dx
  4797 00001ABD E9F5FE                  		jmp	loop_drive
  4798                                  ; ----------------------------------------------------------------------------
  4799                                  
  4800                                  done_drives:	
  4801                                  		;mov	word [di+BDS.link], -1			
  4802 00001AC0 C705FFFF                		mov	word [di], -1	; set link to null
  4803                                  
  4804                                  ; set up all the hard drives in	the system
  4805                                  
  4806                                  		; 20/12/2022
  4807                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  4808                                  dohard:					
  4809 00001AC4 8A36[4317]              		mov	dh, [hnum]
  4810 00001AC8 08F6                    		or	dh, dh		; done if no hardfiles
  4811 00001ACA 745B                    		jz	short static_configure
  4812 00001ACC B280                    		mov	dl, 80h
  4813                                  dohard1:				
  4814 00001ACE 52                      		push	dx
  4815 00001ACF 8B3E[4617]              		mov	di, [end_of_bdss]
  4816 00001AD3 8A1E[7500]              		mov	bl, [drvmax]
  4817 00001AD7 B700                    		mov	bh, 0		; first	primary	partition (or active)
  4818 00001AD9 E8C601                  		call	sethard
  4819 00001ADC 7208                    		jb	short hardfile_err
  4820 00001ADE E83107                  		call	dmax_check	; error	if already 26 drives
  4821 00001AE1 7303                    		jnb	short hardfile_err
  4822 00001AE3 E84107                  		call	xinstall_bds	; insert new bds into linked list
  4823                                  hardfile_err:				
  4824 00001AE6 5A                      		pop	dx
  4825 00001AE7 FEC2                    		inc	dl		; next hard drive
  4826 00001AE9 FECE                    		dec	dh
  4827 00001AEB 75E1                    		jnz	short dohard1
  4828                                  
  4829                                  ; end of physical drive	initialization
  4830                                  
  4831                                  ; *** do not change the position of the following statement.
  4832                                  ; *** domini routine will use [drvmax] value for the start of the logical
  4833                                  ; *** drive number of mini disk(s).
  4834                                  					
  4835 00001AED E83006                  		call	domini		; for setting up mini disks, if found
  4836                                  
  4837                                  ; -- begin added section
  4838                                  
  4839 00001AF0 8A36[4317]              		mov	dh, [hnum]	; we already know this is >0
  4840 00001AF4 B280                    		mov	dl, 80h
  4841                                  dohardx1:				
  4842 00001AF6 B701                    		mov	bh, 1		; do all subsequent primary partitions
  4843                                  dohardx2:				
  4844 00001AF8 52                      		push	dx
  4845 00001AF9 53                      		push	bx
  4846 00001AFA 8B3E[4617]              		mov	di, [end_of_bdss]
  4847 00001AFE 8A1E[7500]              		mov	bl, [drvmax]
  4848 00001B02 E89D01                  		call	sethard
  4849 00001B05 720E                    		jb	short dohardx4	; move to next hardfile	if error
  4850 00001B07 E80807                  		call	dmax_check	; make sure <=26 drives
  4851 00001B0A 7309                    		jnb	short dohardx4	; skip if error
  4852 00001B0C E81807                  		call	xinstall_bds	; insert new bds into linked list
  4853 00001B0F 5B                      		pop	bx		; get partition	number
  4854 00001B10 5A                      		pop	dx		; restore physical drive counts
  4855 00001B11 FEC7                    		inc	bh
  4856 00001B13 EBE3                    		jmp	short dohardx2	; keep looping until we	fail
  4857                                  ; ----------------------------------------------------------------------------
  4858                                  
  4859                                  dohardx4:				
  4860 00001B15 5B                      		pop	bx		; unjunk partition number from stack
  4861 00001B16 5A                      		pop	dx		; restore physical drive counts
  4862 00001B17 FEC2                    		inc	dl		; next hard drive
  4863 00001B19 FECE                    		dec	dh
  4864 00001B1B 75D9                    		jnz	short dohardx1
  4865                                  
  4866                                  ; -- end changed section
  4867                                  
  4868                                  ;******************************************************************************
  4869                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  4870                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  4871                                  ; than two diskette drives
  4872                                  ;
  4873                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  4874                                  ;		as usual and then rescan the bds chain to adjust the  drive
  4875                                  ;		letters. to do this, scan for disk drives and assign logical
  4876                                  ;		drive number starting from 2 and then rescan diskette drives
  4877                                  ;		and assign next to the last logical drive number of last disk
  4878                                  ;		drive to the 3rd and 4th diskette drives.
  4879                                  ;******************************************************************************
  4880                                  
  4881 00001B1D 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  4882                                  		;jbe	short static_configure ; no - no need for remapping
  4883 00001B22 7603                    		jbe	short no_remap
  4884 00001B24 E8F700                  		call	remap		; remap	bds chain to adjust driver letters
  4885                                  no_remap:
  4886                                  
  4887                                  ; End of drive initialization.
  4888                                  
  4889                                  ; ----------------------------------------------------------------------------
  4890                                  
  4891                                  ;we now decide, based on the configurations available so far, what
  4892                                  ;code or data we need to keep as a stay resident code. the following table
  4893                                  ;shows the configurations under consideration. they are listed in the order
  4894                                  ;of their current position memory.
  4895                                  ;
  4896                                  ;configuration will be done in two ways:
  4897                                  ;
  4898                                  ;first, we are going to set "static configuration". static configuration will
  4899                                  ;consider from basic configuration to endof96tpi configuration. the result
  4900                                  ;of static configuration will be the address the dynamic configuration will
  4901                                  ;use to start with.
  4902                                  ;
  4903                                  ;secondly, "dynamic configuration" will be performed. dynamic configuration
  4904                                  ;involves possible relocation of code or data. dynamic configuration routine
  4905                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  4906                                  ;code individually. after these operation, [dosdatasg] will be set.
  4907                                  ;this will be the place sysinit routine will relocate msdos module for good.
  4908                                  
  4909                                  ; -- begin changed section
  4910                                  ;
  4911                                  ;   1.	 basic configuration for msbio (endfloppy)
  4912                                  ;   2.   end96tpi	; a system that supports "change line error"
  4913                                  ;   3.	 end of bdss	; end of bdss for hard disks
  4914                                  ;   4.	 endatrom	;some of at rom fix module.
  4915                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  4916                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  4917                                  ;
  4918                                  
  4919                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  4920                                  
  4921                                  static_configure:			
  4922 00001B27 8B3E[4617]              		mov	di, [end_of_bdss]
  4923 00001B2B 81FF[1709]              		cmp	di, bdss	; 19/10/2022
  4924                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  4925 00001B2F 750D                    		jnz	short dynamic_configure	; that's the end, then
  4926                                  		; 18/10/2022
  4927 00001B31 BF[1709]                		mov	di, end96tpi
  4928                                  		;mov	di, offset harddrv ; end96tpi
  4929                                  					; keep everything up to	end96tpi
  4930 00001B34 803E[7700]00            		cmp	byte [fhave96], 0
  4931 00001B39 7503                    		jnz	short dynamic_configure
  4932                                  		
  4933 00001B3B BF[FC08]                		mov	di, endfloppy
  4934                                  dynamic_configure:
  4935                                  		; 20/12/2022
  4936                                  		;push	cs
  4937                                  		;pop	es
  4938                                  		
  4939 00001B3E FC                      		cld			; clear direction
  4940                                  
  4941                                  ; -- end changed section
  4942                                  
  4943                                  		; 20/12/2022
  4944                                  		; ds = cs <> es
  4945                                  		; ss = 0
  4946                                  		; sp = 700h
  4947                                  
  4948 00001B3F 803E[3E06]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  4949 00001B44 7577                    		jnz	short checkcmosclock
  4950 00001B46 803E[4317]00            		cmp	byte [hnum], 0	; No hard file?
  4951 00001B4B 7470                    		jz	short checkcmosclock
  4952 00001B4D 97                      		xchg	ax, di		; save allocation pointer in ax
  4953 00001B4E BE00F0                  		mov	si, 0F000h
  4954 00001B51 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  4955 00001B53 BE[4C17]                		mov	si, bios_date	; "01/10/84"
  4956 00001B56 BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  4957 00001B59 B90900                  		mov	cx, 9		; bdate_l
  4958                                  					; Only patch ROM for bios 01/10/84
  4959 00001B5C F3A6                    		repe cmpsb		; check	for date + zero	on end
  4960 00001B5E 97                      		xchg	ax, di		; restore allocation pointer
  4961                                  
  4962                                  ; M015 -- begin changes
  4963                                  
  4964                                  		;jnz	short checkcmosclock
  4965                                  		; 02/10/2022
  4966 00001B5F 7508                    		jnz	short checkcompaqbug
  4967                                  
  4968                                  ; install at rom fix
  4969                                  
  4970                                  		; 19/10/2022
  4971                                  		;mov	cx, offset endatrom
  4972 00001B61 B9[0A14]                		mov	cx, endatrom
  4973                                  		;mov	si, offset ibm_disk_io
  4974 00001B64 BE[DC12]                		mov	si, ibm_disk_io
  4975 00001B67 EB46                    		jmp	short install_int13_patch
  4976                                  ; ----------------------------------------------------------------------------
  4977                                  
  4978                                  ; M065 -- begin changes
  4979                                  ;
  4980                                  ; On certain systems with Western Digital disk controllers, the
  4981                                  ; following detection scheme caused an unpredictable and serious
  4982                                  ; failure. In particular, they've implemented a nonstandard
  4983                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  4984                                  ; what happens to be at es:[bx] and other memory locations indexed
  4985                                  ; off of it.
  4986                                  ;
  4987                                  ; Compaq was unable to tell us exactly which kind of systems have
  4988                                  ; the bug, except that they guarantee that the bug was fixed in
  4989                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  4990                                  ; string, and then look for date codes before 08/04/86 to decide
  4991                                  ; when to install the hook.
  4992                                  
  4993                                  ;checkcmosclock:
  4994                                  ; 02/10/2022				
  4995                                  checkcompaqbug:
  4996                                  		; 20/12/2022
  4997                                  		; es = 0F000h
  4998                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  4999                                  		;mov	es, ax
  5000                                  
  5001                                  		; 19/10/2022
  5002 00001B69 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  5003                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  5004 00001B70 754B                    		jnz	short not_compaq_patch
  5005 00001B72 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  5006                                  		;cmp	word ptr es:0FFECh, 'PM'
  5007 00001B79 7542                    		jnz	short not_compaq_patch
  5008 00001B7B 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  5009                                  		;cmp	word ptr es:0FFEEh, 'QA'
  5010 00001B82 7539                    		jnz	short not_compaq_patch
  5011                                  
  5012                                  ; We're running on a COMPAQ. Now look at the date code.
  5013                                  
  5014 00001B84 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  5015 00001B88 86E0                    		xchg	ah, al
  5016 00001B8A 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  5017                                  		;cmp	ax, '86'        ; 3836h
  5018                                  					; is it	86?
  5019 00001B8D 772E                    		ja	short not_compaq_patch
  5020 00001B8F 7218                    		jb	short do_compaq_patch
  5021 00001B91 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  5022 00001B95 86E0                    		xchg	ah, al
  5023 00001B97 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  5024                                  		;cmp	ax, '08'        ; 3038h
  5025                                  					; is it	08?
  5026 00001B9A 7721                    		ja	short not_compaq_patch
  5027 00001B9C 720B                    		jb	short do_compaq_patch
  5028 00001B9E 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  5029 00001BA2 86E0                    		xchg	ah, al
  5030 00001BA4 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  5031                                  		;cmp	ax, '04'        ; 3034h
  5032                                  					; is it	04?
  5033 00001BA7 7314                    		jnb	short not_compaq_patch
  5034                                  
  5035                                  do_compaq_patch:			
  5036 00001BA9 B9[2B14]                		mov	cx, end_compaq_i13hook
  5037 00001BAC BE[0A14]                		mov	si, endatrom
  5038                                  
  5039                                  install_int13_patch:			
  5040 00001BAF 0E                      		push	cs
  5041 00001BB0 07                      		pop	es
  5042                                  		; 18/10/2022
  5043 00001BB1 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  5044 00001BB5 8C0E[B600]              		mov	[Orig13+2], cs
  5045 00001BB9 29F1                    		sub	cx, si		; size of rom fix module
  5046 00001BBB F3A4                    		rep movsb		; relocate it
  5047                                  
  5048                                  ; M065 -- end changes
  5049                                  
  5050                                  ; ----------------------------------------------------------------------------
  5051                                  not_compaq_patch:			; M065
  5052                                  		; 17/10/2022
  5053                                  checkcmosclock:	
  5054                                  		; 18/10/2022		
  5055 00001BBD 0E                      		push	cs
  5056 00001BBE 07                      		pop	es
  5057                                  
  5058                                  		; 20/12/2022
  5059                                  		; ds = cs = es
  5060                                  		; ss = 0
  5061                                  		; sp = 700h
  5062                                  
  5063 00001BBF 803E[F304]01            		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  5064 00001BC4 7518                    		jnz	short checkk09	; no
  5065                                  
  5066 00001BC6 893E[0605]              		mov	word [daycnttoday], di
  5067                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  5068 00001BCA B9D100                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  5069 00001BCD BE[2C14]                		mov	si, daycnt_to_day
  5070 00001BD0 F3A4                    		rep movsb
  5071 00001BD2 893E[0205]              		mov	word [bintobcd], di
  5072                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  5073                                  					; let original segment stay
  5074 00001BD6 B90B00                  		mov	cx, 11	; endcmosclockset - bin_to_bcd
  5075 00001BD9 BE[FD14]                		mov	si, bin_to_bcd
  5076 00001BDC F3A4                    		rep movsb
  5077                                  checkk09:				
  5078 00001BDE 57                      		push	di ; ? ; save ? ; 20/12/2022
  5079 00001BDF B80141                  		mov	ax, 4101h	; wait for bh=es:[di]
  5080 00001BE2 B301                    		mov	bl, 1		; wait for 1 clock tick
  5081 00001BE4 268A3D                  		mov	bh, [es:di]
  5082 00001BE7 F9                      		stc			; Assume we will fail
  5083 00001BE8 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  5084                                  					; AL = condition type, BH = condition compare or mask value
  5085                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  5086                                  					; DX = I/O port	address	if AL bit 4 set
  5087 00001BEA 5F                      		pop	di ; ?
  5088 00001BEB 721B                    		jc	short configdone ; 20/12/2022
  5089                                  
  5090 00001BED C606[7900]01            		mov	byte [fhavek09], 1
  5091                                  					; remember we have a k09 type
  5092 00001BF2 1E                      		push	ds
  5093 00001BF3 31C0                    		xor	ax, ax
  5094 00001BF5 8ED8                    		mov	ds, ax
  5095                                  		
  5096 00001BF7 893EB001                		mov	[6Ch*4], di
  5097                                  		;mov	ds:1B0h, di	; [6Ch*4]
  5098                                  					; new int 6ch handler
  5099                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  5100 00001BFB 8C0EB201                		mov	word [6Ch*4+2], cs
  5101 00001BFF 1F                      		pop	ds
  5102                                  		; 20/12/2022
  5103                                  		; ds = cs = es
  5104 00001C00 BE[0815]                		mov	si, int6c
  5105 00001C03 B9C201                  		mov	cx, endk09-int6c ; 459
  5106                                  		;mov	cx, 459		; endk09 - int6c
  5107                                  					; size of k09 routine
  5108 00001C06 F3A4                    		rep movsb		;
  5109                                  					; set up config	stuff for sysinit
  5110                                  ; ----------------------------------------------------------------------------
  5111                                  ; Set up config stuff for SYSINIT
  5112                                  
  5113                                  ; 17/10/2022
  5114                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  5115                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  5116                                  ; 09/12/2022
  5117                                  SETDRIVE equ SetDrive
  5118                                  GETBP equ GetBp
  5119                                  		
  5120                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  5121                                  configdone:	
  5122                                  		; 21/12/2022			
  5123                                  		; 20/03/2019
  5124                                  		;push	cs		; di is	final ending address of	msbio.
  5125                                  		;pop	ds
  5126                                  		
  5127 00001C08 83C70F                  		add	di, 15		; round	(up) to	paragraph
  5128                                  		; 10/12/2022
  5129                                  		;shr	di, 1
  5130                                  		;shr	di, 1
  5131                                  		;shr	di, 1
  5132                                  		;shr	di, 1
  5133 00001C0B B104                    		mov	cl, 4
  5134 00001C0D D3EF                    		shr	di, cl		
  5135                                  		; 10/12/2022
  5136 00001C0F 83C770                  		add	di, 70h	 ; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  5137                                  		; 19/10/2022 - Temporary !
  5138                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  5139 00001C12 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  5140                                  
  5141                                  ; 21/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  5142                                  
  5143                                  ; 19/03/2018 - No need to read remain clusters of MSDOS kernel because
  5144                                  	     ; Retro DOS v2.0 boot sector has loaded all of the kernel file before.
  5145                                  	     
  5146                                  	     ; ("MSINIT.ASM" contains kernel file reading code here, below...)
  5147                                  
  5148                                  ; ----------------------------------------------------------------------------
  5149                                  ; ----------------------------------------------------------------------------
  5150                                  %if 0
  5151                                  		mov	ax, [drvfat]	; get drive and	fat id
  5152                                  		; 22/12/2022
  5153                                  		; Note: SETDRIVES uses AL (drive number) only
  5154                                  		mov	bp, SETDRIVE
  5155                                  		;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  5156                                  					; at 2C7h:4D7h = 70h:2A47h
  5157                                  		push	cs		; simulate far call
  5158                                  		call	call_bios_code	; get bds for drive
  5159                                  		mov	bp, GETBP	; ensure valid bpb is present	
  5160                                  		;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h) 
  5161                                  		push	cs
  5162                                  		call	call_bios_code
  5163                                  
  5164                                  	; resort to funky old segment definitions for now
  5165                                  
  5166                                  		; 22/12/2022
  5167                                  		;push	es		; copy bds to ds:di
  5168                                  		;pop	ds
  5169                                  
  5170                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  5171                                  	;
  5172                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  5173                                  	;	  back. Apparently it was what actually setup es: for the following
  5174                                  	; cas----
  5175                                  
  5176                                  		; 22/12/2022
  5177                                  		;xor	di, di
  5178                                  		;mov	al, [es:di]	; get fat id byte
  5179                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  5180                                  		;mov	[es:drvfat+1], al
  5181                                  		;mov	ax, [es:drvfat]
  5182                                  		
  5183                                  		; 22/12/2022
  5184                                  		; ds = cs
  5185                                  	;;;	mov	al, [drvfat]
  5186                                  
  5187                                  	; cas -- why do a SECOND setdrive here???
  5188                                  
  5189                                  		; 22/12/2022
  5190                                  		;push	es		; save whatever's in es
  5191                                  		;push	ds		; copy bds to es:di
  5192                                  		;pop	es
  5193                                  		;push	cs		; copy Bios_Data to ds
  5194                                  		;pop	ds
  5195                                  	
  5196                                  	; 22/12/2022
  5197                                  	;;;	mov	bp, SETDRIVE
  5198                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  5199                                  	;;;	push	cs		; simulate far call
  5200                                  	;;;	call	call_bios_code	; get correct bds for this drive
  5201                                  	
  5202                                  		; 22/12/2022
  5203                                  		;push	es		; copy bds back to ds:di
  5204                                  		;pop	ds
  5205                                  		;pop	es		; pop whatever was in es
  5206                                  
  5207                                  	; Now we load in the MSDOS.SYS file
  5208                                  
  5209                                  	; 22/12/2022
  5210                                  	; -----
  5211                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5212                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  5213                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  5214                                  	;				; get size of fat on media
  5215                                  	;	;mov	es:16DEh, bl
  5216                                  	;	mov	[es:fbigfat], bl
  5217                                  	;	mov	cl, [di+8]
  5218                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5219                                  	;	;sub	es:16D8h, ax
  5220                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  5221                                  	;				; need a logical sector number that will
  5222                                  	;				; be used by getclus(diskrd procedure)
  5223                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5224                                  	;	;sbb	es:16DAh, ax
  5225                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  5226                                  	; -----
  5227                                  		
  5228                                  	; -----	; 22/12/2022
  5229                                  		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5230                                  		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  5231                                  		mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  5232                                  					; get size of fat on media
  5233                                  		mov	[fbigfat], bl
  5234                                  		mov	cl, [es:di+8]
  5235                                  		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5236                                  		sub	[bios_l], ax	; subtract hidden sectors since we
  5237                                  					; need a logical sector number that will
  5238                                  					; be used by getclus(diskrd procedure)
  5239                                  		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5240                                  		sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  5241                                  	; ------
  5242                                  
  5243                                  		xor	ch, ch	 ; cx = sectors/cluster
  5244                                  
  5245                                  	; the boot program has left the directory at 0:500h
  5246                                  
  5247                                  		push	ds
  5248                                  		xor	di, di
  5249                                  		mov	ds, di
  5250                                  		mov	bx, [53Ah]
  5251                                  		;mov	bx, ds:53Ah	; clus=*53Ah
  5252                                  					; (First cluster field of 2nd dir entry
  5253                                  					; of root directory in the buffer at 500h)
  5254                                  		pop	ds
  5255                                  loadit:
  5256                                  		mov	ax, SYSINITSEG	; 46Dh
  5257                                  		;mov	ax, 46Dh	; sysinit segment
  5258                                  		mov	es, ax
  5259                                  		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  5260                                  		;mov	es, [es:271h]
  5261                                  
  5262                                  		call	getclus		; read cluster at ES:DI (DI is updated)
  5263                                  ; ----------------------------------------------------------------------------
  5264                                  
  5265                                  		;test	byte [cs:fbigfat], fbig
  5266                                  		test	byte [cs:fbigfat], 40h ; fbig
  5267                                  		jnz	short eofbig
  5268                                  		cmp	bx, 0FF7h
  5269                                  		jmp	short iseofx
  5270                                  ; ----------------------------------------------------------------------------
  5271                                  
  5272                                  eofbig:
  5273                                  		cmp	bx, 0FFF7h
  5274                                  iseofx:
  5275                                  		jb	short loadit	; keep loading until cluster = eof
  5276                                  
  5277                                  %endif
  5278                                  ; ----------------------------------------------------------------------------
  5279                                  ; ----------------------------------------------------------------------------
  5280                                  
  5281 00001C16 E84104                  		call	setdrvparms	; 
  5282                                  
  5283                                  		;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  5284                                  		;jmp	far 46Dh:267h
  5285 00001C19 EA[6702]4104            		jmp	SYSINITSEG:SYSINITSTART
  5286                                  
  5287                                  ; =============== S U B	R O U T	I N E ========================================
  5288                                  
  5289                                  ; Following are subroutines to support resident device driver initialization
  5290                                  ;
  5291                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  5292                                  
  5293                                  ;	M035 -- begin changed section
  5294                                  
  5295                                  ;******************************************************************************
  5296                                  ; module name: remap
  5297                                  ;
  5298                                  ; descriptive name: all the code for himem that could be separated from msbio
  5299                                  ;
  5300                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  5301                                  ;	     letters) if more than two diskette drives on the system.
  5302                                  ;
  5303                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  5304                                  ;	       as usual and then rescan the bds chain to adjust the drive
  5305                                  ;	       letters. to do this, scan for disk drives and assign logical
  5306                                  ;	       drive number starting from 2 and then rescan diskette drives
  5307                                  ;	       and assign next to the last logical drive number of last disk
  5308                                  ;	       drive to the 3rd and 4th diskette drives.
  5309                                  
  5310                                  ; input:       none
  5311                                  ; exit:	drive letters have been remapped in bds chain
  5312                                  ; exit error:  none
  5313                                  ; called from: msinit
  5314                                  ;
  5315                                  ; notes:  this function  will be called only if more than 2 diskettes are
  5316                                  ;	  found in the system
  5317                                  ;	  this function assumes that there are no more than 26 drives assigned
  5318                                  ;	    this is guaranteed by the code that creates bdss for partitions
  5319                                  ;	  this function assumes that the first entries in the chain are
  5320                                  ;	   floppy drives, and all the rest are hard drives
  5321                                  ;	  will alter the boot drive if necessary to reflect remapping
  5322                                  ;
  5323                                  ;******************************************************************************
  5324                                  
  5325                                  ; 17/10/2022
  5326                                  ; 02/10/2022
  5327                                  
  5328                                  remap:		; proc near		
  5329 00001C1E 2E8B3E[1901]            		mov	di, [cs:start_bds] ; get first bds
  5330                                  
  5331                                  ; search for 1st fixed disk physical drive num
  5332                                  
  5333                                  drive_loop:				
  5334 00001C23 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  5335                                  					; first	hard disk??
  5336 00001C27 7409                    		jz	short fdrv_found ; yes,	continue
  5337 00001C29 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5338                                  					; get next bds,	assume segment
  5339 00001C2B 83FFFF                  		cmp	di, -1		; last bds?
  5340 00001C2E 75F3                    		jnz	short drive_loop ; loop	if not
  5341 00001C30 EB4F                    		jmp	short rmap_exit	; yes, no hard drive on	system
  5342                                  
  5343                                  ;------------------------------------------------------------------------------
  5344                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  5345                                  ;logical drive nums to 3, 4, 5 etc.
  5346                                  ;------------------------------------------------------------------------------
  5347                                  
  5348                                  fdrv_found:				
  5349 00001C32 B002                    		mov	al, 2		; start	with logical drv num=2
  5350                                  fdrv_loop:				
  5351 00001C34 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5352                                  					; found	??
  5353 00001C37 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5354                                  					; ds:di--> next	bds
  5355                                  		;inc	al		; set num for next drive
  5356                                  		; 18/12/2022
  5357 00001C39 40                      		inc	ax
  5358 00001C3A 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ??
  5359 00001C3D 75F5                    		jnz	short fdrv_loop	; no - assign more disk	drives
  5360                                  
  5361                                  ;------------------------------------------------------------------------------
  5362                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  5363                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  5364                                  ; any more.
  5365                                  ;------------------------------------------------------------------------------
  5366                                  
  5367 00001C3F 2E8B3E[1901]            		mov	di, [cs:start_bds] ; [start_bds]
  5368                                  					; get first bds
  5369 00001C44 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5370                                  					; ds:di-->bds2
  5371 00001C46 2E8A26[2501]            		mov	ah, [cs:dsktnum] ; get number of floppies to remap
  5372 00001C4B 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  5373                                  remap_loop1:				
  5374 00001C4E 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5375                                  					; set new num to next floppy
  5376 00001C50 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5377 00001C53 FEC0                    		inc	al		; new number for next floppy
  5378 00001C55 FECC                    		dec	ah		; count	down extra floppies
  5379 00001C57 75F5                    		jnz	short remap_loop1
  5380                                  
  5381                                  ; now we've got to adjust the boot drive if we reassigned it
  5382                                  
  5383 00001C59 2EA0[CA16]              		mov	al, [cs:drvfat]
  5384 00001C5D 3C02                    		cmp	al, 2		; is it	a: or b: ?
  5385 00001C5F 7220                    		jb	short rmap_exit
  5386 00001C61 2E2A06[2501]            		sub	al, [cs:dsktnum] ; is it one of the other floppies?
  5387 00001C66 7204                    		jb	short remap_boot_flop ;	brif so
  5388                                  
  5389                                  ; we've got to remap the boot hard drive
  5390                                  ; subtract the number of EXTRA floppies from it
  5391                                  
  5392 00001C68 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  5393 00001C6A EB05                    		jmp	short remap_change_boot_drv
  5394                                  ; ---------------------------------------------------------------------------
  5395                                  
  5396                                  ; we've got to remap the boot floppy.
  5397                                  ; add the number of hard drive partitions to it
  5398                                  
  5399                                  remap_boot_flop:			
  5400 00001C6C 2E0206[7500]            		add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  5401                                  remap_change_boot_drv:			
  5402 00001C71 2EA2[CA16]              		mov	[cs:drvfat], al ; alter msdos.sys load drive
  5403 00001C75 FEC0                    		inc	al
  5404 00001C77 1E                      		push	ds
  5405 00001C78 BF4104                  		mov	di, SYSINITSEG	; 46Dh
  5406                                  		;mov	di, 46Dh	; SYSINIT segment
  5407 00001C7B 8EDF                    		mov	ds, di
  5408 00001C7D A2[9602]                		mov	[DEFAULTDRIVE], al
  5409                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  5410                                  					; pass it to sysinit as	well
  5411 00001C80 1F                      		pop	ds
  5412                                  rmap_exit:				
  5413 00001C81 C3                      		retn
  5414                                  
  5415                                  ; =============== S U B	R O U T	I N E =======================================
  5416                                  
  5417                                  ; 17/10/2022
  5418                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  5419                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  5420                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  5421                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  5422                                  ;**************************************************
  5423                                  ; getboot - get the boot sector for a hard disk
  5424                                  ;
  5425                                  ; Reads the boot sector from a specified drive into
  5426                                  ; a buffer at the top of memory.
  5427                                  ;
  5428                                  ; dl = int13 drive number to read boot sector for
  5429                                  ;**************************************************
  5430                                  
  5431                                  ; 17/10/2022
  5432                                  bootbias equ 200h
  5433                                  
  5434                                  getboot:	; proc near		
  5435                                  		
  5436                                  		; 08/04/2018
  5437                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  5438                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  5439                                  		; 02/10/2022 - Retro DOS v4.0
  5440                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  5441                                  
  5442 00001C82 2EA1[CD16]              		mov	ax, [cs:init_bootseg] ; 17/10/2022
  5443 00001C86 8EC0                    		mov	es, ax
  5444                                  		; 17/10/2022
  5445 00001C88 BB0002                  		mov	bx, bootbias ; 200h
  5446                                  		;mov	bx, 200h	; bootbias
  5447                                  					; load BX, ES:BX is where sector goes
  5448 00001C8B B80102                  		mov	ax, 201h
  5449 00001C8E 30F6                    		xor	dh, dh
  5450 00001C90 B90100                  		mov	cx, 1
  5451 00001C93 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5452                                  					; AL = number of sectors to read, CH = track, CL = sector
  5453                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5454                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5455 00001C95 7209                    		jb	short erret
  5456                                  		; 17/10/2022
  5457 00001C97 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  5458                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  5459                                  					; Dave Litton magic word?
  5460 00001C9E 7401                    		jz	short norm_ret	; yes
  5461                                  erret:					
  5462 00001CA0 F9                      		stc
  5463                                  norm_ret:				
  5464 00001CA1 C3                      		retn
  5465                                  
  5466                                  ; =============== S U B	R O U T	I N E =======================================
  5467                                  
  5468                                  ; 28/12/2018 - Retro DOS v4.0 
  5469                                  
  5470                                  ;***************************************************************************
  5471                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  5472                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  5473                                  ;   our own logical sectors start. we also read in our boot sector to
  5474                                  ;   determine version number
  5475                                  ;
  5476                                  ;   inputs:	dl is rom drive number (80...)
  5477                                  ;		bh is partition number (0....) 
  5478                                  ;		ds:di points to bds
  5479                                  ;   outputs:	carry clear -> bpb is filled in
  5480                                  ;		carry set   -> bpb is left uninitialized due to error
  5481                                  ;	trashes (at least) si, cx
  5482                                  ;	MUST PRESERVE ES:!!!!
  5483                                  ;***************************************************************************
  5484                                  
  5485                                  sethard:	; proc near		
  5486 00001CA2 57                      		push	di
  5487 00001CA3 53                      		push	bx
  5488 00001CA4 1E                      		push	ds
  5489 00001CA5 06                      		push	es
  5490 00001CA6 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  5491 00001CA9 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  5492 00001CAC 804D2301                		or	byte [di+23h], 1 ; [di+BDS.flags]
  5493                                  					; fnon_removable
  5494 00001CB0 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  5495                                  					; ffHardFile
  5496 00001CB4 C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  5497 00001CB9 88FE                    		mov	dh, bh		; partition number
  5498 00001CBB 52                      		push	dx
  5499 00001CBC B408                    		mov	ah, 8
  5500 00001CBE CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5501                                  					; DL = drive number
  5502                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5503                                  					; DL = number of consecutive drives
  5504                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5505 00001CC0 FEC6                    		inc	dh
  5506 00001CC2 887515                  		mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  5507 00001CC5 5A                      		pop	dx
  5508 00001CC6 7263                    		jb	short setret	; error	if no hard disk
  5509 00001CC8 80E13F                  		and	cl, 3Fh
  5510 00001CCB 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  5511 00001CCE 52                      		push	dx		; save partition number
  5512 00001CCF E8B0FF                  		call	getboot
  5513 00001CD2 5A                      		pop	dx		; restore partition number
  5514 00001CD3 7256                    		jb	short setret
  5515 00001CD5 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5516                                  
  5517                                  ; The first 'active' partition is 00, the second is 01....
  5518                                  ;   then the remainder of the 'primary' but non-active partitions
  5519                                  
  5520                                  act_part:				
  5521 00001CD8 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  5522 00001CDD 7418                    		jz	short no_act	; no
  5523 00001CDF 26803F01                		cmp	byte [es:bx], 1 ; reject if partitiontype != 1, 4 or 6
  5524 00001CE3 740C                    		jz	short got_good_act
  5525 00001CE5 26803F04                		cmp	byte [es:bx], 4
  5526 00001CE9 7406                    		jz	short got_good_act
  5527 00001CEB 26803F06                		cmp	byte [es:bx], 6
  5528 00001CEF 7506                    		jnz	short no_act
  5529                                  got_good_act:				
  5530 00001CF1 08F6                    		or	dh, dh		; is this our target partition #?
  5531 00001CF3 743A                    		jz	short set2	; WE GOT THE ONE WANTED!!
  5532 00001CF5 FECE                    		dec	dh		; count	down
  5533                                  no_act:					
  5534 00001CF7 83C310                  		add	bx, 16
  5535 00001CFA 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5536                                  					; last entry done?
  5537 00001CFE 75D8                    		jnz	short act_part	; no, process next entry
  5538 00001D00 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5539                                  					; restore original value of bx
  5540                                  
  5541                                  ; Now scan the non-active partitions
  5542                                  
  5543                                  get_primary:				
  5544 00001D03 26F647FC80              		test	byte [es:bx-4], 80h
  5545 00001D08 7518                    		jnz	short not_prim	; we've already scanned
  5546                                  					; the ACTIVE ones
  5547 00001D0A 26803F01                		cmp	byte [es:bx], 1 ; see if partitiontype == 1, 4 or 6
  5548 00001D0E 740C                    		jz	short got_prim
  5549 00001D10 26803F04                		cmp	byte [es:bx], 4
  5550 00001D14 7406                    		jz	short got_prim
  5551 00001D16 26803F06                		cmp	byte [es:bx], 6
  5552 00001D1A 7506                    		jnz	short not_prim
  5553                                  got_prim:				
  5554 00001D1C 08F6                    		or	dh, dh		; is this our target partition?
  5555 00001D1E 740F                    		jz	short set2
  5556 00001D20 FECE                    		dec	dh
  5557                                  not_prim:				
  5558 00001D22 83C310                  		add	bx, 16
  5559 00001D25 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5560 00001D29 75D8                    		jnz	short get_primary ; loop till we've gone through table
  5561                                  setret:					
  5562 00001D2B F9                      		stc			; error	return
  5563 00001D2C E9E002                  		jmp	ret_hard_err
  5564                                  
  5565                                  ; ---------------------------------------------------------------------------
  5566                                  
  5567                                  ;  until we get the real logical boot record and get the bpb,
  5568                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  5569                                  ;  for the convenience of the computation.
  5570                                  ;
  5571                                  ;  at the end of this procedure, if a bpb information is gotten from
  5572                                  ;  the valid boot record, then we are going to use those bpb information
  5573                                  ;  without change.
  5574                                  ;
  5575                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  5576                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  5577                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  5578                                  
  5579                                  set2:					
  5580 00001D2F 2E8816[CF16]            		mov	[cs:rom_drv_num], dl
  5581                                  			; save the rom bios drive number we are handling now.
  5582 00001D34 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  5583 00001D38 268B5706                		mov	dx, [es:bx+6]
  5584                                  
  5585                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  5586                                  ; sectors should be allowed	
  5587                                  
  5588 00001D3C 83E801                  		sub	ax, 1
  5589 00001D3F 83DA00                  		sbb	dx, 0
  5590 00001D42 26034708                		add	ax, [es:bx+8]	; sectors in partition
  5591 00001D46 2613570A                		adc	dx, [es:bx+10]
  5592 00001D4A 7305                    		jnb	short okdrive
  5593 00001D4C 800E[CC16]80            		or	byte [fbigfat], 80h ; ftoobig
  5594                                  okdrive:				
  5595 00001D51 268B4704                		mov	ax, [es:bx+4]
  5596 00001D55 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  5597                                  					; BPB_HIDDENSECTORS = p->partitionbegin
  5598 00001D58 268B4706                		mov	ax, [es:bx+6]
  5599 00001D5C 894519                  		mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  5600 00001D5F 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  5601 00001D63 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  5602 00001D67 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  5603 00001D6A 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  5604                                  					; bpb->maxsec =	p->partitionlength
  5605 00001D6D 83FA00                  		cmp	dx, 0
  5606 00001D70 7705                    		ja	short okdrive_1
  5607 00001D72 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  5608 00001D75 72B4                    		jb	short setret	; return -1;
  5609                                  okdrive_1:				
  5610 00001D77 8B5519                  		mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  5611 00001D7A 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  5612 00001D7D 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  5613                                  					; usually equal	to the # of sec/trk.
  5614 00001D7F 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  5615 00001D82 50                      		push	ax
  5616 00001D83 89D0                    		mov	ax, dx
  5617 00001D85 31D2                    		xor	dx, dx
  5618 00001D87 F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  5619                                  					; (track)temp_h:ax + (sector)dx
  5620                                  		; 17/10/2022
  5621 00001D89 2EA3[2905]              		mov	[cs:temp_h], ax
  5622 00001D8D 58                      		pop	ax
  5623 00001D8E F7F3                    		div	bx
  5624 00001D90 88D1                    		mov	cl, dl
  5625 00001D92 FEC1                    		inc	cl
  5626 00001D94 31DB                    		xor	bx, bx
  5627 00001D96 8A5D15                  		mov	bl, [di+15h]	; [di+BDS.heads]
  5628 00001D99 50                      		push	ax
  5629 00001D9A 31D2                    		xor	dx, dx
  5630 00001D9C 2EA1[2905]              		mov	ax, [cs:temp_h]
  5631 00001DA0 F7F3                    		div	bx
  5632 00001DA2 2EA3[2905]              		mov	[cs:temp_h], ax
  5633 00001DA6 58                      		pop	ax
  5634 00001DA7 F7F3                    		div	bx		;  dl is head, ax is cylinder
  5635 00001DA9 2E833E[2905]00          		cmp	word [cs:temp_h], 0
  5636 00001DAF 777C                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5637 00001DB1 3D0004                  		cmp	ax, 1024
  5638 00001DB4 7777                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5639                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  5640                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  5641                                  			; ('ja' must be 'jnb')
  5642                                  okdrive_2:
  5643                                   		; 28/07/2019
  5644                                  ; dl is head.
  5645                                  ; ax is cylinder
  5646                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  5647                                  
  5648                                  ;*** for mini disks ***
  5649                                  
  5650 00001DB6 837D4701                		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  5651                                  					; check	for mini disk
  5652 00001DBA 7503                    		jnz	short oknotmini	; not mini disk.
  5653 00001DBC 034549                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  5654                                  					; set the physical track number
  5655                                  oknotmini:
  5656                                  ;*** end of added logic for mini disk
  5657                                  				
  5658 00001DBF D0CC                    		ror	ah, 1		; move high two	bits of	cyl to high
  5659 00001DC1 D0CC                    		ror	ah, 1		; two bits of upper byte
  5660 00001DC3 80E4C0                  		and	ah, 0C0h	; turn off remainder of	bits
  5661 00001DC6 08E1                    		or	cl, ah		; move two bits	to correct spot
  5662 00001DC8 88C5                    		mov	ch, al		; ch is	cylinder (low 8	bits)
  5663                                  					; cl is	sector + 2 high	bits of	cylinder
  5664 00001DCA 88D6                    		mov	dh, dl		; dh is	head
  5665 00001DCC 2E8A16[CF16]            		mov	dl, [cs:rom_drv_num] ; dl is drive number
  5666                                  
  5667                                  ; cl is sector + 2 high bits of cylinder
  5668                                  ; ch is low 8 bits of cylinder
  5669                                  ; dh is head
  5670                                  ; dl is drive
  5671                                  
  5672                                  ; for convenience, we are going to read the logical boot sector
  5673                                  ; into cs:disksector area.
  5674                                  
  5675                                  ; read in boot sector using bios disk interrupt. the buffer where it
  5676                                  ; is to be read in is cs:disksector.
  5677                                  
  5678 00001DD1 0E                      		push	cs
  5679 00001DD2 07                      		pop	es
  5680 00001DD3 BB[4E01]                		mov	bx, disksector	; for convenience,
  5681                                  					; we are going to read the logical boot	sector
  5682                                  					; into cs:disksector area.
  5683 00001DD6 B80102                  		mov	ax, 201h
  5684 00001DD9 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5685                                  					; AL = number of sectors to read, CH = track, CL = sector
  5686                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5687                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5688                                  
  5689                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  5690                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  5691                                  ; media if we recognize the version number.
  5692                                  
  5693 00001DDB BB[4E01]                		mov	bx, disksector
  5694 00001DDE 53                      		push	bx
  5695 00001DDF 50                      		push	ax
  5696 00001DE0 2E803FE9                		cmp	byte [cs:bx], 0E9h ; is it a near jump?
  5697 00001DE4 740D                    		jz	short check_1_ok ; yes
  5698 00001DE6 2E803FEB                		cmp	byte [cs:bx], 0EBh ; is it a short jump?
  5699 00001DEA 7529                    		jnz	short invalid_boot_record ; no
  5700 00001DEC 2E807F0290              		cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  5701 00001DF1 7522                    		jnz	short invalid_boot_record
  5702                                  check_1_ok:				
  5703 00001DF3 BB5901                  		mov	bx, 159h	; disksector+EXT_BOOT.BPB
  5704                                  					; point	to the bpb in the boot record
  5705 00001DF6 2E8A470A                		mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  5706                                  					; get the mediadescriptor byte
  5707 00001DFA 24F0                    		and	al, 0F0h	; mask off low nibble
  5708 00001DFC 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  5709 00001DFE 7515                    		jnz	short invalid_boot_record ; no,	invalid	boot record
  5710 00001E00 2E813F0002              		cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  5711 00001E05 750E                    		jnz	short invalid_boot_record ; invalidate non 512 byte sectors
  5712                                  
  5713                                  check2_ok:				; yes, mediadescriptor ok.
  5714 00001E07 2E8A4702                		mov	al, [cs:bx+2]	; now make sure	that
  5715                                  					; the sectorspercluster	is
  5716                                  					; a power of 2
  5717                                  					;
  5718                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  5719                                  					; get the sectorspercluster
  5720 00001E0B 08C0                    		or	al, al		; is it	zero?
  5721 00001E0D 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  5722                                  
  5723                                  ck_power_of_two:			
  5724 00001E0F D0E8                    		shr	al, 1		; shift	until first bit	emerges
  5725 00001E11 73FC                    		jnb	short ck_power_of_two
  5726 00001E13 7405                    		jz	short valid_boot_record
  5727                                  
  5728                                  invalid_boot_record:			
  5729 00001E15 58                      		pop	ax
  5730 00001E16 5B                      		pop	bx
  5731 00001E17 E93301                  		jmp	unknown		; jump to invalid boot record
  5732                                  					; unformatted or illegal media.
  5733                                  ; ---------------------------------------------------------------------------
  5734                                  
  5735                                  valid_boot_record:			
  5736 00001E1A 58                      		pop	ax
  5737 00001E1B 5B                      		pop	bx
  5738                                  
  5739                                  ; Signature found. Now check version.
  5740                                  
  5741 00001E1C 2E817F08322E            		cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  5742                                  		;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  5743 00001E22 750F                    		jnz	short try5
  5744 00001E24 2E807F0A30              		cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  5745                                  		;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  5746 00001E29 7508                    		jnz	short try5
  5747 00001E2B EB2F                    		jmp	short copybpb
  5748                                  ; ---------------------------------------------------------------------------
  5749                                  
  5750                                  setret_brdg:				
  5751 00001E2D E9FBFE                  		jmp	setret
  5752                                  ; ---------------------------------------------------------------------------
  5753                                  
  5754                                  unknown3_0_j:				
  5755 00001E30 E91E01                  		jmp	unknown3_0	; legally formatted media,
  5756                                  					; although, content might be bad.
  5757                                  ; ---------------------------------------------------------------------------
  5758                                  
  5759                                  try5:					
  5760 00001E33 E8DE01                  		call	cover_fdisk_bug
  5761                                  
  5762                                  ; see if it is an os2 signature
  5763                                  
  5764 00001E36 2E817F08302E            		cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  5765                                  		;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  5766 00001E3C 750D                    		jnz	short no_os2
  5767 00001E3E 2E8A4707                		mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  5768 00001E42 2C31                    		sub	al, '1'
  5769                                  		;sub	al, 31h		; '1'
  5770 00001E44 24FE                    		and	al, 0FEh
  5771 00001E46 7414                    		jz	short copybpb	; accept either	'1' or '2'
  5772 00001E48 E90201                  		jmp	unknown
  5773                                  ; ---------------------------------------------------------------------------
  5774                                  
  5775                                  ; no os2 signature, this is to check for real dos versions
  5776                                  
  5777                                  no_os2:					
  5778 00001E4B 2E817F08332E            		cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  5779                                  		;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  5780 00001E51 72DD                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  5781                                  					; do not trust it, but still legal.
  5782 00001E53 7507                    		jnz	short copybpb	; honor	os2 boot record
  5783                                  					; or dos 4.0 version
  5784 00001E55 2E807F0A31              		cmp	byte [cs:bx+10], '1'
  5785                                  		;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  5786 00001E5A 72D4                    		jb	short unknown3_0_j ; if version >=	3.1, then o.k.
  5787                                  copybpb:
  5788                                  
  5789                                  ; 03/10/2022
  5790                                  
  5791                                  ; we have a valid boot sector. use the bpb in it to build the
  5792                                  ; bpb in bios. it is assumed that only
  5793                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  5794                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  5795                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  5796                                  ; need to be set (all other values in already). fbigfat is also set.
  5797                                  
  5798                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  5799                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  5800                                  ; and system id according to the boot record.
  5801                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  5802                                  
  5803                                  		; 10/12/2022
  5804                                  		; (number of FATs optimization)
  5805 00001E5C BE[5901]                		mov	si, disksector+11 ; disksector+0Bh
  5806                                  		;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  5807 00001E5F 2E8A4C05                		mov	cl, [cs:si+05h]
  5808                                  		
  5809 00001E63 2E807C1B29              		cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  5810                                  		;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  5811                                  					; [disksector+EXT_BOOT.SIG]
  5812                                  					; EXT_BOOT_SIGNATURE
  5813 00001E68 754E                    		jnz	short copybpb_fat ; conventional fat system
  5814                                  
  5815                                  		; 03/10/2022
  5816                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  5817                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  5818                                  		;	     number of FATs must be 2 ; =*?=
  5819                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  5820                                  		;
  5821                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  5822                                  
  5823                                  		; 10/12/2022
  5824                                  		;cmp	byte [cs:disksector+10h], 0
  5825                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  5826                                  		;jnz	short copybpb_fat ; a fat system.
  5827 00001E6A 08C9                    		or	cl, cl	 ; [cs:disksector+10h]
  5828 00001E6C 754A                    		jnz	short copybpb_fat ; a fat system.
  5829                                  
  5830                                  ; non fat based	media.
  5831                                  
  5832 00001E6E 57                      		push	di
  5833 00001E6F 1E                      		push	ds
  5834 00001E70 1E                      		push	ds
  5835 00001E71 07                      		pop	es
  5836 00001E72 0E                      		push	cs
  5837 00001E73 1F                      		pop	ds
  5838                                  
  5839                                  		; 10/12/2022
  5840                                  		; (number of FATs optimization)
  5841                                  		; SI = disksector+11
  5842                                  		; 17/10/2022
  5843                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  5844                                  		;mov	si, disksector+11
  5845 00001E74 83C706                  		add	di, 6		; add di,BDS.BPB
  5846                                  
  5847                                  ; just for completeness, we'll make sure that total_sectors and
  5848                                  ; big_total_sectors aren't both zero. I've seen examples of
  5849                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  5850                                  ; got that way. If it occurs, then use the values from the
  5851                                  ; partition table.
  5852                                  
  5853                                  		; 18/12/2022
  5854 00001E77 29C9                    		sub	cx, cx 
  5855                                  
  5856                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  5857                                  		;jnz	short already_nonz 
  5858                                  		;			; how about big_total?
  5859                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  5860                                  		;jnz	short already_nonz ; we're okay if any are != 0
  5861                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5862                                  		;jnz	short already_nonz
  5863                                  
  5864                                  		; 18/12/2022
  5865 00001E79 2E394C08                		cmp	[cs:si+8], cx ; 0	; [cs:si+EBPB.TOTALSECTORS]
  5866 00001E7D 7521                    		jnz	short already_nonz
  5867                                  					     ; how about big_total?
  5868 00001E7F 2E394C15                		cmp	word [cs:si+15h], cx ; 0 ; [cs:si+EBPB.BIGTOTALSECTORS]
  5869 00001E83 751B                    		jnz	short already_nonz   ; we're okay if any are != 0
  5870 00001E85 2E394C17                		cmp	word [cs:si+17h], cx ; 0 ; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5871 00001E89 7515                    		jnz	short already_nonz
  5872                                  
  5873                                  ; now let's copy the values from the partition table (now in the BDS)
  5874                                  ; into the BPB in the boot sector buffer, before they get copied back.
  5875                                  
  5876 00001E8B 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  5877 00001E8E 2E894408                		mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  5878 00001E92 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  5879 00001E95 2E894415                		mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  5880 00001E99 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  5881 00001E9C 2E894417                		mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5882                                  
  5883                                  already_nonz:	
  5884                                  		; 18/12/2022
  5885                                  		; cx = 0
  5886 00001EA0 B119                    		mov	cl, 25		
  5887                                  		;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  5888 00001EA2 F3A4                    		rep movsb
  5889 00001EA4 1F                      		pop	ds
  5890 00001EA5 5F                      		pop	di
  5891 00001EA6 06                      		push	es
  5892 00001EA7 1E                      		push	ds
  5893 00001EA8 07                      		pop	es
  5894 00001EA9 0E                      		push	cs
  5895 00001EAA 1F                      		pop	ds
  5896                                  		; 18/12/2022
  5897 00001EAB BD[3707]                		mov	bp, mov_media_ids
  5898                                  		;mov	bp, 751h	; mov_media_ids
  5899                                  					; at 2C7h:751h = 70h:2CC1h
  5900                                  					; set volume id, systemid, serial.
  5901 00001EAE 0E                      		push	cs		; simulate far call
  5902 00001EAF E8A5F8                  		call	call_bios_code
  5903 00001EB2 06                      		push	es
  5904 00001EB3 1F                      		pop	ds
  5905 00001EB4 07                      		pop	es
  5906 00001EB5 E95601                  		jmp	goodret
  5907                                  ; ---------------------------------------------------------------------------
  5908                                  
  5909                                  ; ****** cas ---
  5910                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  5911                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  5912                                  ; happens with some frequency -- perhaps through some OS/2 setup
  5913                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  5914                                  ; from the boot sector into the DPB anyway, we've just been using
  5915                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  5916                                  ; we'll go ahead and copy it into the DPB, except in the case
  5917                                  ; that it equals zero, in which case we just use the values in
  5918                                  ; the DPB from the partition table.
  5919                                  
  5920                                  ; 17/10/2022
  5921                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  5922                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  5923                                  ; 09/12/2022
  5924                                  MOVMEDIAIDS equ mov_media_ids
  5925                                  CLEARIDS equ clear_ids
  5926                                  
  5927                                  copybpb_fat:
  5928                                  		; 10/12/2022
  5929                                  		; (number of FATs optimization)
  5930                                  		; SI = disksector+11				
  5931                                  		; 17/10/2022
  5932                                  		;mov	si, disksector+11
  5933                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  5934                                  					; cs:si	-> bpb in boot
  5935 00001EB8 31D2                    		xor	dx, dx
  5936 00001EBA 2E8B4408                		mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  5937                                  					; get totsec from boot sec
  5938 00001EBE 09C0                    		or	ax, ax
  5939 00001EC0 7516                    		jnz	short copy_totsec ; if non zero, use that
  5940 00001EC2 2E8B4415                		mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  5941                                  					; get the big version
  5942                                  					; (32 bit total	sectors)
  5943 00001EC6 2E8B5417                		mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5944                                  		; 10/12/2022
  5945                                  		; (number of FATs optimization)
  5946                                  		; CL = number of FATs (2 or 1) 
  5947 00001ECA 89D3                    		mov	bx, dx		; see if it is a big zero
  5948 00001ECC 09C3                    		or	bx, ax
  5949 00001ECE 7508                    		jnz	short copy_totsec
  5950                                  			; screw it. it	was bogus.
  5951 00001ED0 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  5952 00001ED3 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  5953 00001ED6 EB06                    		jmp	short fat_big_small
  5954                                  
  5955                                  		;mov	cx, dx
  5956                                  		;or	cx, ax		; see if it is a big zero
  5957                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  5958                                  copy_totsec:				
  5959 00001ED8 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  5960                                  					; make DPB match boot sec
  5961 00001EDB 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  5962                                  
  5963                                  		; 10/12/2022
  5964                                  ;totsec_already_set:			
  5965                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  5966                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  5967                                  
  5968                                  ; determine fat entry size.
  5969                                  
  5970                                  fat_big_small:
  5971                                  
  5972                                  ;at this moment dx;ax = total sector number
  5973                                  
  5974                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  5975                                  ;from the BPB on the disk
  5976                                  				
  5977 00001EDE 2E8B5C03                		mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  5978                                  					; get #reserved_sectors	from BPB
  5979 00001EE2 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  5980                                  					; update BDS field
  5981 00001EE5 29D8                    		sub	ax, bx
  5982 00001EE7 83DA00                  		sbb	dx, 0		; update the count
  5983 00001EEA 2E8B5C0B                		mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  5984                                  					; bx = sectors/fat
  5985 00001EEE 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  5986                                  					; set in bds bpb
  5987                                  		; 10/12/2022
  5988                                  		; (number of FATs optimization)
  5989                                  		; CL = number of FATs (2 or 1) 
  5990                                  		;dec	cl ; *
  5991                                  		; 18/12/2022
  5992 00001EF1 49                      		dec	cx ; *
  5993 00001EF2 D3E3                    		shl	bx, cl			
  5994                                  		;shl	bx, 1	; =*?=	; always 2 fats
  5995                                  		
  5996 00001EF4 29D8                    		sub	ax, bx		; sub #	fat sectors
  5997 00001EF6 83DA00                  		sbb	dx, 0
  5998 00001EF9 2E8B5C06                		mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  5999                                  					; # root entries
  6000 00001EFD 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  6001                                  					; set in bds bpb
  6002 00001F00 B104                    		mov	cl, 4
  6003 00001F02 D3EB                    		shr	bx, cl		; div by 16 ents/sector
  6004 00001F04 29D8                    		sub	ax, bx		; sub #	dir sectors
  6005 00001F06 83DA00                  		sbb	dx, 0		;
  6006                                  					; dx:ax	now contains the
  6007                                  					; # of data sectors
  6008 00001F09 31C9                    		xor	cx, cx ; *
  6009 00001F0B 2E8A4C02                		mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  6010                                  					; sectors per cluster
  6011 00001F0F 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  6012                                  					; set in bios bpb
  6013 00001F12 50                      		push	ax
  6014 00001F13 89D0                    		mov	ax, dx
  6015 00001F15 31D2                    		xor	dx, dx
  6016 00001F17 F7F1                    		div	cx		; cx = sectors per cluster
  6017 00001F19 2EA3[2905]              		mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  6018                                  					; # clusters.
  6019 00001F1D 58                      		pop	ax
  6020 00001F1E F7F1                    		div	cx
  6021 00001F20 2E833E[2905]00          		cmp	word [cs:temp_h], 0
  6022 00001F26 771C                    		ja	short toobig_ret ; too big cluster number
  6023 00001F28 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6024                                  					; is this 16-bit fat?
  6025 00001F2B 7205                    		jb	short copymediaid ; no,	small fat
  6026                                  		; 17/10/2022
  6027 00001F2D 800E[CC16]40            		or	byte [fbigfat], 40h
  6028                                  		;or	ds:fbigfat, 40h	; fbig
  6029                                  					; 16 bit fat
  6030                                  copymediaid:				
  6031 00001F32 06                      		push	es
  6032 00001F33 1E                      		push	ds
  6033 00001F34 07                      		pop	es
  6034 00001F35 0E                      		push	cs
  6035 00001F36 1F                      		pop	ds
  6036                                  		; 17/10/2022
  6037 00001F37 BD[3707]                		mov	bp, MOVMEDIAIDS
  6038                                  		;mov	bp, 751h	; mov_media_ids
  6039                                  					; at 2C7h:751h = 70h:2CC1h
  6040                                  					; copy filesys_id, volume label
  6041 00001F3A 0E                      		push	cs		; simulate far call
  6042 00001F3B E819F8                  		call	call_bios_code
  6043 00001F3E 06                      		push	es
  6044 00001F3F 1F                      		pop	ds
  6045 00001F40 07                      		pop	es
  6046 00001F41 E9A500                  		jmp	massage_bpb	; now final check for bpb info
  6047                                  					; and return.
  6048                                  ; ---------------------------------------------------------------------------
  6049                                  
  6050                                  toobig_ret:				
  6051 00001F44 2E800E[CC16]80          		or	byte [cs:fbigfat], 80h
  6052 00001F4A E9C100                  		jmp	goodret		; still	drive letter is	assigned
  6053                                  					; but useless. to big for
  6054                                  					; current pc dos fat file system
  6055                                  ; ---------------------------------------------------------------------------
  6056                                  
  6057                                  unknown:	
  6058                                  		; 12/12/2022
  6059 00001F4D 804D2402                		or	byte [di+24h], 02h			
  6060                                  		;or	word [di+23h], 200h ; [di+BDS.flags]
  6061                                  					; unformatted_media
  6062                                  					; Set unformatted media	flag.
  6063                                  
  6064                                  ; the boot signature may not be	recognizable,
  6065                                  ; but we should	try and	read it	anyway.
  6066                                  
  6067                                  unknown3_0:				
  6068 00001F51 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  6069                                  					; [di+BDS.totalsecs32+2]
  6070 00001F54 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6071 00001F57 BE[FC16]                		mov	si, disktable2
  6072                                  
  6073                                  scan:					
  6074 00001F5A 2E3B14                  		cmp	dx, [cs:si]
  6075 00001F5D 720D                    		jb	short gotparm
  6076 00001F5F 7706                    		ja	short scan_next
  6077 00001F61 2E3B4402                		cmp	ax, [cs:si+2]
  6078 00001F65 7605                    		jbe	short gotparm
  6079                                  
  6080                                  scan_next:				
  6081 00001F67 83C60A                  		add	si, 10		; 5*2
  6082 00001F6A EBEE                    		jmp	short scan	; covers upto 512 mb media
  6083                                  ; ---------------------------------------------------------------------------
  6084                                  
  6085                                  gotparm:				
  6086 00001F6C 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  6087                                  		;or	ds:fbigfat, cl
  6088                                  		; 17/10/2022
  6089 00001F6F 080E[CC16]              		or	[fbigfat], cl
  6090 00001F73 2E8B4C04                		mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  6091                                  					; cl = log base	2 of ch
  6092 00001F77 2E8B5406                		mov	dx, [cs:si+6]	; dx = number of root dir entries
  6093                                  
  6094                                  ; now calculate size of fat table
  6095                                  
  6096 00001F7B 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  6097                                  					; save number of (root)	dir entries
  6098 00001F7E 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6099 00001F81 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6100 00001F84 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  6101                                  					; save sectors per cluster
  6102                                  		; 17/10/2022
  6103 00001F87 F606[CC16]40            		test	byte [fbigfat], 40h
  6104                                  		;test	ds:fbigfat, 40h	; fbig
  6105                                  					; if (fbigfat)
  6106 00001F8C 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  6107                                  
  6108                                  ; we don't need to change "small fat" logic since it is gauranteed
  6109                                  ; that double word total sector will not use 12 bit fat (unless
  6110                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  6111                                  ; so in this case we assume dx = 0 !!
  6112                                  
  6113 00001F8E 31DB                    		xor	bx, bx		; (12 bit fat)
  6114 00001F90 88EB                    		mov	bl, ch
  6115 00001F92 4B                      		dec	bx
  6116 00001F93 01C3                    		add	bx, ax		; dx=0
  6117 00001F95 D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  6118 00001F97 43                      		inc	bx		; BDS.secperclus
  6119 00001F98 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  6120 00001F9B 89DE                    		mov	si, bx
  6121 00001F9D D1EB                    		shr	bx, 1
  6122 00001F9F 01F3                    		add	bx, si
  6123 00001FA1 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  6124 00001FA5 D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  6125 00001FA7 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  6126                                  					; save number of fat sectors
  6127 00001FAA EB3D                    		jmp	short massage_bpb
  6128                                  ; ---------------------------------------------------------------------------
  6129                                  
  6130                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  6131                                  
  6132                                  dobig:					
  6133 00001FAC B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  6134 00001FAE 52                      		push	dx		; save total sectors (high)
  6135 00001FAF 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  6136 00001FB2 D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  6137 00001FB4 29D0                    		sub	ax, dx
  6138 00001FB6 5A                      		pop	dx
  6139 00001FB7 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  6140 00001FBA 83E801                  		sub	ax, 1
  6141 00001FBD 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  6142                                  					; total	secs - reserved	secs - root dir	secs
  6143 00001FC0 B302                    		mov	bl, 2
  6144 00001FC2 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  6145                                  					; bx = 256 * BDS.secperclus + 2
  6146                                  
  6147                                  ; I don't understand why to add bx here!!!
  6148                                  
  6149                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  6150                                  		; 27/09/2022
  6151                                  		; (Microsoft FAT32 File	System Specification,
  6152                                  		; December 2000, Page 21)
  6153                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  6154                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  6155                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  6156                                  		; (If FATType == FAT16,	BPB_FATSz16 = LOWORD(FATSz))
  6157                                  		
  6158 00001FC5 01D8                    		add	ax, bx		; ax = t-r-d+256*spc+2
  6159 00001FC7 83D200                  		adc	dx, 0
  6160 00001FCA 83E801                  		sub	ax, 1		; ax = t-r-d+256*spc+1
  6161 00001FCD 83DA00                  		sbb	dx, 0
  6162                                  
  6163                                  ; assuming dx in the table will never be bigger than bx.
  6164                                  
  6165 00001FD0 F7F3                    		div	bx		; BDS.fatsecs =
  6166                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  6167 00001FD2 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  6168                                  					; number of fat	sectors
  6169                                  
  6170                                  ; now, set the default filesys_id, volume label, serial number
  6171                                  
  6172                                  		;mov	bl, ds:fbigfat
  6173                                  		; 17/10/2022
  6174 00001FD5 8A1E[CC16]              		mov	bl, [fbigfat]
  6175 00001FD9 885D1F                  		mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  6176                                  
  6177 00001FDC 1E                      		push	ds
  6178 00001FDD 1E                      		push	ds
  6179 00001FDE 07                      		pop	es
  6180 00001FDF 0E                      		push	cs
  6181 00001FE0 1F                      		pop	ds
  6182                                  		; 17/10/2022
  6183 00001FE1 BD[CC05]                		mov	bp, CLEARIDS
  6184                                  		;mov	bp, 5D9h	; clear_ids
  6185                                  					; at 2C7h:5D9h = 70h:2B49h
  6186 00001FE4 0E                      		push	cs
  6187 00001FE5 E86FF7                  		call	call_bios_code
  6188 00001FE8 1F                      		pop	ds
  6189                                  
  6190                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  6191                                  ; set according to the partition information. we are going to
  6192                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  6193                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  6194                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  6195                                  ; we don't do this for the bpb information from the boot record. we
  6196                                  ; are not going to change the bpb information from the boot record.
  6197                                  
  6198                                  massage_bpb:
  6199                                  		; 12/12/2022
  6200 00001FE9 8A1E[CC16]              		mov	bl, [fbigfat]
  6201 00001FED 885D1F                  		mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6202                                  					; set size of fat on media
  6203                                  		;
  6204 00001FF0 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6205 00001FF3 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6206 00001FF6 83FA00                  		cmp	dx, 0		; double word total sectors?
  6207                                  		;ja	short goodret	; don't have to change it.
  6208                                  		; 12/12/2022
  6209 00001FF9 7714                    		ja	short short goodret2
  6210                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  6211                                  		;ja	short goodret	; don't have to change it.
  6212                                  		; 12/12/2022
  6213 00001FFB 395519                  		cmp	[di+19h], dx ; 0
  6214 00001FFE 770F                    		ja	short goodret2
  6215 00002000 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  6216                                  		;jb	short goodret
  6217                                  		; 12/12/2022
  6218 00002003 7209                    		jc	short goodret
  6219 00002005 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6220 00002008 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  6221                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  6222                                  		; 12/12/2022
  6223 0000200B 89551B                  		mov	[di+1Bh], dx ; 0 
  6224                                  goodret:				
  6225                                  		;;mov	bl, ds:fbigfat
  6226                                  		; 12/12/2022
  6227                                  		;; 17/10/2022
  6228                                  		;mov	bl, [fbigfat]
  6229                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6230                                  		;			; set size of fat on media
  6231 0000200E F8                      		clc
  6232                                  ret_hard_err:
  6233                                  		; 12/12/2022
  6234                                  goodret2:					
  6235 0000200F 07                      		pop	es
  6236 00002010 1F                      		pop	ds
  6237 00002011 5B                      		pop	bx
  6238 00002012 5F                      		pop	di
  6239 00002013 C3                      		retn
  6240                                  
  6241                                  ; =============== S U B	R O U T	I N E =======================================
  6242                                  
  6243                                  ; 15/10/2022
  6244                                  
  6245                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  6246                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  6247                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  6248                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  6249                                  ;then subtract 1 from BPB_TOTALSECTORS.
  6250                                  
  6251                                  		; 17/10/2022
  6252                                  cover_fdisk_bug:	
  6253 00002014 50                      		push	ax
  6254 00002015 52                      		push	dx
  6255 00002016 56                      		push	si
  6256 00002017 2E803E[7401]29          		cmp	byte [cs:disksector+26h], 29h
  6257                                  					; [disksector+EXT_BOOT.SIG],
  6258                                  					; EXT_BOOT_SIGNATURE
  6259 0000201D 7431                    		jz	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
  6260 0000201F 2E817F073130            		cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
  6261 00002025 7507                    		jnz	short cfb_chk_BPB_TOTALSECTORS
  6262 00002027 2E807F0A30              		cmp	byte [cs:bx+10], '0'
  6263 0000202C 7522                    		jnz	short cfb_retit
  6264                                  cfb_chk_BPB_TOTALSECTORS:
  6265                                  		; 17/10/2022		
  6266 0000202E BE[5901]                		mov	si, disksector+11 ; 14Eh+0Bh
  6267                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6268 00002031 2E837C0800              		cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
  6269                                  					; just to make sure.
  6270 00002036 7418                    		jz	short cfb_retit
  6271 00002038 2E8B4408                		mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6272 0000203C 2E034411                		add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
  6273 00002040 730E                    		jnb	short cfb_retit
  6274 00002042 750C                    		jnz	short cfb_retit	; if carry set and ax=0
  6275 00002044 2EFF4C08                		dec	word [cs:si+8]	; 0 -> 0FFFFh
  6276                                  					; then decrease	BPB_TOTALSECTORS by 1
  6277 00002048 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
  6278 0000204C 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
  6279                                  cfb_retit:				
  6280 00002050 5E                      		pop	si
  6281 00002051 5A                      		pop	dx
  6282 00002052 58                      		pop	ax
  6283 00002053 C3                      		retn
  6284                                  
  6285                                  ; ---------------------------------------------------------------------------
  6286                                  
  6287 00002054 0200                    word2		dw 2			
  6288 00002056 0300                    word3		dw 3			
  6289 00002058 0002                    word512		dw 512			
  6290                                  
  6291                                  ; =============== S U B	R O U T	I N E =======================================
  6292                                  
  6293                                  ; 15/10/2022
  6294                                  
  6295                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
  6296                                  ; the form factor. it is assumed that the bpbs for the various form factors
  6297                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
  6298                                  ; as the bpb on the drive.
  6299                                  ;
  6300                                  ; no attempt is made to preserve registers since we are going to jump to
  6301                                  ; sysinit straight after this routine.
  6302                                  
  6303                                  setdrvparms:
  6304 0000205A 31DB                    		xor	bx, bx
  6305                                  		; 18/10/2022
  6306 0000205C C43E[1901]              		les	di, [start_bds] ; get first bds in list
  6307                                  _next_bds:				
  6308 00002060 06                      		push	es
  6309 00002061 57                      		push	di
  6310 00002062 268A5D22                		mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
  6311 00002066 80FB05                  		cmp	bl, 5		; ffHardFile
  6312 00002069 753E                    		jnz	short nothardff
  6313 0000206B 31D2                    		xor	dx, dx
  6314 0000206D 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  6315 00002071 09C0                    		or	ax, ax
  6316 00002073 7508                    		jnz	short get_ccyl
  6317 00002075 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  6318 00002079 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  6319                                  
  6320                                  get_ccyl:				
  6321 0000207D 52                      		push	dx
  6322 0000207E 50                      		push	ax
  6323 0000207F 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
  6324 00002083 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
  6325                                  					; assume sectors per cyl. < 64k.
  6326 00002087 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
  6327 00002089 58                      		pop	ax
  6328 0000208A 5A                      		pop	dx		; dx:ax	= total	sectors
  6329 0000208B 50                      		push	ax
  6330 0000208C 89D0                    		mov	ax, dx
  6331 0000208E 31D2                    		xor	dx, dx
  6332 00002090 F7F1                    		div	cx
  6333 00002092 2EA3[2905]              		mov	[cs:temp_h], ax	; ax be	0 here.
  6334 00002096 58                      		pop	ax
  6335 00002097 F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
  6336 00002099 09D2                    		or	dx, dx
  6337 0000209B 7401                    		jz	short no_cyl_rnd ; came out even
  6338 0000209D 40                      		inc	ax		; round	up
  6339                                  
  6340                                  no_cyl_rnd:				
  6341 0000209E 26894525                		mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
  6342 000020A2 06                      		push	es
  6343 000020A3 1F                      		pop	ds
  6344 000020A4 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
  6345                                  					; ds:si	-> bpb for hard	file
  6346 000020A7 EB51                    		jmp	short set_recbpb
  6347                                  ; ---------------------------------------------------------------------------
  6348                                  
  6349                                  nothardff:				
  6350 000020A9 0E                      		push	cs
  6351 000020AA 1F                      		pop	ds
  6352                                  
  6353                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
  6354                                  ; we can just go and deal with the next bds at label go_to_next_bds.
  6355                                  
  6356                                  		; 10/12/2022
  6357                                  		; ds = cs
  6358                                  		; 17/10/2022 (ds=cs)
  6359 000020AB 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  6360                                  		;cmp	byte [cs:fakefloppydrv], 1
  6361 000020B0 7450                    		jz	short go_to_next_bds
  6362 000020B2 80FB07                  		cmp	bl, 7		; ffother
  6363                                  					; special case "other" type of medium
  6364 000020B5 753D                    		jnz	short not_process_other
  6365                                  process_other:
  6366 000020B7 31D2                    		xor	dx, dx
  6367 000020B9 8B4525                  		mov	ax, [di+25h]	; [di+BDS.cylinders]
  6368 000020BC F76536                  		mul	word [di+36h]	; [di+BDS.rheads]
  6369 000020BF F76534                  		mul	word [di+34h]	; [di+BDS.rsecpertrack]
  6370 000020C2 89452F                  		mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
  6371                                  					; have the total number of sectors
  6372 000020C5 48                      		dec	ax
  6373 000020C6 B201                    		mov	dl, 1
  6374                                  _again:					
  6375 000020C8 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6376 000020CB 7206                    		jb	short _@@
  6377 000020CD D1E8                    		shr	ax, 1
  6378 000020CF D0E2                    		shl	dl, 1
  6379 000020D1 EBF5                    		jmp	short _again
  6380                                  ; ---------------------------------------------------------------------------
  6381                                  
  6382                                  _@@:					
  6383 000020D3 80FA01                  		cmp	dl, 1		; is it	a small	disk ?
  6384 000020D6 7405                    		jz	short __@@	; yes, 224 root	entries	is enuf
  6385 000020D8 C7452DF000              		mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
  6386                                  __@@:					
  6387 000020DD 885529                  		mov	[di+29h], dl	; [di+BDS.rsecperclus]
  6388                                  
  6389                                  ; logic to get the sectors/fat area.
  6390                                  ; fat entry is assumed to be 1.5 bytes!!!
  6391                                  
  6392                                  		; 10/12/2022
  6393                                  		; ds = cs
  6394                                  		; 17/10/2022 (ds=cs)
  6395 000020E0 F726[5620]              		mul	word [word3]
  6396 000020E4 F736[5420]              		div	word [word2]
  6397 000020E8 31D2                    		xor	dx, dx
  6398 000020EA F736[5820]              		div	word [word512]
  6399                                  		;
  6400                                  		; 10/12/2022
  6401                                  		;mul	word [cs:word3]	; * 3 ; mul word [cs:word3]
  6402                                  		;div	word [cs:word2]	; / 2 ; div word [cs:word2]
  6403                                  		;xor	dx, dx
  6404                                  		;div	word [cs:word512] ; / 512 ; div word [cs:word512]
  6405                                  		;
  6406 000020EE 40                      		inc	ax		; + 1
  6407                                  no_round_up:
  6408 000020EF 894532                  		mov	[di+32h], ax	; [di+BDS.rfatsecs]
  6409 000020F2 EB0E                    		jmp	short go_to_next_bds
  6410                                  ; ---------------------------------------------------------------------------
  6411                                  
  6412                                  not_process_other:			
  6413 000020F4 D1E3                    		shl	bx, 1		; bx is	word index into	table of bpbs
  6414                                  		;mov	si, bpbtable
  6415                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
  6416                                  		; 09/12/2022
  6417                                  		;mov	si, BPBTABLE
  6418                                  		;mov	si, [bx+si]	; get address of bpb
  6419                                  		; 10/12/2022
  6420                                  		;mov	si, [BPBTABLE+bx]
  6421                                  		; 13/12/2022
  6422 000020F6 8BB7[3465]              		mov	si, [SYSINITOFFSET+bpbtable+bx]
  6423                                  set_recbpb:				
  6424 000020FA 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB]
  6425                                  					; es:di	-> recbpb
  6426 000020FD B91900                  		mov	cx, 25		; bpbx.size
  6427 00002100 F3A4                    		rep movsb		; move (size bpbx) bytes	
  6428                                  go_to_next_bds:				
  6429 00002102 5F                      		pop	di
  6430 00002103 07                      		pop	es		; restore pointer to bds
  6431 00002104 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
  6432 00002107 83FFFF                  		cmp	di, 0FFFFh	; -1
  6433 0000210A 740A                    		jz	short got_end_of_bds_chain
  6434 0000210C E951FF                  		jmp	_next_bds
  6435                                  ; ---------------------------------------------------------------------------
  6436                                  
  6437                                  		; 18/12/2022
  6438                                  ;got_end_of_bds_chain:			
  6439                                  		;retn
  6440                                  
  6441                                  ; =============== S U B	R O U T	I N E =======================================
  6442                                  
  6443                                  ; 15/10/2022
  6444                                  ; 30/12/2018 - Retro DOS v4.0
  6445                                  
  6446                                  ; al = device number
  6447                                  
  6448                                  print_init:	
  6449 0000210F 98                      		cbw
  6450 00002110 89C2                    		mov	dx, ax
  6451 00002112 B401                    		mov	ah, 1
  6452 00002114 CD17                    		int	17h		; PRINTER - INITIALIZE
  6453                                  					; DX = printer port (0-3)
  6454                                  					; Return: AH = status
  6455                                  got_end_of_bds_chain:	; 18/12/2022
  6456 00002116 C3                      		retn
  6457                                  
  6458                                  ; =============== S U B	R O U T	I N E =======================================
  6459                                  
  6460                                  ; al = device number
  6461                                  
  6462                                  aux_init:
  6463 00002117 98                      		cbw
  6464 00002118 89C2                    		mov	dx, ax
  6465                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
  6466                                  					; 2400,n,1,8 (msequ.inc)
  6467                                  		;mov	ah, 0
  6468                                  		; 10/12/2022
  6469 0000211A B8A300                  		mov	ax, 00A3h
  6470 0000211D CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
  6471                                  					; 	AL = initializing parameters,
  6472                                  					;	DX = port number (0-3)
  6473                                  					; Return: AH = RS-232 status code bits,
  6474                                  					;	  AL = modem status bits
  6475 0000211F C3                      		retn
  6476                                  
  6477                                  ; =============== S U B	R O U T	I N E =======================================
  6478                                  
  6479                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6480                                  ; 30/12/2018 - Retro DOS v4.0
  6481                                  ; 03/06/2018 - Retro DOS v3.0
  6482                                  ; (19/03/2018 - Retro DOS v2.0)
  6483                                  
  6484                                  ; domini **********************************************************************
  6485                                  ;
  6486                                  ;mini disk initialization routine. called right after dohard
  6487                                  ;modified for >2 hardfile support
  6488                                  ;
  6489                                  ; **cs=ds=es=datagrp
  6490                                  ;
  6491                                  ; **domini will search for every extended partition in the system, and
  6492                                  ;   initialize it.
  6493                                  ;
  6494                                  ; **bdsm stands for bds table for mini disk and located right after the label
  6495                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
  6496                                  ;   address of bdsm table.
  6497                                  ;
  6498                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
  6499                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
  6500                                  ;   right now, they are called as ismini, hidden_trks respectively.
  6501                                  ;
  6502                                  ; **domini will use the same routine in sethard routine after label set2 to
  6503                                  ;   save coding.
  6504                                  ;
  6505                                  ; **drvmax determined in dohard routine will be used for the next
  6506                                  ;   available logical mini disk drive number.
  6507                                  ;
  6508                                  ; input: drvmax, dskdrvs
  6509                                  ;
  6510                                  ; output: minidisk installed. bdsm table established and installed to bds.
  6511                                  ;	  end_of_bdsm - ending offset address of bdsm.
  6512                                  ;
  6513                                  ; called modules:
  6514                                  ;		  getboot
  6515                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
  6516                                  ;
  6517                                  ;		  setmini (new, it will use set2 routine)
  6518                                  ;
  6519                                  ; variables used: end_of_bdsm
  6520                                  ;		  rom_minidisk_num
  6521                                  ;		  mini_hdlim, mini_seclim
  6522                                  ;		  BDS_STRUC, start_bds
  6523                                  ;
  6524                                  ;******************************************************************************
  6525                                  
  6526                                  		; 19/10/2022
  6527                                  domini:	
  6528 00002120 8A36[4317]              		mov	dh, [hnum]	; get number of hardfiles
  6529                                  		; 10/12/2022
  6530 00002124 20F6                    		and	dh, dh
  6531                                  		;cmp	dh, 0
  6532 00002126 7431                    		jz	short dominiret	; no hard file?	then exit.
  6533 00002128 B280                    		mov	dl, 80h		; start	with hardfile 80h
  6534                                  domini_loop:				
  6535 0000212A 52                      		push	dx
  6536 0000212B 8816[4217]              		mov	[rom_minidisk_num], dl
  6537 0000212F B408                    		mov	ah, 8
  6538 00002131 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6539                                  					; DL = drive number
  6540                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6541                                  					; DL = number of consecutive drives
  6542                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6543 00002133 FEC6                    		inc	dh
  6544 00002135 31C0                    		xor	ax, ax
  6545 00002137 88F0                    		mov	al, dh
  6546 00002139 A3[4817]                		mov	[mini_hdlim], ax ; # of heads
  6547 0000213C 80E13F                  		and	cl, 3Fh
  6548 0000213F 88C8                    		mov	al, cl
  6549 00002141 A3[4A17]                		mov	[mini_seclim], ax ; # of sectors/track
  6550 00002144 06                      		push	es
  6551 00002145 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6552 00002149 E836FB                  		call	getboot		; read master boot record into
  6553                                  					; initbootsegment:bootbias
  6554 0000214C 7203                    		jb	short domininext
  6555 0000214E E80900                  		call	find_mini_partition
  6556                                  domininext:				
  6557 00002151 07                      		pop	es
  6558 00002152 5A                      		pop	dx
  6559 00002153 FEC2                    		inc	dl		; next hard file
  6560 00002155 FECE                    		dec	dh
  6561 00002157 75D1                    		jnz	short domini_loop
  6562                                  dominiret:				
  6563 00002159 C3                      		retn
  6564                                  
  6565                                  ; =============== S U B	R O U T	I N E =======================================
  6566                                  
  6567                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6568                                  ; 30/12/2018 - Retro DOS v4.0
  6569                                  
  6570                                  ;find_mini_partition tries to find every extended partition on a disk.
  6571                                  ;at entry:	di -> bdsm entry
  6572                                  ;		es:bx -> 07c0:bootbias - master boot record
  6573                                  ;		rom_minidisk_num - rom drive number
  6574                                  ;		drvmax - logical drive number
  6575                                  ;		mini_hdlim, mini_seclim
  6576                                  ;
  6577                                  ;called routine: setmini which uses set2 (in sethard routine)
  6578                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
  6579                                  
  6580                                  
  6581                                  find_mini_partition:	
  6582 0000215A 81C3C201                		add	bx, 1C2h	; bx ->	file system id
  6583                                  fmpnext:				
  6584 0000215E 26803F05                		cmp	byte [es:bx], 5 ; 5 = extended partition id.
  6585 00002162 740A                    		jz	short fmpgot
  6586 00002164 83C310                  		add	bx, 16
  6587 00002167 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6588 0000216B 75F1                    		jnz	short fmpnext
  6589                                  		;jmp	short fmpnextfound ; extended partition	not found
  6590                                  		; 18/12/2022
  6591                                  fmpnextfound:
  6592 0000216D C3                      		retn
  6593                                  
  6594                                  ;		; 30/07/2019 - Retro DOS v3.2
  6595                                  ;		jb	short fmpnext
  6596                                  ;fmpret:
  6597                                  ;		retn	; 29/05/2019
  6598                                  
  6599                                  ; ---------------------------------------------------------------------------
  6600                                  
  6601                                  		; 19/10/2022
  6602                                  fmpgot:					; found my partition.				
  6603 0000216E E8A100                  		call	dmax_check	; check	for drvmax already 26
  6604 00002171 73FA                    		jnb	short fmpnextfound ; done if too many
  6605 00002173 8B3E[4617]              		mov	di, [end_of_bdss] ; get next free	bds
  6606 00002177 C745470100              		mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  6607                                  		; 10/12/2022
  6608 0000217C 804D2301                		or	byte [di+23h], 1
  6609                                  		;or	word [di+23h], 1 ; [di+BDS.flags]
  6610                                  					; fNon_Removable
  6611 00002180 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  6612                                  					; ffHardFile
  6613 00002184 C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
  6614 00002189 A1[4817]                		mov	ax, [mini_hdlim]
  6615 0000218C 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
  6616 0000218F A1[4A17]                		mov	ax, [mini_seclim]
  6617 00002192 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
  6618 00002195 A0[4217]                		mov	al, [rom_minidisk_num]
  6619 00002198 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
  6620                                  					; set physical number
  6621 0000219B A0[7500]                		mov	al, [drvmax]
  6622 0000219E 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  6623                                  					; set logical number
  6624 000021A1 26837F0A00              		cmp	word [es:bx+10], 0
  6625 000021A6 7707                    		ja	short fmpgot_cont
  6626 000021A8 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
  6627                                  					; only lower word is meaningful.
  6628 000021AD 72BE                    		jb	short fmpnextfound
  6629                                  					; should be bigger than 64 sectors at least
  6630                                  fmpgot_cont:				
  6631 000021AF 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
  6632 000021B2 268A7702                		mov	dh, [es:bx+2]	; cylinder
  6633 000021B6 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
  6634 000021B9 D0C6                    		rol	dh, 1
  6635 000021BB D0C6                    		rol	dh, 1
  6636 000021BD 268A5703                		mov	dl, [es:bx+3]	; cyl byte
  6637 000021C1 895549                  		mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
  6638                                  					; set hidden trks
  6639 000021C4 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
  6640 000021C8 268A7701                		mov	dh, [es:bx+1]	; head
  6641 000021CC 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6642 000021D0 BB0002                  		mov	bx, 200h	; bootbias
  6643 000021D3 B80102                  		mov	ax, 201h
  6644 000021D6 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  6645                                  					; AL = number of sectors to read, CH = track, CL = sector
  6646                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  6647                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  6648 000021D8 7293                    		jb	short fmpnextfound
  6649 000021DA BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  6650 000021DD 06                      		push	es
  6651 000021DE E80900                  		call	setmini		; install a mini disk.
  6652                                  					; bx value saved.
  6653 000021E1 07                      		pop	es
  6654 000021E2 7203                    		jb	short fmpnextchain
  6655 000021E4 E84000                  		call	xinstall_bds	; -- install the bdsm into table
  6656                                  fmpnextchain:				
  6657 000021E7 E974FF                  		jmp	fmpnext		; let's find out
  6658                                  					; if we	have any chained partition
  6659                                  ; ---------------------------------------------------------------------------
  6660                                  
  6661                                  		; 18/12/2022
  6662                                  ;fmpnextfound:				
  6663                                  		;retn
  6664                                  
  6665                                  ; =============== S U B	R O U T	I N E =======================================
  6666                                  
  6667                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  6668                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  6669                                  
  6670                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
  6671                                  	
  6672 000021EA 57                      		push	di
  6673 000021EB 53                      		push	bx
  6674 000021EC 1E                      		push	ds
  6675 000021ED 06                      		push	es
  6676                                  setmini_1:				
  6677 000021EE 26803F01                		cmp	byte [es:bx], 1 ; FAT12 partition
  6678 000021F2 741B                    		jz	short setmini_2
  6679 000021F4 26803F04                		cmp	byte [es:bx], 4 ; FAT16 partition
  6680 000021F8 7415                    		jz	short setmini_2
  6681 000021FA 26803F06                		cmp	byte [es:bx], 6 ; FAT16 BIG	partition
  6682 000021FE 740F                    		jz	short setmini_2
  6683 00002200 83C310                  		add	bx, 16
  6684 00002203 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6685 00002207 75E5                    		jnz	short setmini_1
  6686 00002209 F9                      		stc
  6687 0000220A 07                      		pop	es
  6688 0000220B 1F                      		pop	ds
  6689 0000220C 5B                      		pop	bx
  6690 0000220D 5F                      		pop	di
  6691 0000220E C3                      		retn
  6692                                  
  6693                                  ; ---------------------------------------------------------------------------
  6694                                  setmini_2:				
  6695 0000220F E91DFB                  		jmp	set2		; branch into middle of sethard
  6696                                  
  6697                                  ; =============== S U B	R O U T	I N E =======================================
  6698                                  
  6699                                  ; 15/10/2022
  6700                                  ; 28/12/2018 - Retro DOS v4.0
  6701                                  ;
  6702                                  ; dmax_check --- call this when we want to install a new drive.
  6703                                  ;		it checks for drvmax < 26 to see if there is
  6704                                  ;		a drive letter left.
  6705                                  ;
  6706                                  ;	drvmax < 26 : carry SET!
  6707                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
  6708                                  ;			trash ax
  6709                                  
  6710                                  dmax_check:	
  6711 00002212 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
  6712 00002217 720D                    		jb	short dmax_ok	; return with carry if okay
  6713 00002219 06                      		push	es
  6714                                  		;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
  6715 0000221A B84104                  		mov	ax, SYSINITSEG	; 17/10/2022	
  6716 0000221D 8EC0                    		mov	es, ax
  6717                                  		; 18/10/2022
  6718 0000221F 26C606[8103]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
  6719                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
  6720                                  					; set message flag
  6721                                  					; [SYSINIT+toomanydrivesflag]
  6722 00002225 07                      		pop	es
  6723                                  
  6724                                  		;;push	es
  6725                                  		;;mov	ax,SYSINIT_SEG
  6726                                  		;;mov	es,ax
  6727                                  		;;mov	byte [es:toomanydrivesflag],1
  6728                                  					; set message flag
  6729                                  		;;pop	es
  6730                                  		;
  6731                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
  6732                                  dmax_ok:				
  6733 00002226 C3                      		retn
  6734                                  
  6735                                  ; =============== S U B	R O U T	I N E =======================================
  6736                                  
  6737                                  ; 18/10/2022
  6738                                  ; 15/10/2022
  6739                                  ; 28/12/2018 - Retro DOS v4.0						
  6740                                  ;								 
  6741                                  ;	link next bds (at ds:di) into the chain. assume that the
  6742                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
  6743                                  ;	  dskdrv_table, and end_of_bdss.	
  6744                                  
  6745                                  xinstall_bds:		
  6746 00002227 56                      		push	si
  6747 00002228 53                      		push	bx
  6748 00002229 8B36[1901]              		mov	si, [start_bds]	; get first bds
  6749                                  xinstall_bds_1:				
  6750 0000222D 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
  6751 00002230 7404                    		jz	short xinstall_bds_2 ;	skip ahead if so
  6752                                  		;mov	si, [si+BDS.link]
  6753 00002232 8B34                    		mov	si, [si]	; chain	through	list
  6754 00002234 EBF7                    		jmp	short xinstall_bds_1
  6755                                  ; ---------------------------------------------------------------------------
  6756                                  
  6757                                  xinstall_bds_2:				
  6758                                  		;mov	[si+BDS.link], di
  6759 00002236 893C                    		mov	[si], di
  6760                                  		;mov	[si+BDS.link+2], ds
  6761 00002238 8C5C02                  		mov	[si+2], ds
  6762                                  		;mov	word [di+BDS.link], -1
  6763 0000223B C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
  6764                                  		;mov	[di+BDS.link+2], ds
  6765 0000223F 8C5D02                  		mov	[di+2], ds ; might as well plug segment
  6766                                  		; 20/03/2019 - Retro DOS v4.0
  6767                                  		;lea	bx, [di+BDS.BPB]
  6768 00002242 8D5D06                  		lea	bx, [di+6]
  6769 00002245 8B36[4417]              		mov	si, [last_dskdrv_table]
  6770 00002249 891C                    		mov	[si], bx
  6771 0000224B 8306[4417]02            		add	word [last_dskdrv_table], 2
  6772 00002250 FE06[7500]              		inc	byte [drvmax]
  6773 00002254 8306[4617]64            		add	word [end_of_bdss], 100 ; BDS.size = 100
  6774 00002259 5B                      		pop	bx
  6775 0000225A 5E                      		pop	si
  6776 0000225B C3                      		retn
  6777                                  
  6778                                  ; =============== S U B	R O U T	I N E =======================================
  6779                                  
  6780                                  ; 17/10/2022
  6781                                  ; 15/10/2022
  6782                                  ; 28/12/2018 - Retro DOS v4.0
  6783                                  ; 03/06/2018 - Retro DOS v3.0
  6784                                  
  6785                                  cmos_clock_read:	
  6786 0000225C 50                      		push	ax
  6787 0000225D 51                      		push	cx
  6788 0000225E 52                      		push	dx
  6789 0000225F 55                      		push	bp
  6790 00002260 31ED                    		xor	bp, bp
  6791                                  loop_clock:				
  6792 00002262 31C9                    		xor	cx, cx
  6793 00002264 31D2                    		xor	dx, dx
  6794 00002266 B402                    		mov	ah, 2
  6795 00002268 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  6796                                  					; Return: CH = hours in	BCD
  6797                                  					; CL = minutes in BCD
  6798                                  					; DH = seconds in BCD
  6799 0000226A 83F900                  		cmp	cx, 0
  6800 0000226D 7512                    		jnz	short clock_present
  6801 0000226F 83FA00                  		cmp	dx, 0
  6802 00002272 750D                    		jnz	short clock_present
  6803 00002274 83FD01                  		cmp	bp, 1		; read again after a slight delay, in case clock
  6804 00002277 741C                    		jz	short no_readdate ; was	at zero	setting.
  6805 00002279 45                      		inc	bp		; only perform delay once.
  6806 0000227A B90040                  		mov	cx, 4000h	; 16384
  6807                                  delay:					
  6808 0000227D E2FE                    		loop	delay
  6809 0000227F EBE1                    		jmp	short loop_clock
  6810                                  ; ---------------------------------------------------------------------------
  6811                                  
  6812                                  clock_present:				
  6813 00002281 2EC606[F304]01          		mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
  6814 00002287 E81000                  		call	cmosck		; reset	cmos clock rate	that may be
  6815                                  					; possibly destroyed by	cp dos and
  6816                                  					; post routine did not restore that.
  6817 0000228A 56                      		push	si
  6818 0000228B E89BF2                  		call	read_real_date	; read real-time clock for date
  6819 0000228E FA                      		cli
  6820                                  		;mov	ds:daycnt, si	; set system date
  6821 0000228F 8936[F004]              		mov	[daycnt], si
  6822 00002293 FB                      		sti
  6823 00002294 5E                      		pop	si
  6824                                  
  6825                                  no_readdate:				
  6826 00002295 5D                      		pop	bp
  6827 00002296 5A                      		pop	dx
  6828 00002297 59                      		pop	cx
  6829 00002298 58                      		pop	ax
  6830 00002299 C3                      		retn
  6831                                  
  6832                                  ; ---------------------------------------------------------------------------
  6833                                  
  6834                                  ; the following code is written by jack gulley in engineering group.
  6835                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
  6836                                  ; and if the use cold boot the system to use pc dos while running cp dos,
  6837                                  ; the cmos clock rate are still slow which slow down disk operations
  6838                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
  6839                                  ; to fix this problem at the request of cp dos.
  6840                                  ;
  6841                                  ; the program is modified to be run on msinit. equates are defined
  6842                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
  6843                                  ;
  6844                                  ;  the following code cmosck is used to insure that the cmos has not
  6845                                  ;	had its rate controls left in an invalid state on older at's.
  6846                                  ;
  6847                                  ;	it checks for an at model byte "fc" with a submodel type of
  6848                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
  6849                                  ;	bits in case post has not done it. this initilization routine
  6850                                  ;	is only needed once when dos loads. it should be run as soon
  6851                                  ;	as possible to prevent slow diskette access.
  6852                                  ;
  6853                                  ;	this code exposes one to dos clearing cmos setup done by a
  6854                                  ;	resident program that hides and re-boots the system.
  6855                                  
  6856                                  cmosck:					; check and reset rtc rate bits	
  6857                                  
  6858                                  ;model byte and submodel byte were already determined in msinit.
  6859                                  
  6860                                  	; 16/06/2018 - Retro DOS v3.0
  6861                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
  6862                                  			
  6863 0000229A 50                      		push	ax
  6864 0000229B 2E803E[3E06]FC          		cmp	byte [cs:model_byte], 0FCh
  6865 000022A1 7525                    		jnz	short cmosck9	; Exit if not an AT model
  6866 000022A3 2E803E[3F06]06          		cmp	byte [cs:secondary_model_byte], 6
  6867                                  					; Is it 06 for the industral AT ?
  6868 000022A9 7408                    		jz	short cmosck4	; Go reset CMOS	periodic rate if 06
  6869 000022AB 2E803E[3F06]04          		cmp	byte [cs:secondary_model_byte], 4
  6870                                  					; Is it 00, 01, 02, or 03 ?
  6871 000022B1 7315                    		jnb	short cmosck9	; EXIT if problem fixed by POST  
  6872                                  					; Also,Secondary_model_byte = 0 
  6873                                  					;   when AH=0C0h, int 15h failed.
  6874                                  					;	RESET THE CMOS PERIODIC RATE 
  6875                                  					;  Model=FC submodel=00,01,02,03 or 06 
  6876                                  cmosck4:				
  6877 000022B3 B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
  6878                                  					; NMI disabled on return
  6879 000022B5 B426                    		mov	ah, 26h		; 00100110b
  6880                                  					; Set divider &	rate selection
  6881 000022B7 E83000                  		call	cmos_write
  6882 000022BA B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
  6883                                  					; NMI disabled on return
  6884 000022BC E80B00                  		call	cmos_read
  6885 000022BF 2407                    		and	al, 7		; 00000111b
  6886                                  					; clear	SET,PIE,AIE,UIE,SQWE
  6887 000022C1 88C4                    		mov	ah, al
  6888 000022C3 B00B                    		mov	al, 0Bh		; cmos_reg_b
  6889                                  					; NMI enabled on return
  6890 000022C5 E82200                  		call	cmos_write
  6891                                  cmosck9:				
  6892 000022C8 58                      		pop	ax
  6893 000022C9 C3                      		retn
  6894                                  
  6895                                  ; =============== S U B	R O U T	I N E =======================================
  6896                                  
  6897                                  ;--- CMOS_READ -----------------------------------------------------------------
  6898                                  ;		read byte from cmos system clock configuration table	       :
  6899                                  ;									       :
  6900                                  ; input: (al)=	cmos table address to be read				       :
  6901                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  6902                                  ;		bits 6-0 = address of table location to read		       :
  6903                                  ;									       :
  6904                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
  6905                                  ;		on then nmi left disabled.  during the cmos read both nmi and  :
  6906                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  6907                                  ;		the cmos address register is pointed to a default value and    :
  6908                                  ;		the interrupt flag restored to the entry state on return.      :
  6909                                  ;		only the (al) register and the nmi state is changed.	       :
  6910                                  ;-------------------------------------------------------------------------------
  6911                                  
  6912                                  cmos_read:				; read location (al) into (al)	
  6913 000022CA 9C                      		pushf
  6914 000022CB FA                      		cli
  6915 000022CC 53                      		push	bx
  6916 000022CD 50                      		push	ax		; AL = cmos table address to be	read
  6917 000022CE 0C80                    		or	al, 80h
  6918 000022D0 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  6919                                  					; RTC Seconds
  6920 000022D2 90                      		nop			; (undocumented	delay needed)
  6921 000022D3 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  6922 000022D5 89C3                    		mov	bx, ax
  6923 000022D7 58                      		pop	ax
  6924 000022D8 2480                    		and	al, 80h
  6925 000022DA 0C0F                    		or	al, 0Fh
  6926 000022DC E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  6927                                  					; RTC Seconds
  6928 000022DE 90                      		nop
  6929 000022DF E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  6930 000022E1 89D8                    		mov	ax, bx
  6931 000022E3 5B                      		pop	bx
  6932 000022E4 0E                      		push	cs		; *place code segment in stack and
  6933 000022E5 E80100                  		call	cmos_popf	; *handle popf for b- level 80286
  6934 000022E8 C3                      		retn			; return with flags restored
  6935                                  
  6936                                  ; ---------------------------------------------------------------------------
  6937                                  
  6938                                  cmos_popf:				
  6939 000022E9 CF                      		iret			; popf for level b- parts
  6940                                  					; return far and restore flags
  6941                                  
  6942                                  ; =============== S U B	R O U T	I N E =======================================
  6943                                  
  6944                                  ;--- cmos_write ----------------------------------------------------------------
  6945                                  ;		write byte to cmos system clock configuration table	       :
  6946                                  ;									       :
  6947                                  ; input: (al)=	cmos table address to be written to			       :
  6948                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  6949                                  ;		bits 6-0 = address of table location to write		       :
  6950                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
  6951                                  ;									       :
  6952                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
  6953                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
  6954                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  6955                                  ;		the cmos address register is pointed to a default value and    :
  6956                                  ;		the interrupt flag restored to the entry state on return.      :
  6957                                  ;		only the cmos location and the nmi state is changed.	       :
  6958                                  ;-------------------------------------------------------------------------------
  6959                                  
  6960                                  cmos_write:				; write (ah) to location (al)	
  6961 000022EA 9C                      		pushf			; write (ah) to location (al)
  6962 000022EB 50                      		push	ax		; save work register values
  6963 000022EC FA                      		cli
  6964 000022ED 50                      		push	ax		; save user nmi	state
  6965 000022EE 0C80                    		or	al, 80h		; disable nmi for us
  6966 000022F0 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  6967                                  					; RTC Seconds
  6968 000022F2 90                      		nop
  6969 000022F3 88E0                    		mov	al, ah
  6970 000022F5 E671                    		out	71h, al		; CMOS Memory/RTC Data Register
  6971 000022F7 58                      		pop	ax		; get user nmi
  6972 000022F8 2480                    		and	al, 80h
  6973 000022FA 0C0F                    		or	al, 0Fh
  6974 000022FC E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  6975                                  					; RTC Seconds
  6976 000022FE 90                      		nop
  6977 000022FF E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  6978 00002301 58                      		pop	ax		; restore work registers
  6979 00002302 0E                      		push	cs		; *place code segment in stack and
  6980 00002303 E8E3FF                  		call	cmos_popf	; *handle popf for b- level 80286
  6981 00002306 C3                      		retn
  6982                                  
  6983                                  ; 21/12/2022
  6984                                  ; ---------------------------------------------------------------------------
  6985                                  ; ---------------------------------------------------------------------------
  6986                                  %if 0
  6987                                  
  6988                                  ; ---------------------------------------------------------------------------
  6989                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
  6990                                  ; ---------------------------------------------------------------------------
  6991                                  ; The following routines provide support for reading in the file MSDOS.SYS.
  6992                                  ; ---------------------------------------------------------------------------
  6993                                  
  6994                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  6995                                  ;
  6996                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
  6997                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
  6998                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
  6999                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.) 
  7000                                  
  7001                                  ; =============== S U B	R O U T	I N E =======================================
  7002                                  
  7003                                  ; GetClus, read in a cluster at a specified address
  7004                                  ;
  7005                                  ;  bx = cluster to read
  7006                                  ;  cx = sectors per cluster
  7007                                  ;  es:di = load location
  7008                                  
  7009                                  ; 17/10/2022
  7010                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
  7011                                  ; 09/12/2022
  7012                                  DISKRD equ diskrd
  7013                                  
  7014                                  		; 17/10/2022
  7015                                  getclus:				
  7016                                  		push	cx
  7017                                  		push	di
  7018                                  		mov	[cs:doscnt], cx
  7019                                  		mov	ax, bx
  7020                                  		dec	ax
  7021                                  		dec	ax
  7022                                  		mul	cx		; convert to logical sector
  7023                                  					; dx:ax	= matching logical sector number
  7024                                  					;	  starting from the data sector
  7025                                  		add	ax, [cs:bios_l]
  7026                                  		adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
  7027                                  unpack:					
  7028                                  		push	ds
  7029                                  		push	ax
  7030                                  		push	bx
  7031                                  		mov	si, [cs:fatloc]
  7032                                  		mov	ds, si
  7033                                  		mov	si, bx		; next cluster
  7034                                  		test	byte [cs:fbigfat], 40h	; fbig
  7035                                  					; 16 bit fat?
  7036                                  		jnz	short unpack16	; yes
  7037                                  		shr	si, 1		; 12 bit fat. si=si/2
  7038                                  					; si = clus + clus/2
  7039                                  		add	si, bx		;
  7040                                  					; (si =	byte offset of the cluster in the FAT)
  7041                                  		push	dx
  7042                                  		xor	dx, dx
  7043                                  		call	get_fat_sector
  7044                                  		pop	dx
  7045                                  		mov	ax, [bx]	; save it into ax
  7046                                  		jnz	short even_odd	; if not a splitted fat, check even-odd.
  7047                                  		; 25/06/2023	
  7048                                  		;mov	al, [bx]	; splitted fat
  7049                                  		mov	[cs:temp_cluster], al
  7050                                  		inc	si		; (next	byte)
  7051                                  		push	dx
  7052                                  		xor	dx, dx
  7053                                  		call	get_fat_sector
  7054                                  		pop	dx
  7055                                  		;mov	al, ds:0
  7056                                  		mov	al, [0] ; 19/10/2022
  7057                                  		mov	[cs:temp_cluster+1], al
  7058                                  		mov	ax, [cs:temp_cluster]
  7059                                  even_odd:				
  7060                                  		pop	bx		; restore old fat entry	value
  7061                                  		push	bx		; save it right	away.
  7062                                  		shr	bx, 1		; was it even or odd?
  7063                                  		jnb	short havclus	; it was even.
  7064                                  		shr	ax, 1		; odd. massage fat value and keep
  7065                                  					; the highest 12 bits.
  7066                                  		shr	ax, 1
  7067                                  		shr	ax, 1
  7068                                  		shr	ax, 1
  7069                                  havclus:				
  7070                                  		mov	bx, ax		; now bx = new fat entry.
  7071                                  		and	bx, 0FFFh	; keep low 12 bits.
  7072                                  		jmp	short unpackx
  7073                                  ; ---------------------------------------------------------------------------
  7074                                  
  7075                                  unpack16:				
  7076                                  		push	dx
  7077                                  		xor	dx, dx
  7078                                  		shl	si, 1		; extend to 32 bit offset
  7079                                  		adc	dx, 0
  7080                                  		call	get_fat_sector
  7081                                  		pop	dx
  7082                                  		mov	bx, [bx]	;
  7083                                  					; bx = new fat entry.
  7084                                  unpackx:				
  7085                                  		pop	si		; restore old bx value into si
  7086                                  		pop	ax		; restore logical sector (low)
  7087                                  		pop	ds
  7088                                  		sub	si, bx
  7089                                  		cmp	si, -1		; one apart?
  7090                                  		jnz	short getcl2
  7091                                  		add	[cs:doscnt], cx
  7092                                  		jmp	short unpack
  7093                                  ; ---------------------------------------------------------------------------
  7094                                  
  7095                                  getcl2:					
  7096                                  		push	bx
  7097                                  		push	dx		; sector to read (high)
  7098                                  		push	ax		; sector to read (low)
  7099                                  		mov	ax, [cs:drvfat]	; get drive and	fat spec
  7100                                  		mov	cx, [cs:doscnt]
  7101                                  		pop	dx		; sector to read for diskrd (low)
  7102                                  		pop	word [cs:start_sec_h]
  7103                                  					; sector to read for diskrd (high)
  7104                                  		push	ds
  7105                                  		push	cs
  7106                                  		pop	ds
  7107                                  		push	cs		; simulate far call
  7108                                  		; 17/10/2022
  7109                                  		mov	bp, DISKRD	; 8E5h
  7110                                  		;mov	bp, 8E5h	; offset diskrd
  7111                                  					; 2C7h:8E5h = 70h:2E55h
  7112                                  		call	call_bios_code	; read the clusters
  7113                                  		pop	ds
  7114                                  		pop	bx
  7115                                  		pop	di
  7116                                  		mov	ax, [cs:doscnt]	; get number of	sectors	read
  7117                                  		xchg	ah, al		; multiply by 256
  7118                                  		shl	ax, 1		; times	2 equal	512
  7119                                  		add	di, ax		; update load location
  7120                                  		pop	cx		; restore sectors/cluster
  7121                                  		retn
  7122                                  
  7123                                  ; =============== S U B	R O U T	I N E =======================================
  7124                                  
  7125                                  
  7126                                  ;function: find and read the corresponding fat sector into ds:0
  7127                                  ;
  7128                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
  7129                                  ;     ds - fatloc segment
  7130                                  ;     cs:drvfat - logical drive number, fat id
  7131                                  ;     cs:md_sectorsize
  7132                                  ;     cs:last_fat_secnum - last fat sector number read in.
  7133                                  ;
  7134                                  ;out). corresponding fat sector read in.
  7135                                  ;      bx = offset value from fatlog segment.
  7136                                  ;      other registera saved.
  7137                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
  7138                                  ;      starts at the last byte of the fat sector. in this case, the caller
  7139                                  ;      should save this byte, and read the next fat sector to get the rest
  7140                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
  7141                                  
  7142                                  		; 17/10/2022
  7143                                  get_fat_sector:	
  7144                                  		push	ax
  7145                                  		push	cx
  7146                                  		push	di
  7147                                  		push	si
  7148                                  		push	es
  7149                                  		push	ds
  7150                                  		mov	ax, si
  7151                                  		mov	cx, [cs:md_sectorsize] ; 512
  7152                                  		div	cx		; ax = sector number, dx = offset
  7153                                  		nop
  7154                                  
  7155                                  		; Get rid of the assumption that
  7156                                  		; there	is only	one reserved sector
  7157                                  
  7158                                  		push	es
  7159                                  		push	ds
  7160                                  		push	di
  7161                                  		push	ax
  7162                                  		push	cs
  7163                                  		pop	ds
  7164                                  
  7165                                  		mov	ax, [cs:drvfat]	; get drive # and FAT id
  7166                                  		mov	bp, SETDRIVE
  7167                                  		;mov	bp, 4D7h	; setdrive
  7168                                  					; at 2C7h:4D7h = 70h:2A47h
  7169                                  		push	cs		; simulate far call
  7170                                  		call	call_bios_code	; get bds for drive
  7171                                  		pop	ax		; (sector number -without reserved and hidden sectors-)
  7172                                  		add	ax, [es:di+9]	; [es:di+BDS.resectors]
  7173                                  					; add #reserved_sectors
  7174                                  		pop	di
  7175                                  		pop	ds
  7176                                  		pop	es
  7177                                  		cmp	ax, [cs:last_fat_sec_num]
  7178                                  		jz	short gfs_split_chk ; don't need to read it again.
  7179                                  		mov	[cs:last_fat_sec_num], ax 
  7180                                  					; sector number
  7181                                  					; (in the partition, without hidden sectors)
  7182                                  		push	dx
  7183                                  		mov	word [cs:start_sec_h], 0 
  7184                                  					; prepare to read the fat sector
  7185                                  					; start_sec_h is always	0 for fat sector.
  7186                                  		mov	dx, ax
  7187                                  		mov	cx, 1		; 1 sector read
  7188                                  		mov	ax, [cs:drvfat]
  7189                                  		push	ds
  7190                                  		pop	es
  7191                                  		xor	di, di		; es:di	-> fatloc segment:0
  7192                                  		push	ds
  7193                                  		push	cs
  7194                                  		pop	ds
  7195                                  		push	cs		; simulate far call
  7196                                  		mov	bp, DISKRD	; 8E5h
  7197                                  		;mov	bp, 8E5h	; offset diskrd
  7198                                  					; 2C7h:8E5h = 70h:2E55h
  7199                                  		call	call_bios_code
  7200                                  		pop	ds
  7201                                  		pop	dx
  7202                                  		mov	cx, [cs:md_sectorsize] ; 512
  7203                                  
  7204                                  gfs_split_chk:				
  7205                                  		dec	cx		; 511
  7206                                  		cmp	dx, cx		; if offset points to the
  7207                                  					; last byte of this sector,
  7208                                  					; then splitted	entry.
  7209                                  		mov	bx, dx		; set bx to dx
  7210                                  		pop	ds
  7211                                  		pop	es
  7212                                  		pop	si
  7213                                  		pop	di
  7214                                  		pop	cx
  7215                                  		pop	ax
  7216                                  		retn
  7217                                  
  7218                                  ; 15/10/2022
  7219                                  ;Bios_Data_Init	ends
  7220                                  
  7221                                  %endif
  7222                                  ; ---------------------------------------------------------------------------
  7223                                  ; ---------------------------------------------------------------------------
  7224                                  
  7225                                  		; 09/12/2022
  7226                                  		;db 0
  7227                                  
  7228                                  numbertodiv	equ ($-BData_start)
  7229                                  numbertomod	equ (numbertodiv % 16)
  7230                                  
  7231                                  %if numbertomod>0 & numbertomod<16
  7232 00002307 00<rep 9h>              		times (16-numbertomod) db 0
  7233                                  %endif
  7234                                  
  7235                                  ;align 16
  7236                                  
  7237                                  ; 09/12/2022
  7238                                  IOSYSCODESEGOFF	equ $ - BData_start
  7239                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
  7240                                  
  7241                                  ;--- End of DOSBIOS data segment --------------------------------------------
  7242                                  ; ---------------------------------------------------------------------------
  7243                                  		;db 4 dup(0)
  7244                                  ; 09/12/2022		
  7245                                  ;		times 4 db 0	; 19/10/2022
  7246                                  ; ---------------------------------------------------------------------------
  7247                                  
  7248                                  ;============================================================================
  7249                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
  7250                                  ;============================================================================
  7251                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7252                                  
  7253                                  section .BIOSCODE vstart=0  
  7254                                  
  7255                                  BCode_start:	 ; 09/12/2022
  7256                                   
  7257                                  ; 02/10/2022
  7258                                  
  7259                                  ;--- DOSBIOS code segment ---------------------------------------------------
  7260                                  ;----------------------------------------------------------------------------
  7261                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
  7262                                  ;----------------------------------------------------------------------------
  7263                                  
  7264                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
  7265 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
  7266 00000030 7000                    BiosDataWord:	dw 70h
  7267                                  
  7268                                  ; 15/10/2022
  7269                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
  7270                                  ; 09/12/2022
  7271                                  BIOSDATAWORD	equ BiosDataWord
  7272                                  
  7273                                  ; ---------------------------------------------------------------------------
  7274                                  
  7275                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS) 
  7276                                  
  7277                                  ;************************************************************************
  7278                                  ;*									*
  7279                                  ;*	seg_reinit is called with ax = our new code segment value,	*
  7280                                  ;*	  trashes di, cx, es						*
  7281                                  ;*									*
  7282                                  ;*	cas -- should be made disposable!				*
  7283                                  ;*									*
  7284                                  ;************************************************************************
  7285                                  
  7286                                  _seg_reinit:
  7287 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
  7288                                  					; at 2C7h:30h or 70h:25A0h
  7289                                  		;mov	di, (offset cdev+2)
  7290 00000037 BF[E006]                		mov	di, cdev+2	; 19/10/2022
  7291 0000003A B90400                  		mov	cx, 4		; (end_BC_entries - cdev)/4
  7292                                  
  7293                                  _seg_reinit_1:				
  7294 0000003D AB                      		stosw			; modify Bios_Code entry points
  7295 0000003E 47                      		inc	di
  7296 0000003F 47                      		inc	di
  7297 00000040 E2FB                    		loop	_seg_reinit_1
  7298 00000042 CB                      		retf
  7299                                  
  7300                                  ; ---------------------------------------------------------------------------
  7301                                  
  7302                                  ; 15/10/2022
  7303                                  
  7304                                  ;************************************************************************
  7305                                  ;*									*
  7306                                  ;*	chardev_entry - main device driver dispatch routine		*
  7307                                  ;*	   called with a dummy parameter block on the stack		*
  7308                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
  7309                                  ;*									*
  7310                                  ;*	will eventually take care of doing the transitions in		*
  7311                                  ;*	   out of Bios_Code						*
  7312                                  ;*									*
  7313                                  ;************************************************************************
  7314                                  
  7315                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
  7316 00000043 56                      		push	si
  7317 00000044 50                      		push	ax
  7318 00000045 51                      		push	cx
  7319 00000046 52                      		push	dx
  7320 00000047 57                      		push	di
  7321 00000048 55                      		push	bp
  7322 00000049 1E                      		push	ds
  7323 0000004A 06                      		push	es
  7324 0000004B 53                      		push	bx
  7325 0000004C 89E5                    		mov	bp, sp
  7326 0000004E 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
  7327                                  		;;mov	ds, word [cs:0030h]
  7328                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7329 00000051 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7330 00000056 8B4402                  		mov	ax, [si+2]	; get the device number	if present
  7331 00000059 A2[2100]                		mov	[auxnum], al
  7332 0000005C 8826[E704]              		mov	[printdev], ah
  7333 00000060 8B34                    		mov	si, [si]	; point	to the device dispatch table
  7334 00000062 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
  7335 00000066 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
  7336 0000006A 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
  7337 0000006E 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
  7338 00000072 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
  7339                                  		; 17/10/2022
  7340 00000076 81FE[9604]              		cmp	si, DSKTBL
  7341                                  		;cmp	si, 4A2h	; dsktbl
  7342                                  					; at 2C7h:4A2h = 70h:2A12h
  7343 0000007A 7517                    		jnz	short no_sector32_mapping
  7344                                  
  7345                                  ; Special case for 32-bit start sector number:
  7346                                  ;   if (si==dsktbl) /* if this is a disk device call */
  7347                                  ;      set high 16 bits of secnum to 0
  7348                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
  7349                                  ;
  7350                                  ; pass high word of sector number in start_sec_h, low word in dx
  7351                                  ;
  7352                                  ; note: start_l and start_h are the offsets within the io_request packet
  7353                                  ;	  which contain the low and hi words of the 32 bit start sector if
  7354                                  ;	  it has been used.
  7355                                  ;
  7356                                  ; note: remember not to destroy the registers which have been set up before
  7357                                  
  7358                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
  7359 0000007C C706[2B05]0000          		mov	word [start_sec_h], 0
  7360 00000082 83FAFF                  		cmp	dx, 0FFFFh
  7361 00000085 750C                    		jnz	short no_sector32_mapping
  7362 00000087 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
  7363                                  					; 32 bits dsk req
  7364                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
  7365 0000008B 8916[2B05]              		mov	[start_sec_h], dx
  7366 0000008F 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
  7367                                  					; dx = packet.start_l
  7368                                  no_sector32_mapping:			
  7369 00000093 97                      		xchg	ax, di
  7370 00000094 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
  7371 00000098 2E3A04                  		cmp	al, cs:[si]
  7372 0000009B 732C                    		jnb	short command_error
  7373 0000009D 98                      		cbw			; note that al <= 15 means ok
  7374 0000009E D1E0                    		shl	ax, 1
  7375 000000A0 01C6                    		add	si, ax
  7376 000000A2 97                      		xchg	ax, di
  7377 000000A3 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
  7378 000000A7 FC                      		cld
  7379                                  		; 17/10/2022
  7380 000000A8 2EFF5401                		call	near [cs:si+1]
  7381                                  		;call	word ptr cs:si+1
  7382 000000AC 7202                    		jb	short already_got_ah_status
  7383 000000AE B401                    		mov	ah, 1
  7384                                  already_got_ah_status:
  7385                                  		;;mov	ds, [cs:0030h]	; 15/10/2022			
  7386                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7387                                  					; cas note: shouldn't be needed!
  7388 000000B0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7389                                  		;lds	bx, ds:ptrsav
  7390 000000B5 C51E[1200]              		lds	bx, [ptrsav]
  7391 000000B9 894703                  		mov	[bx+3],	ax	; [bx+status]
  7392                                  					; mark operation complete
  7393 000000BC 5B                      		pop	bx
  7394 000000BD 07                      		pop	es
  7395 000000BE 1F                      		pop	ds
  7396 000000BF 5D                      		pop	bp
  7397 000000C0 5F                      		pop	di
  7398 000000C1 5A                      		pop	dx
  7399 000000C2 59                      		pop	cx
  7400 000000C3 58                      		pop	ax
  7401 000000C4 5E                      		pop	si
  7402 000000C5 83C402                  		add	sp, 2		; get rid of fake return address
  7403                                  	
  7404                                  		; fall through into bc_retf
  7405                                  ; ---------------------------------------------------------------------------	
  7406                                  bc_retf:
  7407 000000C8 CB                      		retf
  7408                                  ; ---------------------------------------------------------------------------
  7409                                  
  7410                                  command_error:				
  7411 000000C9 E80900                  		call	bc_cmderr
  7412 000000CC EBE2                    		jmp	short already_got_ah_status
  7413                                  ; 15/10/2022
  7414                                  ; 01/05/2019
  7415                                  
  7416                                  ;----------------------------------------------------------------------------
  7417                                  ; The following piece of hack is for supporting CP/M compatibility
  7418                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
  7419                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
  7420                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
  7421                                  ; high.
  7422                                  ;----------------------------------------------------------------------------
  7423                                  
  7424                                  		;db 7 dup(0)
  7425                                  
  7426                                  		; 15/10/2022
  7427                                  
  7428 000000CE 0000                    		dw 0		; pad to bring offset to 0D0h
  7429                                  
  7430 000000D0 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
  7431                                  				;  which is the CP/M call 5 entry point
  7432                                  		
  7433                                  
  7434                                  ; ---------------------------------------------------------------------------
  7435                                  
  7436                                  ;	exit - all routines return through this path
  7437                                  
  7438                                  bc_cmderr:				
  7439 000000D5 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
  7440                                  					; unknown command error
  7441                                  
  7442                                  ; =============== S U B	R O U T	I N E =======================================
  7443                                  
  7444                                  ;	now zero the count field by subtracting its current value,
  7445                                  ;	  which is still in cx, from itself.
  7446                                  
  7447                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
  7448                                  ;	  in order to return the number actually complete
  7449                                  
  7450                                  bc_err_cnt:	
  7451                                  		;les	bx, ds:ptrsav
  7452                                  		; 19/10/2022
  7453 000000D7 C41E[1200]              		les	bx, [ptrsav]
  7454 000000DB 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
  7455                                  					; # of successful i/o's
  7456 000000DF B481                    		mov	ah, 81h		; mark error return
  7457 000000E1 F9                      		stc			; indicate abnormal end
  7458 000000E2 C3                      		retn
  7459                                  
  7460                                  ; 15/10/2022
  7461                                  
  7462                                  ;Bios_Code ends
  7463                                  
  7464                                  ;----------------------------------------------------------------------------
  7465                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
  7466                                  ;----------------------------------------------------------------------------
  7467                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7468                                  ; 10/01/2019 - Retro DOS v4.0
  7469                                  
  7470                                  ; 30/04/2019
  7471                                  
  7472                                  ;title	mschar - character and clock devices
  7473                                  
  7474                                  ;MODE_CTRLBRK	equ	0FFh
  7475                                  
  7476                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
  7477                                  
  7478                                  ;************************************************************************
  7479                                  ;*									*
  7480                                  ;*	device driver dispatch tables					*
  7481                                  ;*									*
  7482                                  ;*	each table starts with a byte which lists the number of		*
  7483                                  ;*	legal functions, followed by that number of words. Each		*
  7484                                  ;*	word represents an offset of a routine in Bios_Code which	*
  7485                                  ;*	handles the function. The functions are terminated with		*
  7486                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
  7487                                  ;*	to the caller. If carry is set, the ah/al registers are		*
  7488                                  ;*	returned as abnormal completion status. Notice that ds		*
  7489                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
  7490                                  ;*									*
  7491                                  ;************************************************************************
  7492                                  
  7493                                  		; 13/12/2022
  7494                                  		;db 0
  7495                                  
  7496                                  		; 13/12/202
  7497 000000E3 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
  7498                                  					; 2C7h:0E4h = 70h:2654h
  7499 000000E4 [F901]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7500                                  					; 00 init
  7501 000000E6 [F901]                  		dw bc_exvec  ; 1FBh	; 01
  7502 000000E8 [F901]                  		dw bc_exvec  ; 1FBh	; 02
  7503 000000EA [D500]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
  7504                                  					; 03
  7505 000000EC [5B01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
  7506                                  					; 04
  7507 000000EE [9E01]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
  7508                                  					; 05
  7509 000000F0 [F901]                  		dw bc_exvec  ; 1FBh	; 06
  7510 000000F2 [0702]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
  7511                                  					; 07
  7512 000000F4 [FB01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
  7513                                  					; 08
  7514 000000F6 [FB01]                  		dw con_writ  ; 1FDh	; 09
  7515 000000F8 [F901]                  		dw bc_exvec  ; 1FBh	; 0A
  7516                                  con_table_end:
  7517 000000FA 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
  7518                                  					; 2C7h:0FBh = 70h:266Bh
  7519 000000FB [F901]                  		dw bc_exvec   ; 1FBh	; bc_exvec
  7520 000000FD [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7521 000000FF [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7522 00000101 [D500]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
  7523 00000103 [1802]                  		dw prn_input  ;	21Ah	; prn_input
  7524                                  					; 04 indicate zero chars read
  7525 00000105 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7526                                  					; 05 read non-destructive
  7527 00000107 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7528 00000109 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7529 0000010B [1D02]                  		dw prn_writ   ;	21Fh	; prn_writ
  7530 0000010D [1D02]                  		dw prn_writ   ; 21Fh	; 09
  7531 0000010F [4E02]                  		dw prn_stat   ; 251h	; prn_stat
  7532 00000111 [F901]                  		dw bc_exvec   ; 1FBh	; 0B
  7533 00000113 [F901]                  		dw bc_exvec   ; 1FBh	; 0C
  7534 00000115 [F901]                  		dw bc_exvec   ; 1FBh	; 0D
  7535 00000117 [F901]                  		dw bc_exvec   ; 1FBh	; 0E
  7536 00000119 [F901]                  		dw bc_exvec   ; 1FBh	; 0F
  7537 0000011B [8802]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
  7538 0000011D [F901]                  		dw bc_exvec   ; 1FBh	; 11
  7539 0000011F [F901]                  		dw bc_exvec   ; 1FBh	; 12
  7540 00000121 [B602]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
  7541 00000123 [F901]                  		dw bc_exvec   ; 1FBh	; 14
  7542 00000125 [F901]                  		dw bc_exvec   ; 1FBh	; 15
  7543 00000127 [F901]                  		dw bc_exvec   ; 1FBh	; 16
  7544 00000129 [F901]                  		dw bc_exvec   ; 1FBh	; 17
  7545 0000012B [F901]                  		dw bc_exvec   ; 1FBh	; 18
  7546 0000012D [EB02]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
  7547                                  prn_table_end:
  7548 0000012F 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
  7549                                  					; 2C7h:130h = 70h:26A0h
  7550 00000130 [F901]                  		dw bc_exvec   ; 1FBh	; 00 - init
  7551 00000132 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7552 00000134 [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7553 00000136 [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7554 00000138 [0603]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
  7555 0000013A [2D03]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
  7556 0000013C [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7557 0000013E [6303]                  		dw aux_flsh   ;	36Ch	; aux_flsh
  7558 00000140 [6A03]                  		dw aux_writ   ;	374h	; aux_writ
  7559 00000142 [6A03]                  		dw aux_writ   ;	374h	; 09
  7560 00000144 [4D03]                  		dw aux_wrst   ;	355h	; aux_wrst
  7561                                  aux_table_end:
  7562 00000146 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
  7563                                  					; 2C7h:147h = 70h:26B7h
  7564 00000147 [F901]                  		dw bc_exvec   ; 1FBh	; 00
  7565 00000149 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7566 0000014B [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7567 0000014D [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7568 0000014F [2904]                  		dw tim_read   ;	435h	; tim_read
  7569 00000151 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7570 00000153 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7571 00000155 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7572 00000157 [D003]                  		dw tim_writ   ; 3DBh	; tim_writ
  7573 00000159 [D003]                  		dw tim_writ   ; 3DBh	; 09
  7574                                  tim_table_end:
  7575                                  
  7576                                  ; ---------------------------------------------------------------------------
  7577                                  
  7578                                  ;************************************************************************
  7579                                  ;*									*
  7580                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
  7581                                  ;*									*
  7582                                  ;************************************************************************
  7583                                  
  7584                                  con_read:				; 2C7h:15Ch = 70h:26CCh
  7585                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
  7586 0000015B E306                    		jcxz	con_exit	; 19/10/2022
  7587                                  con_loop:				
  7588 0000015D E80500                  		call	chrin		; get char in al
  7589 00000160 AA                      		stosb			; store	char at	es:di
  7590 00000161 E2FA                    		loop	con_loop
  7591                                  con_exit:				
  7592 00000163 F8                      		clc
  7593 00000164 C3                      		retn
  7594                                  
  7595                                  ; =============== S U B	R O U T	I N E =======================================
  7596                                  
  7597                                  ;************************************************************************
  7598                                  ;*									*
  7599                                  ;*	chrin - input single char from keyboard into al			*
  7600                                  ;*									*
  7601                                  ;*	  we are going to issue extended keyboard function, if		*
  7602                                  ;*	  supported. the returning value of the extended keystroke	*
  7603                                  ;*	  of the extended keyboard function uses 0E0h in al		*
  7604                                  ;*	  instead of 00h as in the conventional keyboard function.	*
  7605                                  ;*	  this creates a conflict when the user entered real		*
  7606                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
  7607                                  ;*	  keystroke and the greek alpha. this case will be handled	*
  7608                                  ;*	  in the following manner:					*
  7609                                  ;*									*
  7610                                  ;*	      ah = 16h							*
  7611                                  ;*	      int 16h							*
  7612                                  ;*	      if al == 0, then extended code (in ah)			*
  7613                                  ;*	      else if al == 0E0h, then					*
  7614                                  ;*	      if ah <> 0, then extended code (in ah)			*
  7615                                  ;*		else greek_alpha character.				*
  7616                                  ;*									*
  7617                                  ;*	also, for compatibility reason, if an extended code is		*
  7618                                  ;*	  detected, then we are going to change the value in al		*
  7619                                  ;*	  from 0E0h to 00h.						*
  7620                                  ;*									*
  7621                                  ;************************************************************************
  7622                                  
  7623                                  		; 19/10/2022
  7624                                  chrin:		
  7625 00000165 8A26[E504]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
  7626 00000169 30C0                    		xor	al, al
  7627 0000016B 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
  7628 0000016F 08C0                    		or	al, al
  7629 00000171 752A                    		jnz	short keyret
  7630 00000173 CD16                    		int	16h		; KEYBOARD -
  7631 00000175 09C0                    		or	ax, ax
  7632 00000177 74EC                    		jz	short chrin
  7633 00000179 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7634 0000017C 7504                    		jnz	short alt_ext_chk
  7635 0000017E B010                    		mov	al, 10h
  7636 00000180 EB1B                    		jmp	short keyret
  7637                                  ; ---------------------------------------------------------------------------
  7638                                  
  7639                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
  7640                                  ;    if character read was 0E0h then
  7641                                  ;      if extended byte was zero (i.e. ah == 0) then
  7642                                  ;	 goto keyret
  7643                                  ;      else
  7644                                  ;	 set al to zero
  7645                                  ;	 goto alt_save
  7646                                  ;      endif
  7647                                  ;    endif
  7648                                  ;  endif
  7649                                  
  7650                                  alt_ext_chk:
  7651 00000182 803E[E504]00            		cmp	byte [keyrd_func], 0
  7652 00000187 740C                    		jz	short not_ext
  7653 00000189 3CE0                    		cmp	al, 0E0h
  7654 0000018B 7508                    		jnz	short not_ext
  7655 0000018D 08E4                    		or	ah, ah
  7656 0000018F 740C                    		jz	short keyret
  7657 00000191 30C0                    		xor	al, al
  7658 00000193 EB04                    		jmp	short alt_save
  7659                                  ; ---------------------------------------------------------------------------
  7660                                  
  7661                                  not_ext:				
  7662 00000195 08C0                    		or	al, al		; special case?
  7663 00000197 7504                    		jnz	short keyret
  7664                                  alt_save:				
  7665 00000199 8826[0C00]              		mov	[altah], ah	; store	special	key
  7666                                  keyret:					
  7667 0000019D C3                      		retn
  7668                                  
  7669                                  ; ---------------------------------------------------------------------------
  7670                                  
  7671                                  ;************************************************************************
  7672                                  ;*									*
  7673                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
  7674                                  ;*									*
  7675                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
  7676                                  ;*	in the status word of the request packet, and there is no	*
  7677                                  ;*	character in the input buffer, the driver issues a system	*
  7678                                  ;*	wait request to the rom. on return from the rom, it returns	*
  7679                                  ;*	a 'char-not-found' to the dos.					*
  7680                                  ;*									*
  7681                                  ;************************************************************************
  7682                                  
  7683                                  		; 19/10/2022
  7684                                  con_rdnd:				
  7685 0000019E A0[0C00]                		mov	al, [altah]
  7686 000001A1 08C0                    		or	al, al
  7687 000001A3 754C                    		jnz	short rdexit
  7688 000001A5 8A26[E604]              		mov	ah, [keysts_func]
  7689 000001A9 CD16                    		int	16h		; KEYBOARD -
  7690 000001AB 751D                    		jnz	short gotchr
  7691 000001AD 803E[7900]00            		cmp	byte [fhavek09], 0
  7692 000001B2 7412                    		jz	short z_bus_exit
  7693 000001B4 C41E[1200]              		les	bx, [ptrsav]
  7694                                  		; 12/12/2022
  7695 000001B8 26F6470404              		test	byte [es:bx+4], 04h
  7696                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
  7697 000001BD 7407                    		jz	short z_bus_exit
  7698 000001BF B80041                  		mov	ax, 4100h
  7699 000001C2 30DB                    		xor	bl, bl
  7700 000001C4 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  7701                                  					; AL = condition type, BH = condition compare or mask value
  7702                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  7703                                  					; DX = I/O port	address	if AL bit 4 set
  7704                                  z_bus_exit:				
  7705 000001C6 F9                      		stc			; 2C7h:1C8h = 70h:2738h
  7706 000001C7 B403                    		mov	ah, 3		; indicate busy	status
  7707 000001C9 C3                      		retn
  7708                                  ; ---------------------------------------------------------------------------
  7709                                  
  7710                                  gotchr:					
  7711 000001CA 09C0                    		or	ax, ax
  7712 000001CC 7508                    		jnz	short notbrk	; check	for null after break
  7713 000001CE 8A26[E504]              		mov	ah, [keyrd_func] ; issue keyboard read function
  7714 000001D2 CD16                    		int	16h		; KEYBOARD -
  7715 000001D4 EBC8                    		jmp	short con_rdnd	; get a	real status
  7716                                  ; ---------------------------------------------------------------------------
  7717                                  
  7718                                  notbrk:					
  7719 000001D6 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7720 000001D9 7504                    		jnz	short rd_ext_chk
  7721 000001DB B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
  7722 000001DD EB12                    		jmp	short rdexit
  7723                                  ; ---------------------------------------------------------------------------
  7724                                  
  7725                                  rd_ext_chk:				
  7726 000001DF 803E[E504]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
  7727 000001E4 740B                    		jz	short rdexit
  7728 000001E6 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
  7729 000001E8 7507                    		jnz	short rdexit
  7730 000001EA 80FC00                  		cmp	ah, 0		; scan code exist?
  7731 000001ED 7402                    		jz	short rdexit	; yes. greek alpha char.
  7732 000001EF B000                    		mov	al, 0		; no. extended key stroke.
  7733                                  					; change it for	compatibility
  7734                                  rdexit:					
  7735 000001F1 C41E[1200]              		les	bx, [ptrsav]
  7736 000001F5 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
  7737                                  					; return keyboard character here
  7738                                  bc_exvec:				
  7739 000001F9 F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7740                                  					; indicate normal termination
  7741 000001FA C3                      		retn
  7742                                  ; ---------------------------------------------------------------------------
  7743                                  
  7744                                  ;************************************************************************
  7745                                  ;*									*
  7746                                  ;*	con_write - console write routine				*
  7747                                  ;*									*
  7748                                  ;*	entry:	es:di -> buffer						*
  7749                                  ;*		cx    =  count						*
  7750                                  ;*									*
  7751                                  ;************************************************************************
  7752                                  
  7753                                  con_writ:
  7754                                  		;jcxz	short bc_exvec
  7755 000001FB E3FC                    		jcxz	bc_exvec	; 19/10/2022
  7756                                  		; 12/12/2022
  7757                                  		;jcxz	cc_ret
  7758                                  con_lp:					
  7759 000001FD 268A05                  		mov	al, [es:di]
  7760 00000200 47                      		inc	di
  7761 00000201 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
  7762                                  					; AL = character to display
  7763 00000203 E2F8                    		loop	con_lp
  7764                                  cc_ret:					
  7765 00000205 F8                      		clc
  7766 00000206 C3                      		retn
  7767                                  
  7768                                  ; =============== S U B	R O U T	I N E =======================================
  7769                                  
  7770                                  ;************************************************************************
  7771                                  ;*									*
  7772                                  ;*	con_flush - flush out keyboard queue				*
  7773                                  ;*									*
  7774                                  ;************************************************************************
  7775                                  
  7776                                  con_flush:
  7777 00000207 C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
  7778                                  flloop:					; while	(charavail()) charread();	
  7779 0000020C B401                    		mov	ah, 1
  7780 0000020E CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
  7781                                  					; Return: ZF clear if character	in buffer
  7782                                  					; AH = scan code, AL = character
  7783                                  					; ZF set if no character in buffer
  7784 00000210 74F3                    		jz	short cc_ret
  7785 00000212 30E4                    		xor	ah, ah
  7786 00000214 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  7787                                  					; Return: AH = scan code, AL = character
  7788 00000216 EBF4                    		jmp	short flloop
  7789                                  
  7790                                  ; ---------------------------------------------------------------------------
  7791                                  
  7792                                  ; 15/10/2022
  7793                                  
  7794                                  ;************************************************************************
  7795                                  ;*									*
  7796                                  ;*	some equates for rom bios printer i/o				*
  7797                                  ;*									*
  7798                                  ;************************************************************************
  7799                                  
  7800                                  ; ibm rom status bits (i don't trust them, neither should you)
  7801                                  ; warning!!! the ibm rom does not return just one bit. it returns a
  7802                                  ; whole slew of bits, only one of which is correct.
  7803                                  
  7804                                  ;notbusystatus	equ 10000000b		; not busy
  7805                                  ;nopaperstatus	equ 00100000b		; no more paper
  7806                                  ;prnselected	equ 00010000b		; printer selected
  7807                                  ;ioerrstatus	equ 00001000b		; some kinda error
  7808                                  ;timeoutstatus	equ 00000001b		; time out.
  7809                                  ;
  7810                                  ;noprinter	equ 00110000b		; no printer attached
  7811                                  
  7812                                  ; 18/03/2019 - Retro DOS v4.0
  7813                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
  7814                                  
  7815                                  ; ---------------------------------------------------------------------------
  7816                                  
  7817                                  ;************************************************************************
  7818                                  ;*									*
  7819                                  ;*	prn_input - return with no error but zero chars read		*
  7820                                  ;*									*
  7821                                  ;*	enter with cx = number of characters requested			*
  7822                                  ;*									*
  7823                                  ;************************************************************************
  7824                                  
  7825                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
  7826 00000218 E8BCFE                  		call	bc_err_cnt	; reset	count to zero
  7827                                  					; (sub reqpkt.count,cx)
  7828                                  		; 12/12/2022
  7829                                  prn_done:
  7830 0000021B F8                      		clc			; but return with carry	reset for no error
  7831 0000021C C3                      		retn
  7832                                  ; ---------------------------------------------------------------------------
  7833                                  
  7834                                  ;************************************************************************
  7835                                  ;*									*
  7836                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
  7837                                  ;*									*
  7838                                  ;*	auxnum has printer number					*
  7839                                  ;*									*
  7840                                  ;************************************************************************
  7841                                  
  7842                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
  7843                                  		;jcxz	short prn_done	; no chars to output
  7844 0000021D E3FC                    		jcxz	prn_done	; 19/10/2022
  7845                                  prn_loop:				
  7846 0000021F BB0200                  		mov	bx, 2		; retry	count
  7847                                  prn_out:				
  7848 00000222 E83600                  		call	prnstat		; get status
  7849 00000225 751D                    		jnz	short TestPrnError
  7850 00000227 268A05                  		mov	al, [es:di]	; get character	to print
  7851 0000022A 30E4                    		xor	ah, ah
  7852 0000022C E82E00                  		call	prnop		; print	to printer
  7853 0000022F 7419                    		jz	short prn_con	; no error - continue
  7854 00000231 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
  7855 00000234 7509                    		jnz	short _prnwf
  7856 00000236 B00C                    		mov	al, 0Ch		; error_I24_gen_failure
  7857 00000238 C606[0C00]00            		mov	byte [altah], 0
  7858 0000023D EB08                    		jmp	short pmessg
  7859                                  ; ---------------------------------------------------------------------------
  7860                                  
  7861                                  _prnwf:					
  7862 0000023F F6C401                  		test	ah, 1		; timeoutstatus
  7863 00000242 7406                    		jz	short prn_con
  7864                                  TestPrnError:				
  7865 00000244 4B                      		dec	bx		; retry	until count is exhausted.
  7866 00000245 75DB                    		jnz	short prn_out
  7867                                  pmessg:					
  7868 00000247 E98DFE                  		jmp	bc_err_cnt
  7869                                  ; ---------------------------------------------------------------------------
  7870                                  
  7871                                  prn_con:				
  7872 0000024A 47                      		inc	di		; point	to next	char and continue
  7873 0000024B E2D2                    		loop	prn_loop
  7874                                  ;prn_done:				
  7875                                  		; 12/12/2022
  7876                                  prn_done2:
  7877                                  		;clc
  7878                                  		; cf=0
  7879 0000024D C3                      		retn
  7880                                  ; ---------------------------------------------------------------------------
  7881                                  
  7882                                  ;************************************************************************
  7883                                  ;*									*
  7884                                  ;*	prn_stat - device driver entry to return printer status		*
  7885                                  ;*									*
  7886                                  ;************************************************************************
  7887                                  
  7888                                  prn_stat:				; 2C7h:251h = 70h:27C1h
  7889 0000024E E80A00                  		call	prnstat		; device in dx
  7890 00000251 75F4                    		jnz	short pmessg
  7891 00000253 F6C480                  		test	ah, 80h		; notbusystatus
  7892                                  		;jnz	short prn_done
  7893                                  		; 12/12/2022
  7894 00000256 75F5                    		jnz	short prn_done2 ; cf=0
  7895 00000258 E96BFF                  		jmp	z_bus_exit
  7896                                  ; ---------------------------------------------------------------------------
  7897                                  
  7898                                  ;************************************************************************
  7899                                  ;*									*
  7900                                  ;*	prnstat - utility function to call ROM BIOS to check		*
  7901                                  ;*		 printer status. Return meaningful error code		*
  7902                                  ;*									*
  7903                                  ;************************************************************************
  7904                                  
  7905                                  prnstat:				
  7906 0000025B B402                    		mov	ah, 2		; set command for get status
  7907                                  					; PRINTER - GET	STATUS
  7908                                  					; DX = printer port (0-3)
  7909                                  					; Return: AH = status
  7910                                  
  7911                                  ; =============== S U B	R O U T	I N E =======================================
  7912                                  
  7913                                  ;************************************************************************
  7914                                  ;*									*
  7915                                  ;*	prnop - call ROM BIOS printer function in ah			*
  7916                                  ;*		return zero true if no error				*
  7917                                  ;*		return zero false if error, al = error code		*
  7918                                  ;*									*
  7919                                  ;************************************************************************
  7920                                  
  7921                                  prnop:	
  7922 0000025D 8B16[2100]              		mov	dx, [auxnum]	; get printer number
  7923 00000261 CD17                    		int	17h		
  7924                                  
  7925                                  	; This check was added to see if this is a case of no
  7926                                  	; printer being installed. This tests checks to be sure
  7927                                  	; the error is noprinter (30h)
  7928                                  
  7929 00000263 50                      		push	ax
  7930 00000264 80E430                  		and	ah, 30h
  7931 00000267 80FC30                  		cmp	ah, 30h		; noprinter
  7932 0000026A 58                      		pop	ax
  7933 0000026B 7506                    		jnz	short NextTest
  7934 0000026D 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
  7935 00000270 80CC08                  		or	ah, 8		; ioerrstatus
  7936                                  
  7937                                  ; examine the status bits to see if an error occurred. unfortunately, several
  7938                                  ; of the bits are set so we have to pick and choose. we must be extremely
  7939                                  ; careful about breaking basic.
  7940                                  
  7941                                  NextTest:				
  7942 00000273 F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
  7943                                  					; i/o error?
  7944 00000276 740A                    		jz	short checknotready ; no, try not ready
  7945                                  
  7946                                  ; at this point, we know we have an error. the converse is not true
  7947                                  
  7948 00000278 B009                    		mov	al, 9		; error_I24_out_of_paper
  7949                                  					; first, assume	out of paper
  7950 0000027A F6C420                  		test	ah, 20h		; out of paper set?
  7951 0000027D 7502                    		jnz	short ret1	; yes, error is	set
  7952 0000027F FEC0                    		inc	al		; return al=10 (i/o error)
  7953                                  ret1:					
  7954 00000281 C3                      		retn
  7955                                  ; ---------------------------------------------------------------------------
  7956                                  
  7957                                  checknotready:				
  7958 00000282 B002                    		mov	al, 2		; assume not-ready
  7959 00000284 F6C401                  		test	ah, 1
  7960 00000287 C3                      		retn
  7961                                  
  7962                                  ; ---------------------------------------------------------------------------
  7963                                  
  7964                                  ;************************************************************************
  7965                                  ;*									*
  7966                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
  7967                                  ;*		     this entry point should never block waiting for	*
  7968                                  ;*		     device to come ready.				*
  7969                                  ;*									*
  7970                                  ;*	inputs:	cx = count, es:di -> buffer				*
  7971                                  ;*	outputs: set the number of bytes transferred in the		*
  7972                                  ;*		 device driver request packet				*
  7973                                  ;*									*
  7974                                  ;************************************************************************
  7975                                  
  7976                                  		; 19/10/2022
  7977                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
  7978 00000288 89FE                    		mov	si, di		; everything is	set for	lodsb
  7979                                  prn_tilbloop:				
  7980 0000028A 51                      		push	cx
  7981 0000028B 53                      		push	bx
  7982 0000028C 30FF                    		xor	bh, bh
  7983 0000028E 8A1E[E704]              		mov	bl, [printdev]
  7984 00000292 D1E3                    		shl	bx, 1
  7985                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
  7986 00000294 8B8F[E804]              		mov	cx, [wait_count+bx]
  7987 00000298 5B                      		pop	bx
  7988                                  prn_getstat:				
  7989 00000299 E8BFFF                  		call	prnstat		; get status
  7990 0000029C 7514                    		jnz	short prn_bperr	; error
  7991 0000029E F6C480                  		test	ah, 80h		; ready	yet?
  7992 000002A1 E1F6                    		loope	prn_getstat	; no, go for more
  7993 000002A3 59                      		pop	cx		; get original count
  7994 000002A4 740D                    		jz	short prn_berr	; still	not ready => done
  7995 000002A6 26                      		es
  7996 000002A7 AC                      		lodsb
  7997                                  		;lods	byte ptr es:[si] ; es
  7998                                  					; lodsb
  7999 000002A8 30E4                    		xor	ah, ah
  8000 000002AA E8B0FF                  		call	prnop
  8001 000002AD 7504                    		jnz	short prn_berr	; error
  8002 000002AF E2D9                    		loop	prn_tilbloop
  8003                                  		; 12/12/2022
  8004                                  		; cf=0 (prnop)
  8005                                  		;clc			; normal no-error return
  8006 000002B1 C3                      		retn			;   from device driver
  8007                                  
  8008                                  ; ---------------------------------------------------------------------------
  8009                                  
  8010                                  prn_bperr:				
  8011 000002B2 59                      		pop	cx		; restore transfer count from stack
  8012                                  prn_berr:				
  8013 000002B3 E921FE                  		jmp	bc_err_cnt
  8014                                  ; ---------------------------------------------------------------------------
  8015                                  
  8016                                  ; 15/10/2022
  8017                                  
  8018                                  ;************************************************************************
  8019                                  ;*									*
  8020                                  ;*	prn_genioctl - get/set printer retry count			*
  8021                                  ;*									*
  8022                                  ;************************************************************************
  8023                                  
  8024                                  ; IOCTL.INC (MSDOS 6.0, 1991)
  8025                                  ; 11/01/2019
  8026                                  
  8027                                  ;********************************;*
  8028                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
  8029                                  ;********************************;*
  8030                                  
  8031                                  ;;RAWIO SUB-FUNCTIONS
  8032                                  ;;get_retry_count equ 65h
  8033                                  ;;set_retry_count equ 45h
  8034                                  
  8035                                  ;;struc A_RETRYCOUNT
  8036                                  ;;.rc_count: resw 1
  8037                                  ;;endstruc
  8038                                  
  8039                                  ;ioc_pc equ 5
  8040                                  
  8041                                  ; ---------------------------------------------------------------------------
  8042                                  
  8043                                  		; 19/10/2022
  8044                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
  8045 000002B6 C43E[1200]              		les	di, [ptrsav]
  8046 000002BA 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8047                                  					; ioc_pc
  8048 000002BF 7403                    		jz	short prnfunc_ok
  8049                                  
  8050                                  prnfuncerr:				
  8051 000002C1 E911FE                  		jmp	bc_cmderr
  8052                                  ; ---------------------------------------------------------------------------
  8053                                  
  8054                                  prnfunc_ok:				
  8055 000002C4 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8056 000002C8 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
  8057 000002CC 30FF                    		xor	bh, bh
  8058                                  		;mov	bl, ds:printdev	; get index into retry counts
  8059 000002CE 8A1E[E704]              		mov	bl, [printdev]
  8060 000002D2 D1E3                    		shl	bx, 1
  8061                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
  8062 000002D4 8B8F[E804]              		mov	cx, [wait_count+bx]
  8063 000002D8 3C65                    		cmp	al, 65h		; get_retry_count
  8064 000002DA 7407                    		jz	short prngetcount
  8065 000002DC 3C45                    		cmp	al, 45h		; set_retry_count
  8066 000002DE 75E1                    		jnz	short prnfuncerr
  8067 000002E0 268B0D                  		mov	cx, [es:di]
  8068                                  prngetcount:				
  8069                                  		;mov	ds:wait_count[bx], cx
  8070 000002E3 898F[E804]              		mov	[wait_count+bx], cx
  8071 000002E7 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
  8072                                  					; return current retry count
  8073                                  		; 12/12/2022
  8074                                  		; cf=0
  8075                                  		;clc
  8076 000002EA C3                      		retn
  8077                                  ; ---------------------------------------------------------------------------
  8078                                  
  8079                                  ;************************************************************************
  8080                                  ;*									*
  8081                                  ;*  prn_ioctl_query							*
  8082                                  ;*									*
  8083                                  ;*  Added for 5.00							*
  8084                                  ;************************************************************************
  8085                                  
  8086                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
  8087 000002EB C43E[1200]              		les	di, [ptrsav]
  8088 000002EF 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8089                                  					; ioc_pc
  8090 000002F4 750D                    		jnz	short prn_query_err
  8091 000002F6 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8092 000002FA 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
  8093 000002FC 7404                    		jz	short IOCtlSupported
  8094 000002FE 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
  8095 00000300 7501                    		jnz	short prn_query_err
  8096                                  IOCtlSupported:	
  8097                                  		; 12/12/2022
  8098                                  		; cf=0		
  8099                                  		;clc
  8100 00000302 C3                      		retn
  8101                                  ; ---------------------------------------------------------------------------
  8102                                  
  8103                                  prn_query_err:
  8104                                  		; 12/12/2022				
  8105                                  		;stc
  8106 00000303 E9CFFD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
  8107                                  ; ---------------------------------------------------------------------------
  8108                                  
  8109                                  ;************************************************************************
  8110                                  ;*									*
  8111                                  ;*	aux port driver code -- "aux" == "com1"				*
  8112                                  ;*									*
  8113                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
  8114                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
  8115                                  ;*									*
  8116                                  ;************************************************************************
  8117                                  
  8118                                  ;	values in ah, requesting function of int 14h in rom bios
  8119                                  
  8120                                  ;auxfunc_send	 equ	1	;transmit
  8121                                  ;auxfunc_receive equ	2	;read
  8122                                  ;auxfunc_status	 equ	3	;request status
  8123                                  
  8124                                  ;	error flags, reported by int 14h, reported in ah:
  8125                                  
  8126                                  ;flag_data_ready equ	01h	;data ready
  8127                                  ;flag_overrun	 equ	02h	;overrun error
  8128                                  ;flag_parity	 equ	04h	;parity error
  8129                                  ;flag_frame	 equ	08h	;framing error
  8130                                  ;flag_break	 equ	10h	;break detect
  8131                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
  8132                                  ;flag_timeout	 equ	80h	;timeout
  8133                                  
  8134                                  ;	these flags reported in al:
  8135                                  
  8136                                  ;flag_cts	 equ	10h	;clear to send
  8137                                  ;flag_dsr	 equ	20h	;data set ready
  8138                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
  8139                                  
  8140                                  ; ---------------------------------------------------------------------------
  8141                                  
  8142                                  ;************************************************************************
  8143                                  ;*									*
  8144                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
  8145                                  ;*		   at es:di						*
  8146                                  ;*									*
  8147                                  ;************************************************************************
  8148                                  
  8149                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
  8150                                  		;jcxz	short exvec2
  8151 00000306 E311                    		jcxz	exvec2		; 19/10/2022
  8152 00000308 E87700                  		call	getbx		; put address of auxbuf	in bx
  8153 0000030B 30C0                    		xor	al, al
  8154 0000030D 8607                    		xchg	al, [bx]
  8155 0000030F 08C0                    		or	al, al
  8156 00000311 7503                    		jnz	short aux2
  8157                                  aux1:					
  8158 00000313 E80500                  		call	auxin		; get character	from port
  8159                                  					; won't return if error
  8160                                  aux2:					
  8161 00000316 AA                      		stosb
  8162 00000317 E2FA                    		loop	aux1		; if more characters, go around	again
  8163                                  exvec2:					
  8164 00000319 F8                      		clc			; all done, successful exit
  8165                                  auxin_retn:	; 18/12/2022
  8166 0000031A C3                      		retn
  8167                                  ; ---------------------------------------------------------------------------
  8168                                  
  8169                                  ;************************************************************************
  8170                                  ;*									*
  8171                                  ;*	auxin - call rom bios to read character from aux port		*
  8172                                  ;*		if error occurs, map the error and return one		*
  8173                                  ;*		level up to device driver exit code, setting		*
  8174                                  ;*		the number of bytes transferred appropriately		*
  8175                                  ;*									*
  8176                                  ;************************************************************************
  8177                                  
  8178                                  auxin:					
  8179 0000031B B402                    		mov	ah, 2		; auxfunc_receive
  8180 0000031D E83C00                  		call	auxop
  8181 00000320 F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
  8182                                  		;jnz	short arbad	; skip if any error bits set
  8183                                  		;retn
  8184                                  		; 25/06/2023 (BugFix)
  8185 00000323 74F5                    		jz	short auxin_retn
  8186                                  ; ---------------------------------------------------------------------------
  8187                                  
  8188                                  arbad:					
  8189 00000325 58                      		pop	ax		; remove return	address	(near call)
  8190 00000326 30C0                    		xor	al, al
  8191 00000328 0CB0                    		or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
  8192 0000032A E9AAFD                  		jmp	bc_err_cnt
  8193                                  
  8194                                  ; ---------------------------------------------------------------------------
  8195                                  
  8196                                  ;************************************************************************
  8197                                  ;*									*
  8198                                  ;*	aux_rdnd - non-destructive aux port read			*
  8199                                  ;*									*
  8200                                  ;************************************************************************
  8201                                  
  8202                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
  8203 0000032D E85200                  		call	getbx
  8204 00000330 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
  8205 00000332 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
  8206 00000334 7511                    		jnz	short auxdrx	; then return character
  8207 00000336 E82100                  		call	auxstat		; if not, get status of	aux device
  8208 00000339 F6C401                  		test	ah, 1		; flag_data_ready - test data ready
  8209 0000033C 740C                    		jz	short auxbus	; then device is busy (not ready)
  8210 0000033E A820                    		test	al, 20h		; flag_dsr - test data set ready
  8211 00000340 7408                    		jz	short auxbus	; then device is busy (not ready)
  8212 00000342 E8D6FF                  		call	auxin		; else aux is ready, get character
  8213 00000345 8807                    		mov	[bx], al
  8214                                  auxdrx:					
  8215 00000347 E9A7FE                  		jmp	rdexit		; return busy status
  8216                                  ; ---------------------------------------------------------------------------
  8217                                  
  8218                                  auxbus:					
  8219 0000034A E979FE                  		jmp	z_bus_exit
  8220                                  ; ---------------------------------------------------------------------------
  8221                                  
  8222                                  ;************************************************************************
  8223                                  ;*									*
  8224                                  ;*	aux_wrst - return aux port write status				*
  8225                                  ;*									*
  8226                                  ;************************************************************************
  8227                                  
  8228                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
  8229 0000034D E80A00                  		call	auxstat		; get status of	aux in ax
  8230 00000350 A820                    		test	al, 20h		; test data set	ready
  8231 00000352 74F6                    		jz	short auxbus	; then device is busy (not ready)
  8232 00000354 F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
  8233 00000357 74F1                    		jz	short auxbus	; then device is busy (not ready)
  8234                                  		; 12/12/2022
  8235                                  		; cf=0	; (test instruction resets cf)
  8236                                  		;clc
  8237 00000359 C3                      		retn
  8238                                  ; ---------------------------------------------------------------------------
  8239                                  
  8240                                  ;************************************************************************
  8241                                  ;*									*
  8242                                  ;*	auxstat - call rom bios to determine aux port status		*
  8243                                  ;*									*
  8244                                  ;*	exit:	ax = status						*
  8245                                  ;*		dx = [auxnum]						*
  8246                                  ;*									*
  8247                                  ;************************************************************************
  8248                                  
  8249                                  auxstat:				
  8250 0000035A B403                    		mov	ah, 3		; auxfunc_status
  8251                                  
  8252                                  		; fall into auxop
  8253                                  
  8254                                  ; =============== S U B	R O U T	I N E =======================================
  8255                                  
  8256                                  ;************************************************************************
  8257                                  ;*									*
  8258                                  ;*	auxop - perform rom-biox aux port interrupt			*
  8259                                  ;*									*
  8260                                  ;*	entry:	ah = int 14h function number				*
  8261                                  ;*	exit:	ax = results						*
  8262                                  ;*		dx = [auxnum]						*
  8263                                  ;*									*
  8264                                  ;************************************************************************
  8265                                  
  8266                                  auxop:		; proc near		
  8267 0000035C 8B16[2100]              		mov	dx, [auxnum]	; ah=function code
  8268                                  					; 0=init, 1=send, 2=receive, 3=status
  8269                                  					; get port number
  8270 00000360 CD14                    		int	14h		; SERIAL I/O - GET USART STATUS
  8271                                  					; DX = port number (0-3)
  8272                                  					; Return: AX = port status code
  8273 00000362 C3                      		retn
  8274                                  
  8275                                  ; ---------------------------------------------------------------------------
  8276                                  
  8277                                  ;************************************************************************
  8278                                  ;*									*
  8279                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
  8280                                  ;*		   auxbuf [auxnum] to zero				*
  8281                                  ;*									*
  8282                                  ;*	cas - shouldn't this code call the rom bios input function	*
  8283                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
  8284                                  ;*	      pending serial input queue if there's a tsr like MODE	*
  8285                                  ;*	      which is providing interrupt-buffering of aux port?	*
  8286                                  ;*									*
  8287                                  ;************************************************************************
  8288                                  
  8289                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
  8290 00000363 E81C00                  		call	getbx		; flush	aux input buffer
  8291 00000366 C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
  8292                                  					; zero out buffer
  8293                                  		;clc			; all done, successful return
  8294                                  		; 12/12/2022
  8295                                  		; cf=0 ('add' instruction in 'getbx')
  8296 00000369 C3                      		retn
  8297                                  ; ---------------------------------------------------------------------------
  8298                                  
  8299                                  ;************************************************************************
  8300                                  ;*									*
  8301                                  ;*	aux_writ - write to aux device					*
  8302                                  ;*									*
  8303                                  ;************************************************************************
  8304                                  
  8305                                  aux_writ:				; 2C7h:374h = 70h:28E4h
  8306                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
  8307 0000036A E3AD                    		jcxz	exvec2		; 19/10/2022
  8308                                  aux_loop:				
  8309 0000036C 268A05                  		mov	al, [es:di]	; get character	to be written
  8310                                  					; move di pointer to next character
  8311 0000036F 47                      		inc	di
  8312 00000370 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
  8313 00000372 E8E7FF                  		call	auxop		; send character over aux port
  8314 00000375 F6C480                  		test	ah, 80h		; check	for error
  8315 00000378 7405                    		jz	short awok	; then no error
  8316 0000037A B00A                    		mov	al, 10		; else indicate	write fault
  8317 0000037C E958FD                  		jmp	bc_err_cnt	; call error routines
  8318                                  ; ---------------------------------------------------------------------------
  8319                                  
  8320                                  awok:					
  8321 0000037F E2EB                    		loop	aux_loop	; if cx	is non-zero,
  8322                                  					; still	more character to print
  8323                                  		;clc			; all done, successful return
  8324                                  		; 12/12/2022
  8325                                  		; cf=0 (test instruction above)	
  8326 00000381 C3                      		retn
  8327                                  
  8328                                  ; =============== S U B	R O U T	I N E =======================================
  8329                                  
  8330                                  ;************************************************************************
  8331                                  ;*									*
  8332                                  ;*	getbx - return bx -> single byte input buffer for		*
  8333                                  ;*		selected aux port ([auxnum])				*
  8334                                  ;*									*
  8335                                  ;************************************************************************
  8336                                  
  8337                                  getbx:	
  8338 00000382 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
  8339                                  					; for selected aux port	([auxnum])
  8340                                  		;add	bx, offset auxbuf
  8341 00000386 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
  8342                                  		; 12/12/2022
  8343                                  		; cf=0 (if [uaxnum] is valid number) 
  8344 0000038A C3                      		retn
  8345                                  
  8346                                  ; ---------------------------------------------------------------------------
  8347                                  
  8348                                  ; 15/10/2022
  8349                                  
  8350                                  ;----------------------------------------------------------------
  8351                                  ;								:
  8352                                  ;		    clock device driver 			:
  8353                                  ;								:
  8354                                  ;								:
  8355                                  ;   this file contains the clock device driver. 		:
  8356                                  ;								:
  8357                                  ;   the routines in this files are:				:
  8358                                  ;								:
  8359                                  ;	routine 		function			:
  8360                                  ;	------- 		--------			:
  8361                                  ;	tim_writ		set the current time		:
  8362                                  ;	tim_read		read the current time		:
  8363                                  ;	time_to_ticks		convert time to corresponding	:
  8364                                  ;				  number of clock ticks 	:
  8365                                  ;								:
  8366                                  ; the clock ticks at the rate of:				:
  8367                                  ;								:
  8368                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
  8369                                  ; see each routine for information on the use.			:
  8370                                  ;								:
  8371                                  ;----------------------------------------------------------------
  8372                                  
  8373                                  ; convert time to ticks
  8374                                  ; input : time in cx and dx
  8375                                  ; ticks returned in cx:dx
  8376                                  
  8377                                  ;19/07/2019
  8378                                  ;09/03/2019
  8379                                  
  8380                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
  8381                                  
  8382                                  ; first convert from hour,min,sec,hund. to
  8383                                  ; total number of 100th of seconds
  8384                                  
  8385 0000038B B03C                    		mov	al, 60
  8386 0000038D F6E5                    		mul	ch		; hours	to minutes
  8387 0000038F B500                    		mov	ch, 0
  8388 00000391 01C8                    		add	ax, cx		; total	minutes
  8389 00000393 B97017                  		mov	cx, 6000	; 60*100
  8390 00000396 89D3                    		mov	bx, dx		; get out of the way of	the multiply
  8391 00000398 F7E1                    		mul	cx		; convert to 1/100 sec
  8392 0000039A 89C1                    		mov	cx, ax
  8393 0000039C B064                    		mov	al, 100
  8394 0000039E F6E7                    		mul	bh		; convert seconds to 1/100 sec
  8395 000003A0 01C1                    		add	cx, ax		; combine seconds with hours and min
  8396 000003A2 83D200                  		adc	dx, 0		; ripple carry
  8397 000003A5 B700                    		mov	bh, 0
  8398 000003A7 01D9                    		add	cx, bx		; combine 1/100	sec
  8399 000003A9 83D200                  		adc	dx, 0
  8400                                  
  8401                                  	; dx:cx is time in 1/100 sec
  8402                                  
  8403 000003AC 92                      		xchg	ax, dx
  8404 000003AD 91                      		xchg	ax, cx		; now time is in cx:ax
  8405 000003AE BB0BE9                  		mov	bx, 59659
  8406 000003B1 F7E3                    		mul	bx		; multiply low half
  8407 000003B3 87D1                    		xchg	dx, cx
  8408 000003B5 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
  8409 000003B6 F7E3                    		mul	bx		; multiply high	half
  8410 000003B8 01C8                    		add	ax, cx		; combine overlapping products
  8411 000003BA 83D200                  		adc	dx, 0
  8412 000003BD 92                      		xchg	ax, dx		; ax:dx=time*59659
  8413 000003BE BB0500                  		mov	bx, 5
  8414 000003C1 F6F3                    		div	bl		; divide high half by 5
  8415 000003C3 88C1                    		mov	cl, al
  8416 000003C5 B500                    		mov	ch, 0
  8417 000003C7 88E0                    		mov	al, ah		; remainder of divide-by-5
  8418 000003C9 98                      		cbw
  8419 000003CA 92                      		xchg	ax, dx		; use it to extend low half
  8420 000003CB F7F3                    		div	bx		; divide low half by 5
  8421 000003CD 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
  8422 000003CF CB                      		retf			; far return
  8423                                  
  8424                                  ; ---------------------------------------------------------------------------
  8425                                  
  8426                                  ; 17/10/2022
  8427                                  ; 15/10/2022
  8428                                  
  8429                                  ;--------------------------------------------------------------------
  8430                                  ;
  8431                                  ; tim_writ sets the current time
  8432                                  ;
  8433                                  ; on entry es:[di] has the current time:
  8434                                  ;
  8435                                  ;	number of days since 1-1-80	(word)
  8436                                  ;	minutes (0-59)			(byte)
  8437                                  ;	hours (0-23)			(byte)
  8438                                  ;	hundredths of seconds (0-99)	(byte)
  8439                                  ;	seconds (0-59)			(byte)
  8440                                  ;
  8441                                  ; each number has been checked for the correct range.
  8442                                  ;
  8443                                  ;	NOTE: Any changes in this routine probably require corresponding
  8444                                  ;	changes in the version that is built with the power manager driver.
  8445                                  ;	See ptime.asm.
  8446                                  ;
  8447                                  ;--------------------------------------------------------------------
  8448                                  
  8449                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
  8450 000003D0 268B05                  		mov	ax, [es:di]
  8451 000003D3 50                      		push	ax		; daycnt. we need to set this at the very
  8452                                  					; end to avoid tick windows.
  8453 000003D4 803E[F304]00            		cmp	byte [havecmosclock], 0
  8454                                  		;cmp	ds:havecmosclock, 0
  8455 000003D9 7426                    		jz	short no_cmos_1
  8456 000003DB 268A4503                		mov	al, [es:di+3]	; near indirect	calls
  8457                                  					; get binary hours
  8458                                  					; convert to bcd
  8459 000003DF FF1E[0205]              		call	far [bintobcd]
  8460                                  		;call	ds:bintobcd	; call far [bintobcd]
  8461 000003E3 88C5                    		mov	ch, al		; ch = bcd hours
  8462 000003E5 268A4502                		mov	al, [es:di+2]	; get binary minutes
  8463 000003E9 FF1E[0205]              		call	far [bintobcd]
  8464                                  		;call	ds:bintobcd	; convert to bcd
  8465 000003ED 88C1                    		mov	cl, al		; cl = bcd minutes
  8466 000003EF 268A4505                		mov	al, [es:di+5]	; get binary seconds
  8467 000003F3 FF1E[0205]              		call	far [bintobcd]
  8468                                  		;call	ds:bintobcd
  8469 000003F7 88C6                    		mov	dh, al		; dh = bcd seconds
  8470 000003F9 B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
  8471 000003FB FA                      		cli
  8472 000003FC B403                    		mov	ah, 3
  8473 000003FE CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8474                                  					; CH = hours in	BCD, CL	= minutes in BCD
  8475                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
  8476                                  					; Return: CMOS clock set
  8477 00000400 FB                      		sti
  8478                                  no_cmos_1:				
  8479 00000401 268B4D02                		mov	cx, [es:di+2]
  8480 00000405 268B5504                		mov	dx, [es:di+4]
  8481                                  		; 17/10/2022
  8482 00000409 FF1E[E206]              		call	far [ttticks]
  8483                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
  8484                                  					; convert time to ticks
  8485                                  					; cx:dx	now has	time in	ticks
  8486 0000040D FA                      		cli			; turn off timer
  8487 0000040E B401                    		mov	ah, 1
  8488 00000410 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  8489                                  					; CX:DX	= clock	count
  8490                                  					; Return: time of day set
  8491                                  		;pop	ds:daycnt
  8492 00000412 8F06[F004]              		pop	word [daycnt]
  8493 00000416 FB                      		sti
  8494                                  		;cmp	ds:havecmosclock, 0
  8495 00000417 803E[F304]00            		cmp	byte [havecmosclock], 0
  8496 0000041C 740A                    		jz	short no_cmos_2
  8497 0000041E FF1E[0605]              		call	far [daycnttoday]
  8498                                  		;call	ds:daycnttoday	; call far [daycnttoday]
  8499                                  					; convert to bcd format
  8500 00000422 FA                      		cli
  8501 00000423 B405                    		mov	ah, 5
  8502 00000425 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8503                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
  8504                                  					; CH = century (19h or 20h)
  8505                                  					; Return: CMOS clock set
  8506 00000427 FB                      		sti
  8507                                  no_cmos_2:
  8508                                  		; 12/12/2022
  8509                                  		; cf=0				
  8510                                  		;clc
  8511 00000428 C3                      		retn
  8512                                  
  8513                                  ; ---------------------------------------------------------------------------
  8514                                  
  8515                                  ; 15/10/2022
  8516                                  
  8517                                  ;----------------------------------------------------------------------------
  8518                                  ; gettime reads date and time
  8519                                  ; and returns the following information:
  8520                                  ;
  8521                                  ;	es:[di]  =count of days since 1-1-80
  8522                                  ;	es:[di+2]=hours
  8523                                  ;	es:[di+3]=minutes
  8524                                  ;	es:[di+4]=seconds
  8525                                  ;	es:[di+5]=hundredths of seconds
  8526                                  ;
  8527                                  ;	NOTE:  Any changes in this routine probably require corresponding
  8528                                  ;	changes in the version that is built with the power manager driver.
  8529                                  ;	See ptime.asm.
  8530                                  ;----------------------------------------------------------------------------
  8531                                  
  8532                                  tim_read:				; 2C7h:435h = 70h:29A5h
  8533 00000429 E84E00                  		call	GetTickCnt
  8534 0000042C 8B36[F004]              		mov	si, [daycnt]
  8535                                  
  8536                                  ; we now need to convert the time in tick to the time in 100th of
  8537                                  ; seconds. the relation between tick and seconds is:
  8538                                  ;
  8539                                  ;		 65,536 seconds
  8540                                  ;	       ----------------
  8541                                  ;		1,193,180 tick
  8542                                  ;
  8543                                  ; to get to 100th of second we need to multiply by 100. the equation is:
  8544                                  ;
  8545                                  ;	ticks from clock  * 65,536 * 100
  8546                                  ;      --------------------------------- = time in 100th of seconds
  8547                                  ;		1,193,180
  8548                                  ;
  8549                                  ; fortunately this formula simplifies to:
  8550                                  ;
  8551                                  ;	ticks from clock * 5 * 65,536
  8552                                  ;      --------------------------------- = time in 100th of seconds
  8553                                  ;		59,659
  8554                                  ;
  8555                                  ; the calculation is done by first multipling tick by 5. next we divide by
  8556                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
  8557                                  ; my 16 bits to the left.
  8558                                  ;
  8559                                  ; start with ticks in cx:dx
  8560                                  ; multiply by 5
  8561                                  
  8562 00000430 89C8                    		mov	ax, cx
  8563 00000432 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
  8564                                  					; multiply by 5
  8565 00000434 D1E2                    		shl	dx, 1
  8566 00000436 D1D1                    		rcl	cx, 1		; times	2
  8567 00000438 D1E2                    		shl	dx, 1
  8568 0000043A D1D1                    		rcl	cx, 1		; times	4
  8569 0000043C 01DA                    		add	dx, bx
  8570 0000043E 11C8                    		adc	ax, cx		; times	5
  8571 00000440 92                      		xchg	ax, dx
  8572                                  
  8573                                  ; now have ticks * 5 in	dx:ax
  8574                                  ; we now need to multiply by 65536 and divide by 59659 d.
  8575                                  
  8576 00000441 B90BE9                  		mov	cx, 59659	; get divisor
  8577 00000444 F7F1                    		div	cx		; dx now has remainder
  8578                                  					; ax has high word of final quotient
  8579 00000446 89C3                    		mov	bx, ax		; put high word	in safe	place
  8580 00000448 31C0                    		xor	ax, ax		; this is the multiply by 65536
  8581 0000044A F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
  8582                                  
  8583                                  ; rounding based on the	remainder may be added here
  8584                                  ; the result in	bx:ax is time in 1/100 second.
  8585                                  
  8586 0000044C 89DA                    		mov	dx, bx		
  8587 0000044E B9C800                  		mov	cx, 200		;extract 1/100's
  8588                                  
  8589                                  ; division by 200 is necessary to ensure no overflow--max result
  8590                                  ; is number of seconds in a day/2 = 43200.
  8591                                  
  8592 00000451 F7F1                    		div	cx
  8593 00000453 80FA64                  		cmp	dl, 100		; remainder over 100?
  8594 00000456 7203                    		jb	short noadj
  8595 00000458 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
  8596                                  noadj:					
  8597 0000045B F5                      		cmc			; if we	subtracted 100,	carry is now set
  8598 0000045C 88D3                    		mov	bl, dl		; save 1/100's
  8599                                  
  8600                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
  8601                                  ; by two, shifting a one in if the remainder had exceeded 100.
  8602                                  
  8603 0000045E D1D0                    		rcl	ax, 1		
  8604 00000460 B200                    		mov	dl, 0
  8605 00000462 D1D2                    		rcl	dx, 1
  8606 00000464 B93C00                  		mov	cx, 60		; divide out seconds
  8607 00000467 F7F1                    		div	cx
  8608 00000469 88D7                    		mov	bh, dl		; save the seconds
  8609 0000046B F6F1                    		div	cl		; break	into hours and minutes
  8610 0000046D 86C4                    		xchg	al, ah
  8611                                  
  8612                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
  8613                                  
  8614 0000046F 50                      		push	ax
  8615 00000470 89F0                    		mov	ax, si		; daycnt
  8616 00000472 AB                      		stosw
  8617 00000473 58                      		pop	ax
  8618 00000474 AB                      		stosw
  8619 00000475 89D8                    		mov	ax, bx
  8620 00000477 AB                      		stosw
  8621 00000478 F8                      		clc
  8622 00000479 C3                      		retn
  8623                                  
  8624                                  ; =============== S U B	R O U T	I N E =======================================
  8625                                  
  8626                                  ; 15/10/2022
  8627                                  
  8628                                  ;----------------------------------------------------------------------------
  8629                                  ;
  8630                                  ; procedure : GetTickCnt
  8631                                  ;
  8632                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
  8633                                  ;		of rollover [except when power management driver is in use]. 
  8634                                  ;		Uses the following logic for updating Daycnt
  8635                                  ;
  8636                                  ;		if ( rollover ) {
  8637                                  ;			if ( t_switch )
  8638                                  ;				daycnt++ ;
  8639                                  ;			else
  8640                                  ;				daycnt += rollover ;
  8641                                  ;		}
  8642                                  ;
  8643                                  ; USES : AX
  8644                                  ;
  8645                                  ; RETURNS : CX:DX - tick count
  8646                                  ; MODIFIES : daycnt
  8647                                  ;
  8648                                  ;----------------------------------------------------------------------------
  8649                                  
  8650                                  		; 17/10/2022
  8651                                  GetTickCnt:	
  8652 0000047A 30E4                    		xor	ah, ah
  8653 0000047C CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  8654                                  					; Return: CX:DX	= clock	count
  8655                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  8656                                  					; midnight
  8657                                  					; Otherwise, AL	> 0
  8658 0000047E 803E[F204]00            		cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
  8659 00000483 7507                    		jnz	short inc_case	; old method assumes  that Int 1Ah returns rollover flag
  8660 00000485 30E4                    		xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
  8661                                  					; and not flag
  8662 00000487 0106[F004]              		add	[daycnt], ax
  8663 0000048B C3                      		retn
  8664                                  ; ---------------------------------------------------------------------------
  8665                                  
  8666                                  inc_case:				
  8667 0000048C 08C0                    		or	al, al
  8668 0000048E 7404                    		jz	short no_rollover
  8669 00000490 FF06[F004]              		inc	word [daycnt]
  8670                                  no_rollover:				
  8671 00000494 C3                      		retn
  8672                                  
  8673                                  ;----------------------------------------------------------------------------
  8674                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
  8675                                  ;----------------------------------------------------------------------------
  8676                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  8677                                  ; 09/03/2019 - Retro DOS v4.0
  8678                                  
  8679                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
  8680                                  ; 26/05/2018 - Retro DOS v3.0
  8681                                  ; 23/03/2018 - Retro DOS v2.0
  8682                                  
  8683                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
  8684                                  
  8685                                  ;struc BPB_TYPE
  8686                                  ;.SECSIZE:	resw 1
  8687                                  ;.SECALL:	resb 1
  8688                                  ;.RESNUM:	resw 1
  8689                                  ;.FATNUM:	resb 1
  8690                                  ;.DIRNUM:	resw 1
  8691                                  ;.SECNUM:	resw 1
  8692                                  ;.FATID:	resb 1
  8693                                  ;.FATSIZE:	resw 1
  8694                                  ;.SLIM:		resw 1
  8695                                  ;.HLIM:		resw 1
  8696                                  ;.HIDDEN:	resw 1
  8697                                  ;.size:
  8698                                  ;endstruc
  8699                                  
  8700                                  ;-----------------------------------------------------------------
  8701                                  ;	disk interface routines
  8702                                  ;-----------------------------------------------------------------
  8703                                  
  8704                                  ; device attribute bits:
  8705                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
  8706                                  
  8707                                  ;MAXERR		equ	5
  8708                                  ;MAX_HD_FMT_ERR	equ	2
  8709                                  
  8710                                  ;LSTDRV	equ 504h
  8711                                  
  8712                                  ; some floppies do not have changeline. as a result, media-check would
  8713                                  ; normally return i-don't-know, the dos would continually reread the fat and
  8714                                  ; discard cached data. we optimize this by implementing a logical door-latch:
  8715                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
  8716                                  ; the time of the last successful disk operation and compare it with the current
  8717                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
  8718                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
  8719                                  ; since we cannot trust the timer to be always available, we record the number 
  8720                                  ; of media checks that have occurred when no apparent time has elapsed. while
  8721                                  ; this number is < a given threshold, we say no change. when it exceeds that
  8722                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
  8723                                  ; the time of last successful access, if we see that time has passed too,
  8724                                  ; we reset the counter.
  8725                                  
  8726                                  accessmax	equ	5
  8727                                  
  8728                                  ; due to various bogosities, we need to continually adjust what the head
  8729                                  ; settle time is.  the following algorithm is used:
  8730                                  ;
  8731                                  ;   get the current head settle value.
  8732                                  ;   if it is 0, then
  8733                                  ;	set slow = 15
  8734                                  ;   else
  8735                                  ;	set slow = value
  8736                                  ;   ...
  8737                                  ;*********************************************
  8738                                  ;************ old algorithm ******************
  8739                                  ;*   if we are seeking and writing then
  8740                                  ;*	 use slow
  8741                                  ;*   else
  8742                                  ;*	 use fast
  8743                                  ;*********************************************
  8744                                  ;*********** ibm's requested logic ***********
  8745                                  ;   if we are seeking and writing and not on an at then
  8746                                  ;	use slow
  8747                                  ;   else
  8748                                  ;	use fast
  8749                                  ;   ...
  8750                                  ;   restore current head settle value
  8751                                  ;
  8752                                  ;
  8753                                  ;---------------------------------------
  8754                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
  8755                                  					; it on after handling config.sys file as a
  8756                                  					; default value, if multrk_flag = multrk_off1.
  8757                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
  8758                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
  8759                                  
  8760                                  ; close data segment, open Bios_Code segment
  8761                                  
  8762                                  ; 15/10/2022
  8763                                  
  8764                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
  8765                                  
  8766                                  ;-----------------------------------------------------------------
  8767                                  ;	command jump table
  8768                                  ;-----------------------------------------------------------------
  8769                                  
  8770 00000495 00                      		db 0
  8771                                  
  8772                                  ; 11/12/2022
  8773                                  %if 0
  8774                                  
  8775                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
  8776                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
  8777                                  		dw 1742h		; dsk_init
  8778                                  		dw 4EBh			; media_chk
  8779                                  		dw 592h			; get_bpb
  8780                                  		dw 0D5h			; bc_cmderr
  8781                                  		dw 857h			; dsk_read
  8782                                  		dw 83Dh			; x_bus_exit
  8783                                  		dw 558h			; ret_carry_clear
  8784                                  		dw 558h			; ret_carry_clear
  8785                                  		dw 849h			; dsk_writ
  8786                                  		dw 841h			; dsk_writv
  8787                                  		dw 558h			; ret_carry_clear
  8788                                  		dw 558h			; ret_carry_clear
  8789                                  		dw 0D5h			; bc_cmderr
  8790                                  		dw 80Ah			; dsk_open
  8791                                  		dw 81Ah			; dsk_close
  8792                                  		dw 831h			; dsk_rem
  8793                                  		dw 558h			; ret_carry_clear
  8794                                  		dw 558h			; ret_carry_clear
  8795                                  		dw 558h			; ret_carry_clear
  8796                                  		dw 0C6Bh		; do_generic_ioctl
  8797                                  		dw 558h			; ret_carry_clear
  8798                                  		dw 558h			; ret_carry_clear
  8799                                  		dw 558h			; ret_carry_clear
  8800                                  		dw 1124h		; ioctl_getown
  8801                                  		dw 1142h		; ioctl_setown
  8802                                  		dw 129Ah		; ioctl_support_query
  8803                                  
  8804                                  ;dtbl_siz equ $-dsktbl
  8805                                  
  8806                                  %endif
  8807                                  		; 11/12/2022
  8808 00000496 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
  8809 00000497 [E816]                  		dw dsk_init
  8810 00000499 [DF04]                  		dw media_chk
  8811 0000049B [8505]                  		dw get_bpb
  8812 0000049D [D500]                  		dw bc_cmderr
  8813 0000049F [3608]                  		dw dsk_read
  8814 000004A1 [1C08]                  		dw x_bus_exit
  8815 000004A3 [4B05]                  		dw ret_carry_clear
  8816 000004A5 [4B05]                  		dw ret_carry_clear
  8817 000004A7 [2808]                  		dw dsk_writ
  8818 000004A9 [2008]                  		dw dsk_writv
  8819 000004AB [4B05]                  		dw ret_carry_clear
  8820 000004AD [4B05]                  		dw ret_carry_clear
  8821 000004AF [D500]                  		dw bc_cmderr
  8822 000004B1 [EC07]                  		dw dsk_open
  8823 000004B3 [FB07]                  		dw dsk_close
  8824 000004B5 [1108]                  		dw dsk_rem
  8825 000004B7 [4B05]                  		dw ret_carry_clear
  8826 000004B9 [4B05]                  		dw ret_carry_clear
  8827 000004BB [4B05]                  		dw ret_carry_clear
  8828 000004BD [450C]                  		dw do_generic_ioctl
  8829 000004BF [4B05]                  		dw ret_carry_clear
  8830 000004C1 [4B05]                  		dw ret_carry_clear
  8831 000004C3 [4B05]                  		dw ret_carry_clear
  8832 000004C5 [EB10]                  		dw ioctl_getown
  8833 000004C7 [0811]                  		dw ioctl_setown
  8834 000004C9 [5712]                  		dw ioctl_support_query
  8835                                  
  8836                                  dtbl_siz equ $-dsktbl
  8837                                  
  8838                                  ; =============== S U B	R O U T	I N E =======================================
  8839                                  
  8840                                  ; ---------------------------------------------------------------------------
  8841                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
  8842                                  ; the one that belongs to the drive specified. carry is set if none exists
  8843                                  ; for the drive. Pointer is returned in es:[di]
  8844                                  ;
  8845                                  ;  AL contains the logical drive number.
  8846                                  ; ---------------------------------------------------------------------------
  8847                                  
  8848                                  SetDrive:	
  8849                                  		;les	di, ds:start_bds ; Point es:di to first bds	
  8850 000004CB C43E[1901]              		les	di, [start_bds] ; 19/10/2022
  8851                                  X_Scan_Loop:				
  8852 000004CF 26384505                		cmp	[es:di+5], al	
  8853 000004D3 7409                    		jz	short X_SetDrv
  8854 000004D5 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
  8855 000004D8 83FFFF                  		cmp	di, 0FFFFh
  8856 000004DB 75F2                    		jnz	short X_Scan_Loop
  8857 000004DD F9                      		stc
  8858                                  X_SetDrv:				
  8859 000004DE C3                      		retn
  8860                                  
  8861                                  ; ---------------------------------------------------------------------------
  8862                                  
  8863                                  ; 15/10/2022
  8864                                  
  8865                                  ; ---------------------------------------------------------------------
  8866                                  ; if id is f9, have a 96tpi disk else
  8867                                  ; if bit 2 is 0 then media is not removable and could not have changed
  8868                                  ;  otherwise if within 2 secs of last disk operation media could not
  8869                                  ;    have changed, otherwise dont know if media has changed
  8870                                  ; ---------------------------------------------------------------------
  8871                                  
  8872                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
  8873 000004DF E8E9FF                  		call	SetDrive
  8874 000004E2 BE0100                  		mov	si, 1
  8875 000004E5 26F6452401              		test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
  8876                                  					; fchanged_by_format
  8877 000004EA 7416                    		jz	short WeAreNotFakingIt
  8878                                  		; 12/12/2022
  8879 000004EC 26806524FE              		and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
  8880                                  		;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
  8881                                  					; ~fchanged_by_format ;	reset flag
  8882 000004F1 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  8883                                  					; Ensure that we ask the rom if media has changed
  8884 000004F6 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  8885                                  					; fnon_removable
  8886 000004FB 740C                    		jz	short wehaveafloppy
  8887 000004FD BEFFFF                  		mov	si, 0FFFFh	; Indicate media changed
  8888 00000500 EB2C                    		jmp	short Media_Done ; Media_Done
  8889                                  ; ---------------------------------------------------------------------------
  8890                                  
  8891                                  WeAreNotFakingIt:
  8892                                  		;test	byte [es:di+BDS.flags], fnon_removable			
  8893 00000502 26F6452301              		test	byte [es:di+23h], 1
  8894 00000507 7525                    		jnz	short Media_Done
  8895                                  wehaveafloppy:				
  8896 00000509 31F6                    		xor	si, si		; Presume "I don't know"
  8897                                  
  8898                                  		; If we have a floppy with changeline support, we ask the ROM
  8899                                  		; to determine if media has changed. We do not perform the
  8900                                  		; 2 second check for these drives.
  8901                                  
  8902 0000050B 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
  8903 00000510 740A                    		jz	short mChk_NoChangeLine	; Brif not
  8904 00000512 E89E12                  		call	mediacheck	;  Call	into removable routine
  8905 00000515 7236                    		jb	short err_exitj
  8906 00000517 E8F613                  		call	haschange
  8907 0000051A 7512                    		jnz	short Media_Done
  8908                                  mChk_NoChangeLine:
  8909                                  		; If we come here, we have a floppy with no changeline support
  8910                                  			
  8911 0000051C BE0100                  		mov	si, 1		; Presume no change
  8912 0000051F A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
  8913 00000522 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
  8914                                  					; Is drive of last access the same?
  8915 00000526 7505                    		jnz	short Media_Unk	; No, then "i don't know"
  8916 00000528 E82800                  		call	Check_Time_Of_Access
  8917 0000052B EB01                    		jmp	short Media_Done
  8918                                  ; ---------------------------------------------------------------------------
  8919                                  
  8920                                  Media_Unk:				
  8921 0000052D 4E                      		dec	si		; ; Return "I don't know"
  8922                                  
  8923                                  		; SI now contains the correct value for media change.
  8924                                  		; Clean up the left overs
  8925                                  Media_Done:	
  8926                                  		; 19/10/2022			
  8927 0000052E 06                      		push	es
  8928 0000052F C41E[1200]              		les	bx, [ptrsav]
  8929 00000533 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
  8930 00000537 07                      		pop	es
  8931 00000538 09F6                    		or	si, si
  8932 0000053A 790F                    		jns	short ret_carry_clear ;	volidok
  8933 0000053C 803E[7700]00            		cmp	byte [fhave96], 0
  8934 00000541 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
  8935 00000543 E85613                  		call	media_set_vid
  8936                                  mChk1_NoChangeLine:			
  8937 00000546 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  8938                                  					; Make sure we ask rom for media check
  8939                                  ret_carry_clear:			
  8940 0000054B F8                      		clc			; volidok
  8941 0000054C C3                      		retn
  8942                                  ; ---------------------------------------------------------------------------
  8943                                  
  8944                                  err_exitj:				
  8945 0000054D E88006                  		call	maperror	; guaranteed to	set carry
  8946                                  ret81:					
  8947 00000550 B481                    		mov	ah, 81h		; return error status
  8948 00000552 C3                      		retn			; return with carry set
  8949                                  
  8950                                  ; =============== S U B	R O U T	I N E =======================================
  8951                                  
  8952                                  ; ---------------------------------------------------------------------------
  8953                                  ; perform a check on the time passed since the last access for this physical
  8954                                  ; drive.
  8955                                  ; we are accessing the same drive. if the time of last successful access was
  8956                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
  8957                                  ; returns in si:
  8958                                  ;	0 - if time of last access was >= 2 seconds
  8959                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
  8960                                  ; registers affected ax,cx,dx, flags.
  8961                                  ;
  8962                                  ;	assume es:di -> bds, ds->Bios_Data
  8963                                  ; ---------------------------------------------------------------------------
  8964                                  
  8965                                  		; 19/10/2022
  8966                                  Check_Time_Of_Access:
  8967 00000553 BE0100                  		mov	si, 1		; presume no change.
  8968 00000556 E821FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
  8969 00000559 268B4547                		mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
  8970                                  					; get stored time
  8971 0000055D 29C2                    		sub	dx, ax
  8972 0000055F 268B4549                		mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
  8973 00000563 19C1                    		sbb	cx, ax
  8974 00000565 751A                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
  8975 00000567 09D2                    		or	dx, dx		; time must pass
  8976 00000569 7511                    		jnz	short timepassed ; yes, examine max value
  8977 0000056B FE06[1D01]              		inc	byte [accesscount]
  8978 0000056F 803E[1D01]05            		cmp	byte [accesscount], 5 
  8979                                  					; if count is less than threshold, ok
  8980 00000574 720C                    		jb	short timecheck_ret
  8981 00000576 FE0E[1D01]              		dec	byte [accesscount] ; don't let the count wrap
  8982 0000057A EB05                    		jmp	short timecheck_unk ; "i don't know" if media changed
  8983                                  ; ---------------------------------------------------------------------------
  8984                                  
  8985                                  timepassed:				
  8986 0000057C 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
  8987                                  					; min elapsed time? (2 seconds)
  8988 0000057F 7601                    		jbe	short timecheck_ret ; yes, presume no change
  8989                                  
  8990                                  		; everything indicates that we do not know what has happened.
  8991                                  timecheck_unk:				
  8992 00000581 4E                      		dec	si		; presume i don't know
  8993                                  timecheck_ret:				
  8994 00000582 C3                      		retn
  8995                                  
  8996                                  ; ---------------------------------------------------------------------------
  8997                                  ; 15/10/2022
  8998                                  Err_Exitj2:
  8999 00000583 EBC8                    		jmp	short err_exitj
  9000                                  
  9001                                  ; ---------------------------------------------------------------------------
  9002                                  
  9003                                  ; 15/10/2022
  9004                                  
  9005                                  ; ==========================================================================
  9006                                  ; Build a valid bpb for the disk in the drive.
  9007                                  ; ==========================================================================
  9008                                  
  9009                                  		; 19/10/2022
  9010                                  get_bpb:				; 2C7h:592h = 70h:2B02h
  9011 00000585 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
  9012 00000588 E840FF                  		call	SetDrive	; get the correct bds for the drive
  9013 0000058B 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9014                                  					; fnon_removable
  9015 00000590 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
  9016                                  
  9017                                  		; let's set the default value for volid,vol_serial,
  9018                                  		; filesys_id in bds table
  9019                                  
  9020 00000592 E83700                  		call	clear_ids
  9021                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
  9022 00000595 C606[0A05]01            		mov	byte [set_id_flag], 1
  9023 0000059A E85A00                  		call	GetBp		; build	a bpb if necessary
  9024 0000059D 72B1                    		jb	short ret81
  9025                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
  9026 0000059F 803E[0A05]02            		cmp	byte [set_id_flag], 2
  9027                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
  9028 000005A4 C606[0A05]00            		mov	byte [set_id_flag], 0
  9029 000005A9 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
  9030                                  					; otherwise, conventional boot record
  9031                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
  9032 000005AB 803E[7700]00            		cmp	byte [fhave96], 0
  9033 000005B0 7403                    		jz	short already_gotbpb ; brif not
  9034 000005B2 E86113                  		call	set_volume_id
  9035                                  already_gotbpb:				
  9036 000005B5 83C706                  		add	di, 6		; BDS.BPB
  9037                                  					; return the bpb from the current bds
  9038                                  
  9039                                  ;		 fall into setptrsav, es:di -> result
  9040                                  
  9041                                  ; ---------------------------------------------------------------------------
  9042                                  
  9043                                  ; 15/10/2022
  9044                                  
  9045                                  ; ==========================================================================
  9046                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
  9047                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
  9048                                  ;Note that this works in most cases because most pointers are in Bios_Data.
  9049                                  ;It fails, for instance, when we install an external drive using driver.sys
  9050                                  ;because then the BDS segment is no longer Bios_Data. 
  9051                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
  9052                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
  9053                                  ;restored before returning to the caller.
  9054                                  ; ==========================================================================
  9055                                  
  9056                                  		; 19/10/2022
  9057                                  SetPtrSav:	; return point for dsk_init				
  9058 000005B8 8CC1                    		mov	cx, es		; save es
  9059                                  		;les	bx, ds:ptrsav
  9060 000005BA C41E[1200]              		les	bx, [ptrsav]
  9061 000005BE 2688670D                		mov	[es:bx+0Dh], ah	; [es:bx+media]
  9062 000005C2 26897F12                		mov	[es:bx+12h], di	; [es:bx+count]
  9063 000005C6 26894F14                		mov	[es:bx+14h], cx	; [es:bx+count+2]
  9064 000005CA F8                      		clc
  9065 000005CB C3                      		retn
  9066                                  
  9067                                  ; =============== S U B	R O U T	I N E =======================================
  9068                                  
  9069                                  ; 15/10/2022
  9070                                  
  9071                                  ; -----------------------------------------------------
  9072                                  ; clear ids in bds table. only applied for floppies.
  9073                                  ;input:  es:di -> bds table
  9074                                  ;	assumes ds: -> Bios_Data
  9075                                  ;output: volid set to "NO NAME    "
  9076                                  ;	 vol_serial set to 0.
  9077                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
  9078                                  ;	   depending on the flag fatsize in bds.
  9079                                  ;
  9080                                  ;	trashes si, cx
  9081                                  ; -----------------------------------------------------
  9082                                  
  9083                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
  9084                                  ;size_of_EXT_SYSTEM_ID equ 8
  9085                                  
  9086                                  clear_ids:		
  9087 000005CC 57                      		push	di
  9088 000005CD 31C9                    		xor	cx, cx		; no serial number
  9089 000005CF 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9090 000005D3 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9091                                  
  9092                                  		; BUGBUG - there's a lot in common here and with
  9093                                  		; mov_media_ids.. see if we can save some space by
  9094                                  		; merging them... jgl
  9095                                  
  9096                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9097                                  		; 10/12/2022
  9098 000005D7 B10B                    		mov	cl, 11 ; cx = 11		
  9099                                  
  9100                                  		;mov	si, offset vol_no_name ; "NO NAME    "
  9101 000005D9 BE[1D05]                		mov	si, vol_no_name	; 19/10/2022
  9102 000005DC 83C74B                  		add	di, 75		; BDS.volid
  9103 000005DF F3A4                    		rep movsb
  9104                                  		;test	byte [es:di+BDS.fatsiz], fbig
  9105 000005E1 26F6451F40              		test	byte [es:di+1Fh], 40h
  9106                                  		;mov	si, offset fat_16_id ; "FAT16	"
  9107 000005E6 BE[1405]                		mov	si, fat_16_id	; 19/10/2022
  9108 000005E9 7503                    		jnz	short ci_bigfat
  9109                                  		;mov	si, offset fat_12_id ; "FAT12	"
  9110 000005EB BE[0B05]                		mov	si, fat_12_id	 ; 19/10/2022
  9111                                  ci_bigfat:				
  9112                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9113                                  		; 10/12/2022
  9114 000005EE B108                    		mov	cl, 8 ; cx = 8 
  9115 000005F0 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9116                                  					; filesys_id field
  9117 000005F3 F3A4                    		rep movsb
  9118 000005F5 5F                      		pop	di		; restore bds pointer
  9119 000005F6 C3                      		retn
  9120                                  
  9121                                  ; =============== S U B	R O U T	I N E =======================================
  9122                                  
  9123                                  ; 15/10/2022
  9124                                  
  9125                                  ; ---------------------------------------------------------------------------
  9126                                  ;	getbp - return bpb from the drive specified by the bds.
  9127                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
  9128                                  ;	    note that we never come here for fixed disks.
  9129                                  ;	    for all other cases,
  9130                                  ;	      - it reads boot sector to pull out the bpb
  9131                                  ;	      - if no valid bpb is found, it then reads the fat sector,
  9132                                  ;		to get the fat id byte to build the bpb from there.
  9133                                  ;
  9134                                  ;   inputs:	es:di point to correct bds.
  9135                                  ;
  9136                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
  9137                                  ;		carry set, and al=7 if invalid disk.
  9138                                  ;		carry set and error code in al if other error.
  9139                                  ;		if failed to recognize the boot record, then will set the
  9140                                  ;		set_id_flag to 0.
  9141                                  ;		this routine will only work for a floppy diskette.
  9142                                  ;		     for a fixed disk, it will just return.
  9143                                  ;
  9144                                  ;	****** Note: getbp is a clone of getbp which uses the newer
  9145                                  ;	  segment definitions. It should be migrated towards.
  9146                                  ;	   now es:di has the bds, ds: has Bios_Data
  9147                                  ; ---------------------------------------------------------------------------
  9148                                  
  9149                                  GetBp:		; if returning fake bpb then return bpb as is.
  9150                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable		
  9151 000005F7 26F6452305              		test	byte [es:di+23h], 5
  9152 000005FC 7403                    		jz	short getbp1	; getbp1
  9153 000005FE E99500                  		jmp	getret_exit
  9154                                  ; ---------------------------------------------------------------------------
  9155                                  
  9156                                  getbp1:					
  9157 00000601 51                      		push	cx
  9158 00000602 52                      		push	dx
  9159 00000603 53                      		push	bx
  9160                                  
  9161                                  		; attempt to read in boot sector and determine bpb.
  9162                                  		; we assume that the 2.x and greater dos disks all
  9163                                  		; have a valid boot sector.
  9164                                  
  9165 00000604 E8A400                  		call	readbootsec
  9166 00000607 7209                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
  9167 00000609 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
  9168 0000060B 7508                    		jnz	short dofatbpb
  9169 0000060D E8F000                  		call	movbpb		; move bpb into	registers
  9170 00000610 EB57                    		jmp	short Has1
  9171                                  ; ---------------------------------------------------------------------------
  9172                                  
  9173                                  getbp_err_ret_brdg:			
  9174 00000612 E98200                  		jmp	getbp_err_ret
  9175                                  ; ---------------------------------------------------------------------------
  9176                                  
  9177                                  		; we have a 1.x diskette. In this case read in the fat ID byte
  9178                                  		; and fill in bpb from there.
  9179                                  dofatbpb:				
  9180 00000615 E85401                  		call	readfat		; puts media descriptor	byte in	ah
  9181 00000618 72F8                    		jb	short getbp_err_ret_brdg
  9182                                  		;cmp	ds:fhave96, 0	;  changeline support available?
  9183 0000061A 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
  9184 0000061F 7403                    		jz	short bpb_nochangeline ; brif not
  9185 00000621 E88D12                  		call	hidensity	; may not return! May add sp, 2	and
  9186                                  					; jump to has1!!!!!! or	has720K
  9187                                  bpb_nochangeline:		; test for a valid 3.5" medium			
  9188 00000624 26807D2202              		cmp	byte [es:di+22h], 2	; [es:di+BDS.formfactor]
  9189                                  					; ffSmall
  9190 00000629 7515                    		jnz	short is_floppy
  9191 0000062B 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
  9192 0000062E 7571                    		jnz	short got_unknown_medium
  9193                                  Has720K:				
  9194                                  		;mov	bx, offset sm92 ; pointer to correct bpb
  9195 00000630 BB[DE04]                		mov	bx, sm92	; 19/10/2022
  9196                                  
  9197                                  		; es points to segment of bds. the following should be modified
  9198                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
  9199                                  		; driver.sys is loaded since the bds is inside the driver.sys.
  9200                                  
  9201                                  		; 10/12/2022
  9202                                  		;mov	al, [bx+0]	; [bx+bpbtype.spf]
  9203                                  		; 21/12/2022
  9204 00000633 8A07                    		mov	al, [bx]
  9205 00000635 8B4F03                  		mov	cx, [bx+3]	; [bx+bpbtype.csec]
  9206 00000638 8B5705                  		mov	dx, [bx+5]	; [bx+bpbtype.spau]
  9207 0000063B 8B5F01                  		mov	bx, [bx+1]	; [bx+bpbtype.spt]
  9208                                  		; 19/10/2022 - Temporary !
  9209                                  		;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
  9210                                  		;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
  9211                                  		;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
  9212                                  		;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]	
  9213                                  
  9214 0000063E EB29                    		jmp	short Has1
  9215                                  ; ---------------------------------------------------------------------------
  9216                                  
  9217                                  is_floppy:			; must be a 5.25" floppy if we come here
  9218 00000640 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
  9219 00000643 725C                    		jb	short got_unknown_medium
  9220 00000645 B001                    		mov	al, 1		; set number of	fat sectors
  9221 00000647 BB0840                  		mov	bx, 16392	; 64*256+8
  9222                                  					; set dir entries and sector max
  9223 0000064A B94001                  		mov	cx, 320		; 40*8
  9224                                  					; set size of drive
  9225 0000064D BA0101                  		mov	dx, 257		; 01*256+1
  9226                                  					; set head limit and sec/all unit
  9227 00000650 F6C402                  		test	ah, 2		; test for 8 or	9 sector
  9228 00000653 7507                    		jnz	short has8	; nz = has 8 sectors
  9229 00000655 FEC0                    		inc	al		; inc number of	fat sectors
  9230 00000657 FEC3                    		inc	bl		; inc sector max
  9231                                  		;add	cx, 40		; increase size	(to 360)
  9232                                  		; 18/12/2022
  9233 00000659 80C128                  		add	cl, 40
  9234                                  has8:					
  9235 0000065C F6C401                  		test	ah, 1		; test for 1 or	2 heads
  9236 0000065F 7408                    		jz	short Has1	; jz = 1 head
  9237 00000661 01C9                    		add	cx, cx		; double size of disk
  9238 00000663 B770                    		mov	bh, 112		; increase number of directory entries
  9239 00000665 FEC6                    		inc	dh		; inc sec/all unit
  9240 00000667 FEC2                    		inc	dl		; inc head limit
  9241                                  Has1:					
  9242 00000669 26887508                		mov	[es:di+8], dh	; [es:di+BDS.secperclus]
  9243 0000066D 26887D0C                		mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
  9244 00000671 26894D0E                		mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
  9245 00000675 26886510                		mov	[es:di+10h], ah	; [es:di+BDS.media]
  9246 00000679 26884511                		mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
  9247 0000067D 26885D13                		mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
  9248 00000681 26885515                		mov	[es:di+15h], dl	; [es:di+BDS.heads]
  9249                                  
  9250                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
  9251                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
  9252                                  		; to 0 since this code is for floppies
  9253                                  
  9254                                  		; 18/12/2022
  9255                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
  9256                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
  9257                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
  9258                                  		; 18/12/2022
  9259 00000685 29C9                    		sub	cx, cx
  9260 00000687 26894D19                		mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
  9261 0000068B 26894D17                		mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
  9262 0000068F 26894D1D                		mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
  9263                                  getret:					
  9264 00000693 5B                      		pop	bx
  9265 00000694 5A                      		pop	dx
  9266 00000695 59                      		pop	cx
  9267                                  getret_exit:				
  9268 00000696 C3                      		retn
  9269                                  ; ---------------------------------------------------------------------------
  9270                                  
  9271                                  getbp_err_ret:	; before doing anything else, set set_id_flag	to 0.			
  9272                                  		;mov	ds:set_id_flag,	0
  9273                                  		; 19/10/2022
  9274 00000697 C606[0A05]00            		mov	byte [set_id_flag], 0
  9275 0000069C E83105                  		call	maperror
  9276 0000069F EBF2                    		jmp	short getret
  9277                                  ; ---------------------------------------------------------------------------
  9278                                  
  9279                                  		; we have a 3.5" diskette for	which we cannot	build a	bpb.
  9280                                  		; we do	not assume any type of bpb for this medium.
  9281                                  
  9282                                  got_unknown_medium:			
  9283                                  		;mov	ds:set_id_flag,	0 
  9284 000006A1 C606[0A05]00            		mov	byte [set_id_flag], 0
  9285 000006A6 B007                    		mov	al, 7
  9286 000006A8 F9                      		stc
  9287 000006A9 EBE8                    		jmp	short getret
  9288                                  
  9289                                  ; =============== S U B	R O U T	I N E =======================================
  9290                                  
  9291                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
  9292                                  
  9293                                  ; ----------------------------------------------------------------
  9294                                  ; read in the boot sector. set carry if error in reading sector.
  9295                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
  9296                                  ;
  9297                                  ;	assumes es:di -> bds, ds-> Bios_Data
  9298                                  ; ----------------------------------------------------------------
  9299                                  
  9300                                  ; 10/03/2019 - Retro DOS v4.0
  9301                                  
  9302                                  readbootsec:	
  9303 000006AB B600                    		mov	dh, 0		; head 0
  9304 000006AD B90100                  		mov	cx, 1		; cylinder 0, sector 1
  9305 000006B0 E8C600                  		call	read_sector
  9306 000006B3 724A                    		jb	short err_ret
  9307 000006B5 31DB                    		xor	bx, bx		; assume valid boot sector
  9308                                  
  9309                                  		; put a sanity check for the boot sector in here to detect
  9310                                  		; boot sectors that do not have valid bpbs. we examine the
  9311                                  		; first two bytes - they must contain a long jump (69h) or a
  9312                                  		; short jump (EBh) followed by a nop (90h), or a short jump
  9313                                  		; (E9h). if this test is passed, we further check by examining
  9314                                  		; the signature at the end of the boot sector for the word
  9315                                  		; AA55h. if the signature is not present, we examine the media
  9316                                  		; descriptor byte to see if it is valid. for dos 3.3, this
  9317                                  		; logic is modified a little bit. we are not going to check
  9318                                  		; signature. instead we are going to sanity check the media
  9319                                  		; byte in bpb regardless of the validity of signature. this is
  9320                                  		; to save the already developed commercial products that have
  9321                                  		; good jump instruction and signature but with the false bpb
  9322                                  		; informations
  9323                                  
  9324                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
  9325                                  
  9326                                  		; 19/10/2022
  9327 000006B7 803E[4E01]69            		cmp	byte [disksector], 69h ; is it a direct jump?
  9328 000006BC 7415                    		jz	short check_bpb_mediabyte ; don't need to find a nop
  9329 000006BE 803E[4E01]E9            		cmp	byte [disksector], 0E9h ; dos 2.0 jump?
  9330 000006C3 740E                    		jz	short check_bpb_mediabyte ; no need for	nop
  9331 000006C5 803E[4E01]EB            		cmp	byte [disksector], 0EBh ; how about a short jump?
  9332 000006CA 7531                    		jnz	short invalidbootsec
  9333 000006CC 803E[5001]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
  9334 000006D1 752A                    		jnz	short invalidbootsec
  9335                                  
  9336                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9337                                  ;
  9338                                  ;; 10/03/2019
  9339                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
  9340                                  ;;
  9341                                  ;; Don't have to perform the following signature check since
  9342                                  ;; we need to check the media byte even with the good signatured diskette.
  9343                                  ;;
  9344                                  ;;check_signature:
  9345                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
  9346                                  ;;							 ; disk or 1.x media.
  9347                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
  9348                                  ;;					       ; may need some special handling
  9349                                  
  9350                                  ; check for non-ibm disks which do not have the signature AA55h at the
  9351                                  ; end of the boot sector, but still have a valid boot sector. this is done
  9352                                  ; by examining the media descriptor in the boot sector.
  9353                                  
  9354                                  		; 19/10/2022
  9355                                  check_bpb_mediabyte:			
  9356 000006D3 A0[6301]                		mov	al, [disksector+15h]
  9357                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9358 000006D6 24F0                    		and	al, 0F0h
  9359 000006D8 3CF0                    		cmp	al, 0F0h	; allow	for strange media
  9360 000006DA 7521                    		jnz	short invalidbootsec
  9361                                  
  9362                                  ; there were some (apparently a lot of them) diskettes that had been formatted
  9363                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
  9364                                  ; sectors. these are specifically diskettes that were formatted in drives
  9365                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
  9366                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
  9367                                  ; in dos. in order to support them, we have to introduce a "hack" that will
  9368                                  ; help our build bpb routine to recognise these specific cases, and to
  9369                                  ; set up out copy of the bpb accordingly.
  9370                                  ; we do this by checking to see if the boot sector is off a diskette that
  9371                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
  9372                                  ; sec/clus field to 1. if not, we carry on as normal.
  9373                                  
  9374                                  checksinglesided:
  9375 000006DC A0[6301]                		mov	al, [disksector+15h]
  9376 000006DF 3CF0                    		cmp	al, 0F0h
  9377 000006E1 741B                    		jz	short gooddsk
  9378 000006E3 A801                    		test	al, 1
  9379 000006E5 7517                    		jnz	short gooddsk
  9380 000006E7 813E[5601]332E          		cmp	word [disksector+8], 2E33h ; "3."
  9381 000006ED 7507                    		jnz	short mustbeearlier
  9382 000006EF 803E[5801]32            		cmp	byte [disksector+0Ah], 32h ; "2"
  9383 000006F4 7308                    		jnb	short gooddsk
  9384                                  
  9385                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
  9386                                  
  9387                                  mustbeearlier:				
  9388 000006F6 C606[5B01]01            		mov	byte [disksector+0Dh], 1
  9389                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9390 000006FB EB01                    		jmp	short gooddsk
  9391                                  ; ---------------------------------------------------------------------------
  9392                                  
  9393                                  invalidbootsec:				
  9394 000006FD 43                      		inc	bx		; indicate that boot sector invalid
  9395                                  		; 10/12/2022
  9396                                  movbpb_ret:
  9397                                  gooddsk:				
  9398 000006FE F8                      		clc
  9399                                  err_ret:
  9400 000006FF C3                      		retn
  9401                                  ; ---------------------------------------------------------------------------
  9402                                  
  9403                                  		; 10/12/2022
  9404                                  ;err_ret:				
  9405                                  		;retn
  9406                                  
  9407                                  ; =============== S U B	R O U T	I N E =======================================
  9408                                  
  9409                                  ; 15/10/2022
  9410                                  ; ---------------------------------------------------------------------------
  9411                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
  9412                                  ; getbp routine at has1
  9413                                  ;
  9414                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
  9415                                  ; serial number, volume label, file system id in bds according to
  9416                                  ; the boot record.  after that, this routine will set the set_id_flag to 2
  9417                                  ; to signal that volume label is set already from the extended boot record
  9418                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
  9419                                  ; the volume label in the root directory.)
  9420                                  ; ---------------------------------------------------------------------------
  9421                                  
  9422                                  ; 10/03/2019 - Retro DOS v4.0
  9423                                  
  9424                                  		; 19/10/2022
  9425                                  movbpb:	
  9426 00000700 8A36[5B01]              		mov	dh, [disksector+0Dh]
  9427                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9428                                  					; sectors per unit
  9429 00000704 8A3E[5F01]              		mov	bh, [disksector+11h]
  9430                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
  9431                                  					; number of directory entries
  9432 00000708 8B0E[6101]              		mov	cx, [disksector+13h]
  9433                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
  9434                                  					; size of drive
  9435 0000070C 8A26[6301]              		mov	ah, [disksector+15h]
  9436                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9437                                  					; media	descriptor
  9438 00000710 A0[6401]                		mov	al, [disksector+16h];
  9439                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
  9440                                  					; number of fat	sectors
  9441 00000713 8A1E[6601]              		mov	bl, [disksector+18h]
  9442                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
  9443                                  					; sectors per track
  9444 00000717 8A16[6801]              		mov	dl, [disksector+1Ah]
  9445                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
  9446                                  					; number of heads
  9447 0000071B 803E[0A05]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
  9448 00000720 75DC                    		jnz	short movbpb_ret
  9449 00000722 E81200                  		call	mov_media_ids
  9450 00000725 7205                    		jb	short movbpb_conv ; conventional boot record?
  9451 00000727 C606[0A05]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
  9452                                  movbpb_conv:				
  9453 0000072C 803E[7700]01            		cmp	byte [fhave96], 1
  9454 00000731 75CB                    		jnz	short movbpb_ret
  9455 00000733 E8D411                  		call	resetchanged	; reset	flags in bds to	not fchanged.
  9456                                  		; 10/12/2022
  9457                                  		; cf = 0
  9458                                  ;movbpb_ret:				
  9459                                  		;clc
  9460 00000736 C3                      		retn
  9461                                  
  9462                                  ; =============== S U B	R O U T	I N E =======================================
  9463                                  
  9464                                  ;copy the boot_serial number, volume id, and filesystem id from the
  9465                                  ;***extended boot record*** in ds:disksector to the bds table pointed
  9466                                  ;by es:di.
  9467                                  
  9468                                  ;in.) es:di -> bds
  9469                                  ;     ds:disksector = valid extended boot record.
  9470                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
  9471                                  ;      the boot record information.
  9472                                  ;     carry flag set if not an extended bpb.
  9473                                  ;     all registers saved except the flag.
  9474                                  
  9475                                  		; 19/10/2022
  9476                                  mov_media_ids:		
  9477 00000737 803E[7401]29            		cmp	byte [disksector+26h], 29h
  9478                                  					; [disksector+EXT_BOOT.SIG],
  9479                                  					; EXT_BOOT_SIGNATURE
  9480 0000073C 752C                    		jnz	short mmi_not_ext
  9481 0000073E 51                      		push	cx
  9482 0000073F 8B0E[7501]              		mov	cx, [disksector+27h]
  9483                                  					; [disksector+EXT_BOOT.SERIAL]
  9484 00000743 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9485 00000747 8B0E[7701]              		mov	cx, [disksector+29h]
  9486                                  					; [disksector+EXT_BOOT.SERIAL+2]
  9487 0000074B 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9488 0000074F 57                      		push	di
  9489 00000750 56                      		push	si
  9490 00000751 B90B00                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9491 00000754 BE[7901]                		mov	si, disksector+2Bh
  9492                                  		;mov	si, (offset disksector+2Bh) ;
  9493                                  					; disksector+EXT_BOOT.VOL_LABEL
  9494 00000757 83C74B                  		add	di, 75		; BDS.volid
  9495 0000075A F3A4                    		rep movsb
  9496                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9497                                  		; 10/12/2022
  9498 0000075C B108                    		mov	cl, 8 ; cx = 8
  9499 0000075E BE[8401]                		mov	si, disksector+36h
  9500                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
  9501 00000761 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9502 00000764 F3A4                    		rep movsb
  9503 00000766 5E                      		pop	si
  9504 00000767 5F                      		pop	di
  9505 00000768 59                      		pop	cx
  9506                                  		; 10/12/2022
  9507                                  		; cf = 0
  9508                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
  9509                                  				; (20/09/2022)
  9510 00000769 C3                      		retn
  9511                                  ; ---------------------------------------------------------------------------
  9512                                  
  9513                                  mmi_not_ext:				
  9514 0000076A F9                      		stc
  9515 0000076B C3                      		retn
  9516                                  
  9517                                  ; =============== S U B	R O U T	I N E =======================================
  9518                                  
  9519                                  ; 15/10/2022
  9520                                  ; --------------------------------------------------------------
  9521                                  ; read in the fat sector and get the media byte from it.
  9522                                  ; input : es:di -> bds
  9523                                  ; output:
  9524                                  ;	  carry set if an error occurs, ax contains error code.
  9525                                  ;	  otherwise, ah contains media byte on exit
  9526                                  ; --------------------------------------------------------------
  9527                                  
  9528                                  readfat:	
  9529                                  		;mov	dh, 0
  9530                                  		; 10/12/2022
  9531 0000076C 30F6                    		xor	dh, dh
  9532 0000076E B90200                  		mov	cx, 2		; head 0
  9533                                  					; cylinder 0, sector 2
  9534 00000771 E80500                  		call	read_sector
  9535 00000774 7202                    		jb	short bad_fat_ret
  9536 00000776 8A27                    		mov	ah, [bx]	; media	byte
  9537                                  bad_fat_ret:				
  9538 00000778 C3                      		retn
  9539                                  
  9540                                  ; =============== S U B	R O U T	I N E =======================================
  9541                                  
  9542                                  ; 15/10/2022
  9543                                  
  9544                                  ; ---------------------------------------------------------------------------
  9545                                  ; read a single sector into the temp buffer.
  9546                                  ; perform three retries in case of error.
  9547                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
  9548                                  ;		cx has sector and cylinder
  9549                                  ;		dh has head
  9550                                  ;		es:di has bds
  9551                                  ;		ds has Bios_Data
  9552                                  ;
  9553                                  ;   outputs:	carry clear
  9554                                  ;		    Bios_Data:bx point to sector
  9555                                  ;		       (note: some callers assume location of buffer)
  9556                                  ;
  9557                                  ;		carry set
  9558                                  ;		    ax has rom error code
  9559                                  ;
  9560                                  ; register bp is preserved.
  9561                                  ; ---------------------------------------------------------------------------
  9562                                  
  9563                                  ; 10/03/2019 - Retro DOS v4.0
  9564                                  
  9565                                  		; 19/10/2022
  9566                                  read_sector:	
  9567 00000779 55                      		push	bp
  9568 0000077A BD0300                  		mov	bp, 3		; make 3 attempts
  9569 0000077D 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
  9570 00000781 BB[4E01]                		mov	bx, disksector	; get es:bx to point to	buffer
  9571                                  rd_ret:					
  9572 00000784 06                      		push	es
  9573 00000785 1E                      		push	ds
  9574 00000786 07                      		pop	es
  9575 00000787 B80102                  		mov	ax, 201h
  9576 0000078A CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9577                                  					; AL = number of sectors to read, CH = track, CL = sector
  9578                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9579                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9580 0000078C 07                      		pop	es
  9581 0000078D 734A                    		jnb	short okret2
  9582                                  rd_rty:					
  9583 0000078F E87604                  		call	again		; reset	disk, decrement	bp, preserve ax
  9584 00000792 7442                    		jz	short err_rd_ret
  9585 00000794 26F6452301              		test	byte [es:di+23h], 1
  9586                                  		;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
  9587                                  					; fnon_removable
  9588 00000799 75E9                    		jnz	short rd_ret
  9589 0000079B 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9590 000007A0 7510                    		jnz	short rd_skip1_dpt
  9591 000007A2 50                      		push	ax
  9592 000007A3 1E                      		push	ds		; for retry, set the head settle time to 0Fh
  9593 000007A4 C536[2D01]              		lds	si, [dpt]
  9594                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9595                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
  9596                                  		;			; NORMSETTLE
  9597                                  		; 12/12/2022
  9598 000007A8 B00F                    		mov	al, 15
  9599 000007AA 864409                  		xchg	al, [si+9]
  9600                                  		; 
  9601 000007AD 1F                      		pop	ds
  9602 000007AE A2[2A01]                		mov	[save_head_sttl], al
  9603 000007B1 58                      		pop	ax
  9604                                  rd_skip1_dpt:				
  9605 000007B2 06                      		push	es
  9606 000007B3 1E                      		push	ds
  9607 000007B4 07                      		pop	es
  9608 000007B5 B80102                  		mov	ax, 201h
  9609 000007B8 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9610                                  					; AL = number of sectors to read, CH = track, CL = sector
  9611                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9612                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9613 000007BA 07                      		pop	es
  9614 000007BB 9C                      		pushf
  9615 000007BC 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9616 000007C1 750E                    		jnz	short rd_skip2_dpt
  9617 000007C3 50                      		push	ax
  9618 000007C4 A0[2A01]                		mov	al, [save_head_sttl]
  9619 000007C7 1E                      		push	ds
  9620 000007C8 C536[2D01]              		lds	si, [dpt]
  9621 000007CC 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9622 000007CF 1F                      		pop	ds
  9623 000007D0 58                      		pop	ax
  9624                                  rd_skip2_dpt:				
  9625 000007D1 9D                      		popf
  9626 000007D2 7305                    		jnb	short okret2
  9627 000007D4 EBB9                    		jmp	short rd_rty
  9628                                  ; ---------------------------------------------------------------------------
  9629                                  
  9630                                  err_rd_ret:				
  9631 000007D6 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
  9632                                  					; return error
  9633 000007D8 F9                      		stc
  9634                                  
  9635                                  ; update information pertaining to last drive accessed, time of access, last
  9636                                  ; track accessed in that drive.
  9637                                  
  9638                                  okret2:					
  9639 000007D9 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
  9640 000007DD 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
  9641 000007E1 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
  9642                                  					; save last track accessed on this drive
  9643                                  					; preserve flags in case error occurred
  9644 000007E5 9C                      		pushf
  9645 000007E6 E8FF03                  		call	set_tim
  9646 000007E9 9D                      		popf			; restore flags
  9647 000007EA 5D                      		pop	bp
  9648 000007EB C3                      		retn
  9649                                  
  9650                                  ;----------------------------------------------------------------------------
  9651                                  ;	disk open/close routines
  9652                                  ;----------------------------------------------------------------------------
  9653                                  
  9654                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
  9655 000007EC 803E[7700]00            		cmp	byte [fhave96], 0
  9656 000007F1 7407                    		jz	short dsk_open_exit ; done if no changeline support
  9657 000007F3 E8D5FC                  		call	SetDrive	; get bds for drive
  9658 000007F6 26FF4520                		inc	word [es:di+20h] ; [es:di+BDS.opcnt]
  9659                                  dsk_open_exit:	
  9660                                  		; 10/12/2022
  9661                                  		; cf = 0			
  9662                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9663                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9664 000007FA C3                      		retn
  9665                                  ; ---------------------------------------------------------------------------
  9666                                  
  9667                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
  9668 000007FB 803E[7700]00            		cmp	byte [fhave96], 0
  9669 00000800 740E                    		jz	short exitjx	; done if no changeline	support
  9670 00000802 E8C6FC                  		call	SetDrive	; get bds for drive
  9671 00000805 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
  9672 0000080A 7404                    		jz	short exitjx	; watch	out for	wrap
  9673 0000080C 26FF4D20                		dec	word [es:di+20h]
  9674                                  exitjx:					
  9675                                  		; 10/12/2022
  9676                                  		; cf = 0
  9677                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9678                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9679 00000810 C3                      		retn
  9680                                  
  9681                                  ;----------------------------------------------------------------------------
  9682                                  ;		disk removable routine
  9683                                  ;----------------------------------------------------------------------------
  9684                                  
  9685                                  		; al is	unit #
  9686                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
  9687 00000811 E8B7FC                  		call	SetDrive	; get bds for this drive
  9688                                  		;test	byte [es:di+BDS.flags], fnon_removable
  9689 00000814 26F6452301              		test	byte [es:di+23h], 1
  9690                                  		;jnz	short x_bus_exit ; non_rem
  9691 00000819 7501                    		jnz	short non_rem	; 15/10/2022
  9692                                  		; 10/12/2022
  9693                                  		; cf = 0
  9694                                  		;clc			; CF is already ZERO here
  9695                                  					; 15/10/2022
  9696 0000081B C3                      		retn
  9697                                  ; ---------------------------------------------------------------------------
  9698                                  
  9699                                  non_rem:
  9700                                  x_bus_exit:				
  9701 0000081C B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
  9702                                  					; return busy status
  9703 0000081E F9                      		stc
  9704                                  dsk_ret:				
  9705 0000081F C3                      		retn
  9706                                  
  9707                                  ;----------------------------------------------------------------------------
  9708                                  ;		disk i/o routines
  9709                                  ;----------------------------------------------------------------------------
  9710                                  
  9711                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
  9712                                  		;mov	word [wrtverify], 103h
  9713                                  		; 19/10/2022
  9714 00000820 C706[2001]0301          		mov	word [rflag], 103h
  9715                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
  9716 00000826 EB06                    		jmp	short dsk_cl
  9717                                  ; ---------------------------------------------------------------------------
  9718                                  
  9719                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
  9720                                  		;mov	word [wrtverify], 3
  9721                                  		; 19/10/2022
  9722 00000828 C706[2001]0300          		mov	word [rflag], 3
  9723                                  		;mov	word ptr ds:rflag, 3 ; romwrite
  9724                                  
  9725                                  dsk_cl:					
  9726 0000082E E89800                  		call	diskio		; romwrite
  9727                                  ; ---------------------------------------------------------------------------
  9728                                  
  9729                                  dsk_io:					
  9730 00000831 73EC                    		jnb	short dsk_ret
  9731 00000833 E9A1F8                  		jmp	bc_err_cnt
  9732                                  ; ---------------------------------------------------------------------------
  9733                                  
  9734                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
  9735 00000836 E88B00                  		call	diskrd
  9736 00000839 EBF6                    		jmp	short dsk_io
  9737                                  
  9738                                  ; =============== S U B	R O U T	I N E =======================================
  9739                                  
  9740                                  ; 15/10/2022
  9741                                  ; 10/03/2019 - Retro DOS v4.0
  9742                                  
  9743                                  ;-----------------------------------------------------------
  9744                                  ; miscellaneous odd jump routines. 
  9745                                  ; moved out of mainline for speed.
  9746                                  
  9747                                  ; if we have a system where we have virtual drives, we need 
  9748                                  ; to prompt the user to place the correct disk in the drive.
  9749                                  ;
  9750                                  ;	assume es:di -> bds, ds:->Bios_Data
  9751                                  ;-----------------------------------------------------------
  9752                                  
  9753                                  		; 19/10/2022
  9754                                  checksingle:		
  9755 0000083B 50                      		push	ax
  9756 0000083C 53                      		push	bx
  9757 0000083D 268B5D23                		mov	bx, [es:di+23h]	; [es:di+BDS.flags]
  9758                                  
  9759                                  ; if hard drive, cannot change disk.
  9760                                  ; if current owner of physical drive, no need to change diskette.
  9761                                  
  9762 00000841 F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
  9763 00000844 7573                    		jnz	short singleret
  9764 00000846 F6C310                  		test	bl, 10h		; fi_am_mult
  9765                                  					; is there a drive sharing this	physical drive?
  9766 00000849 746E                    		jz	short singleret
  9767                                  
  9768                                  
  9769                                  ; look for the previous owner of this physical drive
  9770                                  ; and reset its ownership flag.
  9771                                  
  9772 0000084B 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
  9773                                  					; get physical drive number
  9774 0000084F 06                      		push	es		; preserve pointer to current bds
  9775 00000850 57                      		push	di
  9776 00000851 C43E[1901]              		les	di, [start_bds] ; get first bds
  9777                                  scan_list:				
  9778 00000855 26384504                		cmp	[es:di+4], al
  9779 00000859 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
  9780 0000085B B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
  9781 0000085D 26845D23                		test	[es:di+23h], bl
  9782 00000861 744B                    		jz	short scan_skip	; he doesn't own it either. continue
  9783 00000863 26305D23                		xor	[es:di+23h], bl	; reset	ownership flag
  9784 00000867 5F                      		pop	di		; restore pointer to current bds
  9785 00000868 07                      		pop	es
  9786 00000869 26085D23                		or	[es:di+23h], bl	; ; set	ownership flag
  9787                                  
  9788                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
  9789                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
  9790                                  ; in this case.
  9791 0000086D 803E[7A00]01            		cmp	byte [fsetowner], 1
  9792 00000872 7517                    		jnz	short not_fsetowner
  9793                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
  9794 00000874 26807D0400              		cmp	byte [es:di+4], 0
  9795 00000879 753E                    		jnz	short singleret
  9796 0000087B 268A4505                		mov	al, [es:di+5]
  9797                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
  9798                                  					; get the DOS drive letter
  9799 0000087F 06                      		push	es
  9800 00000880 8E06[1A00]              		mov	es, [zeroseg]
  9801 00000884 26A20405                		mov	[es:LSTDRV], al
  9802                                  		;mov	es:504h, al	; [es:LSTDRV]
  9803                                  					; set up sdsb
  9804 00000888 07                      		pop	es		; restore bds pointer
  9805 00000889 EB2E                    		jmp	short singleret
  9806                                  ; ---------------------------------------------------------------------------
  9807                                  
  9808                                  ; to support "backward" compatibility with ibm's "single drive status byte"
  9809                                  ; we now check to see if we are in a single drive system and the application
  9810                                  ; has "cleverly" diddled the sdsb
  9811                                  
  9812                                  not_fsetowner:				
  9813 0000088B 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
  9814 00000890 7517                    		jnz	short ignore_sdsb
  9815 00000892 50                      		push	ax
  9816 00000893 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
  9817 00000897 88C4                    		mov	ah, al
  9818 00000899 06                      		push	es
  9819 0000089A 8E06[1A00]              		mov	es, [zeroseg]
  9820 0000089E 2686060405              		xchg	al, [es:LSTDRV]
  9821                                  		;xchg	al, es:504h	; [es:LSTDRV]
  9822                                  					; then swap(curr_drv,req_drv)
  9823 000008A3 07                      		pop	es
  9824 000008A4 38C4                    		cmp	ah, al		; else
  9825 000008A6 58                      		pop	ax		; swap(curr_drv,req_drv)
  9826 000008A7 7410                    		jz	short singleret	; issue	swap_dsk_msg
  9827                                  ignore_sdsb:				
  9828 000008A9 E8800E                  		call	swpdsk
  9829 000008AC EB0B                    		jmp	short singleret
  9830                                  ; ---------------------------------------------------------------------------
  9831                                  
  9832                                  scan_skip:	
  9833 000008AE 26C43D                  		les	di, [es:di]			
  9834                                  		;les	di, es:[di]	; [es:di+BDS.link]
  9835                                  					; go to	next bds
  9836 000008B1 83FFFF                  		cmp	di, 0FFFFh	; end of list?
  9837 000008B4 759F                    		jnz	short scan_list	; ontinue until	hit end	of list
  9838 000008B6 F9                      		stc
  9839 000008B7 5F                      		pop	di		; restore current bds
  9840 000008B8 07                      		pop	es
  9841                                  
  9842                                  singleret:				
  9843 000008B9 5B                      		pop	bx
  9844 000008BA 58                      		pop	ax
  9845 000008BB C3                      		retn
  9846                                  
  9847                                  ; ---------------------------------------------------------------------------
  9848                                  
  9849                                  baddrive:				
  9850 000008BC B008                    		mov	al, 8		; sector not found
  9851 000008BE EB02                    		jmp	short baddrive_ret
  9852                                  ; ---------------------------------------------------------------------------
  9853                                  
  9854                                  unformatteddrive:				
  9855 000008C0 B007                    		mov	al, 7		; unknown media
  9856                                  baddrive_ret:				
  9857 000008C2 F9                      		stc
  9858                                  ; ---------------------------------------------------------------------------
  9859                                  
  9860                                  ioret:		
  9861 000008C3 C3                      		retn
  9862                                  
  9863                                  ; ---------------------------------------------------------------------------
  9864                                  
  9865                                  ; 15/10/52022
  9866                                  
  9867                                  ; ---------------------------------------------------------------------------
  9868                                  ;	disk i/o handler
  9869                                  ;
  9870                                  ;	al = drive number (0-6)
  9871                                  ;	ah = media descriptor
  9872                                  ;	cx = sector count
  9873                                  ;	dx = first sector (low)
  9874                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
  9875                                  ;	ds = cs
  9876                                  ;	es:di = transfer address
  9877                                  ;	[rflag]=operation (2=read, 3=write)
  9878                                  ;	[verify]=1 for verify after write
  9879                                  ;
  9880                                  ;	if successful carry flag = 0
  9881                                  ;	  else cf=1 and al contains error code
  9882                                  ; ---------------------------------------------------------------------------
  9883                                  
  9884                                  diskrd:	
  9885                                  		;mov	ds:rflag, 2	; romread
  9886                                  		; 19/10/2022
  9887 000008C4 C606[2001]02            		mov	byte [rflag], 2 ; romread
  9888                                  
  9889                                  ; =============== S U B	R O U T	I N E =======================================
  9890                                  
  9891                                  		; 19/10/2022
  9892                                  diskio:
  9893 000008C9 89FB                    		mov	bx, di		; es:bx	= transfer address
  9894 000008CB 8C06[3705]              		mov	[xfer_seg], es	; save transfer	segment
  9895 000008CF E8F9FB                  		call	SetDrive
  9896 000008D2 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
  9897 000008D6 A2[1F01]                		mov	[medbyt], al
  9898                                  		;jcxz	short ioret
  9899 000008D9 E3E8                    		jcxz	ioret
  9900                                  
  9901                                  ; see if the media is formatted or not by checking the flags field in
  9902                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
  9903                                  ; go to the error exit at label unformatteddrive.
  9904                                  
  9905 000008DB 26F6452402              		test	byte [es:di+24h], 2
  9906                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
  9907                                  					; unformatted_media
  9908 000008E0 75DE                    		jnz	short unformatteddrive
  9909 000008E2 890E[2201]              		mov	[seccnt], cx	; save sector count
  9910 000008E6 8926[3501]              		mov	[spsav], sp	; save sp
  9911                                  
  9912                                  ; ensure that we are trying to access valid sectors on the drive
  9913                                  
  9914 000008EA 89D0                    		mov	ax, dx
  9915 000008EC 31F6                    		xor	si, si
  9916 000008EE 01CA                    		add	dx, cx
  9917 000008F0 83D600                  		adc	si, 0
  9918 000008F3 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
  9919                                  					; > 32 bit sector ?
  9920 000008F8 740D                    		jz	short sanity32
  9921 000008FA 83FE00                  		cmp	si, 0
  9922 000008FD 75BD                    		jnz	short baddrive
  9923 000008FF 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  9924 00000903 77B7                    		ja	short baddrive
  9925 00000905 EB12                    		jmp	short sanityok
  9926                                  ; ---------------------------------------------------------------------------
  9927                                  
  9928                                  sanity32:				
  9929 00000907 0336[2B05]              		add	si, [start_sec_h]
  9930 0000090B 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  9931 0000090F 7208                    		jb	short sanityok
  9932 00000911 77A9                    		ja	short baddrive
  9933 00000913 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  9934 00000917 77A3                    		ja	short baddrive
  9935                                  
  9936                                  sanityok:				
  9937 00000919 8B16[2B05]              		mov	dx, [start_sec_h]
  9938 0000091D 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
  9939 00000921 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
  9940                                  
  9941                                  ; now dx;ax have the physical first sector.
  9942                                  ; since the following procedures is going to destroy ax, let's
  9943                                  ; save it temporarily to saved_word.
  9944                                  
  9945 00000925 A3[2D05]                		mov	[saved_word], ax ; save the sector number (low)
  9946                                  
  9947                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
  9948                                  ; will do it because we will skip the set up stuff with hard disks.
  9949                                  
  9950 00000928 06                      		push	es
  9951 00000929 8E06[1A00]              		mov	es, [zeroseg]
  9952 0000092D 26C4367800              		les	si, [es:DSKADR]
  9953                                  		;les	si, es:78h	; [es:DSKADR]
  9954                                  					; current disk parm table
  9955 00000932 8936[2D01]              		mov	[dpt], si
  9956 00000936 8C06[2F01]              		mov	[dpt+2], es
  9957 0000093A 07                      		pop	es
  9958 0000093B 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9959                                  					; fnon_removable
  9960 00000940 7510                    		jnz	short skip_setup
  9961 00000942 E8F6FE                  		call	checksingle
  9962                                  
  9963                                  ; check to see if we have previously noted a change line. the routine
  9964                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
  9965                                  ; the proper error code.
  9966                                  
  9967 00000945 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
  9968 0000094A 7403                    		jz	short diskio_nochangeline ; brif not
  9969 0000094C E8AB0E                  		call	checklatchio	; will do a sneaky pop stack return
  9970                                  					; if a disk error occurs
  9971                                  diskio_nochangeline:			
  9972 0000094F E84700                  		call	iosetup		; set up tables	and variables for i/o
  9973                                  
  9974                                  ; now the settle values are correct for the following code
  9975                                  
  9976                                  skip_setup:
  9977                                  
  9978                                  ; 32 bit sector calculation.
  9979                                  ; dx:[saved_word] = starting sector number.
  9980                                  				
  9981 00000952 89D0                    		mov	ax, dx
  9982 00000954 31D2                    		xor	dx, dx
  9983 00000956 26F77513                		div	word [es:di+13h] ; [es:di+BDS.secpertrack]
  9984                                  					 ; divide by sec per track
  9985 0000095A A3[2905]                		mov	[temp_h], ax
  9986 0000095D A1[2D05]                		mov	ax, [saved_word]
  9987 00000960 26F77513                		div	word [es:di+13h] ; [es:di+BDS.secpertrack]
  9988                                  					; now, [temp_h]:ax = track #, dx = sector
  9989                                  		;inc	dl		; sector number	is 1 based.
  9990                                  		; 18/12/2022
  9991 00000964 42                      		inc	dx
  9992 00000965 8816[3101]              		mov	[cursec], dl	; save current sector
  9993 00000969 268B4D15                		mov	cx, [es:di+15h]	; es:di+BDS.heads]
  9994                                  					; get number of	heads
  9995 0000096D 50                      		push	ax
  9996 0000096E 31D2                    		xor	dx, dx
  9997 00000970 A1[2905]                		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
  9998 00000973 F7F1                    		div	cx
  9999 00000975 A3[2905]                		mov	[temp_h], ax
 10000 00000978 58                      		pop	ax
 10001 00000979 F7F1                    		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 10002 0000097B 833E[2905]00            		cmp	word [temp_h], 0
 10003 00000980 7714                    		ja	short baddrive_brdg
 10004 00000982 3D0004                  		cmp	ax, 1024	; 2^10 currently maxium	for track #.
 10005 00000985 770F                    		ja	short baddrive_brdg
 10006 00000987 8816[3201]              		mov	[curhd], dl	; save current head
 10007 0000098B A3[3301]                		mov	[curtrk], ax	; save current track
 10008                                  
 10009                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 10010                                  ; violations here. not true. we perform the operation as if everything is
 10011                                  ; symmetric; let the int 13 handler worry about the dma violations.
 10012                                  
 10013 0000098E A1[2201]                		mov	ax, [seccnt]
 10014 00000991 E88400                  		call	block		; (cas - call/ret)
 10015                                  		;call	done
 10016                                  		;retn
 10017                                  		; 18/12/2022
 10018 00000994 EB4B                    		jmp	done
 10019                                  
 10020                                  ; ---------------------------------------------------------------------------
 10021                                  
 10022                                  baddrive_brdg:				
 10023 00000996 E923FF                  		jmp	baddrive
 10024                                  
 10025                                  ; =============== S U B	R O U T	I N E =======================================
 10026                                  
 10027                                  ;--------------------------------------------------------------
 10028                                  ; set the drive-last-accessed flag for diskette only. 
 10029                                  ; we know that the hard disk will not be removed.
 10030                                  ; es:di -> current bds.
 10031                                  ; ds -> Bios_Data
 10032                                  ; ax,cx,si are destroyed.
 10033                                  ;--------------------------------------------------------------
 10034                                  
 10035                                  		; 19/10/2022
 10036                                  iosetup:	
 10037 00000999 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10038 0000099D A2[1E01]                		mov	[tim_drv], al	; save drive letter
 10039                                  
 10040                                  ; determine proper head settle values
 10041                                  
 10042 000009A0 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10043 000009A5 7539                    		jnz	short skip_dpt_setting
 10044 000009A7 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 10045 000009AA 1E                      		push	ds
 10046 000009AB C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10047 000009AF 884404                  		mov	[si+4],	al
 10048 000009B2 8A440A                  		mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10049 000009B5 8A6404                  		mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 10050 000009B8 1F                      		pop	ds
 10051 000009B9 A2[2601]                		mov	[motorstartup], al
 10052 000009BC 8826[2B01]              		mov	[save_eot], ah
 10053                                  
 10054                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 10055                                  ; motor start time to 4. this checking for every i/o is going to affect
 10056                                  ; performance across the board, but is necessary!!
 10057                                  
 10058 000009C0 1E                      		push	ds
 10059 000009C1 C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10060 000009C5 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 10061                                  					; ffSmall
 10062 000009CA 7505                    		jnz	short motor_start_ok
 10063 000009CC B004                    		mov	al, 4
 10064 000009CE 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10065                                  motor_start_ok:
 10066                                  
 10067                                  ; ds:si now points to disk parameter table.
 10068                                  ; get current settle and set fast settle
 10069                                  				
 10070                                  		;xor	al, al
 10071                                  		;inc	al		; ibm wants fast settle	to be 1
 10072                                  		; 18/12/2022
 10073 000009D1 31C0                    		xor	ax, ax
 10074 000009D3 40                      		inc	ax
 10075 000009D4 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10076                                  					; get settle and set up	for fast
 10077 000009D7 1F                      		pop	ds
 10078 000009D8 A2[2701]                		mov	[settlecurrent], al
 10079 000009DB B00F                    		mov	al, 15		; NORMSETTLE
 10080                                  					; someone has diddled the settle
 10081 000009DD A2[2801]                		mov	[settleslow], al
 10082                                  skip_dpt_setting:			
 10083 000009E0 C3                      		retn
 10084                                  
 10085                                  ; =============== S U B	R O U T	I N E =======================================
 10086                                  
 10087                                  ;--------------------------------------------------------------
 10088                                  ; set time of last access, and reset default values in the dpt.
 10089                                  ;
 10090                                  ;	  note: trashes (at least) si
 10091                                  ;--------------------------------------------------------------
 10092                                  
 10093                                  		; 19/10/2022
 10094                                  done:
 10095 000009E1 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10096                                  					; fnon_removable
 10097 000009E6 752F                    		jnz	short ddbx	; do not set for non-removable media
 10098 000009E8 E8FD01                  		call	set_tim
 10099                                  ;diddleback:
 10100                                  ; 09/12/2022
 10101                                  diddle_back:				
 10102 000009EB 9C                      		pushf
 10103 000009EC 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10104 000009F1 7523                    		jnz	short nodiddleback
 10105 000009F3 50                      		push	ax
 10106 000009F4 06                      		push	es
 10107 000009F5 C436[2D01]              		les	si, [dpt]
 10108 000009F9 A0[2B01]                		mov	al, [save_eot]
 10109 000009FC 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 10110 00000A00 A0[2701]                		mov	al, [settlecurrent]
 10111 00000A03 8A26[2601]              		mov	ah, [motorstartup]
 10112 00000A07 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10113 00000A0B 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 10114 00000A10 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 10115 00000A14 07                      		pop	es
 10116 00000A15 58                      		pop	ax
 10117                                  nodiddleback:				
 10118 00000A16 9D                      		popf
 10119                                  ddbx:					
 10120 00000A17 C3                      		retn
 10121                                  
 10122                                  ; =============== S U B	R O U T	I N E =======================================
 10123                                  
 10124                                  ;--------------------------------------------------------------
 10125                                  ;read the number of sectors specified in ax, 
 10126                                  ;handling track boundaries
 10127                                  ;es:di -> bds for this drive
 10128                                  ;--------------------------------------------------------------
 10129                                  
 10130                                  		 ; 19/10/2022
 10131                                  block:	
 10132 00000A18 09C0                    		or	ax, ax
 10133 00000A1A 74FB                    		jz	short ddbx
 10134 00000A1C 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10135                                  					; fnon_removable
 10136 00000A21 740D                    		jz	short block_floppy ;
 10137                                  
 10138                                  ; check	to see if multi	track operation	is allowed. if not
 10139                                  ; we have to go	to the block_floppy below to break up the operation.
 10140                                  
 10141 00000A23 F606[2F05]80            		test	byte [multrk_flag], 80h
 10142                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 10143 00000A28 7406                    		jz	short block_floppy
 10144 00000A2A E82900                  		call	Disk
 10145 00000A2D 31C0                    		xor	ax, ax
 10146 00000A2F C3                      		retn
 10147                                  ; ---------------------------------------------------------------------------
 10148                                  
 10149                                  block_floppy:
 10150                                  
 10151                                  ; read at most 1 track worth. perform minimization at sector / track
 10152                                  				
 10153 00000A30 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 10154 00000A34 FEC1                    		inc	cl
 10155 00000A36 2A0E[3101]              		sub	cl, [cursec]
 10156 00000A3A 30ED                    		xor	ch, ch
 10157 00000A3C 39C8                    		cmp	ax, cx
 10158 00000A3E 7302                    		jnb	short gotmin
 10159 00000A40 89C1                    		mov	cx, ax
 10160                                  
 10161                                  gotmin:
 10162                                  
 10163                                  ; ax is the requested number of sectors to read
 10164                                  ; cx is the number that we can do on this track
 10165                                  					
 10166 00000A42 50                      		push	ax
 10167 00000A43 51                      		push	cx
 10168 00000A44 89C8                    		mov	ax, cx
 10169 00000A46 E80D00                  		call	Disk
 10170 00000A49 59                      		pop	cx
 10171 00000A4A 58                      		pop	ax
 10172                                  
 10173                                  ; cx is the number of sectors just transferred
 10174                                  
 10175 00000A4B 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 10176 00000A4D D0E1                    		shl	cl, 1
 10177 00000A4F 00CF                    		add	bh, cl		; adjust transfer address
 10178 00000A51 EBC5                    		jmp	short block
 10179                                  dskerr_brdg:				
 10180 00000A53 E9EC00                  		jmp	dskerr
 10181                                  
 10182                                  ; =============== S U B	R O U T	I N E =======================================
 10183                                  
 10184                                  ; 15/10/2022
 10185                                  
 10186                                  ;--------------------------------------------------------------
 10187                                  ;perform disk i/o with retries
 10188                                  ; al = number of sectors (1-8, all on one track)
 10189                                  ; es:di point to drive parameters
 10190                                  ; xfer_seg:bx = transfer address 
 10191                                  ;		(must not cross a 64k physical boundary)
 10192                                  ; [rflag] = 2 if read, 3 if write
 10193                                  ; [verify] = 0 for normal, 1 for verify after write
 10194                                  ;--------------------------------------------------------------
 10195                                  
 10196                                  		 ; 19/10/2022
 10197                                  Disk:
 10198                                  
 10199                                  ; Check for hard disk format and
 10200                                  ; if TRUE then set max error count to 2
 10201                                  
 10202 00000A56 BD0500                  		mov	bp, 5		; MAXERR
 10203                                  					; set up retry count
 10204 00000A59 26F6452301              		test	byte [es:di+23h], 1	;
 10205                                  					; [es:di+BDS.flags], fnon_removable
 10206 00000A5E 7408                    		jz	short GetRdWrInd
 10207 00000A60 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 10208 00000A63 7403                    		jz	short GetRdWrInd
 10209 00000A65 BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 10210                                  GetRdWrInd:				
 10211 00000A68 892E[3205]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 10212 00000A6C 892E[3405]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 10213 00000A70 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 10214                                  ;retry:
 10215                                  ; 09/12/2022
 10216                                  _retry:					
 10217 00000A74 50                      		push	ax
 10218 00000A75 8B16[3301]              		mov	dx, [curtrk]
 10219 00000A79 26F6452301              		test	byte [es:di+23h], 1
 10220 00000A7E 740B                    		jz	short disk_not_mini
 10221 00000A80 26837D4701              		cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 10222                                  					; is this a mini disk? ((logical dos partition))
 10223 00000A85 7504                    		jnz	short disk_not_mini ; no. continue to next.
 10224 00000A87 26035549                		add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 10225                                  					; add hidden trks.
 10226                                  disk_not_mini:				
 10227 00000A8B D0CE                    		ror	dh, 1
 10228 00000A8D D0CE                    		ror	dh, 1
 10229 00000A8F 0A36[3101]              		or	dh, [cursec]
 10230 00000A93 89D1                    		mov	cx, dx
 10231 00000A95 86E9                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 10232 00000A97 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 10233 00000A9B 268A5504                		mov	dl, [es:di+4]	; physical drive number
 10234                                  					; [es:di+BDS.drivenum]
 10235 00000A9F 26807D2205              		cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 10236 00000AA4 7413                    		jz	short do_fast	; hard files use fast speed
 10237                                  
 10238                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 10239                                  ; this helps when we have just done a reset disk operation and the head has
 10240                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 10241                                  
 10242 00000AA6 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 10243 00000AAB 740A                    		jz	short do_writej
 10244 00000AAD 80FC02                  		cmp	ah, 2		; romread
 10245 00000AB0 7407                    		jz	short do_fast
 10246 00000AB2 80FC04                  		cmp	ah, 4		; romverify
 10247 00000AB5 7402                    		jz	short do_fast
 10248                                  do_writej:	
 10249                                  
 10250                                  ; reads always fast, unless we have just done a disk reset operation
 10251                                  			
 10252 00000AB7 EB56                    		jmp	short do_write	; reads	always fast
 10253                                  ; ---------------------------------------------------------------------------
 10254                                  
 10255                                  do_fast:				
 10256 00000AB9 E8FC00                  		call	fastspeed	; change settle	mode
 10257                                  
 10258                                  testerr:				
 10259 00000ABC 7295                    		jb	short dskerr_brdg
 10260                                  
 10261                                  ; set drive and track of last access
 10262                                  
 10263 00000ABE 8816[7600]              		mov	[step_drv], dl
 10264 00000AC2 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 10265                                  no_set:
 10266                                  		;cmp	word [wrtverify], 103h
 10267 00000AC6 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 10268 00000ACC 7452                    		jz	short doverify
 10269                                  noverify:				
 10270 00000ACE 58                      		pop	ax
 10271                                  
 10272                                  ; check the flags word in the bds to see if the drive is non removable
 10273                                  ; if not we needn't do anything special
 10274                                  ; if it is a hard disk then check to see if multi-track operation
 10275                                  ; is specified. if specified we don't have to calculate for the next
 10276                                  ; track since we are already done. so we can go to the exit of this routine.
 10277                                  
 10278 00000ACF 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10279                                  					; fnon_removable
 10280 00000AD4 7407                    		jz	short its_removable
 10281 00000AD6 F606[2F05]80            		test	byte [multrk_flag], 80h ; multrk_on
 10282 00000ADB 7530                    		jnz	short disk_ret
 10283                                  its_removable:				
 10284 00000ADD 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 10285 00000AE0 30E4                    		xor	ah, ah
 10286 00000AE2 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 10287 00000AE6 00C1                    		add	cl, al
 10288 00000AE8 880E[3101]              		mov	[cursec], cl
 10289 00000AEC 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 10290                                  					; see if sector/track limit reached
 10291 00000AF0 761B                    		jbe	short disk_ret
 10292 00000AF2 C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 10293 00000AF7 8A36[3201]              		mov	dh, [curhd]
 10294 00000AFB FEC6                    		inc	dh
 10295 00000AFD 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 10296 00000B01 7206                    		jb	short noxor
 10297 00000B03 30F6                    		xor	dh, dh
 10298 00000B05 FF06[3301]              		inc	word [curtrk]
 10299                                  noxor:					
 10300 00000B09 8836[3201]              		mov	[curhd], dh
 10301                                  disk_ret:				
 10302 00000B0D F8                      		clc
 10303 00000B0E C3                      		retn
 10304                                  ; ---------------------------------------------------------------------------
 10305                                  
 10306                                  ; 15/10/2022
 10307                                  
 10308                                  ;--------------------------------------------------------------
 10309                                  ; the request is for write. determine if we are talking about
 10310                                  ; the same track and drive. if so, use the fast speed.
 10311                                  ;--------------------------------------------------------------
 10312                                  
 10313                                  do_write:				
 10314 00000B0F 3A16[7600]              		cmp	dl, [step_drv]
 10315 00000B13 7506                    		jnz	short do_norm	; we have changed drives
 10316 00000B15 263A6D46                		cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 10317 00000B19 749E                    		jz	short do_fast	; we are still on the same track
 10318                                  
 10319                                  do_norm:				
 10320 00000B1B E87500                  		call	normspeed
 10321 00000B1E EB9C                    		jmp	short testerr
 10322                                  ; ---------------------------------------------------------------------------
 10323                                  
 10324                                  ;--------------------------------------------------------------
 10325                                  ; we have a verify request also. get state info and go verify
 10326                                  ;--------------------------------------------------------------
 10327                                  
 10328                                  doverify:				
 10329 00000B20 58                      		pop	ax
 10330 00000B21 50                      		push	ax
 10331 00000B22 B404                    		mov	ah, 4
 10332 00000B24 E89100                  		call	fastspeed
 10333 00000B27 73A5                    		jnb	short noverify
 10334                                  
 10335                                  ; check the error returned in ah to see if it is a soft ecc error.
 10336                                  ; if it is not we needn't do anything special. if it is a soft
 10337                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 10338                                  ; this retry count becomes 0 then we just ignore the error and go to
 10339                                  ; no_verify but if we can still try then we call the routine to reset
 10340                                  ; the disk and go to dskerr1 to retry the operation.
 10341                                  
 10342 00000B29 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 10343 00000B2C 750B                    		jnz	short not_softecc_err
 10344 00000B2E FF0E[3405]              		dec	word [soft_ecc_cnt]
 10345 00000B32 749A                    		jz	short noverify	; no more retry
 10346 00000B34 E84405                  		call	ResetDisk	; reset	disk
 10347 00000B37 EB3E                    		jmp	short dskerr1	; retry
 10348                                  ; ---------------------------------------------------------------------------
 10349                                  
 10350                                  not_softecc_err:			; other error.			
 10351 00000B39 E83F05                  		call	ResetDisk
 10352 00000B3C FF0E[3205]              		dec	word [vretry_cnt]
 10353 00000B40 EB1C                    		jmp	short dskerr0
 10354                                  ; ---------------------------------------------------------------------------
 10355                                  
 10356                                  ;--------------------------------------------------------------
 10357                                  ; need to special case the change-line error ah=06h.
 10358                                  ; if we get this, we need to return it.
 10359                                  ;--------------------------------------------------------------
 10360                                  
 10361                                  dskerr:					
 10362 00000B42 803E[7700]00            		cmp	byte [fhave96], 0	; do we	have changeline	support?
 10363 00000B47 7403                    		jz	short dskerr_nochangeline ; brif not
 10364 00000B49 E8220D                  		call	checkio
 10365                                  dskerr_nochangeline:			
 10366 00000B4C 803E[3605]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 10367 00000B51 7508                    		jnz	short dochkagain ; no more retry.
 10368 00000B53 BD0100                  		mov	bp, 1
 10369 00000B56 C606[3605]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 10370                                  dochkagain:				
 10371 00000B5B E8AA00                  		call	again
 10372                                  dskerr0:				
 10373 00000B5E 7420                    		jz	short harderr
 10374 00000B60 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10375                                  					; fnon_removable
 10376 00000B65 7505                    		jnz	short skip_timeout_chk
 10377 00000B67 80FC80                  		cmp	ah, 80h		; timeout?
 10378 00000B6A 7414                    		jz	short harderr
 10379                                  skip_timeout_chk:			
 10380 00000B6C 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 10381 00000B6F 740A                    		jz	short write_fault_err ;	then, don't retry.
 10382 00000B71 C706[3405]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 10383                                  					; set soft_ecc_cnt back	to maxerr
 10384                                  dskerr1:				
 10385 00000B77 58                      		pop	ax		; restore sector count
 10386                                  		;jmp	retry
 10387                                  		; 09/12/2022
 10388 00000B78 E9F9FE                  		jmp	_retry
 10389                                  ; ---------------------------------------------------------------------------
 10390                                  
 10391                                  write_fault_err:			
 10392 00000B7B BD0100                  		mov	bp, 1		; just retry only once
 10393                                  					; for write fault error.
 10394 00000B7E EBF7                    		jmp	short dskerr1
 10395                                  
 10396                                  		; fall into harderr
 10397                                  ; ---------------------------------------------------------------------------
 10398                                  
 10399                                  ; entry point for routines that call maperror themselves
 10400                                  
 10401                                  harderr:				
 10402 00000B80 E84D00                  		call	maperror
 10403                                  harderr2:				
 10404 00000B83 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 10405                                  					; force a media check through rom
 10406 00000B88 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 10407 00000B8C 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 10408                                  
 10409                                  ; since we are performing a non-local goto, restore the disk parameters
 10410                                  
 10411                                  		;jmp	diddleback
 10412                                  		; 09/12/2022
 10413 00000B90 E958FE                  		jmp	diddle_back
 10414                                  
 10415                                  ; =============== S U B	R O U T	I N E =======================================
 10416                                  
 10417                                  ; change settle value from settlecurrent to whatever is appropriate
 10418                                  ; note that this routine is never called for a fixed disk.
 10419                                  
 10420                                  		; 19/10/2022
 10421                                  normspeed:
 10422 00000B93 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10423 00000B98 751E                    		jnz	short fastspeed
 10424 00000B9A 06                      		push	es
 10425 00000B9B 50                      		push	ax
 10426 00000B9C A0[2801]                		mov	al, [settleslow]
 10427 00000B9F C436[2D01]              		les	si, [dpt]	; current disk parm table
 10428 00000BA3 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10429 00000BA7 58                      		pop	ax
 10430 00000BA8 07                      		pop	es
 10431 00000BA9 E80C00                  		call	fastspeed
 10432 00000BAC 06                      		push	es
 10433 00000BAD C436[2D01]              		les	si, [dpt]
 10434 00000BB1 26C6440901              		mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10435                                  					; 1 is fast settle value
 10436 00000BB6 07                      		pop	es
 10437 00000BB7 C3                      		retn
 10438                                  
 10439                                  ; =============== S U B	R O U T	I N E =======================================
 10440                                  
 10441                                  ; if the drive has been marked as too big (i.e. starting sector of the
 10442                                  ; partition is > 16 bits, then always return drive not ready.
 10443                                  
 10444                                  fastspeed:		
 10445 00000BB8 26F6451F80              		test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 10446                                  					; ftoobig
 10447 00000BBD 750D                    		jnz	short notready
 10448 00000BBF 06                      		push	es
 10449 00000BC0 8E06[3705]              		mov	es, [xfer_seg]
 10450 00000BC4 CD13                    		int	13h		; DISK -
 10451 00000BC6 8C06[3705]              		mov	[xfer_seg], es
 10452 00000BCA 07                      		pop	es
 10453 00000BCB C3                      		retn
 10454                                  ; ---------------------------------------------------------------------------
 10455                                  
 10456                                  notready:				
 10457 00000BCC F9                      		stc
 10458 00000BCD B480                    		mov	ah, 80h
 10459 00000BCF C3                      		retn
 10460                                  
 10461                                  ; =============== S U B	R O U T	I N E =======================================
 10462                                  
 10463                                  ; map error returned by rom in ah into corresponding code to be returned to
 10464                                  ; dos in al. trashes di. guaranteed to set carry.
 10465                                  
 10466                                  maperror:	
 10467 00000BD0 51                      		push	cx
 10468 00000BD1 06                      		push	es
 10469 00000BD2 1E                      		push	ds		; set es=Bios_Data
 10470 00000BD3 07                      		pop	es
 10471 00000BD4 88E0                    		mov	al, ah		; put error code in al
 10472 00000BD6 A2[4401]                		mov	[lsterr], al	; terminate list with error code
 10473 00000BD9 B90900                  		mov	cx, 9		; numerr (= errout-errin)
 10474                                  					; number of possible error conditions
 10475 00000BDC BF[3C01]                		mov	di, errin	; point to error conditions
 10476 00000BDF F2AE                    		repne scasb
 10477                                  		; 10/12/2022
 10478 00000BE1 8A4508                  		mov	al, [di+8]	; [di+numerr-1]
 10479                                  					; get translation
 10480                                  		; 19/10/2022 - Temporary ! 
 10481                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 10482 00000BE4 07                      		pop	es
 10483 00000BE5 59                      		pop	cx
 10484 00000BE6 F9                      		stc			; flag error condition
 10485 00000BE7 C3                      		retn
 10486                                  
 10487                                  ; =============== S U B	R O U T	I N E =======================================
 10488                                  
 10489                                  ; set the time of last access for this drive.
 10490                                  ; this is done only for removable media. es:di -> bds
 10491                                  
 10492                                  set_tim:		
 10493 00000BE8 50                      		push	ax
 10494 00000BE9 E88EF8                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 10495                                  
 10496                                  ; we have the new time. if we see that the time has passed,
 10497                                  ; then we reset the threshold counter...
 10498                                  
 10499 00000BEC 263B5547                		cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 10500 00000BF0 7506                    		jnz	short setaccess
 10501 00000BF2 263B4D49                		cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 10502                                  		;jz	short done_set
 10503                                  		; 12/12/2022
 10504 00000BF6 740E                    		je	short done_set2
 10505                                  setaccess:				
 10506 00000BF8 C606[1D01]00            		mov	byte [accesscount], 0
 10507 00000BFD 26895547                		mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 10508 00000C01 26894D49                		mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 10509                                  done_set:				
 10510 00000C05 F8                      		clc
 10511                                  done_set2:		; 12/12/2022
 10512 00000C06 58                      		pop	ax
 10513 00000C07 C3                      		retn
 10514                                  
 10515                                  ; =============== S U B	R O U T	I N E =======================================
 10516                                  
 10517                                  ; this routine is called if an error occurs while formatting or verifying.
 10518                                  ; it resets the drive,and decrements the retry count.
 10519                                  ; on entry - ds:di - points to bds for the drive
 10520                                  ;	     bp    - contains retry count
 10521                                  ; on exit    flags indicate result of decrementing retry count
 10522                                  
 10523                                  again:	
 10524 00000C08 E87004                  		call	ResetDisk
 10525 00000C0B 80FC06                  		cmp	ah, 6
 10526 00000C0E 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 10527                                  					; do not decrement retry count.
 10528 00000C10 4D                      		dec	bp		; decrement retry count
 10529 00000C11 C3                      		retn
 10530                                  ; ---------------------------------------------------------------------------
 10531                                  
 10532                                  dont_dec_retry_count:			
 10533 00000C12 08E4                    		or	ah, ah
 10534 00000C14 C3                      		retn
 10535                                  
 10536                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 10537                                  
 10538                                  ;----------------------------------------------------------------------------
 10539                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 10540                                  ;----------------------------------------------------------------------------
 10541                                  ; 11/03/2019 - Retro DOS v4.0
 10542                                  
 10543                                  ; 18/03/2019
 10544                                  
 10545                                  ; ==========================================================================
 10546                                  ;
 10547                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 10548                                  ;
 10549                                  ;      This function is intended to give the user to control the
 10550                                  ;      bds table flags of unformatted_media bit.
 10551                                  ;      GetAccessFlag will show the status -
 10552                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 10553                                  ;						1 disk i/o allowed
 10554                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 10555                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 10556                                  ;						1 disallow disk i/o
 10557                                  ; ==========================================================================
 10558                                  
 10559                                  		; generic ioctl dispatch tables
 10560                                  
 10561                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 10562                                  
 10563                                  ; ---------------------------------------------------------------------------
 10564 00000C15 00                      		db 0
 10565                                  
 10566                                  ; 09/12/2022 
 10567                                  %if 0
 10568                                  
 10569                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 10570                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 10571                                  		dw 0EE8h	; 61h	; ReadTrack
 10572                                  		dw 0E86h	; 62h	; VerifyTrack
 10573                                  		dw 0CA3h	 	; Cmd_Error_Proc
 10574                                  		dw 0CA3h		; Cmd_Error_Proc
 10575                                  		dw 0CA3h		; Cmd_Error_Proc
 10576                                  		dw 119Ah	; 66h	; GetMediaId
 10577                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 10578                                  		dw 12C1h	; 68h	; SenseMediaType
 10579                                  
 10580                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 10581                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 10582                                  		dw 0EEFh	; 41h	; WriteTrack
 10583                                  		dw 0DC1h	; 42h	; FormatTrack
 10584                                  		dw 0CA3h		; Cmd_Error_Proc
 10585                                  		dw 0CA3h		; Cmd_Error_Proc
 10586                                  		dw 0CA3h		; Cmd_Error_Proc
 10587                                  		dw 11D2h	; 46h	; SetMediaId
 10588                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 10589                                  
 10590                                  %endif
 10591                                  
 10592                                  		; 09/12/2022
 10593 00000C16 09                      IoReadJumpTable: db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 8
 10594 00000C17 [810C]                  		dw GetDeviceParameters	; 60h
 10595 00000C19 [BC0E]                  		dw ReadTrack		; 61h
 10596 00000C1B [5C0E]                  		dw VerifyTrack		; 62h
 10597 00000C1D [7D0C]                  		dw Cmd_Error_Proc
 10598 00000C1F [7D0C]                  		dw Cmd_Error_Proc
 10599 00000C21 [7D0C]                  		dw Cmd_Error_Proc
 10600 00000C23 [5D11]                  		dw GetMediaId		; 66h
 10601 00000C25 [2912]                  		dw GetAccessFlag	; 67h ; unpublished function
 10602 00000C27 [7B12]                  		dw SenseMediaType	; 68h
 10603                                  
 10604 00000C29 08                      IoWriteJumpTable: db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 7
 10605 00000C2A [CC0C]                  		dw SetDeviceParameters	; 40h
 10606 00000C2C [C30E]                  		dw WriteTrack		; 41h
 10607 00000C2E [970D]                  		dw FormatTrack		; 42h
 10608 00000C30 [7D0C]                  		dw Cmd_Error_Proc
 10609 00000C32 [7D0C]                  		dw Cmd_Error_Proc
 10610 00000C34 [7D0C]                  		dw Cmd_Error_Proc
 10611 00000C36 [9311]                  		dw SetMediaId		; 46h
 10612 00000C38 [3F12]                  		dw SetAccessFlag	; 47h ; unpublished function
 10613                                  
 10614                                  ; ==========================================================================
 10615                                  ; IOC_DC_Table
 10616                                  ;
 10617                                  ; This table contains all of the valid generic IOCtl Minor codes for
 10618                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 10619                                  ; Added for 5.00
 10620                                  ; ==========================================================================
 10621                                  
 10622 00000C3A 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 10623 00000C3B 40                      		db 40h			; SET_DEVICE_PARAMETERS
 10624 00000C3C 61                      		db 61h			; READ_TRACK
 10625 00000C3D 41                      		db 41h			; WRITE_TRACK
 10626 00000C3E 62                      		db 62h			; VERIFY_TRACK
 10627 00000C3F 42                      		db 42h			; FORMAT_TRACK
 10628 00000C40 66                      		db 66h			; GET_MEDIA_ID
 10629 00000C41 46                      		db 46h			; SET_MEDIA_ID
 10630 00000C42 67                      		db 67h			; GET_ACCESS_FLAG
 10631 00000C43 47                      		db 47h			; SET_ACCESS_FLAG
 10632 00000C44 68                      		db 68h			; SENSE_MEDIA_TYPE
 10633                                  
 10634                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 10635                                  
 10636                                  ; ---------------------------------------------------------------------------
 10637                                  
 10638                                  ; 16/10/2022
 10639                                  
 10640                                  ; ==========================================================================
 10641                                  ; Do_Generic_IOCtl: perform generic ioctl request
 10642                                  ;
 10643                                  ;    input: AL contains logical drive
 10644                                  ;
 10645                                  ;	functions are dispatched through a call. On return, carry indicates
 10646                                  ;	error code in al. Note::bES:b& ds undefined on return from
 10647                                  ;	subfunctions.
 10648                                  ;
 10649                                  ; ==========================================================================
 10650                                  
 10651                                  ; 11/03/2019
 10652                                  		; 19/10/2022
 10653                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 10654 00000C45 E883F8                  		call	SetDrive	; ES:DI	Points to bds for drive
 10655 00000C48 06                      		push	es
 10656 00000C49 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 10657 00000C4D 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 10658                                  					; RAWIO
 10659 00000C52 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 10660 00000C56 07                      		pop	es
 10661 00000C57 7525                    		jnz	short IoctlFuncErr
 10662                                  
 10663                                  		; cas note: Could do the above two blocks in reverse order.
 10664                                  		; Would have to preserve al for SetDrive
 10665                                  
 10666                                  		; 10/12/2022
 10667 00000C59 BE[160C]                		mov	si, IoReadJumpTable
 10668                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 10669                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 10670 00000C5C A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 10671 00000C5E 7503                    		jnz	short NotGenericWrite ; function is a read.
 10672                                  		; 10/12/2022
 10673 00000C60 BE[290C]                		mov	si, IoWriteJumpTable
 10674                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 10675                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 10676                                  NotGenericWrite:			
 10677 00000C63 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 10678 00000C65 2C40                    		sub	al, 40h		; offset for base function
 10679 00000C67 2E3A04                  		cmp	al, [cs:si]
 10680 00000C6A 7712                    		ja	short IoctlFuncErr
 10681 00000C6C 98                      		cbw
 10682 00000C6D D1E0                    		shl	ax, 1
 10683 00000C6F 46                      		inc	si
 10684 00000C70 01C6                    		add	si, ax
 10685 00000C72 2EFF14                  		call	near [cs:si]
 10686                                  		;call	word ptr cs:[si]
 10687 00000C75 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10688                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10689                                  					; 2C7h:30h = 70h:25A0h
 10690 00000C7A B481                    		mov	ah, 81h		; Return this status in	case of	carry
 10691 00000C7C C3                      		retn			; Pass carry flag through to exit code
 10692                                  ; ---------------------------------------------------------------------------
 10693                                  
 10694                                  		; Cmd_Error_Proc is called as a procedure and also use
 10695                                  		; as a fall through from above
 10696                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 10697 00000C7D 5A                      		pop	dx
 10698                                  
 10699                                  IoctlFuncErr:				
 10700 00000C7E E954F4                  		jmp	bc_cmderr
 10701                                  ; ---------------------------------------------------------------------------
 10702                                  
 10703                                  ; 16/10/2022
 10704                                  
 10705                                  ; ==========================================================================
 10706                                  ;**	GetDeviceParameters:
 10707                                  ;
 10708                                  ;	GetDeviceParameters implements the generic ioctl function:
 10709                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 10710                                  ;
 10711                                  ;	ENTRY	(ES:di) = BDS for drive
 10712                                  ;		PtrSav = long pointer to request header
 10713                                  ;	EXIT	??? BUGBUG
 10714                                  ;	USES	??? BUGBUG
 10715                                  ; ==========================================================================
 10716                                  
 10717                                  		; 19/10/2022
 10718                                  GetDeviceParameters:
 10719                                  		; Copy info from bds to the device parameters packet
 10720                                  
 10721 00000C81 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 10722 00000C85 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 10723                                  					; (DS:BX) = return buffer
 10724 00000C88 268A4522                		mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 10725 00000C8C 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 10726 00000C8F 268B4523                		mov	ax, [es:di+35]	; [es:di+BDS.flags]
 10727 00000C93 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 10728                                  					; Mask off other bits
 10729 00000C96 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 10730 00000C99 268B4525                		mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 10731 00000C9D 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 10732 00000CA0 30C0                    		xor	al, al		; Set media type to default
 10733 00000CA2 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 10734                                  					
 10735                                  		; copy recommended bpb
 10736 00000CA5 8D7527                  		lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 10737 00000CA8 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10738                                  					; BUILD_DEVICE_BPB
 10739 00000CAB 7412                    		jz	short UseBpbPresent
 10740 00000CAD 1E                      		push	ds		; Save request packet segment
 10741 00000CAE 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10742                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10743                                  					; 2C7h:30h = 70h:25A0h
 10744                                  					; Point back to Bios_Data
 10745 00000CB3 E885FB                  		call	checksingle
 10746 00000CB6 E83EF9                  		call	GetBp		; Build	the bpb	from scratch
 10747 00000CB9 1F                      		pop	ds		; Restore request packet segment
 10748 00000CBA 720F                    		jb	short GetParmRet
 10749 00000CBC 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 10750                                  					; Use this subfield of bds instead
 10751                                  UseBpbPresent:				
 10752 00000CBF 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 10753                                  					; This is where	the result goes
 10754 00000CC2 B91900                  		mov	cx, 25		; A_BPB.size - 6
 10755                                  					; For now use 'small' bpb
 10756 00000CC5 1E                      		push	ds		; reverse segments for copy
 10757 00000CC6 06                      		push	es
 10758 00000CC7 1F                      		pop	ds
 10759 00000CC8 07                      		pop	es
 10760 00000CC9 F3A4                    		rep movsb
 10761                                  		
 10762                                  		; 12/12/2022
 10763                                  		; cf=0 (test instruction -above- resets cf) 	
 10764                                  		;clc
 10765                                  GetParmRet:				
 10766 00000CCB C3                      		retn
 10767                                  ; ---------------------------------------------------------------------------
 10768                                  
 10769                                  ; 17/10/2022
 10770                                  ; 16/10/2022
 10771                                  
 10772                                  ; ==========================================================================
 10773                                  ; SetDeviceParameters:
 10774                                  ;
 10775                                  ; input: ES:di points to bds for drive
 10776                                  ; ==========================================================================
 10777                                  
 10778                                  		; 19/10/2022
 10779                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 10780 00000CCC C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 10781 00000CD0 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 10782 00000CD3 26814D234001            		or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 10783                                  					; fchanged_by_format|fchanged
 10784 00000CD9 F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10785                                  					; ONLY_SET_TRACKLAYOUT
 10786 00000CDC 7579                    		jnz	short setTrackTable
 10787 00000CDE 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 10788 00000CE1 26884522                		mov	[es:di+34], al	; [es:di+BDS.formfactor]
 10789 00000CE5 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 10790 00000CE8 26894525                		mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 10791 00000CEC 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 10792 00000CEF 1E                      		push	ds
 10793                                  		; 17/10/2022
 10794 00000CF0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10795                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10796                                  					; 2C7h:30h = 70h:25A0h
 10797                                  		;cmp	byte [fhave96], 0
 10798 00000CF5 803E[7700]00            		cmp	byte [fhave96], 0
 10799 00000CFA 1F                      		pop	ds
 10800 00000CFB 7502                    		jnz	short HaveChange ; we have changeline support
 10801                                  		; 10/12/2022
 10802 00000CFD 24FD                    		and	al, 0FDh
 10803                                  		;and	ax, 0FFFDh	; ~fchangeline
 10804                                  
 10805                                  		; Ignore all bits except non_removable and changeline
 10806                                  HaveChange:				
 10807 00000CFF 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 10808 00000D02 268B4D23                		mov	cx, [es:di+35]	; [es:di+BDS.flags]
 10809 00000D06 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 10810 00000D0A 09C8                    		or	ax, cx
 10811 00000D0C 26894523                		mov	[es:di+35], ax	; [es:di+BDS.flags]
 10812 00000D10 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 10813                                  					; Set media type
 10814 00000D13 1E                      		push	ds
 10815 00000D14 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10816                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10817 00000D19 A2[3706]                		mov	[mediatype], al
 10818                                  		;mov	ds:mediatype, al
 10819 00000D1C 1F                      		pop	ds
 10820                                  
 10821                                  		; The media changed (maybe) so we will have to do a set dasd
 10822                                  		; the next time we format a track
 10823                                  
 10824                                  		; 10/12/2022
 10825 00000D1D 26804D2380              		or	byte [es:di+35], 80h
 10826                                  		;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 10827                                  					; set_dasd_true
 10828 00000D22 57                      		push	di		; Save bds pointer
 10829                                  
 10830                                  		; Figure out what we are supposed to do with the bpb
 10831                                  		; were we asked to install a fake bpb?
 10832                                  
 10833 00000D23 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10834                                  					; INSTALL_FAKE_BPB
 10835 00000D26 7514                    		jnz	short InstallFakeBpb
 10836                                  
 10837                                  		; were we returning a fake bpb when asked to build a bpb?
 10838                                  
 10839                                  		; 10/12/2022
 10840 00000D28 26F6452304              		test	byte [es:di+35], 4
 10841                                  		;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 10842                                  					; return_fake_bpb
 10843 00000D2D 7405                    		jz	short InstallRecommendedBpb
 10844                                  
 10845                                  		; we were returning a fake bpb but we can stop now
 10846                                  
 10847                                  		; 10/12/2022
 10848 00000D2F 26806523FB              		and	byte [es:di+35], 0FBh
 10849                                  		;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 10850                                  					; ~return_fake_bpb
 10851                                  InstallRecommendedBpb:			
 10852 00000D34 B91F00                  		mov	cx, 31		; A_BPB.size
 10853 00000D37 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 10854 00000D3A EB0B                    		jmp	short CopyTheBpb
 10855                                  ; ---------------------------------------------------------------------------
 10856                                  
 10857                                  InstallFakeBpb:
 10858                                  		; 10/12/2022
 10859 00000D3C 26804D2304              		or	byte [es:di+35], 4				
 10860                                  		;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 10861                                  					; return_fake_bpb
 10862 00000D41 B91900                  		mov	cx, 25		; A_BPB.size - 6
 10863                                  					; move 'smaller' bpb
 10864 00000D44 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 10865                                  
 10866                                  CopyTheBpb:				
 10867 00000D47 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 10868 00000D4A F3A4                    		rep movsb
 10869 00000D4C 1E                      		push	ds		; Save packet segment
 10870                                  		; 17/10/2022
 10871 00000D4D 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10872                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10873                                  					; Setup	for ds -> Bios_Data
 10874 00000D52 E8DA03                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 10875 00000D55 1F                      		pop	ds		; Restore packet segment
 10876 00000D56 5F                      		pop	di		; Restore bds pointer
 10877                                  setTrackTable:				
 10878 00000D57 8B4F26                  		mov	cx, [bx+38]
 10879 00000D5A 1E                      		push	ds
 10880 00000D5B 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10881 00000D60 890E[3905]              		mov	[sectorspertrack], cx
 10882 00000D64 1F                      		pop	ds
 10883                                  		; 10/12/2022
 10884 00000D65 26806523F7              		and	byte [es:di+35], 0F7h
 10885                                  		;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 10886                                  					; ~good_tracklayout
 10887 00000D6A F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10888                                  					; TRACKLAYOUT_IS_GOOD
 10889 00000D6D 7405                    		jz	short UglyTrackLayOut
 10890                                  		; 10/12/2022
 10891 00000D6F 26804D2308              		or	byte [es:di+35], 8
 10892                                  		;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 10893                                  					; good_tracklayout
 10894                                  UglyTrackLayOut:			
 10895 00000D74 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 10896 00000D77 771A                    		ja	short TooManyPerTrack
 10897                                  		;jcxz	short SectorInfoSaved
 10898 00000D79 E316                    		jcxz	SectorInfoSaved	; 19/10/2022
 10899 00000D7B BF[3B05]                		mov	di, tracktable
 10900 00000D7E 8D7728                  		lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 10901                                  		; 17/10/2022
 10902 00000D81 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 10903                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10904                                  					; Trash	our bds	pointer
 10905                                  StoreSectorInfo:			
 10906 00000D86 47                      		inc	di
 10907 00000D87 47                      		inc	di		; Skip over cylinder and head
 10908 00000D88 AD                      		lodsw			; Get sector id
 10909 00000D89 AA                      		stosb			; Copy it
 10910 00000D8A AD                      		lodsw			; Get sector size
 10911 00000D8B E8E301                  		call	SectSizeToSectIndex
 10912 00000D8E AA                      		stosb			; Store	sector SIZE index
 10913 00000D8F E2F5                    		loop	StoreSectorInfo
 10914                                  SectorInfoSaved:			
 10915 00000D91 F8                      		clc
 10916 00000D92 C3                      		retn
 10917                                  ; ---------------------------------------------------------------------------
 10918                                  
 10919                                  TooManyPerTrack:			
 10920 00000D93 B00C                    		mov	al, 0Ch
 10921 00000D95 F9                      		stc
 10922 00000D96 C3                      		retn
 10923                                  ; ---------------------------------------------------------------------------
 10924                                  
 10925                                  ; 16/10/2022
 10926                                  
 10927                                  ; ==========================================================================
 10928                                  ; FormatTrack:
 10929                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 10930                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 10931                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 10932                                  ;
 10933                                  ; input: ES:di points to bds for drive
 10934                                  ;
 10935                                  ; output:
 10936                                  ;	for status call:
 10937                                  ;	specialfunction byte set to:
 10938                                  ;		0 - rom support + legal combination
 10939                                  ;		1 - no rom support
 10940                                  ;		2 - illegal combination
 10941                                  ;		3 - no media present
 10942                                  ;	carry cleared.
 10943                                  ;
 10944                                  ;	for format track:
 10945                                  ;		carry set if error
 10946                                  ;
 10947                                  ; ==========================================================================
 10948                                  
 10949                                  ; 16/03/2019
 10950                                  
 10951                                  		; 19/10/2022
 10952                                  FormatTrack:
 10953 00000D97 C51E[1200]              		lds	bx, [ptrsav]
 10954 00000D9B C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 10955 00000D9E F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10956                                  					; STATUS_FOR_FORMAT
 10957 00000DA1 740E                    		jz	short DoFormatTrack
 10958 00000DA3 1E                      		push	ds
 10959                                  		; 17/10/2022
 10960 00000DA4 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10961                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10962 00000DA9 E83902                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 10963 00000DAC 1F                      		pop	ds
 10964 00000DAD 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10965 00000DAF F8                      		clc
 10966 00000DB0 C3                      		retn
 10967                                  ; ---------------------------------------------------------------------------
 10968                                  
 10969                                  DoFormatTrack:				
 10970 00000DB1 26807D2205              		cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 10971                                  					; DEV_HARDDISK
 10972 00000DB6 7508                    		jnz	short DoFormatDiskette
 10973                                  		; 17/10/2022
 10974 00000DB8 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10975                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10976                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 10977 00000DBD E99C00                  		jmp	VerifyTrack
 10978                                  ; ---------------------------------------------------------------------------
 10979                                  
 10980                                  DoFormatDiskette:			
 10981 00000DC0 8B4F01                  		mov	cx, [bx+1]
 10982 00000DC3 8B5703                  		mov	dx, [bx+3]
 10983 00000DC6 F60702                  		test	byte [bx], 2
 10984                                  		; 17/10/2022
 10985 00000DC9 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10986                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10987                                  					; Setup	ds-> Bios_Data for verify
 10988 00000DCE 7403                    		jz	short DoFormatDiskette_1
 10989 00000DD0 E9E400                  		jmp	VerifyTrack_Err
 10990                                  ; ---------------------------------------------------------------------------
 10991                                  
 10992                                  DoFormatDiskette_1:			
 10993 00000DD3 E80F02                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 10994 00000DD6 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 10995 00000DD8 7406                    		jz	short NeedToSetDasd ; Old rom
 10996 00000DDA 3C03                    		cmp	al, 3		; Time out error?
 10997 00000DDC 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 10998                                  					; about	the illegal combination)
 10999 00000DDE EB67                    		jmp	short FormatFailed
 11000                                  ; ---------------------------------------------------------------------------
 11001                                  
 11002                                  NeedToSetDasd:				
 11003 00000DE0 52                      		push	dx
 11004 00000DE1 E8A001                  		call	SetDasd		; INT 13h, AH=17h
 11005 00000DE4 5A                      		pop	dx
 11006                                  NoSetDasd:				
 11007 00000DE5 E853FA                  		call	checksingle	; Do any needed	diskette swapping
 11008 00000DE8 89D0                    		mov	ax, dx		; Get track from packet
 11009 00000DEA A3[3901]                		mov	[trknum], ax
 11010 00000DED 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 11011 00000DF1 88CC                    		mov	ah, cl
 11012 00000DF3 BB[3B05]                		mov	bx, tracktable
 11013 00000DF6 8B0E[3905]              		mov	cx, [sectorspertrack]
 11014                                  
 11015                                  StoreCylinderHead:			
 11016 00000DFA 8907                    		mov	[bx], ax	; Store	into TrackTable
 11017 00000DFC 83C304                  		add	bx, 4		; Skip to next sector field
 11018 00000DFF E2F9                    		loop	StoreCylinderHead
 11019 00000E01 B90500                  		mov	cx, 5		; MAXERR - Set up retry	count
 11020                                  FormatRetry:				
 11021 00000E04 51                      		push	cx
 11022 00000E05 BB[3B05]                		mov	bx, tracktable
 11023 00000E08 A0[3905]                		mov	al, [sectorspertrack]
 11024 00000E0B B405                    		mov	ah, 5		; romformat
 11025 00000E0D 8C1E[3705]              		mov	[xfer_seg], ds
 11026 00000E11 E87F02                  		call	ToRom
 11027 00000E14 59                      		pop	cx
 11028 00000E15 7216                    		jb	short FormatError
 11029 00000E17 51                      		push	cx		; Now verify the sectors just formatted.
 11030                                  					; NOTE:	because	of bug in some BIOSes we have to
 11031                                  					;	set ES:BX to 00:00
 11032 00000E18 53                      		push	bx
 11033 00000E19 31DB                    		xor	bx, bx
 11034 00000E1B 891E[3705]              		mov	[xfer_seg], bx
 11035 00000E1F A0[3905]                		mov	al, [sectorspertrack]
 11036 00000E22 B404                    		mov	ah, 4		; romverify
 11037 00000E24 B101                    		mov	cl, 1
 11038 00000E26 E86A02                  		call	ToRom
 11039 00000E29 5B                      		pop	bx
 11040 00000E2A 59                      		pop	cx
 11041 00000E2B 7329                    		jnb	short FormatOk
 11042                                  FormatError:				
 11043 00000E2D E84B02                  		call	ResetDisk
 11044 00000E30 C606[3906]01            		mov	byte [had_format_error], 1
 11045 00000E35 50                      		push	ax
 11046 00000E36 51                      		push	cx
 11047 00000E37 52                      		push	dx
 11048 00000E38 E8AA01                  		call	SetMediaForFormat
 11049 00000E3B 3C01                    		cmp	al, 1
 11050 00000E3D 7503                    		jnz	short WhileErr
 11051 00000E3F E84201                  		call	SetDasd
 11052                                  WhileErr:				
 11053 00000E42 5A                      		pop	dx
 11054 00000E43 59                      		pop	cx
 11055 00000E44 58                      		pop	ax
 11056 00000E45 E2BD                    		loop	FormatRetry
 11057                                  FormatFailed:				
 11058 00000E47 C606[3906]01            		mov	byte [had_format_error], 1
 11059                                  					; Set the format error flag
 11060 00000E4C 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 11061 00000E4F 7502                    		jnz	short DoMapIt	; Error	to time	out error
 11062 00000E51 B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 11063                                  DoMapIt:				
 11064 00000E53 E97AFD                  		jmp	maperror
 11065                                  ; ---------------------------------------------------------------------------
 11066                                  
 11067                                  FormatOk:				
 11068 00000E56 C606[3906]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 11069 00000E5B C3                      		retn
 11070                                  ; ---------------------------------------------------------------------------
 11071                                  
 11072                                  ; 16/10/2022
 11073                                  
 11074                                  ; ==========================================================================
 11075                                  ;
 11076                                  ; VerifyTrack:
 11077                                  ;
 11078                                  ; input: ES:di points to bds for drive
 11079                                  ; ==========================================================================
 11080                                  
 11081                                  VerifyTrack:				
 11082 00000E5C 1E                      		push	ds
 11083 00000E5D C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 11084 00000E61 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11085                                  
 11086                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 11087                                  
 11088 00000E64 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 11089 00000E67 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 11090 00000E6A 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 11091 00000E6D 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 11092                                  					; Get option flag word
 11093 00000E6F 1F                      		pop	ds
 11094 00000E70 C606[2001]04            		mov	byte [rflag], 4	; romverify
 11095 00000E75 890E[3301]              		mov	[curtrk], cx
 11096 00000E79 A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 11097 00000E7C 8B0E[3905]              		mov	cx, [sectorspertrack]
 11098                                  
 11099                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 11100                                  		; specified if not we should go to the normal track verification
 11101                                  		; routine. If fast format has been specified we should get the
 11102                                  		; number of tracks to be verified and check it to see if it is
 11103                                  		; > 255. If it is then it is an error and we should go to
 11104                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 11105                                  		; sectors per track to get the total number of sectors to be
 11106                                  		; verified. This should also be less than equal to 255
 11107                                  		; otherwise we go to same error exit. If everything is okay
 11108                                  		; we initalise cx to the total sectors. use ax as a temporary
 11109                                  		; register.
 11110                                  
 11111                                  					; Special function requested?	
 11112 00000E80 F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 11113 00000E83 7421                    		jz	short NormVerifyTrack
 11114 00000E85 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 11115 00000E87 08E4                    		or	ah, ah
 11116 00000E89 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 11117 00000E8B F6E1                    		mul	cl
 11118 00000E8D 08E4                    		or	ah, ah
 11119 00000E8F 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 11120 00000E91 89C1                    		mov	cx, ax
 11121                                  		; 10/12/2022
 11122 00000E93 26F6452301              		test	byte [es:di+35], 1
 11123                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11124                                  					; fnon_removable
 11125 00000E98 740C                    		jz	short NormVerifyTrack
 11126                                  					; Multitrack operation = on?
 11127                                  		; 10/12/2022
 11128                                  		; 19/10/2022
 11129 00000E9A F606[2F05]80            		test	byte [multrk_flag], 80h
 11130                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11131                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 11132 00000E9F 7405                    		jz	short NormVerifyTrack
 11133 00000EA1 C606[3605]01            		mov	byte [multitrk_format_flag], 1
 11134                                  NormVerifyTrack:			
 11135 00000EA6 31C0                    		xor	ax, ax		; 1st sector
 11136 00000EA8 31DB                    		xor	bx, bx
 11137 00000EAA 891E[3705]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 11138 00000EAE E83F00                  		call	TrackIo
 11139 00000EB1 C606[3605]00            		mov	byte [multitrk_format_flag], 0
 11140 00000EB6 C3                      		retn
 11141                                  ; ---------------------------------------------------------------------------
 11142                                  
 11143                                  VerifyTrack_Err:			
 11144 00000EB7 B401                    		mov	ah, 1
 11145 00000EB9 E914FD                  		jmp	maperror
 11146                                  ; ---------------------------------------------------------------------------
 11147                                  
 11148                                  ; 16/10/2022
 11149                                  
 11150                                  ; ==========================================================================
 11151                                  ;
 11152                                  ; ReadTrack:
 11153                                  ;
 11154                                  ; input: ES:di points to bds for drive
 11155                                  ;
 11156                                  ; ==========================================================================
 11157                                  
 11158                                  ReadTrack:				
 11159 00000EBC C606[2001]02            		mov	byte [rflag], 2	; romread
 11160 00000EC1 EB05                    		jmp	short ReadWriteTrack
 11161                                  ; ---------------------------------------------------------------------------
 11162                                  
 11163                                  WriteTrack:
 11164                                  
 11165                                  ; ==========================================================================
 11166                                  ;
 11167                                  ; WriteTrack:
 11168                                  ;
 11169                                  ; input: ES:di points to bds for drive
 11170                                  ;
 11171                                  ; ==========================================================================
 11172                                  				
 11173 00000EC3 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 11174                                  
 11175                                  		; Fall into ReadWriteTrack
 11176                                  
 11177                                  ; ==========================================================================
 11178                                  ;
 11179                                  ; readWriteTrack:
 11180                                  ;
 11181                                  ; input:
 11182                                  ;    ES:di points to bds for drive
 11183                                  ;    rFlag - 2 for read,3 for write
 11184                                  ;
 11185                                  ; ==========================================================================
 11186                                  
 11187                                  ReadWriteTrack:	
 11188                                  		; save bds pointer segment so we can use it to access
 11189                                  		; our packet. Notice that this is not the standard register
 11190                                  		; assignment for accessing packets
 11191                                  		
 11192                                  		; 19/10/2022	
 11193 00000EC8 06                      		push	es
 11194 00000EC9 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 11195 00000ECD 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11196 00000ED1 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 11197 00000ED5 A3[3301]                		mov	[curtrk], ax
 11198 00000ED8 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 11199 00000EDC A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 11200 00000EDF 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 11201 00000EE3 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 11202 00000EE7 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 11203                                  					; Get transfer address
 11204                                  
 11205                                  		; we just trashed our packet address, but we no longer care
 11206                                  
 11207 00000EEB 8C06[3705]              		mov	[xfer_seg], es	; Pass transfer	segment
 11208 00000EEF 07                      		pop	es
 11209                                  
 11210                                  		; Fall into TrackIo
 11211                                  
 11212                                  ; =============== S U B	R O U T	I N E =======================================
 11213                                  
 11214                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11215                                  
 11216                                  ; ==========================================================================
 11217                                  ;
 11218                                  ; TrackIo:
 11219                                  ;    performs track read/write/verify
 11220                                  ;
 11221                                  ;   input:
 11222                                  ;      rFlag	- 2 = read
 11223                                  ;		  3 = write
 11224                                  ;		  4 = verify
 11225                                  ;      AX	- Index into track table of first sector to io
 11226                                  ;      CX	- Number of sectors to io
 11227                                  ;      Xfer_Seg:BX - Transfer address
 11228                                  ;      ES:DI	- Pointer to bds
 11229                                  ;      CurTrk	- Current cylinder
 11230                                  ;      CurHd	- Current head
 11231                                  ;
 11232                                  ; ==========================================================================
 11233                                  
 11234                                  ; 16/03/2019 - Retro DOS v4.0
 11235                                  		
 11236                                  		; 19/10/2022
 11237                                  TrackIo:	
 11238                                  					; Procedure `disk' will pop stack to
 11239 00000EF0 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 11240 00000EF4 E844F9                  		call	checksingle	; Ensure correct disk is in drv
 11241 00000EF7 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11242                                  					; See if we have already set	disk
 11243 00000EFC 7407                    		jz	short Dptalreadyset ; base table
 11244 00000EFE 50                      		push	ax		; set up tables	and variables for i/o
 11245 00000EFF 51                      		push	cx
 11246 00000F00 E896FA                  		call	iosetup
 11247 00000F03 59                      		pop	cx
 11248 00000F04 58                      		pop	ax
 11249                                  Dptalreadyset:				; Point si at the table entry of the			
 11250 00000F05 BE[3B05]                		mov	si, tracktable	; first sector to be io'd
 11251 00000F08 D1E0                    		shl	ax, 1
 11252 00000F0A D1E0                    		shl	ax, 1
 11253 00000F0C 01C6                    		add	si, ax
 11254                                  
 11255                                  		; WE WANT:
 11256                                  		; CX to	be the number of times we have to loop
 11257                                  		; DX to	be the number of sectors we read on each iteration
 11258                                  		
 11259 00000F0E BA0100                  		mov	dx, 1
 11260                                  		; 12/12/2022
 11261 00000F11 26F6452308              		test	byte [es:di+23h], 8
 11262                                  		;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 11263                                  					; good_tracklayout
 11264 00000F16 7402                    		jz	short ionextsector
 11265                                  		
 11266 00000F18 87D1                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 11267                                  ionextsector:				
 11268 00000F1A 51                      		push	cx
 11269 00000F1B 52                      		push	dx
 11270 00000F1C 46                      		inc	si
 11271 00000F1D 46                      		inc	si		; Skip over the	cylinder and head in
 11272                                  					; the track table
 11273 00000F1E AC                      		lodsb			; Get sector ID	from track table
 11274 00000F1F A2[3101]                		mov	[cursec], al
 11275                                  
 11276                                  		; assumptions for a fixed disk multi-track disk	i/o
 11277                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 11278                                  		;     only CL is valid.
 11279                                  		; 2). Sector size should be set	to 512 bytes.
 11280                                  		; 3). Good track layout
 11281                                  		
 11282                                  		; 12/12/2022
 11283 00000F22 26F6452301              		test	byte [es:di+23h], 1
 11284                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11285                                  					; fnon_removable ; Fixed disk?
 11286 00000F27 7414                    		jz	short IoRemovable ; No
 11287                                  		; 12/12/2022
 11288 00000F29 F606[2F05]80            		test	byte [multrk_flag], 80h
 11289                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11290                                  						; Allow multi-track operation?
 11291 00000F2E 740D                    		jz	short IoRemovable ; No,don't do that.
 11292 00000F30 8916[2201]              		mov	[seccnt], dx
 11293 00000F34 89D0                    		mov	ax, dx
 11294 00000F36 E81DFB                  		call	Disk
 11295 00000F39 5A                      		pop	dx
 11296 00000F3A 59                      		pop	cx
 11297 00000F3B F8                      		clc
 11298 00000F3C C3                      		retn
 11299                                  ; ---------------------------------------------------------------------------
 11300                                  
 11301                                  IoRemovable:				
 11302 00000F3D AC                      		lodsb			; Get sector size index	from track
 11303                                  					; table	and save it
 11304 00000F3E 50                      		push	ax
 11305 00000F3F 56                      		push	si
 11306 00000F40 1E                      		push	ds		; Save Bios_Data
 11307 00000F41 50                      		push	ax
 11308 00000F42 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 11309                                  					; Fetch	EOT while ds-> Bios_Data
 11310 00000F46 C536[2D01]              		lds	si, [dpt]
 11311 00000F4A 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 11312 00000F4D 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 11313 00000F50 58                      		pop	ax
 11314 00000F51 1F                      		pop	ds
 11315 00000F52 88D0                    		mov	al, dl
 11316 00000F54 A3[2201]                		mov	[seccnt], ax
 11317 00000F57 E8FCFA                  		call	Disk
 11318 00000F5A 5E                      		pop	si		; Advance buffer pointer by adding
 11319                                  					; sector size
 11320 00000F5B 58                      		pop	ax
 11321 00000F5C E81D00                  		call	SectorSizeIndexToSectorSize
 11322 00000F5F 01C3                    		add	bx, ax
 11323 00000F61 5A                      		pop	dx
 11324 00000F62 59                      		pop	cx
 11325 00000F63 E2B5                    		loop	ionextsector
 11326 00000F65 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11327                                  		;jz	short NoNeedDone
 11328                                  		; 12/12/2022
 11329 00000F6A 7404                    		je	short NoNeedDone2
 11330 00000F6C E872FA                  		call	done		; set time of last access, and reset
 11331                                  					; entries in Dpt.
 11332                                  NoNeedDone:				
 11333 00000F6F F8                      		clc
 11334                                  NoNeedDone2:
 11335 00000F70 C3                      		retn
 11336                                  
 11337                                  ; =============== S U B	R O U T	I N E =======================================
 11338                                  
 11339                                  ; ---------------------------------------------------------------------------
 11340                                  ;
 11341                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 11342                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 11343                                  ; are permissible.
 11344                                  ;
 11345                                  ; On Input   AX contains sector size in bytes
 11346                                  ; On Output  AL Contains index
 11347                                  ; All other registers preserved
 11348                                  ;
 11349                                  ; ---------------------------------------------------------------------------
 11350                                  
 11351                                  SectSizeToSectIndex:	
 11352 00000F71 80FC02                  		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 11353                                  					; examine upper	byte only
 11354 00000F74 7703                    		ja	short OneK
 11355 00000F76 88E0                    		mov	al, ah		; value	in AH is the index!
 11356 00000F78 C3                      		retn
 11357                                  ; ---------------------------------------------------------------------------
 11358                                  
 11359                                  OneK:					
 11360 00000F79 B003                    		mov	al, 3
 11361 00000F7B C3                      		retn
 11362                                  
 11363                                  ; =============== S U B	R O U T	I N E =======================================
 11364                                  
 11365                                  
 11366                                  SectorSizeIndexToSectorSize:
 11367 00000F7C 88C1                    		mov	cl, al
 11368 00000F7E B88000                  		mov	ax, 128
 11369 00000F81 D3E0                    		shl	ax, cl
 11370 00000F83 C3                      		retn
 11371                                  
 11372                                  ; =============== S U B	R O U T	I N E =======================================
 11373                                  
 11374                                  ; 16/10/2022
 11375                                  
 11376                                  ; ---------------------------------------------------------------------------
 11377                                  ;
 11378                                  ; SetDASD
 11379                                  ;
 11380                                  ; Set up the rom for formatting.
 11381                                  ; we have to tell the rom bios what type of disk is in the drive.
 11382                                  ;
 11383                                  ; On Input   - ES:di - Points to bds
 11384                                  ;
 11385                                  ; ---------------------------------------------------------------------------
 11386                                  
 11387                                  		; 19/10/2022
 11388                                  SetDasd:	
 11389 00000F84 803E[3906]01            		cmp	byte [had_format_error], 1 ;
 11390                                  					; See if we've previously set dasd type
 11391 00000F89 740C                    		jz	short DoSetDasd
 11392                                  		; 10/12/2022
 11393 00000F8B 26F6452380              		test	byte [es:di+23h], 80h
 11394                                  		;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 11395                                  					; set_dasd_true
 11396 00000F90 744A                    		jz	short DasdHasBeenSet
 11397                                  		; 10/12/2022
 11398 00000F92 268065237F              		and	byte [es:di+23h], 7Fh
 11399                                  		;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 11400                                  					; ~set_dasd_true
 11401                                  DoSetDasd:				
 11402 00000F97 C606[3906]00            		mov	byte [had_format_error], 0 ; Reset it
 11403 00000F9C C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 11404 00000FA1 B004                    		mov	al, 4
 11405 00000FA3 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11406                                  					; DEV_3INCH720KB
 11407 00000FA8 741A                    		jz	short DoSet
 11408 00000FAA 26807D2201              		cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 11409                                  					; DEV_5INCH96TPI
 11410 00000FAF 7404                    		jz	short GotBig
 11411 00000FB1 B001                    		mov	al, 1
 11412 00000FB3 EB0F                    		jmp	short DoSet
 11413                                  ; ---------------------------------------------------------------------------
 11414                                  
 11415                                  GotBig:					
 11416 00000FB5 B002                    		mov	al, 2		; 160/320k in a	1.2 meg	drive
 11417 00000FB7 803E[3706]00            		cmp	byte [mediatype], 0
 11418 00000FBC 7506                    		jnz	short DoSet
 11419                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 11420                                  		; 10/12/2022
 11421                                  		;inc	al  ; al = 3
 11422                                  		; 18/12/2022
 11423 00000FBE 40                      		inc	ax  ; al = 3
 11424 00000FBF C606[3B01]54            		mov	byte [gap_patch], 54h
 11425                                  DoSet:					
 11426 00000FC4 1E                      		push	ds
 11427 00000FC5 56                      		push	si
 11428 00000FC6 8E1E[1A00]              		mov	ds, [zeroseg]	; Point	to interrupt vectors
 11429                                  
 11430 00000FCA C5367800                		lds	si, [DSKADR]
 11431                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 11432                                  		;;lds	si, ds:78h		
 11433                                  
 11434 00000FCE C644090F                		mov	byte [si+9], 0Fh ;
 11435                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 11436 00000FD2 5E                      		pop	si
 11437 00000FD3 1F                      		pop	ds
 11438 00000FD4 B417                    		mov	ah, 17h
 11439 00000FD6 268A5504                		mov	dl, [es:di+4]
 11440 00000FDA CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 11441                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 11442                                  DasdHasBeenSet:				
 11443 00000FDC 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 11444 00000FE0 8826[3701]              		mov	[formt_eot], ah
 11445 00000FE4 C3                      		retn
 11446                                  
 11447                                  ; =============== S U B	R O U T	I N E =======================================
 11448                                  
 11449                                  ; 16/10/2022
 11450                                  
 11451                                  ; ---------------------------------------------------------------------------
 11452                                  ;
 11453                                  ; Set Media Type for Format
 11454                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 11455                                  ; BPB area in the BDS can be handled by the rom.
 11456                                  ; On Input, ES:DI -> current BDS.
 11457                                  ; The status of the operation is returned in AL
 11458                                  ;
 11459                                  ;	- 0 - if the support is available,and the combination is valid.
 11460                                  ;	- 1 - no rom support
 11461                                  ;	- 2 - illegal combination
 11462                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 11463                                  ;
 11464                                  ; Flags also may be altered. All other registers preserved.
 11465                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 11466                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 11467                                  ; to the one returned. the original pointer to the disk base table is stored
 11468                                  ; in TempDpt, until it is restored.
 11469                                  ;
 11470                                  ; ---------------------------------------------------------------------------
 11471                                  
 11472                                  		; 19/10/2022
 11473                                  SetMediaForFormat:	
 11474 00000FE5 51                      		push	cx
 11475 00000FE6 52                      		push	dx
 11476                                  
 11477                                  		; If we have a format error, then do not change Dpt, TempDpt.
 11478                                  		; but we need to call int 13h, ah=18h again.
 11479                                  
 11480 00000FE7 803E[3906]01            		cmp	byte [had_format_error], 1
 11481 00000FEC 7425                    		jz	short SkipSaveDskAdr
 11482 00000FEE 30C0                    		xor	al, al		; If already done return 0
 11483 00000FF0 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11484 00000FF5 7502                    		jnz	short DoSetMediaForFormat
 11485 00000FF7 EB7F                    		jmp	SetMediaRet	; Media	already	set
 11486                                  ; ---------------------------------------------------------------------------
 11487                                  
 11488                                  DoSetMediaForFormat:			
 11489 00000FF9 06                      		push	es
 11490 00000FFA 56                      		push	si
 11491 00000FFB 8E06[1A00]              		mov	es, [zeroseg]	; Point to interrupt vectors
 11492 00000FFF 26C4367800              		les	si, [es:DSKADR]
 11493                                  		;les	si, es:78h	; [es:DSKADR]
 11494                                  					; Get pointer to disk base table
 11495 00001004 8936[2D01]              		mov	[dpt], si
 11496 00001008 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11497                                  
 11498                                  		; Initialize the head settle time to 0Fh. See the offsets
 11499                                  		; given in dskprm.inc.
 11500                                  
 11501 0000100C 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11502 00001011 5E                      		pop	si
 11503 00001012 07                      		pop	es
 11504                                  
 11505                                  SkipSaveDskAdr:				
 11506 00001013 268B4D25                		mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 11507 00001017 49                      		dec	cx
 11508 00001018 80E503                  		and	ch, 3
 11509 0000101B D0CD                    		ror	ch, 1
 11510 0000101D D0CD                    		ror	ch, 1
 11511 0000101F 86E9                    		xchg	ch, cl
 11512 00001021 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 11513 00001025 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 11514 00001029 06                      		push	es
 11515 0000102A 1E                      		push	ds
 11516 0000102B 56                      		push	si
 11517 0000102C 57                      		push	di
 11518 0000102D B418                    		mov	ah, 18h
 11519 0000102F CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 11520                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 11521 00001031 7233                    		jb	short FormaStatErr
 11522 00001033 803E[3906]01            		cmp	byte [had_format_error], 1
 11523 00001038 7425                    		jz	short skip_disk_base_setting
 11524 0000103A 06                      		push	es		; Save segment returned	by the rom
 11525 0000103B 8E06[1A00]              		mov	es, [zeroseg]	; Point	to interrupt vector segment
 11526 0000103F 26C4367800              		les	si, [es:DSKADR]
 11527                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 11528                                  					; Get current disk base	table
 11529 00001044 8936[3A06]              		mov	[tempdpt], si
 11530 00001048 8C06[3C06]              		mov	[tempdpt+2], es ; Save it
 11531 0000104C 8E06[1A00]              		mov	es, [zeroseg]
 11532                                  		;mov	es:78h,	di
 11533 00001050 26893E7800              		mov	[es:DSKADR], di
 11534                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 11535 00001055 268F067A00              		pop	word [es:DSKADR+2]
 11536 0000105A C606[3806]01            		mov	byte [media_set_for_format], 1
 11537                                  skip_disk_base_setting:			
 11538 0000105F 30C0                    		xor	al, al		; Legal	combination + rom support code
 11539                                  		;mov	ds:had_format_error, al	; Reset	the flag
 11540 00001061 A2[3906]                		mov	[had_format_error], al
 11541 00001064 EB0E                    		jmp	short PopStatRet
 11542                                  ; ---------------------------------------------------------------------------
 11543                                  
 11544                                  FormaStatErr:
 11545                                  		; 10/12/2022
 11546 00001066 B003                    		mov	al, 3
 11547                                  				
 11548 00001068 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 11549                                  					; Illegal combination =	0Ch
 11550 0000106B 7406                    		jz	short FormatStatIllegalComb
 11551 0000106D 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 11552 00001070 7402                    		jz	short FormatStatTimeOut
 11553                                  		; 10/12/2022
 11554                                  		;dec	al
 11555                                  		; 18/12/2022
 11556 00001072 48                      		dec	ax
 11557                                  		; al = 2
 11558                                  		;mov	al, 1		; Function not supported.
 11559                                  		;jmp	short PopStatRet
 11560                                  ; ---------------------------------------------------------------------------
 11561                                  
 11562                                  FormatStatIllegalComb:
 11563                                  		; 10/12/2022
 11564                                  		;dec	al	; 3 -> 2 or 2 -> 1
 11565                                  		; 18/12/2022
 11566 00001073 48                      		dec	ax
 11567                                  		; al = 2				
 11568                                  		;mov	al, 2		; Function supported, but
 11569                                  					; Illegal sect/trk,trk combination.
 11570                                  		; 10/12/2022
 11571                                  		;jmp	short PopStatRet
 11572                                  ; ---------------------------------------------------------------------------
 11573                                  
 11574                                  FormatStatTimeOut:			
 11575                                  		; 10/12/2022
 11576                                  		; al = 3
 11577                                  		;mov	al, 3		; Function supported, but
 11578                                  					; Media	not present.
 11579                                  PopStatRet:				
 11580 00001074 5F                      		pop	di
 11581 00001075 5E                      		pop	si
 11582 00001076 1F                      		pop	ds
 11583 00001077 07                      		pop	es
 11584                                  SetMediaRet:				
 11585 00001078 5A                      		pop	dx
 11586 00001079 59                      		pop	cx
 11587 0000107A C3                      		retn
 11588                                  
 11589                                  ; =============== S U B	R O U T	I N E =======================================
 11590                                  
 11591                                  ; 16/10/2022
 11592                                  
 11593                                  ; ---------------------------------------------------------------------------
 11594                                  ;
 11595                                  ; RESET THE DRIVE
 11596                                  ;
 11597                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 11598                                  ; slow head settle time for the next operation. this is because the reset
 11599                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 11600                                  ; time around - there is a problem with 3.5" drives in that the head does
 11601                                  ; not settle down in time,even for read operations!!
 11602                                  ;
 11603                                  ; ---------------------------------------------------------------------------
 11604                                  
 11605                                  ResetDisk:	
 11606 0000107B 50                      		push	ax
 11607 0000107C 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11608                                  					; Reset while formatting?
 11609 00001081 7505                    		jnz	short ResetDisk_cont
 11610                                  					; Then verify operation in "fmt & vrfy"
 11611 00001083 C606[3906]01            		mov	byte [had_format_error], 1 ; Might have failed.
 11612                                  ResetDisk_cont:				
 11613 00001088 30E4                    		xor	ah, ah		; So signals that we had a format error
 11614 0000108A CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 11615                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 11616 0000108C C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 11617                                  					; Zap up the speed
 11618 00001091 58                      		pop	ax
 11619 00001092 C3                      		retn
 11620                                  
 11621                                  ; =============== S U B	R O U T	I N E =======================================
 11622                                  
 11623                                  ; 16/10/2022
 11624                                  
 11625                                  ; ---------------------------------------------------------------------------
 11626                                  ;
 11627                                  ; This routine sets up the drive parameter table with the values needed for
 11628                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 11629                                  ;
 11630                                  ; on entry  -	ES:DI - points to bds for the drive
 11631                                  ;		Xfer_Seg:BX - points to trkbuf
 11632                                  ;		AL    - number of sectors
 11633                                  ;		AH    - int 13 function code
 11634                                  ;		CL    - sector number for verify
 11635                                  ;		DS    - Bios_Data
 11636                                  ;
 11637                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 11638                                  ;		AX and flags are the results of the int 13
 11639                                  ;
 11640                                  ; ---------------------------------------------------------------------------
 11641                                  
 11642                                  		; 19/10/2022
 11643                                  ToRom:	
 11644 00001093 53                      		push	bx
 11645 00001094 56                      		push	si
 11646                                  
 11647                                  		; Compaq bug fix - check whether we are using new ROM
 11648                                  		; functionality to set up format, not merely if it exists.
 11649                                  		; This was formerly a check against [new_rom]
 11650                                  
 11651 00001095 F606[3806]01            		test	byte [media_set_for_format], 1
 11652 0000109A 7536                    		jnz	short GotValidDpt
 11653 0000109C 50                      		push	ax
 11654 0000109D 06                      		push	es		; Save bds segment
 11655 0000109E 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11656                                  					; ffSmall ; is it a 3.5" drive?
 11657 000010A3 9C                      		pushf			; (Save	the cmp	result)
 11658 000010A4 8E06[1A00]              		mov	es, [zeroseg]
 11659                                  		;les	si, es:78h	; Get pointer to disk base table
 11660 000010A8 26C4367800              		les	si, [es:DSKADR]
 11661                                  		;mov	word ptr ds:dpt, si
 11662                                  		;mov	word ptr ds:dpt+2, es ;	 Save pointer to table
 11663 000010AD 8936[2D01]              		mov	[dpt], si
 11664 000010B1 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11665                                  		
 11666 000010B5 A0[3701]                		mov	al, [formt_eot]
 11667 000010B8 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 11668 000010BC A0[3B01]                		mov	al, [gap_patch]
 11669 000010BF 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 11670                                  					; Important for	format
 11671 000010C3 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11672                                  					; Assume we are	doing a	seek operation
 11673                                  					; Setup	motor start correctly for 3.5" drives
 11674 000010C8 9D                      		popf			; Get result of	earlier	cmp
 11675 000010C9 7505                    		jnz	short MotorStrtOK
 11676 000010CB 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 11677                                  MotorStrtOK:				
 11678 000010D0 07                      		pop	es		; Restore bds segment
 11679 000010D1 58                      		pop	ax
 11680                                  GotValidDpt:				
 11681 000010D2 8B16[3901]              		mov	dx, [trknum]	; Set track number
 11682 000010D6 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 11683 000010D8 268A5504                		mov	dl, [es:di+4]	; Set drive number
 11684 000010DC 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 11685 000010E0 06                      		push	es		; Save bds segment
 11686 000010E1 8E06[3705]              		mov	es, [xfer_seg]
 11687 000010E5 CD13                    		int	13h		; DISK -
 11688 000010E7 07                      		pop	es		; Restore bds segment
 11689 000010E8 5E                      		pop	si
 11690 000010E9 5B                      		pop	bx
 11691 000010EA C3                      		retn
 11692                                  
 11693                                  ; ---------------------------------------------------------------------------
 11694                                  
 11695                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11696                                  
 11697                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 11698                                  
 11699                                  ; ==========================================================================
 11700                                  ;
 11701                                  ; get the owner of the physical drive represented by the logical drive in al.
 11702                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 11703                                  ; if this is not the case, the system may hang, just following the linked list.
 11704                                  ;
 11705                                  ; ==========================================================================
 11706                                  
 11707                                  		; 19/10/2022
 11708                                  ioctl_getown:
 11709 000010EB E8DDF3                  		call	SetDrive
 11710 000010EE 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 11711                                  					; Get physical drive number
 11712 000010F2 C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 11713                                  ownloop:				
 11714 000010F6 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 11715 000010FA 7507                    		jnz	short getnextBDS
 11716                                  		; 10/12/2022
 11717 000010FC 26F6452320              		test	byte [es:di+23h], 20h
 11718                                  		;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 11719                                  					; fi_own_physical
 11720 00001101 7515                    		jnz	short exitown
 11721                                  getnextBDS:				
 11722 00001103 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 11723 00001106 EBEE                    		jmp	short ownloop
 11724                                  ; ---------------------------------------------------------------------------
 11725                                  
 11726                                  ; ==========================================================================
 11727                                  ;
 11728                                  ; set the ownership of the physical drive represented by the logical drive
 11729                                  ; in al to al.
 11730                                  ;
 11731                                  ; ==========================================================================
 11732                                  
 11733                                  		; 19/10/2022
 11734                                  ioctl_setown:
 11735 00001108 E8C0F3                  		call	SetDrive
 11736 0000110B C606[7A00]01            		mov	byte [fsetowner], 1
 11737                                  					; set flag for CheckSingle to look at.
 11738 00001110 E828F7                  		call	checksingle
 11739 00001113 C606[7A00]00            		mov	byte [fsetowner], 0
 11740                                  					; set ownership	of drive reset flag
 11741                                  		; Fall into ExitOwn
 11742                                  
 11743                                  ; ==========================================================================
 11744                                  ;
 11745                                  ; if there is only one logical drive assigned to this physical drive, return
 11746                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 11747                                  ;
 11748                                  ; ==========================================================================
 11749                                  
 11750                                  exitown:				
 11751 00001118 30C9                    		xor	cl, cl
 11752                                  		; 12/12/2022
 11753 0000111A 26F6452310              		test	byte [es:di+23h], 10h
 11754                                  		;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 11755                                  					; fi_am_mult
 11756 0000111F 7406                    		jz	short exitnomult
 11757 00001121 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 11758                                  					; Get logical drive number
 11759                                  					; Get it 1-based
 11760 00001125 FEC1                    		inc	cl
 11761                                  exitnomult:				
 11762 00001127 C51E[1200]              		lds	bx, [ptrsav]
 11763 0000112B 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 11764                                  					; Exit normal termination
 11765                                  		; 12/12/2022
 11766                                  		; cf=0
 11767                                  		;clc
 11768 0000112E C3                      		retn
 11769                                  
 11770                                  ; =============== S U B	R O U T	I N E =======================================
 11771                                  
 11772                                  ; 16/10/2022
 11773                                  
 11774                                  ; ---------------------------------------------------------------------------
 11775                                  ;
 11776                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 11777                                  ; only if the first byte of TempDpt is not -1.
 11778                                  ; all registers (including flags) are preserved.
 11779                                  ;
 11780                                  ; ---------------------------------------------------------------------------
 11781                                  
 11782                                  		; 19/10/2022
 11783                                  RestoreOldDpt:
 11784                                  		; if we have already restored the disk base table earlier,
 11785                                  		; do not do it again.
 11786                                  	
 11787 0000112F 50                      		push	ax
 11788 00001130 30C0                    		xor	al, al
 11789 00001132 A2[3906]                		mov	[had_format_error], al	; Reset flag and 
 11790 00001135 8606[3806]              		xchg	al, [media_set_for_format] ; get current flag setting
 11791 00001139 08C0                    		or	al, al
 11792 0000113B 741E                    		jz	short DontRestore
 11793 0000113D 56                      		push	si
 11794 0000113E 1E                      		push	ds
 11795 0000113F 06                      		push	es
 11796 00001140 C536[3A06]              		lds	si, [tempdpt]
 11797                                  
 11798                                  		; 17/10/2022
 11799 00001144 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 11800                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11801 00001149 268E06[1A00]            		mov	es, [es:zeroseg]
 11802                                  		;mov	es, es:zeroseg	; CAS -- bleeeech!
 11803                                  
 11804                                  		;mov	es:78h,	si	; [es:DSKADR]
 11805 0000114E 2689367800              		mov	[es:DSKADR], si
 11806                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 11807 00001153 268C1E7A00              		mov	[es:DSKADR+2], ds
 11808 00001158 07                      		pop	es
 11809 00001159 1F                      		pop	ds
 11810 0000115A 5E                      		pop	si
 11811                                  DontRestore:				
 11812 0000115B 58                      		pop	ax
 11813                                  		; 12/12/2022
 11814                                  		; cf=0
 11815                                  		;clc			;  Clear carry
 11816 0000115C C3                      		retn
 11817                                  
 11818                                  ; ---------------------------------------------------------------------------
 11819                                  
 11820                                  ; 16/10/2022
 11821                                  
 11822                                  ; ==========================================================================
 11823                                  ;	get media id
 11824                                  ; ==========================================================================
 11825                                  ;
 11826                                  ; FUNCTION: get the volume label,the system id and the serial number from
 11827                                  ;	    the media that has the extended boot record.
 11828                                  ;	    for the conventional media,this routine will return "unknown
 11829                                  ;	    media type" error to dos.
 11830                                  ;
 11831                                  ; INPUT :   ES:di -> bds table for this drive.
 11832                                  ;
 11833                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 11834                                  ;	    if carry set,then al contains the device driver error number
 11835                                  ;	    that will be returned to dos.
 11836                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 11837                                  ;
 11838                                  ; SUBROUTINES TO BE CALLED:
 11839                                  ;	BootIo:NEAR
 11840                                  ;
 11841                                  ; LOGIC:
 11842                                  ;	to recognize the extended boot record,this logic will actually
 11843                                  ;	access the boot sector even if it is a hard disk.
 11844                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 11845                                  ;	field of bpb and the extended boot signature.
 11846                                  ;
 11847                                  ; {
 11848                                  ;	get logical drive number from bds table;
 11849                                  ;	rFlag = read operation;
 11850                                  ;	BootIo;		 /*get the media boot record into the buffer
 11851                                  ;	if (no error) then
 11852                                  ;	     if (extended boot record) then
 11853                                  ;		{ set volume label,volume serial number and system id
 11854                                  ;		  of the request packet to those of the boot record;
 11855                                  ;		};
 11856                                  ;	     else		  /*not an extended bpb */
 11857                                  ;		{ set register al to "unknown media.." error code;
 11858                                  ;		  set carry bit;
 11859                                  ;		};
 11860                                  ;	else
 11861                                  ;	     ret;	/*already error code is set in the register al
 11862                                  ;
 11863                                  ; ==========================================================================
 11864                                  
 11865                                  ;size_of_EXT_BOOT_SERIAL equ 4
 11866                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 11867                                  ;;size_of_EXT_SYSTEM_ID equ 8
 11868                                  
 11869                                  		; 19/10/2022
 11870                                  GetMediaId:
 11871 0000115D E89F00                  		call	ChangeLineChk
 11872 00001160 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 11873 00001164 C606[2001]02            		mov	byte [rflag], 2	; Read operation
 11874 00001169 E87B00                  		call	BootIo		; Read boot sector into	DiskSector
 11875 0000116C 7224                    		jb	short IOCtl_If1
 11876                                  					; Valid? (0F0h-0FFh?)
 11877 0000116E 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 11878                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 11879 00001173 721A                    		jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 11880                                  		; 10/12/2022
 11881 00001175 BE[7401]                		mov	si, disksector+26h
 11882 00001178 803C29                  		cmp	byte [si], 29h
 11883                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 11884                                  					; EXT_BOOT_SIGNATURE
 11885 0000117B 7512                    		jnz	short IOCtl_If2	; not extended boot record
 11886 0000117D C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 11887 00001181 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11888                                  		; 10/12/2022
 11889 00001185 46                      		inc	si
 11890                                  		; si = disksector+27h 
 11891                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 11892 00001186 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 11893 00001189 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 11894                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 11895                                  					; +size_of_EXT_SYSTEM_ID
 11896 0000118C F3A4                    		rep movsb		; Move from Bios_Data into request packet
 11897                                  	
 11898                                  		; 10/12/2022
 11899                                  		; cf = 0
 11900                                  		;clc
 11901                                  
 11902 0000118E C3                      		retn
 11903                                  ; ---------------------------------------------------------------------------
 11904                                  
 11905                                  IOCtl_If2:				
 11906 0000118F B007                    		mov	al, 7		; error_unknown_media
 11907 00001191 F9                      		stc
 11908                                  IOCtl_If1:				
 11909 00001192 C3                      		retn
 11910                                  ; ---------------------------------------------------------------------------
 11911                                  
 11912                                  ; 16/10/2022
 11913                                  
 11914                                  ; ==========================================================================
 11915                                  ;  set media id
 11916                                  ; ==========================================================================
 11917                                  
 11918                                  ; function: set the volume label, the system id and the serial number of
 11919                                  ;	    the media that has the extended boot record.
 11920                                  ;	    for the conventional media, this routine will return "unknown
 11921                                  ;	    media.." error to dos.
 11922                                  ;	    this routine will also set the corresponding informations in
 11923                                  ;	    the bds table.
 11924                                  ;
 11925                                  ; input :   ES:di -> bds table for this drive.
 11926                                  ;
 11927                                  ; output:   the extended boot record in the media will be set according to
 11928                                  ;	    the request packet.
 11929                                  ;	    if carry set, then al contains the device driver error number
 11930                                  ;	    that will be returned to dos.
 11931                                  ;
 11932                                  ; subroutines to be called:
 11933                                  ;	BootIo:NEAR
 11934                                  ;
 11935                                  ; logic:
 11936                                  ;
 11937                                  ; {
 11938                                  ;	get drive_number from bds;
 11939                                  ;	rFlag = "read operation";
 11940                                  ;	BootIo;
 11941                                  ;	if (no error) then
 11942                                  ;	     if (extended boot record) then
 11943                                  ;		{ set volume label,volume serial number and system id
 11944                                  ;		  of the boot record to those of the request packet;
 11945                                  ;		  rFlag = "write operation";
 11946                                  ;		  get drive number from bds;
 11947                                  ;		  BootIo;	  /*write it back*/
 11948                                  ;		};
 11949                                  ;	     else		  /*not an extended bpb */
 11950                                  ;		{ set register al to "unknown media.." error code;
 11951                                  ;		  set carry bit;
 11952                                  ;		  ret;	 /*return back to caller */
 11953                                  ;		};
 11954                                  ;	else
 11955                                  ;	     ret;		 /*already error code is set */
 11956                                  ;
 11957                                  ; ==========================================================================
 11958                                  
 11959                                  		; 19/10/2022
 11960                                  SetMediaId:
 11961 00001193 E86900                  		call	ChangeLineChk
 11962 00001196 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 11963                                  					; Logical drive	number
 11964 0000119A 88C2                    		mov	dl, al
 11965 0000119C C606[2001]02            		mov	byte [rflag], 2	; romread
 11966 000011A1 52                      		push	dx
 11967 000011A2 E84200                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 11968 000011A5 5A                      		pop	dx
 11969 000011A6 723E                    		jb	short IOCtl_If6
 11970                                  					; Valid? (0F0h-0FFh?)
 11971 000011A8 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 11972                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 11973 000011AD 7234                    		jb	short IOCtl_If7	; Brif not
 11974 000011AF 803E[7401]29            		cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 11975                                  					; EXT_BOOT_SIGNATURE
 11976 000011B4 752D                    		jnz	short IOCtl_If7	; not extended boot record
 11977 000011B6 06                      		push	es		; Save BDS pointer
 11978 000011B7 57                      		push	di
 11979 000011B8 1E                      		push	ds		; Point	ES To boot record
 11980 000011B9 07                      		pop	es
 11981 000011BA BF[7501]                		mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 11982 000011BD C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 11983 000011C1 C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 11984 000011C4 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 11985 000011C7 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 11986                                  					; +size_of_EXT_BOOT_VOL_LABEL
 11987                                  					; +size_of_EXT_SYSTEM_ID
 11988 000011CA F3A4                    		rep movsb
 11989 000011CC 06                      		push	es		; point	ds back	to Bios_Data
 11990 000011CD 1F                      		pop	ds
 11991 000011CE 5F                      		pop	di		; restore bds pointer
 11992 000011CF 07                      		pop	es
 11993 000011D0 E864F5                  		call	mov_media_ids	; update the bds media id info.
 11994 000011D3 88D0                    		mov	al, dl
 11995 000011D5 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 11996 000011DA E80A00                  		call	BootIo		; write	it back.
 11997 000011DD C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 11998                                  					; make sure chk_media check the driver
 11999                                  					; return with error code from BootIo
 12000 000011E2 C3                      		retn
 12001                                  ; ---------------------------------------------------------------------------
 12002                                  
 12003                                  IOCtl_If7:				
 12004 000011E3 B007                    		mov	al, 7		; error_unknown_media
 12005 000011E5 F9                      		stc
 12006                                  IOCtl_If6:				
 12007 000011E6 C3                      		retn
 12008                                  
 12009                                  ; =============== S U B	R O U T	I N E =======================================
 12010                                  
 12011                                  ; 16/10/2022
 12012                                  
 12013                                  ; ---------------------------------------------------------------------------
 12014                                  ;	BootIo
 12015                                  ; ---------------------------------------------------------------------------
 12016                                  ;
 12017                                  ; function: read/write the boot record into boot sector.
 12018                                  ;
 12019                                  ; input :
 12020                                  ;	    al=logical drive number
 12021                                  ;	    rFlag = operation (read/write)
 12022                                  ;
 12023                                  ; output:   for read operation,the boot record of the drive specified in bds
 12024                                  ;	    be read into the DiskSector buffer.
 12025                                  ;	    for write operation,the DiskSector buffer image will be written
 12026                                  ;	    to the drive specified in bds.
 12027                                  ;	    if carry set,then al contains the device driver error number
 12028                                  ;	    that will be returned to dos.
 12029                                  ;	    AX,CX,DX register destroyed.
 12030                                  ;	    if carry set,then al will contain the error code from DiskIO.
 12031                                  ;
 12032                                  ; subroutines to be called:
 12033                                  ;	DiskIO:NEAR
 12034                                  ;
 12035                                  ; logic:
 12036                                  ;
 12037                                  ; {
 12038                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 12039                                  ;	sectorcount = 1;	 /*read 1 sector only */
 12040                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 12041                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 12042                                  ; }
 12043                                  ; ==========================================================================
 12044                                  
 12045                                  		; 19/10/2022
 12046                                  BootIo:	
 12047 000011E7 06                      		push	es
 12048 000011E8 57                      		push	di
 12049 000011E9 53                      		push	bx
 12050 000011EA 1E                      		push	ds
 12051 000011EB 07                      		pop	es		; Point ES: to Bios_Data
 12052                                  
 12053                                  		; Call DiskIO to read/write the boot sec. The parameters which
 12054                                  		; need to be initialized for this subroutine out here are
 12055                                  		; - Transfer address to Bios_Data:DiskSector
 12056                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 12057                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 12058                                  		; - Number of sectors <-- 1
 12059                                  
 12060 000011EC BF[4E01]                		mov	di, disksector	; es:di -> transfer address
 12061 000011EF 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 12062 000011F1 8916[2B05]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 12063 000011F5 B90100                  		mov	cx, 1
 12064 000011F8 E8CEF6                  		call	diskio
 12065 000011FB 5B                      		pop	bx
 12066 000011FC 5F                      		pop	di
 12067 000011FD 07                      		pop	es
 12068 000011FE C3                      		retn
 12069                                  
 12070                                  ; =============== S U B	R O U T	I N E =======================================
 12071                                  
 12072                                  ; 16/10/2022
 12073                                  
 12074                                  ; ---------------------------------------------------------------------------
 12075                                  ;	ChangeLineChk
 12076                                  ; ---------------------------------------------------------------------------
 12077                                  ;
 12078                                  ; when the user calls get/set media id call before dos establishes the media
 12079                                  ; by calling "media_chk",the change line activity of the drive is going to be
 12080                                  ; lost.	this routine will check the change line activity and will save the
 12081                                  ; history in the flags.
 12082                                  ;
 12083                                  ; FUNCTION: check the change line error activity
 12084                                  ;
 12085                                  ; INPUT :  ES:di -> bds table.
 12086                                  ;
 12087                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 12088                                  ;
 12089                                  ; SUBROUTINES TO BE CALLED:
 12090                                  ;	Set_Changed_DL
 12091                                  ;
 12092                                  ; ---------------------------------------------------------------------------
 12093                                  
 12094                                  ChangeLineChk:	
 12095 000011FF 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12096 00001203 08D2                    		or	dl, dl		; Fixed	disk?
 12097 00001205 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 12098                                  		; 12/12/2022
 12099 00001207 26F6452304              		test	byte [es:di+23h], 4
 12100                                  		;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 12101                                  					; return_fake_bpb
 12102 0000120C 751A                    		jnz	short ChangeLnChkRet
 12103 0000120E 803E[7700]01            		cmp	byte [fhave96], 1	; This rom support change line?
 12104 00001213 7513                    		jnz	short ChangeLnChkRet
 12105 00001215 E8F806                  		call	haschange	; This drive support change line?
 12106 00001218 740E                    		jz	short ChangeLnChkRet ; Do nothing
 12107                                  
 12108                                  		; Execute the rom disk interrupt to check changeline activity.
 12109                                  
 12110 0000121A B416                    		mov	ah, 16h
 12111 0000121C CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 12112                                  					; DL = drive to	check
 12113                                  					; Return: AH = disk change status
 12114 0000121E 7308                    		jnb	short ChangeLnChkRet
 12115 00001220 53                      		push	bx
 12116 00001221 BB4000                  		mov	bx, 40h		; fchanged
 12117                                  					; Update flag in BDS for this
 12118                                  					; physical drive
 12119 00001224 E8C206                  		call	set_changed_dl
 12120 00001227 5B                      		pop	bx
 12121                                  ChangeLnChkRet:				
 12122 00001228 C3                      		retn
 12123                                  
 12124                                  ; ---------------------------------------------------------------------------
 12125                                  
 12126                                  ; 16/10/2022
 12127                                  
 12128                                  ; ==========================================================================
 12129                                  ;	GetAccessFlag
 12130                                  ; ==========================================================================
 12131                                  ;
 12132                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 12133                                  ;
 12134                                  ; INPUT :
 12135                                  ;	    ES:di -> bds table
 12136                                  ;
 12137                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 12138                                  ;						 = 1 if disk i/o allowed.
 12139                                  ; ==========================================================================
 12140                                  
 12141                                  		; 19/10/2022
 12142                                  GetAccessFlag:				
 12143 00001229 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 12144 0000122D C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12145                                  		;mov	al, 0		; Assume result	is unformatted
 12146                                  		; 10/12/2022
 12147 00001230 28C0                    		sub	al, al
 12148                                  		; 10/12/2022
 12149 00001232 26F6452402              		test	byte [es:di+36], 02h
 12150                                  		;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 12151                                  					; unformatted_media
 12152 00001237 7502                    		jnz	short GafDone	; Done if unformatted
 12153 00001239 FEC0                    		inc	al		; Return true for formatted
 12154                                  
 12155                                  GafDone:				
 12156 0000123B 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12157 0000123E C3                      		retn
 12158                                  ; ---------------------------------------------------------------------------
 12159                                  
 12160                                  ; 16/10/2022
 12161                                  
 12162                                  ; ==========================================================================
 12163                                  ;	SetAccessFlag
 12164                                  ; ==========================================================================
 12165                                  ;
 12166                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 12167                                  ;
 12168                                  ; input :
 12169                                  ;	    ES:di -> bds table
 12170                                  ;
 12171                                  ; output:   unformtted_media bit modified according to the user request
 12172                                  ; ==========================================================================
 12173                                  
 12174                                  		; 19/10/2022
 12175                                  SetAccessFlag:				
 12176 0000123F C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 12177 00001243 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12178                                  		; 10/12/2022
 12179 00001246 26806524FD              		and	byte [es:di+36], 0FDh
 12180                                  		;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 12181                                  					; ~unformatted_media
 12182 0000124B 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12183 0000124F 7505                    		jnz	short saf_Done
 12184                                  		; 10/12/2022
 12185 00001251 26804D2402              		or	byte [es:di+36], 02h
 12186                                  		;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 12187                                  					; unformatted_media
 12188                                  saf_Done:				
 12189 00001256 C3                      		retn
 12190                                  ; ---------------------------------------------------------------------------
 12191                                  
 12192                                  ; 16/10/2022
 12193                                  
 12194                                  ; ==========================================================================
 12195                                  ; Ioctl_Support_Query
 12196                                  ; ==========================================================================
 12197                                  ;
 12198                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 12199                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 12200                                  ; device attributes specifies if this function is supported.
 12201                                  ;
 12202                                  ; ==========================================================================
 12203                                  
 12204                                  		; 19/10/2022
 12205                                  ioctl_support_query:
 12206 00001257 06                      		push	es
 12207 00001258 C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 12208 0000125C 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 12209                                  					; AL ==	Major, AH == Minor
 12210 00001260 3C08                    		cmp	al, 8		; IOC_DC
 12211                                  					; See if major code is 8
 12212 00001262 7513                    		jnz	short nosupport
 12213 00001264 0E                      		push	cs
 12214 00001265 07                      		pop	es
 12215 00001266 B90B00                  		mov	cx, 11		; IOC_DC_TABLE_LEN
 12216                                  		; 10/12/2022
 12217 00001269 BF[3A0C]                		mov	di, IOC_DC_Table
 12218                                  		;mov	di, 0C60h	; IOC_DC_Table
 12219                                  					; at 2C7h:0C60h	= 70h:31D0h
 12220 0000126C 86C4                    		xchg	al, ah		; Put minor code in AL
 12221 0000126E F2AE                    		repne scasb		; Scan for minor code in AL
 12222 00001270 7505                    		jnz	short nosupport	; it was not found
 12223 00001272 B80001                  		mov	ax, 100h
 12224                                  		; 10/12/2022
 12225                                  		; (jump to ioctlsupexit is not required)
 12226                                  		;jmp	short $+2	; ioctlsupexit
 12227                                  					; Signal ioctl is supported
 12228                                  		;;jmp	short ioctlsupexit
 12229                                  ; ---------------------------------------------------------------------------
 12230                                  ioctlsupexit:				
 12231 00001275 07                      		pop	es
 12232                                  		; 10/12/2022
 12233                                  		; cf = 0
 12234                                  		;clc
 12235 00001276 C3                      		retn
 12236                                  ; ---------------------------------------------------------------------------
 12237                                  nosupport:				
 12238 00001277 07                      		pop	es
 12239 00001278 E95AEE                  		jmp	bc_cmderr
 12240                                  ; ---------------------------------------------------------------------------
 12241                                  
 12242                                  ; 16/10/2022
 12243                                  
 12244                                  ; ==========================================================================
 12245                                  ;	GetMediaSenseStatus
 12246                                  ; ==========================================================================
 12247                                  ;
 12248                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 12249                                  ;	    diskette drive and whether the media is the default type
 12250                                  ;	    for that drive. (default type means the max size for that
 12251                                  ;	    drive)
 12252                                  ;
 12253                                  ; INPUT :   ES:DI -> BDS table
 12254                                  ; OUTPUT:   If carry clear
 12255                                  ;	    DS:BX -> Updated IOCtlPacket
 12256                                  ;
 12257                                  ;			 Special Function at offset 0:
 12258                                  ;				0	- Media detected is not default type
 12259                                  ;				1	- Media detected is default type
 12260                                  ;
 12261                                  ;			 Device Type at offset 1:
 12262                                  ;				2       - 720K 3.5" 80 tracks
 12263                                  ;				7	- 1.44M 3.5" 80 tracks
 12264                                  ;				9	- 2.88M 3.5" 80 tracks
 12265                                  ;
 12266                                  ; Error Codes returned in AX if carry set:
 12267                                  ;
 12268                                  ; 8102 - Drive not ready	- No disk is in the drive.
 12269                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 12270                                  ;				  the media is really unkown, any error
 12271                                  ;				  other than "media not present"
 12272                                  ; 
 12273                                  ; ==========================================================================
 12274                                  
 12275                                  		; 19/10/2022
 12276                                  SenseMediaType:				
 12277 0000127B C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 12278 0000127F C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12279                                  		; 10/10/2022
 12280                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 12281 00001282 31D2                    		xor	dx, dx
 12282 00001284 8917                    		mov	[bx], dx ; 0
 12283                                  		;
 12284 00001286 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12285                                  					; Get int 13h drive number from	BDS
 12286                                  		; 10/12/2022
 12287                                  		;xor	dh, dh		; DX = physical	drive number
 12288 0000128A B420                    		mov	ah, 20h		; Get Media Type function
 12289                                  					; If no	carry media type in AL
 12290 0000128C CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 12291 0000128E 7216                    		jb	short MediaSenseEr ; error code	in AH
 12292 00001290 FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 12293                                  DetermineMediaType:			
 12294 00001292 FEC8                    		dec	al
 12295 00001294 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 12296 00001296 740A                    		jz	short GotMediaType
 12297 00001298 0404                    		add	al, 4
 12298 0000129A 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 12299 0000129C 7404                    		jz	short GotMediaType
 12300 0000129E 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 12301 000012A0 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 12302                                  GotMediaType:				
 12303 000012A2 884701                  		mov	[bx+1],	al	; Save the return value
 12304                                  		; 10/12/2022
 12305                                  		; cf = 0
 12306                                  		;clc			; Signal success
 12307 000012A5 C3                      		retn
 12308                                  ; ---------------------------------------------------------------------------
 12309                                  
 12310                                  MediaSenseEr:				
 12311 000012A6 80FC32                  		cmp	ah, 32h		; See if not default media error
 12312 000012A9 74E7                    		jz	short DetermineMediaType ; Not really an error
 12313 000012AB B002                    		mov	al, 2		; Now assume drive not ready
 12314 000012AD 80FC31                  		cmp	ah, 31h		; See if media was present
 12315 000012B0 7402                    		jz	short SenseErrExit ; Return drive not ready
 12316                                  UnknownMediaType:			
 12317 000012B2 B007                    		mov	al, 7		; Just don't know the media type
 12318                                  SenseErrExit:				
 12319 000012B4 B481                    		mov	ah, 81h		; Signal error return
 12320 000012B6 F9                      		stc
 12321 000012B7 C3                      		retn
 12322                                  
 12323                                  ; ---------------------------------------------------------------------------
 12324                                  		; 10/12/2022
 12325                                  		;db    0
 12326                                  ; ---------------------------------------------------------------------------
 12327                                  
 12328                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12329                                  
 12330                                  ;-----------------------------------------------------------------------------
 12331                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 12332                                  ;-----------------------------------------------------------------------------
 12333                                  ; 16/03/2019 - Retro DOS v4.0
 12334                                  
 12335                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 12336                                  ;	after booting. this allows testing and implementation of custom int_13
 12337                                  ;	handlers, without giving up ms-dos error recovery
 12338                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 12339                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 12340                                  ;	exit:	orig13	== address of new int_13 handler
 12341                                  ;		ds:dx	== old orig13 value
 12342                                  ;		es:bx	== old old13  value
 12343                                  ;
 12344                                  ; int 2f handler for external block drivers to communicate with the internal
 12345                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 12346                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 12347                                  ; dsk_entry, the entry point for all disk requests.
 12348                                  ;
 12349                                  ; on exit from this driver, we will return to the external driver
 12350                                  ; that issued this int 2f, and can then remove the flags from the stack.
 12351                                  ; this scheme allows us to have a small external device driver, and makes
 12352                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 12353                                  ; since we only need to make changes in one place (most of the time).
 12354                                  ;
 12355                                  ;   ax=800h - check for installed handler - reserved
 12356                                  ;   ax=801h - install the bds into the linked list
 12357                                  ;   ax=802h - dos request
 12358                                  ;   ax=803h - return bds table starting pointer in ds:di
 12359                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 12360                                  ;	    problem. bds table is going to be used to get head/sector
 12361                                  ;	    informations without calling generic ioctl get device parm call.)
 12362                                  
 12363                                  ;BIOSSEGMENT equ 70h
 12364                                  DOSBIOSSEG equ 0070h ; 17/10/2022	
 12365                                  
 12366                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 12367                                  
 12368                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 12369 000012B8 80FC13                  		cmp	ah, 13h
 12370 000012BB 7413                    		jz	short int2f_replace_int13
 12371 000012BD 80FC08                  		cmp	ah, 8
 12372 000012C0 743B                    		jz	short mine
 12373                                  
 12374                                  ; Check for WIN386 startup and return the BIOS instance data
 12375                                  
 12376 000012C2 80FC16                  		cmp	ah, 16h		; MultWin386
 12377 000012C5 7479                    		jz	short win386call
 12378 000012C7 80FC4A                  		cmp	ah, 4Ah		; multMULT
 12379 000012CA 7503                    		jnz	short i2f_handler_iret
 12380 000012CC E9A500                  		jmp	handle_multmult
 12381                                  ; ---------------------------------------------------------------------------
 12382                                  
 12383                                  i2f_handler_iret:			
 12384 000012CF CF                      		iret
 12385                                  ; ---------------------------------------------------------------------------
 12386                                  
 12387                                  int2f_replace_int13:			
 12388 000012D0 50                      		push	ax	; free up a register for caller's ds
 12389 000012D1 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 12390                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 12391                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 12392                                  					; = [02C7h:0030h] = [0070h:25A0h]
 12393 000012D3 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 12394                                  		; 19/10/2022
 12395                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 12396                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 12397                                  		;push	word ptr ds:Old13	; return them to caller
 12398                                  		;push	word ptr ds:Old13+2
 12399 000012D8 FF36[B400]              		push	word [Orig13]
 12400 000012DC FF36[B600]              		push	word [Orig13+2]
 12401 000012E0 FF36[0601]              		push	word [Old13]
 12402 000012E4 FF36[0801]              		push	word [Old13+2]
 12403                                  
 12404                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 12405                                  		;mov	word ptr ds:Orig13+2, ax
 12406                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 12407                                  		;mov	word ptr ds:Old13+2, es
 12408 000012E8 8916[B400]              		mov	[Orig13], dx
 12409 000012EC A3[B600]                		mov	[Orig13+2], ax
 12410 000012EF 891E[0601]              		mov	[Old13], bx
 12411 000012F3 8C06[0801]              		mov	[Old13+2], es
 12412                                  
 12413 000012F7 07                      		pop	es			; es:bx := old old13 vector
 12414 000012F8 5B                      		pop	bx
 12415 000012F9 1F                      		pop	ds			; ds:dx := old orig13 vector
 12416 000012FA 5A                      		pop	dx
 12417 000012FB 58                      		pop	ax
 12418                                  i2f_iret:				
 12419 000012FC CF                      		iret
 12420                                  ; ---------------------------------------------------------------------------
 12421                                  
 12422                                  mine:					
 12423 000012FD 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 12424 000012FF 73FB                    		jnb	short i2f_iret
 12425 00001301 08C0                    		or	al, al			; a get installed state request?
 12426 00001303 7504                    		jnz	short disp_func
 12427 00001305 B0FF                    		mov	al, 0FFh
 12428 00001307 EBF3                    		jmp	short i2f_iret
 12429                                  ; ---------------------------------------------------------------------------
 12430                                  
 12431                                  disp_func:				
 12432 00001309 3C01                    		cmp	al, 1			; request for installing bds?
 12433 0000130B 7418                    		jz	short do_subfun_01
 12434 0000130D 3C03                    		cmp	al, 3			; get bds vector?
 12435 0000130F 7424                    		jz	short do_get_bds_vector
 12436                                  
 12437                                  ; set up pointer to request packet
 12438                                  
 12439 00001311 1E                      		push	ds
 12440 00001312 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022	
 12441                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12442                                  					; = [0070h:25A0h] = [02C7h:0030h]
 12443                                  		; 19/10/2022
 12444                                  		;mov	word ptr ds:ptrsav, bx
 12445                                  		;mov	word ptr ds:ptrsav+2, es
 12446 00001317 891E[1200]              		mov	[ptrsav], bx
 12447 0000131B 8C06[1400]              		mov	[ptrsav+2], es
 12448 0000131F 1F                      		pop	ds
 12449                                  		;jmp	far ptr	i2f_dskentry
 12450                                  		; 17/10/2022
 12451                                  		;jmp	far DOSBIOSSEG:dsk_entry		
 12452 00001320 EA[9608]7000            		jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 12453                                  					; NOTE: jump to a FAR function, not an
 12454                                  					;  IRET type function. Callers of
 12455                                  					;  this int2f subfunction will have
 12456                                  					;  to be careful to do a popf
 12457                                  
 12458                                  ; ---------------------------------------------------------------------------
 12459                                  
 12460                                  do_subfun_01:				
 12461 00001325 06                      		push	es
 12462 00001326 1E                      		push	ds
 12463 00001327 1E                      		push	ds
 12464 00001328 07                      		pop	es
 12465                                  		; 17/10/2022
 12466 00001329 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]	
 12467                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12468                                  					; point	ds: -> Bios_Data
 12469 0000132E E8C303                  		call	install_bds
 12470 00001331 1F                      		pop	ds
 12471 00001332 07                      		pop	es
 12472 00001333 EBC7                    		jmp	short i2f_iret
 12473                                  ; ---------------------------------------------------------------------------
 12474                                  
 12475                                  do_get_bds_vector:
 12476                                  		; 17/10/2022
 12477 00001335 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]			
 12478                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12479 0000133A C53E[1901]              		lds	di, [start_bds]
 12480                                  		;lds	di, ds:start_bds
 12481                                  ;ii2f_iret:	; 10/12/2022				
 12482 0000133E EBBC                    		jmp	short i2f_iret
 12483                                  ; ---------------------------------------------------------------------------
 12484                                  
 12485                                  ; 17/10/2022
 12486                                  ; 16/10/2022
 12487                                  
 12488                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 12489                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 12490                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 12491                                  
 12492                                  win386call:				
 12493 00001340 1E                      		push	ds
 12494 00001341 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12495                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12496                                  					; at 2C7h:30h =	70h:25A0h
 12497 00001346 3C05                    		cmp	al, 5		; Win386_Init
 12498                                  					; is it	win386 initializing?
 12499 00001348 7410                    		jz	short Win386Init
 12500 0000134A 3C06                    		cmp	al, 6		; Win386_Exit
 12501                                  					; is it	win386 exiting?
 12502 0000134C 7523                    		jnz	short win_iret	; if not, continue int2f chain
 12503                                  		; 12/12/2022
 12504 0000134E F6C201                  		test	dl, 1
 12505                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 12506 00001351 751E                    		jnz	short win_iret	; if not win386, then continue
 12507                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 12508 00001353 8026[CE08]00            		and	byte [IsWin386], 0 
 12509 00001358 EB17                    		jmp	short win_iret
 12510                                  ; ---------------------------------------------------------------------------
 12511                                  
 12512                                  Win386Init:	
 12513                                  		; 12/12/2022
 12514 0000135A F6C201                  		test	dl, 1			
 12515                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 12516 0000135D 7512                    		jnz	short win_iret	; if not win386, then continue
 12517                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 12518 0000135F 800E[CE08]01            		or	byte [IsWin386], 1
 12519                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 12520                                  		;mov	word ptr ds:SI_Next+2, es
 12521 00001364 891E[9C08]              		mov	[SI_Next], bx
 12522 00001368 8C06[9E08]              		mov	[SI_Next+2], es
 12523                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 12524 0000136C BB[9A08]                		mov	bx, Win386_SI	; 19/10/2022
 12525 0000136F 1E                      		push	ds
 12526 00001370 07                      		pop	es
 12527                                  win_iret:				
 12528 00001371 1F                      		pop	ds
 12529                                  ii2f_iret:	; 10/12/2022	
 12530 00001372 EB88                    		jmp	short i2f_iret	; return back up the chain
 12531                                  ; ---------------------------------------------------------------------------
 12532                                  
 12533                                  handle_multmult:			
 12534 00001374 3C01                    		cmp	al, 1
 12535 00001376 7515                    		jnz	short try_2
 12536 00001378 1E                      		push	ds
 12537 00001379 E84700                  		call	HMAPtr		; get offset of free HMA
 12538                                  		; 10/12/2022
 12539                                  		;xor	bx, bx
 12540                                  		;dec	bx
 12541 0000137C BBFFFF                  		mov	bx, 0FFFFh
 12542 0000137F 8EC3                    		mov	es, bx		; seg of HMA
 12543 00001381 89FB                    		mov	bx, di
 12544 00001383 F7D3                    		not	bx
 12545 00001385 09DB                    		or	bx, bx
 12546 00001387 7401                    		jz	short try_1
 12547 00001389 43                      		inc	bx
 12548                                  try_1:					
 12549 0000138A 1F                      		pop	ds
 12550 0000138B EBE5                    		jmp	short ii2f_iret
 12551                                  ; ---------------------------------------------------------------------------
 12552                                  
 12553                                  try_2:					
 12554 0000138D 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 12555 0000138F 7530                    		jnz	short try_3
 12556 00001391 1E                      		push	ds
 12557                                  		; 10/12/2022
 12558                                  		;xor	di, di
 12559                                  		;dec	di
 12560 00001392 BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 12561 00001395 8EC7                    		mov	es, di
 12562 00001397 E82900                  		call	HMAPtr		; get offset of free HMA
 12563 0000139A 83FFFF                  		cmp	di, 0FFFFh
 12564 0000139D 7421                    		jz	short InsuffHMA
 12565 0000139F F7DF                    		neg	di		; free space in HMA
 12566 000013A1 39FB                    		cmp	bx, di
 12567 000013A3 7605                    		jbe	short try_4
 12568                                  		; 10/12/2022
 12569                                  		;sub	di, di
 12570                                  		;dec	di
 12571 000013A5 BFFFFF                  		mov	di, 0FFFFh
 12572 000013A8 EB16                    		jmp	short InsuffHMA
 12573                                  ; ---------------------------------------------------------------------------
 12574                                  
 12575                                  try_4:					
 12576                                  		;mov	di, ds:FreeHMAPtr
 12577 000013AA 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12578 000013AE 83C30F                  		add	bx, 15
 12579                                  		;and	bx, 0FFF0h
 12580                                  		; 10/12/2022
 12581 000013B1 80E3F0                  		and	bl, 0F0h
 12582                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer	
 12583 000013B4 011E[F508]              		add	[FreeHMAPtr], bx
 12584 000013B8 7506                    		jnz	short InsuffHMA
 12585 000013BA C706[F508]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 12586                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 12587                                  					; no more HMA if we have wrapped
 12588                                  InsuffHMA:				
 12589 000013C0 1F                      		pop	ds
 12590                                  		; 10/12/2022
 12591                                  try_3:		
 12592 000013C1 EBAF                    		jmp	short ii2f_iret
 12593                                  ; ---------------------------------------------------------------------------
 12594                                  
 12595                                  		; 10/12/2022
 12596                                  ;try_3:					
 12597                                  		;jmp	ii2f_iret
 12598                                  
 12599                                  ; =============== S U B	R O U T	I N E =======================================
 12600                                  
 12601                                  ; 16/10/2022
 12602                                  
 12603                                  ;--------------------------------------------------------------------------
 12604                                  ;
 12605                                  ; procedure : HMAPtr
 12606                                  ;
 12607                                  ;		Gets the offset of the free HMA area ( with respect to
 12608                                  ;							seg ffff )
 12609                                  ;		If DOS has not moved high, tries to move DOS high.
 12610                                  ;		In the course of doing this, it will allocate all the HMA
 12611                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 12612                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 12613                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 12614                                  ;
 12615                                  ;	RETURNS : offset of free HMA in DI
 12616                                  ;		  BIOS_DATA, seg in DS
 12617                                  ;
 12618                                  ;--------------------------------------------------------------------------
 12619                                  
 12620                                  		; 17/10/2022
 12621                                  HMAPtr:
 12622 000013C3 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12623                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12624 000013C8 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12625                                  		;mov	di, ds:FreeHMAPtr
 12626 000013CC 83FFFF                  		cmp	di, 0FFFFh
 12627 000013CF 750F                    		jnz	short HMAPtr_retn
 12628 000013D1 803E[FB08]00            		cmp	byte [SysinitPresent], 0
 12629                                  		;cmp	ds:SysinitPresent, 0
 12630 000013D6 7408                    		jz	short HMAPtr_retn
 12631 000013D8 FF1E[F708]              		call	far [MoveDOSIntoHMA]
 12632                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 12633 000013DC 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12634                                  		;mov	di, ds:FreeHMAPtr
 12635                                  HMAPtr_retn:				
 12636 000013E0 C3                      		retn
 12637                                  
 12638                                  ; =============== S U B	R O U T	I N E =======================================
 12639                                  
 12640                                  ; 16/10/2022
 12641                                  
 12642                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 12643                                  ; but go ahead and update direction flag, si, & di
 12644                                  
 12645                                  move_sector:
 12646                                  
 12647                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 12648                                  ; any segment to be a fault. Theoretically, this could be handled
 12649                                  ; by the fault handler and the behavior of an 8086 could be emulated
 12650                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 12651                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 12652                                  ; also handles the fault incorrectly in their ROM BIOS for real
 12653                                  ; mode. Their fault handler was only designed to deal with one
 12654                                  ; special case which occurred in a magazine benchmark, but didn't
 12655                                  ; handle the general case worth beans.
 12656                                  ;
 12657                                  ; Simply changing this code to do a byte loop would work okay but
 12658                                  ; would involve a general case performance hit. Therefore, we'll
 12659                                  ; check for either source or destination offsets being within one
 12660                                  ; sector of the end of their segments and only in that case fall
 12661                                  ; back to a byte move.
 12662                                  
 12663 000013E1 FC                      		cld
 12664 000013E2 51                      		push	cx
 12665 000013E3 B90001                  		mov	cx, 256
 12666 000013E6 81FE00FE                		cmp	si, 0FE00h
 12667 000013EA 770A                    		ja	short movsec_bytes
 12668 000013EC 81FF00FE                		cmp	di, 0FE00h
 12669 000013F0 7704                    		ja	short movsec_bytes
 12670 000013F2 F3A5                    		rep movsw
 12671 000013F4 59                      		pop	cx
 12672 000013F5 C3                      		retn
 12673                                  ; ---------------------------------------------------------------------------
 12674                                  
 12675                                  movsec_bytes:				
 12676 000013F6 D1E1                    		shl	cx, 1
 12677 000013F8 F3A4                    		rep movsb
 12678 000013FA 59                      		pop	cx
 12679 000013FB C3                      		retn
 12680                                  
 12681                                  ; =============== S U B	R O U T	I N E =======================================
 12682                                  
 12683                                  ; 16/10/2022
 12684                                  
 12685                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 12686                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 12687                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 12688                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 12689                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 12690                                  ; but we break down a request when we get an ecc or dma error into several
 12691                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 12692                                  ; number of sectors on a track on the medium, and the request would fail.
 12693                                  ;
 12694                                  ; input conditions:
 12695                                  ;	all registers set up for an int 13 request.
 12696                                  ;
 12697                                  ; output:
 12698                                  ;	dh - contains starting head number for request
 12699                                  ;	cx - contains starting sector and cylinder numbers
 12700                                  ;	(the above may or may not have been changed, and are 0-based)
 12701                                  ;	all other registers preserved.
 12702                                  
 12703                                  check_wrap:	
 12704 000013FC 50                      		push	ax
 12705 000013FD 53                      		push	bx
 12706 000013FE 06                      		push	es
 12707 000013FF 57                      		push	di
 12708 00001400 E86E00                  		call	find_bds	; get pointer to bds for drive in dl
 12709 00001403 7260                    		jb	short no_wrap	; finished if DOS doesn't use it
 12710                                  		; 12/12/2022
 12711 00001405 26F6452301              		test	byte [es:di+23h], 1
 12712                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 12713 0000140A 7459                    		jz	short no_wrap	; no wrapping for removable media
 12714 0000140C 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 12715 00001410 89C8                    		mov	ax, cx
 12716 00001412 83E03F                  		and	ax, 3Fh		; extract sector number
 12717 00001415 39D8                    		cmp	ax, bx		; are we going to wrap?
 12718 00001417 764C                    		jbe	short no_wrap
 12719 00001419 F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 12720                                  
 12721                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 12722                                  ; last sector on that track.
 12723                                  
 12724 0000141B 08E4                    		or	ah, ah
 12725 0000141D 7503                    		jnz	short not_on_bound
 12726                                  		; 18/12/2022
 12727 0000141F 48                      		dec	ax ; *
 12728 00001420 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 12729                                  					; if on	boundary
 12730                                  		;dec	al ; *		; also decrement # of head wraps
 12731                                  not_on_bound:				
 12732 00001422 80E1C0                  		and	cl, 0C0h	; zero out sector #
 12733 00001425 08E1                    		or	cl, ah		; or in	new sector #
 12734 00001427 30E4                    		xor	ah, ah		; ax = # of head wraps
 12735 00001429 40                      		inc	ax
 12736 0000142A 00F0                    		add	al, dh		; add in starting head #
 12737 0000142C 80D400                  		adc	ah, 0		; catch	any carry
 12738 0000142F 263B4515                		cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 12739                                  					; are we going to wrap around a	head?
 12740 00001433 7636                    		jbe	short no_wrap_head ; do	not lose new head number!!
 12741 00001435 52                      		push	dx		; preserve drive number and head number
 12742 00001436 31D2                    		xor	dx, dx
 12743 00001438 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 12744 0000143C F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 12745                                  
 12746                                  ; careful here! if new head # is 0, then we are on the last head.
 12747                                  
 12748 0000143E 09D2                    		or	dx, dx
 12749 00001440 7507                    		jnz	short no_head_bound
 12750 00001442 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 12751                                  
 12752                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 12753                                  
 12754 00001444 09C0                    		or	ax, ax
 12755 00001446 7401                    		jz	short no_head_bound
 12756 00001448 48                      		dec	ax		; reduce number	of cylinder wraps
 12757                                  no_head_bound:				
 12758 00001449 88D7                    		mov	bh, dl		; bh has new head number
 12759 0000144B 5A                      		pop	dx		; restore drive number and head number
 12760 0000144C FECF                    		dec	bh		; get it 0-based
 12761 0000144E 88FE                    		mov	dh, bh		; set up new head number in dh
 12762 00001450 88CF                    		mov	bh, cl
 12763 00001452 80E73F                  		and	bh, 3Fh		; preserve sector number
 12764 00001455 B306                    		mov	bl, 6
 12765 00001457 86CB                    		xchg	cl, bl
 12766 00001459 D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 12767 0000145B 00C5                    		add	ch, al		; add in cylinder wrap
 12768 0000145D 10E3                    		adc	bl, ah		; add in high byte
 12769 0000145F D2E3                    		shl	bl, cl		; move up to ms	end
 12770 00001461 86D9                    		xchg	bl, cl		; restore cylinder bits	into cl
 12771 00001463 08F9                    		or	cl, bh		; or in	sector number
 12772                                  no_wrap:				
 12773 00001465 F8                      		clc
 12774 00001466 5F                      		pop	di
 12775 00001467 07                      		pop	es
 12776 00001468 5B                      		pop	bx
 12777 00001469 58                      		pop	ax
 12778 0000146A C3                      		retn
 12779                                  ; ---------------------------------------------------------------------------
 12780                                  
 12781                                  no_wrap_head:				
 12782 0000146B 88C6                    		mov	dh, al		; do not lose new head number
 12783 0000146D FECE                    		dec	dh		; get it 0-based
 12784 0000146F EBF4                    		jmp	short no_wrap
 12785                                  
 12786                                  ; =============== S U B	R O U T	I N E =======================================
 12787                                  
 12788                                  ; 16/10/2022
 12789                                  
 12790                                  ; this is a special version of the bds lookup code which is
 12791                                  ; based on physical drives rather than the usual logical drives
 12792                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 12793                                  ; otherwise carry is clear
 12794                                  ;
 12795                                  ; guaranteed to trash no registers except es:di
 12796                                  
 12797                                  		; 19/10/2022
 12798                                  find_bds:	
 12799 00001471 C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 12800                                  fbds_1:					
 12801 00001475 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 12802 00001479 7409                    		jz	short fdbs_2
 12803 0000147B 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 12804                                  					; go to next bds
 12805 0000147E 83FFFF                  		cmp	di, 0FFFFh
 12806 00001481 75F2                    		jnz	short fbds_1
 12807 00001483 F9                      		stc
 12808                                  fdbs_2:					
 12809 00001484 C3                      		retn
 12810                                  
 12811                                  ; =============== S U B	R O U T	I N E =======================================
 12812                                  
 12813                                  ; 16/10/2022
 12814                                  		; 17/10/2022
 12815                                  doint:
 12816                                  		; 10/12/2022
 12817 00001485 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 12818                                  					; get physical drive number
 12819                                  		; 19/10/2022 - Temporary !
 12820                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 12821                                  		
 12822 00001488 30E4                    		xor	ah, ah
 12823 0000148A 08C0                    		or	al, al
 12824 0000148C 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 12825                                  		; 10/12/2022
 12826 0000148E 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 12827                                  					; get request code
 12828                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 12829 00001491 FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 12830                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 12831 00001494 9D                      		popf
 12832                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 12833                                  		; 17/10/2022
 12834 00001495 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 12835                                  		;;call	call_orig13	; call far 70h:797h
 12836                                  					; call far KERNEL_SEGMENT:call_orig13
 12837 0000149A 9C                      		pushf
 12838                                  		; 10/12/2022
 12839 0000149B 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 12840                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 12841                                  dointdone:				
 12842 0000149E C3                      		retn
 12843                                  
 12844                                  ;----------------------------------------------------------------------------
 12845                                  
 12846                                  ; 16/10/2022
 12847                                  
 12848                                  ; this is the true int 13 handler. we parse the request to see if there is
 12849                                  ; a dma violation. if so, depending on the function, we:
 12850                                  ;   read/write break the request into three pieces and move the middle one
 12851                                  ;	       into our internal buffer.
 12852                                  ;
 12853                                  ;   format     copy the format table into the buffer
 12854                                  ;   verify     point the transfer address into the buffer
 12855                                  ;
 12856                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 12857                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 12858                                  ; the offending sector into the buffer below and do the i/o from there.
 12859                                  
 12860                                  ;struc INT13FRAME
 12861                                  ;.oldbp: resw
 12862                                  ;.oldax: resw 
 12863                                  ;.oldbx: resw
 12864                                  ;.oldcx: resw
 12865                                  ;.olddx: resw
 12866                                  ;.oldds: resw	; now we save caller's ds, too
 12867                                  ;.olddd: resd
 12868                                  ;.oldf:	resw
 12869                                  ;end struc
 12870                                  
 12871                                  ;----------------------------------------------------------------------------
 12872                                  
 12873                                  ;   entry conditions:
 12874                                  ;	ah = function
 12875                                  ;	al = number of sectors
 12876                                  ;	es:bx = dma address
 12877                                  ;	cx = packed track and sector
 12878                                  ;	dx = head and drive
 12879                                  ;   output conditions:
 12880                                  ;	no dma violation.
 12881                                  
 12882                                  ;	use extreme caution when working with this code. In general,
 12883                                  ;	  all registers are hot at all times.
 12884                                  ;
 12885                                  ;	question:  does this code handle cases where dma errors
 12886                                  ;	  occur during ecc retries, and where ecc errors occur during
 12887                                  ;	  dma breakdowns???? Hmmmmm.
 12888                                  
 12889                                  ;----------------------------------------------------------------------------
 12890                                  
 12891                                  ; ---------------------------------------------------------------------------
 12892                                  
 12893 0000149F 90004000                dtype_array:	dd 400090h		; 40:90	is drive type array
 12894                                  
 12895                                  ; 17/10/2022
 12896                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 12897                                  ; 09/12/2022
 12898                                  DTYPEARRAY equ dtype_array
 12899                                  
 12900                                  ; ---------------------------------------------------------------------------
 12901                                  
 12902                                  ; stick some special stuff out of mainline
 12903                                  
 12904                                  ; we know we're doing a format command. if we have changeline
 12905                                  ; support, then flag some special changed stuff and set changed
 12906                                  ; by format bit for all logical drives using this physical drive
 12907                                  
 12908                                  format_special_stuff:			
 12909 000014A3 803E[7700]00            		cmp	byte [fhave96], 0	; do we have changeline support?
 12910 000014A8 7459                    		jz	short format_special_stuff_done ; brif not
 12911 000014AA 53                      		push	bx
 12912 000014AB BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 12913 000014AE E83804                  		call	set_changed_dl	; indicate that media changed by format
 12914 000014B1 5B                      		pop	bx
 12915 000014B2 EB4F                    		jmp	short format_special_stuff_done
 12916                                  ; ---------------------------------------------------------------------------
 12917                                  
 12918                                  ; 16/10/2022
 12919                                  
 12920                                  ; we know we've got ec35's on the system. Now see if we're doing
 12921                                  ; a floppy. If so, create a mask and see if this particular
 12922                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 12923                                  
 12924                                  		; 19/10/2022
 12925                                  ec35_special_stuff:			
 12926 000014B4 84D2                    		test	dl, dl		; floppy or hard disk?
 12927 000014B6 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 12928 000014B8 50                      		push	ax		; see if this PARTICULAR drive is ec35
 12929 000014B9 51                      		push	cx
 12930 000014BA 88D1                    		mov	cl, dl		; turn drive number into bit map
 12931 000014BC B001                    		mov	al, 1		; assume drive 0
 12932 000014BE D2E0                    		shl	al, cl		; shift	over correct number of times
 12933 000014C0 8406[3105]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 12934 000014C4 59                      		pop	cx
 12935 000014C5 58                      		pop	ax
 12936 000014C6 7442                    		jz	short ec35_special_stuff_done
 12937                                  					; done if this floppy is not an	ec35
 12938 000014C8 53                      		push	bx		; free up a far	pointer	(es:bx)
 12939 000014C9 06                      		push	es
 12940                                  		; 17/10/2022
 12941 000014CA 2EC41E[9F14]            		les	bx, [cs:DTYPEARRAY]
 12942                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 12943                                  					; 0070h:3A65h =	2C7h:14F5h
 12944 000014CF 00D3                    		add	bl, dl
 12945 000014D1 80D700                  		adc	bh, 0		; find entry for this drive
 12946 000014D4 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 12947                                  					; (360k	disk in	360k drive,
 12948                                  					; no double-stepping, 250 kbs transfer rate)
 12949 000014D8 07                      		pop	es
 12950 000014D9 5B                      		pop	bx
 12951 000014DA EB2E                    		jmp	short ec35_special_stuff_done
 12952                                  ; ---------------------------------------------------------------------------
 12953                                  
 12954                                  ; 16/10/2022
 12955                                  
 12956                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 12957                                  ; this function does not reset the common buses after the execution.
 12958                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 12959                                  ; will issue ah=1 (read status) call to reset the buses.
 12960                                  
 12961                                  ps2_special_stuff:			
 12962 000014DC 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 12963                                  					; read driver parm ?
 12964 000014E1 7407                    		jz	short ps2_30_problem
 12965 000014E3 803E[1E00]15            		cmp	byte [prevoper], 15h
 12966                                  					; apparently function 15h fails, too
 12967 000014E8 752D                    		jnz	short ps2_special_stuff_done
 12968                                  ps2_30_problem:				
 12969 000014EA 50                      		push	ax
 12970 000014EB B401                    		mov	ah, 1
 12971                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 12972                                  		; 17/10/2022
 12973 000014ED 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 12974                                  		;call	call_orig13	; call far 70:797h
 12975                                  					; call far KERNEL_SEGMENT:call_orig13
 12976 000014F2 58                      		pop	ax
 12977 000014F3 EB22                    		jmp	short ps2_special_stuff_done
 12978                                  ; ---------------------------------------------------------------------------
 12979                                  
 12980                                  ; 17/10/2022
 12981                                  ; 16/10/2022
 12982                                  
 12983                                  ; here is the actual int13 handler
 12984                                  
 12985                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 12986                                  
 12987                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 12988                                  ; vectoring up here from Bios_Data
 12989                                  
 12990                                  		; 19/10/2022
 12991 000014F5 1E                      		push	ds		; save caller's ds register first thing
 12992                                  		;;mov	ds, word [cs:0030h]
 12993                                  					; and set up our own ds -> Bios_Data
 12994 000014F6 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12995                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 12996                                  					; = [02C7h:0030h] = [0070h:25A0h]
 12997                                  
 12998                                  ; let the operation proceed. if there is a dma violation, then we do things
 12999                                  
 13000 000014FB A3[1E00]                		mov	[prevoper], ax	; save request
 13001 000014FE 80FC05                  		cmp	ah, 5		; romformat
 13002 00001501 74A0                    		jz	short format_special_stuff
 13003                                  					; go do special stuff for format
 13004                                   format_special_stuff_done:		
 13005 00001503 803E[3105]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 13006 00001508 75AA                    		jnz	short ec35_special_stuff
 13007                                  					; go handle it out of line if so
 13008                                  ec35_special_stuff_done:
 13009                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h		
 13010 0000150A 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13011                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13012                                  		
 13013 0000150F 9C                      		pushf			; save result flags
 13014                                  		
 13015 00001510 803E[3E06]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 13016                                  					; mdl_ps2_30
 13017 00001515 74C5                    		jz	short ps2_special_stuff
 13018                                  					; exit mainline to address special
 13019                                  ps2_special_stuff_done:			; ps2/30 problem if so		
 13020 00001517 9D                      		popf
 13021 00001518 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 13022                                  ret_from_i13:				
 13023 0000151A 1F                      		pop	ds
 13024 0000151B CA0200                  		retf	2		; restore ds &	iret w/flags
 13025                                  ; ---------------------------------------------------------------------------
 13026                                  
 13027                                  ; most of our code exits through here. If carry isn't set, then
 13028                                  ; just do a simple exit. Else doublecheck that we aren't getting
 13029                                  ; a changeline error.
 13030                                  
 13031                                  i13ret_ck_chglinerr:			
 13032 0000151E 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 13033                                  i13_ret_error:				
 13034 00001520 80FC06                  		cmp	ah, 6		; did i	see a change event?
 13035 00001523 7513                    		jnz	short int13b	; skip if wrong	error
 13036 00001525 08D2                    		or	dl, dl		; is this for the hard disk?
 13037 00001527 780F                    		js	short int13b	; yes, ignore
 13038 00001529 803E[7700]00            		cmp	byte [fhave96], 0
 13039 0000152E 7408                    		jz	short int13b	; just in case ROM returned this
 13040                                  					; error	even though it told us it
 13041                                  					; never	would
 13042 00001530 53                      		push	bx
 13043 00001531 BB4000                  		mov	bx, 40h		; fchanged
 13044 00001534 E8B203                  		call	set_changed_dl
 13045 00001537 5B                      		pop	bx
 13046                                  int13b:					
 13047 00001538 F9                      		stc			; now return the error
 13048 00001539 EBDF                    		jmp	short ret_from_i13
 13049                                  ; ---------------------------------------------------------------------------
 13050                                  
 13051                                  ; some kind of error occurred. see if it is dma violation
 13052                                  
 13053                                  goterr13:				
 13054 0000153B 80FC09                  		cmp	ah, 9		; dma error?
 13055 0000153E 747C                    		jz	short gotdmaerr
 13056                                  goterr13_xxxx:				
 13057 00001540 80FC11                  		cmp	ah, 11h		; ecc error?
 13058 00001543 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 13059 00001545 803E[3806]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 13060 0000154A 74D4                    		jz	short i13_ret_error
 13061                                  
 13062 0000154C 803E[1F00]02            		cmp	byte [prevoper+1], 2
 13063                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 13064                                  					; (2 = romread)
 13065                                  					; ECC correction only applies to reads
 13066 00001551 75CD                    		jnz	short i13_ret_error
 13067                                  
 13068 00001553 30E4                    		xor	ah, ah
 13069                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 13070                                  		; 17/10/2022
 13071 00001555 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13072                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13073                                  					; call far 70:797h
 13074 0000155A A1[1E00]                		mov	ax, [prevoper]
 13075 0000155D 30E4                    		xor	ah, ah		; return code =	no error
 13076 0000155F 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 13077 00001561 74B7                    		jz	short ret_from_i13 ; return with carry clear
 13078 00001563 53                      		push	bx
 13079 00001564 51                      		push	cx
 13080 00001565 52                      		push	dx
 13081 00001566 A2[2000]                		mov	[number_of_sec], al
 13082                                  loop_ecc:				
 13083 00001569 B80102                  		mov	ax, 201h	; read one sector
 13084                                  
 13085                                  ; we do reads one sector at a time. this ensures that we will eventually
 13086                                  ; finish the request since ecc errors on one sector do read in that sector.
 13087                                  ;
 13088                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 13089                                  ; that attempt to read more sectors than are available on a particular
 13090                                  ; track.
 13091                                  ;
 13092                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 13093                                  ; this request.
 13094                                  ;
 13095                                  ; at this point, all registers are set up for the call to orig13, except
 13096                                  ; that there may be a starting sector number that is bigger than the number
 13097                                  ; of sectors on a track.
 13098                                  ;
 13099 0000156C E88DFE                  		call	check_wrap	; get correct parameters for int 13
 13100                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 13101                                  		; 17/10/2022
 13102 0000156F 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13103                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13104 00001574 730C                    		jnb	short ok11_op
 13105 00001576 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 13106 00001579 741B                    		jz	short handle_dma_during_ecc
 13107 0000157B 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 13108 0000157E 7510                    		jnz	short ok11_exit_err
 13109                                  		; 10/12/2022
 13110                                  		; xor ax ax -> ah = 0
 13111                                  		;mov	ah, 0		; ecc error. reset the system again.
 13112 00001580 31C0                    		xor	ax, ax		; clear	the error code so that if this
 13113                                  					; was the last sector, no error	code
 13114                                  					; will be returned for the corrected
 13115                                  					; read.	(clear carry too.)
 13116                                  ok11_op:				
 13117 00001582 FE0E[2000]              		dec	byte [number_of_sec]
 13118 00001586 7409                    		jz	short ok11_exit	; all done?
 13119 00001588 FEC1                    		inc	cl		; advance sector number
 13120                                  					; add 200h to address
 13121 0000158A FEC7                    		inc	bh
 13122 0000158C FEC7                    		inc	bh
 13123 0000158E EBD9                    		jmp	short loop_ecc
 13124                                  ; ---------------------------------------------------------------------------
 13125                                  
 13126                                  ; locate error returns centrally
 13127                                  
 13128                                  ok11_exit_err:				
 13129 00001590 F9                      		stc			; set carry bit again.
 13130                                  ok11_exit:				
 13131 00001591 5A                      		pop	dx
 13132 00001592 59                      		pop	cx
 13133 00001593 5B                      		pop	bx
 13134 00001594 EB88                    		jmp	short i13ret_ck_chglinerr
 13135                                  ; ---------------------------------------------------------------------------
 13136                                  
 13137                                  ; do the single sector read again, this time into our temporary
 13138                                  ; buffer, which is guaranteed not to have a DMA error, then
 13139                                  ; move the data to its proper location and proceed
 13140                                  
 13141                                  handle_dma_during_ecc:			
 13142 00001596 06                      		push	es
 13143 00001597 53                      		push	bx
 13144 00001598 BB[4E01]                		mov	bx, disksector
 13145 0000159B 1E                      		push	ds
 13146 0000159C 07                      		pop	es		; point es:bx to buffer
 13147 0000159D B80102                  		mov	ax, 201h	; read one sector
 13148                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 13149                                  		; 17/10/2022
 13150 000015A0 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13151                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13152 000015A5 5B                      		pop	bx
 13153 000015A6 07                      		pop	es
 13154 000015A7 7305                    		jnb	short handle_dma_during_ecc_noerr
 13155 000015A9 80FC11                  		cmp	ah, 11h
 13156 000015AC 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 13157                                  
 13158                                  ; now we're kosher. Copy the data to where it belongs and resume
 13159                                  ; the ECC looping code.
 13160                                  
 13161                                  handle_dma_during_ecc_noerr:		
 13162 000015AE 56                      		push	si
 13163 000015AF 57                      		push	di
 13164 000015B0 89DF                    		mov	di, bx
 13165 000015B2 BE[4E01]                		mov	si, disksector
 13166 000015B5 E829FE                  		call	move_sector
 13167 000015B8 5F                      		pop	di
 13168 000015B9 5E                      		pop	si
 13169 000015BA EBC6                    		jmp	short ok11_op
 13170                                  ; ---------------------------------------------------------------------------
 13171                                  
 13172                                  ; we truly have a dma violation. restore register ax and retry the
 13173                                  ; operation as best we can.
 13174                                  
 13175                                  gotdmaerr:				
 13176 000015BC A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 13177 000015BF FB                      		sti
 13178 000015C0 80FC02                  		cmp	ah, 2		; romread
 13179 000015C3 723B                    		jb	short i13_done_dmaerr
 13180                                  					; just pass dma error thru for
 13181                                  					; functions we don't handle
 13182 000015C5 80FC04                  		cmp	ah, 4		; romverify
 13183 000015C8 743C                    		jz	short intverify
 13184 000015CA 80FC05                  		cmp	ah, 5		; romformat
 13185 000015CD 7448                    		jz	short intformat
 13186 000015CF 772F                    		ja	short i13_done_dmaerr
 13187                                  
 13188                                  ; we are doing a read/write call. check for dma problems
 13189                                  
 13190                                  ;	******** set up stack frame here!!! ********
 13191                                  
 13192 000015D1 52                      		push	dx
 13193 000015D2 51                      		push	cx
 13194 000015D3 53                      		push	bx
 13195 000015D4 50                      		push	ax
 13196 000015D5 55                      		push	bp
 13197 000015D6 89E5                    		mov	bp, sp
 13198 000015D8 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 13199 000015DA D1E2                    		shl	dx, 1
 13200 000015DC D1E2                    		shl	dx, 1
 13201 000015DE D1E2                    		shl	dx, 1
 13202 000015E0 D1E2                    		shl	dx, 1		; segment converted to absolute	address
 13203 000015E2 01DA                    		add	dx, bx		; combine with offset
 13204 000015E4 81C2FF01                		add	dx, 511		; simulate a transfer
 13205                                  
 13206                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 13207                                  ; we skip the first transfer and perform the remaining buffering and transfer
 13208                                  
 13209 000015E8 7303                    		jnb	short no_skip_first
 13210 000015EA E98300                  		jmp	bufferx		; restore dh=head & do buffer
 13211                                  ; ---------------------------------------------------------------------------
 13212                                  
 13213                                  no_skip_first:				
 13214 000015ED D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 13215 000015EF B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 13216 000015F1 28F4                    		sub	ah, dh
 13217                                  
 13218                                  ; ah is now the number of sectors that we can successfully write in this
 13219                                  ; segment. if this number is above or equal to the requested number, then we
 13220                                  ; continue the operation as normal. otherwise, we break it into pieces.
 13221                                  ;
 13222                                  ; wait a sec. this is goofy. the whole reason we got here in the
 13223                                  ; first place is because we got a dma error. so it's impossible
 13224                                  ; for the whole block to fit, unless the dma error was returned
 13225                                  ; in error.
 13226                                  
 13227 000015F3 38C4                    		cmp	ah, al		; can we fit it	in?
 13228 000015F5 7236                    		jb	short doblock	; no, perform blocking.
 13229                                  
 13230                                  ; yes, the request fits. let it happen.
 13231                                  
 13232 000015F7 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13233                                  					; set up head number
 13234 000015FA E888FE                  		call	doint
 13235 000015FD E9D900                  		jmp	bad13		; and return from this place
 13236                                  ; ---------------------------------------------------------------------------
 13237                                  
 13238                                  i13_done_dmaerr:			
 13239 00001600 B409                    		mov	ah, 9		; pass dma error thru to caller
 13240 00001602 F9                      		stc
 13241 00001603 E914FF                  		jmp	ret_from_i13	; return with error,
 13242                                  					; we know it's not a changeline error
 13243                                  ; ---------------------------------------------------------------------------
 13244                                  
 13245                                  ; verify the given sectors. place the buffer pointer into our space.
 13246                                  
 13247                                  intverify:				
 13248 00001606 06                      		push	es		; save caller's dma address
 13249 00001607 53                      		push	bx
 13250 00001608 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 13251 00001609 07                      		pop	es
 13252                                  dosimple:				
 13253 0000160A BB[4E01]                		mov	bx, disksector
 13254                                  					; do the i/o from Bios_Data:disksector
 13255                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 13256                                  		; 17/10/2022
 13257 0000160D 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13258                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13259 00001612 5B                      		pop	bx
 13260 00001613 07                      		pop	es
 13261 00001614 E907FF                  		jmp	i13ret_ck_chglinerr
 13262                                  ; ---------------------------------------------------------------------------
 13263                                  
 13264                                  ; format operation. copy the parameter table into Bios_Data:disksector
 13265                                  
 13266                                  intformat:				
 13267 00001617 06                      		push	es
 13268 00001618 53                      		push	bx
 13269 00001619 56                      		push	si
 13270 0000161A 57                      		push	di
 13271 0000161B 1E                      		push	ds
 13272                                  
 13273                                  ; point ds to the caller's dma buffer, es to Bios_Data
 13274                                  ; in other words, swap (ds, es)
 13275                                  
 13276 0000161C 06                      		push	es
 13277 0000161D 1E                      		push	ds
 13278 0000161E 07                      		pop	es
 13279 0000161F 1F                      		pop	ds
 13280 00001620 89DE                    		mov	si, bx
 13281 00001622 BF[4E01]                		mov	di, disksector
 13282 00001625 E8B9FD                  		call	move_sector	; user's data into Bios_Data:disksector
 13283 00001628 1F                      		pop	ds
 13284 00001629 5F                      		pop	di
 13285 0000162A 5E                      		pop	si		; do the i/o from
 13286 0000162B EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 13287                                  ; ---------------------------------------------------------------------------
 13288                                  
 13289                                  ; we can't fit the request into the entire block. perform the operation on
 13290                                  ; the first block.
 13291                                  ;
 13292                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 13293                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 13294                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 13295                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 13296                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 13297                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 13298                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 13299                                  ; doblock will handle the first block of requested sectors within the
 13300                                  ; boundary of this safe value.
 13301                                  
 13302                                  doblock:
 13303                                  
 13304                                  ; try to get the # of sectors/track from bds via rom drive number.
 13305                                  ; for any mini disks installed, here we have to pray that they have the
 13306                                  ; same # of sector/track as the main dos partition disk drive.
 13307                                  				
 13308 0000162D 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 13309                                  					; get head #, drive #
 13310 00001630 51                      		push	cx
 13311 00001631 06                      		push	es
 13312 00001632 57                      		push	di		; ah - # of sectors before dma boundary
 13313                                  					; al - requested # of sectors for i/o.
 13314 00001633 E83BFE                  		call	find_bds
 13315 00001636 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13316                                  		; 12/12/2022
 13317 0000163A 26F6452301              		test	byte [es:di+23h], 1
 13318                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13319 0000163F 5F                      		pop	di
 13320 00001640 07                      		pop	es
 13321 00001641 88E0                    		mov	al, ah		; set al=ah for	floppies
 13322 00001643 7404                    		jz	short doblockflop ; they are track by track operation
 13323 00001645 B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 13324 00001647 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 13325                                  doblockflop:				
 13326 00001649 59                      		pop	cx
 13327                                  doblockcontinue:			
 13328 0000164A 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 13329 0000164C 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 13330 0000164E 50                      		push	ax
 13331 0000164F 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 13332 00001651 EB03                    		jmp	short doblockdoint
 13333                                  ; ---------------------------------------------------------------------------
 13334                                  
 13335                                  doblocklast:				
 13336 00001653 88C4                    		mov	ah, al
 13337 00001655 50                      		push	ax
 13338                                  doblockdoint:				; let ah = al =	# of sectors for this shot	
 13339 00001656 E82CFE                  		call	doint
 13340 00001659 727E                    		jb	short bad13	; something happened, bye!
 13341 0000165B 58                      		pop	ax
 13342 0000165C 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 13343                                  					; decrement by the successful operation
 13344 0000165F 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 13345 00001661 00E7                    		add	bh, ah		; advance dma addres
 13346 00001663 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 13347 00001665 38C4                    		cmp	ah, al		; check	the previous value
 13348 00001667 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 13349                                  					; then we are done already.
 13350 00001669 28E0                    		sub	al, ah		; otherwise,
 13351                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 13352 0000166B E88EFD                  		call	check_wrap	; get new cx, dh for the next operation.
 13353 0000166E EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 13354                                  ; ---------------------------------------------------------------------------
 13355                                  
 13356                                  bufferx:				
 13357 00001670 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13358                                  					; set up head number
 13359                                  buffer:					
 13360 00001673 53                      		push	bx
 13361 00001674 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13362 00001677 80FC03                  		cmp	ah, 3		; romwrite
 13363 0000167A 7525                    		jnz	short doread	;
 13364                                  					
 13365                                  ; copy the offending sector into local buffer
 13366                                  
 13367 0000167C 06                      		push	es
 13368 0000167D 1E                      		push	ds
 13369 0000167E 56                      		push	si
 13370 0000167F 57                      		push	di
 13371 00001680 1E                      		push	ds		; exchange segment registers
 13372 00001681 06                      		push	es
 13373 00001682 1F                      		pop	ds
 13374 00001683 07                      		pop	es
 13375 00001684 BF[4E01]                		mov	di, disksector	; where to move
 13376 00001687 57                      		push	di		; save it
 13377 00001688 89DE                    		mov	si, bx		; source
 13378 0000168A E854FD                  		call	move_sector	; move sector into local buffer
 13379 0000168D 5B                      		pop	bx		; new transfer address
 13380                                  					; (es:bx = Bios_Data:diskbuffer)
 13381 0000168E 5F                      		pop	di		; restore caller's di & si
 13382 0000168F 5E                      		pop	si
 13383 00001690 1F                      		pop	ds		; restore Bios_Data
 13384                                  
 13385                                  ; see if we are wrapping around a track or head
 13386                                  
 13387 00001691 B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 13388                                  					; get drive number
 13389 00001693 8A5608                  		mov	dl, [bp+8]
 13390 00001696 E863FD                  		call	check_wrap	; sets up registers if wrap-around
 13391                                  					;
 13392                                  					; ah is	function
 13393                                  					; al is	1 for single sector transfer
 13394                                  					; es:bx	is local transfer addres
 13395                                  					; cx is	track/sector number
 13396                                  					; dx is	head/drive number
 13397                                  					; si,di	unchanged
 13398 00001699 E8E9FD                  		call	doint
 13399 0000169C 07                      		pop	es		; restore caller's dma segment
 13400 0000169D 723A                    		jb	short bad13	; go clean up
 13401 0000169F EB22                    		jmp	short dotail
 13402                                  ; ---------------------------------------------------------------------------
 13403                                  
 13404                                  ; reading a sector. do int first, then move things around
 13405                                  
 13406                                  doread:					
 13407 000016A1 06                      		push	es
 13408 000016A2 53                      		push	bx
 13409 000016A3 1E                      		push	ds		; es = Bios_Code
 13410 000016A4 07                      		pop	es
 13411 000016A5 BB[4E01]                		mov	bx, disksector
 13412 000016A8 B001                    		mov	al, 1
 13413 000016AA 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13414                                  					; get drive number
 13415 000016AD E84CFD                  		call	check_wrap	;
 13416                                  					; ah = function
 13417                                  					; al = 1 for single sector
 13418                                  					; es:bx	points to local	buffer
 13419                                  					; cx, dx are track/sector, head/drive
 13420 000016B0 E8D2FD                  		call	doint
 13421 000016B3 5B                      		pop	bx
 13422 000016B4 07                      		pop	es
 13423 000016B5 7222                    		jb	short bad13
 13424 000016B7 56                      		push	si
 13425 000016B8 57                      		push	di
 13426 000016B9 89DF                    		mov	di, bx
 13427 000016BB BE[4E01]                		mov	si, disksector
 13428 000016BE E820FD                  		call	move_sector
 13429 000016C1 5F                      		pop	di
 13430 000016C2 5E                      		pop	si
 13431                                  
 13432                                  ; note the fact that we've done 1 more sector
 13433                                  
 13434                                  dotail:					
 13435 000016C3 5B                      		pop	bx		; retrieve new dma area
 13436 000016C4 80C702                  		add	bh, 2		; advance over sector
 13437 000016C7 41                      		inc	cx
 13438 000016C8 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 13439 000016CB F8                      		clc
 13440 000016CC FEC8                    		dec	al
 13441 000016CE 7409                    		jz	short bad13	; no more i/o
 13442                                  
 13443                                  ; see if we wrap around a track or head boundary with starting sector
 13444                                  ; we already have the correct head number to pass to check_wrap
 13445                                  
 13446 000016D0 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13447 000016D3 E826FD                  		call	check_wrap
 13448 000016D6 E8ACFD                  		call	doint
 13449                                  
 13450                                  ; we are done. ax has the final code; we throw away what we got before
 13451                                  
 13452                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 13453                                  ;	   or we've finished. If carry is set now, our only
 13454                                  ;	   hope for salvation is that it was a read operation
 13455                                  ;	   and the error code is ECC error. In that case, we'll
 13456                                  ;	   just pop the registers and go do the old ECC thing.
 13457                                  ;	   When the DMA error that got us here in the first
 13458                                  ;	   place occurs, it'll handle it.
 13459                                  
 13460                                  bad13:					
 13461 000016D9 89EC                    		mov	sp, bp
 13462 000016DB 5D                      		pop	bp
 13463 000016DC 5B                      		pop	bx
 13464 000016DD 5B                      		pop	bx
 13465 000016DE 59                      		pop	cx
 13466 000016DF 5A                      		pop	dx
 13467 000016E0 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 13468 000016E2 E935FE                  		jmp	ret_from_i13	; non-error exit
 13469                                  ; ---------------------------------------------------------------------------
 13470                                  
 13471                                  xgoterr13_xxxx:				
 13472 000016E5 E958FE                  		jmp	goterr13_xxxx
 13473                                  
 13474                                  ; ---------------------------------------------------------------------------
 13475                                  		; 10/12/2022
 13476                                  		;db 	0
 13477                                  ; ---------------------------------------------------------------------------
 13478                                  
 13479                                  ;Bios_Code ends
 13480                                  
 13481                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13482                                  
 13483                                  ;-----------------------------------------------------------------------------
 13484                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 13485                                  ;-----------------------------------------------------------------------------
 13486                                  ; 17/03/2019 - Retro DOS v4.0
 13487                                  
 13488                                  		; 19/10/2022
 13489                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 13490 000016E8 8A26[7500]              		mov	ah, [drvmax]
 13491 000016EC BF[8706]                		mov	di, dskdrvs
 13492 000016EF 1E                      		push	ds		; pass result in es:di
 13493 000016F0 07                      		pop	es
 13494 000016F1 E9C4EE                  		jmp	SetPtrSav
 13495                                  
 13496                                  ; =============== S U B	R O U T	I N E =======================================
 13497                                  
 13498                                  ;---------------------------------------------------------------------------
 13499                                  ; install_bds installs a bds at location es:di into the current linked list of
 13500                                  ; bds maintained by this device driver. it places the bds at the end of the
 13501                                  ; list. Trashes (at least) ax, bx, di, si
 13502                                  ;---------------------------------------------------------------------------
 13503                                  
 13504                                  install_bds:		
 13505 000016F4 1E                      		push	ds		; save Bios_Data segment
 13506 000016F5 BE[1901]                		mov	si, start_bds	; beginning of chain
 13507                                  
 13508                                  		; ds:si now points to link to first bds
 13509                                  		; assume bds list is non-empty
 13510                                  loop_next_bds:				
 13511 000016F8 C534                    		lds	si, [si]	; [si+BDS.link]
 13512                                  					; fetch	next bds
 13513 000016FA 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 13514 000016FE 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 13515                                  					; drive	with new one?
 13516 00001701 7518                    		jnz	short next_bds
 13517 00001703 B310                    		mov	bl, 10h		; fi_am_mult
 13518 00001705 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13519                                  					; set both of them to i_am_mult	if so
 13520 00001709 085C23                  		or	[si+23h], bl	; [si+BDS.flags]
 13521 0000170C 26806523DF              		and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 13522                                  					; we don't own it
 13523 00001711 8A5C23                  		mov	bl, [si+23h]	; [si+BDS.flags]
 13524                                  					; determine if changeline available
 13525 00001714 80E302                  		and	bl, 2		; fchangeline
 13526 00001717 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13527                                  next_bds:				
 13528 0000171B 833CFF                  		cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 13529                                  					; are we at end	of list?
 13530 0000171E 75D8                    		jnz	short loop_next_bds
 13531 00001720 8C4402                  		mov	word [si+2], es ; [si+BDS.link+2],es
 13532                                  					; install bds
 13533 00001723 893C                    		mov	[si], di
 13534 00001725 26C705FFFF              		mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 13535                                  					; set next pointer to null
 13536 0000172A 1F                      		pop	ds
 13537                                  
 13538                                  ; 16/10/2022 (MSDOS 6.0 Code)
 13539                                  ;
 13540                                  ; **** If the new drive has a higher EOT value, we must alter the
 13541                                  ;      'eot' variable appropriately.
 13542                                  ;
 13543                                  ;		; 01/06/2019
 13544                                  ;		;mov	al,[es:di+52]
 13545                                  ;		mov	al,[es:di+BDS.rsecpertrack]
 13546                                  ;
 13547                                  ;		cmp	al,[eot]
 13548                                  ;		jbe	short _eot_ok
 13549                                  ;		mov	[eot],al
 13550                                  
 13551 0000172B C3                      		retn
 13552                                  
 13553                                  ; ---------------------------------------------------------------------------
 13554                                  
 13555                                  ; 17/10/2022
 13556                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 13557                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h	
 13558                                  ; 09/12/2022
 13559                                  DRVLET equ drvlet
 13560                                  SNGMSG equ sngmsg
 13561                                  
 13562                                  ; 16/10/2022
 13563                                  
 13564                                  ;---------------------------------------------------------------------------
 13565                                  ;  ask to swap the disk in drive a:
 13566                                  ;	es:di -> bds
 13567                                  ;	ds -> Bios_Data
 13568                                  ;---------------------------------------------------------------------------
 13569                                  
 13570                                  		; 19/10/2022
 13571 0000172C F606[CE08]01            swpdsk:		test	byte [IsWin386], 1			
 13572                                  		;test	ds:IsWin386, 1	; Is win386 present?
 13573 00001731 7405                    		jz	short no_win386	; no, skip SetFocus
 13574                                  		
 13575                                  		; set focus to the correct VM
 13576                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 13577                                  		; 17/10/2022
 13578 00001733 9A[CF08]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus
 13579                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 13580                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 13581                                  no_win386:				
 13582 00001738 51                      		push	cx
 13583 00001739 52                      		push	dx
 13584 0000173A 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 13585                                  					; get the drive	letter
 13586                                  
 13587                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 13588                                  ;           then existing dsk is drive A & vice versa
 13589                                  
 13590 0000173E 88D6                    		mov	dh, dl
 13591 00001740 80F601                  		xor	dh, 1
 13592 00001743 29C9                    		sub	cx, cx		; nobody has handled swap disk
 13593 00001745 B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 13594                                  					; broad	cast code for swap disk
 13595                                  					; Broadcast it
 13596 00001748 CD2F                    		int	2Fh	
 13597 0000174A 41                      		inc	cx		; cx == -1 ?
 13598 0000174B 741E                    		jz	short swpdsk9	; somebody has handled it
 13599                                  
 13600                                  ; using a different drive in a one drive system so request the user change disks
 13601                                  
 13602 0000174D 80C241                  		add	dl, 'A'
 13603                                  		; 17/10/2022
 13604 00001750 2E8816[8A17]            		mov	[cs:DRVLET], dl
 13605                                  		; 16/10/2022
 13606                                  		;;mov	byte [cs:drvlet], dl
 13607                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 13608                                  					; 0070h:3D54h =	2C7h:17E4h
 13609 00001755 BE[6E17]                		mov	si, SNGMSG
 13610                                  		;mov	si, 17C8h	; sngmsg
 13611                                  					; 0070h:3D38h =	2C7h:17C8h
 13612 00001758 53                      		push	bx
 13613 00001759 2E                      		cs
 13614 0000175A AC                      		lodsb			; get the next character of the message
 13615                                  		;lods	byte ptr cs:[si]
 13616                                  wrmsg_loop:				
 13617 0000175B CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 13618                                  					; AL = character to display
 13619 0000175D 2E                      		cs
 13620 0000175E AC                      		lodsb
 13621                                  		;lods	byte ptr cs:[si] ; cs lodsb
 13622                                  					; get the next character of the	message
 13623 0000175F 08C0                    		or	al, al
 13624 00001761 75F8                    		jnz	short wrmsg_loop
 13625 00001763 E8A1EA                  		call	con_flush	; flush out keyboard queue
 13626                                  					; call rom-bios
 13627 00001766 30E4                    		xor	ah, ah
 13628 00001768 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 13629                                  					; Return: AH = scan code, AL = character
 13630 0000176A 5B                      		pop	bx
 13631                                  swpdsk9:				
 13632 0000176B 5A                      		pop	dx
 13633 0000176C 59                      		pop	cx
 13634 0000176D C3                      		retn
 13635                                  
 13636                                  ; ---------------------------------------------------------------------------
 13637                                  
 13638                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13639                                  
 13640                                  ;--------------------------------------------------------
 13641                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 13642                                  ;--------------------------------------------------------
 13643                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 13644                                  ;--------------------------------------------------------
 13645                                  ; 17/03/2019 - Retro DOS v4.0
 13646                                  
 13647                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 13648 0000176E 0D0A                    sngmsg:		db 0Dh,0Ah
 13649 00001770 496E73657274206469-     		db 'Insert diskette for drive '
 13649 00001779 736B6574746520666F-
 13649 00001782 7220647269766520   
 13650                                  
 13651                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 13652 0000178A 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 13652 00001793 65737320616E79206B-
 13652 0000179C 6579207768656E2072-
 13652 000017A5 656164790D0A       
 13653 000017AB 0A00                    		db 0Ah,0
 13654                                  
 13655                                  ; =============== S U B	R O U T	I N E =======================================
 13656                                  
 13657                                  ;---------------------------------------------------------------------------
 13658                                  ; input : es:di points to current bds for drive.
 13659                                  ; return : zero set if no open files
 13660                                  ;	   zero reset if open files
 13661                                  ;---------------------------------------------------------------------------
 13662                                  
 13663                                  chkopcnt:		
 13664 000017AD 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 13665 000017B2 C3                      		retn
 13666                                  
 13667                                  ; =============== S U B	R O U T	I N E =======================================
 13668                                  
 13669                                  ;---------------------------------------------------------------------------
 13670                                  ; at media check time, we need to really get down and check what the change is.
 13671                                  ; this is guaranteed to be expensive.
 13672                                  ;
 13673                                  ;	es:di -> bds, ds -> Bios_Data
 13674                                  ;---------------------------------------------------------------------------
 13675                                  
 13676                                  mediacheck:	
 13677 000017B3 E885F0                  		call	checksingle	; make sure correct disk is in place
 13678 000017B6 31F6                    		xor	si, si
 13679 000017B8 E85501                  		call	haschange
 13680 000017BB 742F                    		jz	short mediaret
 13681 000017BD E84401                  		call	checkromchange
 13682 000017C0 752B                    		jnz	short mediadovolid
 13683 000017C2 50                      		push	ax
 13684 000017C3 52                      		push	dx
 13685 000017C4 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 13686                                  					; set logical drive number
 13687 000017C8 B416                    		mov	ah, 16h
 13688 000017CA CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 13689                                  					; DL = drive to	check
 13690                                  					; Return: AH = disk change status
 13691 000017CC 5A                      		pop	dx
 13692 000017CD 58                      		pop	ax
 13693 000017CE 721D                    		jb	short mediadovolid
 13694 000017D0 BE0100                  		mov	si, 1		; signal no change
 13695                                  
 13696                                  ; there are some drives with changeline that "lose" the changeline indication
 13697                                  ; if a different drive is accessed after the current one. in order to avoid
 13698                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 13699                                  ; is not active and we are accessing a different drive from the last one.
 13700                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 13701                                  ; status.
 13702                                  		; 19/10/2022
 13703 000017D3 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 13704 000017D7 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 13705                                  					; (If the last drive accessed is not current drive
 13706                                  					; media	change status may be incorrect.	So,
 13707                                  					; "I don't now" will be returned even if it is indicated
 13708                                  					; as media is not changed.)
 13709 000017DB 740F                    		jz	short mediaret	; (same	drive,
 13710                                  					; media	changeline indication is reliable)
 13711                                  
 13712                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 13713                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 13714                                  ; "not changed" here since the 2 second test said no change.)
 13715                                  
 13716 000017DD 50                      		push	ax
 13717 000017DE 51                      		push	cx
 13718 000017DF 52                      		push	dx
 13719 000017E0 E870ED                  		call	Check_Time_Of_Access
 13720 000017E3 5A                      		pop	dx
 13721 000017E4 59                      		pop	cx
 13722 000017E5 58                      		pop	ax
 13723 000017E6 09F6                    		or	si, si
 13724 000017E8 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 13725                                  					; (volume id will be checked)
 13726 000017EA 31F6                    		xor	si, si		; return "i don't know"
 13727                                  mediaret:				
 13728 000017EC C3                      		retn
 13729                                  ; ---------------------------------------------------------------------------
 13730                                  
 13731                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 13732                                  ; because this may be different since we only set medbyt when doing a read
 13733                                  ; or write.
 13734                                  
 13735                                  mediadovolid:				
 13736 000017ED E807EE                  		call	GetBp		; build	a new bpb in current bds
 13737 000017F0 72FA                    		jb	short mediaret
 13738 000017F2 E82D00                  		call	check_vid
 13739 000017F5 73F5                    		jnb	short mediaret
 13740 000017F7 E9D6F3                  		jmp	maperror	; fix up al for	return to dos
 13741                                  ; ---------------------------------------------------------------------------
 13742                                  
 13743                                  ; simple, quick check of latched change. if no indication, then return
 13744                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 13745                                  ; return and set al = 15 (for invalid media change) which will be returned to
 13746                                  ; dos.
 13747                                  ;
 13748                                  ; for dos 3.3, this will work only for the drive that has changeline.
 13749                                  
 13750                                  ;	call with es:di -> bds, ds -> Bios_Data
 13751                                  ;	***** warning:  this routine will return one level up on the stack
 13752                                  ;			if an error occurs!
 13753                                  
 13754                                  checklatchio:	
 13755                                  
 13756                                  ; if returning fake bpb then assume the disk has not changed
 13757                                  			
 13758 000017FA E8B0FF                  		call	chkopcnt
 13759 000017FD 741B                    		jz	short checkret	; done if zero
 13760                                  
 13761                                  ; check for past rom indications. if no rom change indicated, then return ok.
 13762                                  
 13763 000017FF E80201                  		call	checkromchange
 13764 00001802 7416                    		jz	short checkret
 13765                                  
 13766                                  ; we now see that a change line has been seen in the past. let's do the
 13767                                  ; expensive verification.
 13768                                  
 13769 00001804 E8F0ED                  		call	GetBp		; build	bpb in current bds
 13770 00001807 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 13771 00001809 E81600                  		call	check_vid
 13772 0000180C 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 13773 0000180E 09F6                    		or	si, si		; is changed for sure?
 13774 00001810 7908                    		jns	short checkret
 13775 00001812 E87D00                  		call	returnvid
 13776                                  checklatchret:				
 13777 00001815 E8B8F3                  		call	maperror	; fix up al for	return to dos
 13778                                  ret_no_error_map:			
 13779 00001818 F9                      		stc
 13780 00001819 5E                      		pop	si		; pop off return address
 13781                                  checkret:				
 13782 0000181A C3                      		retn
 13783                                  ; ---------------------------------------------------------------------------
 13784                                  
 13785                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 13786                                  ; only if there was a disk error. return that error code in ax.
 13787                                  ;
 13788                                  ;	called with es:di -> bds, ds -> Bios_Data
 13789                                  
 13790                                  checkfatvid:				
 13791 0000181B E8CD01                  		call	fat_check	; check	the fat	and the	vid
 13792 0000181E 09F6                    		or	si, si
 13793 00001820 7827                    		js	short changed_drv ;
 13794                                  
 13795                                  ; the fat was the same. fall into check_vid and check volume id.
 13796                                  
 13797                                  		; fall into check_vid
 13798                                  
 13799                                  ; =============== S U B	R O U T	I N E =======================================
 13800                                  
 13801                                  ; now with the extended boot record, the logic should be enhanced.
 13802                                  ;
 13803                                  ; if it is the extended boot record, then we check the volume serial
 13804                                  ; number instead of volume id. if it is different, then set si to -1.
 13805                                  ;
 13806                                  ; if it is same, then si= 1 (no change).
 13807                                  ;
 13808                                  ; if it is not the extended boot record, then just follows the old
 13809                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 13810                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 13811                                  ; should have already covered by extended boot structure checking.
 13812                                  ; so, we will return "i don't know" by setting si to 0.
 13813                                  ;
 13814                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 13815                                  ; (this will be gauranteed by a successful getbp call right before this
 13816                                  ; routine.)
 13817                                  ;
 13818                                  ;	called with es:di -> bds, ds -> bds
 13819                                  
 13820                                  		; 19/10/2022
 13821                                  check_vid:
 13822                                  
 13823                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 13824                                  ; boot signature. if it is set then go to do the extended
 13825                                  ; id check otherwise continue with code below
 13826                                  
 13827 00001822 803E[7401]29            		cmp	byte [disksector+26h], 29h
 13828                                  					; [disksector+EXT_BOOT.SIG],
 13829                                  					; EXT_BOOT_SIGNATURE
 13830 00001827 7427                    		jz	short do_ext_check_id
 13831 00001829 E8E400                  		call	haschange
 13832 0000182C 74EC                    		jz	short checkret
 13833 0000182E 31F6                    		xor	si, si
 13834 00001830 803E[5E01]00            		cmp	byte [disksector+10h], 0 
 13835                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 13836 00001835 7411                    		jz	short checkfatret ; don't read vol id
 13837                                  					; if not fat system
 13838 00001837 E8F600                  		call	read_volume_id
 13839 0000183A 720C                    		jb	short checkfatret
 13840 0000183C E89B01                  		call	check_volume_id
 13841 0000183F BEFFFF                  		mov	si, 0FFFFh	; -1
 13842                                  					; definitely changed
 13843 00001842 7505                    		jnz	short changed_drv
 13844                                  
 13845 00001844 46                      		inc	si		; not changed
 13846                                  vid_no_changed:				
 13847 00001845 E8C200                  		call	resetchanged
 13848                                  		; 12/12/2022
 13849                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 13850                                  		;clc
 13851                                  checkfatret:				
 13852 00001848 C3                      		retn
 13853                                  ; ---------------------------------------------------------------------------
 13854                                  
 13855                                  		; 12/12/2022
 13856                                  changed_drv:
 13857 00001849 F8                      		clc			; cas -- return	no error
 13858 0000184A C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 13859                                  					; ensure that we ask rom for media
 13860 0000184F C3                      		retn			; check	next time round
 13861                                  ; ---------------------------------------------------------------------------
 13862                                  
 13863                                  ; extended id check
 13864                                  
 13865                                  ; 16/10/2022
 13866                                  
 13867                                  ; the code to check extended id is basically a check to see if the
 13868                                  ; volume serial number is still the same. the volume serial number
 13869                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 13870                                  ; ds:di points to the bds of the drive under consideration.
 13871                                  ; the bds has fields containing the high and low words 
 13872                                  ; of the volume serial number of the media in the drive.
 13873                                  ; compare these fields to the fields mentioned above. if these fields
 13874                                  ; do not match the media has changed and so we should jump to the code
 13875                                  ; starting at ext_changed else return "i don't know" status
 13876                                  ; in the register used for the changeline status and continue executing
 13877                                  ; the code given below. for temporary storage use the register which
 13878                                  ; has been saved and restored around this block.
 13879                                  ;
 13880                                  ; bds fields in inc\msbds.inc
 13881                                  
 13882                                  		; 19/10/2022
 13883                                  do_ext_check_id:			
 13884 00001850 50                      		push	ax
 13885                                  		;mov	ax, word ptr ds:disksector+27h
 13886                                  					; [DiskSector+EXT_BOOT.SERIAL]
 13887 00001851 A1[7501]                		mov	ax, [disksector+27h]
 13888 00001854 263B4557                		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 13889 00001858 750E                    		jnz	short ext_changed
 13890 0000185A A1[7701]                		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 13891 0000185D 263B4559                		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 13892 00001861 7505                    		jnz	short ext_changed
 13893 00001863 31F6                    		xor	si, si		; 0
 13894                                  					; don't know
 13895 00001865 58                      		pop	ax
 13896 00001866 EBDD                    		jmp	short vid_no_changed
 13897                                  					; reset the flag
 13898                                  ; ---------------------------------------------------------------------------
 13899                                  
 13900                                  ext_changed:				
 13901 00001868 58                      		pop	ax
 13902 00001869 BEFFFF                  		mov	si, 0FFFFh	; -1
 13903                                  					; disk changed!
 13904                                  		; 12/12/2022
 13905                                  		; ('changed_drv' clears cf)
 13906                                  		;clc
 13907 0000186C EBDB                    		jmp	short changed_drv
 13908                                  
 13909                                  ; ---------------------------------------------------------------------------
 13910                                  
 13911                                  ; at i/o time, we detected the error. now we need to determine whether the
 13912                                  ; media was truly changed or not. we return normally if media change unknown.
 13913                                  ; and we pop off the call and jmp to harderr if we see an error.
 13914                                  ;
 13915                                  ; es:di -> bds
 13916                                  
 13917                                  checkio:				
 13918 0000186E 80FC06                  		cmp	ah, 6
 13919 00001871 75D5                    		jnz	short checkfatret
 13920 00001873 E837FF                  		call	chkopcnt
 13921 00001876 74D0                    		jz	short checkfatret
 13922 00001878 E87CED                  		call	GetBp
 13923 0000187B 7212                    		jb	short no_error_map
 13924 0000187D E89BFF                  		call	checkfatvid
 13925 00001880 7209                    		jb	short checkioret ; disk	error trying to	read in.
 13926 00001882 09F6                    		or	si, si		; is changed for sure?
 13927 00001884 7802                    		js	short checkioerr ; yes changed
 13928 00001886 45                      		inc	bp		; allow	a retry
 13929 00001887 C3                      		retn
 13930                                  ; ---------------------------------------------------------------------------
 13931                                  
 13932                                  checkioerr:				
 13933 00001888 E80700                  		call	returnvid
 13934                                  
 13935                                  checkioret:				
 13936 0000188B F9                      		stc			; make sure carry gets passed through
 13937 0000188C E9F1F2                  		jmp	harderr
 13938                                  ; ---------------------------------------------------------------------------
 13939                                  
 13940                                  no_error_map:				
 13941 0000188F E9F1F2                  		jmp	harderr2
 13942                                  
 13943                                  ; =============== S U B	R O U T	I N E =======================================
 13944                                  
 13945                                  ; return vid sets up the vid for a return to dos.
 13946                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 13947                                  ;  **** trashes si! ****
 13948                                  
 13949                                  returnvid:		
 13950 00001892 BE1600                  		mov	si, 22		; extra
 13951                                  					; offset into pointer to return	value
 13952 00001895 E80700                  		call	vid_into_packet
 13953 00001898 B406                    		mov	ah, 6
 13954 0000189A F9                      		stc
 13955 0000189B C3                      		retn
 13956                                  
 13957                                  ; ---------------------------------------------------------------------------
 13958                                  
 13959                                  ; moves the pointer to the volid for the drive into the original request packet
 13960                                  ; no attempt is made to preserve registers.
 13961                                  ;
 13962                                  ; assumes es:di -> bds
 13963                                  ; **trashes si**
 13964                                  
 13965                                  media_set_vid:				
 13966 0000189C BE0F00                  		mov	si, 15		; trans+1
 13967                                  					; return the value here	in packet
 13968                                  
 13969                                  		; fall into vid_into_packet
 13970                                  
 13971                                  ; =============== S U B	R O U T	I N E =======================================
 13972                                  
 13973                                  ; return pointer to vid in bds at es:di in packet[si]
 13974                                  
 13975                                  		; 19/10/2022
 13976                                  vid_into_packet:
 13977 0000189F 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 13978 000018A0 C51E[1200]              		lds	bx, [ptrsav]
 13979 000018A4 83C74B                  		add	di, 75		; BDS.volid
 13980 000018A7 8938                    		mov	[bx+si], di
 13981 000018A9 83EF4B                  		sub	di, 75		; BDS.volid
 13982 000018AC 8C4002                  		mov	[bx+si+2], es
 13983 000018AF 1F                      		pop	ds
 13984                                  dofloppy:	; 18/12/2022
 13985 000018B0 C3                      		retn
 13986                                  
 13987                                  ; ---------------------------------------------------------------------------
 13988                                  
 13989                                  ;----------------------------------------------------------------------------
 13990                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 13991                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 13992                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 13993                                  ;   of getbp. for 3.5" media, we just return.
 13994                                  ;
 13995                                  ;   inputs:	es:di point to correct bds for this drive
 13996                                  ;		ah has media byte
 13997                                  ;
 13998                                  ;   outputs:	carry clear
 13999                                  ;		    no registers modified
 14000                                  ;		carry set
 14001                                  ;		    al = sectors/fat
 14002                                  ;		    bh = number of root directory entries
 14003                                  ;		    bl = sectors per track
 14004                                  ;		    cx = number of sectors
 14005                                  ;		    dh = sectors per allocation unit
 14006                                  ;		    dl = number of heads
 14007                                  ;
 14008                                  ;----------------------------------------------------------------------------
 14009                                  
 14010                                  hidensity:
 14011                                  
 14012                                  ; check for correct drive
 14013                                  		
 14014                                  		; 12/12/2022
 14015 000018B1 26F6452302              		test	byte [es:di+23h], 2		
 14016                                  		;test	word [es:di+23h], 2 ; is it special?	
 14017                                  					; [es:di+BDS.flags], fchangeline
 14018 000018B6 74F8                    		jz	short dofloppy	; no, do normal floppy test
 14019                                  
 14020                                  ; we have a media byte that is pretty complex. examine drive information
 14021                                  ; table to see what kind it is.
 14022                                  
 14023 000018B8 26807D2202              		cmp	byte [es:di+22h], 2 ; is it single-media?
 14024 000018BD 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 14025                                  					; yes, use fatid...
 14026                                  ; 96 tpi drive?
 14027 000018BF 80FCF9                  		cmp	ah, 0F9h
 14028 000018C2 75EC                    		jnz	short dofloppy
 14029                                  
 14030                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 14031                                  ;------ a 720K diskette
 14032                                  
 14033 000018C4 26807D2207              		cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 14034                                  					; ffOther
 14035 000018C9 7418                    		jz	short Is720K
 14036 000018CB 26807D2209              		cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 14037                                  					; ff288
 14038 000018D0 7411                    		jz	short Is720K
 14039 000018D2 B007                    		mov	al, 7		; seven	sectors	/ fat
 14040 000018D4 BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 14041                                  					; 224 root dir entries
 14042                                  					; & 0Fh sector max
 14043 000018D7 B96009                  		mov	cx, 2400	; 80*15*2
 14044                                  					; 80 tracks, 15 sectors/track,
 14045                                  					; 2 sides
 14046 000018DA BA0201                  		mov	dx, 258		; 1*256+2
 14047                                  					; sectors/allocation unit
 14048                                  					; & head max
 14049 000018DD 83C402                  		add	sp, 2		; pop off return address
 14050 000018E0 E986ED                  		jmp	Has1		; return to tail of getbp
 14051                                  ; ---------------------------------------------------------------------------
 14052                                  
 14053                                  Is720K:					
 14054 000018E3 83C402                  		add	sp, 2		; pop off return address
 14055 000018E6 E947ED                  		jmp	Has720K		; return to 720K code
 14056                                  ; ---------------------------------------------------------------------------
 14057                                  
 14058                                  		; 18/12/2022
 14059                                  ;dofloppy:				
 14060                                  		;retn
 14061                                  
 14062                                  ; =============== S U B	R O U T	I N E =======================================
 14063                                  
 14064                                  ; 16/10/2022
 14065                                  
 14066                                  ;---------------------------------------------------------------------------
 14067                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 14068                                  ;		   essentially used to indicate changeline, or format.
 14069                                  ;
 14070                                  ;   inputs:	dl contains physical drive number
 14071                                  ;		bx contains bits to set in the flag field in the bdss
 14072                                  ;   outputs:	none
 14073                                  ;   registers modified: flags
 14074                                  ;
 14075                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 14076                                  ;
 14077                                  ; in the virtual drive system we *must* flag the other drives as being changed
 14078                                  ;---------------------------------------------------------------------------
 14079                                  
 14080                                  set_changed_dl:	
 14081 000018E9 06                      		push	es
 14082 000018EA 57                      		push	di
 14083                                  		;les	di, ds:start_bds
 14084                                  		; 19/10/2022
 14085 000018EB C43E[1901]              		les	di, [start_bds]
 14086                                  
 14087                                  ; note: we assume that the list is non-empty
 14088                                  
 14089                                  scan_bds:				
 14090 000018EF 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 14091 000018F3 7504                    		jnz	short get_next_bds
 14092                                  
 14093                                  ; someone may complain, but this *always* must be done when a disk change is
 14094                                  ; noted. there are *no* other compromising circumstances.
 14095                                  
 14096 000018F5 26095D23                		or	[es:di+23h], bx	; [es:di+BDS.flags]
 14097                                  					; signal change	on other drive
 14098                                  get_next_bds:				
 14099 000018F9 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 14100                                  					; go to	next bds
 14101 000018FC 83FFFF                  		cmp	di, 0FFFFh
 14102 000018FF 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 14103 00001901 5F                      		pop	di
 14104 00001902 07                      		pop	es
 14105 00001903 C3                      		retn
 14106                                  
 14107                                  ; =============== S U B	R O U T	I N E =======================================
 14108                                  
 14109                                  ;---------------------------------------------------------------------------
 14110                                  ; checkromchange - see if external program has diddled rom change line.
 14111                                  ;
 14112                                  ;   inputs:	es:di points to current bds.
 14113                                  ;   outputs:	zero set - no change
 14114                                  ;		zero reset - change
 14115                                  ;   registers modified: none
 14116                                  ;---------------------------------------------------------------------------
 14117                                  
 14118                                  checkromchange:	
 14119                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 14120                                  		; 10/12/2022
 14121 00001904 26F6452340              		test	byte [es:di+23h], 40h
 14122                                  		;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 14123                                  					; fchanged
 14124 00001909 C3                      		retn
 14125                                  
 14126                                  ; =============== S U B	R O U T	I N E =======================================
 14127                                  
 14128                                  ;---------------------------------------------------------------------------
 14129                                  ; resetchanged - restore value of change line
 14130                                  ;
 14131                                  ;   inputs:	es:di points to current bds
 14132                                  ;   outputs:	none
 14133                                  ;   registers modified: none
 14134                                  ;---------------------------------------------------------------------------
 14135                                  
 14136                                  resetchanged:	
 14137                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh	
 14138                                  		; 10/12/2022
 14139 0000190A 26806523BF              		and	byte [es:di+23h], 0BFh
 14140                                  		;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 14141                                  					; ~fchanged
 14142 0000190F C3                      		retn
 14143                                  
 14144                                  ; =============== S U B	R O U T	I N E =======================================
 14145                                  
 14146                                  ;---------------------------------------------------------------------------
 14147                                  ; haschange - see if drive can supply change line
 14148                                  ;
 14149                                  ;   inputs:	es:di points to current bds
 14150                                  ;   outputs:	zero set - no change line available
 14151                                  ;		zero reset - change line available
 14152                                  ;   registers modified: none
 14153                                  ;---------------------------------------------------------------------------
 14154                                  
 14155                                  haschange:
 14156                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 14157                                  		; 10/12/2022
 14158 00001910 26F6452302              		test	byte [es:di+23h], 2		
 14159                                  		;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 14160                                  					; fchangeline
 14161 00001915 C3                      		retn
 14162                                  
 14163                                  ; ---------------------------------------------------------------------------
 14164                                  
 14165                                  ; 16/10/2022
 14166                                  
 14167                                  ;-------------------------------------------------------------------------
 14168                                  ; set_volume_id      -	main routine, calls other routines.
 14169                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 14170                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 14171                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 14172                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 14173                                  ;-------------------------------------------------------------------------
 14174                                  
 14175                                  ; set_volume_id
 14176                                  ;   if drive has changeline support, read in and set the volume_id
 14177                                  ; and the last fat_id byte. if no change line support then do nothing.
 14178                                  ;
 14179                                  ;   on entry:
 14180                                  ;	es:di points to the bds for this disk.
 14181                                  ;	ah contains media byte
 14182                                  ;
 14183                                  ;   on exit:
 14184                                  ;	carry clear:
 14185                                  ;	   successful call
 14186                                  ;	carry set
 14187                                  ;	   error and ax has error code
 14188                                  
 14189                                  set_volume_id:				
 14190 00001916 52                      		push	dx		; save registers
 14191 00001917 50                      		push	ax
 14192 00001918 E8F5FF                  		call	haschange	; does drive have changeline support?
 14193 0000191B 740B                    		jz	short setvret	; no, get out
 14194 0000191D E81000                  		call	read_volume_id
 14195 00001920 7209                    		jb	short seterr
 14196 00001922 E8A200                  		call	transfer_volume_id ; copy the volume id	to special drive
 14197 00001925 E8E2FF                  		call	resetchanged	; restore value	of change line
 14198                                  setvret:				
 14199                                  		; 10/12/2022
 14200                                  		; cf = 0
 14201                                  		;clc			; no error, clear carry flag
 14202 00001928 58                      		pop	ax		; restore registers
 14203 00001929 5A                      		pop	dx
 14204 0000192A C3                      		retn
 14205                                  ; ---------------------------------------------------------------------------
 14206                                  
 14207                                  seterr:					
 14208 0000192B 5A                      		pop	dx		; pop stack but don't overwrite ax
 14209 0000192C 5A                      		pop	dx		; restore dx
 14210 0000192D C3                      		retn
 14211                                  ; ---------------------------------------------------------------------------
 14212 0000192E 0000                    root_sec:	dw 0			; root sector #
 14213                                  
 14214                                  ; 16/10/2022
 14215                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 14216                                  ; 09/12/2022
 14217                                  ROOTSEC equ root_sec
 14218                                  
 14219                                  ; =============== S U B	R O U T	I N E =======================================
 14220                                  
 14221                                  ; 16/10/2022
 14222                                  
 14223                                  ; read_volume_id read the volume id and tells if it has been changed.
 14224                                  ;
 14225                                  ;   on entry:
 14226                                  ;	es:di points to current bds for drive.
 14227                                  ;
 14228                                  ;   on exit:
 14229                                  ;	carry clear
 14230                                  ;	    si = 1  no change
 14231                                  ;	    si = 0  ?
 14232                                  ;	    si = -1 change
 14233                                  ;
 14234                                  ;	carry set:
 14235                                  ;	    error and ax has error code.
 14236                                  
 14237                                  read_volume_id:
 14238 00001930 52                      		push	dx		; preserve registers
 14239 00001931 51                      		push	cx
 14240 00001932 53                      		push	bx
 14241 00001933 50                      		push	ax
 14242 00001934 06                      		push	es		; stack the bds last
 14243 00001935 57                      		push	di
 14244 00001936 1E                      		push	ds		; point es to Bios_Data
 14245 00001937 07                      		pop	es
 14246 00001938 BF[0A09]                		mov	di, tmp_vid	; "NO NAME	 "
 14247 0000193B BE[FE08]                		mov	si, nul_vid	; "NO NAME	 "
 14248 0000193E B90C00                  		mov	cx, 12		; initialize tmp_vid to	null vi_id
 14249 00001941 F3A4                    		rep movsb
 14250 00001943 5F                      		pop	di
 14251 00001944 07                      		pop	es
 14252 00001945 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 14253                                  					; # of fats
 14254 00001949 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 14255                                  					; sectors / fat
 14256 0000194D F6E1                    		mul	cl		; size taken by	fats
 14257 0000194F 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 14258                                  					; add on reserved sectors
 14259                                  					;
 14260                                  					; ax is	now sector # (0	based)
 14261                                  		; 17/10/2022
 14262 00001953 2EA3[2E19]              		mov	[cs:ROOTSEC], ax
 14263                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 14264                                  					; 0070h:3EFFh =	2C7h:198Fh
 14265 00001957 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 14266                                  					; # root dir entries
 14267 0000195B B104                    		mov	cl, 4		; 16 entries/sector
 14268 0000195D D3E8                    		shr	ax, cl		; divide by 16
 14269 0000195F 89C1                    		mov	cx, ax		; cx is	# of sectors to	scan
 14270                                  next_sec:				
 14271 00001961 51                      		push	cx		; save outer loop counter
 14272 00001962 2EA1[2E19]              		mov	ax, [cs:ROOTSEC]
 14273                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 14274                                  					; get sector #
 14275 00001966 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 14276                                  					; sectors / track
 14277 0000196A 31D2                    		xor	dx, dx
 14278 0000196C F7F1                    		div	cx
 14279                                  
 14280                                  ; set up registers for call to read_sector
 14281                                  
 14282 0000196E 42                      		inc	dx		; dx= sectors into track
 14283                                  					; ax= track count from 0
 14284 0000196F 88D1                    		mov	cl, dl		; sector to read
 14285 00001971 31D2                    		xor	dx, dx
 14286 00001973 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 14287                                  					; # heads on this disc
 14288 00001977 88D6                    		mov	dh, dl		; head number
 14289 00001979 88C5                    		mov	ch, al		; track	#
 14290 0000197B E8FBED                  		call	read_sector	; get first sector of the root directory,
 14291                                  					; ds:bx	-> directory sector
 14292 0000197E 7243                    		jb	short readviderr
 14293 00001980 B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 14294 00001983 B008                    		mov	al, 8		; volume label bit
 14295                                  fvid_loop:				
 14296 00001985 803F00                  		cmp	byte [bx], 0 ; end of dir?
 14297 00001988 7436                    		jz	short no_vid	; yes, no vol id
 14298 0000198A 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 14299 0000198D 7405                    		jz	short ent_loop	; yes, skip
 14300 0000198F 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 14301 00001992 7511                    		jnz	short found_vid	; jmp yes
 14302                                  ent_loop:				
 14303 00001994 83C320                  		add	bx, 32		; add length of	directory entry
 14304 00001997 E2EC                    		loop	fvid_loop
 14305 00001999 59                      		pop	cx		; outer loop
 14306 0000199A 2EFF06[2E19]            		inc	word [cs:ROOTSEC]
 14307                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 14308                                  					; next sector
 14309 0000199F E2C0                    		loop	next_sec	; continue
 14310                                  notfound:				
 14311 000019A1 31F6                    		xor	si, si
 14312 000019A3 EB16                    		jmp	short fvid_ret
 14313                                  ; ---------------------------------------------------------------------------
 14314                                  
 14315                                  found_vid:				
 14316 000019A5 59                      		pop	cx		; clean stack of outer loop counter
 14317 000019A6 89DE                    		mov	si, bx		; point	to volume_id
 14318 000019A8 06                      		push	es		; preserve current bds
 14319 000019A9 57                      		push	di
 14320 000019AA 1E                      		push	ds
 14321 000019AB 07                      		pop	es		; point es to Bios_Data
 14322 000019AC BF[0A09]                		mov	di, tmp_vid	; "NO NAME	 "
 14323 000019AF B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 14324                                  					; length of string minus nul
 14325 000019B2 F3A4                    		rep movsb		; mov volume label to tmp_vid
 14326 000019B4 30C0                    		xor	al, al
 14327 000019B6 AA                      		stosb			; null terminate
 14328 000019B7 31F6                    		xor	si, si
 14329 000019B9 5F                      		pop	di		; restore current bds
 14330 000019BA 07                      		pop	es
 14331                                  fvid_ret:				
 14332 000019BB 58                      		pop	ax
 14333                                  		; 10/12/2022
 14334                                  		; cf = 0
 14335                                  		;clc
 14336                                  rvidret:				
 14337 000019BC 5B                      		pop	bx		; restore registers
 14338 000019BD 59                      		pop	cx
 14339 000019BE 5A                      		pop	dx
 14340 000019BF C3                      		retn
 14341                                  ; ---------------------------------------------------------------------------
 14342                                  
 14343                                  no_vid:					
 14344 000019C0 59                      		pop	cx		; clean stack of outer loop counter
 14345 000019C1 EBDE                    		jmp	short notfound	; not found
 14346                                  ; ---------------------------------------------------------------------------
 14347                                  
 14348                                  readviderr:				
 14349 000019C3 5E                      		pop	si		; trash the outer loop counter
 14350 000019C4 5E                      		pop	si		; caller's ax, return error code instead 
 14351 000019C5 EBF5                    		jmp	short rvidret
 14352                                  
 14353                                  ; =============== S U B	R O U T	I N E =======================================
 14354                                  
 14355                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 14356                                  ;
 14357                                  ; inputs:	es:di has current bds
 14358                                  ; outputs:	bds for drive has volume id from tmp
 14359                                  
 14360                                  transfer_volume_id:	
 14361 000019C7 57                      		push	di		; copy the volume id from tmp to special drive
 14362 000019C8 56                      		push	si
 14363 000019C9 51                      		push	cx
 14364 000019CA BE[0A09]                		mov	si, tmp_vid	; "NO NAME	 "
 14365                                  		;add	di, BDS.volid
 14366 000019CD 83C74B                  		add	di, 75		; BDS.volid
 14367                                  		;mov	cx, VOLID_SIZ
 14368 000019D0 B90C00                  		mov	cx, 12		; VOLID_SIZ
 14369 000019D3 FC                      		cld
 14370 000019D4 F3A4                    		rep movsb
 14371 000019D6 59                      		pop	cx
 14372 000019D7 5E                      		pop	si
 14373 000019D8 5F                      		pop	di
 14374 000019D9 C3                      		retn
 14375                                  
 14376                                  ; =============== S U B	R O U T	I N E =======================================
 14377                                  
 14378                                  ;  check_volume_id - compare volume id in tmp area with
 14379                                  ;		     one expected for drive
 14380                                  ;
 14381                                  ;   inputs:	es:di has current bds for drive
 14382                                  ;   outputs:	zero true means it matched
 14383                                  
 14384                                  check_volume_id:	
 14385 000019DA 57                      		push	di
 14386 000019DB 51                      		push	cx
 14387 000019DC BE[0A09]                		mov	si, tmp_vid	; "NO NAME	 "
 14388                                  		;add	di, BDS.volid
 14389 000019DF 83C74B                  		add	di, 75		; BDS.volid
 14390                                  		;mov	cx, VOLID_SIZ
 14391 000019E2 B90C00                  		mov	cx, 12		; VOLID_SIZ
 14392 000019E5 FC                      		cld
 14393 000019E6 F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 14394 000019E8 59                      		pop	cx
 14395 000019E9 5F                      		pop	di
 14396 000019EA C3                      		retn
 14397                                  
 14398                                  ; =============== S U B	R O U T	I N E =======================================
 14399                                  
 14400                                  ;   fat_check - see of the fatid has changed in the specified drive.
 14401                                  ;	      - uses the fat id obtained from the boot sector.
 14402                                  ;
 14403                                  ;   inputs:	medbyt is expected fat id
 14404                                  ;		es:di points to current bds
 14405                                  ;
 14406                                  ;   output:	si = -1 if fat id different,
 14407                                  ;		si = 0 otherwise
 14408                                  ;
 14409                                  ;   no other registers changed.
 14410                                  
 14411                                  fat_check:		
 14412 000019EB 50                      		push	ax
 14413 000019EC 31F6                    		xor	si, si		; say fat id's are same.
 14414 000019EE A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 14415 000019F1 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 14416                                  					; compare it with the bds medbyte
 14417 000019F5 7401                    		jz	short okret1	; carry	clear
 14418 000019F7 4E                      		dec	si
 14419                                  okret1:					
 14420 000019F8 58                      		pop	ax
 14421 000019F9 C3                      		retn
 14422                                  
 14423                                  ; ---------------------------------------------------------------------------
 14424                                  
 14425                                  ; BIOSCODE:1A69h (MSDOS 6.21, IO.SYS)
 14426                                  		;times 7 db 0
 14427                                  
 14428                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)	
 14429                                  
 14430                                  		; 09/12/2022
 14431                                  		;times 4 db 0	; 17/10/2022
 14432                                  		;db 4 dup(0)	; times 4 db 0
 14433                                  
 14434                                  ; ---------------------------------------------------------------------------
 14435                                  
 14436                                  		; 09/12/2022
 14437                                  		;db 0
 14438                                  
 14439                                  number2div	equ ($-BCode_start)
 14440                                  number2mod	equ (number2div % 16)
 14441                                  
 14442                                  %if number2mod>0 & number2mod<16
 14443 000019FA 00<rep 6h>              		times (16-number2mod) db 0
 14444                                  %endif
 14445                                  
 14446                                  ;align 16
 14447                                  
 14448                                  ; 09/12/2022
 14449                                  BCODE_END	equ $ - BCode_start
 14450                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 14451                                  ; 13/12/2022
 14452                                  SYSINITOFFSET	equ BCODE_END
 14453                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 14454                                  
 14455                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 14456                                  
 14457                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14458                                  ; 01/05/2019 - Retro DOS v4.0 
 14459                                  ; ============================================================================
 14460                                  ; end of BIOSCODE
 14461                                  
 14462                                  ; ----------------------------------------------------------------------------
 14463                                  ; %include sysinit5.s	; 09/12/2022
 14464                                  ; ----------------------------------------------------------------------------
 14465                                  
 14466                                  ;=============================================================================
 14467                                  ; (IO.SYS) SYSINIT SEGMENT 
 14468                                  ;=============================================================================
 14469                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14470                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 14471                                  
 14472                                  section .SYSINIT vstart=0
 14473                                  
 14474                                  ; ****************************************************************************
 14475                                  ; SYSINIT.BIN (MSDOS 6.21 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 14476                                  ; ----------------------------------------------------------------------------
 14477                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 30/12/2022))
 14478                                  ; ----------------------------------------------------------------------------
 14479                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 14480                                  ; ----------------------------------------------------------------------------
 14481                                  ; Assembler: NASM version 2.15
 14482                                  ; ----------------------------------------------------------------------------
 14483                                  ;	   ((nasm sysinit6.s -l sysinit6.lst -o SYSINIT6.BIN -Z error.txt)) 	
 14484                                  ; ----------------------------------------------------------------------------
 14485                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 14486                                  ; ----------------------------------------------------------------------------
 14487                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 14488                                  ; source code by Microsoft, 1991 
 14489                                  ; ----------------------------------------------------------------------------
 14490                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 14491                                  ; by Microsoft, 12/10/1983
 14492                                  ; ****************************************************************************
 14493                                  ; main file: 'retrodos4.s'
 14494                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 14495                                  
 14496                                  ; 30/12/2022 - Retro DOS v4.2 
 14497                                  ; Retro DOS v4.0 - 2019
 14498                                  ; SYSINIT (MSDOS 6.21 IO.SYS) draft: 'sysinit3.s' (01/07/2019)
 14499                                   
 14500                                  ; 21/10/2022
 14501                                  ; ----------------------------------------------------------------------------
 14502                                  ; This source code (version) is based on SYSINIT source code of disassembled
 14503                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 14504                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 14505                                  ; ----------------------------------------------------------------------------
 14506                                  ; Binary file splitter & joiner: FFSJ v3.3
 14507                                  
 14508                                  ;--------------------------------------------------------------
 14509                                  ; SYSINIT.TXT (27/01/1983)
 14510                                  ;--------------------------------------------------------------
 14511                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 14512                                  ;over  the  system  initialization  after  the  OEM  bios   has
 14513                                  ;performed any  initialization  it  needs  to  do.   Control is
 14514                                  ;transfered with a long jump to the external  variable  SYSINIT
 14515                                  ;
 14516                                  ;
 14517                                  ;   The OEM  has  the  following  variables declared external:
 14518                                  ;
 14519                                  ;   CURRENT_DOS_LOCATION    WORD
 14520                                  ;
 14521                                  ;This word  contains  the  segment  number of the DOS before it
 14522                                  ;is relocated.  The OEM bios must set this value.
 14523                                  ;
 14524                                  ;   FINAL_DOS_LOCATION      WORD
 14525                                  ;
 14526                                  ;This word contains the segment number of the DOS after SYSINIT
 14527                                  ;moves it.  The OEM bios must set this value.
 14528                                  ;
 14529                                  ;   DEVICE_LIST             DWORD
 14530                                  ;
 14531                                  ;This  double  word  pointer  points  to  the  linked  list  of
 14532                                  ;character and block device drivers.  The  OEM  must  set  this
 14533                                  ;value.
 14534                                  ;
 14535                                  ;   MEMORY_SIZE             WORD
 14536                                  ;
 14537                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 14538                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 14539                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 14540                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 14541                                  ;and read it back until it gets a mismatch.
 14542                                  ;
 14543                                  ;   DEFAULT_DRIVE           BYTE
 14544                                  ;
 14545                                  ;This is  the initial default drive when the system first comes
 14546                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 14547                                  ;it then drive a is assumed.
 14548                                  ;
 14549                                  ;   BUFFERS                 BYTE
 14550                                  ;
 14551                                  ;This is  the  default  number of buffers for the system.  This
 14552                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14553                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 14554                                  ;
 14555                                  ;   FILES                   BYTE
 14556                                  ;
 14557                                  ;This is  the  default  number  of  files for the system.  This
 14558                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14559                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 14560                                  ;
 14561                                  ;   SYSINIT                 FAR
 14562                                  ;
 14563                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 14564                                  ;this label at the end of its INIT code.
 14565                                  ;
 14566                                  ;   The OEM  has  the  following  variables declared public:
 14567                                  ;
 14568                                  ;   RE_INIT                 FAR
 14569                                  ;
 14570                                  ;This is an entry point which allows the BIOS to do some INIT
 14571                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 14572                                  ;PRESERVED.  On entry DS points to the first available memory
 14573                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 14574                                  ;prefix which represents  the  "program"  currently  running.
 14575                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 14576                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 14577                                  ;that  no  memory  is  allocated to it, it is running in free
 14578                                  ;memory.
 14579                                  ;NOTES:
 14580                                  ;     At the time this routine is called SYSINIT occupies the
 14581                                  ;highest 10K of memory ("highest" is determined by the  value
 14582                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 14583                                  ;     Since this is called AFTER DOS is initialized, you can
 14584                                  ;make system calls.  This also implies that the code for this
 14585                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 14586                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 14587                                  ;     If you don't want  anything done just set this to point
 14588                                  ;at a FAR RET instruction.
 14589                                  
 14590                                  ; ----------------------------------------------------------------------
 14591                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 14592                                  ; ----------------------------------------------------------------------
 14593                                  
 14594                                  ;include version.inc
 14595                                  ; ----------------------------------------------------------------------
 14596                                  
 14597                                  ;FALSE   EQU     0
 14598                                  ;TRUE    EQU     0FFFFh
 14599                                  
 14600                                  ;IBMVER	    EQU     TRUE
 14601                                  ;IBMCOPYRIGHT EQU   FALSE
 14602                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 14603                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 14604                                  ;MSVER      EQU     FALSE
 14605                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 14606                                  ;KANJI      EQU     FALSE
 14607                                  
 14608                                  ;(MSDOS 6.0, versiona.inc, 1991)
 14609                                  ; ----------------------------------------------------------------------
 14610                                  ;MAJOR_VERSION  EQU	6
 14611                                  ;;MINOR_VERSION	EQU	0	;6.00
 14612                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 14613                                  
 14614                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 14615                                  ; ----------------------------------------------------------------------
 14616                                  ;MAJOR_VERSION   EQU	5
 14617                                  ;MINOR_VERSION   EQU	0
 14618                                  
 14619                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21)
 14620                                  MAJOR_VERSION   EQU	6
 14621                                  MINOR_VERSION   EQU	22
 14622                                  
 14623                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 14624                                  
 14625                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 14626                                  				; currently 0.
 14627                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 14628                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 14629                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 14630                                  
 14631                                  ;      if1
 14632                                  ;      %OUT  ... for DOS Version 5.00 ...
 14633                                  ;      endif
 14634                                  
 14635                                         ;******************************
 14636                                         ;Each assembler program should:
 14637                                         ;  mov ah,030h                   ;DOS Get Version function
 14638                                         ;  int 021h                      ;Version ret. in AX,minor version first
 14639                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 14640                                         ;  jne error_handler             ; EXACT version match.
 14641                                         ;******************************
 14642                                  
 14643                                  ; ----------------------------------------------------------------------
 14644                                  ; device definitions
 14645                                  
 14646                                  ;Attribute bit masks
 14647                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 14648                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 14649                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 14650                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 14651                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 14652                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 14653                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 14654                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 14655                                  
 14656                                  ; The device table list has the form:
 14657                                  struc	SYSDEV
 14658 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 14659 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 14660 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 14661 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 14662 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 14663                                  .size:
 14664                                  endstruc
 14665                                  
 14666                                  ;Static Reguest Header
 14667                                  struc	SRHEAD
 14668 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 14669 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 14670 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 14671 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 14672 00000005 ????????????????                	resb 8		;Reserved for queue links
 14673                                  .size:
 14674                                  endstruc
 14675                                  
 14676                                  ;Status word masks
 14677                                  STERR   EQU     8000H           ;Bit 15 - Error
 14678                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 14679                                  STDON   EQU     0100H           ;Bit 8 - Done
 14680                                  STECODE EQU     00FFH           ;Error code
 14681                                  WRECODE EQU     0
 14682                                  
 14683                                  ;Function codes
 14684                                  DEVINIT EQU     0               ;Initialization
 14685                                  DINITHL EQU     26              ;Size of init header
 14686                                  DEVMDCH EQU     1               ;Media check
 14687                                  DMEDHL  EQU     15              ;Size of media check header
 14688                                  DEVBPB  EQU     2               ;Get BPB
 14689                                  DEVRDIOCTL EQU  3               ;IOCTL read
 14690                                  DBPBHL  EQU     22              ;Size of Get BPB header
 14691                                  DEVRD   EQU     4               ;Read
 14692                                  DRDWRHL EQU     22              ;Size of RD/WR header
 14693                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 14694                                  DRDNDHL EQU     14              ;Size of non destructive read header
 14695                                  DEVIST  EQU     6               ;Input status
 14696                                  DSTATHL EQU     13              ;Size of status header
 14697                                  DEVIFL  EQU     7               ;Input flush
 14698                                  DFLSHL  EQU     15              ;Size of flush header
 14699                                  DEVWRT  EQU     8               ;Write
 14700                                  DEVWRTV EQU     9               ;Write with verify
 14701                                  DEVOST  EQU     10              ;Output status
 14702                                  DEVOFL  EQU     11              ;Output flush
 14703                                  DEVWRIOCTL EQU  12              ;IOCTL write
 14704                                  
 14705                                  ; ----------------------------------------------------------------------
 14706                                  struc	SYS_FCB
 14707 00000000 ??                      .fcb_drive:	resb 1
 14708 00000001 ????????????????        .fcb_name:	resb 8
 14709 00000009 ??????                  .fcb_ext:	resb 3
 14710 0000000C ????                    .fcb_EXTENT:	resw 1
 14711 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 14712 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 14713                                                          ; word
 14714 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 14715 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 14716 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 14717 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 14718                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 14719                                                          ; If file, bit 6=0 if dirty
 14720                                                          ; If I/O device, bit 6=0 if EOF (input)
 14721                                                          ;               Bit 5=1 if Raw mode
 14722                                                          ;               Bit 0=1 if console input device
 14723                                                          ;               Bit 1=1 if console output device
 14724                                                          ;               Bit 2=1 if null device
 14725                                                          ;               Bit 3=1 if clock device
 14726 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 14727 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 14728 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 14729 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 14730 00000020 ??                      .fcb_NR:	resb 1	; Next record
 14731 00000021 ????????                .fcb_RR:	resb 4	; Random record
 14732                                  .size:
 14733                                  endstruc
 14734                                  
 14735                                  ; ----------------------------------------------------------------------
 14736                                  ; Field definition for I/O buffer information
 14737                                  
 14738                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 14739                                  
 14740                                  struc buffinfo
 14741 00000000 ????                    .buf_next:	resw 1	; Pointer to next buffer in list
 14742 00000002 ????                    .buf_prev:	resw 1	; Pointer to previous buffer in list
 14743 00000004 ??                      .buf_ID:	resb 1	; Drive of buffer (bit 7 = 0)
 14744                                  			; SFT table index (bit 7 = 1)
 14745                                  			; = FFh if buffer free
 14746 00000005 ??                      .buf_flags:	resb 1	; Bit 7 = 1 if Remote file buffer
 14747                                  			;	= 0 if Local device buffer
 14748                                  			; Bit 6 = 1 if buffer dirty
 14749                                  			; Bit 5 = Reserved
 14750                                  			; Bit 4 = Search bit (bit 7 = 1)
 14751                                  			; Bit 3 = 1 if buffer is DATA
 14752                                  			; Bit 2 = 1 if buffer is DIR
 14753                                  			; Bit 1 = 1 if buffer is FAT
 14754                                  			; Bit 0 = Reserved
 14755 00000006 ????????                .buf_sector:	resd 1	; Sector number of buffer (bit 7 = 0)
 14756                                  ; The next two items are often refed as a word (bit 7 = 0)
 14757 0000000A ??                      .buf_wrtcnt:	resb 1	; For FAT sectors, # times sector written out
 14758 0000000B ????                    .buf_wrtcntinc:	resw 1	; "   "     "   , # sectors between each write
 14759 0000000D ????????                .buf_DPB :	resd 1	; Pointer to drive parameters
 14760 00000011 ????                    .buf_fill:	resw 1	; How full buffer is (bit 7 = 1)
 14761 00000013 ??                      .buf_reserved:	resb 1	; make DWORD boundary for 386
 14762                                  .size:
 14763                                  endstruc
 14764                                  
 14765                                  %define buf_offset	dword [buf_sector]
 14766                                  			;For bit 7 = 1, this is the byte
 14767                                  			;offset of the start of the buffer in
 14768                                  			;the file pointed to by buf_ID.  Thus
 14769                                  			;the buffer starts at location
 14770                                  			;buf_offset in the file and contains
 14771                                  			;buf_fill bytes.
 14772                                  
 14773                                  bufinsiz	equ	buffinfo.size ; ; Size of structure in bytes
 14774                                  
 14775                                  
 14776                                  buf_Free	equ	0FFh		; buf_id of free buffer
 14777                                  
 14778                                  ;Flag byte masks
 14779                                  buf_isnet	EQU	10000000B
 14780                                  buf_dirty	EQU	01000000B
 14781                                  ;***
 14782                                  buf_visit	EQU	00100000B
 14783                                  ;***
 14784                                  buf_snbuf	EQU	00010000B
 14785                                  
 14786                                  buf_isDATA	EQU	00001000B
 14787                                  buf_isDIR	EQU	00000100B
 14788                                  buf_isFAT	EQU	00000010B
 14789                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 14790                                  
 14791                                  buf_NetID	EQU	bufinsiz
 14792                                  
 14793                                  ; ----------------------------------------------------------------------
 14794                                  
 14795                                  ; ----------------------------------------------------------------------
 14796                                  ;**	DPB - Drive Parameter Block
 14797                                  
 14798                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 14799                                  
 14800                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 14801                                  ;	possibly inaccurate deductions from code study... - jgl
 14802                                  ;
 14803                                  ;	The DPB is DOS's main structure for describing block devices.
 14804                                  ;	It contains info about the "Drive" intermingled with info about
 14805                                  ;	the FAT file system which is presumably on the drive.  I don't know
 14806                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 14807                                  ;
 14808                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 14809                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 14810                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 14811                                  
 14812                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 14813                                  
 14814                                  ; 12/05/2019 - Retro DOS v4.0
 14815                                  
 14816                                  struc	DPB
 14817 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 14818 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
 14819 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 14820 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 14821 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 14822 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
 14823 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
 14824 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
 14825 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
 14826 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 14827                                  ;.FAT_SIZE:	resb 1  ; MSDOS 3.3
 14828 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 14829 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
 14830 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
 14831 00000017 ??                      .MEDIA:		resb 1		; Media byte
 14832 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 14833                                  				; check the first time this DPB is used
 14834 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 14835 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 14836 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 14837                                  .size:
 14838                                  endstruc
 14839                                  
 14840                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 14841                                  
 14842                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 14843                                  
 14844                                  ; ----------------------------------------------------------------------
 14845                                  ; 26/03/2018
 14846                                  
 14847                                  ; IOCTL SUB-FUNCTIONS
 14848                                  IOCTL_GET_DEVICE_INFO	EQU	0
 14849                                  IOCTL_SET_DEVICE_INFO	EQU	1
 14850                                  IOCTL_READ_HANDLE	EQU	2
 14851                                  IOCTL_WRITE_HANDLE	EQU	3
 14852                                  IOCTL_READ_DRIVE	EQU	4
 14853                                  IOCTL_WRITE_DRIVE	EQU	5
 14854                                  IOCTL_GET_INPUT_STATUS	EQU	6
 14855                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 14856                                  IOCTL_CHANGEABLE?	EQU	8
 14857                                  IOCTL_SHARING_RETRY	EQU	11
 14858                                  GENERIC_IOCTL_HANDLE	EQU	12
 14859                                  GENERIC_IOCTL		EQU	13
 14860                                  
 14861                                  ; GENERIC IOCTL SUB-FUNCTIONS
 14862                                  RAWIO			EQU	8
 14863                                  
 14864                                  ; RAWIO SUB-FUNCTIONS
 14865                                  GET_DEVICE_PARAMETERS	EQU	60H
 14866                                  SET_DEVICE_PARAMETERS	EQU	40H
 14867                                  READ_TRACK		EQU	61H
 14868                                  WRITE_TRACK		EQU	41H
 14869                                  VERIFY_TRACK		EQU	62H
 14870                                  FORMAT_TRACK		EQU	42H
 14871                                  
 14872                                  ; DEVICETYPE VALUES
 14873                                  MAX_SECTORS_IN_TRACK	EQU	63
 14874                                  DEV_5INCH		EQU	0
 14875                                  DEV_5INCH96TPI		EQU	1
 14876                                  DEV_3INCH720KB		EQU	2
 14877                                  DEV_8INCHSS		EQU	3
 14878                                  DEV_8INCHDS		EQU	4
 14879                                  DEV_HARDDISK		EQU	5
 14880                                  DEV_OTHER		EQU	7
 14881                                  ;DEV_3INCH1440KB	EQU	7
 14882                                  DEV_3INCH2880KB		EQU	9
 14883                                  ; Retro DOS v2.0 - 26/03/2018
 14884                                  ;;DEV_TAPE		EQU	6
 14885                                  ;;DEV_ERIMO		EQU	8
 14886                                  ;DEV_3INCH2880KB	EQU	9
 14887                                  DEV_3INCH1440KB		EQU	10
 14888                                  
 14889                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 14890                                  					; CURRENTLY SUPPORT.
 14891                                  MAX_DEV_TYPE		EQU	10
 14892                                  
 14893                                  struc A_SECTORTABLE
 14894 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 14895 00000002 ????                    .ST_SECTORSIZE:		resw	1
 14896                                  .size:
 14897                                  endstruc
 14898                                  
 14899                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
 14900                                  
 14901                                  ;**	BIOS PARAMETER BLOCK DEFINITION
 14902                                  ;
 14903                                  ;	The BPB contains information about the disk structure.  It dates
 14904                                  ;	back to the earliest FAT systems and so FAT information is
 14905                                  ;	intermingled with physical driver information.
 14906                                  ;
 14907                                  ;	A boot sector contains a BPB for its device; for other disks
 14908                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
 14909                                  ;	information in the DPB.
 14910                                  ;
 14911                                  ;	The BDS structure contains a BPB within it.
 14912                                  
 14913                                  struc A_BPB
 14914 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
 14915 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
 14916 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
 14917 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
 14918 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
 14919 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
 14920 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
 14921 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
 14922 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
 14923 0000000F ????                    .BPB_HEADS:		resw	1
 14924 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
 14925 00000013 ????                    			resw	1
 14926 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
 14927 00000017 ????                    			resw	1
 14928 00000019 ????????????            			resb	6	; NOTE:  many times these
 14929                                  ;					; 	 6 bytes are omitted
 14930                                  ;					;	 when BPB manipulations
 14931                                  ;					;	 are performed!
 14932                                  .size:
 14933                                  endstruc
 14934                                  
 14935                                  struc A_DEVICEPARAMETERS
 14936 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
 14937 00000001 ??                      .DP_DEVICETYPE:		resb	1
 14938 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
 14939 00000004 ????                    .DP_CYLINDERS:		resw	1
 14940 00000006 ??                      .DP_MEDIATYPE:		resb	1
 14941 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
 14942 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
 14943 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 14944                                  endstruc
 14945                                  
 14946                                  ; ----------------------------------------------------------------------
 14947                                  ; structure, equates for devmark for mem command.
 14948                                  
 14949                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 14950                                  
 14951                                  struc devmark
 14952 00000000 ??                       .id:	    resb 1
 14953 00000001 ????                     .seg:	    resw 1
 14954 00000003 ????                     .size:	    resw 1
 14955 00000005 ??????                   .dum:	    resb 3
 14956 00000008 ????????????????         .filename: resb 8
 14957                                  endstruc
 14958                                  
 14959                                  devmark_stk	equ	'S'
 14960                                  devmark_device	equ	'D'
 14961                                  devmark_ifs	equ	'I'
 14962                                  devmark_buf	equ	'B'
 14963                                  devmark_cds	equ	'L' ; lastdrive
 14964                                  devmark_files	equ	'F'
 14965                                  devmark_fcbs	equ	'X'
 14966                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 14967                                  devmark_ems_stub equ	'E'
 14968                                  
 14969                                  setbrkdone	equ	00000001b
 14970                                  for_devmark	equ	00000010b
 14971                                  not_for_devmark equ	11111101b
 14972                                  
 14973                                  ; ----------------------------------------------------------------------
 14974                                  ; Memory arena structure
 14975                                  
 14976                                  ; 24/03/2019 - Retro DOS v4.0 
 14977                                  ; (MSDOS 6.0, ARENA.INC)
 14978                                  
 14979                                  ;** Arena Header
 14980                                  
 14981                                  struc ARENA
 14982 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 14983 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 14984 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 14985 00000005 ??????                  .RESERVED	resb 3		; reserved
 14986 00000008 ????????????????        .NAME:		resb 8		; owner file name
 14987                                  endstruc
 14988                                  
 14989                                  ; 12/04/2019
 14990                                  
 14991                                  arena_owner_system	EQU 0	; free block indication
 14992                                  
 14993                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 14994                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 14995                                  
 14996                                  ; ----------------------------------------------------------------------
 14997                                  ; Process data block (otherwise known as program header)
 14998                                  
 14999                                  ; 23/03/2019 - Retro DOS v4.0
 15000                                  
 15001                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 15002                                  
 15003                                  FILPERPROC	EQU     20
 15004                                  
 15005                                  struc PDB	; Process_data_block
 15006 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 15007 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 15008 00000004 ??                                      resb 1
 15009 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 15010 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 15011 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 15012 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 15013 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 15014 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 15015 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 15016 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 15017 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 15018 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 15019 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 15020 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 15021 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 15022 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 15023 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 15024 00000042 <res Eh>                .PAD1:		resb 14		; 	
 15025 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 15026 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 15027 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 15028 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 15029 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 15030 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 15031                                  ;.size:
 15032                                  endstruc
 15033                                  
 15034                                  ; ----------------------------------------------------------------------
 15035                                  ; <system call definitions>
 15036                                  
 15037                                  ; 23/03/2019 - Retro DOS v4.0
 15038                                  
 15039                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 15040                                  
 15041                                  ABORT                           EQU 0   ;  0      0
 15042                                  STD_CON_INPUT                   EQU 1   ;  1      1
 15043                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 15044                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 15045                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 15046                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 15047                                  RAW_CON_IO                      EQU 6   ;  6      6
 15048                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 15049                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 15050                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 15051                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 15052                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 15053                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 15054                                  DISK_RESET                      EQU 13  ; 13      D
 15055                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 15056                                  FCB_OPEN                        EQU 15  ; 15      F
 15057                                  FCB_CLOSE                       EQU 16  ; 16     10
 15058                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 15059                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 15060                                  FCB_DELETE                      EQU 19  ; 19     13
 15061                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 15062                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 15063                                  FCB_CREATE                      EQU 22  ; 22     16
 15064                                  FCB_RENAME                      EQU 23  ; 23     17
 15065                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 15066                                  SET_DMA                         EQU 26  ; 26     1A
 15067                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 15068                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 15069                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 15070                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 15071                                  GET_FCB_POSITION                EQU 36  ; 36     24
 15072                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 15073                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 15074                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 15075                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 15076                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 15077                                  GET_DATE                        EQU 42  ; 42     2A
 15078                                  SET_DATE                        EQU 43  ; 43     2B
 15079                                  GET_TIME                        EQU 44  ; 44     2C
 15080                                  SET_TIME                        EQU 45  ; 45     2D
 15081                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 15082                                  ; Extended functionality group
 15083                                  GET_DMA                         EQU 47  ; 47     2F
 15084                                  GET_VERSION                     EQU 48  ; 48     30
 15085                                  KEEP_PROCESS                    EQU 49  ; 49     31
 15086                                  GET_DPB                         EQU 50  ; 50     32
 15087                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 15088                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 15089                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 15090                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 15091                                  CHAR_OPER                       EQU 55  ; 55     37
 15092                                  INTERNATIONAL                   EQU 56  ; 56     38
 15093                                  ;   Directory Group
 15094                                  MKDIR                           EQU 57  ; 57     39
 15095                                  RMDIR                           EQU 58  ; 58     3A
 15096                                  CHDIR                           EQU 59  ; 59     3B
 15097                                  ;   File Group
 15098                                  CREAT                           EQU 60  ; 60     3C
 15099                                  OPEN                            EQU 61  ; 61     3D
 15100                                  CLOSE                           EQU 62  ; 62     3E
 15101                                  READ                            EQU 63  ; 63     3F
 15102                                  WRITE                           EQU 64  ; 64     40
 15103                                  UNLINK                          EQU 65  ; 65     41
 15104                                  LSEEK                           EQU 66  ; 66     42
 15105                                  CHMOD                           EQU 67  ; 67     43
 15106                                  IOCTL                           EQU 68  ; 68     44
 15107                                  XDUP                            EQU 69  ; 69     45
 15108                                  XDUP2                           EQU 70  ; 70     46
 15109                                  CURRENT_DIR                     EQU 71  ; 71     47
 15110                                  ;    Memory Group
 15111                                  ALLOC                           EQU 72  ; 72     48
 15112                                  DEALLOC                         EQU 73  ; 73     49
 15113                                  SETBLOCK                        EQU 74  ; 74     4A
 15114                                  ;    Process Group
 15115                                  EXEC                            EQU 75  ; 75     4B
 15116                                  EXIT                            EQU 76  ; 76     4C
 15117                                  WAITPROCESS			EQU 77  ; 77     4D
 15118                                  FIND_FIRST                      EQU 78  ; 78     4E
 15119                                  ;   Special Group
 15120                                  FIND_NEXT                       EQU 79  ; 79     4F
 15121                                  ; SPECIAL SYSTEM GROUP
 15122                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 15123                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 15124                                  GET_IN_VARS                     EQU 82  ; 82     52
 15125                                  SETDPB                          EQU 83  ; 83     53
 15126                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 15127                                  DUP_PDB                         EQU 85  ; 85     55
 15128                                  RENAME                          EQU 86  ; 86     56
 15129                                  FILE_TIMES                      EQU 87  ; 87     57
 15130                                  ;
 15131                                  ALLOCOPER			EQU 88	; 88     58	
 15132                                  ; Network extention system calls
 15133                                  GetExtendedError		EQU 89	; 89	 59
 15134                                  CreateTempFile			EQU 90	; 90	 5A
 15135                                  CreateNewFile			EQU 91	; 91	 5B
 15136                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 15137                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 15138                                  					;	    CloseByName, CloseUser,
 15139                                  					;	    CloseUserProcess,
 15140                                  					;	    GetOpenFileList
 15141                                  UserOper			EQU 94	; 94	 5E Get and Set
 15142                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 15143                                  xNameTrans			EQU 96	; 96	 60
 15144                                  PathParse			EQU 97	; 97	 61
 15145                                  GetCurrentPSP			EQU 98	; 98	 62
 15146                                  Hongeul 			EQU 99	; 99	 63
 15147                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 15148                                  Set_Printer_Flag		EQU 100 ; 100	 64
 15149                                  GetExtCntry			EQU 101 ; 101	 65
 15150                                  GetSetCdPg			EQU 102 ; 102	 66
 15151                                  ExtHandle			EQU 103 ; 103	 67
 15152                                  Commit				EQU 104 ; 104	 68
 15153                                  GetSetMediaID			EQU 105 ; 105	 69
 15154                                  IFS_IOCTL			EQU 107 ; 107	 6B
 15155                                  ExtOpen 			EQU 108 ; 108	 6C
 15156                                  ;
 15157                                  ;ifdef ROMEXEC
 15158                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 15159                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 15160                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 15161                                  ;endif
 15162                                  ;
 15163                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 15164                                  OEM_C1				EQU 249 ; 249	 F9
 15165                                  OEM_C2				EQU 250 ; 250	 FA
 15166                                  OEM_C3				EQU 251 ; 251	 FB
 15167                                  OEM_C4				EQU 252 ; 252	 FC
 15168                                  OEM_C5				EQU 253 ; 253	 FD
 15169                                  OEM_C6				EQU 254 ; 254	 FE
 15170                                  OEM_C7				EQU 255 ; 255	 FF
 15171                                  
 15172                                  ; ----------------------------------------------------------------------
 15173                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 15174                                  ; ----------------------------------------------------------------------
 15175                                  
 15176                                  ;;	IF	STACKSW
 15177                                  
 15178                                  ;;
 15179                                  ;; Internal Stack Parameters
 15180                                  ;EntrySize		equ	8
 15181                                  ;
 15182                                  ;MinCount		equ	8
 15183                                  ;DefaultCount		equ	9
 15184                                  ;MaxCount		equ	64
 15185                                  ;
 15186                                  ;MinSize 		equ	32
 15187                                  ;DefaultSize		equ	128
 15188                                  ;MaxSize 		equ	512
 15189                                  
 15190                                  ;;	ENDIF
 15191                                  
 15192                                  ; ----------------------------------------------------------------------
 15193                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 15194                                  ; ----------------------------------------------------------------------
 15195                                  					  ;;Rev 3.30 Modification
 15196                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 15197                                  									  
 15198                                  ;*******************************					  
 15199                                  ;System Service call ( Int 15h )					  
 15200                                  ;*******************************					  
 15201                                  ;Function AH = 0C0h, Return system configuration			  
 15202                                  ;For PC and PCJR on return:						  
 15203                                  ;	(AH)	= 80h							  
 15204                                  ;	(CY)	= 1							  
 15205                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 15206                                  ;	(AH)	= 86h							  
 15207                                  ;	(CY)	= 1							  
 15208                                  ;For all others:							  
 15209                                  ;	(AH)	= 0							  
 15210                                  ;	(CY)	= 0							  
 15211                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 15212                                  ; System descriptor :							  
 15213                                  ;	DW	xxxx		length of descriptor in bytes,		  
 15214                                  ;				minimum length = 8			  
 15215                                  ;	DB	xx		model byte				  
 15216                                  ;				0FFh	= PC				  
 15217                                  ;				0FEh	= PC/XT, Portable		  
 15218                                  ;				0FDh	= PC/JR 			  
 15219                                  ;				0FCh	= PC/AT				  
 15220                                  ;				0F9h	= Convertable			  
 15221                                  ;				0F8h	= Model 80			  
 15222                                  ;				0E0 thru 0EFh = reserved		  
 15223                                  ;									  
 15224                                  ;	DB	xx		secondary model byte			  
 15225                                  ;				000h	= PC1				  
 15226                                  ;				000h	= PC/XT, Portable		  
 15227                                  ;				000h	= PC/JR 			  
 15228                                  ;				000h	= PC/AT 			  
 15229                                  ;				001h	= PC/AT Model 339		  
 15230                                  ;				003h	= PC/RT				  
 15231                                  ;				000h	= Convertable			  
 15232                                  ;									  
 15233                                  ;	DB	xx		bios revision level			  
 15234                                  ;				00 for first release, subsequent release  
 15235                                  ;				of code with same model byte and	  
 15236                                  ;				secondary model byte require revison level
 15237                                  ;				to increase by one.			  
 15238                                  ;									  
 15239                                  ;	DB	xx		feature information byte 1		  
 15240                                  ;				X0000000 = 1, bios use DMA channel 3	  
 15241                                  ;					 = 0, DMA channel 3 not used	  
 15242                                  ;									  
 15243                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 15244                                  ;					 = 0, 2nd Interrupt chip not present
 15245                                  ;									  
 15246                                  ;				00X00000 = 1, Real Time Clock present	  
 15247                                  ;					 = 0, Real Time Clock not present 
 15248                                  ;									  
 15249                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 15250                                  ;						called in keyboard interrupt
 15251                                  ;						(Int 09h).		  
 15252                                  ;					 = 0, Keyboard escape sequence not
 15253                                  ;						called. 		  
 15254                                  ;				0000XXXX reserved			  
 15255                                  ;									  
 15256                                  ;	DB	xx		feature information byte 2 - reserved	  
 15257                                  ;									  
 15258                                  ;	DB	xx		feature information byte 2 - reserved	  
 15259                                  ;									  
 15260                                  ;	DB	xx		feature information byte 2 - reserved	  
 15261                                  ;									  
 15262                                  ;	DB	xx		feature information byte 2 - reserved	  
 15263                                  ;									  
 15264                                  
 15265                                  ; 22/03/2019									  
 15266                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
 15267 00000000 ????                    .bios_sd_leng:		resw 1				  
 15268 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
 15269                                  .bios_sd_scnd_modelbyte: 
 15270 00000003 ??                      			resb 1					  
 15271 00000004 ??                      			resb 1					  
 15272 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
 15273 00000006 ????????                			resb 4					  
 15274                                  endstruc					  
 15275                                  									  
 15276                                  ;FeatureByte1	bit map equates 					  
 15277                                  DMAchannel3		equ 10000000b					  
 15278                                  ScndIntController	equ 01000000b					  
 15279                                  RealTimeClock		equ 00100000b					  
 15280                                  KeyEscapeSeq		equ 00010000b					  
 15281                                  					;;End of Modification
 15282                                  
 15283                                  ; ----------------------------------------------------------------------
 15284                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 15285                                  ; ----------------------------------------------------------------------
 15286                                  ; 22/03/2019 - Retro DOS v4.0
 15287                                  
 15288                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 15289                                  
 15290                                  struc SysInitVars
 15291                                  ; MSDOS 3.3
 15292 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 15293 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 15294 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 15295 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 15296 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 15297 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 15298 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 15299 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 15300 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 15301 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 15302 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 15303 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 15304                                  ; MSDOS 6.0
 15305 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 15306 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 15307 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 15308 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 15309                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 15310 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 15311 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 15312 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 15313 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 15314 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 15315 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 15316 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 15317                                  .size:
 15318                                  endstruc
 15319                                  
 15320                                  ;This is added for more information exchage between DOS, BIOS.
 15321                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 15322                                  
 15323                                  ; 22/03/2019
 15324                                  struc SysInitVars_Ext
 15325 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 15326 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 15327                                  endstruc
 15328                                  
 15329                                  ; 09/06/2018
 15330                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 15331                                  SYSI_DPB    equ	0
 15332                                  SYSI_SFT    equ 4
 15333                                  SYSI_CLOCK  equ 8
 15334                                  SYSI_CON    equ 12
 15335                                  SYSI_MAXSEC equ 16
 15336                                  SYSI_BUF    equ 18 		
 15337                                  SYSI_CDS    equ 22
 15338                                  SYSI_FCB    equ 26
 15339                                  SYSI_KEEP   equ 30
 15340                                  SYSI_NUMIO  equ	32
 15341                                  SYSI_NCDS   equ	33
 15342                                  SYSI_DEV    equ 34
 15343                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 15344                                  SYSI_ATTR	  equ 38
 15345                                  SYSI_STRAT	  equ 40
 15346                                  SYSI_INTER	  equ 42
 15347                                  SYSI_NAME	  equ 44
 15348                                  SYSI_SPLICE	  equ 52
 15349                                  SYSI_IBMDOS_SIZE  equ 53
 15350                                  SYSI_IFS_DOSCALL@ equ 55
 15351                                  SYSI_IFS	  equ 59
 15352                                  SYSI_BUFFERS	  equ 63
 15353                                  SYSI_BOOT_DRIVE   equ 67
 15354                                  SYSI_DWMOVE	  equ 68
 15355                                  SYSI_EXT_MEM	  equ 69
 15356                                  
 15357                                  ;The SYSI_BUF of SysInitVars points to the following structure
 15358                                  
 15359                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 15360                                  
 15361                                  struc BUFFINF 	; BUFFINFO
 15362 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 15363 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 15364 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 15365 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 15366                                  
 15367 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 15368                                  				; are in HMA
 15369 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 15370                                  				;  used to read/write on disks
 15371 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 15372 00000015 ????                    .UU_EMS_NPA640:		resw 1
 15373 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 15374 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 15375 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 15376 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 15377 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 15378 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 15379 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 15380                                  .size:
 15381                                  endstruc
 15382                                  
 15383                                  ; ----------------------------------------------------------------------
 15384                                  ; CURDIR.INC (MSDOS 6.0 - 1991) 	
 15385                                  ; ----------------------------------------------------------------------
 15386                                  ; 22/03/2019 - Retro DOS v4.0
 15387                                  
 15388                                  ;**	CDS - Current Directory Structure
 15389                                  ;
 15390                                  ; CDS items are used bu the internal routines to store cluster numbers and
 15391                                  ; network identifiers for each logical name.  The ID field is used dually,
 15392                                  ; both as net ID and for a cluster number for local devices. In the case
 15393                                  ; of local devices, the cluster number will be -1 if there is a potential
 15394                                  ; of the disk being changed or if the path must be recracked.
 15395                                  ;
 15396                                  ;	Some pathnames have special preambles, such as
 15397                                  ;
 15398                                  ;		\\machine\sharename\...
 15399                                  ;	For these pathnames we can't allow ".." processing to back us
 15400                                  ;	up into the special front part of the name.  The CURDIR_END field
 15401                                  ;	holds the address of the seperator character which marks
 15402                                  ;	the split between the special preamble and the regular
 15403                                  ;	path list; ".." processing isn't allowed to back us up past
 15404                                  ;	(i.e., before) CURDIR_END
 15405                                  ;	For the root, it points at the leading /. For net
 15406                                  ;	assignments it points at the end (nul) of the initial assignment:
 15407                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 15408                                  ;	  ^		 ^		     ^
 15409                                  
 15410                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 15411                                  TEMPLEN 	EQU	DIRSTRLEN*2
 15412                                  
 15413                                  struc 		curdir_list
 15414                                  ; MSDOS 3.3
 15415 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 15416 00000043 ????                    .cdir_flags	resw	1		; various flags
 15417 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 15418 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 15419 0000004D ????                    .cdir_usr_word	resw	1
 15420 0000004F ????                    .cdir_end	resw	1		; end of assignment
 15421                                  ; MSDOS 6.0
 15422 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 15423 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 15424 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 15425                                  .size:
 15426                                  endstruc
 15427                                  
 15428                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 15429                                  						; ASM87 which doesn't allow
 15430                                  						; Size directive as a macro
 15431                                  						; argument
 15432                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 15433                                  
 15434                                  ;**	Flag values for CURDIR_FLAGS
 15435                                  
 15436                                  ;Flag word masks
 15437                                  curdir_isnet	EQU	1000000000000000B
 15438                                  curdir_isifs	EQU	1000000000000000B
 15439                                  curdir_inuse	EQU	0100000000000000B
 15440                                  curdir_splice	EQU	0010000000000000B
 15441                                  curdir_local	EQU	0001000000000000B
 15442                                  
 15443                                  ; ----------------------------------------------------------------------
 15444                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 15445                                  ; ----------------------------------------------------------------------
 15446                                  ; 25/03/2019 - Retro DOS v4.0
 15447                                  
 15448                                  ; system file table
 15449                                  
 15450                                  ;**	System File Table SuperStructure
 15451                                  ;
 15452                                  ;	The system file table entries are allocated in contiguous groups.
 15453                                  ;	There may be more than one such groups; the SF "superstructure"
 15454                                  ;	tracks the groups.
 15455                                  
 15456                                  struc	SF
 15457 00000000 ????????                .SFLink:	resd	1
 15458 00000004 ????                    .SFCount:	resw	1		; number of entries
 15459 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 15460                                  .size:
 15461                                  endstruc
 15462                                  
 15463                                  ;**	System file table entry
 15464                                  ;
 15465                                  ;	These are the structures which are at SFTABLE in the SF structure.
 15466                                  
 15467                                  struc	SF_ENTRY
 15468 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 15469                                  					;   if FCB then ref count
 15470 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 15471 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 15472 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 15473                                  					; Bit 15 = 1 if remote file
 15474                                  					;	 = 0 if local file or device
 15475                                  					; Bit 14 = 1 if date/time is not to be
 15476                                  					;   set from clock at CLOSE.  Set by
 15477                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 15478                                  					;   other reseters of the dirty bit
 15479                                  					;   (WRITE)
 15480                                  					; Bit 13 = Pipe bit (reserved)
 15481                                  					;
 15482                                  					; Bits 0-7 (old FCB_devid bits)
 15483                                  					; If remote file or local file, bit
 15484                                  					; 6=0 if dirty Device ID number, bits
 15485                                  					; 0-5 if local file.
 15486                                  					; bit 7=0 for local file, bit 7
 15487                                  					;      =1 for local I/O device
 15488                                  					; If local I/O device, bit 6=0 if EOF (input)
 15489                                  					;		Bit 5=1 if Raw mode
 15490                                  					;		Bit 0=1 if console input device
 15491                                  					;		Bit 1=1 if console output device
 15492                                  					;		Bit 2=1 if null device
 15493                                  					;		Bit 3=1 if clock device
 15494 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 15495                                  					; to device header if local device,
 15496                                  					; points to net device header if
 15497                                  					; remote
 15498 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 15499                                  ;.sf_lstclus:	resw	1 ; *	
 15500 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 15501 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 15502 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 15503 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 15504                                  ;
 15505                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 15506                                  ; ID
 15507                                  ;
 15508 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 15509 0000001B ????                    .sf_dirsec:	resw	1		; Sector number of directory sector for this file
 15510 0000001D ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 15511                                  ;
 15512                                  ; End of 7 bytes of file-system specific info.
 15513                                  ;
 15514 0000001E <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 15515                                  					; directory entry.  This is used by
 15516                                  					; close to detect file deleted and
 15517                                  					; disk changed errors.
 15518                                  ; SHARING INFO
 15519 00000029 ????????                .sf_chain:	resd	1		; link to next SF
 15520 0000002D ????                    .sf_UID:	resw	1
 15521 0000002F ????                    .sf_PID:	resw	1
 15522 00000031 ????                    .sf_MFT:	resw	1
 15523 00000033 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 15524 00000035 ????????                .sf_IFS_HDR:	resd 	1 ; **
 15525                                  .size:
 15526                                  endstruc
 15527                                  
 15528                                  ; ----------------------------------------------------------------------
 15529                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987) 	
 15530                                  ; ----------------------------------------------------------------------
 15531                                  ; 11/06/2018 - Retro DOS v3.0
 15532                                  
 15533                                  ;Equates for COUNTRY INFORMATION.
 15534                                  SetCountryInfo		EQU	1	;country info
 15535                                  SetUcase		EQU	2	;uppercase table
 15536                                  SetLcase		EQU	3	;lowercase table (Reserved)
 15537                                  SetUcaseFile		EQU	4	;uppercase file spec table
 15538                                  SetFileList		EQU	5	;valid file character list
 15539                                  SetCollate		EQU	6	;collating sequence
 15540                                  SetDBCS 		EQU	7	;double byte character set
 15541                                  SetALL			EQU	-1	;all the entries
 15542                                  
 15543                                  ;DOS country and code page information table structure.
 15544                                  ;Internally, IBMDOS gives a pointer to this table.
 15545                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 15546                                  ;this structure.
 15547                                  
 15548                                  struc country_cdpg_info ; DOS_country_cdpg_info
 15549 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 15550 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 15551 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 15552 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 15553 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 15554 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 15555                                  
 15556 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 15557 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 15558                                  
 15559 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 15560 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 15561                                  
 15562 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 15563 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 15564                                  
 15565 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 15566 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 15567 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 15568 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 15569 00000067 ????                    .ccDFormat:		resw	1	;date format
 15570 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 15571                                  					;5 byte of (currency symbol+0)
 15572 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 15573 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 15574 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 15575 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 15576 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 15577 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 15578 00000078 ??                      .ccTFormat:		resb	1	;time format
 15579 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 15580 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 15581 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 15582                                  .size:
 15583                                  endstruc
 15584                                  
 15585                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 15586                                  
 15587                                  ; ======================================================================
 15588                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 15589                                  ; ======================================================================
 15590                                  ; 21/03/2019 - Retro DOS v4.0
 15591                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 15592                                  
 15593                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 15594                                  ; 21/10/2022
 15595                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 15596                                  ; 22/10/2022
 15597                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 15598                                  ; 09/12/2022
 15599                                  DOSBIOCODESEG equ IOSYSCODESEG
 15600                                  
 15601                                  ; Note: These offset addresses must be chanqed when the code 
 15602                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 15603                                  
 15604                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 15605                                  
 15606                                  ; 09/12/2022
 15607                                  %if 0
 15608                                  
 15609                                  ; 13/05/2019
 15610                                  
 15611                                  ;IsWin386         equ 08CFh
 15612                                  ;V86_Crit_SetFocus equ 08D0h
 15613                                  ; 21/10/2022
 15614                                  IsWin386          equ 08D0h
 15615                                  V86_Crit_SetFocus equ 08D1h 
 15616                                  
 15617                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 15618                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 15619                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 15620                                  
 15621                                  ;SysinitPresent	  equ 08FCh
 15622                                  ; 21/10/2022
 15623                                  SysinitPresent	  equ 08FDh
 15624                                  
 15625                                  inHMA		  equ 000Dh
 15626                                  xms		  equ 000Eh
 15627                                  ;FreeHMAPtr	  equ 08F6h
 15628                                  ;multrk_flag	  equ 0533h
 15629                                  ;ec35_flag	  equ 0535h
 15630                                  ;EOT		  equ 012Eh
 15631                                  ; 21/10/2022
 15632                                  FreeHMAPtr	  equ 08F7h
 15633                                  multrk_flag	  equ 052Fh
 15634                                  ec35_flag	  equ 0531h
 15635                                  EOT		  equ 012Ch
 15636                                  
 15637                                  ;NextStack	  equ 08BFh
 15638                                  ;IT_StackLoc	  equ 08C5h
 15639                                  ;IT_StackSize	  equ 08C9h
 15640                                  ; 21/10/2022
 15641                                  NextStack	  equ 08C0h
 15642                                  IT_StackLoc	  equ 08C6h
 15643                                  IT_StackSize	  equ 08CAh
 15644                                  
 15645                                  ;MoveDOSIntoHMA	  equ 08F8h
 15646                                  ; 21/10/2022
 15647                                  MoveDOSIntoHMA	  equ 08F9h
 15648                                  
 15649                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 15650                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 15651                                  ; 21/10/2022
 15652                                  INT19SEM equ 0640h ; (iosys5.txt)
 15653                                  I19_LST  equ 0641h ; (iosys5.txt)
 15654                                  
 15655                                  %endif
 15656                                  
 15657                                  ; 09/12/2022
 15658                                  seg_reinit equ _seg_reinit
 15659                                  ec35_flag  equ ec35flag		
 15660                                  INT19SEM   equ int19sem
 15661                                  I19_LST    equ i19_lst
 15662                                  
 15663                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 15664                                  INT19OLD08 equ I19_LST+6
 15665                                  INT19OLD09 equ I19_LST+11
 15666                                  INT19OLD0A equ I19_LST+16
 15667                                  INT19OLD0B equ I19_LST+21
 15668                                  INT19OLD0C equ I19_LST+26
 15669                                  INT19OLD0D equ I19_LST+31
 15670                                  INT19OLD0E equ I19_LST+36
 15671                                  INT19OLD70 equ I19_LST+41
 15672                                  INT19OLD72 equ I19_LST+46
 15673                                  INT19OLD73 equ I19_LST+51
 15674                                  INT19OLD74 equ I19_LST+56
 15675                                  INT19OLD76 equ I19_LST+61
 15676                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 15677                                  
 15678                                  ; 09/12/2022
 15679                                  %if 0
 15680                                  
 15681                                  ;keyrd_func	equ 04E9h
 15682                                  ;keysts_func	equ 04EAh
 15683                                  ;t_switch	equ 04F6h
 15684                                  ; 21/10/2022
 15685                                  keyrd_func	equ 04E5h
 15686                                  keysts_func	equ 04E6h
 15687                                  t_switch	equ 04F2h
 15688                                  
 15689                                  ; 22/10/2022
 15690                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 15691                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 15692                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 15693                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 15694                                  
 15695                                  %endif
 15696                                  
 15697                                  ; 09/12/2022
 15698                                  BCODESTART	equ BIOSDATAWORD
 15699                                  RE_INIT		equ re_init
 15700                                  
 15701                                  ; ----------------------------------------------------------------------
 15702                                  ; CONFIG.INC (MSDOS 6.0 - 1991) 	
 15703                                  ; ----------------------------------------------------------------------
 15704                                  ; 15/04/2019 - Retro DOS v4.0
 15705                                  
 15706                                  CONFIG_BEGIN        equ  '['
 15707                                  CONFIG_BREAK        equ  'C'
 15708                                  CONFIG_BUFFERS      equ  'B'
 15709                                  CONFIG_COMMENT      equ  'Y'
 15710                                  CONFIG_COUNTRY      equ  'Q'
 15711                                  CONFIG_DEVICE       equ  'D'
 15712                                  CONFIG_DEVICEHIGH   equ  'U'
 15713                                  CONFIG_DOS          equ  'H'
 15714                                  CONFIG_DRIVPARM     equ  'P'
 15715                                  CONFIG_FCBS         equ  'X'
 15716                                  CONFIG_FILES        equ  'F'
 15717                                  CONFIG_INCLUDE      equ  'J'
 15718                                  CONFIG_INSTALL      equ  'I'
 15719                                  CONFIG_INSTALLHIGH  equ  'W'
 15720                                  CONFIG_LASTDRIVE    equ  'L'
 15721                                  CONFIG_MENUCOLOR    equ  'R'
 15722                                  CONFIG_MENUDEFAULT  equ  'A'
 15723                                  CONFIG_MENUITEM     equ  'E'
 15724                                  CONFIG_MULTITRACK   equ  'M'
 15725                                  CONFIG_NUMLOCK      equ  'N'
 15726                                  CONFIG_REM          equ  '0'
 15727                                  CONFIG_SEMICOLON    equ  ';'
 15728                                  CONFIG_SET          equ  'V'
 15729                                  CONFIG_SHELL        equ  'S'
 15730                                  CONFIG_STACKS       equ  'K'
 15731                                  CONFIG_SUBMENU      equ  'O'
 15732                                  CONFIG_SWITCHES     equ  '1'
 15733                                  
 15734                                  CONFIG_UNKNOWN      equ  'Z'
 15735                                  
 15736                                  CONFIG_OPTION_QUERY equ 80h
 15737                                  
 15738                                  ; ----------------------------------------------------------------------
 15739                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991) 	
 15740                                  ; ----------------------------------------------------------------------
 15741                                  ; 21/03/2019 - Retro DOS v4.0
 15742                                  
 15743                                  true	equ	0FFFFh
 15744                                  false	equ	0
 15745                                  cr	equ	13
 15746                                  lf	equ	10
 15747                                  tab	equ	9
 15748                                  
 15749                                  multMULT	   equ	4Ah
 15750                                  multMULTGETHMAPTR  equ	1
 15751                                  multMULTALLOCHMA   equ	2
 15752                                  
 15753                                  ;NOEXEC    equ	FALSE
 15754                                  
 15755                                  stacksw    equ	true	;include switchable hardware stacks
 15756                                  mycds_size equ	88	;size of curdir_list. if it is not
 15757                                  			;the same, then will generate compile error.
 15758                                  
 15759                                  entrysize   equ     8
 15760                                  
 15761                                  mincount    equ     8
 15762                                  defaultcount equ    9
 15763                                  maxcount    equ     64
 15764                                  
 15765                                  minsize     equ     32
 15766                                  defaultsize equ     128
 15767                                  maxsize     equ     512
 15768                                  
 15769                                  ;%define allocbyte  byte [es:bp+0]
 15770                                  ;%define intlevel   byte [es:bp+1]
 15771                                  ;%define savedsp    word [es:bp+2]
 15772                                  ;%define savedss    word [es:bp+4]
 15773                                  ;%define newsp	    word [es:bp+6]
 15774                                  
 15775                                  allocbyte   equ     0
 15776                                  intlevel    equ     1
 15777                                  savedsp     equ     2
 15778                                  savedss     equ     4
 15779                                  newsp       equ     6
 15780                                  
 15781                                  free	    equ     0
 15782                                  allocated   equ     1
 15783                                  overflowed  equ     2
 15784                                  clobbered   equ     3
 15785                                  
 15786                                  ;---------------------------------------
 15787                                  ; external variable defined in ibmbio module for multi-track
 15788                                  
 15789                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 15790                                  			  ; it on after handling config.sys file as a
 15791                                  			  ; default value,if multrk_flag = multrk_off1.
 15792                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 15793                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 15794                                  
 15795                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 15796                                  
 15797                                  SYSINIT$:
 15798                                  	;IF	STACKSW 
 15799                                  	; include MSSTACK.INC	;Main stack program and data definitions
 15800                                  	; include STKMES.INC	;Fatal stack error message
 15801                                  	;   public Endstackcode
 15802                                  ;Endstackcode	label byte
 15803                                  	;ENDIF
 15804                                  
 15805                                  ; 05/07/2018
 15806                                  ; ----------------------------------------------------------------------
 15807                                  ; 04/06/2018 - Retro DOS v3.0
 15808                                  
 15809                                  ; ----------------------------------------------------------------------
 15810                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 15811                                  ; ----------------------------------------------------------------------
 15812                                  
 15813                                  ;	MSStack.inc
 15814                                  ;
 15815                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 15816                                  ;	should follow the standard Interrupt Sharing Scheme which has
 15817                                  ;	a standard header structure.
 15818                                  ;	Fyi, the following shows the relations between
 15819                                  ;	the interrupt vector and interrupt level.
 15820                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 15821                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 15822                                  ;	MSSTACK module modifies the following interrupt vectors
 15823                                  ;	to meet the standard Interrupt Sharing standard;
 15824                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 15825                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 15826                                  ;	should be initialized to indicat whether this interrupt handler is
 15827                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 15828                                  ;	program header is initialized in STKINIT.INC module.
 15829                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 15830                                  ;
 15831                                  
 15832                                  ;  User specifies the number of stack elements - default = 9
 15833                                  ;						 minimum = 8
 15834                                  ;						 maximum = 64
 15835                                  ;
 15836                                  ;  Intercepts Asynchronous Hardware Interrupts only
 15837                                  ;
 15838                                  ;  Picks a stack from pool of stacks and switches to it
 15839                                  ;
 15840                                  ;  Calls the previously saved interrupt vector after pushing flags
 15841                                  ;
 15842                                  ;  On return, returns the stack to the stack pool
 15843                                  ;
 15844                                  
 15845                                  ; This is a modification of STACKS:
 15846                                  ; 1. To fix a bug which was causing the program to take up too much space.
 15847                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 15848                                  ;    . Clobbers the stack that got too big instead of innocent stack
 15849                                  ;    . Allows system to work if the only stack that got too big was the most
 15850                                  ;      deeply nested one
 15851                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 15852                                  ; 4. Does not intercept any interupts on a PCjr.
 15853                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 15854                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 15855                                  
 15856                                  		;EVEN
 15857                                  ;align 2
 15858                                  		; 21/10/2022
 15859                                  
 15860 00000000 0000                    		dw	0	; spare field but leave these in order
 15861 00000002 0000                    stackcount:	dw	0
 15862 00000004 0000                    stackat: 	dw	0
 15863 00000006 0000                    stacksize:	dw	0
 15864 00000008 0000                    stacks:		dw	0
 15865 0000000A 0000                    		dw	0
 15866                                  
 15867 0000000C [0800]                  firstentry:	dw	stacks
 15868 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 15869 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 15870                                  
 15871                                  ;***********************************************************************
 15872                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 15873                                  
 15874                                  ; ----------------------------------------------------------------------
 15875                                  
 15876 00000012 00000000                old02:	dd	0
 15877                                  
 15878                                  int02:
 15879                                  
 15880                                  ; *********************************************************************
 15881                                  ;
 15882                                  ; this is special support for the pc convertible / nmi handler
 15883                                  ;
 15884                                  ;	on the pc convertible, there is a situation where an nmi can be 
 15885                                  ;	caused by using the "out" instructions to certain ports. when this
 15886                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 15887                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 15888                                  ;	includes other type of interrupts (hardware and software), and
 15889                                  ;	also includes other type of nmi's. when any nmi has occured,
 15890                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 15891                                  ;	the software takes specific steps to allow further interrupting.
 15892                                  ;
 15893                                  ;	for pc convertible, the situation where the nmi is generated by the
 15894                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 15895                                  ;	otherwords, it is actually a "restartable exception". in this
 15896                                  ;	case, the software handler must be able to get to the stack in
 15897                                  ;	order to figure out what instruction caused the problem, where
 15898                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 15899                                  ;	we will not switch stacks in this situation. this situation is
 15900                                  ;	detected by interrogating port 62h, and checking for a bit value
 15901                                  ;	of 80h. if set, *****do not switch stacks*****.
 15902                                  ;
 15903                                  ; *********************************************************************
 15904                                  
 15905 00000016 50                      	push	ax
 15906 00000017 06                      	push	es
 15907 00000018 B800F0                  	mov	ax,0F000h
 15908 0000001B 8EC0                    	mov	es,ax
 15909                                  	; 02/11/2022
 15910 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 15911 00000023 07                      	pop	es
 15912 00000024 750C                    	jne	short normal02
 15913                                  
 15914 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 15915                                  				; 0-3: values of DIP switches
 15916                                  				; 5: 1=Timer 2 channel out
 15917                                  				; 6: 1=I/O channel check
 15918                                  				; 7: 1=RAM parity check error occurred.
 15919 00000028 A880                    	test	al,80h
 15920 0000002A 7406                    	jz	short normal02
 15921                                  special02:
 15922 0000002C 58                      	pop	ax
 15923 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 15924                                  normal02:
 15925 00000032 58                      	pop	ax
 15926 00000033 E81101                  	call	do_int_stacks
 15927 00000036 [1200]                  	dw	old02
 15928                                  
 15929                                  ; ----------------------------------------------------------------------
 15930                                  
 15931 00000038 00000000                old08:	dd	0
 15932                                  
 15933                                  int08:
 15934 0000003C E80801                  	call	do_int_stacks
 15935 0000003F [3800]                  	dw	old08
 15936                                  
 15937                                  ; ----------------------------------------------------------------------
 15938                                  
 15939 00000041 00000000                old09:	dd	0
 15940                                  
 15941                                  int09:
 15942                                  
 15943                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 15944                                  ; as its first instruction for compatibility reasons
 15945                                  
 15946 00000045 EB02                    	jmp	short keyboard_lbl
 15947 00000047 90                      	nop
 15948 00000048 00                      	db	0
 15949                                  
 15950                                  keyboard_lbl:
 15951 00000049 E8FB00                  	call	do_int_stacks
 15952 0000004C [4100]                  	dw	old09
 15953                                  
 15954                                  ; ----------------------------------------------------------------------
 15955                                  
 15956 0000004E 00000000                old70:	dd	0
 15957                                  
 15958                                  int70:
 15959 00000052 E8F200                  	call	do_int_stacks
 15960 00000055 [4E00]                  	dw	old70
 15961                                  
 15962                                  ; ----------------------------------------------------------------------
 15963                                  
 15964                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 15965                                  ;public	int&a
 15966                                  ;public	old&a
 15967                                  ;public	firstflag&a
 15968                                  ;int&a	proc	far
 15969                                  ;	jmp	short entry_int&a&_stk
 15970                                  ;old&a	dd	  0		;forward pointer
 15971                                  ;	dw	  424bh 	;compatible signature for int. sharing
 15972                                  ;firstflag&a db   0		;the firstly hooked.
 15973                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 15974                                  ;	db	7 dup (0)	;reserved for future.
 15975                                  ;entry_int&a&_stk:
 15976                                  ;	call	do_int_stacks
 15977                                  ;	dw	old&a
 15978                                  ;intret_&a:
 15979                                  ;	iret
 15980                                  ;int&a	endp
 15981                                  ;	endm
 15982                                  
 15983                                  ; ----------------------------------------------------------------------
 15984                                  
 15985                                  int0A:
 15986 00000057 EB10                    	jmp	short entry_int0A_stk
 15987 00000059 00000000                old0A:	dd	0	
 15988 0000005D 4B42                    	dw	424Bh
 15989                                  firstflag0A:
 15990 0000005F 00                      	db	0
 15991 00000060 EB0C                    	jmp	short intret_0A
 15992 00000062 00<rep 7h>              	times	7 db 0
 15993                                  
 15994                                  entry_int0A_stk:
 15995 00000069 E8DB00                  	call	do_int_stacks
 15996 0000006C [5900]                  	dw	old0A
 15997                                  intret_0A:
 15998 0000006E CF                      	iret
 15999                                  
 16000                                  ; ----------------------------------------------------------------------
 16001                                  
 16002                                  int0B:
 16003 0000006F EB10                    	jmp	short entry_int0B_stk
 16004 00000071 00000000                old0B:	dd	0	
 16005 00000075 4B42                    	dw	424Bh
 16006                                  firstflag0B:
 16007 00000077 00                      	db	0
 16008 00000078 EB0C                    	jmp	short intret_0B
 16009 0000007A 00<rep 7h>              	times	7 db 0
 16010                                  
 16011                                  entry_int0B_stk:
 16012 00000081 E8C300                  	call	do_int_stacks
 16013 00000084 [7100]                  	dw	old0B
 16014                                  intret_0B:
 16015 00000086 CF                      	iret
 16016                                  
 16017                                  ; ----------------------------------------------------------------------
 16018                                  
 16019                                  int0C:
 16020 00000087 EB10                    	jmp	short entry_int0C_stk
 16021 00000089 00000000                old0C:	dd	0	
 16022 0000008D 4B42                    	dw	424Bh
 16023                                  firstflag0C:
 16024 0000008F 00                      	db	0
 16025 00000090 EB0C                    	jmp	short intret_0C
 16026 00000092 00<rep 7h>              	times	7 db 0
 16027                                  
 16028                                  entry_int0C_stk:
 16029 00000099 E8AB00                  	call	do_int_stacks
 16030 0000009C [8900]                  	dw	old0C
 16031                                  intret_0C:
 16032 0000009E CF                      	iret
 16033                                  
 16034                                  ; ----------------------------------------------------------------------
 16035                                  
 16036                                  int0D:
 16037 0000009F EB10                    	jmp	short entry_int0D_stk
 16038 000000A1 00000000                old0D:	dd	0	
 16039 000000A5 4B42                    	dw	424Bh
 16040                                  firstflag0D:
 16041 000000A7 00                      	db	0
 16042 000000A8 EB0C                    	jmp	short intret_0D
 16043 000000AA 00<rep 7h>              	times	7 db 0
 16044                                  
 16045                                  entry_int0D_stk:
 16046 000000B1 E89300                  	call	do_int_stacks
 16047 000000B4 [A100]                  	dw	old0D
 16048                                  intret_0D:
 16049 000000B6 CF                      	iret
 16050                                  
 16051                                  ; ----------------------------------------------------------------------
 16052                                  
 16053                                  int0E:
 16054 000000B7 EB10                    	jmp	short entry_int0E_stk
 16055 000000B9 00000000                old0E:	dd	0	
 16056 000000BD 4B42                    	dw	424Bh
 16057                                  firstflag0E:
 16058 000000BF 00                      	db	0
 16059 000000C0 EB0C                    	jmp	short intret_0E
 16060 000000C2 00<rep 7h>              	times	7 db 0
 16061                                  
 16062                                  entry_int0E_stk:
 16063 000000C9 E87B00                  	call	do_int_stacks
 16064 000000CC [B900]                  	dw	old0E
 16065                                  intret_0E:
 16066 000000CE CF                      	iret
 16067                                  
 16068                                  ; ----------------------------------------------------------------------
 16069                                  
 16070                                  int72:
 16071 000000CF EB10                    	jmp	short entry_int72_stk
 16072 000000D1 00000000                old72:	dd	0	
 16073 000000D5 4B42                    	dw	424Bh
 16074                                  firstflag72:
 16075 000000D7 00                      	db	0
 16076 000000D8 EB0C                    	jmp	short intret_72
 16077 000000DA 00<rep 7h>              	times	7 db 0
 16078                                  
 16079                                  entry_int72_stk:
 16080 000000E1 E86300                  	call	do_int_stacks
 16081 000000E4 [D100]                  	dw	old72
 16082                                  intret_72:
 16083 000000E6 CF                      	iret
 16084                                  
 16085                                  ; ----------------------------------------------------------------------
 16086                                  
 16087                                  int73:
 16088 000000E7 EB10                    	jmp	short entry_int73_stk
 16089 000000E9 00000000                old73:	dd	0	
 16090 000000ED 4B42                    	dw	424Bh
 16091                                  firstflag73:
 16092 000000EF 00                      	db	0
 16093 000000F0 EB0C                    	jmp	short intret_73
 16094 000000F2 00<rep 7h>              	times	7 db 0
 16095                                  
 16096                                  entry_int73_stk:
 16097 000000F9 E84B00                  	call	do_int_stacks
 16098 000000FC [E900]                  	dw	old73
 16099                                  intret_73:
 16100 000000FE CF                      	iret
 16101                                  
 16102                                  ; ----------------------------------------------------------------------
 16103                                  
 16104                                  int74:
 16105 000000FF EB10                    	jmp	short entry_int74_stk
 16106 00000101 00000000                old74:	dd	0	
 16107 00000105 4B42                    	dw	424Bh
 16108                                  firstflag74:
 16109 00000107 00                      	db	0
 16110 00000108 EB0C                    	jmp	short intret_74
 16111 0000010A 00<rep 7h>              	times	7 db 0
 16112                                  
 16113                                  entry_int74_stk:
 16114 00000111 E83300                  	call	do_int_stacks
 16115 00000114 [0101]                  	dw	old74
 16116                                  intret_74:
 16117 00000116 CF                      	iret
 16118                                  
 16119                                  ; ----------------------------------------------------------------------
 16120                                  
 16121                                  int76:
 16122 00000117 EB10                    	jmp	short entry_int76_stk
 16123 00000119 00000000                old76:	dd	0	
 16124 0000011D 4B42                    	dw	424Bh
 16125                                  firstflag76:
 16126 0000011F 00                      	db	0
 16127 00000120 EB0C                    	jmp	short intret_76
 16128 00000122 00<rep 7h>              	times	7 db 0
 16129                                  
 16130                                  entry_int76_stk:
 16131 00000129 E81B00                  	call	do_int_stacks
 16132 0000012C [1901]                  	dw	old76
 16133                                  intret_76:
 16134 0000012E CF                      	iret
 16135                                  
 16136                                  ; ----------------------------------------------------------------------
 16137                                  
 16138                                  int77:
 16139 0000012F EB10                    	jmp	short entry_int77_stk
 16140 00000131 00000000                old77:	dd	0	
 16141 00000135 4B42                    	dw	424Bh
 16142                                  firstflag77:
 16143 00000137 00                      	db	0
 16144 00000138 EB0C                    	jmp	short intret_77
 16145 0000013A 00<rep 7h>              	times	7 db 0
 16146                                  
 16147                                  entry_int77_stk:
 16148 00000141 E80300                  	call	do_int_stacks
 16149 00000144 [3101]                  	dw	old77
 16150                                  intret_77:
 16151 00000146 CF                      	iret
 16152                                  
 16153                                  ; ----------------------------------------------------------------------
 16154                                  
 16155                                  ;********************************************************************
 16156                                  ;common routines
 16157                                  ;********************************************************************
 16158                                  
 16159                                  ; do interrupt stack switching. the fake return address holds
 16160                                  ; a pointer to the far-pointer of the actual interrupt
 16161                                  ; service routine
 16162                                  
 16163                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 16164                                  ; 21/03/2019 - Retro DOS v4.0
 16165                                  
 16166                                  ;allocbyte   equ 0
 16167                                  ;intlevel    equ 1
 16168                                  ;savedsp     equ 2
 16169                                  ;savedss     equ 4
 16170                                  ;newsp       equ 6
 16171                                  
 16172                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 SYSINIT)
 16173                                  ; (MSDOS 6.21 IO:SYS, SYSINIT:0147h)
 16174                                  
 16175                                  do_int_stacks:
 16176 00000147 50                      	push	ax
 16177 00000148 55                      	push	bp
 16178 00000149 06                      	push	es
 16179 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 16180 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 16181 00000154 B001                    	mov	al,allocated ; 1
 16182                                  	; 21/10/2022
 16183                                  	;xchg	[es:bp+allocbyte],al 
 16184                                  	; 11/12/2022
 16185 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 16186 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 16187 0000015C 754F                    	jne	short notfree02
 16188                                  
 16189 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 16190                                  
 16191                                  found02:
 16192 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 16193 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 16194                                  
 16195 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 16196                                  
 16197 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 16198                                  	; 21/10/2022
 16199                                  	;mov	bp,[es:bp+6]
 16200                                  	; 11/12/2022
 16201                                  	;cmp	[es:bp+0],ax	
 16202 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 16203 00000176 7542                    	jne	short foundbad02
 16204                                  
 16205                                  	;mov	ax,es			; point ss,sp to the new stack
 16206                                  	;mov	es,bp
 16207                                  	;mov	bp,sp
 16208                                  	;mov	bp,[bp+6]
 16209                                  	;mov	ss,ax
 16210                                  	;mov	sp,es
 16211                                  	;mov	es,ax
 16212                                  	;mov	bp,[cs:bp]
 16213                                  
 16214                                  	; 21/10/2022 (MSDOS 5.0 code SYSINIT code)
 16215 00000178 55                      	push    bp
 16216 00000179 89E5                    	mov     bp,sp
 16217 0000017B 8B4608                  	mov     ax,[bp+8]
 16218 0000017E 5D                      	pop     bp
 16219 0000017F 06                      	push    es
 16220 00000180 17                      	pop     ss
 16221 00000181 89EC                    	mov     sp,bp
 16222 00000183 89C5                    	mov     bp,ax
 16223                                  	; 11/12/2022
 16224                                  	;mov	bp,[cs:bp+0]	
 16225 00000185 2E8B6E00                	mov	bp,[cs:bp]	
 16226                                  
 16227 00000189 9C                      	pushf				; go execute the real interrupt handler
 16228                                  	; 11/12/2022
 16229 0000018A 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
 16230                                  	; 21/10/2022
 16231                                  	;call	far [cs:bp+0]
 16232                                  
 16233 0000018E 89E5                    	mov	bp,sp			; retrieve the table offset for us
 16234                                  	; 11/12/2022
 16235 00000190 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
 16236                                  	; 21/10/2022
 16237                                  	;mov	bp,[es:bp+0]
 16238 00000194 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 16239 00000198 268B6602                	mov	sp,[es:bp+savedsp]
 16240                                  
 16241                                  	; 11/12/2022
 16242                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 16243                                  	; 21/10/2022
 16244 0000019C 26C6460000              	mov	byte [es:bp],free ; 0
 16245 000001A1 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 16246                                  
 16247 000001A6 07                      	pop	es
 16248 000001A7 5D                      	pop	bp			; saved on entry
 16249 000001A8 58                      	pop	ax			; saved on entry
 16250 000001A9 83C402                  	add	sp,2
 16251 000001AC CF                      	iret				; done with this interrupt
 16252                                  
 16253                                  notfree02:
 16254 000001AD 3C01                    	cmp	al,allocated		; error flag
 16255 000001AF 7404                    	je	short findnext02	;  no, continue
 16256                                  	; 11/12/2022
 16257                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
 16258                                  	; 21/10/2022
 16259 000001B1 26864600                	xchg	[es:bp],al
 16260                                  
 16261                                  findnext02:
 16262 000001B5 E81200                  	call	longpath
 16263 000001B8 EBAA                    	jmp	short found02
 16264                                  
 16265                                  foundbad02:
 16266 000001BA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16267 000001BF 72F4                    	jc	short findnext02
 16268 000001C1 89C5                    	mov	bp,ax			; flag this entry
 16269                                  	; 11/12/2022
 16270                                  	;mov	byte [es:bp+allocbyte],clobbered
 16271                                  	; 21/10/2022
 16272 000001C3 26C6460003              	mov	byte [es:bp],clobbered ; 3
 16273 000001C8 EBEB                    	jmp	short findnext02	; keep looking
 16274                                  
 16275                                  ; ----------------------------------------------------------------------
 16276                                  
 16277                                  ; Common routines
 16278                                  
 16279                                  longpath:
 16280                                  	; 21/03/2019
 16281 000001CA 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 16282                                  lploopp:
 16283                                  	; 11/12/2022
 16284                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 16285                                  	; 21/10/2022
 16286 000001CF 26807E0000              	cmp	byte [es:bp],free
 16287 000001D4 7512                    	jne	short inuse		;  no, try next one
 16288                                  
 16289 000001D6 B001                    	mov	al,allocated
 16290                                  	; 11/12/2022
 16291                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 16292                                  	; 21/10/2022
 16293 000001D8 26864600                	xchg	[es:bp],al
 16294 000001DC 3C00                    	cmp	al,free 		; is it still free?
 16295 000001DE 7414                    	je	short found		;  yes, go use it
 16296                                  
 16297 000001E0 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 16298 000001E2 7404                    	je	short inuse		;  no, check the next one
 16299                                  
 16300                                  	; 11/12/2022
 16301                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 16302                                  	; 21/10/2022
 16303 000001E4 26884600                	mov	[es:bp],al
 16304                                  inuse:
 16305 000001E8 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16306 000001ED 7406                    	je	short fatal
 16307 000001EF 83ED08                  	sub	bp,entrysize
 16308 000001F2 EBDB                    	jmp	short lploopp
 16309                                  found:
 16310 000001F4 C3                      	retn
 16311                                  fatal:
 16312 000001F5 1E                      	push	ds
 16313 000001F6 B800F0                  	mov	ax,0F000h		;look at the model byte
 16314 000001F9 8ED8                    	mov	ds,ax
 16315 000001FB 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 16316 00000200 1F                      	pop	ds
 16317 00000201 7504                    	jne	short skip_nmis
 16318                                  
 16319 00000203 B007                    	mov	al,07h			; disable pc convertible nmis
 16320 00000205 E672                    	out	72h,al
 16321                                  
 16322                                  skip_nmis:
 16323 00000207 FA                      	cli				; disable and mask
 16324 00000208 B0FF                    	mov	al,0FFh			;   all other ints
 16325 0000020A E621                    	out	021h,al
 16326 0000020C E6A1                    	out	0A1h,al
 16327                                  
 16328 0000020E 8CCE                    	mov	si,cs
 16329 00000210 8EDE                    	mov	ds,si
 16330 00000212 BE[3902]                	mov	si,fatal_msg
 16331                                  ;SR;
 16332                                  ;   We set all foci to this VM to issue the stack failure message
 16333                                  ;
 16334 00000215 50                      	push	ax
 16335 00000216 1E                      	push	ds
 16336                                  	;;mov	ax,Bios_Data ; 0070h
 16337                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 16338                                  	; 21/10/2022
 16339 00000217 B87000                  	mov	ax,DOSBIODATASEG
 16340 0000021A 8ED8                    	mov	ds,ax
 16341                                  
 16342                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 16343 0000021C F606[CE08]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 16344 00000221 1F                      	pop	ds
 16345 00000222 58                      	pop	ax
 16346 00000223 7405                    	jz	short fatal_loop	; win386 not present, continue
 16347                                  
 16348                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 16349                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 16350                                  	; 21/10/2022
 16351 00000225 9A[CF08]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 16352                                  ;
 16353                                  ;SR; We do not bother about the returned status of this call. 
 16354                                  ;
 16355                                  fatal_loop:
 16356 0000022A AC                      	lodsb
 16357 0000022B 3C24                    	cmp	al,'$'
 16358 0000022D 7408                    	je	short fatal_done
 16359                                  
 16360 0000022F B307                    	mov	bl,7
 16361 00000231 B40E                    	mov	ah,14
 16362 00000233 CD10                    	int	10h			; whoops, this enables ints
 16363 00000235 EBF3                    	jmp	short fatal_loop
 16364                                  
 16365                                  fatal_done:
 16366 00000237 EBFE                    	jmp	short fatal_done
 16367                                  
 16368                                  
 16369                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 16370                                  ; ----------------------------------------------------------------------
 16371                                  ;	include msbio.cl5		; fatal stack error message
 16372                                  
 16373                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 16374                                  
 16375                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 16376                                  ; ----------------------------------------------------------------------
 16377                                  ; 04/06/2018 - Retro DOS v3.0
 16378                                  
 16379                                  fatal_msg:
 16380 00000239 0D0A                    	db	0Dh,0Ah
 16381 0000023B 070D0A                  	db	7,0Dh,0Ah
 16382 0000023E 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 16382 00000247 737461636B206F7665-
 16382 00000250 72666C6F770D0A     
 16383 00000257 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 16383 00000260 6C7465640D0A24     
 16384                                  
 16385                                  endstackcode:
 16386                                  
 16387                                  ; ----------------------------------------------------------------------
 16388                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 16389                                  ; ----------------------------------------------------------------------
 16390                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 16391                                  
 16392                                  ; 22/03/2019 - Retro DOS v4.0
 16393                                  
 16394                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 16395                                  
 16396                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 16397                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 16398                                  
 16399                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16400                                  ; ----------------------------------------------------------------------
 16401                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 16402                                  
 16403                                  SYSINIT:	
 16404 00000267 E9A001                          JMP	GOINIT
 16405                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 16406                                  
 16407                                  ; ----------------------------------------------------------------------
 16408                                  
 16409                                  struc DDHighInfo
 16410 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 16411 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 16412 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 16413                                  endstruc
 16414                                  
 16415                                  ; 22/03/2019 - Retro DOS v4.0
 16416                                  
 16417 0000026A 00                      runhigh: db	0
 16418                                  
 16419                                  ; 02/11/2022
 16420                                  ;align 4
 16421                                  
 16422                                  DOSINFO: 
 16423 0000026B 00000000                	dd	0	; address of the DOS Sysini Variables
 16424                                  ;MSDOS:
 16425                                  dos_temp_location: ; dword ; MSDOS 6.0
 16426                                  dosinit:		; MSDOS 6.0
 16427 0000026F 0000                    	dw	0
 16428                                  
 16429                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16430                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 16431                                  ;	dw	0
 16432                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 16433                                  
 16434                                  CURRENT_DOS_LOCATION:
 16435 00000271 0000                    	dw	0
 16436                                  
 16437                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 16438                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 16439                                  
 16440                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16441                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 16442                                  DOSSIZE	equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 16443                                  
 16444                                  DEVICE_LIST:
 16445 00000273 00000000                	dd	0
 16446                                  
 16447                                  ; 04/06/2018 - Retro DOS v3.0
 16448                                  ; 28/03/2018
 16449                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 16450                                  ;
 16451                                  sysi_country:	
 16452 00000277 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 16453                                  
 16454                                  ; MSDOS 6.0
 16455 0000027B 00000000                dos_segreinit:	dw	0,0	; room for dword
 16456                                  
 16457 0000027F 0000                    lo_doscod_size:	dw	0	; dos code size when in low mem
 16458 00000281 0000                    hi_doscod_size:	dw	0	; dos code size when in HMA
 16459                                  
 16460 00000283 0000                    def_php:	dw	0
 16461                                  
 16462                                  ; M022--
 16463                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 16464                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 16465                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 16466                                  ;  the new home.
 16467                                  
 16468                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 16469                                  ; 21/10/2022
 16470                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 16471                                  
 16472                                  ; 22/10/2022
 16473                                  seg_reinit_ptr:	; label dword
 16474 00000285 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 16475                                  temp_bcode_seg:
 16476                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 16477                                  		; 22/10/2022
 16478 00000287 A102                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS 		
 16479                                  
 16480                                  fake_floppy_drv:
 16481 00000289 00                      		db	0	; set to 1 if this machine
 16482                                  				; does not have any floppies!!!
 16483                                  
 16484                                  ; Internal Stack Parameters
 16485                                  
 16486 0000028A 0900                    stack_count:	dW	defaultcount ; 9
 16487 0000028C 8000                    stack_size:	dw	defaultsize  ; 128
 16488 0000028E 00000000                stack_addr:	dd	0	
 16489                                  
 16490                                  ; 05/06/2018 - Retro DOS v3.0
 16491                                  
 16492                                  ; various default values
 16493                                  
 16494 00000292 0100                    MEMORY_SIZE:	dw	1
 16495                                  
 16496                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 16497                                  
 16498 00000294 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)	
 16499 00000296 00                      DEFAULT_DRIVE:	db	0	;initialized by ibminit.
 16500 00000297 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 16501 00000299 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 16502 0000029B 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 16503                                  
 16504 0000029D 08                      FILES:	db	8	; enough files for pipe
 16505 0000029E 04                      FCBS:	db	4	; performance for recycling
 16506 0000029F 00                      KEEP:	db	0	; keep original set
 16507 000002A0 05                      NUM_CDS: db	5	; 5 net drives
 16508                                  
 16509                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 16510                                  ;;CONFBOT: dw	0
 16511                                  ;;ALLOCLIM: dw	0
 16512                                  ;CONFBOT: ; 02/11/2022
 16513                                  ;top_of_cdss: dw 0
 16514                                  
 16515                                  ; 30/12/2022 - Retrodos v4.2 (MSDOS 6.21 SYSINIT)
 16516                                  ; (SYSINITSEG:02A3h)
 16517 000002A1 0000                    CONFBOT: dw	0
 16518 000002A3 0000                    ALLOCLIM: dw	0
 16519 000002A5 0000                    top_of_cdss: dw 0
 16520                                  
 16521                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 16522                                  ; 30/12/2022 (MSDOS 6.21 SYSINIT)
 16523                                  ;ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 16524                                  
 16525 000002A7 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 16526                                  
 16527                                  ; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 SYSINIT)
 16528                                  %if 0
 16529                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16530                                  ; (SYSINIT:02A9h)
 16531                                  
 16532                                  command_line:
 16533                                  	db	2,0
 16534                                  	db	'P'
 16535                                  	db	0
 16536                                  	times	124 db 0 ; db 124 dup(0)
 16537                                  
 16538                                  %endif
 16539                                  
 16540                                  	
 16541                                  ; (SYSINIT:0329h)
 16542 000002AB 00                      ZERO:	db	0
 16543 000002AC 00                      sepchr:	db	0
 16544 000002AD 0000                    linecount: dw	0			; line count in config.sys
 16545 000002AF 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 16546 000002B7 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 16547                                  
 16548 000002B9 FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 16549 000002BA 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 16550                                  
 16551 000002BB 0000                    buf_prev_off:	dw	0
 16552                                  
 16553                                          ;IF      NOT NOEXEC
 16554                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 16555                                          ;ENDIF
 16556                                  
 16557                                  ; 01/05/2018
 16558                                  COMEXE:
 16559 000002BD 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 16560 000002BF [9147]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 16561 000002C1 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16562 000002C3 [9602]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 16563 000002C5 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16564 000002C7 [AB02]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 16565 000002C9 0000                    		dw	0
 16566                                  
 16567                                  ; variables for install= command.
 16568                                  
 16569 000002CB 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 16570                                  					;  indicating the pass number
 16571                                  					; 0 - do scan for DOS=HIGH/LOW
 16572                                  					; 1 - load device drivers
 16573                                  					; 2 - was to load IFS
 16574                                  					;      now it is unused
 16575                                  					; 3 - do install=
 16576                                  					; >3 - nop
 16577 000002CC 0000                    install_flag:	dw	0
 16578                                  
 16579                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 16580                                  has_installed	equ	00000010b	; sysinit_base installed.
 16581                                  
 16582 000002CE 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 16583 000002D0 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 16584 000002D4 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 16585 000002D8 0000                    checksum:	dw	0		; used by sum_up
 16586                                  
 16587 000002DA 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 16588 000002EE 00                      ldexec_line:	db	0		;# of parm characters
 16589 000002EF 20                      ldexec_start:	db	' '
 16590 000002F0 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 16591                                  
 16592                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 16593                                  
 16594                                  instexe:
 16595 00000340 0000                    iexec.environ:	dw	0		; seg addr of environment
 16596 00000342 [EE02]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 16597 00000344 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16598 00000346 [DA02]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 16599 00000348 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16600 0000034A [DA02]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 16601 0000034C 0000                    		dw	0
 16602                                  
 16603                                  ; variables for comment=
 16604                                  
 16605 0000034E 00                      com_level:	db	0		; level of " " in command line
 16606 0000034F 00                      cmmt:		db	0		; length of comment string token
 16607 00000350 00                      cmmt1:		db	0		; token
 16608 00000351 00                      cmmt2:		db	0		; token
 16609 00000352 00                      cmd_indicator:	db	0
 16610 00000353 00                      donotshownum:	db	0
 16611                                  
 16612 00000354 0000                    count:		dw	0
 16613 00000356 0000                    org_count:	dw	0
 16614 00000358 0000                    chrptr:		dw	0
 16615 0000035A 0000                    cntryfilehandle: dw	0
 16616 0000035C 0000                    old_area:	dw	0
 16617 0000035E 0000                    impossible_owner_size: dw 0		; paragraph
 16618                                  
 16619                                  bucketptr: ; label dword
 16620                                  bufptr:	   ; label dword		; leave this stuff in order!
 16621 00000360 0000                    memlo:	dw	0
 16622                                  prmblk:	   ; label word
 16623 00000362 0000                    memhi:	dw	0
 16624 00000364 0000                    ldoff:	dw	0
 16625 00000366 0000                    area:	dw	0
 16626                                  
 16627                                  ; Following is the request packet used to call INIT routines for 
 16628                                  ; all device drivers. Some fields may be accessed individually in
 16629                                  ; the code, and hence have individual labels, but they should not
 16630                                  ; be separated.
 16631                                  
 16632 00000368 18                      packet:	db	24			; was 22
 16633 00000369 00                      	db	0
 16634 0000036A 00                      	db	0			; initialize code
 16635 0000036B 0000                    	dw	0
 16636 0000036D 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 16637                                  
 16638 00000375 00                      unitcount:	db	0
 16639 00000376 00000000                break_addr:	dd	0
 16640 0000037A 00000000                bpb_addr:	dd	0
 16641                                  drivenumber:	; 22/10/2022
 16642 0000037E 00                      devdrivenum:	db	0 
 16643 0000037F 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 16644                                  
 16645                                  ; end of request packet
 16646                                  
 16647                                  ;drivenumber:	db	0  ; 22/03/2019
 16648                                  
 16649                                  toomanydrivesflag:
 16650 00000381 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 16651                                  align 2
 16652                                  
 16653                                  BCodeSeg:	; 21/10/2022
 16654 00000382 A102                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 16655                                  	;dw	Bios_Code  ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 16656                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 16657                                  
 16658                                  ; 30/12/2022
 16659                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0387h
 16660                                  ;
 16661                                  ; Magicbackdoor: dd 0
 16662                                  ; NullBackdoor: 
 16663                                  ;		retf
 16664                                  
 16665                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16666                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 16667                                  ; 19/04/2019
 16668                                  _timer_lw_:
 16669 00000384 0000                    	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 16670                                  
 16671                                  ;SR;
 16672                                  ; This is the communication block between the DOS and the BIOS. It starts at
 16673                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 16674                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 16675                                  ;is passed to DOS as part of the DOSINIT call.
 16676                                  ;
 16677                                  
 16678                                  BiosComBlock:
 16679                                  	;dd	Bios_Data:SysinitPresent 
 16680                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 16681 00000386 [FB08]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 16682                                  	;dw	KERNEL_SEGMENT ; 0070h
 16683                                  	; 21/10/2022
 16684 00000388 7000                    	dw	DOSBIODATASEG ; 0070h
 16685                                  
 16686                                  ;align 2
 16687                                  
 16688                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 16689                                  	; 30/12/2022 - (MSDOS 6.21 IO.SYS, SYSINIT:0392h)
 16690                                  tempstack:	
 16691 0000038A 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 16692                                  
 16693                                  ; ----------------------------------------------------------------------------
 16694                                  
 16695                                  	; 22/10/2022 - Retro DOS v4.0
 16696                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 16697                                  GOINIT:		; (MSDOS 6.21 IO.SYS, SYSINIT:0412h)
 16698                                  	; 12/12/2022
 16699                                  	; 22/03/2019 - Retro DOS v4.0
 16700                                  	; 06/07/2018
 16701                                  	; 04/06/2018 - Retro DOS v3.0
 16702                                  ; before doing anything else, let's set the model byte
 16703 0000040A B4C0                    	mov	ah,0C0h 		; get system configuration
 16704 0000040C CD15                    	int	15h			; *
 16705 0000040E 7217                    	jc	short no_rom_config
 16706                                  
 16707 00000410 80FC00                  	cmp	ah,0			; double check
 16708 00000413 7512                    	jne	short no_rom_config
 16709 00000415 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 16710 00000419 2EA2[B902]              	mov	[cs:sys_model_byte],al 
 16711 0000041D 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 16712 00000421 2EA2[BA02]              	mov	[cs:sys_scnd_model_byte],al
 16713                                  	;jmp	short SYSIN
 16714                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16715 00000425 EB2D                    	jmp	short move_myself
 16716                                  
 16717                                  no_rom_config:				; Old ROM
 16718 00000427 B800F0                  	mov	ax,0F000h
 16719 0000042A 8ED8                    	mov	ds,ax
 16720 0000042C A0FEFF                  	mov	al,[0FFFEh]
 16721 0000042F 2EA2[B902]              	mov	[cs:sys_model_byte],al	; set the model byte.
 16722                                  
 16723                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 16724                                  ; execute the equipment determination interrupt and then
 16725                                  ; check the returned value to see if we have any floppy drives
 16726                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 16727                                  ; see the at tech ref bios listings for help on the equipment
 16728                                  ; flag interrupt (11h)	
 16729                                  
 16730                                  	; 22/10/2022
 16731                                  check_for_fake_floppy:			; entry point for rom_config above
 16732 00000433 CD11                    	int	11h			; check equipment flag
 16733                                  
 16734                                  	; 12/12/2022
 16735 00000435 A801                    	test	al,1		
 16736                                  	;test	ax,1			; have any floppies?
 16737 00000437 751B                    	jnz	short move_myself	; yes,normal system
 16738                                  
 16739                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 16740                                  ; whether it is an old ROM BIOS or a new one
 16741                                  ;
 16742                                  ; WARNING !!!
 16743                                  ;
 16744                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 16745                                  ; here will require an equivalent modification in MSINIT.ASM also
 16746                                  
 16747 00000439 06                      	push	es
 16748                                  
 16749 0000043A 30C9                    	xor	cl,cl	
 16750 0000043C B408                    	mov	ah,8			; get disk parameters
 16751 0000043E B200                    	mov	dl,0			; of drive 0
 16752 00000440 CD13                    	int	13h
 16753                                  
 16754 00000442 07                      	pop	es
 16755                                  
 16756 00000443 720F                    	jc	short move_myself	; if error lets assume that the
 16757                                  					;  ROM BIOS lied
 16758 00000445 80F900                  	cmp	cl,0			; double check (max sec no cannot be 0)
 16759 00000448 740A                    	je	short move_myself
 16760                                  
 16761 0000044A 08D2                    	or	dl,dl			; number of flp drvs == 0?
 16762 0000044C 7506                    	jnz	short move_myself
 16763                                  
 16764 0000044E 2EC606[8902]01          	mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 16765                                  
 16766                                  move_myself:
 16767 00000454 FC                      	cld				; set up move
 16768 00000455 31F6                    	xor	si,si
 16769 00000457 89F7                    	mov	di,si
 16770                                  
 16771                                  	; 12/12/2022
 16772 00000459 0E                      	push	cs
 16773 0000045A 1F                      	pop	ds
 16774                                  
 16775                                  	;mov	cx,[cs:MEMORY_SIZE]
 16776 0000045B 8B0E[9202]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 16777                                  
 16778                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 16779                                  ;;;	if	msver
 16780                                  ;	cmp	cx,1		; 1 means do scan
 16781                                  ;	jnz	short noscan
 16782                                  ;	mov	cx,2048		; start scanning at 32k boundary
 16783                                  ;	xor	bx,bx
 16784                                  ;
 16785                                  ;memscan:inc	cx
 16786                                  ;	jz	setend
 16787                                  ;	mov	ds,cx
 16788                                  ;	mov	al,[bx]
 16789                                  ;	not	al
 16790                                  ;	mov	[bx],al
 16791                                  ;	cmp	al,[bx]
 16792                                  ;	not	al
 16793                                  ;	mov	[bx],al
 16794                                  ;	jz	short memscan
 16795                                  ;setend:
 16796                                  ;	mov	cs:[memory_size],cx
 16797                                  ;;;	endif
 16798                                  
 16799                                  ;noscan: 				; cx is mem size in para
 16800                                  ;;
 16801                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 16802                                  ;;		  before we try to run.
 16803                                  ;;	       b) in any case, we should check for sufficient memory and give
 16804                                  ;;		  an appropriate error diagnostic if there isn't enough
 16805                                  ;
 16806                                  ;	push	cs
 16807                                  ;	pop	ds
 16808                                  ;
 16809                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 16810                                  ;;	  that way it would be easier to slide them down home in a minimal
 16811                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 16812                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 16813                                  ;;	  temporary home and the final one.  the problem with doing that
 16814                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 16815                                  ;
 16816                                  ;	dec	cx			; one para for an arena at end of mem
 16817                                  ;					; in case of UMBs
 16818                                  
 16819                                  	; 22/10/2022
 16820                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 16821                                  
 16822                                  	; 12/12/2022
 16823                                  	;push	cs
 16824                                  	;pop	ds
 16825                                  
 16826 0000045F 49                      	dec	cx
 16827                                  
 16828                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 16829                                  
 16830 00000460 31DB                    	xor	bx,bx
 16831 00000462 8EC3                    	mov	es,bx
 16832 00000464 268B1EBC00              	mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 16833 00000469 268E06BE00              	mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 16834 0000046E 26817F035250            	cmp	word [es:bx+3],'RP'
 16835 00000474 751B                    	jne	short NoRPL
 16836 00000476 26807F054C              	cmp	byte [es:bx+5],'L'
 16837 0000047B 7514                    	jne	short NoRPL
 16838                                  
 16839 0000047D 89CA                    	mov	dx,cx			; get TOM into DX
 16840 0000047F 52                      	push	dx
 16841 00000480 B8064A                  	mov	ax,4A06h
 16842                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 16843 00000483 CD2F                    	int	2Fh			; Get new TOM from any RPL
 16844 00000485 58                      	pop	ax
 16845 00000486 89D1                    	mov	cx,dx
 16846 00000488 39C2                    	cmp	dx,ax
 16847 0000048A 7405                    	je	short NoRPL
 16848                                  	
 16849                                  	; 11/12/2022
 16850                                  	; ds = cs
 16851 0000048C 8916[9402]              	mov	[RPLMemTop],dx
 16852                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16853                                  	;mov	[cs:RPLMemTop],dx
 16854                                  	
 16855 00000490 49                      	dec	cx
 16856                                  NoRPL:
 16857 00000491 B8[D04E]                	mov	ax,SI_end		; need this much room for sysinit
 16858                                  					; (SI_end == sysinit code size)
 16859 00000494 E8CC07                  	call	off_to_para
 16860 00000497 29C1                    	sub	cx,ax
 16861                                  
 16862                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 16863                                  ; code above sysinit in memory
 16864                                  ;
 16865 00000499 81E9000A                	sub	cx,DOSSIZE/16 ; (0A00h)	; leave this much room for DOS
 16866                                  
 16867 0000049D B8001A                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 16868                                  					; (1A70h for MSDOS 6.21 IO.SYS
 16869 000004A0 E8C007                  	call	off_to_para		; leave this much room for BIOS code
 16870 000004A3 29C1                    	sub	cx,ax
 16871 000004A5 8EC1                    	mov	es,cx			; offset where sysinit will be located
 16872                                  
 16873 000004A7 B9[D04E]                	mov	cx,SI_end		; (sysinit code size)
 16874 000004AA D1E9                    	shr	cx,1			; divide by 2 to get words
 16875 000004AC F3A5                    	rep	movsw			; relocate sysinit
 16876                                  
 16877 000004AE 06                      	push	es			; push relocated segment
 16878 000004AF B8[B404]                	mov	ax,SYSIN
 16879 000004B2 50                      	push	ax			; push relocated entry point
 16880                                  
 16881 000004B3 CB                      	retf				; far jump to relocated sysinit
 16882                                  
 16883                                  ; ----------------------------------------------------------------------------
 16884                                  
 16885                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 16886                                  
 16887                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 16888                                  	; (SYSINIT:0533h)
 16889                                  	; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 16890                                  	; (SYSINIT:04BFh)	
 16891                                  SYSIN:
 16892                                  	; Retro DOS 4.0 - 22/03/2019
 16893                                  	; Retro DOS 2.0 - 25/02/2018
 16894                                  
 16895                                  	; 23/04/2019
 16896                                  	;;mov	ax,Bios_Data
 16897                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 16898                                  	; 21/10/2022
 16899 000004B4 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 16900 000004B7 8ED8                    	mov	ds,ax
 16901 000004B9 8C0E[F908]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 16902 000004BD C606[FB08]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 16903                                  
 16904                                  ; first move the MSDOS.SYS image up to a harmless place 
 16905                                  ; on top of our new sysinitseg
 16906                                  
 16907                                  	; 22/10/2022
 16908 000004C2 B8[D04E]                	mov	ax,SI_end		; how big is sysinitseg?
 16909 000004C5 E89B07                  	call	off_to_para
 16910 000004C8 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 16911 000004CA 01C8                    	add	ax,cx
 16912 000004CC 8EC0                    	mov	es,ax
 16913                                  	
 16914 000004CE 31F6                    	xor	si,si
 16915 000004D0 89F7                    	mov	di,si
 16916                                  
 16917 000004D2 2E8E1E[7102]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 16918                                  
 16919                                  	;mov	ax,cs	
 16920                                  	;mov	ds,ax
 16921                                  
 16922                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 16923                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 16924                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 16925                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 16926                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 16927                                  
 16928                                  	; 22/10/2022
 16929 000004D7 B90050                  	mov	cx,DOSSIZE/2 ; 5000h
 16930 000004DA F3A5                    	rep     movsw
 16931 000004DC 2E8C06[7102]            	mov	[cs:CURRENT_DOS_LOCATION],es
 16932                                  
 16933                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 16934                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 16935                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 16936                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 16937                                  
 16938                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 16939                                  	;mov	ax,cs
 16940                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 16941                                  	;mov	ds,ax
 16942                                  
 16943                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 16944                                  
 16945                                  ;	; 24/04/2019 
 16946                                  ;;ifndef ROMDOS
 16947                                  ;	mov	ax,[es:3] 		; get offset of dos
 16948                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 16949                                  ;	mov	[dosinit],ax		; that's the entry point offset
 16950                                  ;	call	off_to_para		; subtract this much from segment
 16951                                  ;	; 23/04/2019
 16952                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 16953                                  ;	sub	[FINAL_DOS_LOCATION],ax
 16954                                  ;;else
 16955                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 16956                                  ;;
 16957                                  ;;endif ; ROMDOS
 16958                                  
 16959                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 16960                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 16961                                  
 16962                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 16963                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 16964                                  
 16965                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 16966                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 16967 000004E1 A10300                  	mov	ax, [3]		; mov ax, word ptr ds:3
 16968                                  
 16969 000004E4 2EA3[6F02]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 16970                                  	; 02/11/2022
 16971 000004E8 E87807                  	call	off_to_para		; subtract this much from segment
 16972 000004EB 2E2906[7102]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 16973                                  
 16974                                  	; Current DOSCODE start address = dword [dosinit]
 16975                                  
 16976                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 16977                                  ;; until it is determined whether it will be running in HIMEM or not.
 16978                                  
 16979                                  ;ifndef ROMDOS
 16980                                  
 16981                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 16982                                  
 16983                                  	; 22/10/2022
 16984 000004F0 8CC0                    	mov	ax,es
 16985 000004F2 05000A                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 16986 000004F5 8EC0                    	mov	es,ax
 16987 000004F7 2E8706[8702]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 16988 000004FC 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 16989                                  
 16990                                  	;mov	si,BCODE_START ; mov si,30h
 16991                                  	; 09/12/2022
 16992 000004FE BE[3000]                	mov	si,BCODESTART
 16993                                  	; 02/11/2022
 16994 00000501 89F7                    	mov	di,si
 16995 00000503 B9001A                  	mov	cx,BCODE_END   ; mov cx,1A60h ; mov cx,1A70h ; 30/12/2022
 16996 00000506 29F1                    	sub	cx,si
 16997 00000508 D1E9                    	shr	cx,1
 16998 0000050A F3A5                    	rep	movsw			; move Bios_Code into place
 16999                                  
 17000 0000050C 8CC0                    	mov	ax,es			; tell it what segment it's in
 17001 0000050E 2EFF1E[8502]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 17002                                  
 17003                                  ;endif	; not ROMDOS
 17004                                  
 17005                                  ; now call dosinit while it's in its temporary home
 17006                                  
 17007                                  	;mov	ax,cs
 17008                                  	;mov	ds,ax	 
 17009                                  
 17010                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 17011                                  
 17012                                  	; 22/10/2022
 17013                                  
 17014 00000513 2EC43E[8603]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 17015                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 17016 00000518 2EC536[7302]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 17017                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 17018                                  
 17019 0000051D 2E8B16[9202]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 17020                                  
 17021 00000522 FA                      	cli
 17022 00000523 8CC8                    	mov	ax,cs
 17023 00000525 8ED0                    	mov	ss,ax
 17024                                  
 17025                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 17026                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 17027                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 17028                                  ;SYSINIT:0532h: 
 17029                                  
 17030                                  ; 22/10/2022
 17031                                  ; ----------------------------------------------------------------------------
 17032                                  ;SYSINIT:05A6h:
 17033                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 17034                                  
 17035                                  	;mov	sp, 05A6h
 17036 00000527 BC2605                  	mov     sp,locstack		; set stack
 17037                                  
 17038 0000052A FB                      	sti
 17039                                  
 17040                                  ;align 2
 17041                                  	; 30/03/2018
 17042                                  ;LOCSTACK:
 17043                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 17044                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 17045                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 17046                                  
 17047                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17048                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 17049                                  
 17050                                  ; This call to DOSINIT will relocate the DOS data from its present location
 17051                                  ; at the top of memory, to its final location in low memory just above the
 17052                                  ; BIOS data. It will then build important DOS data structures in low 
 17053                                  ; memory following the DOS data. It returns (among many other things) the
 17054                                  ; new starting address of free memory.
 17055                                  
 17056 0000052B 2EFF1E[6F02]            	call	far [cs:dosinit]	; call dosinit	
 17057                                  			 ; es:di -> sysinitvars_ext
 17058                                  
 17059 00000530 2E8C1E[8302]            	mov	[cs:def_php],ds		; save pointer to PSP
 17060                                  	
 17061                                  	; 11/12/2022
 17062                                  	; 22/03/2019
 17063 00000535 0E                      	push	cs
 17064 00000536 1F                      	pop	ds
 17065                                  	; 22/10/2022
 17066 00000537 A3[8102]                	mov	[hi_doscod_size],ax
 17067 0000053A 890E[7F02]              	mov	[lo_doscod_size],cx
 17068 0000053E 8916[7B02]              	mov	[dos_segreinit],dx
 17069                                  	
 17070                                  	; 11/12/2022
 17071                                  	; ds = cs
 17072                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 17073                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 17074                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 17075                                  
 17076                                  	; 05/06/2018 - Retro DOS v3.0
 17077                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 17078                                  
 17079                                  	; 11/12/2022
 17080                                  	; ds = cs
 17081                                  	; 22/10/2022
 17082                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 17083 00000542 268B05                  	mov	ax,[es:di] ; 22/03/2019
 17084                                  	;mov	[cs:DOSINFO],ax
 17085 00000545 A3[6B02]                	mov	[DOSINFO],ax
 17086                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 17087 00000548 268B4502                	mov	ax,[es:di+2]
 17088                                  	;mov	[cs:DOSINFO+2],ax
 17089 0000054C A3[6D02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 17090                                  
 17091                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 17092 0000054F 268B4504                	mov	ax,[es:di+4]
 17093                                  	;mov	[cs:sysi_country],ax
 17094 00000553 A3[7702]                	mov	[sysi_country],ax
 17095                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 17096 00000556 268B4506                	mov	ax,[es:di+6]
 17097                                  	;mov	[cs:sysi_country+2],ax
 17098 0000055A A3[7902]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 17099                                  
 17100                                  	; 20/04/2019
 17101                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 17102                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 17103                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 17104                                  	; 22/10/2022
 17105                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 17106                                  	;;;mov	[dos_segreinit+2],es
 17107                                  	;;mov	[dos_segreinit+2],ax
 17108                                  	;mov	[cs:dos_segreinit+2],ax
 17109                                  	; 11/12/2022
 17110                                  	; ds = cs
 17111 0000055D 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17112 00000561 8C06[7D02]              	mov	[dos_segreinit+2],es
 17113                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17114                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 17115                                  	;mov	[cs:dos_segreinit+2],es
 17116                                  
 17117                                  ; ----------------------------------------------------------------------------
 17118                                  
 17119                                  ;SYSINIT:0577h:
 17120                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 17121                                  ;SYSINIT:05D1h:	; NoRPLArena 
 17122                                  
 17123                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 17124                                  ;------ Cover up RPL code with an arena
 17125                                  ;SYSINIT:05EBh:
 17126                                  	; 11/12/2022
 17127                                  	; ds = cs
 17128 00000565 31DB                    	xor	bx,bx
 17129 00000567 391E[9402]              	cmp	[RPLMemTop],bx ; 0
 17130                                  	;cmp	word [RPLMemTop],0
 17131                                  	;;cmp	word [cs:RPLMemTop],0
 17132 0000056B 7450                    	je	short NoRPLArena
 17133                                  
 17134                                  ;------ alloc all memory
 17135                                  
 17136                                  	; 11/12/2022
 17137                                  	;mov	bx,0FFFFh
 17138 0000056D 4B                      	dec	bx
 17139                                  	; bx = 0FFFFh
 17140 0000056E B448                    	mov	ah,48h
 17141 00000570 CD21                    	int	21h
 17142                                  			; DOS - 2+ - ALLOCATE MEMORY
 17143                                  			; BX = number of 16-byte paragraphs desired
 17144 00000572 B448                    	mov	ah,48h
 17145 00000574 CD21                    	int	21h
 17146                                  
 17147 00000576 8EC0                    	mov	es,ax			; get it into ES and save it
 17148 00000578 06                      	push	es
 17149                                  
 17150                                  ;------ resize upto RPL mem
 17151                                  
 17152                                  	; 11/12/2022
 17153                                  	; ds = cs
 17154                                  	;sub	ax,[cs:RPLMemTop]
 17155 00000579 2B06[9402]              	sub	ax,[RPLMemTop]
 17156 0000057D F7D8                    	neg	ax
 17157 0000057F 48                      	dec	ax
 17158 00000580 89C3                    	mov	bx,ax
 17159 00000582 B44A                    	mov	ah,4Ah
 17160 00000584 CD21                    	int	21h
 17161                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 17162                                  			; ES = segment address of block to change
 17163                                  			; BX = new size in paragraphs
 17164                                  
 17165                                  ;------ allocate the free (RPL MEM)
 17166                                  
 17167 00000586 BBFFFF                  	mov	bx,0FFFFh
 17168 00000589 B448                    	mov	ah,48h
 17169 0000058B CD21                    	int	21h
 17170 0000058D B448                    	mov	ah,48h
 17171 0000058F CD21                    	int	21h
 17172                                  
 17173                                  ;----- mark that it belongs to RPL
 17174                                  
 17175 00000591 48                      	dec	ax
 17176 00000592 8EC0                    	mov	es,ax
 17177                                  	;mov	word [es:arena_owner],8
 17178 00000594 26C70601000800          	mov	word [es:1],8
 17179                                  	;mov	word [es:arena_name],'RP'
 17180 0000059B 26C70608005250          	mov	word [es:8],'RP'
 17181                                  	;mov	word [es:arena_name+2],'L'
 17182 000005A2 26C7060A004C00          	mov	word [es:10],'L'
 17183                                  	;mov	word [es:arena_name+4],0
 17184 000005A9 26C7060C000000          	mov	word [es:12],0
 17185                                  	;mov	word [es:arena_name+6],0
 17186 000005B0 26C7060E000000          	mov	word [es:14],0	
 17187                                  
 17188 000005B7 07                              pop     es                      ; get back ptr to first block
 17189 000005B8 B449                            mov     ah,49h	; Dealloc	; and free it
 17190 000005BA CD21                    	int	21h		
 17191                                  					; DOS - 2+ - FREE MEMORY
 17192                                  					; ES = segment address of area to be freed
 17193                                  	; 11/12/2022
 17194 000005BC F8                      	clc
 17195                                  
 17196                                  ; ----------------------------------------------------------------------------
 17197                                  
 17198                                  NoRPLArena:
 17199                                  	; 11/12/2022
 17200                                  	; ds = cs
 17201                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 17202 000005BD C43E[6B02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 17203                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17204                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 17205                                  
 17206                                  	; 11/12/2022
 17207                                  	;clc				; get the extended memory size
 17208                                  
 17209                                  ;	execute the get extended memory size subfunction in the bios int 15h
 17210                                  ;	if the function reports an error do nothing else store the extended
 17211                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 17212                                  ;	currently pointed to by es:di. use the offsets specified in the
 17213                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 17214                                  
 17215 000005C1 B488                    	mov	ah,88h
 17216 000005C3 CD15                    	int	15h			; check extended memory size
 17217 000005C5 720B                    	jc	short no_ext_memory
 17218                                  			; Get Extended Memory Size
 17219                                  			; Return: CF clear on success
 17220                                  			; AX = size of memory above 1M in K	
 17221                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 17222                                  	; 22/10/2022
 17223 000005C7 26894545                	mov	[es:di+45h],ax ; save extended memory size
 17224 000005CB 09C0                    	or	ax,ax
 17225 000005CD 7403                    	jz	short no_ext_memory
 17226 000005CF E80706                  	call	ClrVDISKHeader
 17227                                  no_ext_memory:
 17228                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 17229 000005D2 268B4510                	mov	ax,[es:di+10h]
 17230                                  	;add	ax,bufinsiz
 17231 000005D6 83C014                  	add	ax,20			; size of buffer header
 17232                                  	; 11/12/2022
 17233                                  	; ds = cs
 17234 000005D9 A3[9B02]                	mov	[singlebuffersize],ax	; total size for a buffer
 17235                                  	;mov	[cs:singlebuffersize],ax	
 17236                                  	; 11/12/2022
 17237 000005DC A0[9602]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 17238                                  	;mov	al,[cs:DEFAULT_DRIVE]
 17239                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 17240 000005DF 26884543                	mov	[es:di+43h],al
 17241                                  
 17242                                  ; determine if 386 system...
 17243                                  
 17244                                  	;get_cpu_type			; macro to determine cpu type
 17245                                  
 17246                                  get_cpu_type:
 17247                                  	; 11/12/2022
 17248 000005E3 9C                      	pushf
 17249                                  	;push	bx
 17250                                  	;xor	bx,bx
 17251                                  	; 11/12/2022
 17252                                  	;xor	cx,cx
 17253                                  	;
 17254 000005E4 31C0                    	xor	ax,ax
 17255                                  	; ax = 0
 17256 000005E6 50                      	push    ax
 17257 000005E7 9D                      	popf
 17258 000005E8 9C                      	pushf
 17259 000005E9 58                      	pop	ax
 17260 000005EA 2500F0                  	and	ax,0F000h
 17261                                  	;cmp	ax,0F000h
 17262 000005ED 80FCF0                  	cmp	ah,0F0h 
 17263 000005F0 7410                    	je	short cpu_8086
 17264                                  	;mov	ax,0F000h
 17265 000005F2 B4F0                    	mov	ah,0F0h
 17266                                  	; ax = 0F000h
 17267 000005F4 50                      	push	ax
 17268 000005F5 9D                      	popf
 17269 000005F6 9C                      	pushf
 17270 000005F7 58                      	pop	ax
 17271                                  	;and	ax,0F000h
 17272 000005F8 80E4F0                  	and	ah,0F0h
 17273 000005FB 7405                    	jz	short cpu_286
 17274                                  cpu_386:
 17275                                  	; 11/12/2022
 17276                                  	;;inc	bx
 17277                                  	;inc	cx
 17278                                  	; 11/12/2022
 17279                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 17280 000005FD 26C6454401              	mov	byte [es:di+44h],1
 17281                                  cpu_286:
 17282                                  	;;;inc	bx
 17283                                  	;;inc	cx
 17284                                  cpu_8086:
 17285                                  	; 11/12/2022
 17286                                  	;;mov	ax,bx	
 17287                                  	;pop	bx
 17288 00000602 9D                      	popf
 17289                                  
 17290                                  	;...
 17291                                  
 17292                                  	; 11/12/2022
 17293                                  	;or	cl,cl
 17294                                  	;jz	short not_386_system
 17295                                  	; 11/12/202
 17296                                  	;cmp	cl,2
 17297                                  	;;cmp	ax,2			; is it a 386?
 17298                                  	;jne	short not_386_system	; no: don't mess with flag
 17299                                  	;;mov	byte [es:di+SYSI_DWMOVE],1
 17300                                  	; 11/12/2022
 17301                                  	; 22/10/2022
 17302                                  	;mov	byte [es:di+44h],1
 17303                                  not_386_system:
 17304                                  	;mov	al,[es:di+SYSI_NUMIO]
 17305 00000603 268A4520                	mov	al,[es:di+20h]
 17306                                  	; 11/12/2022
 17307                                  	; ds = cs
 17308 00000607 A2[7E03]                	mov	[drivenumber],al	; save start of installable block drvs
 17309                                  	;mov	[cs:drivenumber],al
 17310                                  
 17311 0000060A 8CC8                    	mov	ax,cs
 17312 0000060C 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 17313                                  	; 11/12/2022
 17314                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 17315                                  	;;mov	cx,[cs:singlebuffersize]
 17316                                  	;shr	cx,1			
 17317                                  	;shr	cx,1			; divide size by 16...
 17318                                  	;shr	cx,1
 17319                                  	;shr	cx,1			; ...to get paragraphs...
 17320                                  	;inc	cx			; ... and round up
 17321                                  	; 11/12/2022
 17322 0000060F 8B1E[9B02]              	mov	bx,[singlebuffersize]
 17323 00000613 B104                    	mov	cl,4
 17324 00000615 D3EB                    	shr	bx,cl
 17325 00000617 43                      	inc	bx
 17326                                  
 17327                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 17328                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 17329                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 17330                                  ;	  it is probably safe to assume that the sector size always will be.
 17331                                  ;
 17332                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 17333                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 17334                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 17335                                  ;	  other code from ever causing a problem???
 17336                                  
 17337                                  	; 11/12/2022
 17338 00000618 29D8                    	sub	ax,bx
 17339                                  	;sub	ax,cx
 17340 0000061A A3[A502]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 17341                                  	; 22/10/2022
 17342                                  	;mov	[cs:top_of_cdss],ax
 17343                                  
 17344                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 17345                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 17346                                  ;	for allocating memory for MagicDrv.
 17347                                  
 17348 0000061D 06                      	push	es			; preserve pointer to dosinfo
 17349 0000061E 57                      	push	di
 17350                                  
 17351                                  	; 22/10/2022
 17352                                  ;	mov	cx,ax			; save pointer for buffer
 17353                                  ;
 17354                                  ;;	now allocate space for 26 CDSs
 17355                                  ;
 17356                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 17357                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 17358                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 17359                                  
 17360                                  	; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS)
 17361                                  	; (SYSINIT:064Ch)
 17362 0000061F 89C1                    	mov	cx,ax ; (*)
 17363 00000621 2D8F00                  	sub	ax,((26 *(curdirlen))+15)/16 ; sub ax,143
 17364 00000624 A3[A302]                	mov	[ALLOCLIM],ax		; init top of free memory pointer
 17365 00000627 A3[A102]                	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 17366                                  	 	
 17367                                  ; setup and initialize the temporary buffer at cx
 17368                                  
 17369                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 17370 0000062A 26C47D12                	les	di,[es:di+12h]
 17371                                  	; 11/12/2022
 17372 0000062E 31DB                    	xor	bx,bx
 17373                                  	;xor	ax,ax
 17374                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 17375                                  	;mov	word [es:di+4],0
 17376 00000630 26895D04                	mov	[es:di+4],bx ; 0
 17377                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 17378                                  	;mov	word [es:di],0
 17379 00000634 26891D                  	mov	[es:di],bx ; 0
 17380                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss] ; 6.21
 17381                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss] ; 5.0
 17382                                  	;mov	[es:di+2],ax
 17383                                  	;mov	es,ax	; [top_of_cdss] = [CONFBOT]
 17384                                  	; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS, SYSINIT)
 17385 00000637 26894D02                	mov	[es:di+2],cx ; [top_of_cdss] ; (*)	
 17386 0000063B 8EC1                    	mov	es,cx
 17387                                  
 17388                                  	; 11/12/2022
 17389                                  	;xor	ax,ax
 17390                                  	;mov	di,ax			; es:di -> single buffer
 17391 0000063D 89DF                    	mov	di,bx
 17392                                  	; di = 0
 17393                                  
 17394                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 17395                                  	; 11/12/2022
 17396                                  	;mov	[es:di],ax ; 0
 17397 0000063F 26891D                  	mov	[es:di],bx ; 0
 17398                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 17399                                  	; 11/12/2022
 17400                                  	;mov	[es:di+2],ax ; 0
 17401 00000642 26895D02                	mov	[es:di+2],bx ; 0 
 17402                                  
 17403                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 17404                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 17405                                  
 17406                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 17407 00000646 26C74504FF00            	mov	word [es:di+4],00FFh
 17408                                  ;SYSINIT:06E6h
 17409                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 17410                                  	;mov	word [es:di+6],0
 17411                                  	; 11/12/2022
 17412                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 17413 0000064C 26895D06                	mov	[es:di+6],bx ; 0
 17414                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 17415                                  	;mov	word [es:di+8],0
 17416                                  	; 11/12/2022
 17417                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 17418 00000650 26895D08                	mov	[es:di+8],bx ; 0
 17419                                  
 17420 00000654 5F                      	pop	di			; restore pointer to DOSINFO data
 17421 00000655 07                      	pop	es
 17422                                  
 17423                                  	; 11/12/2022
 17424                                  	; ds = cs
 17425                                  	; 22/10/2022
 17426                                  	;push	cs
 17427                                  	;pop	ds
 17428                                  
 17429 00000656 E81306                  	call	TempCDS			; set up cdss so re_init and sysinit
 17430                                  					;  can make disk system calls
 17431                                  					; tempcds trashes ds
 17432                                  	; 10/05/2019
 17433 00000659 2E8E1E[8302]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 17434                                  
 17435                                  	;if not ibmjapver
 17436                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 17437                                  	;endif
 17438                                  
 17439                                  	; 22/10/2022
 17440                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 17441                                  	; 30/12/2022
 17442                                  ;SYSINIT:0697h:	; (MSDOS 6.21 IO.SYS, SYSINIT)
 17443                                  	;call	far ptr 70h:89Bh
 17444 0000065E 9A[9908]7000            	call	DOSBIODATASEG:RE_INIT
 17445                                  
 17446 00000663 FB                      	sti				; ints ok
 17447 00000664 FC                      	cld				; make sure
 17448                                  
 17449                                  ; 23/03/2019
 17450                                  
 17451                                  ;SYSINIT:069Eh	; 30/12/2022
 17452                                  
 17453                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 17454                                  ; of the way by putting it just below sysinit at end of memory.
 17455                                  
 17456 00000665 8CCB                    	mov	bx,cs
 17457 00000667 83EB10                  	sub	bx,10h
 17458 0000066A 8EC3                    	mov	es,bx
 17459 0000066C 31F6                    	xor	si,si
 17460 0000066E 89F7                    	mov	di,si
 17461 00000670 B98000                  	mov	cx,128
 17462 00000673 F3A5                    	rep	movsw
 17463                                  
 17464                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 17465                                  	; 22/10/2022
 17466 00000675 268C063600              	mov	[es:36h],es
 17467                                  
 17468                                   	; Set Process Data Block - Program Segment Prefix address
 17469                                  	; BX = PDB/PSP segment
 17470 0000067A B450                            mov	ah,50h	; SET_CURRENT_PDB
 17471 0000067C CD21                    	int	21h			; tell DOS we moved it
 17472                                  			; DOS - 2+ internal - SET PSP SEGMENT
 17473                                  			; BX = segment address of new PSP
 17474                                  	; 22/10/2022
 17475                                  	; 27/03/2019
 17476 0000067E 1E                      	push	ds ; */			; preserve DS returned by DOSINIT
 17477                                  
 17478 0000067F 0E                      	push	cs	
 17479 00000680 1F                      	pop	ds
 17480                                  
 17481                                  	; set up temp. critical error handler
 17482 00000681 BA[4E46]                	mov	dx,int24		; set up int 24 handler
 17483                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 17484                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 17485 00000684 B82425                  	mov	ax,2524h
 17486 00000687 CD21                    	int	21h
 17487                                  
 17488 00000689 803E[8103]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 17489 0000068E 7405                            je      short no_err		   ;  N: continue            M029
 17490 00000690 BA[844E]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 17491                                          ; 22/10/2022
 17492                                  	;call	print 			   ;		             M029
 17493                                  	; 12/12/2022
 17494 00000693 EB03                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0                    
 17495                                  no_err:
 17496                                  	; 12/05/2019
 17497                                  	;----------------------------------------------
 17498                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 17499                                  	; 22/10/2022 - Retro DOS v4.0
 17500                                  	; 12/12/2022
 17501 00000695 BA[5246]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 17502                                  p_dosinit_msg:
 17503 00000698 E88E3F                  	call	print			; Print message
 17504                                  	;----------------------------------------------
 17505                                  	
 17506                                  	; 11/12/2022
 17507                                  	; 22/10/2022
 17508                                  	; 23/03/2019 - Retro DOS v4.0
 17509                                  	;pop	ds			; start of free memory
 17510                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 17511                                  	
 17512                                  	; 11/12/2022
 17513                                  	; 27/03/2019
 17514 0000069B 8A16[9602]              	mov	dl,[DEFAULT_DRIVE]	
 17515 0000069F 1F                      	pop	ds ; */
 17516                                  
 17517 000006A0 08D2                    	or	dl,dl
 17518                                  	;jz	short nodrvset		; bios didn't say
 17519 000006A2 7410                    	jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 17520                                  	;dec	dl			; A = 0
 17521                                  	; 18/12/2022
 17522 000006A4 4A                      	dec	dx
 17523 000006A5 B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 17524 000006A7 CD21                    	int	21h			; select the disk
 17525                                  			; DOS - SELECT DISK
 17526                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 17527                                  			; Return: AL = number of logical drives
 17528                                  nodrvset:
 17529                                  	; 04/01/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS SYINIT)
 17530                                  	; (SYSINIT:06DFh)
 17531                                  	;push	ds
 17532 000006A9 29C0                    	sub	ax,ax
 17533 000006AB 8ED8                    	mov	ds,ax ; 0 ; ROM BIOS Data Area
 17534 000006AD A16C04                  	mov	ax,[46Ch] ; timer tick count (18.2 ticks per second)
 17535 000006B0 2EA3[8403]              	mov	[cs:_timer_lw_],ax
 17536                                  	;pop	ds
 17537                                  	; ds <> cs
 17538                                  
 17539                                  	; ---------------------
 17540                                  
 17541                                  	;ifdef	dblspace_hooks
 17542                                  	;	....
 17543                                  	;	....
 17544                                  	;endif	
 17545                                  
 17546                                  	; ---------------------
 17547                                  
 17548                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 17549                                  
 17550                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 17551                                  ; ----------------------------------------------------------------------------
 17552                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17553                                  ; ----------------------------------------------------------------------------
 17554                                  ; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS SYSINIT)
 17555                                  
 17556                                  ProcessConfig:
 17557                                  	;; ds = cs ; 27/03/2019
 17558                                  	; 11/12/2022
 17559                                  	; ds <> cs	
 17560                                  
 17561                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 17562                                  
 17563 000006B4 E86A19                  	call	doconf			; do pre-scan for dos=high/low
 17564                                  
 17565                                  	; 11/12/2022
 17566                                  	; 27/03/2019
 17567                                  	; ds = cs (at return from doconf)
 17568                                  
 17569                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 17570                                  ; It will either be relocated to low memory, above the DOS data structures,
 17571                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 17572                                  ; code entry points will be located in low memory. Dos_segreinit is used
 17573                                  ; to tell the DOS data where the code has been placed, and to install the
 17574                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 17575                                  ; must first initialize it in its present location and load the installable
 17576                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 17577                                  ; relocate the DOS code into HiMem.
 17578                                  ;
 17579                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 17580                                  ; to install the low memory stub (this must be done before allowing any
 17581                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 17582                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 17583                                  ; been patched.
 17584                                  
 17585                                  	; 22/10/2022 - Retro DOS v4.0
 17586                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 17587                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 17588                                  	; 11/12/2022
 17589 000006B7 803E[6A02]00            	cmp	byte [runhigh],0
 17590 000006BC 740C                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 17591                                  
 17592                                  ;------ user chose to load high
 17593                                  
 17594                                  	; 22/10/2022
 17595                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 17596                                  	; 11/12/2022
 17597                                  	; ds = cs
 17598 000006BE 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17599                                  
 17600                                  	;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 17601                                  	; 27/03/2019
 17602                                  	;;mov	es,[FINAL_DOS_LOCATION]
 17603                                  
 17604 000006C2 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 17605                                  	; 11/12/2022
 17606                                  	; ds = cs
 17607                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 17608 000006C4 FF1E[7B02]              	call	far [dos_segreinit]
 17609                                  
 17610 000006C8 EB10                    	jmp	short do_multi_pass
 17611                                  
 17612                                  ;------ User chose to load dos low
 17613                                  
 17614                                  dont_install_stub:
 17615                                  	; 22/10/2022
 17616 000006CA 31DB                    	xor	bx,bx			; M012
 17617                                  					; don't use int 21 call to alloc mem
 17618 000006CC E8D102                  	call	MovDOSLo		; move it !
 17619                                  
 17620 000006CF B80100                  	mov	ax,1			; dont install stub
 17621                                  	; 11/12/2022
 17622                                  	; ds = cs
 17623 000006D2 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17624                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 17625                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 17626                                  	; 27/03/2019
 17627                                  ;do_multi_pass:
 17628                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 17629                                  
 17630                                  	; 11/12/2022
 17631                                  	; ds =cs
 17632                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 17633 000006D6 FF1E[7B02]              	call	far [dos_segreinit]
 17634                                  do_multi_pass:
 17635 000006DA E80D02                  	call	AllocFreeMem		; allocate all the free mem
 17636                                  					; & update [memhi] & [area]
 17637                                  					; start of free memory.
 17638                                  	;ifdef	dblspace_hooks
 17639                                  	;mov	bx,0			; magic backdoor to place int hooks
 17640                                  	;call	cs:MagicBackdoor
 17641                                  	;endif
 17642                                  
 17643                                  ; Now, process config.sys some more.  
 17644                                  ; Load the device drivers and install programs
 17645                                  
 17646                                  	; 22/10/2022
 17647                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 17648                                  	; 11/12/2022
 17649                                  	; ds = cs
 17650 000006DD FE06[CB02]              	inc	byte [multi_pass_id]
 17651 000006E1 E8DA19                  	call	multi_pass		; load device drivers
 17652 000006E4 E8602E                  	call	ShrinkUMB
 17653 000006E7 E8842E                  	call	UnlinkUMB		; unlink all UMBs	;M002
 17654                                  	; 02/11/2022
 17655                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 17656                                  	; 11/12/2022
 17657                                  	; ds = cs
 17658 000006EA FE06[CB02]              	inc	byte [multi_pass_id]
 17659 000006EE E8CD19                  	call	multi_pass		; was load ifs (now does nothing)
 17660                                  
 17661                                  	;ifdef	dblspace_hooks
 17662                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 17663                                  	;endif
 17664                                  
 17665                                  	; ds = cs
 17666                                  	
 17667 000006F1 E82206                  	call	endfile			; setup fcbs, files, buffers etc
 17668                                  
 17669                                  	;ifdef	dblspace_hooks
 17670                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 17671                                  	;endif
 17672                                  
 17673                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 17674                                  ;to device drivers. This has been moved up to this point to avoid problems 
 17675                                  ;with overlays called from installed programs
 17676                                  
 17677                                  	; 11/12/2022
 17678                                  	; ds = cs
 17679                                  
 17680                                  	;;mov	ax,Bios_Data ; 0070h
 17681                                  	;mov	ax,KERNEL_SEGMENT
 17682                                  	; 21/10/2022
 17683 000006F4 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 17684 000006F7 8EC0                    	mov	es,ax			; point ES to bios data
 17685                                  
 17686 000006F9 26C606[FB08]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 17687                                  
 17688                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17689                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 17690                                  	;test	byte [cs:install_flag],1
 17691                                  	; 11/12/2022
 17692                                  	; ds = cs
 17693 000006FF F606[CC02]01            	test	byte [install_flag],1
 17694                                  	;test	byte [cs:install_flag],have_install_cmd
 17695                                  					; are there install commands?
 17696 00000704 7407                    	jz	short dolast		; no, no need for further processing
 17697                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 17698                                  	; 11/12/2022
 17699                                  	; ds =cs
 17700 00000706 FE06[CB02]              	inc	byte [multi_pass_id]
 17701 0000070A E8B119                  	call	multi_pass		; execute install= commands
 17702                                  
 17703                                  dolast:
 17704                                  	
 17705                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 17706                                  ;  free the confbot area used for config.sys and sysinit itself.
 17707                                  
 17708                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 17709                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 17710                                  ; anything, but just set up the ROM area for suballocation (or print
 17711                                  ; a message if HiMem is not available).
 17712                                  ;
 17713                                  ; There is also this little hack for CPM style DOS calls that needs to
 17714                                  ; be done when A20 is set...
 17715                                  
 17716                                  	; 11/12/2022
 17717                                  	; ds = cs
 17718                                  
 17719                                  	; 22/10/2022
 17720                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 17721                                  	; 11/12/2022
 17722 0000070D 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 17723 00000712 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 17724 00000714 E83802                  	call	LoadDOSHiOrLo
 17725                                  _@@_:
 17726                                  	;cmp	byte [cs:runhigh],0	; are we running low
 17727                                  	; 11/12/2022
 17728                                  	; ds = cs
 17729 00000717 803E[6A02]00            	cmp	byte [runhigh],0
 17730                                  	;je	short _@@@
 17731 0000071C 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 17732 0000071E E82C05                  	call	CPMHack			; make ffff:d0 same as 0:c0
 17733                                  _@@@:
 17734                                  
 17735                                  ; We are now done with CONFIG.SYS processing
 17736                                  
 17737                                  ConfigDone:
 17738                                  	; 12/12/2022
 17739                                  	; 22/10/2022
 17740                                  	;mov	byte [cs:donotshownum],1 
 17741                                  					; done with config.sys.
 17742                                  					; do not show line number message.
 17743                                  	;mov	es,[cs:area]
 17744                                  	; 12/12/2022
 17745                                  	; ds = cs
 17746                                  	; 27/03/2019
 17747 00000721 C606[5303]01            	mov	byte [donotshownum],1
 17748 00000726 8E06[6603]              	mov	es,[area]
 17749                                  
 17750 0000072A B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 17751 0000072C CD21                    	int	21h
 17752                                  			; DOS - 2+ - FREE MEMORY
 17753                                  			; ES = segment address of area to be freed
 17754                                  
 17755                                  	; 22/10/2022
 17756                                  	;test	word [cs:install_flag],2
 17757                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 17758                                  	;test	byte [cs:install_flag],has_installed
 17759                                  	; 11/12/2022
 17760                                  	; ds = cs
 17761 0000072E F606[CC02]02            	test	byte [install_flag],2 ; has_installed
 17762                                  	;test	byte [install_flag],has_installed
 17763 00000733 741F                    	jz	short skip_free_sysinitbase ; no.
 17764                                  
 17765                                  ; set block from the old_area with impossible_owner_size.
 17766                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 17767                                  ; handle install= command.
 17768                                  
 17769                                  	; 12/12/2022
 17770                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 17771                                  	;push	bx
 17772                                  	
 17773                                  	; 22/10/2022
 17774                                  	;mov	es,[cs:old_area]
 17775                                  	;mov	bx,[cs:impossible_owner_size]
 17776                                  	; 12/12/2022
 17777                                  	; ds = cs
 17778 00000735 8E06[5C03]              	mov	es,[old_area]
 17779 00000739 8B1E[5E03]              	mov	bx,[impossible_owner_size]
 17780                                  	
 17781 0000073D B44A                    	mov	ah,4Ah ; SETBLOCK
 17782 0000073F CD21                    	int	21h
 17783                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 17784                                  			; ES = segment address of block to change
 17785                                  			; BX = new size in paragraphs
 17786 00000741 8CC0                    	mov	ax,es
 17787 00000743 48                      	dec	ax
 17788 00000744 8EC0                    	mov	es,ax			; point to arena
 17789                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 17790 00000746 26C70601000800          	mov	word [es:1],8
 17791                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 17792 0000074D 26C70608005344          	mov	word [es:8],'SD'
 17793                                  	
 17794                                  	; 12/12/2022
 17795                                  	;pop	bx
 17796                                          ;pop     es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 17797                                  
 17798                                  skip_free_sysinitbase:
 17799                                  	; 22/10/2022
 17800                                  	;cmp	byte [cs:runhigh],0
 17801                                  	; 12/12/2022
 17802                                  	; ds = cs
 17803 00000754 803E[6A02]00            	cmp	byte [runhigh],0	
 17804 00000759 7403                    	je	short _@@@@
 17805                                  
 17806 0000075B E8D103                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 17807                                  
 17808                                  ; ----------------------------------------------------------------------------
 17809                                  
 17810                                  _@@@@:
 17811                                  	; 12/12/2022
 17812                                  	; ds = cs
 17813                                  	; 22/10/2022
 17814                                  	; 27/03/2019
 17815                                  	;push	cs
 17816                                  	;pop	ds			; point DS to sysinitseg
 17817                                  
 17818                                  ; set up the parameters for command
 17819                                  
 17820                                  ;	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 17821                                  ;;ifdef	MULTI_CONFIG
 17822                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 17823                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 17824                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 17825                                  ;	; !!!
 17826                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 17827                                  ;       ; !!!
 17828                                  ;	call    disable_autoexec        ; no, we should disable it
 17829                                  ;process_autoexec:
 17830                                  ;;endif	; !!!
 17831                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 17832                                  ;	; !!!
 17833                                  
 17834                                  	; 22/10/2022 
 17835                                  	;mov     cl,[command_line]
 17836                                          ;mov     ch,0
 17837                                          ;inc     cx
 17838                                          ;mov     si,command_line	
 17839                                  	;add     si,cx
 17840                                          ;mov     byte [si],cr	; cr-terminate command line
 17841                                  
 17842                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 17843                                  	; (SYSINIT:0809h)
 17844                                  
 17845                                  	;;;;
 17846                                  
 17847                                  	; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 17848                                  	; (SYSINIT:0813h)
 17849                                  	; ds = cs
 17850                                  	; push	cs
 17851                                  	; pop	ds
 17852                                  
 17853 0000075E C606[DF14]00            	mov	byte [config_cmd],0	; set special code for query_user
 17854 00000763 E8443A                  	call    query_user		; to issue the AUTOEXEC prompt
 17855 00000766 7308                    	jnc	short process_autoexec	; we should process autoexec normally
 17856                                  	; !!!
 17857 00000768 800E[5B48]04            	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 17858                                  	; !!!
 17859 0000076D E8363B                  	call    disable_autoexec        ; no, we should disable it
 17860                                  process_autoexec:
 17861                                  	; !!!
 17862 00000770 E87E3B                  	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 17863                                  
 17864                                  	;mov     cl,[command_line]
 17865                                  	; 30/12/2022
 17866 00000773 BE[9147]                	mov	si,command_line
 17867 00000776 8A0C                    	mov	cl,[si]
 17868 00000778 B500                    	mov     ch,0
 17869 0000077A 41                      	inc     cx
 17870                                  	;mov	si,command_line
 17871 0000077B 01CE                    	add     si,cx
 17872 0000077D C6040D                  	mov     byte [si],cr	; cr-terminate command line
 17873                                  	
 17874                                  	;;;;		
 17875                                  
 17876                                  ; 30/12/2022 - Retro DOS v4.2
 17877                                  %if 0
 17878                                  	;mov	si,(offset command_line+1)
 17879                                  	mov	si,command_line+1
 17880                                  	push    ds
 17881                                  	pop     es
 17882                                  	mov     di,si
 17883                                  	mov     cl,0FFh ; -1
 17884                                  _@_loop:
 17885                                  	inc     cl ; +1
 17886                                  	lodsb
 17887                                  	stosb
 17888                                  	or      al,al
 17889                                  	jnz     short _@_loop
 17890                                  	dec     di
 17891                                  	mov     al,0Dh
 17892                                  	stosb			; cr-terminate command line
 17893                                  	mov     [command_line],cl ; command line length (except CR)
 17894                                  
 17895                                  %endif
 17896                                  
 17897                                  ; ----------------------------------------------------------------------------
 17898                                  
 17899                                  ;   Once we get to this point, the above code, which is below "retry"
 17900                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 17901                                  ;   which follow....)
 17902                                  
 17903                                  retry:
 17904 00000780 BA[0347]                	mov	dx,commnd	; now pointing to file description
 17905                                  
 17906                                  ; we are going to open the command interpreter and size it as is done in
 17907                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 17908                                  ; there is not enough room for the command interpreter,exec will probably
 17909                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 17910                                  ; here to catch it. this code is not perfect (for instance .exe command
 17911                                  ; interpreters are possible) because it does its sizing based on the
 17912                                  ; assumption that the file being loaded is a .com file. it is close enough to
 17913                                  ; correctness to be usable.
 17914                                  
 17915                                  ; first, find out where the command interpreter is going to go.
 17916                                  
 17917 00000783 52                      	push	dx		; save pointer to name
 17918 00000784 BBFFFF                  	mov	bx,0FFFFh
 17919 00000787 B448                    	mov	ah,48h	; ALLOC
 17920 00000789 CD21                            int     21h             ; get biggest piece
 17921 0000078B B448                    	mov	ah,48h	; ALLOC
 17922 0000078D CD21                    	int	21h		; second time gets it
 17923 0000078F 726B                    	jc	short memerrjx	; oooops
 17924                                  
 17925 00000791 8EC0                    	mov	es,ax
 17926 00000793 B449                    	mov	ah,49h	; DEALLOC
 17927 00000795 CD21                    	int	21h		; give it right back
 17928 00000797 89DD                    	mov	bp,bx
 17929                                  
 17930                                  ; es:0 points to block,and bp is the size of the block in para.
 17931                                  
 17932                                  ; we will now adjust the size in bp down by the size of sysinit.
 17933                                  ; we need to do this because exec might get upset if some of the exec
 17934                                  ; data in sysinit is overlayed during the exec.
 17935                                  
 17936                                  	; 22/10/2022
 17937                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 17938 00000799 8B1E[9202]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 17939 0000079D 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 17940                                  
 17941                                  ; Note that the "config_wrkseg" environment data is a segment in
 17942                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 17943                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 17944                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 17945                                  ; we need to make sure that there's no way Exec will stomp on that data
 17946                                  ; before it can copy it, and one way to do that is to make the available
 17947                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 17948                                  ; from the "memory_size" segment value (which is typically A000h) instead
 17949                                  ; of the current sysinit CS....
 17950                                  ;
 17951                                  ; The reason I use the term "paranoid" is because this code should have
 17952                                  ; slid the data required by Exec up to the very top of memory, because as
 17953                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 17954                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 17955                                  ; consumes). Now it's just a little worse (65K or more, depending on
 17956                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 17957                                  ; is determined by the size of CONFIG.SYS.... -JTP
 17958                                  
 17959                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21, IO.SYS)
 17960                                  	; (SYSINIT:0858h)
 17961 0000079F 8B0E[DB14]              	mov	cx,[config_envlen]
 17962 000007A3 E303                            jcxz	no_env		; use config_wrkseg only if there's env data
 17963 000007A5 A1[DD14]                        mov	ax,[config_wrkseg]	
 17964                                  
 17965                                  	; 22/10/2022
 17966                                  	;mov	cx,[config_envlen]
 17967                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 17968                                          ;mov	ax,[config_wrkseg]
 17969                                  ;no_env:
 17970                                  	; 22/10/2022
 17971                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 17972                                  no_env:
 17973                                  	; 30/12/2022
 17974                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0861h)
 17975 000007A8 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 17976 000007AA 83C311                  	add	bx,11h		; add the sysinit php
 17977 000007AD 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 17978 000007AF 724B                    	jc	short memerrjx	; if there isn't even this much memory, give up
 17979                                  
 17980                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 17981 000007B1 B8003D                          mov	ax,3D00h
 17982 000007B4 F9                      	stc                     ; in case of int 24
 17983 000007B5 CD21                    	int	21h
 17984 000007B7 7271                    	jc	short comerr	; ooops
 17985                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 17986                                  			; DS:DX -> ASCIZ filename
 17987                                  			; AL = access mode
 17988                                  			; 0 - read
 17989                                  	; 22/10/2022
 17990                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 17991 000007B9 89C3                            mov     bx,ax           ; handle in bx
 17992                                  
 17993                                  ;   If the standard command interpreter is being used, verify it is correct
 17994                                  
 17995                                  	; 30/12/2022 - Retro DOS v4.2
 17996                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:0874h)
 17997 000007BB 803E[0047]00            	cmp	byte [newcmd],0	; was a new shell selected?
 17998 000007C0 7518                    	jne	short skip_validation ; yes
 17999 000007C2 BA[7C07]                	mov	dx,retry-4
 18000 000007C5 B90400                  	mov	cx,4		;
 18001 000007C8 B43F                    	mov	ah,READ		;
 18002 000007CA CD21                    	int	21h		;
 18003 000007CC 803E[7C07]E9            	cmp	byte [retry-4],0E9h
 18004 000007D1 7557                    	jne	short comerr
 18005                                  	; 20/04/2019 - Retro DOS v4.0
 18006                                  	; 30/12/2022 
 18007                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 18008                                  				; .. COMMAND.COM Version 6.20 (14h&0Fh)	
 18009 000007D3 803E[7F07]66            	cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 18010 000007D8 7550                    	jne	short comerr	;
 18011                                  
 18012                                  	; 22/10/2022
 18013                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 18014                                  	;jne	short skip_validation ; yes
 18015                                  	;mov	dx,retry-4
 18016                                  	;mov	cx,4		;
 18017                                  	;mov	ah,READ		;
 18018                                  	;int	21h		;
 18019                                  	;cmp	byte [retry-4],0E9h
 18020                                  	;jne	short comerr
 18021                                  	;; 20/04/2019 - Retro DOS v4.0
 18022                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 18023                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 18024                                  	;jne	short comerr	;
 18025                                  
 18026                                  ;skip_validation:
 18027                                  	; 22/10/2022
 18028                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 18029                                  skip_validation:
 18030                                  	; 30/12/2022
 18031                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0893h)
 18032 000007DA 31C9                    	xor	cx,cx
 18033 000007DC 31D2                    	xor	dx,dx
 18034                                  	;mov	ax,(LSEEK<<8)|2
 18035 000007DE B80242                  	mov	ax,4202h
 18036 000007E1 F9                      	stc			;in case of int 24
 18037 000007E2 CD21                    	int	21h		; get file size in dx:ax
 18038 000007E4 7244                    	jc	short comerr
 18039                                  				; convert size in dx:ax to para in ax
 18040 000007E6 83C00F                  	add	ax,15		; round up size for conversion to para
 18041 000007E9 83D200                  	adc	dx,0
 18042 000007EC E87404                  	call	off_to_para
 18043 000007EF B10C                    	mov	cl,12
 18044 000007F1 D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 18045 000007F3 09D0                    	or	ax,dx		; ax is now # of para for file
 18046 000007F5 83C010                  	add	ax,10h		; 100h byte php
 18047 000007F8 39E8                    	cmp	ax,bp		; will command fit in available mem?
 18048 000007FA 7208                    	jb	short okld	; jump if yes.
 18049                                  
 18050                                  ; 30/12/2022
 18051                                  %if 0
 18052                                  	; 22/10/2022
 18053                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 18054                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 18055                                  	; 02/11/2022
 18056                                  	;jmp	mem_err
 18057                                  	; 11/12/2022
 18058                                  	; ds = cs
 18059                                  	jmp	mem_err2
 18060                                  %endif
 18061                                  	; 30/12/2022
 18062                                  	; (MSDOS 6.21, IO.SYS, SYSINIT:08B5h)
 18063                                  memerrjx:
 18064 000007FC BA[4F4C]                	mov	dx,badmem 	; "Configuration too large for memory"
 18065 000007FF E8273E                  	call	print
 18066 00000802 EB3E                    	jmp     short continue
 18067                                  
 18068                                  okld:
 18069 00000804 B43E                    	mov	ah,3Eh ; CLOSE
 18070 00000806 CD21                    	int	21h		; close file
 18071                                  
 18072                                  	; 22/10/2022
 18073 00000808 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 18074                                  
 18075                                  	; 24/03/2019
 18076                                  
 18077 00000809 0E                      	push	cs		; point es to sysinitseg
 18078 0000080A 07                      	pop	es
 18079 0000080B BB[BD02]                        mov     bx,COMEXE	; point to exec block
 18080                                  	; 22/10/2022
 18081                                  	;pop	dx              ; recover pointer to name
 18082                                  
 18083                                  ;;ifdef	MULTI_CONFIG
 18084                                  
 18085                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 18086                                  ;   there will be data if there were any valid SET commands and/or if a menu
 18087                                  ;   selection was made (in which case the CONFIG environment variable will be
 18088                                  ;   set to that selection).
 18089                                  
 18090                                  	; 23/10/2022
 18091                                  	;mov	cx,[config_envlen]
 18092                                  	;jcxz	no_envdata
 18093                                          ;mov	cx,[config_wrkseg]
 18094                                  ;no_envdata:
 18095                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 18096                                  	;mov	[bx],cx
 18097                                  
 18098                                  ;;endif	;MULTI_CONFIG
 18099                                  
 18100                                  	; 30/12/2022 - Retro DOS v4.2
 18101                                  	; (MSDOS 6.21 IO.SYS SYSINIT:08C7h)
 18102 0000080E 8B0E[DB14]              	mov	cx,[config_envlen]
 18103 00000812 E304                    	jcxz	no_envdata
 18104 00000814 8B0E[DD14]                      mov	cx,[config_wrkseg]
 18105                                  no_envdata:
 18106                                  	;mov	[bx+EXEC0.ENVIRON],cx
 18107 00000818 890F                    	mov	[bx],cx	
 18108                                  	
 18109                                  	; 23/10/2022
 18110                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 18111                                  
 18112                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 18113 0000081A 8C4F04                  	mov	[bx+4],cs
 18114                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 18115 0000081D 8C4F08                  	mov	[bx+8],cs
 18116                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 18117 00000820 8C4F0C                  	mov	[bx+12],cs
 18118                                  
 18119                                  	;mov	ax,(EXEC<<8) + 0
 18120                                  	; 23/10/2022
 18121 00000823 31C0                    	xor	ax,ax
 18122 00000825 B44B                    	mov	ah,4Bh        
 18123                                  
 18124 00000827 F9                      	stc                     ; in case of int 24
 18125 00000828 CD21                            int     21h             ; go start up command
 18126                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 18127                                  			; DS:DX -> ASCIZ filename
 18128                                  			; ES:BX -> parameter block
 18129                                  			; AL = subfunc: load & execute program
 18130                                  	;push	cs
 18131                                  	;pop	ds
 18132                                  
 18133                                  	; 23/10/2022
 18134                                  	;push	dx		; push to balance fall-through pop
 18135                                  
 18136                                  ; note fall through if exec returns (an error)
 18137                                  comerr:
 18138                                  	; 23/10/2022
 18139                                  ;;ifdef	MULTI_CONFIG
 18140                                  	;cmp	byte [commnd4],0
 18141                                  	;je	short comerr2	; all defaults exhausted, print err msg
 18142                                  	;cmp	byte [newcmd],0
 18143                                  	;je	short continue	; don't print err msg for defaults just yet
 18144                                  ;comerr2:
 18145                                  ;;endif
 18146                                  
 18147                                  	; 30/12/2022 - Retro DOS v4.2
 18148 0000082A 0E                      	push	cs
 18149 0000082B 1F                      	pop	ds
 18150 0000082C 803E[7447]00            	cmp	byte [commnd4],0
 18151 00000831 7407                    	je	short comerr2	; all defaults exhausted, print err msg
 18152 00000833 803E[0047]00            	cmp	byte [newcmd],0
 18153 00000838 7408                    	je	short continue	; don't print err msg for defaults just yet
 18154                                  comerr2:
 18155 0000083A 52                      	push	dx ; 30/12/2022
 18156                                  
 18157                                  	; 23/10/2022
 18158 0000083B BA[CB4B]                        mov     dx,badcom	; want to print command error
 18159 0000083E E8BC3D                  	call	badfil
 18160                                  	
 18161 00000841 5A                      	pop	dx  ; 30/12/2022
 18162                                  continue:
 18163                                  	; 23/10/2022
 18164                                  	;pop	dx
 18165                                  
 18166                                  ; 30/12/2022
 18167                                  %if 0
 18168                                  
 18169                                  ;;ifndef MULTI_CONFIG
 18170                                  	;jmp	stall
 18171                                  	; 24/10/2022
 18172                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 18173                                  	jmp	short stall
 18174                                  ;;else
 18175                                  
 18176                                  %endif
 18177                                  	
 18178                                  ; 30/12/2022 (MSDOS 6.21 SYSINIT, Retro DOS v4.2)
 18179                                  ;%if 1
 18180                                  ; 23/10/2022 (MSDOS 5.0 SYSINIT, Retrodos v4.0)
 18181                                  ;%if 0	
 18182 00000842 B419                    	mov	ah,GET_DEFAULT_DRIVE ; 19h
 18183 00000844 CD21                    	int	21h             ;
 18184 00000846 0441                    	add	al,'A'          ;
 18185 00000848 88C2                    	mov	dl,al           ; DL == default drive letter
 18186 0000084A BE[4347]                	mov	si,commnd2
 18187 0000084D 803E[0047]00            	cmp	byte [newcmd],0 ; if a SHELL= was given
 18188 00000852 7505                    	jne	short do_def2	; then try the 2nd alternate;
 18189 00000854 C60400                  	mov	byte [si],0	; otherwise, the default SHELL= was tried,
 18190 00000857 EB05                    	jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 18191                                  do_def2:			
 18192 00000859 803C00                  	cmp	byte [si],0	; has 2nd alternate been tried?
 18193 0000085C 7554                            jne	short do_alt    ; no
 18194                                  do_def3:
 18195 0000085E BE[5447]                	mov	si,commnd3
 18196 00000861 803C00                  	cmp	byte [si],0	; has 3rd alternate been tried?
 18197 00000864 754C                    	jne	short do_alt	; no
 18198 00000866 BE[7447]                	mov	si,commnd4
 18199 00000869 803C00                  	cmp	byte [si],0	; has 4th alternate been tried?
 18200 0000086C 7544                    	jne	short do_alt	; no
 18201 0000086E 52                      	push	dx              ;
 18202 0000086F BA[274E]                	mov	dx,badcomprmpt
 18203 00000872 E8B43D                  	call	print		;
 18204 00000875 5A                      	pop	dx              ; recover default drive letter in DL
 18205                                  request_input:			;
 18206 00000876 B402                    	mov	ah,STD_CON_OUTPUT
 18207 00000878 CD21                    	int	21h             ;
 18208 0000087A 52                      	push	dx              ;
 18209 0000087B B23E                    	mov	dl,'>'          ;
 18210 0000087D CD21                    	int	21h             ;
 18211 0000087F 8A1E[0247]              	mov	bl,[tmplate+1]	;
 18212 00000883 B700                    	mov	bh,0            ;
 18213 00000885 C687[0347]0D            	mov	byte [commnd+bx],0Dh
 18214 0000088A BA[0147]                	mov	dx,tmplate
 18215 0000088D B40A                    	mov	ah,STD_CON_STRING_INPUT
 18216 0000088F CD21                    	int	21h             ; read a line of input
 18217 00000891 BA[764B]                	mov	dx,crlfm	;
 18218 00000894 E8923D                  	call	print           ;
 18219 00000897 5A                      	pop	dx              ;
 18220 00000898 8A1E[0247]              	mov	bl,[tmplate+1]	;
 18221 0000089C 08DB                    	or	bl,bl           ; was anything typed?
 18222 0000089E 74D6                    	jz	short request_input ;
 18223 000008A0 C606[0047]01            	mov	byte [newcmd],1 ; disable validation for user-specified binaries
 18224 000008A5 C687[0347]00            	mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 18225 000008AA C706[9147]000D          	mov	word [command_line],0D00h
 18226 000008B0 EB35                    	jmp	short do_exec   ;
 18227                                  do_alt:
 18228 000008B2 1E                      	push	ds
 18229 000008B3 07                      	pop	es
 18230 000008B4 C606[0047]00            	mov	byte [newcmd],0 ; force validation for alternate binaries
 18231 000008B9 BF[0347]                	mov	di,commnd	;
 18232                                  do_alt1:
 18233 000008BC AC                      	lodsb			; copy the alternate, zapping it as we go,
 18234 000008BD C644FF00                	mov	byte [si-1],0	; so that we know it's been tried
 18235 000008C1 AA                      	stosb 			;
 18236 000008C2 08C0                    	or	al,al		;
 18237 000008C4 75F6                    	jnz	short do_alt1	;
 18238 000008C6 BF[9147]                	mov	di,command_line
 18239 000008C9 807C023A                	cmp	byte [si+2],':'
 18240 000008CD 7503                    	jne	short do_alt2	;
 18241 000008CF 885401                  	mov	[si+1],dl	; stuff default drive into alt. command line
 18242                                  do_alt2:			;
 18243 000008D2 AC                      	lodsb			;
 18244 000008D3 AA                      	stosb			;
 18245 000008D4 08C0                    	or	al,al           ;
 18246 000008D6 75FA                    	jnz	short do_alt2   ;
 18247 000008D8 C645FF0D                	mov	byte [di-1],cr
 18248                                  
 18249                                  ;;   Last but not least, see if we need to call disable_autoexec
 18250                                  
 18251                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 18252                                  	;cmp	[command_line-1],0
 18253                                          ;jne	short do_exec   ;
 18254                                          ;mov	[command_line-1],'/'
 18255                                  	;call	disable_autoexec ;
 18256                                  
 18257                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 18258 000008DC C606[5148]00            	mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 18259 000008E1 E8C239                  	call	disable_autoexec
 18260 000008E4 E80A3A                  	call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 18261                                  do_exec:
 18262 000008E7 E996FE                  	jmp	retry		;
 18263                                  
 18264                                  ;;endif	;MULTI_CONFIG
 18265                                  
 18266                                  ;%endif ; 23/10/2022 (MSDOS 5.0 SYSINIT)
 18267                                  ;%endif ; 30/12/2022 (MSDOS 6.21 SYSINIT)
 18268                                  
 18269                                  ; 24/03/2019 - Retro DOS v4.0
 18270                                  
 18271                                  ; ----------------------------------------------------------------------
 18272                                  ; procedure : AllocFreeMem
 18273                                  ;
 18274                                  ; Allocate Max memory from DOS to find out where to load DOS.
 18275                                  ; DOS is at temporary location when this call is being made
 18276                                  ;
 18277                                  ; Inputs : None
 18278                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 18279                                  ;	   [area] & [memhi] set to the para value of the start of the
 18280                                  ;	   free memory.
 18281                                  ;
 18282                                  ; Uses   : AX, BX
 18283                                  ;
 18284                                  ; ----------------------------------------------------------------------
 18285                                  	
 18286                                  	; 30/12/2022 - Retro DOS v4.2
 18287                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:09A2h)
 18288                                  
 18289                                  	; 23/10/2022
 18290                                  AllocFreeMem:
 18291 000008EA BBFFFF                  	mov	bx,0FFFFh
 18292 000008ED B448                    	mov	ah,48h ; ALLOC
 18293 000008EF CD21                    	int	21h			; first time fails
 18294 000008F1 B448                    	mov	ah,48h ; ALLOC
 18295 000008F3 CD21                    	int	21h			; second time gets it
 18296                                  	; 11/12/2022
 18297                                  	; ds = cs
 18298                                  	;mov	[cs:area],ax
 18299                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 18300 000008F5 A3[6603]                	mov	[area],ax
 18301 000008F8 A3[6203]                	mov	[memhi],ax		; memhi:memlo now points to			
 18302 000008FB C3                      	retn				; start of free memory
 18303                                  				
 18304                                  	; include msbio.cl6
 18305                                  ; ----------------------------------------------------------------------
 18306                                  DOSLOMSG:
 18307 000008FC 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 18307 00000905 7661696C61626C653A-
 18307 0000090E 204C6F6164696E6720-
 18307 00000917 444F53206C6F770D0A-
 18307 00000920 24                 
 18308                                  FEmsg:
 18309 00000921 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 18309 0000092A 6F723A2043616E6E6F-
 18309 00000933 7420616C6C6F636174-
 18309 0000093C 65204D656D6F727920-
 18309 00000945 666F7220444F530D0A-
 18309 0000094E 24                 
 18310                                  
 18311                                  ; ----------------------------------------------------------------------
 18312                                  ;
 18313                                  ; procedure : LoadDOSHiOrLo
 18314                                  ;
 18315                                  ;		Tries to move DOS into HMA. If it fails then loads
 18316                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 18317                                  ;		moved; this just tries to allocate the HMA, and prints
 18318                                  ;		a message if this is not possible.
 18319                                  ;
 18320                                  ; ----------------------------------------------------------------------
 18321                                  
 18322                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18323                                  LoadDOSHiOrLo:
 18324                                  	; 27/03/2019 - Retro DOS v4.0
 18325                                  	; ds = cs
 18326 0000094F E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 18327                                  	;jc	short LdngLo		; If that don't work...
 18328                                  	;retn
 18329                                  	; 18/12/2022
 18330 00000952 731C                    	jnc	short LoadDosHi_ok
 18331                                  LdngLo:
 18332                                  	; 23/10/2022
 18333                                  	;push	cs
 18334                                  	;pop	ds
 18335                                  	; 11/12/2022
 18336                                  	; ds = cs
 18337 00000954 B409                    	mov	ah,9
 18338 00000956 BA[FC08]                	mov	dx,DOSLOMSG		; inform user that we are
 18339 00000959 CD21                    	int	21h			; loading low
 18340                                  
 18341                                  ;ifndef ROMDOS
 18342                                  	; actually move the dos, and reinitialize it.
 18343                                  
 18344 0000095B BB0100                  	mov	bx,1				; M012
 18345                                  						;  use int 21 alloc for mem
 18346 0000095E E83F00                  	call	MovDOSLo
 18347                                  	; 11/12/2022
 18348                                  	; ds = cs
 18349                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 18350                                  	; 23/10/2022
 18351 00000961 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18352                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 18353                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 18354 00000965 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 18355                                  	; 11/12/2022
 18356                                  	; ds = cs
 18357                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 18358 00000967 FF1E[7B02]              	call	far [dos_segreinit] ; 27/03/2019
 18359                                  	
 18360                                  ;endif ; ROMDOS
 18361                                  	; 23/10/2022
 18362                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 18363                                  	; 11/12/2022
 18364                                  	; ds = cs
 18365 0000096B C606[6A02]00            	mov	byte [runhigh],0 ; 27/03/2019
 18366                                  LoadDosHi_ok:	; 18/12/2022
 18367 00000970 C3                      	retn
 18368                                  
 18369                                  ; ----------------------------------------------------------------------
 18370                                  ;
 18371                                  ; procedure : TryToMovDOSHi
 18372                                  ;
 18373                                  ;		This tries to move DOS into HMA.
 18374                                  ;		Returns CY if it failed.
 18375                                  ;		If it succeeds returns with carry cleared.
 18376                                  ;
 18377                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 18378                                  ;		the A20 switching code in the low mem stub to be installed.
 18379                                  ; 
 18380                                  ; ----------------------------------------------------------------------
 18381                                  
 18382                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18383                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 18384                                  TryToMovDOSHi:
 18385                                  	; 11/12/2022
 18386                                  	; 27/03/2019 - Retro DOS v4.0
 18387                                  	; ds = cs
 18388 00000971 E81300                  	call	MovDOSHi
 18389 00000974 7210                    	jc	short ttldhx
 18390                                  
 18391                                  ;ifndef ROMDOS
 18392                                  	; 23/10/2022
 18393                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 18394                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 18395                                  	; 11/12/2022
 18396                                  	; ds = cs
 18397 00000976 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18398                                  ;else
 18399                                  ;	..
 18400                                  ;endif ; ROMDOS
 18401                                  
 18402                                  	; 11/12/2022
 18403                                  	; ds = cs
 18404 0000097A 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 18405                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 18406 0000097C FF1E[7B02]              	call	far [dos_segreinit]
 18407                                  	;mov	byte [cs:runhigh],1
 18408 00000980 C606[6A02]01            	mov	byte [runhigh],1
 18409 00000985 F8                      	clc
 18410                                  ttldhx:
 18411 00000986 C3                      	retn
 18412                                  
 18413                                  ; ----------------------------------------------------------------------
 18414                                  ;
 18415                                  ; procedure : MovDOSHi
 18416                                  ;
 18417                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 18418                                  ;		For ROMDOS, the code is not actually moved, but the
 18419                                  ;		HMA is allocated and prepared for sub-allocation.
 18420                                  ;
 18421                                  ;		Returns : CY if it failed
 18422                                  ;
 18423                                  ; ----------------------------------------------------------------------
 18424                                  
 18425                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18426                                  MovDOSHi:
 18427                                  	; 14/05/2019
 18428                                  	; 27/03/2019 - Retro DOS v4.0
 18429                                  	; ds = cs
 18430 00000987 E8D900                  	call	AllocHMA
 18431 0000098A 7213                    	jc	short mdhx			; did we get HMA?
 18432 0000098C B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 18433 0000098F 8EC0                    	mov	es,ax
 18434                                  
 18435                                  ;ifndef ROMDOS
 18436                                  	; actually move the BIOS and DOS
 18437                                  
 18438                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18439                                  	; 24/03/2019
 18440                                  	
 18441                                  	; 23/10/2022
 18442 00000991 E83400                  	call	MovBIOS				; First move BIOS into HMA
 18443                                  
 18444                                  	; ES:DI points to free HMA after BIOS
 18445                                  	
 18446                                  	; 14/05/2019
 18447                                  	; 24/03/2019 - Retro DOS v4.0
 18448                                  	;xor	di,di
 18449                                  	
 18450                                  	; 23/10/2022
 18451                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 18452                                  	; 11/12/2022
 18453                                  	; ds = cs
 18454 00000994 8B0E[8102]              	mov	cx,[hi_doscod_size]		; when it is in HMA
 18455 00000998 E81100                  	call	MovDOS				; and move it
 18456                                  
 18457                                  	; ES:DI points to free HMA after DOS
 18458                                  ;else
 18459                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 18460                                  ;
 18461                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 18462                                  ;
 18463                                  ;endif ; ROMDOS
 18464                                  
 18465 0000099B E86302                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 18466 0000099E F8                      	clc
 18467                                  mdhx:
 18468 0000099F C3                      	retn
 18469                                  
 18470                                  ; ----------------------------------------------------------------------
 18471                                  ;
 18472                                  ; procedure : MovDOSLo
 18473                                  ;
 18474                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 18475                                  ;
 18476                                  ; ----------------------------------------------------------------------
 18477                                  
 18478                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18479                                  
 18480                                  ;ifndef ROMDOS
 18481                                  
 18482                                  MovDOSLo:
 18483                                  	; 14/05/2019
 18484                                  	; 27/03/2019 - Retro DOS v4.0
 18485                                  	; ds = cs
 18486 000009A0 E84800                  	call	AllocMemForDOS			; incestuosly!!!
 18487                                  	
 18488                                  	; 23/10/2022
 18489                                  	; 14/05/2019
 18490                                  	;inc	ax  ; skip MCB
 18491                                  	
 18492 000009A3 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 18493                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18494                                  	; 24/03/2019
 18495                                  	
 18496                                  	; 23/10/2022
 18497 000009A5 E82000                  	call	MovBIOS
 18498                                  
 18499                                  ;------ ES:DI points memory immediately after BIOS
 18500                                  
 18501                                  	; 14/05/2019
 18502                                  	; NOTE: 
 18503                                  	;     Order of (RETRO) DOS kernel sections at memory:
 18504                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 18505                                  
 18506                                  	; 24/03/2019 - Retro DOS v4.0
 18507                                  	;xor	di,di	
 18508                                  
 18509                                  	; 23/10/2022
 18510                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 18511                                  	; 11/12/2022
 18512                                  	; ds = cs
 18513 000009A8 8B0E[7F02]              	mov	cx,[lo_doscod_size]		; low
 18514                                  	;call	MovDOS
 18515                                  	;retn
 18516                                  	; 11/12/2022
 18517                                  	;jmp	short MovDOS
 18518                                  
 18519                                  ;endif ; ROMDOS
 18520                                  
 18521                                  ; 11/12/2022
 18522                                  
 18523                                  ; ----------------------------------------------------------------------
 18524                                  ;
 18525                                  ; procedure : MovDOS
 18526                                  ;
 18527                                  ;		Moves DOS code into requested area
 18528                                  ;
 18529                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18530                                  ;	     CX    - size of DOS code to be moved
 18531                                  ;
 18532                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18533                                  ;
 18534                                  ; ----------------------------------------------------------------------
 18535                                  
 18536                                  	; 11/12/2022
 18537                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18538                                  
 18539                                  ;ifndef ROMDOS
 18540                                  
 18541                                  MovDOS:
 18542                                  	; 14/05/2019
 18543                                  	; 27/03/2019 - Retro DOS v4.0
 18544                                  
 18545                                  	; 11/12/2022
 18546                                  	; ds = cs
 18547                                  
 18548                                  	; 23/10/2022
 18549                                  	;push	ds ; *//
 18550                                  	
 18551 000009AC 06                      	push	es
 18552 000009AD 57                      	push	di
 18553                                  
 18554                                  	; 11/12/2022
 18555 000009AE 1E                      	push	ds ; *// ; 11/12/202
 18556                                  
 18557                                  	; 29/04/2019
 18558 000009AF C536[6F02]              	lds	si,[dosinit] ; 11/12/2022
 18559                                  	; 23/10/2022
 18560                                  	;lds	si,[cs:dosinit]
 18561                                  	;;mov	ax,si
 18562                                  
 18563 000009B3 F3A4                    	rep	movsb
 18564                                  
 18565 000009B5 1F                      	pop	ds ; *// ; 11/12/2022
 18566                                  
 18567 000009B6 5B                      	pop	bx				; get back offset into which
 18568                                  						;  DOS was moved
 18569                                  
 18570 000009B7 2EA1[6F02]              	mov	ax,[cs:dosinit]			; get the offset at which DOS
 18571                                  						;  wants to run
 18572 000009BB 29D8                    	sub	ax,bx
 18573 000009BD E8A302                  	call	off_to_para
 18574 000009C0 5B                      	pop	bx				; get the segment at which
 18575                                  						;  we moved DOS into
 18576 000009C1 29C3                    	sub	bx,ax				; Adjust segment
 18577                                  	
 18578                                  	; 11/12/2022
 18579                                  	; 23/10/2022
 18580                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18581                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18582                                  	; 11/12/2022
 18583 000009C3 891E[7102]              	mov	[CURRENT_DOS_LOCATION],bx
 18584                                  		
 18585                                  	; 27/03/2019
 18586                                  	;pop	ds ; *//
 18587                                  	; ds = cs
 18588                                  	;mov	[FINAL_DOS_LOCATION],bx
 18589                                  
 18590 000009C7 C3                      	retn
 18591                                  
 18592                                  ;endif ;ROMDOS
 18593                                  
 18594                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18595                                  ; 24/03/2019
 18596                                  ; ----------------------------------------------------------------------
 18597                                  ;
 18598                                  ; procedure : MovBIOS
 18599                                  ;
 18600                                  ;		Moves BIOS code into requested segment
 18601                                  ;
 18602                                  ;	In : ES - segment to which BIOS is to be moved
 18603                                  ;		  ( it moves always into offset BCode_Start)
 18604                                  ;
 18605                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 18606                                  ;
 18607                                  ; ----------------------------------------------------------------------
 18608                                  
 18609                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18610                                  
 18611                                  ;ifndef ROMDOS
 18612                                  
 18613                                  MovBIOS: ; proc	near
 18614                                  	; 11/12/2022
 18615 000009C8 1E                      	push	ds ; ds = cs	
 18616                                  	;
 18617                                  	; 23/10/2022
 18618 000009C9 2E8E1E[8702]            	mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 18619                                  	;mov	si,BCODE_START ; mov si,30h
 18620                                  	; 09/12/2022
 18621 000009CE BE[3000]                	mov	si,BCODESTART
 18622 000009D1 89F7                    	mov	di,si
 18623 000009D3 B9001A                  	mov	cx,BCODE_END ; mov cx,1A60h
 18624 000009D6 29F1                    	sub	cx,si				; size of BIOS
 18625 000009D8 D1E9                    	shr	cx,1				; Both the labels are para
 18626                                  						;  aligned
 18627 000009DA F3A5                    	rep	movsw
 18628                                  	
 18629                                  	; 11/12/2022
 18630 000009DC 1F                      	pop	ds ; ds = cs
 18631                                  	;
 18632 000009DD 06                      	push	es
 18633 000009DE 57                      	push	di				; save end of BIOS
 18634 000009DF 8CC0                    	mov	ax,es
 18635                                  	;
 18636                                  	; 11/12/2022
 18637                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 18638                                  	;;call	dword ptr cs:_seg_reinit_ptr
 18639                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 18640                                  	; ds = cs
 18641 000009E1 A3[8203]                	mov	[BCodeSeg],ax
 18642 000009E4 FF1E[8502]              	call	far [seg_reinit_ptr]
 18643                                  	;
 18644 000009E8 5F                      	pop	di
 18645 000009E9 07                      	pop	es				; get back end of BIOS
 18646 000009EA C3                      	retn
 18647                                  
 18648                                  ;MovBIOS endp
 18649                                  
 18650                                  ;endif ; ROMDOS
 18651                                  
 18652                                  ; 11/12/2022
 18653                                  %if 0
 18654                                  
 18655                                  ; 24/03/2019
 18656                                  
 18657                                  ; ----------------------------------------------------------------------
 18658                                  ;
 18659                                  ; procedure : MovDOS
 18660                                  ;
 18661                                  ;		Moves DOS code into requested area
 18662                                  ;
 18663                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18664                                  ;	     CX    - size of DOS code to be moved
 18665                                  ;
 18666                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18667                                  ;
 18668                                  ; ----------------------------------------------------------------------
 18669                                  
 18670                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18671                                  
 18672                                  ;ifndef ROMDOS
 18673                                  
 18674                                  MovDOS:
 18675                                  	; 14/05/2019
 18676                                  	; 27/03/2019 - Retro DOS v4.0
 18677                                  
 18678                                  	; 11/12/2022
 18679                                  	; ds = cs
 18680                                  
 18681                                  	; 23/10/2022
 18682                                  	;push	ds ; *//
 18683                                  	
 18684                                  	push	es
 18685                                  	push	di
 18686                                  
 18687                                  	; 11/12/2022
 18688                                  	push	ds ; *// ; 11/12/202
 18689                                  
 18690                                  	; 29/04/2019
 18691                                  	lds	si,[dosinit] ; 11/12/2022
 18692                                  	; 23/10/2022
 18693                                  	;lds	si,[cs:dosinit]
 18694                                  	;;mov	ax,si
 18695                                  
 18696                                  	rep	movsb
 18697                                  
 18698                                  	pop	ds ; *// ; 11/12/2022
 18699                                  
 18700                                  	pop	bx				; get back offset into which
 18701                                  						;  DOS was moved
 18702                                  
 18703                                  	mov	ax,[cs:dosinit]			; get the offset at which DOS
 18704                                  						;  wants to run
 18705                                  	sub	ax,bx
 18706                                  	call	off_to_para
 18707                                  	pop	bx				; get the segment at which
 18708                                  						;  we moved DOS into
 18709                                  	sub	bx,ax				; Adjust segment
 18710                                  	
 18711                                  	; 11/12/2022
 18712                                  	; 23/10/2022
 18713                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18714                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18715                                  	; 11/12/2022
 18716                                  	mov	[CURRENT_DOS_LOCATION],bx
 18717                                  		
 18718                                  	; 27/03/2019
 18719                                  	;pop	ds ; *//
 18720                                  	; ds = cs
 18721                                  	;mov	[FINAL_DOS_LOCATION],bx
 18722                                  
 18723                                  	retn
 18724                                  
 18725                                  ;endif ;ROMDOS
 18726                                  
 18727                                  %endif
 18728                                  
 18729                                  ; ----------------------------------------------------------------------
 18730                                  ;
 18731                                  ; procedure : AllocMemForDOS
 18732                                  ;
 18733                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 18734                                  ;
 18735                                  ;	Out : AX - seg of allocated memoryblock
 18736                                  ;
 18737                                  ; ----------------------------------------------------------------------
 18738                                  
 18739                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18740                                  
 18741                                  ;ifndef ROMDOS
 18742                                  
 18743                                  AllocMemForDOS:
 18744                                  	; 11/12/2022
 18745                                  	; 14/05/2019
 18746                                  	; 27/03/2019 - Retro DOS v4.0
 18747                                  	; ds = cs
 18748                                  	;mov	ax,BCode_end
 18749                                  	;sub	ax,BCode_start		; BIOS code size
 18750                                  	; 23/10/2022
 18751 000009EB B8001A                  	mov	ax,BCODE_END ; 1A60h	; 1A70h for MSDOS 6.21
 18752                                  					; 30/12/2022
 18753                                  	;sub	ax,BCODE_START ; 30h
 18754                                  	; 09/12/2022
 18755 000009EE 2D[3000]                	sub	ax,BCODESTART 
 18756                                  	; 24/03/2019 - Retro DOS v4.0 
 18757                                  	; 02/11/2022
 18758                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 18759                                  	; 11/12/2022
 18760                                  	; ds = cs
 18761 000009F1 0306[7F02]              	add	ax,[lo_doscod_size]
 18762 000009F5 83C00F                  	add	ax,15
 18763 000009F8 E86802                  	call	off_to_para			; convert to para
 18764                                  	; 23/10/2022
 18765                                  	; 14/05/2019
 18766                                  	;inc	ax ; + 1 paragraph for MCB
 18767 000009FB 09DB                    	or	bx,bx				; M012
 18768 000009FD 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 18769 000009FF 741A                    	jz	short update_arena		; M012
 18770 00000A01 B448                    	mov	ah,48h				; request DOS
 18771 00000A03 CD21                    	int	21h
 18772 00000A05 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 18773                                   	; 23/10/2022
 18774                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 18775 00000A07 83E803                  	sub	ax,3				; Take care ORG 30h of
 18776                                  						;  BIOS code
 18777 00000A0A 8EC0                    	mov	es,ax
 18778                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 18779                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 18780                                  	; 14/05/2019
 18781                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 18782                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 18783                                  	; 23/10/2022
 18784 00000A0C 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 18785 00000A13 26C70628005343          	mov	word [es:20h+8],'SC'		;  code area
 18786                                  
 18787 00000A1A C3                      	retn
 18788                                  
 18789                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 18790                                  ;	  using DOS itself causes an arena to be generated.
 18791                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 18792                                  ;	  assume that the device drivers are loaded into
 18793                                  ;	  the first arena. For this reason, MagicDrv's
 18794                                  ;	  main device driver header arena is manually
 18795                                  ;	  truncated from the arena chain, and the space
 18796                                  ;	  for DOS is allocated using the following
 18797                                  ;	  simple code, which also assumes that the
 18798                                  ;	  first arena is the free one where DOS's low
 18799                                  ;	  stub will go.
 18800                                  ;
 18801                                  ; M012 : BEGIN
 18802                                  
 18803                                  	; 23/10/2022
 18804                                  update_arena:
 18805 00000A1B 1E                      	push	ds ; ds = cs
 18806 00000A1C 57                      	push	di
 18807 00000A1D 51                      	push	cx
 18808 00000A1E 52                      	push	dx
 18809                                  	; 23/10/2022
 18810                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 18811                                  	; 11/12/2022
 18812                                  	; ds = cs 
 18813 00000A1F C53E[6B02]              	lds	di,[DOSINFO] ; 27/03/2019	
 18814 00000A23 4F                      	dec	di
 18815 00000A24 4F                      	dec	di				; Arena head is immediately
 18816                                  						;  before sysvar
 18817 00000A25 8E05                    	mov	es,[di]				; es = arena head
 18818                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 18819 00000A27 268B0E0300              	mov	cx,[es:3]
 18820 00000A2C 39D9                    	cmp	cx,bx				; is it sufficient ?
 18821 00000A2E 7227                    	jb	short FatalErr			; no, fatal error
 18822                                  
 18823                                  	;mov	dl,[es:ARENA.SIGNATURE]
 18824 00000A30 268A160000              	mov	dl,[es:0]
 18825 00000A35 8CC0                    	mov	ax,es
 18826 00000A37 01D8                    	add	ax,bx				; ax = new arena head
 18827 00000A39 8905                    	mov	[di],ax				; store it in DOS data area
 18828 00000A3B 8ED8                    	mov	ds,ax
 18829                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 18830 00000A3D 88160000                	mov	[0],dl
 18831                                  	;mov	word [ARENA.OWNER],0		; free
 18832 00000A41 C70601000000            	mov	word [1],0
 18833 00000A47 29D9                    	sub	cx,bx				; size of the new block
 18834                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 18835 00000A49 890E0300                	mov	[3],cx
 18836 00000A4D 8CC0                    	mov	ax,es				; return seg to the caller
 18837                                  	; 23/10/2022
 18838                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 18839 00000A4F 83E803                  	sub	ax,3				;  BIOS code
 18840 00000A52 5A                      	pop	dx
 18841 00000A53 59                      	pop	cx
 18842 00000A54 5F                      	pop	di
 18843 00000A55 1F                      	pop	ds ; ds = cs
 18844 00000A56 C3                      	retn
 18845                                  ;
 18846                                  ; M012 : END
 18847                                  ;
 18848                                  FatalErr:
 18849 00000A57 0E                      	push	cs
 18850 00000A58 1F                      	pop	ds
 18851 00000A59 BA[2109]                	mov	dx,FEmsg
 18852 00000A5C B409                    	mov	ah,9
 18853 00000A5E CD21                    	int	21h 		; DOS - PRINT STRING
 18854                                  				; DS:DX -> string terminated by "$"
 18855                                  	; 30/12/2022 (MSDOS 6.21 SYSINIT)
 18856 00000A60 E93F07                  	jmp	stall
 18857                                  	; 23/10/2022 (MSDOS 5.0 SYSINIT)
 18858                                  	;cli
 18859                                  	;hlt
 18860                                  
 18861                                  ;endif ;ROMDOS
 18862                                  
 18863                                  ; 25/03/2019 - Retro DOS v4.0
 18864                                  
 18865                                  ; ----------------------------------------------------------------------
 18866                                  ;
 18867                                  ; procedure : AllocHMA
 18868                                  ;
 18869                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 18870                                  ;	  up there. If it gets any sort of error, it will return with
 18871                                  ;	  carry set so that we can resort to running low.
 18872                                  ;
 18873                                  ;	It also returns ES: -> 0ffffh if it returns success
 18874                                  ;
 18875                                  ; ----------------------------------------------------------------------
 18876                                  
 18877                                  AllocHMA:
 18878                                  ;	cas note:  The pre-286 check is no longer needed here since the
 18879                                  ;		   presence of XMS is sufficient. However, this code hasn't
 18880                                  ;		   been deleted because it can be recycled for skipping the
 18881                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 18882                                  ;		   in the case of a pre-286.
 18883                                  
 18884                                  ;;	see if we're running on a pre-286. If not, force low.
 18885                                  ;
 18886                                  ;	xor	ax,ax
 18887                                  ;	pushf			; save flags (like int)
 18888                                  ;	push	ax
 18889                                  ;	popf
 18890                                  ;	pushf
 18891                                  ;	pop	ax
 18892                                  ;	popf			; restore original flags (like int)
 18893                                  ;	and	ax,0F000h
 18894                                  ;	cmp	ax,0F000h	; 8088/8086?
 18895                                  ;	jz	short grab_hma_error
 18896                                  
 18897                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18898                                  	; (SYSINIT:0A26h)
 18899                                  
 18900 00000A63 1E                      	push	ds
 18901                                  	;;mov	ax,Bios_Data
 18902                                  	;mov	ax,KERNEL_SEGMENT
 18903                                  	; 21/10/2022
 18904 00000A64 B87000                  	mov	ax,DOSBIODATASEG
 18905 00000A67 8ED8                    	mov	ds,ax
 18906                                  
 18907 00000A69 E84A00                  	call	IsXMSLoaded
 18908 00000A6C 7545                    	jnz	short grabhma_error
 18909                                  
 18910 00000A6E B81043                  	mov	ax,4310h
 18911 00000A71 CD2F                    	int	2Fh		; get the vector into es:bx
 18912                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 18913                                  		; Return: ES:BX -> driver entry point
 18914                                  
 18915 00000A73 891E[0E00]              	mov	[xms],bx
 18916                                  	;mov	[0Eh], bx
 18917 00000A77 8C06[1000]              	mov	[xms+2],es
 18918                                  	;mov	[10h],es
 18919                                  
 18920 00000A7B B401                    	mov	ah,1		; request HMA
 18921 00000A7D BAFFFF                  	mov	dx,0FFFFh
 18922                                  	;call	dword ptr ds:0Eh
 18923 00000A80 FF1E[0E00]              	call	far [xms]
 18924 00000A84 48                      	dec	ax
 18925 00000A85 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 18926                                  
 18927                                  ;------ Himem may be lying because it has allocated mem for int 15
 18928                                  
 18929 00000A87 B488                    	mov	ah,88h
 18930 00000A89 CD15                    	int	15h
 18931                                  		; Get Extended Memory Size
 18932                                  		; Return: CF clear on success
 18933                                  		; AX = size of memory above 1M in K
 18934 00000A8B 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 18935                                  	;jb	short grabhma_error
 18936                                  	; 11/12/2022
 18937 00000A8E 7224                    	jb	short grabhma_err ; cf=1
 18938                                  allocHMA_1:
 18939 00000A90 B405                    	mov	ah,5		; localenableA20
 18940                                  	;call	dword ptr ds:0Eh
 18941 00000A92 FF1E[0E00]              	call	far [xms]
 18942 00000A96 48                      	dec	ax
 18943 00000A97 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 18944                                  
 18945 00000A99 E88901                  	call	IsVDiskInstalled
 18946 00000A9C 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 18947                                  
 18948 00000A9E B8FFFF                  	mov	ax,0FFFFh
 18949 00000AA1 8EC0                    	mov	es,ax
 18950 00000AA3 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 18951 00000AAA 26813E10003412          	cmp	word [es:10h],1234h
 18952                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 18953                                  	; 11/12/2022
 18954 00000AB1 7401                    	je	short allocHMA_ok	
 18955                                  
 18956                                  ; 11/12/2022
 18957                                  ;	; 11/12/2022
 18958                                  ;	; cf=0
 18959                                  ;	;clc
 18960                                  ;	pop	ds
 18961                                  ;	retn
 18962                                  
 18963                                  grabhma_error:
 18964 00000AB3 F9                      	stc
 18965                                  	; 11/12/022
 18966                                  grabhma_err:	; cf=1
 18967                                  allocHMA_ok:	; cf=0
 18968 00000AB4 1F                      	pop	ds
 18969 00000AB5 C3                      	retn
 18970                                  
 18971                                  ; ----------------------------------------------------------------------
 18972                                  ;
 18973                                  ; procedure : IsXMSLoaded
 18974                                  ;
 18975                                  ;             Checks whether a XMS driver is loaded
 18976                                  ;
 18977                                  ; Returns : Z flag set if XMS driver loaded
 18978                                  ;           Z flag reset if no XMS drivers are present
 18979                                  ;
 18980                                  ; ----------------------------------------------------------------------
 18981                                  
 18982                                  IsXMSLoaded:
 18983 00000AB6 B80043                  	mov	ax,4300h
 18984 00000AB9 CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 18985                                  				; Return: AL = 80h XMS driver installed
 18986                                  				; AL <> 80h no driver
 18987 00000ABB 3C80                    	cmp	al,80h		; XMS installed?
 18988 00000ABD C3                      	retn
 18989                                  
 18990                                  ; ----------------------------------------------------------------------
 18991                                  ; procedure : FTryToMovDOSHi
 18992                                  ;
 18993                                  ;		Called from HMA suballoc calls
 18994                                  ;	
 18995                                  ; ----------------------------------------------------------------------
 18996                                  
 18997                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18998                                  	; (SYSINIT:0A84h)
 18999                                  
 19000                                  FTryToMovDOSHi:	; proc	far
 19001                                  
 19002 00000ABE 50                      	push	ax
 19003 00000ABF 53                      	push	bx
 19004 00000AC0 51                      	push	cx
 19005 00000AC1 52                      	push	dx
 19006 00000AC2 56                      	push	si
 19007 00000AC3 57                      	push	di
 19008 00000AC4 1E                      	push	ds
 19009 00000AC5 06                      	push	es
 19010                                  
 19011                                  	; 23/10/2022
 19012                                  	; 27/03/2019 - Retro DOS v4.0
 19013                                  	; 11/12/2022
 19014 00000AC6 0E                      	push	cs
 19015 00000AC7 1F                      	pop	ds
 19016                                  
 19017                                  	;cmp	byte [cs:runhigh],0FFh
 19018                                  	; 11/12/2022
 19019 00000AC8 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 19020 00000ACD 7503                    	jne	short _ftymdh_1
 19021                                  
 19022                                  	; ds = cs
 19023 00000ACF E89FFE                  	call	TryToMovDOSHi
 19024                                  _ftymdh_1:
 19025 00000AD2 07                      	pop	es
 19026 00000AD3 1F                      	pop	ds
 19027 00000AD4 5F                      	pop	di
 19028 00000AD5 5E                      	pop	si
 19029 00000AD6 5A                      	pop	dx
 19030 00000AD7 59                      	pop	cx
 19031 00000AD8 5B                      	pop	bx
 19032 00000AD9 58                      	pop	ax
 19033                                  
 19034 00000ADA CB                      	retf
 19035                                  
 19036                                  ; ----------------------------------------------------------------------
 19037                                  ;
 19038                                  ; following piece of code will be moved into a para boundary. And the para
 19039                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 19040                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 19041                                  ; to determine free extended memory.
 19042                                  ;
 19043                                  ; For more details read "power programming" column by Ray Duncan in the
 19044                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 19045                                  ;
 19046                                  ; ----------------------------------------------------------------------
 19047                                  
 19048                                  StartVDHead:
 19049                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 19050                                  
 19051 00000ADB 00000000                	dd	0		; link to next device driver
 19052 00000ADF 0080                    	dw	8000h		; device attribute
 19053 00000AE1 0000                    	dw	0		; strategy routine offset
 19054 00000AE3 0000                    	dw	0		; interrupt routine offset
 19055 00000AE5 01                      	db	1		; number of units
 19056                                  	;db	7 dup(0) 
 19057 00000AE6 00<rep 7h>              	times	7 db 0 		; reserved area
 19058                                  VDiskSig1:
 19059 00000AED 564449534B              	db	'VDISK'
 19060                                  
 19061                                  VLEN1	equ	($-VDiskSig1)
 19062                                  
 19063 00000AF2 202056332E33            	db	'  V3.3'	; vdisk label
 19064                                  	;db	15 dup (0)	; pad
 19065 00000AF8 00<rep Fh>              	times	15 db 0
 19066 00000B07 0000                    	dw	0		; bits 0-15 of free HMA
 19067 00000B09 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 19068                                  VDInt19:
 19069 00000B0A EA                      	db	0EAh		; jmp to old vector
 19070                                  OldVDInt19:
 19071 00000B0B 00000000                	dd	0		; Saved int 19 vector
 19072                                  
 19073                                  EndVDHead: ; label byte
 19074                                  
 19075                                  VDiskHMAHead:	
 19076 00000B0F 000000                  	db	0,0,0		; non-bootable disk
 19077                                  VDiskSig2:
 19078 00000B12 564449534B              	db	'VDISK'
 19079                                  
 19080                                  VLEN2	equ	($-VDiskSig2)
 19081                                  
 19082 00000B17 332E33                  	db	'3.3'		; OEM - signature
 19083 00000B1A 8000                    	dw	128		; number of bytes/sector
 19084 00000B1C 01                      	db	1		; sectors/cluster
 19085 00000B1D 0100                    	dw	1		; reserved sectors
 19086 00000B1F 01                      	db	1		; number of FAT copies
 19087 00000B20 4000                    	dw	64		; number of root dir entries
 19088 00000B22 0002                    	dw	512		; number of sectors
 19089 00000B24 FE                      	db	0FEh		; media descriptor
 19090 00000B25 0600                    	dw	6		; number of sectors/FAT
 19091 00000B27 0800                    	dw	8		; sectors per track
 19092 00000B29 0100                    	dw	1		; number of heads
 19093 00000B2B 0000                    	dw	0		; number of hidden sectors
 19094 00000B2D 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 19095                                  
 19096                                  EndVDiskHMAHead: ; label byte
 19097                                  
 19098                                  ; ----------------------------------------------------------------------
 19099                                  ;
 19100                                  ; procedure : InstVDiskHeader
 19101                                  ;
 19102                                  ;             Installs the VDISK header to reserve the 64k of HMA
 19103                                  ;	      It puts a 32 byte header at 10000:0 and
 19104                                  ;	      another header at (seg of int19):0
 19105                                  ;
 19106                                  ; Inputs : None
 19107                                  ;
 19108                                  ; Outputs : None
 19109                                  ;
 19110                                  ; USES : DS,SI,AX,CX,DX
 19111                                  ;
 19112                                  ; ----------------------------------------------------------------------
 19113                                  
 19114                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19115                                  
 19116                                  InstVDiskHeader:
 19117 00000B2F 31C0                    	xor	ax,ax
 19118 00000B31 8ED8                    	mov	ds,ax			; seg of int vect table
 19119                                  
 19120                                  ;-------------- save old int 19 vector
 19121                                  
 19122                                  	; 23/10/2022
 19123 00000B33 A16400                  	mov	ax,[19h*4]
 19124                                  	;mov	[OldVDInt19],ax
 19125 00000B36 2EA3[0B0B]              	mov	[cs:OldVDInt19],ax
 19126 00000B3A A16600                  	mov	ax,[19h*4+2]
 19127                                  	;mov	[OldVDInt19+2],ax
 19128 00000B3D 2EA3[0D0B]              	mov	[cs:OldVDInt19+2],ax
 19129                                  
 19130                                  ;-------------- calculate seg of new int 19 handler
 19131                                  
 19132 00000B41 B448                    	mov	ah,48h			; allocate memory
 19133                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 19134                                  	; 23/10/2022
 19135 00000B43 BB0400                  	mov	bx,4
 19136 00000B46 CD21                    	int	21h
 19137                                  
 19138                                  ;	if carry, fatal hanging error!!!!!
 19139                                  
 19140 00000B48 48                      	dec	ax			; point to arena
 19141 00000B49 8EC0                    	mov	es,ax
 19142                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 19143 00000B4B 26C70601000800          	mov	word [es:1],8
 19144                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 19145 00000B52 26C70608005343          	mov	word [es:8],'SC'
 19146 00000B59 40                      	inc	ax
 19147 00000B5A 8EC0                    	mov	es,ax			; get back to allocated memory
 19148                                  
 19149                                  ;-------------- install new int 19 vector
 19150                                  
 19151 00000B5C FA                      	cli				; no reboots at this time
 19152                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 19153 00000B5D C70664002F00            	mov	word [19h*4],47
 19154 00000B63 A36600                  	mov	[19h*4+2],ax
 19155                                  
 19156                                  ;-------------- move the code into proper place
 19157                                  
 19158                                  	;mov	cx,(EndVDHead-StartVDHead)
 19159 00000B66 B93400                  	mov	cx,52
 19160 00000B69 BE[DB0A]                	mov	si,StartVDHead
 19161 00000B6C 31FF                    	xor	di,di
 19162 00000B6E 0E                      	push	cs
 19163 00000B6F 1F                      	pop	ds
 19164 00000B70 FC                      	cld
 19165 00000B71 F3A4                    	rep	movsb
 19166 00000B73 FB                      	sti				; BUGBUG is sti OK now?
 19167                                  
 19168                                  ;-------------- mov the HMA VDisk head into HMA
 19169                                  
 19170                                  	; 23/10/2022
 19171 00000B74 57                      	push	di
 19172 00000B75 06                      	push	es
 19173                                  
 19174 00000B76 B8FFFF                  	mov	ax,0FFFFh
 19175 00000B79 8EC0                    	mov	es,ax
 19176 00000B7B BF1000                  	mov	di,10h
 19177                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 19178 00000B7E B92000                  	mov	cx,32
 19179 00000B81 BE[0F0B]                	mov	si,VDiskHMAHead
 19180 00000B84 F3A4                    	rep	movsb			; ds already set to cs
 19181                                  
 19182 00000B86 5F                      	pop	di
 19183 00000B87 07                      	pop	es
 19184                                  
 19185 00000B88 C3                      	retn
 19186                                  
 19187                                  ; ----------------------------------------------------------------------
 19188                                  ; procedure : ClrVDISKHeader
 19189                                  ;
 19190                                  ;		Clears the first 32 bytes at 1MB boundary
 19191                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 19192                                  ;		left by previous DOS=HIGH session
 19193                                  ;
 19194                                  ; ----------------------------------------------------------------------
 19195                                  
 19196                                  struc desc
 19197 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 19198 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 19199 00000004 ??                       .hi_byte:	resb 	1		; address
 19200 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 19201 00000006 ????                     .reserved:	resw	1		;
 19202                                   .size:
 19203                                  endstruc
 19204                                  
 19205                                  		; 23/10/2022
 19206                                  bmove:		;label byte
 19207                                  
 19208                                  dummy:		;times desc.size db 0	; desc	<>
 19209 00000B89 00<rep 8h>              		times 8 db 0		 
 19210                                  gdt:		;times desc.size db 0	; desc	<>
 19211 00000B91 00<rep 8h>              		times 8 db 0
 19212 00000B99 FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 19213 00000B9B 0000                    		dw	0
 19214 00000B9D 00                      		db	0
 19215 00000B9E 93                      		db	93h
 19216 00000B9F 0000                    		dw	0
 19217 00000BA1 FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 19218 00000BA3 0000                    		dw	0
 19219 00000BA5 10                      		db	10h
 19220 00000BA6 93                      		db	93h
 19221 00000BA7 0000                    		dw	0
 19222                                  
 19223                                  rombios_code:	;times desc.size db 0	; desc	<>
 19224 00000BA9 00<rep 8h>              		times 8 db 0
 19225                                  temp_stack:	;times desc.size db 0	; desc	<>
 19226 00000BB1 00<rep 8h>              		times 8 db 0
 19227                                  
 19228 00000BB9 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 19229                                  
 19230                                  
 19231                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIT1.ASM)
 19232                                  
 19233                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 19234                                  ; (SYSINIT:0CA6h)
 19235                                  
 19236                                  ClrVDISKHeader:	; proc	near
 19237                                  
 19238                                  ;;-----------------------------------------------------------	      ;I070
 19239                                  ;; The following workaround get around a problem with the	      ;I070
 19240                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	      ;I070
 19241                                  ;; is set. On those machines the INT 15h block move code	      ;I070
 19242                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	      ;I070
 19243                                  ;; In password server mode the 8042 is disabled so the block	      ;I070
 19244                                  ;; move crashes the system. We can do this because these	      ;I070
 19245                                  ;; systems clear all of memory on a cold boot.			      ;I070
 19246                                  ;								      ;I070
 19247                                  ;               in      al,64h         ; Test for password servr mode ;I070
 19248                                  ;               test    al,10h         ; Is keyboard inhibited?	      ;I070
 19249                                  ;               jnz     short ClrVDISKok ; No, go do block move.      ;I070
 19250                                  ;                                      ; Check for Tortugas...	      ;I070
 19251                                  ;               cmp     word [cs:sys_model_byte],19F8h                ;I070
 19252                                  ;               je      short ClrVDISKno                              ;I070
 19253                                  ;                                      ; Check for mod 30-286	      ;I070
 19254                                  ;               cmp     word [cs:sys_model_byte],09FCh                ;I070
 19255                                  ;               jne     short ClrVDISKok			      ;I070
 19256                                  ;ClrVDISKno: 	retn	               ; Return w/o block move.	      ;I070
 19257                                  ;								      ;I070
 19258                                  ;ClrVDISKok:							      ;I070
 19259                                  ;-----------------------------------------------------------	      ;I070
 19260                                  
 19261                                  	; 12/12/2022
 19262                                  	; ds = cs
 19263                                  
 19264                                  	; 30/12/2022 - Retro DOS v4.2
 19265                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0CBFh)
 19266                                  
 19267 00000BD9 06                      	push	es
 19268 00000BDA 8CC8                    	mov	ax,cs
 19269 00000BDC 89C2                    	mov	dx,ax
 19270 00000BDE B10C                    	mov	cl,12
 19271 00000BE0 D3EA                    	shr	dx,cl
 19272 00000BE2 B104                    	mov	cl,4
 19273 00000BE4 D3E0                    	shl	ax,cl
 19274 00000BE6 05[B90B]                	add	ax,ClrdVDISKHead
 19275 00000BE9 80D200                  	adc	dl,0
 19276                                  
 19277                                  	;; 23/10/2022
 19278                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 19279                                  	;mov	[cs:src_desc+2],ax
 19280                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 19281                                  	;mov	[cs:src_desc+4],dl
 19282                                  	; 12/12/2022
 19283                                  	;mov	[src_desc+desc.lo_word],ax
 19284 00000BEC A3[9B0B]                	mov	[src_desc+2],ax
 19285                                  	;mov	[src_desc+desc.hi_byte],dl
 19286 00000BEF 8816[9D0B]              	mov	[src_desc+4],dl
 19287                                  
 19288 00000BF3 B91000                  	mov	cx,16	; 16 words
 19289 00000BF6 0E                      	push	cs
 19290 00000BF7 07                      	pop	es
 19291 00000BF8 BE[890B]                	mov	si,bmove
 19292 00000BFB B487                    	mov	ah,87h
 19293 00000BFD CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 19294                                  			; CX = number of words to move 
 19295                                  			; ES:SI -> global descriptor table
 19296                                  			; Return: CF set on error, AH = status
 19297 00000BFF 07                      	pop	es
 19298 00000C00 C3                      	retn
 19299                                  
 19300                                  ; ----------------------------------------------------------------------
 19301                                  ;
 19302                                  ; procedure : SaveFreeHMAPtr
 19303                                  ;
 19304                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 19305                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 19306                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 19307                                  ;		the offset.
 19308                                  ;
 19309                                  ; Inputs : ES:DI - pointer to free HMA
 19310                                  ; Output : FreeHMAPtr in BIOS data segment updated
 19311                                  ;
 19312                                  ; ----------------------------------------------------------------------
 19313                                  
 19314                                  SaveFreeHMAPtr:
 19315 00000C01 8CC3                    	mov	bx,es
 19316 00000C03 B8FFFF                  	mov	ax,0FFFFh		; HMA segment
 19317 00000C06 29D8                    	sub	ax,bx
 19318 00000C08 83C70F                  	add	di,15			; para round
 19319 00000C0B 83E7F0                  	and	di,0FFF0h
 19320 00000C0E B104                    	mov	cl,4
 19321 00000C10 D3E0                    	shl	ax,cl
 19322 00000C12 29C7                    	sub	di,ax
 19323 00000C14 1E                      	push	ds
 19324                                  	;;mov	ax,Bios_Data ; 0070h
 19325                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19326                                  	; 21/10/2022
 19327 00000C15 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19328 00000C18 8ED8                    	mov	ds,ax
 19329 00000C1A 893E[F508]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 19330 00000C1E C606[0D00]FF            	mov	byte [inHMA],0FFh  ; (ds:0Dh)
 19331 00000C23 1F                      	pop	ds
 19332 00000C24 C3                      	retn
 19333                                  
 19334                                  ; ----------------------------------------------------------------------
 19335                                  ;
 19336                                  ; procedure : IsVDiskInstalled
 19337                                  ;
 19338                                  ;		Checks for the presence of VDISK header at 1MB boundary
 19339                                  ;		& INT 19 vector
 19340                                  ;
 19341                                  ; Inputs  : A20 flag should be ON
 19342                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 19343                                  ;
 19344                                  ; ----------------------------------------------------------------------
 19345                                  
 19346                                  IsVDiskInstalled:
 19347 00000C25 31C0                    	xor	ax,ax
 19348 00000C27 8ED8                    	mov	ds,ax
 19349 00000C29 8E1E4E00                	mov	ds,[19*4+2]
 19350                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 19351                                  	; 23/10/2022
 19352 00000C2D BE1200                  	mov	si,18
 19353                                  	;mov	cx,VLEN1 ; 5
 19354 00000C30 B90500                  	mov	cx,5
 19355 00000C33 0E                      	push	cs
 19356 00000C34 07                      	pop	es
 19357 00000C35 BF[ED0A]                	mov	di,VDiskSig1
 19358 00000C38 F3A6                    	rep	cmpsb
 19359 00000C3A 7410                    	je	short ivdins_retn
 19360 00000C3C B8FFFF                  	mov	ax,0FFFFh
 19361 00000C3F 8ED8                    	mov	ds,ax
 19362                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 19363 00000C41 BE1300                  	mov	si,13h
 19364 00000C44 BF[120B]                	mov	di,VDiskSig2
 19365                                  	;mov	cx,VLEN2  ; 5
 19366 00000C47 B90500                  	mov	cx,5
 19367 00000C4A F3A6                    	rep	cmpsb
 19368                                  ivdins_retn: 
 19369 00000C4C C3                      	retn			; returns the Zero flag
 19370                                  
 19371                                  ; ----------------------------------------------------------------------
 19372                                  ;
 19373                                  ; procedure : CPMHack
 19374                                  ;
 19375                                  ;		Copies the code from 0:c0 into ffff:0d0h
 19376                                  ;		for CPM compatibility
 19377                                  ;
 19378                                  ; ----------------------------------------------------------------------
 19379                                  
 19380                                  	; 11/12/2022
 19381                                  CPMHack:
 19382 00000C4D 1E                      	push	ds
 19383 00000C4E B9FFFF                  	mov	cx,0FFFFh
 19384 00000C51 8EC1                    	mov	es,cx		; ES = FFFF
 19385                                  	;xor	cx,cx
 19386                                  	; 11/12/2022
 19387 00000C53 41                      	inc	cx  ; cx = 0
 19388 00000C54 8ED9                    	mov	ds,cx		; DS = 0
 19389 00000C56 BEC000                  	mov	si,0C0h
 19390 00000C59 BFD000                  	mov	di,0D0h
 19391                                  	;mov	cx,5
 19392 00000C5C B105                    	mov	cl,5
 19393 00000C5E FC                      	cld
 19394 00000C5F F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 19395 00000C61 1F                      	pop	ds
 19396 00000C62 C3                      	retn
 19397                                  
 19398                                  ; ----------------------------------------------------------------------
 19399                                  ;
 19400                                  ; procedure : off_to_para
 19401                                  ;
 19402                                  ; ----------------------------------------------------------------------
 19403                                  off_to_para:
 19404 00000C63 D1E8                    	shr	ax,1
 19405 00000C65 D1E8                    	shr	ax,1
 19406 00000C67 D1E8                    	shr	ax,1
 19407 00000C69 D1E8                    	shr	ax,1
 19408 00000C6B C3                      	retn
 19409                                  
 19410                                  ; ----------------------------------------------------------------------
 19411                                  ;**	TempCDS - Create (Temporary?) CDS
 19412                                  ;
 19413                                  ;	ENTRY	?? BUGBUG
 19414                                  ;		(DS) = SysInitSeg
 19415                                  ;	EXIT	?? BUGBUG
 19416                                  ;	USES	?? BUGBUG
 19417                                  ; ----------------------------------------------------------------------
 19418                                  
 19419                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19420                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 19421                                  TempCDS:
 19422 00000C6C C43E[6B02]              	les	di,[DOSINFO]
 19423 00000C70 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 19424                                  	;mov	cl,[es:di+20h]
 19425 00000C74 30ED                    	xor	ch,ch			; (cx) = # of block devices
 19426                                  
 19427 00000C76 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 19428                                  	;mov	[es:di+21h],cl	
 19429                                  
 19430 00000C7A 88C8                    	mov	al,cl
 19431 00000C7C B458                    	mov	ah,curdirlen ; curdir_list.size ; 88
 19432                                  	;mov	ah,88
 19433 00000C7E F6E4                    	mul	ah			; (ax) = byte size for those CDSs
 19434 00000C80 E8E604                  	call	ParaRound		; (ax) = paragraph size for CDSs
 19435 00000C83 8B36[A502]              	mov	si,[top_of_cdss] ; 31/12/2022
 19436                                  
 19437                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 19438                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 19439                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 19440                                  ;		   variable which has the top of free memory for
 19441                                  ;		   device driver loads, etc.
 19442                                  
 19443 00000C87 29C6                    	sub	si,ax
 19444                                  
 19445                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 19446                                  ;		that automatically updates alloclim every time we
 19447                                  ;		set up some new CDSs. Instead, I've added code
 19448                                  ;		which pre-allocates space for 26 CDSs. This
 19449                                  ;	        way we've got room for worst case CDSs before
 19450                                  ;		we place MagicDrv.sys
 19451                                  ;
 19452                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 19453                                  
 19454                                  	; 30/12/2022
 19455                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19456                                  	; (SYSINIT:0C52h)
 19457                                  	;mov	[ALLOCLIM],si ; (MSDOS 5.0 SYSINIT)
 19458                                  
 19459 00000C89 26897518                	mov	[es:di+SYSI_CDS+2],si
 19460                                  	;mov	[es:di+18h],si
 19461 00000C8D 89F0                    	mov	ax,si
 19462 00000C8F 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 19463                                  	;mov	[word es:di+16h],0
 19464                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 19465 00000C95 26C535                  	lds	si,[es:di]
 19466 00000C98 8EC0                    	mov	es,ax
 19467 00000C9A 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 19468                                  
 19469                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 19470                                  ;	info from the corresponding DPB.
 19471                                  ;
 19472                                  ;	(cx) = count of CDSs left to process
 19473                                  ;	(es:di) = address of next CDS
 19474                                  
 19475                                  fooset:
 19476                                  	; 23/10/2022
 19477 00000C9C 2EA1[A702]              	mov	ax,[cs:DirStrng] ; "A:"
 19478 00000CA0 AB                      	stosw				; setup the root as the curdir
 19479                                  	
 19480                                  	; 23/10/2022 (MSDOS 5.0 SYSINIT)
 19481                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 19482                                  
 19483                                  	; 30/12/2022
 19484                                  	; (MSDOS 6.21 SYSINIT:0D8Bh)
 19485 00000CA1 E85C00                  	call	get_dpb_for_drive_al	; get dpb for drive in dpb
 19486                                  
 19487                                  ;	(ds:si) = address of DPB
 19488                                  ;		 (si) = -1 if no drive
 19489                                  
 19490 00000CA4 2EA1[A902]              	mov	ax,[cs:DirStrng+2] ; "\",0
 19491 00000CA8 AB                      	stosw
 19492 00000CA9 2EFE06[A702]            	inc	byte [cs:DirStrng]
 19493 00000CAE 31C0                    	xor	ax,ax
 19494 00000CB0 51                      	push	cx
 19495                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 19496 00000CB1 B93F00                  	mov	cx,63	; 23/10/2022
 19497 00000CB4 F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 19498                                  
 19499                                  ;	should handle the system that does not have any floppies.
 19500                                  ;	in this case,we are going to pretended there are two dummy floppies
 19501                                  ;	in the system. still they have dpb and cds,but we are going to
 19502                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 19503                                  ;	"invalid drive specification" message when the user try to
 19504                                  ;	access them.
 19505                                  ;
 19506                                  ;	(ax) = 0
 19507                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19508                                  ;	(ds:si) = Next DPB (-1 if none)
 19509                                  
 19510 00000CB6 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 19511 00000CB9 7414                    	je	short fooset_zero	; don't have any physical drive.
 19512                                  
 19513                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 19514                                  ;	if we are faking floppy drives then see if this cds being initialised
 19515                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 19516                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 19517                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 19518                                  ;	for dpb offsets look at inc\dpb.inc.
 19519                                  
 19520 00000CBB 2E803E[8902]01          	cmp	byte [cs:fake_floppy_drv],1
 19521 00000CC1 7513                    	jne	short normcds 		; machine has floppy drives
 19522                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 19523 00000CC3 803C01                  	cmp	byte [si],1
 19524 00000CC6 770E                    	ja	short normcds
 19525 00000CC8 B103                    	mov	cl,3			; the next dbp pointer
 19526                                  					; AX should be zero here
 19527 00000CCA F3AB                    	rep	stosw
 19528 00000CCC 59                      	pop	cx
 19529 00000CCD EB18                    	jmp	short get_next_dpb
 19530                                  
 19531                                  ;	(ax) = 0
 19532                                  
 19533                                  fooset_zero:
 19534 00000CCF B103                    	mov	cl,3
 19535 00000CD1 F3AB                    	rep	stosw
 19536 00000CD3 59                      	pop	cx
 19537 00000CD4 EB11                    	jmp	short fincds
 19538                                  
 19539                                  ;*	We have a "normal" DPB and thus a normal CDS.
 19540                                  ;
 19541                                  ;	(ax) = 0
 19542                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19543                                  ;	(ds:si) = Next DPB (-1 if none)
 19544                                  
 19545                                  normcds:
 19546 00000CD6 59                      	pop	cx
 19547                                  
 19548                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 19549                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 19550                                  ;	this media is a non-fat based one.
 19551                                  
 19552                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 19553                                  	; 23/10/2022
 19554 00000CD7 807C0800                	cmp	byte [si+8],0
 19555 00000CDB 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 19556 00000CDD B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 19557                                  	;mov	ax,4000h
 19558                                  setnormcds:
 19559 00000CE0 AB                      	stosw				; curdir_flags
 19560 00000CE1 89F0                    	mov	ax,si
 19561 00000CE3 AB                      	stosw				; curdir_devptr
 19562 00000CE4 8CD8                    	mov	ax,ds
 19563 00000CE6 AB                      	stosw
 19564                                  
 19565                                  get_next_dpb:				; entry point for fake_fooset_zero
 19566                                  	; 30/12/2022
 19567                                  	; (MSDOS 6.21 SYSINIT:0DD1h)
 19568                                  	; 23/10/2022
 19569                                  	;lds	si,[si+19h] ; (MSDOS 5.0 SYSINIT)
 19570                                  	;;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19571                                  fincds:	; get_next_dpb
 19572                                  	; 30/12/2022
 19573                                  	; (MSDOS 6.21 SYSINIT:0DD1h)
 19574 00000CE7 B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 19575 00000CEA AB                      	stosw				; curdir_id
 19576 00000CEB AB                      	stosw				; curdir_id
 19577 00000CEC AB                      	stosw				; curdir_user_word
 19578 00000CED B80200                  	mov	ax,2
 19579 00000CF0 AB                      	stosw				; curdir_end
 19580 00000CF1 B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 19581 00000CF3 AA                      	stosb
 19582 00000CF4 AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 19583 00000CF5 AB                      	stosw
 19584 00000CF6 AB                      	stosw
 19585                                  
 19586 00000CF7 E2A3                    	loop	fooset
 19587                                  	
 19588 00000CF9 2EC606[A702]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 19589                                  	
 19590 00000CFF C3                      	retn
 19591                                  
 19592                                  ; ----------------------------------------------------------------------
 19593                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 19594                                  ;
 19595                                  ;	entry:
 19596                                  ;	   al == ASCII CAPS drive letter
 19597                                  ;
 19598                                  ;	exit:
 19599                                  ;	   ds:si -> DPB, or si = -1 if not found
 19600                                  ; ----------------------------------------------------------------------
 19601                                  
 19602                                  ; 30/12/2022
 19603                                  ; (MSDOS 6.21 SYSINIT:0DEAh)
 19604                                  ; 23/10/2022
 19605                                  ;%if 0
 19606                                  get_dpb_for_drive_al:
 19607 00000D00 2EC536[6B02]            	lds	si,[cs:DOSINFO]		; point to first DPB
 19608                                  	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 19609 00000D05 C534                    	lds	si,[si]
 19610 00000D07 2C41                    	sub	al,'A'
 19611                                  
 19612                                  get_dpb_for_drive_1:
 19613                                  	;cmp	al,[si+DPB.DRIVE]	; match?
 19614 00000D09 3A04                    	cmp	al,[si]
 19615 00000D0B 7408                    	je	short got_dpb_for_drive	;  done if so
 19616                                  
 19617 00000D0D C57419                  	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19618 00000D10 83FEFF                  	cmp	si,-1
 19619 00000D13 75F4                    	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 19620                                  
 19621                                  got_dpb_for_drive:
 19622 00000D15 C3                      	retn
 19623                                  ;%endif  ; 23/10/2022
 19624                                  
 19625                                  ;=======================================================================
 19626                                  
 19627                                  ;**	EndFile - Build DOS structures
 19628                                  ;
 19629                                  ; This procedure is called after the config.sys has been processed and
 19630                                  ; installable device drivers have been loaded (but before "install="
 19631                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 19632                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 19633                                  ; to allow for the safe EXECing of "install=" programs. All memory
 19634                                  ; above these structures is deallocated back to DOS.
 19635                                  ;
 19636                                  ;	ENTRY	?? BUGBUG
 19637                                  ;	EXIT	?? BUGBUG
 19638                                  ;	USES	?? BUGBUG
 19639                                  
 19640                                  ;=======================================================================
 19641                                  ; allocate files
 19642                                  ; ----------------------------------------------------------------------
 19643                                  
 19644                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19645                                  	; (SYSINIT:0CCDh)
 19646                                  
 19647                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 19648                                  	; (SYSINIT:0E00h)
 19649                                  endfile:
 19650                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 19651                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 19652                                  ; to confbot.
 19653                                  
 19654                                  ;	if this procedure has been called to take care of install= command,
 19655                                  ;	   then we have to save es,si registers.
 19656                                  
 19657                                  	; 11/12/2022
 19658                                  	; ds = cs
 19659                                  
 19660                                  	; 23/10/2022
 19661                                  	; 31/03/2019
 19662 00000D16 1E                      	push	ds
 19663                                  
 19664                                  	;;mov	ax,Bios_Data ; 0070h
 19665                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19666                                  	; 21/10/2022
 19667 00000D17 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19668 00000D1A 8ED8                    	mov	ds,ax
 19669                                  
 19670                                  	;cmp	word [052Fh],0
 19671 00000D1C 833E[2F05]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 19672 00000D21 7505                    	jne	short multrk_flag_done
 19673                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19674                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 19675                                  	; 12/12/2022
 19676 00000D23 800E[2F05]80            	or	byte [multrk_flag],multrk_on ; 80h
 19677                                  multrk_flag_done:
 19678                                  	; 23/10/2022
 19679                                  	; 31/03/2019
 19680 00000D28 1F                      	pop	ds
 19681                                  
 19682                                  	; 11/12/2022
 19683                                  	; ds = cs
 19684                                  	;mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 19685                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 19686                                  	; (SYSINIT:0E14h)
 19687 00000D29 A1[A102]                	mov	ax,[CONFBOT]
 19688 00000D2C A3[A302]                	mov	[ALLOCLIM],ax
 19689                                  	; 23/10/2022
 19690                                  	;mov	ax, [cs:top_of_cdss]
 19691                                  	;mov	[cs:ALLOCLIM], ax 
 19692                                  
 19693                                  	; 11/12/2022
 19694                                  	; ds = cs
 19695                                  	;push	cs
 19696                                  	;pop	ds
 19697                                  	
 19698                                  	;mov	ax,[CONFBOT]
 19699                                  	;mov	[ALLOCLIM],ax
 19700                                  
 19701 00000D2F E83C36                  	call	round
 19702                                  	; 11/12/2022
 19703                                  	; ds = cs
 19704 00000D32 A0[9D02]                	mov	al,[FILES]
 19705                                  	; 23/10/2022
 19706                                  	;mov	al,[cs:FILES]
 19707 00000D35 2C05                    	sub	al,5
 19708 00000D37 764B                    	jbe	short dofcbs
 19709                                  
 19710 00000D39 50                      	push	ax
 19711                                  	;mov	al,devmark_files ; 'F'
 19712 00000D3A B046                    	mov	al,'F'
 19713 00000D3C E87C07                  	call	setdevmark		; set devmark for sfts (files)
 19714 00000D3F 58                      	pop	ax
 19715 00000D40 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 19716                                  					;  it does sign extend.
 19717                                  	; 11/12/2022
 19718                                  	; ds = cs
 19719 00000D42 8B1E[6003]              	mov	bx,[memlo]
 19720 00000D46 8B16[6203]              	mov	dx,[memhi]
 19721 00000D4A C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 19722                                  	; 23/10/2022
 19723                                  	;mov	bx,[cs:memlo]
 19724                                  	;mov	dx,[cs:memhi]
 19725                                  	;lds	di,[cs:DOSINFO]		
 19726                                  
 19727                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 19728 00000D4E C57D04                  	lds	di,[di+4]
 19729                                  
 19730                                  	;mov	[di+SF.SFLink],bx
 19731 00000D51 891D                    	mov	[di],bx
 19732 00000D53 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 19733                                  
 19734 00000D56 0E                      	push	cs
 19735 00000D57 1F                      	pop	ds
 19736                                  
 19737                                  	; 11/12/2022
 19738                                  	; ds = cs
 19739 00000D58 C43E[6003]              	les	di,[memlo]		;point to new sft
 19740                                  	; 23/10/2022
 19741                                  	;les	di,[cs:memlo]
 19742                                  
 19743                                  	;mov	word [es:di+SF.SFLink],-1
 19744 00000D5C 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 19745                                  	;mov	[es:di+SF.SFCount],ax
 19746 00000D61 26894504                	mov	[es:di+4],ax
 19747                                  	;mov	bl,SF_ENTRY.size ; 59
 19748 00000D65 B33B                    	mov	bl,59
 19749 00000D67 F6E3                    	mul	bl			;ax = number of bytes to clear
 19750 00000D69 89C1                    	mov	cx,ax
 19751                                  	; 11/12/2022
 19752                                  	; ds = cs
 19753 00000D6B 0106[6003]              	add	[memlo],ax		;allocate memory
 19754                                  	; 23/10/2022
 19755                                  	;add	[cs:memlo],ax
 19756 00000D6F B80600                  	mov	ax,6
 19757                                  	; 11/12/2022
 19758 00000D72 0106[6003]              	add	[memlo],ax		;remember the header too
 19759                                  	;add	[cs:memlo],ax
 19760                                  	; 11/12/2022
 19761 00000D76 800E[E414]02            	or	byte [setdevmarkflag],for_devmark ; 2
 19762                                  	; 23/10/2022
 19763                                  	;or	byte [cs:setdevmarkflag],2
 19764 00000D7B E8F035                  	call	round			; check for mem error before the stosb
 19765 00000D7E 01C7                    	add	di,ax
 19766 00000D80 31C0                    	xor	ax,ax
 19767 00000D82 F3AA                    	rep	stosb			;clean out the stuff
 19768                                  
 19769                                  ; allocate fcbs
 19770                                  ; ----------------------------------------------------------------------
 19771                                  
 19772                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19773                                  	; (SYSINIT:0D48h)
 19774                                  dofcbs:
 19775                                  	; 11/12/2022
 19776                                  	; ds = cs
 19777                                  	;push	cs
 19778                                  	;pop	ds
 19779 00000D84 E8E735                  	call	round
 19780                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 19781 00000D87 B058                    	mov	al,'X'
 19782 00000D89 E82F07                  	call	setdevmark
 19783                                  	; 11/12/2022
 19784                                  	; ds = cs
 19785 00000D8C A0[9E02]                	mov	al,[FCBS]
 19786                                  	;mov	al,[cs:FCBS]
 19787 00000D8F 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 19788                                  					;  it does sign extend.
 19789                                  	; 11/12/2022
 19790 00000D91 8B1E[6003]              	mov	bx,[memlo]
 19791 00000D95 8B16[6203]              	mov	dx,[memhi]
 19792 00000D99 C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 19793                                  	; 23/10/2022
 19794                                  	;mov	bx,[cs:memlo]
 19795                                  	;mov	dx,[cs:memhi]
 19796                                  	;lds	di,[cs:DOSINFO]
 19797                                  
 19798                                  	;mov	[di+SYSI_FCB],bx
 19799                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 19800                                  	; 23/10/2022
 19801 00000D9D 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 19802 00000DA0 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 19803                                  
 19804 00000DA3 2E8A1E[9F02]            	mov	bl,[cs:KEEP]
 19805 00000DA8 30FF                    	xor	bh,bh
 19806                                  	;mov	[di+SYSI_KEEP],bx
 19807 00000DAA 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 19808                                  
 19809 00000DAD 0E                      	push	cs
 19810 00000DAE 1F                      	pop	ds
 19811                                  	
 19812 00000DAF C43E[6003]              	les	di,[memlo]		;point to new table
 19813                                  	;mov	word [es:di+SF.SFLink],-1
 19814 00000DB3 26C705FFFF              	mov	word [es:di],-1
 19815                                  	;mov	[es:di+SF.SFCount],ax
 19816                                  	; 02/11/2022
 19817 00000DB8 26894504                	mov	[es:di+4],ax
 19818 00000DBC B339                    	mov	bl,SF_ENTRY.size ; 59
 19819 00000DBE 89C1                    	mov	cx,ax
 19820 00000DC0 F6E3                    	mul	bl			;ax = number of bytes to clear
 19821 00000DC2 0106[6003]              	add	[memlo],ax		;allocate memory
 19822                                  	;mov	ax,6
 19823 00000DC6 B80600                  	mov	ax,SF.size-2 ; 6
 19824 00000DC9 0106[6003]              	add	[memlo],ax		;remember the header too
 19825                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 19826 00000DCD 800E[E414]02            	or	byte [setdevmarkflag],2
 19827 00000DD2 E89935                  	call	round			; check for mem error before the stosb
 19828 00000DD5 01C7                    	add	di,ax			;skip over header
 19829 00000DD7 B041                    	mov	al,'A'
 19830                                  fillloop:
 19831 00000DD9 51                      	push	cx			; save count
 19832 00000DDA B93900                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 19833 00000DDD FC                      	cld
 19834 00000DDE F3AA                    	rep	stosb			; filled
 19835                                  
 19836                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 19837                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]	
 19838                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 19839                                  
 19840                                  	; 18/12/2022
 19841                                  	;cx = 0
 19842 00000DE0 26894DC7                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 19843 00000DE4 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]	
 19844 00000DE8 26894DDE                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 19845                                  	
 19846                                  	; 23/10/2022	
 19847                                  	;mov     word [es:di-3Bh],0
 19848                                  	;mov     word [es:di-26h],0
 19849                                  	;mov     word [es:di-24h],0
 19850                                  
 19851 00000DEC 59                      	pop	cx
 19852 00000DED E2EA                    	loop	fillloop
 19853                                  
 19854                                  ; allocate buffers
 19855                                  ; ----------------------------------------------------------------------
 19856                                  
 19857                                  ; search through the list of media supported and allocate 3 buffers if the
 19858                                  ; capacity of the drive is > 360kb
 19859                                  
 19860                                  	; 18/12/2022
 19861                                  	; cx = 0
 19862 00000DEF 833E[9702]FF            	cmp	word [buffers],-1	; has buffers been already set?
 19863 00000DF4 7403                    	je	short dodefaultbuff
 19864 00000DF6 E98700                  	jmp	dobuff			; the user entered the buffers=.
 19865                                  
 19866                                  dodefaultbuff:
 19867                                  	; 18/12/2022
 19868 00000DF9 890E[9902]              	mov	[h_buffers],cx ; 0
 19869 00000DFD 41                      	inc	cx
 19870 00000DFE 41                      	inc	cx
 19871 00000DFF 890E[9702]              	mov	[buffers],cx ; 2	
 19872                                  	
 19873                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 19874                                  	;mov	word [buffers],2	; default to 2 buffers
 19875                                  
 19876                                  	; 23/10/2022	
 19877 00000E03 50                      	push	ax
 19878 00000E04 1E                      	push	ds ; 26/03/2019
 19879                                  	;les	bp,[DOSINFO]		; search through the dpb's
 19880 00000E05 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 19881                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 19882                                  	; 11/12/2022
 19883 00000E0A 26C46E00                	les	bp,[es:bp]
 19884                                  	; 23/10/2022
 19885                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 19886                                  
 19887 00000E0E 0E                      	push	cs
 19888 00000E0F 1F                      	pop	ds
 19889                                  ;SYSINIT:0DE2h:
 19890                                  nextdpb:				; test if the drive supports removeable media
 19891                                  	;mov	bl,[es:bp+DPB.drive]
 19892                                  	; 11/12/2022
 19893 00000E10 268A5E00                	mov	bl,[es:bp]
 19894                                  	; 23/10/2022
 19895                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 19896                                  
 19897                                  	;inc	bl
 19898                                  	; 18/12/2022
 19899 00000E14 43                      	inc	bx
 19900                                  
 19901                                  	;mov	ax,(IOCTL<<8)|8
 19902 00000E15 B80844                  	mov	ax,4408h
 19903 00000E18 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 19904                                  
 19905                                  ; ignore fixed disks
 19906                                  
 19907 00000E1A 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 19908 00000E1C 7534                    	jnz	short nosetbuf
 19909                                  
 19910                                  ; get parameters of drive
 19911                                  
 19912 00000E1E 31DB                    	xor	bx,bx
 19913                                  	;;mov	bl,[es:bp+DPB.drive]
 19914                                  	; 11/12/2022
 19915 00000E20 268A5E00                	mov	bl,[es:bp]
 19916                                  	; 23/10/2022
 19917                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 19918                                  	
 19919                                  	;inc	bl
 19920                                  	; 18/12/2022
 19921 00000E24 43                      	inc	bx
 19922                                  
 19923 00000E25 BA[8B49]                	mov	dx,deviceparameters
 19924                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 19925 00000E28 B80D44                  	mov	ax,440Dh
 19926                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 19927 00000E2B B96008                  	mov	cx,860h
 19928 00000E2E CD21                    	int	21h		; DOS - 2+ - IOCTL -
 19929 00000E30 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 19930                                  					; generic ioctl
 19931                                  ; determine capacity of drive
 19932                                  ; media capacity = #sectors * bytes/sector
 19933                                  
 19934                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS]
 19935                                  	; 23/10/2022
 19936 00000E32 8B1E[9A49]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 19937                                  	
 19938                                  ; to keep the magnitude of the media capacity within a word,
 19939                                  ; scale the sector size
 19940                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 19941                                  
 19942                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR]
 19943                                  	; 23/10/2022
 19944 00000E36 A1[9249]                	mov	ax, [deviceparameters+7] ; bytes per sector
 19945 00000E39 31D2                    	xor	dx,dx
 19946 00000E3B B90002                  	mov	cx,512
 19947 00000E3E F7F1                    	div	cx			; scale sector size in factor of
 19948                                  					; 512 bytes
 19949 00000E40 F7E3                    	mul	bx			; ax = #sectors * size factor
 19950 00000E42 09D2                    	or	dx,dx			; just in case of large floppies
 19951 00000E44 7505                    	jnz	short setbuf
 19952 00000E46 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 19953 00000E49 7607                    	jbe	short nosetbuf
 19954                                  setbuf:
 19955                                  	; 18/12/2022
 19956                                  	; word [buffers] = 2
 19957 00000E4B C606[9702]03            	mov	byte [buffers],3
 19958                                  	;mov	word [buffers],3
 19959 00000E50 EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 19960                                  					; for default buffer count
 19961                                  nosetbuf:
 19962                                  	; 23/10/2022
 19963                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 19964 00000E52 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 19965 00000E57 7406                    	je	short chk_memsize_for_buffers
 19966                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 19967 00000E59 26C46E19                	les	bp,[es:bp+19h]
 19968 00000E5D EBB1                    	jmp	short nextdpb
 19969                                  
 19970                                  ;from dos 3.3,the default number of buffers will be changed according to the
 19971                                  ;memory size too.
 19972                                  ; default buffers = 2
 19973                                  ; if diskette media > 360 kb,then default buffers = 3
 19974                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 19975                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 19976                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 19977                                  
 19978                                  chk_memsize_for_buffers:
 19979                                  	; 18/12/2022
 19980                                  	;cmp	word [MEMORY_SIZE],2000h
 19981                                  	;jbe	short bufset
 19982                                  	;mov	word [buffers],5
 19983                                  	;cmp	word [MEMORY_SIZE],4000h
 19984                                  	;jbe	short bufset
 19985                                  	;mov	word [buffers],10
 19986                                  	;cmp	word [MEMORY_SIZE],8000h
 19987                                  	;jbe	short bufset
 19988                                  	;mov	word [buffers],15
 19989                                  
 19990                                  	; 18/12/2022
 19991                                  	; word [buffers] = 3 or 2
 19992 00000E5F BB[9702]                	mov	bx,buffers
 19993 00000E62 A1[9202]                	mov	ax,[MEMORY_SIZE]
 19994 00000E65 48                      	dec	ax	; [MEMORY_SIZE] - 1
 19995                                  
 19996 00000E66 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 19997 00000E69 7213                    	jb	short bufset
 19998 00000E6B C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 19999 00000E6E 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 20000 00000E71 730B                    	jnb	short bufset
 20001 00000E73 C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 20002 00000E76 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 20003 00000E79 7303                    	jnb	short bufset
 20004 00000E7B C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 20005                                  bufset:
 20006                                  	; 23/10/2022
 20007                                  	; 26/03/2019
 20008 00000E7E 1F                      	pop	ds
 20009 00000E7F 58                      	pop	ax
 20010                                  
 20011                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20012                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 20013                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20014                                  
 20015                                  ; 26/03/2019
 20016                                  
 20017                                  ;*******************************************************************************
 20018                                  ;									       *
 20019                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 20020                                  ; input :								       *
 20021                                  ;    memhi:memlo - start of the next available memory			       *
 20022                                  ;    buffers = number of buffers					       *
 20023                                  ;    h_buffers = number of secondary buffers				       *
 20024                                  ;									       *
 20025                                  ; output:								       *
 20026                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 20027                                  ;	buffinfo set.							       *
 20028                                  ;	bufferqueue set.						       *
 20029                                  ;									       *
 20030                                  ; subroutines to be called:						       *
 20031                                  ;									       *
 20032                                  ;*******************************************************************************
 20033                                  
 20034                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20035                                  	; (SYSINIT:0E60h)
 20036                                  dobuff:
 20037                                  	; ds = cs ; 31/03/2019
 20038                                  	; 23/10/2022
 20039 00000E80 2EC51E[6B02]            	lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 20040                                  	;mov	ax,[buffers] ; 31/03/2019
 20041                                  	;lds	bx,[DOSINFO]
 20042 00000E85 2EA1[9702]              	mov	ax,[cs:buffers]	; set sysi_buffers
 20043                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 20044 00000E89 89473F                  	mov	[bx+3Fh],ax
 20045 00000E8C 2EA1[9902]              	mov	ax,[cs:h_buffers]
 20046                                  	;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 20047 00000E90 894741                  	mov	[bx+41h],ax
 20048 00000E93 C55F12                  	lds	bx,[bx+12h]
 20049                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 20050 00000E96 E8D534                  	call	round		; get [memhi]:[memlo]
 20051                                  	;mov	al,devmark_buf	; ='B'
 20052 00000E99 B042                    	mov	al,'B'	
 20053 00000E9B E81D06                  	call	setdevmark
 20054                                  
 20055                                  ;allocate buffers
 20056                                  
 20057 00000E9E 1E                      	push	ds			; save buffer info. ptr.
 20058 00000E9F 53                      	push	bx
 20059                                  
 20060 00000EA0 E85303                  	call	set_buffer
 20061                                  
 20062 00000EA3 5B                      	pop	bx
 20063 00000EA4 1F                      	pop	ds
 20064                                  
 20065                                  ;now set the secondary buffer if specified.
 20066                                  
 20067 00000EA5 2E833E[9902]00          	cmp	word [cs:h_buffers],0
 20068 00000EAB 742D                    	je	short xif16
 20069 00000EAD E8BE34                  	call	round
 20070                                  	; 23/10/2022
 20071 00000EB0 2E8B0E[6003]            	mov	cx,[cs:memlo]
 20072                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 20073 00000EB5 894F06                  	mov	[bx+6],cx
 20074 00000EB8 2E8B0E[6203]            	mov	cx,[cs:memhi]
 20075                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 20076 00000EBD 894F08                  	mov	[bx+8],cx
 20077 00000EC0 2E8B0E[9902]            	mov	cx,[cs:h_buffers]
 20078                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 20079 00000EC5 894F0A                  	mov	[bx+10],cx
 20080 00000EC8 B80002                  	mov	ax,512			; 512 byte
 20081 00000ECB F7E1                    	mul	cx
 20082 00000ECD 2EA3[6003]              	mov	[cs:memlo],ax
 20083                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20084 00000ED1 2E800E[E414]02          	or	byte [cs:setdevmarkflag],2
 20085 00000ED7 E89434                  	call	round
 20086                                  xif16:
 20087                                  
 20088                                  ; ----------------------------------------------------------------------
 20089                                  ; allocate cdss
 20090                                  ; ----------------------------------------------------------------------
 20091                                  
 20092                                  buf1:
 20093 00000EDA E89134                  	call	round
 20094                                  
 20095 00000EDD 50                      	push	ax
 20096                                  	; 23/10/2022
 20097                                  	;mov	ax,devmark_cds		;='L'
 20098 00000EDE B84C00                  	mov	ax, 'L'
 20099 00000EE1 E8D705                  	call	setdevmark
 20100 00000EE4 58                      	pop	ax
 20101                                  
 20102 00000EE5 2EC43E[6B02]            	les	di,[cs:DOSINFO]
 20103                                  	;mov	cl,[es:di+SYSI_NUMIO]
 20104 00000EEA 268A4D20                	mov	cl,[es:di+20h]
 20105 00000EEE 2E3A0E[A002]            	cmp	cl,[cs:NUM_CDS]
 20106 00000EF3 7305                    	jae	short gotncds 		; user setting must be at least numio
 20107 00000EF5 2E8A0E[A002]            	mov	cl,[cs:NUM_CDS]
 20108                                  gotncds:
 20109 00000EFA 30ED                    	xor	ch,ch
 20110                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 20111 00000EFC 26884D21                	mov	[es:di+21h],cl
 20112 00000F00 2EA1[6203]              	mov	ax,[cs:memhi]
 20113                                  	;mov	[es:di+SYSI_CDS+2],ax
 20114 00000F04 26894518                	mov	[es:di+18h],ax
 20115 00000F08 2EA1[6003]              	mov	ax,[cs:memlo]
 20116                                  	;mov	[es:di+SYSI_CDS],ax
 20117 00000F0C 26894516                	mov	[es:di+16h],ax
 20118 00000F10 88C8                    	mov	al,cl
 20119                                  	;mov	ah,curdirlen ; curdir_list.size
 20120 00000F12 B458                    	mov	ah,88
 20121 00000F14 F6E4                    	mul	ah
 20122 00000F16 E85002                  	call	ParaRound
 20123 00000F19 2E0106[6203]            	add	[cs:memhi],ax
 20124                                  
 20125                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20126 00000F1E 2E800E[E414]02          	or	byte [cs:setdevmarkflag],2
 20127 00000F24 E84734                  	call	round			; check for mem error before initializing
 20128                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 20129 00000F27 26C535                  	lds	si,[es:di]
 20130                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 20131 00000F2A 26C47D16                	les	di,[es:di+16h]
 20132 00000F2E E86BFD                  	call	fooset
 20133                                  
 20134                                  ; ----------------------------------------------------------------------
 20135                                  ; allocate space for internal stack
 20136                                  ; ----------------------------------------------------------------------
 20137                                  
 20138 00000F31 0E                      	push	cs
 20139 00000F32 1F                      	pop	ds
 20140                                  
 20141                                  ;	if the user did not entered stacks= command, as a default, do not install
 20142                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 20143                                  ;	otherwise,install it to the user specified value or to the default
 20144                                  ;	value of 9,128 for other systems.
 20145                                  
 20146 00000F33 833E[8E02]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 20147 00000F38 740E                    	je	short doinstallstack	; then install as specified by the user
 20148 00000F3A 803E[BA02]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 20149 00000F3F 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 20150 00000F41 803E[B902]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 20151 00000F46 736D                    	jae	short skipstack
 20152                                  doinstallstack:
 20153 00000F48 A1[8A02]                	mov	ax,[stack_count]	; stack_count = 0?
 20154 00000F4B 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 20155 00000F4D 7466                    	jz	short skipstack		; don't install stack.
 20156                                  
 20157                                  ;	dynamic relocation of stack code.
 20158                                  
 20159 00000F4F E81C34                  	call	round			;[memhi] = seg. for stack code
 20160                                  					;[memlo] = 0
 20161                                  
 20162                                  ; set devmark block into memory for mem command
 20163                                  ; devmark_id = 's' for stack
 20164                                  
 20165                                  	;mov	al,devmark_stk	;='S'
 20166                                  	; 23/10/2022
 20167 00000F52 B053                    	mov	al,'S'
 20168 00000F54 E86405                  	call	setdevmark
 20169                                  
 20170 00000F57 A1[6203]                	mov	ax,[memhi]
 20171 00000F5A 8EC0                    	mov	es,ax		;es -> seg. the stack code is going to move.
 20172                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20173                                  	; 11/12/2022
 20174                                  	; ds = cs
 20175                                  	;push	cs
 20176                                  	;pop	ds
 20177 00000F5C 31F6                    	xor	si,si		;!!we know that stack code is at the beginning of sysinit.
 20178 00000F5E 31FF                    	xor	di,di
 20179 00000F60 B9[6702]                	mov	cx,endstackcode
 20180 00000F63 890E[6003]              	mov	[memlo],cx
 20181 00000F67 E80434                  	call	round		;have enough space for relocation?
 20182 00000F6A F3A4                    	rep	movsb
 20183                                  
 20184 00000F6C 1E                      	push	ds		; stick the location of the NextStack entry
 20185                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 20186                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 20187                                  	; 21/10/2022
 20188 00000F6D B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 20189 00000F70 8ED8                    	mov	ds,ax
 20190 00000F72 C706[BE08][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 20191 00000F78 8C06[C008]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 20192                                  
 20193 00000F7C 2EA1[6003]              	mov	ax,[cs:memlo]
 20194 00000F80 2EA3[8E02]              	mov	[cs:stack_addr],ax ;set for stack area initialization
 20195 00000F84 A3[C408]                	mov	[IT_StackLoc],ax ; pass it as Instance Data, too
 20196 00000F87 2EA1[6203]              	mov	ax,[cs:memhi]	;this will be used by stack_init routine.
 20197 00000F8B 2EA3[9002]              	mov	[cs:stack_addr+2],ax
 20198 00000F8F A3[C608]                	mov	[IT_StackLoc+2],ax
 20199                                  
 20200                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 20201                                  
 20202                                  	;mov	ax,entrysize ; mov ax,8
 20203                                  	; 23/10/2022
 20204 00000F92 B80800                  	mov	ax,8
 20205 00000F95 2E0306[8C02]            	add	ax,[cs:stack_size]
 20206 00000F9A 2EF726[8A02]            	mul	word [cs:stack_count]
 20207                                  
 20208 00000F9F A3[C808]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 20209                                  
 20210 00000FA2 1F                      	pop	ds		; no more need to access Instance Table
 20211                                  
 20212 00000FA3 E8C301                  	call	ParaRound	; convert size to paragraphs
 20213                                  	
 20214                                  	; 11/12/2022
 20215                                  	; ds = cs
 20216                                  	;add	[cs:memhi],ax
 20217 00000FA6 0106[6203]              	add	[memhi],ax
 20218                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20219                                  	;or	byte [cs:setdevmarkflag],2
 20220 00000FAA 800E[E414]02            	or	byte [setdevmarkflag],2
 20221                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20222                                  				;to set the devmark_size for stack by round routine.
 20223 00000FAF E8BC33                  	call	round		; check for memory error before
 20224                                  				; continuing
 20225 00000FB2 E8EA02                  	call	stackinit	; initialize hardware stack. 
 20226                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 20227                                  skipstack:
 20228                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20229                                  	; (SYSINIT:0F99h)
 20230                                  
 20231                                  	; 11/12/2022
 20232                                  	; ds = cs
 20233                                  	;push	cs
 20234                                  	;pop	ds
 20235                                  
 20236 00000FB5 A0[9D02]                	mov	al,[FILES]
 20237 00000FB8 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 20238                                  				;  it does sign extend.
 20239 00000FBA 89C1                    	mov	cx,ax
 20240 00000FBC 31DB                    	xor	bx,bx		;close standard input
 20241 00000FBE B43E                    	mov	ah,3Eh ; CLOSE
 20242 00000FC0 CD21                    	int	21h
 20243 00000FC2 BB0200                  	mov	bx,2
 20244                                  rcclloop:			;close everybody but standard output
 20245 00000FC5 B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 20246 00000FC7 CD21                    	int	21h		; in case we can't get new one open.
 20247 00000FC9 43                      	inc	bx
 20248 00000FCA E2F9                    	loop	rcclloop
 20249                                  
 20250 00000FCC BA[9B46]                	mov	dx,condev
 20251 00000FCF B002                    	mov	al,2
 20252 00000FD1 B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 20253 00000FD3 F9                      	stc			; set for possible int 24
 20254 00000FD4 CD21                    	int	21h
 20255 00000FD6 7305                    	jnc	short goaux
 20256 00000FD8 E82236                  	call	badfil
 20257 00000FDB EB13                    	jmp	short goaux2
 20258                                  goaux:	
 20259 00000FDD 50                      	push	ax
 20260 00000FDE BB0100                  	mov	bx,1		;close standard output
 20261 00000FE1 B43E                    	mov	ah,3Eh ; CLOSE
 20262 00000FE3 CD21                    	int	21h
 20263 00000FE5 58                      	pop	ax
 20264                                  
 20265 00000FE6 89C3                    	mov	bx,ax		;new device handle
 20266 00000FE8 B445                    	mov	ah,45h ; XDUP
 20267 00000FEA CD21                    	int	21h		;dup to 1,stdout
 20268 00000FEC B445                    	mov	ah,45h ; XDUP
 20269 00000FEE CD21                    	int	21h		;dup to 2,stderr
 20270                                  goaux2: 
 20271 00000FF0 BA[9F46]                	mov	dx,auxdev
 20272 00000FF3 B002                    	mov	al,2		;read/write access
 20273 00000FF5 E83636                  	call	open_dev
 20274                                  
 20275 00000FF8 BA[A346]                	mov	dx,prndev
 20276 00000FFB B001                    	mov	al,1		;write only
 20277 00000FFD E82E36                  	call	open_dev
 20278                                  
 20279                                  ;global rearm command for shared interrupt devices attached in the system;
 20280                                  ;shared interrupt attachment has some problem when it issues interrupt
 20281                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 20282                                  ;no further interrupts on that level will be presented until a global rearm
 20283                                  ;is issued. by the request of the system architecture group, msbio will
 20284                                  ;issue a global rearm after every device driver is loaded.
 20285                                  ;to issue a global rearm:	;for pc1,xt,palace
 20286                                  ;
 20287                                  ;			  out 02f2h,xx  ; interrupt level 2
 20288                                  ;			  out 02f3h,xx  ; interrupt level 3
 20289                                  ;			  out 02f4h,xx  ; interrupt level 4
 20290                                  ;			  out 02f5h,xx  ; interrupt level 5
 20291                                  ;			  out 02f6h,xx  ; interrupt level 6
 20292                                  ;			  out 02f7h,xx  ; interrupt level 7
 20293                                  ;
 20294                                  ;	for pc at,in addition to the above commands,
 20295                                  ;	need to handle the secondary interrupt handler
 20296                                  ;
 20297                                  ;			  out 06f2h,xx  ; interrupt level 10
 20298                                  ;			  out 06f3h,xx  ; interrupt level 11
 20299                                  ;			  out 06f4h,xx  ; interrupt level 12
 20300                                  ;			  out 06f6h,xx  ; interrupt level 14
 20301                                  ;			  out 06f7h,xx  ; interrupt level 15
 20302                                  ;
 20303                                  ;	for round-up machine
 20304                                  ;
 20305                                  ;			  none.
 20306                                  
 20307                                  ; where xx stands for any value.
 20308                                  ;
 20309                                  ; for your information,after naples level machine,the system service bios
 20310                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 20311                                  
 20312                                  	; 24/10/2022
 20313                                  
 20314 00001000 50                      	push	ax
 20315 00001001 53                      	push	bx
 20316 00001002 52                      	push	dx
 20317 00001003 06                      	push	es
 20318                                  
 20319 00001004 B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 20320 00001006 BAF202                  	mov	dx,2F2h 		;get starting address
 20321 00001009 EE                      	out	dx,al			; out 02f2h,0ffh
 20322 0000100A 42                      	inc	dx
 20323 0000100B EE                      	out	dx,al			; out 02f3h,0ffh
 20324 0000100C 42                      	inc	dx
 20325 0000100D EE                      	out	dx,al			; out 02f4h,0ffh
 20326 0000100E 42                      	inc	dx
 20327 0000100F EE                      	out	dx,al			; out 02f5h,0ffh
 20328 00001010 42                      	inc	dx
 20329 00001011 EE                      	out	dx,al			; out 02f6h,0ffh
 20330 00001012 42                      	inc	dx
 20331 00001013 EE                      	out	dx,al			; out 02f7h,0ffh
 20332                                  
 20333                                  ;sb secondary global rearm
 20334                                  
 20335 00001014 B800F0                  	mov	ax,0F000h		;get machine type
 20336 00001017 8EC0                    	mov	es,ax
 20337 00001019 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 20338 0000101F 740D                    	je	short startrearm	; *if at no need to check
 20339                                  
 20340 00001021 B4C0                    	mov	ah,0C0h 		;get system configuration
 20341 00001023 CD15                    	int	15h			; *
 20342 00001025 7216                    	jc	short finishrearm	; *jmp if old rom
 20343                                  
 20344                                  ; test feature byte for secondary interrupt controller
 20345                                  
 20346 00001027 26F6470540              	test	byte [es:bx+5],40h
 20347                                  	; 24/10/2022
 20348                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 20349 0000102C 740F                    	je	short finishrearm	;jmp if it is there
 20350                                  
 20351                                  startrearm:
 20352 0000102E B0FF                    	mov	al,0FFh 		;write any pattern to port
 20353 00001030 BAF206                  	mov	dx,6F2h 		;get starting address
 20354 00001033 EE                      	out	dx,al			;out 06f2h,0ffh
 20355 00001034 42                      	inc	dx			;bump address
 20356 00001035 EE                      	out	dx,al			;out 06f3h,0ffh
 20357 00001036 42                      	inc	dx			;bump address
 20358 00001037 EE                      	out	dx,al			;out 06f4h,0ffh
 20359 00001038 42                      	inc	dx			;bump address
 20360 00001039 42                      	inc	dx			;bump address
 20361 0000103A EE                      	out	dx,al			;out 06f6h,0ffh
 20362 0000103B 42                      	inc	dx			;bump address
 20363 0000103C EE                      	out	dx,al			;out 06f7h,0ffh
 20364                                  
 20365                                  finishrearm:
 20366 0000103D 07                      	pop	es
 20367 0000103E 5A                      	pop	dx
 20368 0000103F 5B                      	pop	bx
 20369 00001040 58                      	pop	ax
 20370                                  
 20371                                  ;    global rearm end *******************
 20372                                  
 20373                                  ; ----------------------------------------------------------------------
 20374                                  ; allocate sysinit_base for install= command
 20375                                  ; ----------------------------------------------------------------------
 20376                                  ; sysinit_base allocation.
 20377                                  ;   check if endfile has been called to handle install= command.
 20378                                  
 20379                                  set_sysinit_base:
 20380                                  
 20381                                  ; ----------------------------------------------------------------------
 20382                                  ;sysinit_base will be established in the secure area of
 20383                                  ;lower memory when it handles the first install= command.
 20384                                  ;sysinit_base is the place where the actual exec function will be called and
 20385                                  ;will check sysinit module in high memory if it is damaged by the application
 20386                                  ;program.  if sysinit module has been broken,then "memory error..." message
 20387                                  ;is displayed by sysinit_base.
 20388                                  ; ----------------------------------------------------------------------
 20389                                  
 20390                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 20391                                  	; (SYSINIT:1028h)
 20392                                  
 20393                                  	; 11/12/2022
 20394                                  	; ds = cs
 20395 00001041 50                      	push	ax			; set devmark for mem command
 20396 00001042 A1[6203]                	mov	ax,[memhi]
 20397 00001045 2B06[6603]              	sub	ax,[area]
 20398 00001049 A3[5E03]                	mov	[impossible_owner_size],ax ;remember the size in case.
 20399                                  	;mov	al,devmark_inst ; 'T'
 20400 0000104C B054                    	mov	al,'T'
 20401 0000104E E86A04                  	call	setdevmark
 20402 00001051 58                      	pop	ax
 20403                                  
 20404 00001052 8B3E[6203]              	mov	di,[memhi]
 20405 00001056 8EC7                    	mov	es,di
 20406 00001058 893E[D202]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 20407 0000105C 31FF                    	xor	di,di
 20408 0000105E 893E[D002]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 20409 00001062 BE[7511]                	mov	si,sysinit_base		;ds:si -> source code to be relocated.
 20410 00001065 B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 20411                                  	; 24/10/2022 
 20412                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 20413 00001068 010E[6003]              	add	[memlo],cx
 20414                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 20415                                  	; 11/12/2022
 20416                                  	; ds = cs
 20417                                  	;or	byte [cs:setdevmarkflag],2
 20418 0000106C 800E[E414]02            	or	byte [setdevmarkflag],2
 20419                                  	;or	byte [setdevmarkflag],for_devmark
 20420 00001071 E8FA32                  	call	round			; check mem error. also,readjust memhi for the next use.
 20421 00001074 F3A4                    	rep	movsb			; reallocate it.
 20422                                  
 20423 00001076 C706[D402][5C11]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 20424 0000107C 8C0E[D602]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 20425                                  	;or	word [install_flag],has_installed ; set the flag.
 20426                                  	;or	byte [install_flag],has_installed ; 2
 20427                                  	; 11/12/2022
 20428 00001080 800E[CC02]02            	or	byte [install_flag],2
 20429                                  	; 24/10/2022
 20430                                  	;or	word [install_flag],2	
 20431                                  
 20432                                  ; ----------------------------------------------------------------------
 20433                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 20434                                  ; the top of the memory will be allocated for sysinit and config.sys if
 20435                                  ; have_install_cmd.
 20436                                  ; ----------------------------------------------------------------------
 20437                                  
 20438 00001085 E8E632                  	call	round
 20439 00001088 8B1E[6203]              	mov	bx,[memhi]
 20440 0000108C A1[6603]                	mov	ax,[area]
 20441 0000108F A3[5C03]                	mov	[old_area],ax		; save [area]
 20442 00001092 8EC0                    	mov	es,ax			;calc what we needed
 20443 00001094 29C3                    	sub	bx,ax
 20444                                  	; 24/10/2022
 20445 00001096 B44A                    	mov	ah,4Ah ; SETBLOCK
 20446 00001098 CD21                    	int	21h			;give the rest back
 20447                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20448                                  		; ES = segment address of block to change
 20449                                  		; BX = new size in paragraphs
 20450 0000109A 06                      	push	es
 20451 0000109B 8CC0                    	mov	ax,es
 20452 0000109D 48                      	dec	ax
 20453 0000109E 8EC0                    	mov	es,ax			;point to arena
 20454                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 20455                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 20456                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 20457                                  	; 24/10/2022
 20458 000010A0 26C70601000800          	mov	word [es:1],8		;set impossible owner
 20459 000010A7 26C70608005344          	mov	word [es:8],'SD'	; System Data
 20460 000010AE 07                      	pop	es
 20461                                  
 20462 000010AF BBFFFF                  	mov	bx,0FFFFh
 20463 000010B2 B448                    	mov	ah,48h ; ALLOC
 20464 000010B4 CD21                    	int	21h
 20465 000010B6 B448                    	mov	ah,48h ; ALLOC
 20466 000010B8 CD21                    	int	21h			; allocate the rest of the memory
 20467                                  		; DOS - 2+ - ALLOCATE MEMORY
 20468                                  		; BX = number of 16-byte paragraphs desired
 20469 000010BA A3[6203]                	mov	[memhi],ax		; start of the allocated memory
 20470 000010BD C706[6003]0000          	mov	word [memlo],0		;  to be used next.
 20471                                  
 20472                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 20473                                  ;;;; allocated.
 20474                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 20475                                  ;;;; this time) to the top-of-the memory),here we are going to
 20476                                  ;;;; 1). "setblock" from memhi to confbot.
 20477                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 20478                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 20479                                  
 20480                                  ;memory allocation for sysinit,confbot module.
 20481                                  
 20482 000010C3 8EC0                    	mov	es,ax
 20483                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 20484                                  	; (SYSINIT:11DFh)
 20485 000010C5 8B1E[A102]              	mov	bx,[CONFBOT]
 20486                                  	; 24/10/2022
 20487                                  	;mov	bx,[top_of_cdss] ; mov bx,[confbot]
 20488 000010C9 29C3                    	sub	bx,ax			; confbot - memhi
 20489 000010CB 4B                      	dec	bx			; make a room for the memory block id.
 20490 000010CC 4B                      	dec	bx			; make sure!!!.
 20491 000010CD B44A                    	mov	ah,4Ah ; SETBLOCK
 20492 000010CF CD21                    	int	21h			; this will free (confbot to top of memory)
 20493                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20494                                  		; ES = segment address of block to change
 20495                                  		; BX = new size in paragraphs
 20496 000010D1 BBFFFF                  	mov	bx,0FFFFh
 20497 000010D4 B448                    	mov	ah,48h ; ALLOC
 20498 000010D6 CD21                    	int	21h
 20499 000010D8 B448                    	mov	ah,48h ; ALLOC
 20500 000010DA CD21                    	int	21h			; allocate (confbot to top of memory)
 20501                                  		; DOS - 2+ - ALLOCATE MEMORY
 20502                                  		; BX = number of 16-byte paragraphs desired
 20503 000010DC A3[6603]                	mov	[area],ax		; save allocated memory segment.
 20504                                  					; need this to free this area for command.com.
 20505 000010DF 8E06[6203]              	mov	es,[memhi]
 20506 000010E3 B449                    	mov	ah,49h			; free allocated memory.
 20507 000010E5 CD21                    	int	21h			; free (memhi to confbot(=area))
 20508                                  		; DOS - 2+ - FREE MEMORY
 20509                                  		; ES = segment address of area to be freed
 20510                                  endfile_ret:
 20511 000010E7 C3                      	retn
 20512                                  
 20513                                  ; End of "EndFile" DOS structure configuration.
 20514                                  
 20515                                  ; ----------------------------------------------------------------------
 20516                                  ; 26/03/2019 - Retro DOS v4.0
 20517                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 20518                                  ; ----------------------------------------------------------------------
 20519                                  ; Do_Install_Exec
 20520                                  ;
 20521                                  ; This procedure is used to EXEC a program being loaded via the 
 20522                                  ; "install=" mechanism in config.sys. It does this by setting up
 20523                                  ; the parameters, and then jumping to sysinit_base, which has been
 20524                                  ; setup in low memory. When complete, sysinit_base will jump back
 20525                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 20526                                  ; program).
 20527                                  
 20528                                  ;SYSINIT:10CFh:
 20529                                  
 20530                                  do_install_exec:			; now,handles install= command.
 20531                                  
 20532 000010E8 56                      	push	si			; save si for config.sys again.
 20533                                  
 20534                                  ; we are going to call load/exec function.
 20535                                  ; set es:bx to the parameter block here;;;;;;;
 20536                                  ; set ds:dx to the asciiz string. remember that we already has 0
 20537                                  ; after the filename. so parameter starts after that. if next
 20538                                  ; character is a line feed (i.e. 10),then assume that the 0
 20539                                  ; we already encountered used to be a carrage return. in this
 20540                                  ; case,let's set the length to 0 which will be followed by
 20541                                  ; carridge return.
 20542                                  
 20543                                  ; es:si -> command line in config.sys. points to the first non blank
 20544                                  ;character after =.
 20545                                  
 20546 000010E9 06                      	push	es
 20547 000010EA 1E                      	push	ds
 20548 000010EB 07                      	pop	es
 20549 000010EC 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 20550 000010ED 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 20551                                  
 20552 000010EF 31C9                    	xor	cx,cx
 20553 000010F1 FC                      	cld
 20554 000010F2 2EC606[EF02]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 20555 000010F8 BF[F002]                	mov	di,ldexec_parm
 20556                                  installfilename:			; skip the file name
 20557 000010FB AC                      	lodsb				; al = ds:si; si++
 20558 000010FC 3C00                    	cmp	al,0
 20559 000010FE 7402                    	je	short got_installparm
 20560 00001100 EBF9                    	jmp	short installfilename
 20561                                  got_installparm:			; copy the parameters to ldexec_parm
 20562 00001102 AC                      	lodsb
 20563 00001103 268805                  	mov	[es:di],al
 20564 00001106 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 20565 00001108 7405                    	je	short done_installparm
 20566 0000110A FEC1                    	inc	cl			; # of char. in the parm.
 20567 0000110C 47                      	inc	di
 20568 0000110D EBF3                    	jmp	short got_installparm
 20569                                  done_installparm:
 20570 0000110F 2E880E[EE02]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 20571 00001114 80F900                  	cmp	cl,0			; if no parm,then
 20572 00001117 7506                    	jne	short install_seg_set 	; let the parm area
 20573 00001119 2EC606[EF02]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 20574                                  					; starts with cr.
 20575                                  install_seg_set:
 20576 0000111F 2EC70600000000          	mov	word [cs:0],0		; make a null environment segment
 20577 00001126 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 20578                                  
 20579                                  ;---------------------------------------------------M067----------------
 20580                                  ;
 20581                                  ; 	the environment pointer is made 0. so the current environment ptr.
 20582                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 20583                                  ;
 20584                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 20585                                  ;
 20586                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 20587                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 20588                                  ; 	was fixed. 
 20589                                  ;
 20590                                  ; ----------------------------------------------------------------------
 20591                                  
 20592                                  ;;ifdef   MULTI_CONFIG
 20593                                  
 20594                                  ; If there's any environment data in "config_wrkseg", pass to app
 20595                                  
 20596                                  ; 30/12/2022 - Retro DOS v4.0 (Modified MSDOS 6.21 IO.SYS SYSINIT)
 20597                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20598                                  ;%if 0
 20599 00001128 89C1                            mov     cx,ax
 20600 0000112A 2E833E[DB14]00                  cmp     word [cs:config_envlen],0
 20601 00001130 7405                            je      short no_envdata2
 20602 00001132 2E8B0E[DD14]                    mov     cx,[cs:config_wrkseg]
 20603                                  no_envdata2:
 20604                                  ;;endif  ;MULTI_CONFIG
 20605                                  
 20606                                  ;%endif	; 24/10/2022
 20607                                  
 20608                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 20609                                  	; 24/10/2022
 20610                                  	;mov	[cs:iexec.environ],cx
 20611                                  	; 02/11/2022
 20612 00001137 2EA3[4003]              	mov	[cs:iexec.environ],ax	
 20613                                  
 20614                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 20615 0000113B 2EA3[4403]              	mov	[cs:iexec.ldexec_line+2],ax
 20616                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 20617 0000113F 2EA3[4803]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 20618                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 20619 00001143 2EA3[4C03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 20620 00001147 E86000                  	call	sum_up
 20621 0000114A 26A3[D802]              	mov	[es:checksum],ax	; save the value of the sum
 20622 0000114E 31C0                    	xor	ax,ax
 20623 00001150 B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 20624 00001152 BB[4003]                	mov	bx,instexe		; es:bx -> parm block.
 20625 00001155 06                      	push	es			; save es,ds for load/exec
 20626 00001156 1E                      	push	ds			; these registers will be restored in sysinit_base.
 20627 00001157 2EFF2E[D002]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 20628                                  					; load/exec function and check sum.
 20629                                  
 20630                                  ;----------------------------------------
 20631                                  
 20632                                  ;j.k. this is the returning address from sysinit_base.
 20633                                  
 20634                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20635                                  
 20636                                  sysinitptr:				; returning far address from sysinit_base
 20637 0000115C 5E                      	pop	si			; restore si for config.sys file.
 20638 0000115D 06                      	push	es
 20639 0000115E 1E                      	push	ds
 20640 0000115F 07                      	pop	es
 20641 00001160 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 20642 00001161 7305                            jnc     short install_exit_ret
 20643                                  
 20644 00001163 56                      	push	si			; error in loading the file for install=.
 20645 00001164 E89A34                  	call	badload 		; es:si-> path,filename,0.
 20646 00001167 5E                      	pop	si
 20647                                  
 20648                                  	; 24/10/2022
 20649                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 20650                                  	; 11/12/2022
 20651                                  	; ds = cs
 20652                                  
 20653                                  	; 30/12/2022 - Retro DOS v4.2
 20654                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:1283h)
 20655                                  
 20656                                  install_exit_ret:
 20657 00001168 C3                      	retn
 20658                                  
 20659                                  ; 30/12/2022 - Retro DOS v4.2
 20660                                  %if 0
 20661                                  install_exit_ret:
 20662                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 20663                                  
 20664                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 20665                                  ;SYSINIT:1142h:
 20666                                  	mov     ah,4Dh
 20667                                  	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 20668                                  	cmp     ah,3
 20669                                  	jz      short sysinitptr_retn
 20670                                  	call    error_line
 20671                                  	stc
 20672                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 20673                                  	retn		
 20674                                  
 20675                                  %endif ; 24/10/2022
 20676                                  
 20677                                  ; ----------------------------------------------------------------------
 20678                                  
 20679                                  ;**	ParaRound - Round Up length to paragraph multiple
 20680                                  ;
 20681                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 20682                                  ;	by 16 yielding a "length in paragraphs" value.
 20683                                  ;
 20684                                  ;	ENTRY	(ax) = byte length
 20685                                  ;	EXIT	(ax) = rounded up length in paragraphs
 20686                                  ;	USES	ax, flags
 20687                                  
 20688                                  ParaRound:
 20689 00001169 83C00F                  	add	ax,15
 20690 0000116C D1D8                    	rcr	ax,1
 20691 0000116E D1E8                    	shr	ax,1
 20692 00001170 D1E8                    	shr	ax,1
 20693 00001172 D1E8                    	shr	ax,1
 20694 00001174 C3                      	retn
 20695                                  
 20696                                  ; ----------------------------------------------------------------------
 20697                                  ; sysinit_base module.
 20698                                  ;
 20699                                  ; This module is relocated by the routine EndFile to a location in low
 20700                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 20701                                  ; that are being loaded by the "install=" command. After the EXEC call
 20702                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 20703                                  ; top of memory) to be sure that the EXECed program did not damage it.
 20704                                  ; If it did, then this module will print an error message and stop the
 20705                                  ; system. Otherwise, it returns control to SYSINIT.
 20706                                  ;
 20707                                  ;in: after relocation,
 20708                                  ;    ax = 4b00h - load and execute the program dos function.
 20709                                  ;    ds = confbot. segment of config.sys file image
 20710                                  ;    es = sysinitseg. segment of sysinit module itself.
 20711                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 20712                                  ;    es:bx = pointer to a parameter block for load.
 20713                                  ;    SI_end (byte) - offset vaule of end of sysinit module label
 20714                                  ;    bigsize (word) - # of word from confbot to SI_end.
 20715                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 20716                                  ;			word boundary moduler form.
 20717                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 20718                                  ;
 20719                                  ;note: sysinit should save necessary registers and when the control is back
 20720                                  
 20721                                  	; 24/10/2022
 20722                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 20723                                  sysinit_base:				
 20724 00001175 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 20725 0000117A 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 20726 0000117F CD21                    	int	21h			; load/exec dos call.
 20727 00001181 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 20728 00001186 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 20729 0000118B 1F                      	pop	ds			; restore confbot seg
 20730 0000118C 07                      	pop	es			; restore sysinitseg
 20731 0000118D 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 20732                                  					; at this time,i don't have to worry about
 20733                                  					; that sysinit module has been broken or not.
 20734 0000118F E81800                  	call	sum_up			; otherwise,check if it is good.
 20735 00001192 263906[D802]            	cmp	[es:checksum],ax
 20736 00001197 740C                    	je	short sysinit_base_end
 20737                                  
 20738                                  ;	memory broken. show "memory allocation error" message and stall.
 20739                                  
 20740 00001199 B409                    	mov	ah,9
 20741 0000119B 0E                      	push	cs
 20742 0000119C 1F                      	pop	ds
 20743                                  	; 30/12/2022
 20744                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:12B8h)
 20745                                  	;mov	dx, 102
 20746 0000119D BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 20747                                  					; 66h (for MSDOS 6.21 SYSINIT)
 20748 000011A0 CD21                    	int	21h
 20749                                  		; DOS - PRINT STRING
 20750                                  		; DS:DX -> string terminated by "$"
 20751                                  
 20752                                  	; 30/12/2022 - Retro DOS v4.2
 20753                                  stall:
 20754                                  	; 24/10/2022
 20755                                  _stall: 
 20756                                  	; 11/12/2022
 20757 000011A2 F4                      	hlt 
 20758                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20759                                  	;hlt				;use HLT to minimize energy consumption
 20760 000011A3 EBFD                            jmp	short _stall
 20761                                  
 20762                                  sysinit_base_end: 
 20763 000011A5 26FF2E[D402]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 20764                                  
 20765                                  ;-------------------------------------
 20766                                  
 20767                                  sum_up:
 20768                                  
 20769                                  ;in:   es - sysinitseg.
 20770                                  ;out:  ax - result
 20771                                  ;
 20772                                  ;remark: since this routine will only check starting from "locstack" to the end of
 20773                                  ;	 sysinit segment,the data area, and the current stack area are not
 20774                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 20775                                  ;	 gaurantee to be safe.
 20776                                  ;
 20777                                  ;first sum up confbot seg.
 20778                                  
 20779 000011AA 1E                      	push	ds
 20780                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 20781                                  	; (SYSINIT:12C6h)
 20782 000011AB 26A1[A102]              	mov	ax,[es:CONFBOT]
 20783                                  	; 24/10/2022
 20784                                  	;mov	ax,[es:top_of_cdss]
 20785 000011AF 8ED8                    	mov	ds,ax
 20786 000011B1 31F6                    	xor	si,si
 20787 000011B3 31C0                    	xor	ax,ax
 20788 000011B5 268B0E[CE02]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 20789                                  					; whole test better fail.
 20790 000011BA D1E9                    	shr	cx,1			; make it a word count
 20791 000011BC 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 20792                                  sum1:
 20793 000011BE 0304                    	add	ax,[si]
 20794 000011C0 46                      	inc	si
 20795 000011C1 46                      	inc	si
 20796 000011C2 E2FA                    	loop	sum1
 20797                                  ;now,sum up sysinit module.
 20798                                  sum_sys_code:
 20799                                  	; 24/10/2022
 20800 000011C4 BEC411                  	mov	si,locstack ; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 20801                                  			    ; 532h (MSDOS 6.21 IO.SYS, SYSINIT)
 20802                                  				        ; starting after the stack.  M069
 20803                                  					;  this does not cover the possible stack code!!!
 20804                                  	;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 20805                                  	; 02/11/2022
 20806                                  	;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 20807                                  	; 30/12/2022  
 20808 000011C7 B9[D04E]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 20809 000011CA 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 20810 000011CC D1E9                    	shr	cx,1
 20811                                  sum2:
 20812 000011CE 260304                  	add	ax,[es:si]
 20813 000011D1 46                      	inc	si
 20814 000011D2 46                      	inc	si
 20815 000011D3 E2F9                    	loop	sum2
 20816 000011D5 1F                      	pop	ds
 20817 000011D6 C3                      	retn
 20818                                  
 20819                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20820                                  ; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 20821                                  ; (SYSINIT:12F2h)
 20822                                  
 20823                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 20824                                  ;SYSINIT:11BDh:			    ; = 62 (MSDOS 6.21 IO.SYS, SYSINIT:1290h) 	
 20825 000011D7 0000                    	dw	0
 20826                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 20827                                  ;SYSINIT:11BFh:			    ; = 64 (MSDOS 6.21 IO.SYS, SYSINIT:1292h)
 20828 000011D9 0000                    	dw	0	
 20829                                  
 20830                                  mem_alloc_err_msgx:
 20831                                  
 20832                                         ;include msbio.cl4		; memory allocation error message
 20833                                  
 20834                                  ;SYSINIT:12F6:  ; MSDOS 6.21 IO.SYS SYSINIT:12F6h
 20835 000011DB 0D0A                    	db	0Dh,0Ah
 20836 000011DD 4D656D6F727920616C-     	db 	'Memory allocation error $'
 20836 000011E6 6C6F636174696F6E20-
 20836 000011EF 6572726F722024     
 20837                                  
 20838                                  end_sysinit_base: ; label byte
 20839                                  	; 24/10/2022
 20840                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 20841                                  
 20842                                  ; ----------------------------------------------------------------------
 20843                                  ; Set_Buffer
 20844                                  ;
 20845                                  ;function: set buffers in the real memory.				  
 20846                                  ;	   lastly set the memhi,memlo for the next available free address.
 20847                                  ;
 20848                                  ;input:    ds:bx -> buffinfo.
 20849                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 20850                                  ;	   singlebuffersize = buffer header size + sector size		  
 20851                                  ;
 20852                                  ;output:   buffers Queue established.	       				   
 20853                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 20854                                  ; ----------------------------------------------------------------------
 20855                                  
 20856                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20857                                  	; (SYSINIT:11DCh)
 20858                                  
 20859                                  set_buffer:
 20860 000011F6 30D2                    	xor	dl,dl				; assume buffers not in HMA
 20861 000011F8 E85500                  	call	GetBufferAddr
 20862 000011FB 7402                    	jz	short set_buff_1
 20863 000011FD B201                    	mov	dl,1				; buffers in HMA
 20864                                  set_buff_1:
 20865                                  	; 25/10/2022
 20866                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 20867 000011FF 893F                    	mov	[bx],di
 20868                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 20869 00001201 8C4702                  	mov	[bx+2],es
 20870                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 20871 00001204 C747040000              	mov	word [bx+4],0
 20872                                  
 20873 00001209 89F8                    	mov	ax,di
 20874 0000120B 2E8B0E[9702]            	mov	cx,[cs:buffers]
 20875 00001210 57                      	push	di				; remember first buffer
 20876                                  
 20877                                  ;	for each buffer
 20878                                  
 20879                                  nxt_buff:
 20880 00001211 E86300                  	call	set_buffer_info 		; set buf_link,buf_id...
 20881 00001214 89C7                    	mov	di,ax
 20882 00001216 E2F9                    	loop	nxt_buff
 20883                                  
 20884 00001218 2E2B3E[9B02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 20885                                  
 20886 0000121D 59                      	pop	cx				; get first buffer
 20887                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 20888 0000121E 26890D                  	mov	[es:di],cx
 20889 00001221 87CF                    	xchg	cx,di
 20890                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 20891                                  	; 25/10/2022
 20892 00001223 26894D02                	mov	[es:di+2],cx
 20893                                  
 20894 00001227 08D2                    	or	dl,dl				; In HMa ?
 20895 00001229 7417                    	jz	short set_buff_2		; no
 20896                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 20897 0000122B C6470C01                	mov	byte [bx+12],1
 20898 0000122F 2EA1[6203]              	mov	ax,[cs:memhi]			; seg of scratch buff
 20899                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of sctarch buff is 0
 20900 00001233 C7470D0000              	mov	word [bx+13],0
 20901                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 20902 00001238 89470F                  	mov	word [bx+15],ax
 20903 0000123B 2EA1[9B02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 20904                                  	;sub	ax,bufinsiz ; 20		; buffer head not required
 20905 0000123F 83E814                  	sub	ax,20
 20906                                  set_buff_2:
 20907 00001242 2E0106[6003]            	add	[cs:memlo],ax
 20908                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20909 00001247 2E800E[E414]02          	or	byte [cs:setdevmarkflag],2
 20910                                  	;call	round
 20911                                  	;retn
 20912                                  	; 12/12/2022
 20913 0000124D E91E31                  	jmp	round
 20914                                  
 20915                                  ; ----------------------------------------------------------------------
 20916                                  ; procedure : GetBufferAddr
 20917                                  ;
 20918                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 20919                                  ;
 20920                                  ; returns in es:di the buffer adress
 20921                                  ; returns NZ if allocated in HMA
 20922                                  ; ----------------------------------------------------------------------
 20923                                  
 20924                                  	; 25/10/2022 
 20925                                  GetBufferAddr:
 20926 00001250 53                      	push	bx
 20927 00001251 52                      	push	dx
 20928 00001252 2EA1[9B02]              	mov	ax, [cs:singlebuffersize]
 20929 00001256 2EF726[9702]            	mul	word [cs:buffers]
 20930                                  	;add	ax,0Fh
 20931 0000125B 83C00F                  	add	ax,15 
 20932                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20933                                  	;and	ax,~15	; 0FFF0h	; para round
 20934                                  	; 12/12/2022
 20935 0000125E 24F0                    	and	al,~15	; 0F0h
 20936 00001260 89C3                    	mov	bx,ax
 20937 00001262 B8024A                  	mov	ax,4A02h
 20938                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 20939 00001265 CD2F                    	int	2Fh
 20940 00001267 83FFFF                  	cmp	di,0FFFFh
 20941 0000126A 7508                    	jne	short got_hma
 20942 0000126C BF0000                  	mov	di,0			; dont xor di,di Z flag needed
 20943                                  	;zf=1
 20944                                  	;xor	di,di	; 25/10/2022
 20945                                  	;zf=1
 20946 0000126F 2E8E06[6203]            	mov	es,[cs:memhi]
 20947                                  got_hma:
 20948 00001274 5A                      	pop	dx
 20949 00001275 5B                      	pop	bx
 20950 00001276 C3                      	retn
 20951                                  
 20952                                  ; ----------------------------------------------------------------------
 20953                                  
 20954                                  set_buffer_info:
 20955                                  
 20956                                  ;function: set buf_link,buf_id,buf_sector
 20957                                  ;
 20958                                  ;in: es:di -> buffer header to be set.
 20959                                  ;    ax = di
 20960                                  ;
 20961                                  ;out:
 20962                                  ;    above entries set.
 20963                                  
 20964                                  	; 25/10/2022 
 20965 00001277 2EFF36[BB02]            	push	word [cs:buf_prev_off]
 20966                                  	;pop	word [es:di+buffinfo.buf_prev]
 20967 0000127C 268F4502                	pop	word [es:di+2]
 20968 00001280 2EA3[BB02]              	mov	[cs:buf_prev_off],ax
 20969 00001284 2E0306[9B02]            	add	ax,[cs:singlebuffersize]	;adjust ax
 20970                                  	;mov	[es:di+buffinfo.buf_next],ax
 20971 00001289 268905                  	mov	[es:di],ax
 20972                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 20973 0000128C 26C74504FF00            	mov	word [es:di+4],00FFh
 20974                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 20975 00001292 26C745060000            	mov	word [es:di+6],0
 20976                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 20977 00001298 26C745080000            	mov	word [es:di+8],0
 20978 0000129E C3                      	retn
 20979                                  
 20980                                  ; ======================================================================
 20981                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 20982                                  ; ----------------------------------------------------------------------
 20983                                  ; 27/03/2019 - Retro DOS v4.0
 20984                                  
 20985                                  ; ----------------------------------------------------------------------
 20986                                  ; ibmstack initialization routine.
 20987                                  ;
 20988                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 20989                                  ;	has been modified. this initialization routine also has to
 20990                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 20991                                  ;	should be set to signal that this interrupt handler is the
 20992                                  ;	first handler hooked to this interrupt vector.
 20993                                  ;	we determine this by looking at the instruction pointed by
 20994                                  ;	this vector. if it is iret, then this handler should be the
 20995                                  ;	first one. in our case, only the interrupt vector 77h is the
 20996                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 20997                                  ;
 20998                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 20999                                  ;	some design changes are needed to the above interrupt sharing
 21000                                  ;	method. the above sharing scheme assumes that 1). interrupt
 21001                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 21002                                  ;	interrupts would only be generated on levels 7 and 15.
 21003                                  ;	these assumptions are not true any more. we have to use the firstflag
 21004                                  ;	for every level of interrupt. we will set the firstflag on the following
 21005                                  ;	conditions:
 21006                                  ;
 21007                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 21008                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 21009                                  ;	 c. else if cs:ip points to an iret, then "first"
 21010                                  ;	 d. else if cs:ip points to dummy, then "first"
 21011                                  ;
 21012                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 21013                                  ;	be equal to the value at f000:ff01. this location is the initial value
 21014                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 21015                                  ;	the bioses for all of the machines.
 21016                                  ;
 21017                                  ;	system design group requests bios to handle the phantom interrupts.
 21018                                  ;
 21019                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 21020                                  ;	produced by the bogus adapter card even without interrupt request is
 21021                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 21022                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 21023                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 21024                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 21025                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 21026                                  ;	interrupt line.
 21027                                  ;
 21028                                  ;	to handle those "phantom" interrupts, the main stack code will check
 21029                                  ;	the own firstflag, and if it is not "first" (which means the forward
 21030                                  ;	pointer points to the legal shared interrupt handler), then pass the
 21031                                  ;	control. if it is the first, then the following action should be
 21032                                  ;	taken. we don't have to implement skack logic in this case.
 21033                                  ;
 21034                                  ;	to implement this logic, we rather choose a simple method.
 21035                                  ;	if ont of the above "firstflag" conditions is met, we are not
 21036                                  ;	going to hook this interrupt vector. the reason is if the original
 21037                                  ;	vector points to "iret" and do nothing, we don't need
 21038                                  ;	to implement the stack logic for it. this will simplify implementation
 21039                                  ;	while maintaining compatibility with the old version of dos.
 21040                                  ;	this implies that in the main stack code, there might be a stack code
 21041                                  ;	that will never be used, a dead code.
 21042                                  ;
 21043                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 21044                                  
 21045                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21046                                  	; (SYSINIT:1287h)
 21047                                  
 21048                                  	; 14/12/2022
 21049                                  stackinit:
 21050 0000129F 50                      	push	ax
 21051 000012A0 1E                      	push	ds
 21052 000012A1 06                      	push	es
 21053 000012A2 53                      	push	bx
 21054 000012A3 51                      	push	cx
 21055 000012A4 52                      	push	dx
 21056 000012A5 57                      	push	di
 21057 000012A6 56                      	push	si
 21058 000012A7 55                      	push	bp
 21059                                  
 21060                                  ;currently es -> stack code area
 21061                                  
 21062                                  	; 12/12/2022
 21063                                  	; ds = cs
 21064 000012A8 A1[8A02]                	mov	ax,[stack_count]
 21065 000012AB 89C1                    	mov	cx,ax  ; *!*!*  
 21066                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21067                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 21068                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 21069 000012AD 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 21070                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 21071 000012B1 A1[8C02]                	mov	ax,[stack_size]	 ; !!		;in cs
 21072 000012B4 26A3[0600]              	mov	[es:stacksize],ax
 21073                                  	; 12/12/2022
 21074 000012B8 A1[8E02]                	mov	ax,[stack_addr]			; offset
 21075                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21076                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21077                                  	;mov	ax,[cs:stack_addr]  ; !!
 21078 000012BB 26A3[0800]              	mov	[es:stacks],ax
 21079                                  	; 12/12/2022
 21080 000012BF 89C5                    	mov	bp,ax ; *!*
 21081 000012C1 A1[9002]                	mov	ax,[stack_addr+2]
 21082                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21083                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21084                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 21085 000012C4 26A3[0A00]              	mov	[es:stacks+2],ax
 21086                                  
 21087                                  ; initialize the data fields with the parameters
 21088                                  
 21089                                  ; "firstentry" will always be at stacks
 21090                                  
 21091                                  	;mov	bp,[es:stacks]			; get offset of stack
 21092                                  	; 12/12/2022
 21093                                  	; bp = [es:stacks] ; *!*
 21094 000012C8 26892E[0C00]            	mov	[es:firstentry],bp
 21095                                  
 21096                                  ; the stacks will always immediately follow the table entries
 21097                                  
 21098 000012CD B80800                  	mov	ax,entrysize ; 8
 21099                                  	;mov	cx,[es:stackcount]
 21100                                  	; 12/12/2022
 21101                                  	; cx = [es:stackcount] ; *!*!*
 21102 000012D0 F7E1                    	mul	cx
 21103 000012D2 01E8                    	add	ax,bp
 21104 000012D4 26A3[0400]              	mov	[es:stackat],ax
 21105 000012D8 89C3                    	mov	bx,ax
 21106 000012DA 83EB02                  	sub	bx,2
 21107                                  
 21108                                  ; zero the entire stack area to start with
 21109                                  
 21110 000012DD 268B3E[0400]            	mov	di,[es:stackat]
 21111 000012E2 26A1[0600]              	mov	ax,[es:stacksize]
 21112 000012E6 F7E1                    	mul	cx
 21113 000012E8 89C1                    	mov	cx,ax
 21114 000012EA 31C0                    	xor	ax,ax
 21115 000012EC 06                      	push	es
 21116 000012ED 1F                      	pop	ds				;ds = relocated stack code seg.
 21117                                  
 21118                                  ;now, ds -> stack code area
 21119                                  
 21120 000012EE 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 21121 000012F2 FC                      	cld
 21122 000012F3 F3AA                    	rep	stosb
 21123                                  
 21124 000012F5 8B0E[0200]              	mov	cx,[stackcount]
 21125                                  
 21126                                  ; loop for "count" times, building a table entry
 21127                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 21128                                  ;  cx = number of entries
 21129                                  ;  es:bp => base of stacks - 2
 21130                                  ;  es:bx => first table entry
 21131                                  
 21132                                  buildloop:
 21133                                  	; 11/12/2022
 21134                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 21135                                  	; 25/10/2022
 21136 000012F9 26C6460000              	mov	byte [es:bp],free
 21137 000012FE 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 21138                                  	;mov	[es:bp+1],al
 21139 00001302 26894602                	mov	[es:bp+savedsp],ax
 21140                                  	;mov	[es:bp2],ax
 21141 00001306 26894604                	mov	[es:bp+savedss],ax
 21142                                  	;mov	[es:bp+4],ax
 21143 0000130A 031E[0600]              	add	bx,[stacksize]
 21144 0000130E 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 21145                                  	;mov	[es:bp+6],bx
 21146 00001312 26892F                  	mov	[es:bx],bp
 21147 00001315 83C508                  	add	bp,entrysize ; 8
 21148                                  
 21149 00001318 E2DF                    	loop	buildloop
 21150                                  
 21151 0000131A 83ED08                  	sub	bp,entrysize ; 8
 21152 0000131D 892E[0E00]              	mov	[lastentry],bp
 21153 00001321 892E[1000]              	mov	[nextentry],bp
 21154                                  
 21155 00001325 1E                      	push	ds
 21156 00001326 B800F0                  	mov	ax,0F000h		;look at the model byte
 21157 00001329 8ED8                    	mov	ds,ax
 21158 0000132B 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ;convertible?
 21159 00001330 1F                      	pop	ds
 21160 00001331 7504                    	jne	short skip_disablenmis
 21161                                  
 21162 00001333 B007                    	mov	al,07h			; disable convertible nmis
 21163 00001335 E672                    	out	72h,al
 21164                                  
 21165                                  skip_disablenmis:
 21166 00001337 31C0                    	xor	ax,ax
 21167 00001339 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 21168                                  					;ds - relocated stack code segment
 21169 0000133B FA                      	cli
 21170                                  
 21171                                  	;irp	aa,<02,08,09,70>
 21172                                  	;
 21173                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21174                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 21175                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 21176                                  	;mov	dx,offset int&aa	;pass where new handler is
 21177                                  	;call	new_init_loop		;adjust the vector to new handler,
 21178                                  	;				;saving pointer to original owner
 21179                                  	;endm
 21180                                  
 21181                                  stkinit_02:
 21182 0000133C BE0800                  	mov	si,02h*4 ; 8
 21183 0000133F BF[4206]                	mov	di,INT19OLD02
 21184 00001342 BB[1200]                	mov	bx,old02
 21185 00001345 BA[1600]                	mov	dx,int02
 21186 00001348 E84901                  	call	new_init_loop
 21187                                  stkinit_08:
 21188 0000134B BE2000                  	mov	si,08h*4 ; 32
 21189 0000134E BF[4706]                	mov	di,INT19OLD08
 21190 00001351 BB[3800]                	mov	bx,old08
 21191 00001354 BA[3C00]                	mov	dx,int08
 21192 00001357 E83A01                  	call	new_init_loop
 21193                                  stkinit_09:
 21194 0000135A BE2400                  	mov	si,09h*4 ; 36
 21195 0000135D BF[4C06]                	mov	di,INT19OLD09
 21196 00001360 BB[4100]                	mov	bx,old09
 21197 00001363 BA[4500]                	mov	dx,int09
 21198 00001366 E82B01                  	call	new_init_loop
 21199                                  stkinit_70:
 21200 00001369 BEC001                  	mov	si,70h*4 ; 448
 21201 0000136C BF[6A06]                	mov	di,INT19OLD70
 21202 0000136F BB[4E00]                	mov	bx,old70
 21203 00001372 BA[5200]                	mov	dx,int70
 21204 00001375 E81C01                  	call	new_init_loop
 21205                                  
 21206                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 21207                                  	;
 21208                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21209                                  	;push	ds			;save relocated stack code segment
 21210                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 21211                                  	;push	ds
 21212                                  	;pop	dx			;dx = segment value
 21213                                  	;	
 21214                                  	;cmp	dx,0
 21215                                  	;jz	int&aa&_first
 21216                                  	;
 21217                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 21218                                  	;jz	int&aa&_first
 21219                                  	;
 21220                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 21221                                  	;jz	int&aa&_not_first
 21222                                  	;
 21223                                  	;cmp	dx,0f000h		;rom bios segment
 21224                                  	;jnz	int&aa&_not_first
 21225                                  	;
 21226                                  	;push	es
 21227                                  	;push	dx
 21228                                  	;mov	dx,0f000h
 21229                                  	;mov	es,dx
 21230                                  	;cmp	bx,word ptr es:0ff01h
 21231                                         	;pop	dx
 21232                                  	;pop	es
 21233                                  	;jz	int&aa&_first
 21234                                  	;
 21235                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 21236                                  	;pop	ds
 21237                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 21238                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 21239                                  	;mov	dx, offset int&aa	;pass where new handler is
 21240                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 21241                                  	;				;pointer to original owner.
 21242                                  	;jmp	short int&aa&_end
 21243                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 21244                                  	;pop	ds
 21245                                  ;int&aa&_end:
 21246                                  	;
 21247                                  	;endm
 21248                                  
 21249                                  stkinit_0A:
 21250 00001378 BE2800                  	mov	si,0Ah*4 ; 40
 21251                                  	
 21252                                  ; 14/12/2022
 21253                                  %if 0	
 21254                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21255                                  	push	ds
 21256                                  	
 21257                                  	lds	bx,[es:si]
 21258                                  	push	ds
 21259                                  	pop	dx
 21260                                  		
 21261                                  	cmp	dx,0
 21262                                  	je	short int_0A_first
 21263                                  	
 21264                                  	cmp	byte [bx],0CFh
 21265                                  	je	short int_0A_first
 21266                                  	
 21267                                  	cmp	word [bx+6],424Bh
 21268                                  	je	short int_0A_not_first
 21269                                  	
 21270                                  	cmp	dx,0F000h
 21271                                  	jne	short int_0A_not_first
 21272                                  	
 21273                                  	push	es
 21274                                  	push	dx
 21275                                  	mov	dx,0F000h
 21276                                  	mov	es,dx
 21277                                  	cmp	bx,[es:0FF01h]
 21278                                         	pop	dx
 21279                                  	pop	es
 21280                                  	je	short int_0A_first
 21281                                  %Endif
 21282                                  
 21283                                  	; 14/12/2022
 21284                                  	; 25/10/2022
 21285 0000137B E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21286 0000137E 730C                    	jnc	short int_0A_first
 21287                                  	
 21288                                  int_0A_not_first:
 21289                                  	; 14/12/2022
 21290                                  	; 25/10/2022
 21291                                  	;pop	ds
 21292 00001380 BF[5106]                	mov	di,INT19OLD0A
 21293 00001383 BB[5900]                	mov	bx,old0A
 21294 00001386 BA[5700]                	mov	dx,int0A
 21295 00001389 E80801                  	call	new_init_loop
 21296                                  	
 21297                                  	; 14/12/2022	
 21298                                  	;jmp	short int_0A_end
 21299                                  ;int_0A_first:
 21300                                  	; 25/10/2022
 21301                                  	;pop	ds
 21302                                  
 21303                                  	; 14/12/2022
 21304                                  int_0A_first:
 21305                                  int_0A_end:
 21306                                  
 21307                                  stkinit_0B:
 21308 0000138C BE2C00                  	mov	si,0Bh*4 ; 44
 21309                                  	
 21310                                  	; 14/12/2022
 21311                                  	; 25/10/2022
 21312 0000138F E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21313 00001392 730C                    	jnc	short int_0B_end ; int_0B_first
 21314                                  
 21315                                  ; 14/12/2022
 21316                                  %if 0	
 21317                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21318                                  	push	ds
 21319                                  	lds	bx,[es:si]
 21320                                  	push	ds
 21321                                  	pop	dx
 21322                                  		
 21323                                  	cmp	dx,0
 21324                                  	je	short int_0B_first
 21325                                  
 21326                                  	cmp	byte [bx],0CFh
 21327                                  	je	short int_0B_first
 21328                                  	
 21329                                  	cmp	word [bx+6],424Bh
 21330                                  	je	short int_0B_not_first
 21331                                  	
 21332                                  	cmp	dx,0F000h
 21333                                  	jne	short int_0B_not_first
 21334                                  
 21335                                  	push	es
 21336                                  	push	dx
 21337                                  	mov	dx,0F000h
 21338                                  	mov	es,dx
 21339                                  	cmp	bx,[es:0FF01h]
 21340                                  	pop	dx
 21341                                  	pop	es
 21342                                  	je	short int_0B_first
 21343                                  %endif
 21344                                  
 21345                                  int_0B_not_first:
 21346                                  	; 14/12/2022
 21347                                  	; 25/10/2022
 21348                                  	;pop	ds
 21349 00001394 BF[5606]                	mov	di,INT19OLD0B
 21350 00001397 BB[7100]                	mov	bx,old0B
 21351 0000139A BA[6F00]                	mov	dx,int0B
 21352 0000139D E8F400                  	call	new_init_loop
 21353                                  
 21354                                  	; 14/12/2022
 21355                                  	;jmp	short int_0B_end
 21356                                  ;int_0B_first:
 21357                                  	; 25/10/2022
 21358                                  	;pop	ds
 21359                                  
 21360                                  int_0B_end:
 21361                                  	
 21362                                  stkinit_0C:
 21363 000013A0 BE3000                  	mov	si,0Ch*4 ; 48
 21364                                  	
 21365                                  	; 14/12/2022
 21366                                  	; 25/10/2022
 21367 000013A3 E8C300                  	call	int_xx_first_check
 21368 000013A6 730C                    	jnc	short int_0C_end ; int_0C_first
 21369                                  
 21370                                  ; 14/12/2022
 21371                                  %if 0	
 21372                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21373                                  	push	ds
 21374                                  	lds	bx,[es:si]
 21375                                  	push	ds
 21376                                  	pop	dx
 21377                                  		
 21378                                  	cmp	dx,0
 21379                                  	je	short int_0C_first
 21380                                  
 21381                                  	cmp	byte [bx],0CFh
 21382                                  	je	short int_0C_first
 21383                                  	
 21384                                  	cmp	word [bx+6],424Bh
 21385                                  	je	short int_0C_not_first
 21386                                  	
 21387                                  	cmp	dx,0F000h
 21388                                  	jne	short int_0C_not_first
 21389                                  
 21390                                  	push	es
 21391                                  	push	dx
 21392                                  	mov	dx,0F000h
 21393                                  	mov	es,dx
 21394                                  	cmp	bx,[es:0FF01h]
 21395                                  	pop	dx
 21396                                  	pop	es
 21397                                  	je	short int_0C_first
 21398                                  %endif
 21399                                  	
 21400                                  int_0C_not_first:
 21401                                  	; 14/12/2022
 21402                                  	; 25/10/2022
 21403                                  	;pop	ds
 21404 000013A8 BF[5B06]                	mov	di,INT19OLD0C
 21405 000013AB BB[8900]                	mov	bx,old0C
 21406 000013AE BA[8700]                	mov	dx,int0C
 21407 000013B1 E8E000                  	call	new_init_loop
 21408                                  
 21409                                  	; 14/12/2022
 21410                                  	;jmp	short int_0C_end
 21411                                  ;int_0C_first:
 21412                                  	; 25/10/2022
 21413                                  	;pop	ds
 21414                                  
 21415                                  int_0C_end:
 21416                                  
 21417                                  stkinit_0D:
 21418 000013B4 BE3400                  	mov	si,0Dh*4 ; 52
 21419                                  
 21420                                  	; 14/12/2022	
 21421                                  	; 25/10/2022
 21422 000013B7 E8AF00                  	call	int_xx_first_check
 21423 000013BA 730C                    	jnc	short int_0D_end ; int_0D_first
 21424                                  
 21425                                  ; 14/12/2022
 21426                                  %if 0	
 21427                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21428                                  	push	ds
 21429                                  	lds	bx,[es:si]
 21430                                  	push	ds
 21431                                  	pop	dx
 21432                                  		
 21433                                  	cmp	dx,0
 21434                                  	je	short int_0D_first
 21435                                  
 21436                                  	cmp	byte [bx],0CFh
 21437                                  	je	short int_0D_first
 21438                                  	
 21439                                  	cmp	word [bx+6],424Bh
 21440                                  	je	short int_0D_not_first
 21441                                  	
 21442                                  	cmp	dx,0F000h
 21443                                  	jne	short int_0D_not_first
 21444                                  
 21445                                  	push	es
 21446                                  	push	dx
 21447                                  	mov	dx,0F000h
 21448                                  	mov	es,dx
 21449                                  	cmp	bx,[es:0FF01h]
 21450                                  	pop	dx
 21451                                  	pop	es
 21452                                  	je	short int_0D_first
 21453                                  %endif
 21454                                  	
 21455                                  int_0D_not_first:
 21456                                  	; 14/12/2022
 21457                                  	; 25/10/2022
 21458                                  	;pop	ds
 21459 000013BC BF[6006]                	mov	di,INT19OLD0D
 21460 000013BF BB[A100]                	mov	bx,old0D
 21461 000013C2 BA[9F00]                	mov	dx,int0D
 21462 000013C5 E8CC00                  	call	new_init_loop
 21463                                  
 21464                                  	; 14/12/2022
 21465                                  	;jmp	short int_0D_end
 21466                                  	; 02/11/2022
 21467                                  ;int_0D_first:
 21468                                  	;pop	ds
 21469                                  
 21470                                  int_0D_end:
 21471                                  
 21472                                  stkinit_0E:
 21473 000013C8 BE3800                  	mov	si,0Eh*4 ; 56
 21474                                  
 21475                                  	; 14/12/2022	
 21476                                  	; 25/10/2022
 21477 000013CB E89B00                  	call	int_xx_first_check
 21478 000013CE 730C                    	jnc	short int_0E_end ; int_0E_first
 21479                                  
 21480                                  ; 14/12/2022
 21481                                  %if 0	
 21482                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21483                                  	push	ds
 21484                                  	lds	bx,[es:si]
 21485                                  	push	ds
 21486                                  	pop	dx
 21487                                  		
 21488                                  	cmp	dx,0
 21489                                  	je	short int_0E_first
 21490                                  
 21491                                  	cmp	byte [bx],0CFh
 21492                                  	je	short int_0E_first
 21493                                  	
 21494                                  	cmp	word [bx+6],424Bh
 21495                                  	je	short int_0E_not_first
 21496                                  	
 21497                                  	cmp	dx,0F000h
 21498                                  	jne	short int_0E_not_first
 21499                                  
 21500                                  	push	es
 21501                                  	push	dx
 21502                                  	mov	dx,0F000h
 21503                                  	mov	es,dx
 21504                                  	cmp	bx,[es:0FF01h]
 21505                                  	pop	dx
 21506                                  	pop	es
 21507                                  	je	short int_0E_first
 21508                                  %endif
 21509                                  	
 21510                                  int_0E_not_first:
 21511                                  	; 14/12/2022
 21512                                  	; 25/10/2022
 21513                                  	;pop	ds
 21514 000013D0 BF[6506]                	mov	di,INT19OLD0E
 21515 000013D3 BB[B900]                	mov	bx,old0E
 21516 000013D6 BA[B700]                	mov	dx,int0E
 21517 000013D9 E8B800                  	call	new_init_loop
 21518                                  
 21519                                  	; 14/12/2022
 21520                                  	;jmp	short int_0E_end
 21521                                  ;int_0E_first:
 21522                                  	; 25/10/2022
 21523                                  	;pop	ds	
 21524                                  
 21525                                  int_0E_end:
 21526                                  
 21527                                  stkinit_72:
 21528 000013DC BEC801                  	mov	si,72h*4 ; 456
 21529                                  	
 21530                                  	; 14/12/2022
 21531                                  	; 25/10/2022
 21532 000013DF E88700                  	call	int_xx_first_check
 21533 000013E2 730C                    	jnc	short int_72_end ; int_72_first
 21534                                  
 21535                                  ; 14/12/2022
 21536                                  %if 0	
 21537                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21538                                  	push	ds
 21539                                  	lds	bx,[es:si]
 21540                                  	push	ds
 21541                                  	pop	dx
 21542                                  		
 21543                                  	cmp	dx,0
 21544                                  	je	short int_72_first
 21545                                  
 21546                                  	cmp	byte [bx],0CFh
 21547                                  	je	short int_72_first
 21548                                  	
 21549                                  	cmp	word [bx+6],424Bh
 21550                                  	je	short int_72_not_first
 21551                                  	
 21552                                  	cmp	dx,0F000h
 21553                                  	jne	short int_72_not_first
 21554                                  
 21555                                  	push	es
 21556                                  	push	dx
 21557                                  	mov	dx,0F000h
 21558                                  	mov	es,dx
 21559                                  	cmp	bx,[es:0FF01h]
 21560                                  	pop	dx
 21561                                  	pop	es
 21562                                  	je	short int_72_first
 21563                                  %endif
 21564                                  	
 21565                                  int_72_not_first:
 21566                                  	; 14/12/2022
 21567                                  	; 25/10/2022
 21568                                  	;pop	ds
 21569 000013E4 BF[6F06]                	mov	di,INT19OLD72
 21570 000013E7 BB[D100]                	mov	bx,old72
 21571 000013EA BA[CF00]                	mov	dx,int72
 21572 000013ED E8A400                  	call	new_init_loop
 21573                                  
 21574                                  	; 14/12/2022
 21575                                  	;jmp	short int_72_end
 21576                                  ;int_72_first:
 21577                                  	; 25/10/2022
 21578                                  	;pop	ds
 21579                                  
 21580                                  int_72_end:
 21581                                  
 21582                                  stkinit_73:
 21583 000013F0 BECC01                  	mov	si,73h*4 ; 460
 21584                                  	
 21585                                  	; 14/12/2022
 21586                                  	; 25/10/2022
 21587 000013F3 E87300                  	call	int_xx_first_check
 21588 000013F6 730C                    	jnc	short int_73_end ; int_73_first
 21589                                  
 21590                                  ; 14/12/2022
 21591                                  %if 0	
 21592                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21593                                  	push	ds
 21594                                  	lds	bx,[es:si]
 21595                                  	push	ds
 21596                                  	pop	dx
 21597                                  		
 21598                                  	cmp	dx,0
 21599                                  	je	short int_73_first
 21600                                  
 21601                                  	cmp	byte [bx],0CFh
 21602                                  	je	short int_73_first
 21603                                  	
 21604                                  	cmp	word [bx+6],424Bh
 21605                                  	je	short int_73_not_first
 21606                                  	
 21607                                  	cmp	dx,0F000h
 21608                                  	jne	short int_73_not_first
 21609                                  
 21610                                  	push	es
 21611                                  	push	dx
 21612                                  	mov	dx,0F000h
 21613                                  	mov	es,dx
 21614                                  	cmp	bx,[es:0FF01h]
 21615                                  	pop	dx
 21616                                  	pop	es
 21617                                  	je	short int_73_first
 21618                                  %endif	
 21619                                  	
 21620                                  int_73_not_first:
 21621                                  	; 14/12/2022
 21622                                  	; 25/10/2022
 21623                                  	;pop	ds
 21624 000013F8 BF[7406]                	mov	di,INT19OLD73
 21625 000013FB BB[E900]                	mov	bx,old73
 21626 000013FE BA[E700]                	mov	dx,int73
 21627 00001401 E89000                  	call	new_init_loop
 21628                                  
 21629                                  	; 14/12/2022
 21630                                  	;jmp	short int_73_end
 21631                                  ;int_73_first:
 21632                                  	; 25/10/2022
 21633                                  	;pop	ds
 21634                                  
 21635                                  int_73_end:
 21636                                  
 21637                                  stkinit_74:
 21638 00001404 BED001                  	mov	si,74h*4 ; 464
 21639                                  	
 21640                                  	; 14/12/2022
 21641                                  	; 25/10/2022
 21642 00001407 E85F00                  	call	int_xx_first_check
 21643 0000140A 730C                    	jnc	short int_74_end ; int_74_first
 21644                                  
 21645                                  ; 14/12/2022
 21646                                  %if 0		
 21647                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21648                                  	push	ds
 21649                                  	lds	bx,[es:si]
 21650                                  	push	ds
 21651                                  	pop	dx
 21652                                  		
 21653                                  	cmp	dx,0
 21654                                  	je	short int_74_first
 21655                                  
 21656                                  	cmp	byte [bx],0CFh
 21657                                  	je	short int_74_first
 21658                                  	
 21659                                  	cmp	word [bx+6],424Bh
 21660                                  	je	short int_74_not_first
 21661                                  	
 21662                                  	cmp	dx,0F000h
 21663                                  	jne	short int_74_not_first
 21664                                  
 21665                                  	push	es
 21666                                  	push	dx
 21667                                  	mov	dx,0F000h
 21668                                  	mov	es,dx
 21669                                  	cmp	bx,[es:0FF01h]
 21670                                  	pop	dx
 21671                                  	pop	es
 21672                                  	je	short int_74_first
 21673                                  %endif
 21674                                  
 21675                                  int_74_not_first:
 21676                                  	; 14/12/2022
 21677                                  	; 25/10/2022
 21678                                  	;pop	ds
 21679 0000140C BF[7906]                	mov	di,INT19OLD74
 21680 0000140F BB[0101]                	mov	bx,old74
 21681 00001412 BA[FF00]                	mov	dx,int74
 21682 00001415 E87C00                  	call	new_init_loop
 21683                                  	
 21684                                  	; 14/12/2022
 21685                                  	;jmp	short int_74_end
 21686                                  ;int_74_first:
 21687                                  	; 25/10/2022
 21688                                  	;pop	ds
 21689                                  
 21690                                  int_74_end:
 21691                                  
 21692                                  stkinit_76:
 21693 00001418 BED801                  	mov	si,76h*4 ; 472
 21694                                  	
 21695                                  	; 14/12/2022
 21696                                  	; 25/10/2022
 21697 0000141B E84B00                  	call	int_xx_first_check
 21698 0000141E 730E                    	jnc	short int_76_end ; int_76_first
 21699                                  
 21700                                  ; 14/12/2022
 21701                                  %if 0	
 21702                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21703                                  	push	ds
 21704                                  	lds	bx,[es:si]
 21705                                  	push	ds
 21706                                  	pop	dx
 21707                                  		
 21708                                  	cmp	dx,0
 21709                                  	je	short int_76_first
 21710                                  
 21711                                  	cmp	byte [bx],0CFh
 21712                                  	je	short int_76_first
 21713                                  	
 21714                                  	cmp	word [bx+6],424Bh
 21715                                  	je	short int_76_not_first
 21716                                  	
 21717                                  	cmp	dx,0F000h
 21718                                  	jne	short int_76_not_first
 21719                                  
 21720                                  	push	es
 21721                                  	push	dx
 21722                                  	mov	dx,0F000h
 21723                                  	mov	es,dx
 21724                                  	cmp	bx,[es:0FF01h]
 21725                                  	pop	dx
 21726                                  	pop	es
 21727                                  	je	short int_76_first
 21728                                  %endif
 21729                                  	
 21730                                  int_76_not_first:
 21731                                  	; 14/12/2022
 21732                                  	; 25/10/2022
 21733                                  	;pop	ds
 21734 00001420 BF[7E06]                	mov	di,INT19OLD76
 21735 00001423 BB[1901]                	mov	bx,old76
 21736 00001426 BA[1701]                	mov	dx,int76
 21737 00001429 E86800                  	call	new_init_loop
 21738                                  
 21739                                  	; 14/12/2022
 21740 0000142C EB00                    	jmp	short int_76_end
 21741                                  ;int_76_first:
 21742                                  	; 25/10/2022
 21743                                  	;pop	ds
 21744                                  
 21745                                  int_76_end:
 21746                                  
 21747                                  stkinit_77:
 21748 0000142E BEDC01                  	mov	si,77h*4 ; 476
 21749                                  	
 21750                                  	; 14/12/2022
 21751                                  	; 25/10/2022
 21752 00001431 E83500                  	call	int_xx_first_check
 21753 00001434 730C                    	jnc	short int_77_end ; int_77_first
 21754                                  
 21755                                  ; 14/12/2022
 21756                                  %if 0	
 21757                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21758                                  	push	ds
 21759                                  	lds	bx,[es:si]
 21760                                  	push	ds
 21761                                  	pop	dx
 21762                                  		
 21763                                  	cmp	dx,0
 21764                                  	je	short int_77_first
 21765                                  
 21766                                  	cmp	byte [bx],0CFh
 21767                                  	je	short int_77_first
 21768                                  	
 21769                                  	cmp	word [bx+6],424Bh
 21770                                  	je	short int_77_not_first
 21771                                  	
 21772                                  	cmp	dx,0F000h
 21773                                  	jne	short int_77_not_first
 21774                                  
 21775                                  	push	es
 21776                                  	push	dx
 21777                                  	mov	dx,0F000h
 21778                                  	mov	es,dx
 21779                                  	cmp	bx,[es:0FF01h]
 21780                                  	pop	dx
 21781                                  	pop	es
 21782                                  	je	short int_77_first
 21783                                  %endif
 21784                                  	
 21785                                  int_77_not_first:
 21786                                  	; 14/12/2022
 21787                                  	; 25/10/2022
 21788                                  	;pop	ds
 21789 00001436 BF[8306]                	mov	di,INT19OLD77
 21790 00001439 BB[3101]                	mov	bx,old77
 21791 0000143C BA[2F01]                	mov	dx,int77
 21792 0000143F E85200                  	call	new_init_loop
 21793                                  
 21794                                  	; 14/12/2022
 21795                                  	;jmp	short int_77_end
 21796                                  ;int_77_first:
 21797                                  	; 25/10/2022
 21798                                  	;pop	ds
 21799                                  
 21800                                  int_77_end:
 21801 00001442 1E                      	push	ds
 21802 00001443 B800F0                  	mov	ax,0F000h		; look at the model byte
 21803 00001446 8ED8                    	mov	ds,ax
 21804 00001448 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 21805 0000144D 1F                      	pop	ds
 21806 0000144E 7504                    	jne	short skip_enablenmis
 21807                                  
 21808 00001450 B027                    	mov	al,27h			; enable convertible nmis
 21809 00001452 E672                    	out	72h,al
 21810                                  
 21811                                  ; 25/10/2022
 21812                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 21813                                  
 21814                                  skip_enablenmis:
 21815 00001454 FB                      	sti
 21816                                  	;;mov	ax,Bios_Data ; 70h
 21817                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 21818                                  	; 21/10/2022
 21819 00001455 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 21820 00001458 8ED8                    	mov	ds,ax
 21821                                  
 21822                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 21823                                  
 21824 0000145A C606[4006]01            	mov	byte [INT19SEM],1	; indicate that int 19
 21825                                  					; initialization is complete
 21826                                  
 21827 0000145F 5D                      	pop	bp			; restore all
 21828 00001460 5E                      	pop	si
 21829 00001461 5F                      	pop	di
 21830 00001462 5A                      	pop	dx
 21831 00001463 59                      	pop	cx
 21832 00001464 5B                      	pop	bx
 21833 00001465 07                      	pop	es
 21834 00001466 1F                      	pop	ds
 21835 00001467 58                      	pop	ax
 21836 00001468 C3                      	retn
 21837                                  
 21838                                  ; 14/12/2022
 21839                                  ; ----------------------------------------------------------------------
 21840                                  
 21841                                  	; 14/12/2022
 21842                                  	; 25/10/2022
 21843                                  ;%if 0
 21844                                  	; 27/03/2019 - Retro DOS v4.0
 21845                                  int_xx_first_check:
 21846 00001469 1E                      	push	ds
 21847 0000146A 26C51C                  	lds	bx,[es:si]
 21848 0000146D 1E                      	push	ds
 21849 0000146E 5A                      	pop	dx
 21850                                  		
 21851 0000146F 83FA00                  	cmp	dx,0
 21852 00001472 741E                    	je	short int_xx_first
 21853                                  	
 21854 00001474 803FCF                  	cmp	byte [bx],0CFh
 21855 00001477 7419                    	je	short int_xx_first
 21856                                  	
 21857 00001479 817F064B42              	cmp	word [bx+6],424Bh
 21858 0000147E 7411                    	je	short int_xx_not_first
 21859                                  	
 21860 00001480 81FA00F0                	cmp	dx,0F000h
 21861 00001484 750B                    	jne	short int_xx_not_first
 21862                                  
 21863 00001486 06                      	push	es
 21864                                  	;push	dx
 21865                                  	;mov	dx,0F000h
 21866 00001487 8EC2                    	mov	es,dx
 21867 00001489 263B1E01FF              	cmp	bx,[es:0FF01h]
 21868                                        	;pop	dx
 21869 0000148E 07                      	pop	es
 21870 0000148F 7401                    	je	short int_xx_first
 21871                                  
 21872                                  int_xx_not_first:
 21873 00001491 F9                      	stc
 21874                                  int_xx_first:
 21875 00001492 1F                      	pop	ds
 21876 00001493 C3                      	retn
 21877                                  
 21878                                  ;%endif
 21879                                  
 21880                                  ; ----------------------------------------------------------------------
 21881                                  ; 27/03/2019 - Retro DOS v4.0
 21882                                  
 21883                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21884                                  ; (SYSINIT:1610h)
 21885                                  
 21886                                  new_init_loop:
 21887                                  
 21888                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 21889                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 21890                                  ;	dx=ds:offset of intxx, the new interrupt handler
 21891                                  ;	di=offset value of int19old&aa variable in bios.
 21892                                  ;	es=zero, segid of vector table
 21893                                  ;	ds=relocated stack code segment
 21894                                  
 21895 00001494 268B04                  	mov	ax,[es:si]		;remember offset in vector
 21896 00001497 8907                    	mov	[bx],ax			; to original owner in ds
 21897 00001499 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 21898 0000149D 894702                  	mov	[bx+2],ax		; to original owner in ds
 21899                                  
 21900 000014A0 1E                      	push	ds
 21901                                  	;;mov	ax,Bios_Data ; 70h
 21902                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 21903                                  	; 21/10/2022
 21904 000014A1 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 21905 000014A4 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 21906 000014A6 268B04                  	mov	ax,[es:si]		;int 19 handler
 21907 000014A9 8905                    	mov	[di],ax
 21908 000014AB 268B4402                	mov	ax,[es:si+2]
 21909 000014AF 894502                  	mov	word [di+2],ax
 21910 000014B2 1F                      	pop	ds
 21911                                  
 21912 000014B3 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 21913 000014B6 268C5C02                	mov	[es:si+2],ds
 21914 000014BA C3                      	retn
 21915                                  
 21916                                  ; End of STACK initialization routine
 21917                                  ; ----------------------------------------------------------------------
 21918                                  
 21919                                  ; ----------------------------------------------------------------------
 21920                                  ;set the devmark for mem command.
 21921                                  ;in: [memhi] - the address to place devmark
 21922                                  ;    [memlo] = 0
 21923                                  ;    al = id for devmark_id
 21924                                  ;out: devmark established.
 21925                                  ;     the address saved in cs:[devmark_addr]
 21926                                  ;     [memhi] increase by 1.
 21927                                  ; ----------------------------------------------------------------------
 21928                                  
 21929                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21930                                  ; (SYSINIT:1637h)
 21931                                  
 21932                                  setdevmark:
 21933                                  
 21934 000014BB 06                      	push	es
 21935 000014BC 51                      	push	cx
 21936                                  
 21937 000014BD 2E8B0E[6203]            	mov	cx,[cs:memhi]
 21938 000014C2 2E890E[E214]            	mov	[cs:devmark_addr],cx
 21939 000014C7 8EC1                    	mov	es,cx
 21940                                  	; 25/10/2022
 21941                                  	;mov	[es:devmark.id],al
 21942 000014C9 26A20000                	mov	[es:0],al
 21943 000014CD 41                      	inc	cx
 21944                                  	;mov	[es:devmark.seg],cx
 21945 000014CE 26890E0100              	mov	[es:1],cx
 21946                                  
 21947 000014D3 59                      	pop	cx
 21948 000014D4 07                      	pop	es
 21949 000014D5 2EFF06[6203]            	inc	word [cs:memhi]
 21950 000014DA C3                      	retn
 21951                                  
 21952                                  ; ----------------------------------------------------------------------
 21953                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 21954                                  ; ----------------------------------------------------------------------
 21955                                  ; 27/03/2019 - Retro DOS v4.0
 21956                                  
 21957                                  ;MULTI_CONFIG	equ 1
 21958                                  
 21959                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 21960                                                                          ; allocation strategy call
 21961                                  
 21962                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 21963                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 21964                                  
 21965                                  default_filenum equ 8
 21966                                  
 21967                                  ;stacksw	equ true		; include switchable hardware stacks
 21968                                  
 21969                                  ; external variable defined in ibmbio module for multi-track
 21970                                  
 21971                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 21972                                  					; it on after handling config.sys file as a
 21973                                  					; default value,if multrk_flag = multrk_off1.
 21974                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 21975                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 21976                                  
 21977                                  ; if stacksw
 21978                                  
 21979                                  ; internal stack parameters
 21980                                  
 21981                                  ;entrysize	equ 8
 21982                                  
 21983                                  ;mincount	equ 8
 21984                                  ;defaultcount	equ 9
 21985                                  ;maxcount	equ 64
 21986                                  
 21987                                  ;minsize 	equ 32
 21988                                  ;defaultsize	equ 128
 21989                                  ;maxsize 	equ 512
 21990                                  
 21991                                  DOS_FLAG_OFFSET	equ 86h
 21992                                  
 21993                                  ;ifdef MULTI_CONFIG
 21994                                  ;
 21995                                  ;   config_envlen must immediately precede config_wrkseg, because they
 21996                                  ;   may be loaded as a dword ptr
 21997                                  
 21998                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 21999                                  ; 25/10/2022
 22000 000014DB 0000                    config_envlen:	dw  0  			; when config_wrkseg is being used as
 22001                                                 				;  a scratch env, this is its length
 22002 000014DD 0000                    config_wrkseg:	dw  0			; config work area (above confbot)
 22003                                                     			;  segment of work area
 22004                                  
 22005 000014DF 00                      config_cmd:	db  0  			; current config cmd
 22006                                                   			;  (with CONFIG_OPTION_QUERY bit intact)
 22007 000014E0 00                      config_multi:	db  0                   ; non-zero if multi-config config.sys
 22008                                  
 22009                                  ;endif ; MULTI_CONFIG
 22010                                  
 22011 000014E1 00                      multdeviceflag:	db  0
 22012                                  
 22013 000014E2 0000                    devmark_addr:	dw  0			;segment address for devmark.
 22014                                  
 22015 000014E4 00                      setdevmarkflag: db  0			;flag used for devmark
 22016                                  
 22017                                  ; 30/12/2022
 22018                                  ; 12/12/2022
 22019 000014E5 00                      driver_units:	db  0			;total unitcount for driver
 22020                                  
 22021                                  ; 12/12/2022
 22022                                  ;ems_stub_installed:
 22023                                  ;		db  0
 22024                                  
 22025                                  ; 12/12/2022	
 22026                                  ;align 2
 22027                                  
 22028                                  badparm_ptr:	; label	dword
 22029 000014E6 0000                    badparm_off:	dw  0
 22030 000014E8 0000                    badparm_seg:	dw  0
 22031                                  
 22032                                  ;******************************************************************************
 22033                                  ;take care of config.sys file.
 22034                                  ;system parser data and code.
 22035                                  ;******************************************************************************
 22036                                  
 22037                                  ;*******************************************************************
 22038                                  ; parser options set for msbio sysconf module
 22039                                  ;*******************************************************************
 22040                                  ;
 22041                                  ;**** default assemble swiches definition **************************
 22042                                  
 22043                                  ;farsw	equ 0		; near call expected
 22044                                  ;datesw	equ 0		; check date format
 22045                                  ;timesw	equ 0		; check time format
 22046                                  ;filesw	equ 1		; check file specification
 22047                                  ;capsw	equ 0		; perform caps if specified
 22048                                  ;cmpxsw	equ 0		; check complex list
 22049                                  ;numsw	equ 1		; check numeric value
 22050                                  ;keysw	equ 0		; support keywords
 22051                                  ;swsw	equ 1		; support switches
 22052                                  ;val1sw	equ 1		; support value definition 1
 22053                                  ;val2sw	equ 0		; support value definition 2
 22054                                  ;val3sw	equ 1		; support value definition 3
 22055                                  ;drvsw	equ 1		; support drive only format
 22056                                  ;qussw	equ 0		; support quoted string format
 22057                                  
 22058                                  ; psdata_seg equ cs
 22059                                  
 22060                                  	;.xlist
 22061                                  	;include parse.asm		;together with psdata.inc
 22062                                  	;.list
 22063                                  
 22064                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 22065                                  ; ======================================================================
 22066                                  ; 27/03/2019 - Retro DOS v4.0
 22067                                  
 22068                                  ; 30/03/2019
 22069                                  ; VERSION.INC (MSDOS 6.0) 
 22070                                  ; Set DBCS Blank constant
 22071                                  
 22072                                  ; ifndef DBCS
 22073                                  DB_SPACE EQU 2020h
 22074                                  DB_SP_HI EQU 20h
 22075                                  DB_SP_LO EQU 20h
 22076                                  ; else
 22077                                  
 22078                                  ;*******************************************************************
 22079                                  ; Parser include file
 22080                                  ;*******************************************************************
 22081                                  
 22082                                  ;**** Equation field
 22083                                  ;-------- Character code definition
 22084                                  
 22085                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 22086                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 22087                                  _$P_Period	   equ	"."             ;AN020;
 22088                                  _$P_Slash	   equ	"/"             ;AN020;
 22089                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 22090                                  _$P_Comma	   equ	","             ;AN000;
 22091                                  _$P_Switch	   equ	"/"             ;AN000;
 22092                                  _$P_Keyword	   equ	"="             ;AN000;
 22093                                  _$P_Colon	   equ	":"             ;AN000;
 22094                                  _$P_Plus 	   equ	"+"             ;AN000;
 22095                                  _$P_Minus	   equ	"-"             ;AN000;
 22096                                  _$P_Rparen	   equ	")"             ;AN000;
 22097                                  _$P_Lparen	   equ	"("             ;AN000;
 22098                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 22099                                  _$P_DQuote	   equ	'"'             ;AN000;
 22100                                  _$P_NULL 	   equ	0		;AN000;
 22101                                  _$P_TAB		   equ	9		;AN000;
 22102                                  _$P_CR		   equ	0Dh		;AN000;
 22103                                  _$P_LF		   equ	0Ah		;AN000;
 22104                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 22105                                  
 22106                                  ;-------- Masks
 22107                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 22108                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 22109                                  
 22110                                  ;-------- DOS function call related equs
 22111                                  
 22112                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 22113                                  					; by this call, following information
 22114                                  struc _$P_CDI	
 22115 00000000 ????                     .DateF: resw 1
 22116 00000002 ??????????               .Money: resb 5
 22117 00000007 ????                     .1000:	 resb 2
 22118 00000009 ????                     .Dec:	 resb 2
 22119 0000000B ????                     .DateS: resb 2
 22120 0000000D ????                     .TimeS: resb 2
 22121 0000000F ??                          	 resb 1
 22122 00000010 ??                      	 resb 1
 22123 00000011 ??                       .TimeF: resb 1	 
 22124 00000012 ????????                	 resw 2
 22125 00000016 ????                    	 resb 2
 22126 00000018 <res Ah>                	 resw 5
 22127                                   .size:
 22128                                  endstruc
 22129                                  
 22130                                  _$P_Date_MDY	   equ	0		;AN000;
 22131                                  _$P_Date_DMY	   equ	1		;AN000;
 22132                                  _$P_Date_YMD	   equ	2		;AN000;
 22133                                  ;-------------
 22134                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 22135                                  					;AN000; DS:SI will points to DBCS EV
 22136                                  ;-------------
 22137                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 22138                                  					;AN000; following parameters are set
 22139                                  					;AN000; to get casemap table.
 22140                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 22141                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 22142                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 22143                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 22144                                  					; By this call following information
 22145                                  					; is returned.
 22146                                  struc _$P_DOS_TBL
 22147 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 22148 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 22149 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 22150                                  endstruc
 22151                                  
 22152                                  ; ----------------------------------------------------------------------------
 22153                                  ; PARMS 	LABEL	BYTE
 22154                                  ;		DW	PARMSX
 22155                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 22156                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22157                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 22158                                  ;					; TYPICAL ARE ";", "="
 22159                                  ;					; "," & WHITESPACE ALWAYS
 22160                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22161                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 22162                                  ; ----------------------------------------------------------------------------
 22163                                  
 22164                                  ;-------------------------------- PARMS block structure
 22165                                  struc _$P_PARMS_Blk
 22166 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 22167 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 22168 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 22169                                  endstruc
 22170                                  
 22171                                  _$P_Len_PARMS	   equ	4		;AN000;
 22172                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 22173                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 22174                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 22175                                  
 22176                                  ; ----------------------------------------------------------------------------
 22177                                  ; PARMSX	LABEL	BYTE
 22178                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 22179                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 22180                                  ;		:			; REPEATS maxp-1 TIMES
 22181                                  ;		DB	maxs		; # OF SWITCHES
 22182                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 22183                                  ;		:			; REPEATS maxs-1 TIMES
 22184                                  ;		DB	maxk		; # OF KEYWORD
 22185                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 22186                                  ;		:			; REPEATS maxk-1 TIMES
 22187                                  ; ----------------------------------------------------------------------------
 22188                                  
 22189                                  ;-------------------------------- PARMSX block structure
 22190                                  struc _$P_PARMSX_Blk		;AN000;
 22191 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 22192 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 22193 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 22194                                  endstruc
 22195                                  
 22196                                  ; ----------------------------------------------------------------------------
 22197                                  ; << Control field definition  >>
 22198                                  ;
 22199                                  ;
 22200                                  ;CONTROL   LABEL   BYTE
 22201                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 22202                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 22203                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 22204                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 22205                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 22206                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 22207                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 22208                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 22209                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 22210                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 22211                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 22212                                  ;				   ; 0002H=REPEATS ALLOWED
 22213                                  ;				   ; 0001H=OPTIONAL
 22214                                  ;	   DW	   FUNCTION_FLAGS
 22215                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 22216                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 22217                                  ;				   ; 0010H=REMOVE ":" AT END
 22218                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 22219                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 22220                                  ;	   DW	   VALUES	   ; VALUE LISTS
 22221                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 22222                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 22223                                  ;	   :
 22224                                  ;
 22225                                  ;Note:
 22226                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 22227                                  ;      DATE bit simalteniously.
 22228                                  ;
 22229                                  ;      The parser examins each bit along with the following priority.
 22230                                  ;
 22231                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 22232                                  ;      FILE SPEC -> SIMPLE STRING.
 22233                                  ;
 22234                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 22235                                  ;      in the result buffer is capitalized.
 22236                                  ;
 22237                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 22238                                  ;
 22239                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 22240                                  ;      switch, for example, '/A', then STRING points to;
 22241                                  ;
 22242                                  ;			DB    1 	; number of following synonyms
 22243                                  ;			DB   '/A',0
 22244                                  ;
 22245                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 22246                                  ;
 22247                                  ;			DB    1 	; number of following synonyms
 22248                                  ;			DB   'CODEPAGE=',0
 22249                                  ;
 22250                                  ;    - "..." must consist of upper case characters only because the parser
 22251                                  ;      performs pattern matching after converting input to upper case (by
 22252                                  ;      using the current country upper case table)
 22253                                  ;
 22254                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 22255                                  ;      example /A and /B, the format will be;
 22256                                  ;
 22257                                  ;			DB    2 	; number of following synonyms
 22258                                  ;			DB    '/A',0
 22259                                  ;			DB    '/B',0
 22260                                  ; ----------------------------------------------------------------------------
 22261                                  
 22262                                  ;**** Match_Flags
 22263                                  
 22264                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 22265                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 22266                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 22267                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 22268                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 22269                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 22270                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 22271                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 22272                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 22273                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 22274                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 22275                                  _$P_Optional	   equ	0001h		;AN000; Optional
 22276                                  
 22277                                  ;**** Function flags
 22278                                  
 22279                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 22280                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 22281                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 22282                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 22283                                  
 22284                                  ;-------------------------------- Control block structure
 22285                                  struc _$P_Control_Blk
 22286 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 22287 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 22288 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 22289 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 22290 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 22291 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 22292                                  endstruc
 22293                                  
 22294                                  ; ----------------------------------------------------------------------------
 22295                                  ; << Value List Definition >>
 22296                                  ;
 22297                                  ;VALUES 	LABEL	BYTE
 22298                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 22299                                  ;	     +-
 22300                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 22301                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 22302                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 22303                                  ;	     |	:
 22304                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 22305                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 22306                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 22307                                  ;	     |	:
 22308                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 22309                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 22310                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 22311                                  ;	     +-	:
 22312                                  ;
 22313                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 22314                                  ;
 22315                                  ;Note:
 22316                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 22317                                  ;      when no choice lists are provided.
 22318                                  ;
 22319                                  ;    - STRING must consist of upper case characters only because the parser
 22320                                  ;      performs pattern matching after converting input to upper case (by
 22321                                  ;      using the current country upper case table)
 22322                                  ; ----------------------------------------------------------------------------
 22323                                  
 22324                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 22325                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 22326                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 22327                                  _$P_nval_String	   equ	3		;AN000; string list ID
 22328                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 22329                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 22330                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 22331                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 22332                                  
 22333                                  struc _$P_Val_List
 22334 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 22335 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 22336 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 22337 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 22338 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 22339                                  endstruc
 22340                                  
 22341                                  ; ----------------------------------------------------------------------------
 22342                                  ; << Result Buffer Definition  >>
 22343                                  ;
 22344                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 22345                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 22346                                  ;						;	1=NUMBER, 2=LIST INDEX,
 22347                                  ;						;	3=STRING, 4=COMPLEX,
 22348                                  ;						;	5=FILESPEC, 6=DRIVE
 22349                                  ;						;	7=DATE, 8=TIME
 22350                                  ;						;	9=QUOTED STRING
 22351                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 22352                                  ;
 22353                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 22354                                  ;
 22355                                  ;            +-
 22356                                  ;	    | DD	n			; VALUE IF NUMBER
 22357                                  ;	    | or
 22358                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 22359                                  ;	    |					; (ES presents Segment address)
 22360                                  ;	    | or
 22361                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 22362                                  ;	    | or
 22363                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 22364                                  ;	    | or
 22365                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 22366                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 22367                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 22368                                  ;	    | or
 22369                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 22370                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 22371                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 22372                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 22373                                  ;	    +-
 22374                                  ;
 22375                                  ;
 22376                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 22377                                  ;      list.
 22378                                  ;
 22379                                  ;      YEAR: If the input value for the year is less than 100, parser
 22380                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 22381                                  ;	     the year value, he returns 1987.
 22382                                  ; ----------------------------------------------------------------------------
 22383                                  
 22384                                  ;-------------------------------- Result block structure
 22385                                  struc _$P_Result_Blk
 22386 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 22387 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 22388 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 22389 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 22390                                  endstruc
 22391                                  
 22392                                  ;--------------------------------
 22393                                  ;**** values for the type field in the result block
 22394                                  
 22395                                  _$P_EOL		   equ	0		;AN000; End of line
 22396                                  _$P_Number	   equ	1		;AN000; Number
 22397                                  _$P_List_Idx	   equ	2		;AN000; List Index
 22398                                  _$P_String	   equ	3		;AN000; String
 22399                                  _$P_Complex	   equ	4		;AN000; Complex
 22400                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 22401                                  _$P_Drive	   equ	6		;AN000; Drive
 22402                                  _$P_Date_F	   equ	7		;AN000; Date
 22403                                  _$P_Time_F	   equ	8		;AN000; Time
 22404                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 22405                                  
 22406                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 22407                                  
 22408                                  ;**** Return code
 22409                                  ;
 22410                                  ; following return code will be returned in the AX register.
 22411                                  
 22412                                  _$P_No_Error	   equ	0		;AN000; No error
 22413                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 22414                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 22415                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 22416                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 22417                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 22418                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 22419                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 22420                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 22421                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 22422                                  
 22423                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 22424                                  
 22425                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 22426                                  
 22427                                  ;********************** Local Data *************************************
 22428 000014EA 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 22429 000014EC 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 22430 000014EE 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 22431 000014F0 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 22432 000014F2 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 22433 000014F3 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 22434 000014F5 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 22435 000014F7 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 22436                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 22437                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 22438                                  
 22439                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 22440                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 22441                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 22442                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 22443                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 22444                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 22445                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 22446                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 22447                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 22448                                  
 22449                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 22450                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 22451                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 22452                                  
 22453 000014F9 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 22454 000014FB 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 22455 000014FD 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 22456 000014FF 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 22457                                  
 22458 00001501 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 22459                                  _$P_STRING_BUF_END equ	$		;AN000;
 22460                                  
 22461                                  ; 25/10/2022
 22462                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 22463                                  
 22464 00001581 FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 22465 00001582 0000                    		   dw	0		;AN000; offset	of char case map table
 22466 00001584 0000                    		   dw	0		;AN000; segment of char case map table
 22467                                  ; 25/10/2022
 22468                                  ;IF CAPSW
 22469                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 22470                                  ;		   dw	0		;AN000; offset	of file case map table
 22471                                  ;		   dw	0		;AN000; segment of file case map table
 22472                                  ;ENDIF
 22473                                  
 22474                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 22475                                  ;
 22476                                  
 22477                                  ;M029
 22478                                  ;!!!WARNING!!!
 22479                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 22480                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 22481                                  ;changes need to be made in SYSPARSE
 22482                                  
 22483                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 22484                                  
 22485                                  ; 25/10/2022
 22486                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 22487                                  
 22488 00001586 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 22489                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 22490                                  
 22491                                  ;ENDIF					;AN000;(of FileSW)
 22492                                  
 22493                                  ; delimiter parsing
 22494                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 22495                                  _$P_period_only	   equ	02h		;AN032; check only for period
 22496                                  
 22497                                  ;filespec error flag
 22498 0000158F 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 22499                                  					;AN033;  was detected.
 22500                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 22501                                  
 22502                                  
 22503                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 22504                                  ; ======================================================================
 22505                                  ; 27/03/2019 - Retro DOS v4.0
 22506                                  
 22507                                  ;***********************************************************************
 22508                                  ; SysParse;
 22509                                  ;
 22510                                  ;  Function : Parser Entry
 22511                                  ;
 22512                                  ;  Input: DS:SI -> command line
 22513                                  ;	  ES:DI -> parameter block
 22514                                  ;	  cs -> psdata.inc
 22515                                  ;	  CX = operand ordinal
 22516                                  ;
 22517                                  ;	  Note:  ES is the segment containing all the control blocks defined
 22518                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 22519                                  ;		 is in DS.
 22520                                  ;
 22521                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 22522                                  ;		    invalid value list. But this parser does NOT implement
 22523                                  ;		    this feature. Therefore CY always zero.
 22524                                  ;
 22525                                  ;	   CY = 0   AX = return code
 22526                                  ;		    BL = terminated delimiter code
 22527                                  ;		    CX = new operand ordinal
 22528                                  ;		    SI = set past scaned operand
 22529                                  ;		    DX = selected result buffer
 22530                                  ;
 22531                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 22532                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 22533                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 22534                                  ;
 22535                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 22536                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 22537                                  ;
 22538                                  ;-------- Modification History -----------------------------------------
 22539                                  ;
 22540                                  ;  4/04/87 : Created by K. K,
 22541                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 22542                                  ;	   : JMP SHORT assemble error (tm02)
 22543                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 22544                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 22545                                  ;	     DateSW equ 1)	      (tm04)
 22546                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 22547                                  ;				      (tm05) in PSDATA.INC
 22548                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 22549                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 22550                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 22551                                  ;	     value-list block	      (tm07)
 22552                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 22553                                  ;	     switch (keyword) or not. If there is, backup si for next call
 22554                                  ;	     (tm08)
 22555                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 22556                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 22557                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 22558                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 22559                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 22560                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 22561                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 22562                                  ;					  (tm12)
 22563                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 22564                                  ;					  (tm13)
 22565                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 22566                                  ;					  (tm14)
 22567                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 22568                                  ;					  (tm15)
 22569                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 22570                                  
 22571                                  ;  7/24/87 : Quoted strings being returned with quotes.
 22572                                  
 22573                                  ;  7/28/87 : Kerry S (;AN018;)
 22574                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 22575                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 22576                                  ;	     affected: _$P_Chk_SW_Control.
 22577                                  
 22578                                  ;  7/29/87 : Kerry S (;AN019;)
 22579                                  ;	     Now allow the optional bit in match flags for switches.  This
 22580                                  ;	     allows the switch to be encountered with a value or without a
 22581                                  ;	     value and no error is returned.
 22582                                  ;
 22583                                  
 22584                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 22585                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 22586                                  ;	     within a date response, instead of checking just for the one
 22587                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 22588                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 22589                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 22590                                  
 22591                                  ;  9/1/87  : Kerry S (;AN021)
 22592                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 22593                                  ;	     the command line with the string in the control block the
 22594                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 22595                                  ;	     on the command line and assuming a match.	This allowed a shorter
 22596                                  ;	     string on the command line than in the synonym list in the control
 22597                                  ;	     block.  I put in a test for a null in the control block so the
 22598                                  ;	     string in the control block must be the same length as the string
 22599                                  ;	     preceeding the colon or equal on the command line.
 22600                                  
 22601                                  ;  8/28/87 : Kerry S (;AN022;)
 22602                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 22603                                  ;	     problems for people who included it themselves in a segment other
 22604                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 22605                                  ;	     segment.
 22606                                  
 22607                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 22608                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 22609                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 22610                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 22611                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 22612                                  ;	     BL be used if TIME is being parsed.
 22613                                  
 22614                                  ;  9/24/87 : Ed K
 22615                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 22616                                  ;	     invocations with their normally expanded code; made comments
 22617                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 22618                                  
 22619                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 22620                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 22621                                  ;	     pointed to by non-existant CONTROL.
 22622                                  
 22623                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 22624                                  ;	     A quoted text string can be framed only by double quote.  Remove
 22625                                  ;	     support to frame quoted text string with single quote.
 22626                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 22627                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 22628                                  ;	     single quote in PROC prologues are left as is for history reasons.
 22629                                  
 22630                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 22631                                  ;	     quote chars within a quoted string is supposed to be reported as
 22632                                  ;	     one quote character, but is reported as two quotes.  This changed
 22633                                  ;	     two instructions in PROC _$P_Quoted_Str.
 22634                                  
 22635                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 22636                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 22637                                  
 22638                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 22639                                  
 22640                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 22641                                  ;	     psdata buffer should have cs.
 22642                                  
 22643                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 22644                                  ;	     positional missing.
 22645                                  
 22646                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 22647                                  ;	     as a line delimiter, should use carriage return.
 22648                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 22649                                  
 22650                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 22651                                  
 22652                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 22653                                  ;	     endless loop since SI is returned still pointing to start
 22654                                  ;	     of that parm.
 22655                                  
 22656                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 22657                                  ;	     Vector to returned string has CS instead of cs, but
 22658                                  ;	     when tried to fix it on previous version, changed similar
 22659                                  ;	     but wrong place.
 22660                                  
 22661                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 22662                                  ;	     delimiters between hours, minutes, seconds for time. And period
 22663                                  ;	     and comma are valid delimiters between seconds and 100th second.
 22664                                  
 22665                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 22666                                  ;	     in a filespec, then flag an error.
 22667                                  
 22668                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 22669                                  ;	     indexed off of the cs equate instead of the DS register.
 22670                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 22671                                  ;  -->	     local parser data. Why were some references to local data changed
 22672                                  ;	     to do this before, but not all ?????
 22673                                  
 22674                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 22675                                  
 22676                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 22677                                  ;
 22678                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 22679                                  
 22680                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 22681                                  
 22682                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 22683                                  ;	     separator in TIME before hundredths field.
 22684                                  ;
 22685                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 22686                                  ;			strings as keywords.
 22687                                  ;
 22688                                  ;***********************************************************************
 22689                                  
 22690                                  ;IF FarSW				;AN000;(Check if need far return)
 22691                                  ;SysParse proc far			;AN000;
 22692                                  ;ELSE					;AN000;
 22693                                  ;SysParse proc near			;AN000;
 22694                                  ;ENDIF					;AN000;(of FarSW)
 22695                                  
 22696                                  ; 27/03/2019 - Retro DOS v4.0
 22697                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 22698                                  
 22699                                  ; 25/10/2022 - Retro DOS v4.0
 22700                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 22701                                  
 22702                                  SysParse:
 22703 00001590 2EC706[F714]0000        	mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 22704 00001597 FC                      	cld				;AN000; confirm forward direction
 22705 00001598 2E890E[EA14]            	mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 22706 0000159D 2EC706[EC14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 22707 000015A4 2EC706[FF14]0000        	mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 22708                                  
 22709 000015AB 2EC706[F014]0000        	mov	word [cs:_$P_DX],0	;AC034; (tm15)
 22710                                  
 22711                                  ;M029 -- Begin changes
 22712                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 22713                                  ;entry to SysParse. This is in the non-checksum region and any program that
 22714                                  ;corrupts this table but does not corrupt the checksum region will leave
 22715                                  ;command.com parsing in an inconsistent state.
 22716                                  ; NB: The special characters string has been hardcoded here. If any change
 22717                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 22718                                  
 22719                                  ;IF FileSW + DrvSW
 22720 000015B2 2EC706[8615]5D5B        	mov	word [cs:_$P_FileSp_Char], ']['
 22721 000015B9 2EC706[8815]3C7C        	mov	word [cs:_$P_FileSp_Char+2], '<|'
 22722 000015C0 2EC706[8A15]2B3E        	mov	word [cs:_$P_FileSp_Char+4], '+>'
 22723 000015C7 2EC706[8C15]3B3D        	mov 	word [cs:_$P_FileSp_Char+6], ';='
 22724                                  ;ENDIFtHHH
 22725                                  
 22726                                  ;M029 -- End of changes
 22727                                  
 22728 000015CE E8BC06                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 22729 000015D1 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 22730                                  ;--------------------------- End of Line
 22731 000015D3 B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 22732 000015D6 53                      	push	bx			;AN000;
 22733                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 22734                                  					;AN000; Get the PARMSX address to
 22735 000015D7 268B1D                  	mov	bx,[es:di]
 22736                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 22737                                  					;AN000; check ORDINAL to see if the minimum
 22738 000015DA 263A0F                  	cmp	cl,[es:bx]	
 22739 000015DD 7303                    	jae	short _$P_Fin		;AN000; positional found.
 22740                                  
 22741 000015DF B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 22742                                  _$P_Fin: 				;AN000;
 22743 000015E2 5B                      	pop	bx			;AN000;
 22744 000015E3 E92301                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 22745                                  ;---------------------------
 22746                                  _$P_Start:				;AN000;
 22747 000015E6 2E8936[F914]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 22748 000015EB 53                      	push	bx			;AN000; quoted string or file spec.
 22749 000015EC 57                      	push	di			;AN000;
 22750 000015ED 55                      	push	bp			;AN000;
 22751                                  	;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 22752                                  	; 02/11/2022
 22753 000015EE 8D1E[0115]              	lea	bx,[_$P_STRING_BUF]
 22754 000015F2 2EF606[F814]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 22755 000015F8 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 22756                                  
 22757                                  _$P_Pack_Loop:				;AN000;
 22758 000015FA AC                      	lodsb				;AN000; Pick a operand from buffer
 22759 000015FB E84907                  	call	_$P_Chk_Switch		;AN000; Check switch character
 22760 000015FE 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 22761                                  
 22762 00001600 E8AD06                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 22763 00001603 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 22764                                  
 22765 00001605 E8DE06                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 22766 00001608 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 22767                                  
 22768 0000160A 2EF606[F814]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 22769                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 22770 00001610 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 22771                                  
 22772 00001612 E87806                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 22773 00001615 EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 22774                                  
 22775                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 22776 00001617 2EF606[F814]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 22777 0000161D 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 22778                                  
 22779 0000161F 4E                      	dec	si			;AN000; (tm08)
 22780 00001620 EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 22781                                  
 22782                                  _$P_PL01:				;AN000;
 22783 00001622 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 22784 00001625 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 22785 00001627 7506                    	jne	short _$P_PL00 		;AN000; then
 22786                                  
 22787 00001629 2E800E[F814]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 22788                                  _$P_PL00:				;AN000;
 22789 0000162F 43                      	inc	bx			;AN000; ready to see next byte
 22790 00001630 E82E07                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 22791 00001633 73C5                    	jnc	_$P_Pack_Loop		;AN000; if no, process to next byte
 22792                                  
 22793 00001635 AC                      	lodsb				;AN000; if yes, store
 22794 00001636 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 22795 00001639 43                      	inc	bx			;AN000; update pointer
 22796 0000163A EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 22797                                  
 22798                                  _$P_Pack_End_BY_EOL:			;AN000;
 22799 0000163C 4E                      	dec	si			;AN000; backup si pointer
 22800                                  _$P_Pack_End:				;AN000;
 22801 0000163D 2E8936[EE14]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 22802 00001642 2EC60700                	mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 22803 00001646 2E891E[FD14]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 22804                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 22805 0000164B 268B1D                  	mov	bx,[es:di]
 22806                                  	;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 22807                                  	; 02/11/2022
 22808 0000164E 8D36[0115]              	lea	si,[_$P_STRING_BUF]
 22809 00001652 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 22810 00001656 7436                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 22811                                  
 22812 00001658 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 22813 0000165C 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 22814                                  
 22815 0000165E 2EF606[F814]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 22816 00001664 7554                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 22817                                  
 22818                                  _$P_Positional_Manager:			;AN000; else process as positional
 22819 00001666 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22820 0000166A 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22821 0000166C 2E3906[EA14]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 22822 00001671 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 22823                                  
 22824 00001673 2EA1[EA14]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 22825 00001677 D1E0                    	shl	ax,1			;AN000; ax = ax*2
 22826 00001679 43                      	inc	bx			;AC035; add '2' to
 22827 0000167A 43                      	inc	bx			;AC035;  BX reg
 22828                                  					;AN000; now bx points to 1st CONTROL
 22829 0000167B 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 22830 0000167D 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 22831 00001680 E88800                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 22832 00001683 EB69                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 22833                                  
 22834                                  _$P_Too_Many_Error:			;AN000;
 22835 00001685 2EC706[EC14]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 22836 0000168C EB60                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 22837                                  
 22838                                  _$P_SW_Manager:				;AN000;
 22839 0000168E 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22840 00001692 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22841 00001694 40                      	inc	ax			;AN000;
 22842 00001695 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 22843 00001697 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 22844 00001699 268A0F                  	mov	cl,[es:bx]		;AN000;
 22845 0000169C 30ED                    	xor	ch,ch			;AN000; cx = maxs
 22846 0000169E 09C9                    	or	cx,cx			;AN000; at least one switch ?
 22847 000016A0 740F                    	jz	short _$P_SW_Not_Found 	;AN000;
 22848                                  
 22849 000016A2 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 22850                                  
 22851                                  _$P_SW_Mgr_Loop: 			;AN000;
 22852 000016A3 53                      	push	bx			;AN000;
 22853 000016A4 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 22854 000016A7 E8C400                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 22855 000016AA 5B                      	pop	bx			;AN000;
 22856 000016AB 7341                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 22857                                  
 22858 000016AD 43                      	inc	bx			;AC035; add '2' to
 22859 000016AE 43                      	inc	bx			;AC035;  BX reg
 22860                                  					;AN000; else bx points to the next CONTROL
 22861 000016AF E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 22862                                  
 22863                                  _$P_SW_Not_Found:			;AN000;
 22864 000016B1 2EC706[EC14]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 22865 000016B8 EB34                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 22866                                  
 22867                                  _$P_Key_Manager: 			;AN000;
 22868 000016BA 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22869 000016BE 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22870 000016C0 40                      	inc	ax			;AN000;
 22871 000016C1 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 22872 000016C3 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 22873 000016C5 268A07                  	mov	al,[es:bx]		;AN000;
 22874 000016C8 30E4                    	xor	ah,ah			;AN000; ax = maxs
 22875 000016CA D1E0                    	shl	ax,1			;AN000;
 22876 000016CC 40                      	inc	ax			;AN000; ax = ax*2+1
 22877 000016CD 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 22878 000016CF 268A0F                  	mov	cl,[es:bx]		;AN000;
 22879 000016D2 30ED                    	xor	ch,ch			;AN000; cx = maxk
 22880 000016D4 09C9                    	or	cx,cx			;AN000; at least one keyword ?
 22881 000016D6 740F                    	je	short _$P_Key_Not_Found	;AN000;
 22882                                  
 22883 000016D8 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 22884                                  
 22885                                  _$P_Key_Mgr_Loop:			;AN000;
 22886 000016D9 53                      	push	bx			;AN000;
 22887 000016DA 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 22888 000016DD E85B00                  	call	_$P_Chk_Key_Control	;AN000; do process for keyword
 22889 000016E0 5B                      	pop	bx			;AN000;
 22890 000016E1 730B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 22891                                  
 22892 000016E3 43                      	inc	bx			;AC035; add '2' to
 22893 000016E4 43                      	inc	bx			;AC035;  BX reg
 22894                                  					;AN000; else bx points to the next CONTROL
 22895 000016E5 E2F2                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 22896                                  
 22897                                  _$P_Key_Not_Found:			;AN000;
 22898 000016E7 2EC706[EC14]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 22899                                  _$P_Return_to_Caller:			;AN000;
 22900 000016EE 5D                      	pop	bp			;AN000;
 22901 000016EF 5F                      	pop	di			;AN000;
 22902 000016F0 5B                      	pop	bx			;AN000;
 22903 000016F1 2E8B0E[EA14]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 22904 000016F6 2EA1[EC14]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 22905 000016FA 2E8B36[EE14]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 22906 000016FF 2E8B16[F014]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 22907 00001704 2E8A1E[F214]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 22908                                  _$P_Single_Exit: 			;AN000;
 22909 00001709 F8                      	clc				;AN000;
 22910 0000170A C3                      	retn				;AN000;
 22911                                  
 22912                                  ;***********************************************************************
 22913                                  ; _$P_Chk_Pos_Control
 22914                                  ;
 22915                                  ; Function: Parse CONTROL block for a positional
 22916                                  ;
 22917                                  ; Input:     ES:BX -> CONTROL block
 22918                                  ;	     cs:SI -> _$P_STRING_BUF
 22919                                  ;
 22920                                  ; Output:    None
 22921                                  ;
 22922                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 22923                                  ;
 22924                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 22925                                  ;***********************************************************************
 22926                                  
 22927                                  _$P_Chk_Pos_Control:
 22928 0000170B 50                      	push	ax			;AN000;
 22929                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 22930 0000170C 268B07                  	mov	ax,[es:bx]
 22931                                  	; 12/12/2022
 22932 0000170F A802                    	test	al,_$P_Repeat
 22933                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 22934 00001711 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 22935                                  
 22936 00001713 2EFF06[EA14]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 22937                                  _$P_CPC00:				;AN000;
 22938 00001718 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 22939 0000171C 7518                    	jne	short _$P_CPC01		;AN000;
 22940                                  
 22941                                  	; 12/12/2022
 22942 0000171E A801                    	test	al,_$P_Optional
 22943                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 22944 00001720 7509                    	jnz	short _$P_CPC02		;AN000;
 22945                                  
 22946 00001722 2EC706[EC14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 22947 00001729 EB0E                    	jmp	short _$P_CPC_Exit	;AN000;
 22948                                  
 22949                                  _$P_CPC02:				;AN000;
 22950 0000172B 50                      	push	ax			;AN000;
 22951 0000172C B003                    	mov	al,_$P_String		;AN000; if it is optional return NULL
 22952 0000172E B4FF                    	mov	ah,_$P_No_Tag		;AN000; no item tag indication
 22953 00001730 E89B00                  	call	_$P_Fill_Result		;AN000;
 22954 00001733 58                      	pop	ax			;AN000;
 22955 00001734 EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 22956                                  
 22957                                  _$P_CPC01:				;AN000;
 22958 00001736 E81A01                  	call	_$P_Check_Match_Flags	;AN000;
 22959                                  _$P_CPC_Exit:				;AN000;
 22960 00001739 58                      	pop	ax			;AN000;
 22961 0000173A C3                      	retn				;AN000;
 22962                                  
 22963                                  ;***********************************************************************
 22964                                  ; _$P_Chk_Key_Control
 22965                                  ;
 22966                                  ; Function: Parse CONTROL block for a keyword
 22967                                  ;
 22968                                  ; Input:     ES:BX -> CONTROL block
 22969                                  ;	     cs:SI -> _$P_STRING_BUF
 22970                                  ;
 22971                                  ; Output:    CY = 1 : not match
 22972                                  ;
 22973                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 22974                                  ;
 22975                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 22976                                  ;***********************************************************************
 22977                                  
 22978                                  _$P_Chk_Key_Control:
 22979 0000173B F9                      	stc				;AN000; this logic works when the KeySW
 22980 0000173C C3                      	retn				;AN000; is reset.
 22981                                  
 22982                                  ;***********************************************************************
 22983                                  ; _$P_Search_KEYorSW:
 22984                                  ;
 22985                                  ; Function: Seach specified keyword or switch from CONTROL
 22986                                  ;
 22987                                  ; Input:     ES:BX -> CONTROL block
 22988                                  ;	     cs:SI -> _$P_STRING_BUF
 22989                                  ;
 22990                                  ; Output:    CY = 1 : not match
 22991                                  ;
 22992                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 22993                                  ;***********************************************************************
 22994                                  
 22995                                  	; 25/10/2022 - Retro DOS v4.0
 22996                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 22997                                  
 22998                                  _$P_Search_KEYorSW:			;AN000;
 22999 0000173D 55                      	push	bp			;AN000;
 23000 0000173E 51                      	push	cx			;AN000;
 23001 0000173F 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 23002 00001743 30ED                    	xor	ch,ch			;AN000; and set it to cx
 23003 00001745 09C9                    	or	cx,cx			;AN000; No synonyms specified ?
 23004 00001747 740D                    	jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 23005                                  
 23006                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 23007                                  	; 25/10/2022
 23008 00001749 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 23009                                  	;lea	bp,[bx+9]
 23010                                  _$P_KEYorSW_Loop:			;AN000;
 23011 0000174C E8D803                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 23012 0000174F 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 23013                                  
 23014 00001751 E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 23015 00001754 E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 23016                                  _$P_KEYorSW_Not_Found:			;AN000;
 23017 00001756 F9                      	stc				;AN000; indicate not found in synonym list
 23018 00001757 EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 23019                                  
 23020                                  _$P_KEYorSW_Found:			;AN000;
 23021 00001759 2E892E[FF14]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 23022 0000175E F8                      	clc				;AN000; indicate found
 23023                                  _$P_KEYorSW_Exit:			;AN000;
 23024 0000175F 59                      	pop	cx			;AN000;
 23025 00001760 5D                      	pop	bp			;AN000;
 23026 00001761 C3                      	retn				;AN000;
 23027                                   
 23028                                  ;***********************************************************************
 23029                                  ; _$P_MoveBP_NUL
 23030                                  ;***********************************************************************
 23031                                  
 23032                                  _$P_MoveBP_NUL:
 23033                                  _$P_MBP_Loop:				;AN000;
 23034                                  	; 11/12/2022
 23035 00001762 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 23036                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 23037                                  	; (SYSINIT:18DBh)
 23038                                   	;cmp     byte [es:bp+0],0
 23039 00001767 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 23040                                  
 23041 00001769 45                      	inc	bp			;AN000; until
 23042 0000176A EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 23043                                  
 23044                                  _$P_MBP_Exit:				;AN000;
 23045 0000176C 45                      	inc	bp			;AN000; bp points to next to NULL
 23046 0000176D C3                      	retn				;AN000;
 23047                                  
 23048                                  ;***********************************************************************
 23049                                  ; _$P_Chk_SW_Control
 23050                                  ;
 23051                                  ; Function: Parse CONTROL block for a switch
 23052                                  ;
 23053                                  ; Input:     ES:BX -> CONTROL block
 23054                                  ;	     cs:SI -> _$P_STRING_BUF
 23055                                  ;
 23056                                  ; Output:    CY = 1 : not match
 23057                                  ;
 23058                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 23059                                  ;
 23060                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 23061                                  ;***********************************************************************
 23062                                  
 23063                                  _$P_Chk_SW_Control:
 23064                                  
 23065                                  ;IF SwSW				;AN000;(Check if switch is supported)
 23066                                  	;or	byte [cs:_$P_Flags+1],10h
 23067 0000176E 2E800E[F814]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 23068 00001774 E8C6FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 23069 00001777 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 23070                                  
 23071                                  	;and	[cs:_$P_Flags+],0EFh
 23072 00001779 2E8026[F814]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 23073                                  					;AC034; reset the indicator previously set
 23074 0000177F 50                      	push	ax			;AN000; 	      /switch:
 23075 00001780 2EA1[FB14]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 23076 00001784 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 23077 00001786 2E0106[F914]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 23078 0000178B 58                      	pop	ax			;AN000;
 23079                                  
 23080 0000178C 2E8B36[FB14]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 23081 00001791 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 23082 00001795 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 23083                                  
 23084 00001797 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 23085 0000179C 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 23086                                  
 23087 0000179E 2EC706[EC14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 23088 000017A5 EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 23089                                  
 23090                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 23091                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 23092 000017A7 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 23093 000017AB 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 23094                                  
 23095                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 23096                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 23097                                  	;test	word [es:bx],1
 23098                                  	; 12/12/2022
 23099                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 23100 000017AD 26F60701                	test	byte [es:bx],_$P_Optional
 23101 000017B1 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 23102                                  
 23103 000017B3 2EC706[EC14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 23104 000017BA EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 23105                                  
 23106                                  _$P_CSW00:				;AN000;
 23107 000017BC E89400                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 23108 000017BF F8                      	clc				;AN000; indicate match
 23109                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 23110                                  	; 12/12/2022
 23111 000017C0 C3                      	retn
 23112                                  
 23113                                  _$P_Chk_SW_Err0: 			;AN000;
 23114 000017C1 F9                      	stc				;AN000; not found in switch synonym list
 23115                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 23116                                  	; 12/12/2022
 23117 000017C2 C3                      	retn	
 23118                                  
 23119                                  _$P_Chk_SW_Exit: 			;AN000;
 23120 000017C3 50                      	push	ax			;AN000;
 23121 000017C4 B003                    	mov	al,_$P_String		;AN000; set
 23122 000017C6 B4FF                    	mov	ah,_$P_No_Tag		;AN000;    result
 23123 000017C8 E80300                  	call	_$P_Fill_Result		;AN000; 	 buffer
 23124 000017CB 58                      	pop	ax			;AN000;
 23125 000017CC F8                      	clc				;AN000;
 23126                                  _$P_Chk_SW_Single_Exit:			;AN000;
 23127 000017CD C3                      	retn				;AN000;
 23128                                  ;ELSE					;AN000;(of IF SwSW)
 23129                                  ;	stc				;AN000; this logic works when the SwSW
 23130                                  ;	retn				;AN000; is reset.
 23131                                  
 23132                                  ;***********************************************************************
 23133                                  ; _$P_Fill_Result
 23134                                  ;
 23135                                  ; Function: Fill the result buffer
 23136                                  ;
 23137                                  ; Input:    AH = Item tag
 23138                                  ;	    AL = type
 23139                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 23140                                  ;		  AL = 2: DX has index(offset) into value list
 23141                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 23142                                  ;		  AL = 7: DX has year, CL has month and CH has date
 23143                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 23144                                  ;			  amd CH has hundredths
 23145                                  ;		  AL = else: cs:SI points to returned string buffer
 23146                                  ;	    ES:BX -> CONTROL block
 23147                                  ;
 23148                                  ; Output:   None
 23149                                  ;
 23150                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 23151                                  ;
 23152                                  ; Vars: _$P_DX(W)
 23153                                  ;***********************************************************************
 23154                                  
 23155                                  _$P_Fill_Result:
 23156 000017CE 57                      	push	di			;AN000;
 23157 000017CF 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 23158                                  					;AN000; di points to result buffer
 23159 000017D3 2E893E[F014]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 23160 000017D8 268805                  	mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 23161 000017DB 26886501                	mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 23162 000017DF 50                      	push	ax			;AN000;
 23163 000017E0 2EA1[FF14]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 23164 000017E4 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 23165                                  					;AN000;   then set it to the result
 23166 000017E8 58                      	pop	ax			;AN000;
 23167                                  _$P_RLT04:				;AN000;
 23168 000017E9 3C01                    	cmp	al,_$P_Number		;AN000; if number
 23169 000017EB 750A                    	jne	short _$P_RLT00		;AN000;
 23170                                  
 23171                                  _$P_RLT02:				;AN000;
 23172 000017ED 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 23173 000017F1 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 23174 000017F5 EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 23175                                  
 23176                                  _$P_RLT00:				;AN000;
 23177 000017F7 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 23178 000017F9 7506                    	jne	short _$P_RLT01		;AN000;
 23179                                  
 23180 000017FB 26895504                	mov	word [es:di+_$P_Result_Blk.Picked_Val],dx 
 23181                                  					;AN000; then store list index
 23182 000017FF EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 23183                                  
 23184                                  _$P_RLT01:				;AN000;
 23185 00001801 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 23186 00001803 74E8                    	je	short _$P_RLT02		;AN000;
 23187                                  
 23188 00001805 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 23189 00001807 74E4                    	je	short _$P_RLT02		;AN000;
 23190                                  
 23191 00001809 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 23192 0000180B 7506                    	jne	short _$P_RLT03		;AN000;
 23193                                  
 23194 0000180D 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 23195 00001811 EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 23196                                  
 23197                                  _$P_RLT03:				;AN000;
 23198 00001813 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 23199 00001815 750F                    	jne	short _$P_RLT05		;AN000;
 23200                                  
 23201 00001817 2EA1[F914]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 23202 0000181B 40                      	inc	ax			;AN000; skip left Parentheses
 23203 0000181C 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 23204 00001820 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 23205 00001824 EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 23206                                  
 23207                                  _$P_RLT05:				;AN000;
 23208                                  ;------------------------  AL = 3, 5, or 9
 23209 00001826 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 23210                                  					;AN000; store offset of STRING_BUF
 23211 0000182A 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 23212                                  					;AN031; store segment of STRING_BUF
 23213 0000182E 50                      	push	ax			;AN000;
 23214 0000182F 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 23215                                  					;AN000; need CAPS by file table?
 23216 00001834 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 23217                                  
 23218 00001836 B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 23219 00001838 EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 23220                                  
 23221                                  _$P_RLT_CAP00:				;AN000;
 23222 0000183A 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 23223                                  					;AN000; need CAPS by char table ?
 23224 0000183F 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 23225                                  
 23226 00001841 B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 23227                                  _$P_RLT_CAP02:				;AN000;
 23228 00001843 E8E000                  	call	_$P_Do_CAPS_String	;AN000;  process CAPS along the table
 23229                                  _$P_RLT_CAP01:				;AN000;
 23230 00001846 58                      	pop	ax			;AN000;
 23231 00001847 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 23232                                  					;AN000; removing colon at end ?
 23233 0000184C 7403                    	jz	short _$P_RLT_Exit	;AN000;
 23234                                  
 23235 0000184E E8AF00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 23236                                  _$P_RLT_Exit:				;AN000;
 23237 00001851 5F                      	pop	di			;AN000;
 23238 00001852 C3                      	retn				;AN000;
 23239                                  
 23240                                  ;***********************************************************************
 23241                                  ; _$P_Check_Match_Flags
 23242                                  ;
 23243                                  ; Function:  Check the mutch_flags and make the exit code and set the
 23244                                  ;	     result buffer
 23245                                  ;
 23246                                  ;	    Check for types in this order:
 23247                                  ;		Complex
 23248                                  ;		Date
 23249                                  ;		Time
 23250                                  ;		Drive
 23251                                  ;		Filespec
 23252                                  ;		Quoted String
 23253                                  ;		Simple String
 23254                                  ;
 23255                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23256                                  ;	     ES:BX -> CONTROL block
 23257                                  ;
 23258                                  ; Output:    None
 23259                                  ;
 23260                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 23261                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 23262                                  ;	     _$P_Drive_Format
 23263                                  ;***********************************************************************
 23264                                  
 23265                                  	; 25/10/2022 - Retro DOS v4.0
 23266                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 23267                                  
 23268                                  	; 12/12/2022
 23269                                  _$P_Check_Match_Flags:
 23270 00001853 2EC606[8F15]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 23271                                  					;AN033;AC034;; clear filespec error flag.
 23272 00001859 50                      	push	ax			;AN000;
 23273                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 23274 0000185A 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 23275 0000185D 09C0                    	or	ax,ax			;AC035; test ax for zero
 23276 0000185F 7518                    	jnz	short _$P_Mat		;AN000; (tm12)
 23277 00001861 50                      	push	ax			;AN000; (tm12)
 23278 00001862 53                      	push	bx			;AN000; (tm12)
 23279 00001863 52                      	push	dx			;AN000; (tm12)
 23280 00001864 57                      	push	di			;AN000; (tm12)
 23281 00001865 2EC706[EC14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 23282 0000186C B4FF                    	mov	ah,_$P_No_Tag		;AN000; (tm12)
 23283 0000186E B003                    	mov	al,_$P_String		;AN000; (tm12)
 23284 00001870 E85BFF                  	call	_$P_Fill_Result		;AN000; (tm12)
 23285 00001873 5F                      	pop	di			;AN000; (tm12)
 23286 00001874 5A                      	pop	dx			;AN000; (tm12)
 23287 00001875 5B                      	pop	bx			;AN000; (tm12)
 23288 00001876 58                      	pop	ax			;AN000; (tm12)
 23289                                  	; 12/12/2022
 23290                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 23291                                  	; 12/12/2022
 23292                                  ;_$P_Mat: 				;AN000; (tm12)
 23293                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 23294                                  _$P_Bridge:
 23295 00001877 EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 23296                                  	
 23297                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23298                                  	; (SYSINIT:19F9h)
 23299                                  	; 12/12/2022
 23300                                  	;nop	; db 90h
 23301                                  
 23302                                  ; 12/12/2022
 23303                                  _$P_Mat:
 23304                                  _$P_Match03:				;AN000;
 23305 00001879 A90080                  	test	ax,_$P_Num_Val		;AN000; Numeric value
 23306 0000187C 7412                    	jz	short _$P_Match04	;AN000;
 23307                                  
 23308 0000187E 2EC706[EC14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23309 00001885 E82601                  	call	_$P_Value		;AN000; do process
 23310 00001888 2E833E[EC14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23311 0000188E 7557                    	jne	short _$P_Match_Exit	;AN000;
 23312                                  _$P_Match04:				;AN000;
 23313 00001890 A90040                  	test	ax,_$P_SNum_Val		;AN000; Signed numeric value
 23314 00001893 7412                    	jz	short _$P_Match05	;AN000;
 23315                                  
 23316 00001895 2EC706[EC14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23317 0000189C E8EB00                  	call	_$P_SValue		;AN000; do process
 23318 0000189F 2E833E[EC14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23319 000018A5 7540                    	jne	short _$P_Match_Exit	;AN000;
 23320                                  _$P_Match05:				;AN000;
 23321 000018A7 A90001                  	test	ax,_$P_Drv_Only		;AN000; Drive only
 23322 000018AA 7415                    	jz	short _$P_Match06	;AN000;
 23323                                  
 23324 000018AC 2EC706[EC14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23325 000018B3 E80F03                  	call	_$P_File_Format		;AN000; 1st, call file format
 23326 000018B6 E89103                  	call	_$P_Drive_Format	;AN000; check drive format, next
 23327 000018B9 2E833E[EC14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23328 000018BF 7526                    	jne	short _$P_Match_Exit	;AN000;
 23329                                  _$P_Match06:				;AN000;
 23330 000018C1 A90002                  	test	ax,_$P_File_Spc		;AN000; File spec
 23331 000018C4 7412                    	jz	short _$P_Match07	;AN000;
 23332                                  
 23333 000018C6 2EC706[EC14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23334 000018CD E8F502                  	call	_$P_File_Format		;AN000; do process
 23335 000018D0 2E833E[EC14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23336 000018D6 750F                    	jne	short _$P_Match_Exit	;AN000;
 23337                                  _$P_Match07:				;AN000;
 23338 000018D8 A90020                  	test	ax,_$P_Simple_S		;AN000; Simple string
 23339 000018DB 740A                    	jz	short _$P_Match09	;AN000;
 23340                                  
 23341 000018DD 2EC706[EC14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23342 000018E4 E8D701                  	call	_$P_Simple_String	;AN000; do process
 23343                                  _$P_Match09:				;AN000;
 23344                                  _$P_Match_Exit:				;AN000;
 23345 000018E7 2E833E[8F15]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 23346 000018ED 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23347 000018EF 2E833E[EC14]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 23348 000018F5 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23349 000018F7 2EC706[EC14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 23350                                  _$P_Match2_Exit: 			;AN033;
 23351 000018FE 58                      	pop	ax			;AN000;
 23352 000018FF C3                      	retn				;AN000;
 23353                                  
 23354                                  ;***********************************************************************
 23355                                  ; _$P_Remove_Colon;
 23356                                  ;
 23357                                  ; Function: Remove colon at end
 23358                                  ;
 23359                                  ; Input:    cs:SI points to string buffer to be examineed
 23360                                  ;
 23361                                  ; Output:   None
 23362                                  ;
 23363                                  ; Use:	_$P_Chk_DBCS
 23364                                  ;***********************************************************************
 23365                                  
 23366                                  _$P_Remove_Colon:
 23367 00001900 50                      	push	ax			;AN000;
 23368 00001901 56                      	push	si			;AN000;
 23369                                  _$P_RCOL_Loop:				;AN000;
 23370 00001902 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23371 00001905 08C0                    	or	al,al			;AN000; end of string ?
 23372 00001907 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 23373                                  
 23374 00001909 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 23375 0000190B 750D                    	jne	short _$P_RCOL00	;AN000;
 23376                                  
 23377 0000190D 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 23378 00001912 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 23379                                  
 23380 00001914 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 23381 00001918 EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 23382                                  
 23383                                  _$P_RCOL00:				;AN000;
 23384 0000191A E84404                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 23385 0000191D 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 23386                                  
 23387 0000191F 46                      	inc	si			;AN000; if yes, skip trailing byte
 23388                                  _$P_RCOL01:				;AN000;
 23389 00001920 46                      	inc	si			;AN000; si points to next byte
 23390 00001921 EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 23391                                  
 23392                                  _$P_RCOL_Exit:				;AN000;
 23393 00001923 5E                      	pop	si			;AN000;
 23394 00001924 58                      	pop	ax			;AN000;
 23395 00001925 C3                      	retn				;AN000;
 23396                                  
 23397                                  ;***********************************************************************
 23398                                  ; _$P_Do_CAPS_String;
 23399                                  ;
 23400                                  ; Function: Perform capitalization along with the file case map table
 23401                                  ;	    or character case map table.
 23402                                  ;
 23403                                  ; Input:    AL = 2 : Use character table
 23404                                  ;	    AL = 4 : Use file table
 23405                                  ;	    cs:SI points to string buffer to be capitalized
 23406                                  ;
 23407                                  ; Output:   None
 23408                                  ;
 23409                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 23410                                  ;***********************************************************************
 23411                                  
 23412                                  _$P_Do_CAPS_String:
 23413 00001926 56                      	push	si			;AN000;
 23414 00001927 52                      	push	dx			;AN000;
 23415 00001928 88C2                    	mov	dl,al			;AN000; save info id
 23416                                  
 23417                                  _$P_DCS_Loop:				;AN000;
 23418 0000192A 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 23419 0000192D E83104                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 23420 00001930 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 23421                                  
 23422 00001932 08C0                    	or	al,al			;AN000; end of string ?
 23423 00001934 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 23424                                  
 23425 00001936 E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 23426 00001939 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 23427 0000193C EB01                    	jmp	short _$P_DCS01		;AN000; process next
 23428                                  _$P_DCS00:				;AN000;
 23429 0000193E 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 23430                                  _$P_DCS01:				;AN000;
 23431 0000193F 46                      	inc	si			;AN000; si point to next byte
 23432 00001940 EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 23433                                  _$P_DCS_Exit:				;AN000;
 23434 00001942 5A                      	pop	dx			;AN000;
 23435 00001943 5E                      	pop	si			;AN000;
 23436 00001944 C3                      	retn
 23437                                  
 23438                                  ;***********************************************************************
 23439                                  ; _$P_Do_CAPS_Char;
 23440                                  ;
 23441                                  ; Function: Perform capitalization along with the file case map table
 23442                                  ;	    or character case map table.
 23443                                  ;
 23444                                  ; Input:    DL = 2 : Use character table
 23445                                  ;	    DL = 4 : Use file table
 23446                                  ;	    AL = character to be capitalized
 23447                                  ;
 23448                                  ; Output:   None
 23449                                  ;
 23450                                  ; Use:	INT 21h /w AH=65h
 23451                                  ;***********************************************************************
 23452                                  
 23453                                  _$P_Do_CAPS_Char:
 23454 00001945 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 23455 00001947 730C                    	jae	short _$P_DCC_Go	;AN000;
 23456                                  
 23457 00001949 3C61                    	cmp	al,"a"                  ;AN000; if no,
 23458 0000194B 723C                    	jb	short _$P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 23459                                  
 23460 0000194D 3C7A                    	cmp	al,"z"                  ;AN000;
 23461 0000194F 7738                    	ja	short _$P_CAPS_Ret	;AN000;   if yes, make CAPS
 23462                                  
 23463 00001951 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000;   else do nothing.
 23464 00001953 EB34                    	jmp	short _$P_CAPS_Ret	;AN000;
 23465                                  
 23466                                  _$P_DCC_Go:				;AN000;
 23467 00001955 53                      	push	bx			;AN000;
 23468 00001956 06                      	push	es			;AN000;
 23469 00001957 57                      	push	di			;AN000;
 23470                                  
 23471                                  	;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 23472 00001958 8D3E[8115]              	lea	di,[_$P_Char_CAP_Ptr]
 23473                                  _$P_DCC00:				;AN000;
 23474 0000195C 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 23475 0000195F 7417                    	je	short _$P_DCC01		;AN000; if no,
 23476                                  
 23477                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 23478                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 23479                                  ; call, regardless of what base register is currently be defined as cs.
 23480                                  
 23481 00001961 50                      	push	ax			;AN000; get CAPS table thru DOS call
 23482 00001962 51                      	push	cx			;AN000;
 23483 00001963 52                      	push	dx			;AN000;
 23484                                  
 23485 00001964 0E                      	push	cs			;AC036; pass current base seg into
 23486                                  					;(Note: this used to push CS.  BUG...
 23487 00001965 07                      	pop	es			;AN000;   ES reg, required for
 23488                                  					;get extended country information
 23489 00001966 B465                    	mov	ah,_$P_DOS_Get_TBL	;AN000; get extended CDI
 23490 00001968 88D0                    	mov	al,dl			;AN000; upper case table
 23491 0000196A BBFFFF                  	mov	bx,_$P_DOSTBL_Def	;AN000; get active CON
 23492 0000196D B90500                  	mov	cx,_$P_DOSTBL_BL 	;AN000; buffer length
 23493 00001970 BAFFFF                  	mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 23494                                  					;DI already set to point to buffer
 23495 00001973 CD21                    	int	21h			;AN000; es:di point to buffer that
 23496                                  					;now has been filled in with info
 23497 00001975 5A                      	pop	dx			;AN000;
 23498 00001976 59                      	pop	cx			;AN000;
 23499 00001977 58                      	pop	ax			;AN000;
 23500                                  
 23501                                  _$P_DCC01:				;AN000;
 23502                                  
 23503                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 23504                                  ; by the previous GET COUNTRY INFO DOS call.  This usage of ES is made
 23505                                  ; regardless of which base reg is currently the cs reg.
 23506                                  
 23507 00001978 2E8B5D01                	mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 23508 0000197C 2E8E4503                	mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 23509 00001980 43                      	inc	bx			;AC035; add '2' to
 23510 00001981 43                      	inc	bx			;AC035;  BX reg
 23511                                  					;AN000; skip length field
 23512 00001982 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 23513                                  	;xlat	es:[bx] 		;AN000; perform case map
 23514 00001984 26                      	es
 23515 00001985 D7                      	xlat
 23516 00001986 5F                      	pop	di			;AN000;
 23517 00001987 07                      	pop	es			;AN000;
 23518 00001988 5B                      	pop	bx			;AN000;
 23519                                  _$P_CAPS_Ret:				;AN000;
 23520 00001989 C3                      	retn				;AN000;
 23521                                  
 23522                                  ;***********************************************************************
 23523                                  ; _$P_Value / _$P_SValue
 23524                                  ;
 23525                                  ; Function:  Make 32bit value from cs:SI and see value list
 23526                                  ;	     and make result buffer.
 23527                                  ;	     _$P_SValue is an entry point for the signed value
 23528                                  ;	     and this will simply call _$P_Value after the handling
 23529                                  ;	     of the sign character, "+" or "-"
 23530                                  ;
 23531                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23532                                  ;	     ES:BX -> CONTROL block
 23533                                  ;
 23534                                  ; Output:    None
 23535                                  ;
 23536                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 23537                                  ;
 23538                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 23539                                  ;***********************************************************************
 23540                                  
 23541                                  	; 26/10/2022 - Retro DOS v4.0
 23542                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 23543                                  
 23544                                  _$P_SValue:				;AN000; when signed value here
 23545 0000198A 50                      	push	ax			;AN000;
 23546 0000198B 2E800E[F814]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 23547 00001991 2E8026[F814]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 23548 00001997 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 23549 0000199A 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 23550 0000199C 740A                    	je	short _$P_SVal00	;AN000;
 23551                                  
 23552 0000199E 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 23553 000019A0 7507                    	jne	short _$P_Sval01	;AN000; else
 23554                                  
 23555 000019A2 2E800E[F814]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 23556                                  _$P_SVal00:				;AN000;
 23557 000019A8 46                      	inc	si			;AN000; skip sign char
 23558                                  _$P_Sval01:				;AN000;
 23559 000019A9 E80200                  	call	_$P_Value		;AN000; and process value
 23560 000019AC 58                      	pop	ax			;AN000;
 23561 000019AD C3                      	retn
 23562                                  
 23563                                  ;***********************************************************************
 23564                                  
 23565                                  	; 26/10/2022
 23566                                  _$P_Value:				;AN000;
 23567 000019AE 50                      	push	ax			;AN000;
 23568 000019AF 51                      	push	cx			;AN000;
 23569 000019B0 52                      	push	dx			;AN000;
 23570 000019B1 56                      	push	si			;AN000;
 23571 000019B2 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 23572 000019B4 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 23573 000019B6 53                      	push	bx			;AN000; save control pointer
 23574                                  _$P_Value_Loop:				;AN000;
 23575 000019B7 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23576 000019BA 08C0                    	or	al,al			;AN000; end of line ?
 23577 000019BC 7442                    	jz	short _$P_Value00	;AN000;
 23578                                  
 23579 000019BE E8F000                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 23580 000019C1 7239                    	jc	short _$P_Value_Err0	;AN000;
 23581                                  
 23582 000019C3 30E4                    	xor	ah,ah			;AN000;
 23583 000019C5 89C5                    	mov	bp,ax			;AN000; save binary number
 23584 000019C7 D1E2                    	shl	dx,1			;AN000; to have 2*x
 23585 000019C9 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23586 000019CB E8D100                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23587 000019CE 722C                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23588                                  
 23589 000019D0 89D3                    	mov	bx,dx			;AN000; save low(2*x)
 23590 000019D2 89C8                    	mov	ax,cx			;AN000; save high(2*x)
 23591 000019D4 D1E2                    	shl	dx,1			;AN000; to have 4*x
 23592 000019D6 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23593 000019D8 E8C400                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23594 000019DB 721F                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23595                                  
 23596 000019DD D1E2                    	shl	dx,1			;AN000; to have 8*x
 23597 000019DF D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23598 000019E1 E8BB00                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23599 000019E4 7216                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23600                                  
 23601 000019E6 01DA                    	add	dx,bx			;AN000; now have 10*x
 23602 000019E8 11C1                    	adc	cx,ax			;AN000; 32bit ADD
 23603 000019EA E8B200                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23604 000019ED 720D                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23605                                  
 23606 000019EF 01EA                    	add	dx,bp			;AN000; Add the current one degree decimal
 23607 000019F1 83D100                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 23608 000019F4 E8A800                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23609 000019F7 7203                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23610                                  
 23611 000019F9 46                      	inc	si			;AN000; update pointer
 23612 000019FA EBBB                    	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 23613                                  ;
 23614                                  _$P_Value_Err0:				;AN000;
 23615 000019FC 5B                      	pop	bx			;AN000;
 23616 000019FD E98C00                  	jmp	_$P_Value_Err		;AN000; Bridge
 23617                                  ;
 23618                                  _$P_Value00:				;AN000;
 23619 00001A00 5B                      	pop	bx			;AN000; restore control pointer
 23620 00001A01 2EF606[F814]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 23621 00001A07 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 23622                                  
 23623 00001A09 F7D1                    	not	cx			;AN000; +
 23624 00001A0B F7D2                    	not	dx			;AN000; |- Make 2's complement
 23625 00001A0D 83C201                  	add	dx,1			;AN000; |
 23626 00001A10 83D100                  	adc	cx,0			;AN000; +
 23627                                  
 23628                                  _$P_Value01:				;AN000; / nval =0
 23629 00001A13 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 23630 00001A17 268A04                  	mov	al,[es:si]		;AN000; get nval
 23631 00001A1A 3C00                    	cmp	al,_$P_nval_None 	;AN000; no value list ?
 23632 00001A1C 7506                    	jne	short _$P_Value02	;AN000;
 23633                                  
 23634 00001A1E B001                    	mov	al,_$P_Number		;AN000; Set type
 23635 00001A20 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23636 00001A22 EB73                    	jmp	short _$P_Value_Exit	;AN000;
 23637                                  
 23638                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 23639                                  	; (SYSINIT:1BA5h)
 23640                                  	; 12/12/2022
 23641                                  	;nop	; db  90h
 23642                                  
 23643                                  _$P_Value02:				;AN000; / nval = 1
 23644                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 23645                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 23646                                  ;(tm07) jne	short _$P_Value03	;AN000;
 23647                                  
 23648 00001A24 46                      	inc	si			;AN000;
 23649 00001A25 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 23650 00001A28 3C00                    	cmp	al,_$P_No_nrng		;AN000; (tm07)
 23651 00001A2A 7460                    	je	short _$P_Value03	;AN000; (tm07)
 23652                                  
 23653 00001A2C 46                      	inc	si			;AN000; si points to 1st item_tag
 23654                                  _$P_Val02_Loop:				;AN000;
 23655 00001A2D 2EF606[F814]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 23656 00001A33 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 23657                                  
 23658 00001A35 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 23659 00001A39 7236                    	jb	short _$P_Val02_Next	;AN000;
 23660 00001A3B 7706                    	ja	short _$P_Val_In	;AN000;
 23661                                  
 23662 00001A3D 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 23663 00001A41 722E                    	jb	short _$P_Val02_Next	;AN000;
 23664                                  
 23665                                  _$P_Val_In:				;AN000;
 23666 00001A43 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 23667 00001A47 7728                    	ja	short _$P_Val02_Next	;AN000;
 23668 00001A49 723A                    	jb	short _$P_Val_Found	;AN000;
 23669                                  
 23670 00001A4B 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 23671 00001A4F 7720                    	ja	short _$P_Val02_Next	;AN000;
 23672                                  
 23673 00001A51 EB32                    	jmp	short _$P_Val_Found	;AN000;
 23674                                  
 23675                                  _$P_Val02_Sign:				;AN000;
 23676 00001A53 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 23677 00001A57 7C18                    	jl	short _$P_Val02_Next	;AN000;
 23678 00001A59 7F06                    	jg	short _$P_SVal_In	;AN000;
 23679                                  
 23680 00001A5B 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 23681 00001A5F 7C10                    	jl	short _$P_Val02_Next	;AN000;
 23682                                  
 23683                                  _$P_SVal_In:				;AN000;
 23684 00001A61 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 23685 00001A65 7F0A                    	jg	short _$P_Val02_Next	;AN000;
 23686                                  
 23687 00001A67 7C1C                    	jl	short _$P_Val_Found	;AN000;
 23688                                  
 23689 00001A69 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 23690 00001A6D 7F02                    	jg	short _$P_Val02_Next	;AN000;
 23691                                  
 23692 00001A6F EB14                    	jmp	short _$P_Val_Found	;AN000;
 23693                                  
 23694                                  _$P_Val02_Next:				;AN000;
 23695 00001A71 83C609                  	add	si,_$P_Len_Range 	;AN000;
 23696 00001A74 FEC8                    	dec	al			;AN000; loop nrng times in AL
 23697 00001A76 75B5                    	jne	short _$P_Val02_Loop	;AN000;
 23698                                  					; / Not found
 23699 00001A78 2EC706[EC14]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 23700 00001A7F B001                    	mov	al,_$P_Number		;AN000;
 23701 00001A81 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23702 00001A83 EB12                    	jmp	short _$P_Value_Exit	;AN000;
 23703                                  
 23704                                  _$P_Val_Found:				;AN000;
 23705 00001A85 B001                    	mov	al,_$P_Number		;AN000;
 23706 00001A87 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 23707 00001A8A EB0B                    	jmp	short _$P_Value_Exit	;AN000;
 23708                                  
 23709                                  _$P_Value03:				;AN000; / nval = 2
 23710                                  
 23711                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 23712                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 23713                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 23714                                  ;(tm07) inc	si			;AN000;
 23715                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 23716                                  ;	mov	ah,$P_Len_Range 	;AN000;
 23717                                  ;	mul	ah			;AN000;  Skip nrng field
 23718                                  ;	inc	ax			;AN000;
 23719                                  ;	add	si,ax			;AN000; si points to nnval
 23720                                  ;	mov	al,es:[si]		;AN000; get nnval
 23721                                  ;	inc	si			;AN000; si points to 1st item_tag
 23722                                  ;$P_Val03_Loop:				;AN000;
 23723                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 23724                                  ;	jne	$P_Val03_Next		;AN000;
 23725                                  ;
 23726                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 23727                                  ;	je	$P_Val_Found		;AN000;
 23728                                  ;
 23729                                  ;$P_Val03_Next:				;AN000;
 23730                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 23731                                  ;	dec	al			;AN000; loop nval times in AL
 23732                                  ;	jne	$P_Val03_Loop		;AN000;
 23733                                  ;					;AN000; / Not found
 23734                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 23735                                  ;	mov	al,$P_Number		;AN000;
 23736                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 23737                                  ;	jmp	short $P_Value_Exit	;AN000;
 23738                                  ;
 23739                                  ;ENDIF					;AN000;(of Val2SW)
 23740                                  ;$P_Value04:
 23741                                  
 23742                                  _$P_Value_Err:				;AN000;
 23743 00001A8C 2EC706[EC14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 23744 00001A93 B003                    	mov	al,_$P_String		;AN000; Set type
 23745 00001A95 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23746                                  _$P_Value_Exit:				;AN000;
 23747 00001A97 E834FD                  	call	_$P_Fill_Result		;AN000;
 23748 00001A9A 5E                      	pop	si			;AN000;
 23749 00001A9B 5A                      	pop	dx			;AN000;
 23750 00001A9C 59                      	pop	cx			;AN000;
 23751 00001A9D 58                      	pop	ax			;AN000;
 23752 00001A9E C3                      	retn				;AN000;
 23753                                  
 23754                                  ; 28/03/2019 - Retro DOS v4.0
 23755                                  
 23756                                  ;***********************************************************************
 23757                                  ; _$P_Check_OVF
 23758                                  ;
 23759                                  ; Function:  Check if overflow is occurred with consideration of
 23760                                  ;	     signed or un-signed numeric value
 23761                                  ;
 23762                                  ; Input:     Flag register
 23763                                  ;
 23764                                  ; Output:    CY = 1  :	Overflow
 23765                                  ;
 23766                                  ; Vars:     _$P_Flags(R)
 23767                                  ;***********************************************************************
 23768                                  
 23769                                  	; 26/10/2022
 23770                                  _$P_Check_OVF:
 23771 00001A9F 9C                      	pushf				;AN000;
 23772 00001AA0 2EF606[F814]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 23773 00001AA6 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 23774                                  
 23775 00001AA8 9D                      	popf				;AN000; by the CY bit
 23776 00001AA9 C3                      	retn				;AN000;
 23777                                  
 23778                                  _$P_COVF:				;AN000;
 23779 00001AAA 9D                      	popf				;AN000; else,
 23780 00001AAB 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 23781                                  
 23782 00001AAD F8                      	clc				;AN000; indicate it with CY bit
 23783 00001AAE C3                      	retn				;AN000; CY=0 means no overflow
 23784                                  
 23785                                  _$P_COVF00:				;AN000;
 23786 00001AAF F9                      	stc				;AN000; and CY=1 means overflow
 23787 00001AB0 C3                      	retn				;AN000;
 23788                                  
 23789                                  ;***********************************************************************
 23790                                  ; _$P_0099;
 23791                                  ;
 23792                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 23793                                  ;
 23794                                  ; Input:     AL = character code
 23795                                  ;
 23796                                  ; Output:    CY = 1 : AL is not number
 23797                                  ;	     CY = 0 : AL contains binary value
 23798                                  ;***********************************************************************
 23799                                  
 23800                                  _$P_0099:
 23801 00001AB1 3C30                    	cmp	al,"0"                  ;AN000;
 23802                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 23803                                  	; 12/12/2022
 23804 00001AB3 7208                    	jb	short _$P_0099Err2  ; cf=1
 23805                                  
 23806 00001AB5 3C39                    	cmp	al,"9"                  ;AN000;
 23807 00001AB7 7703                    	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 23808                                  
 23809 00001AB9 2C30                    	sub	al,"0"                  ;AN000; make char -> bin
 23810                                  	; 12/12/2022
 23811                                  	; cf=0	
 23812                                  	;clc				;AN000; indicate no error
 23813 00001ABB C3                      	retn				;AN000;
 23814                                  
 23815                                  _$P_0099Err:				;AN000;
 23816 00001ABC F9                      	stc				;AN000; indicate error
 23817                                  _$P_0099Err2: ; 12/12/2022	
 23818 00001ABD C3                      	retn				;AN000;
 23819                                  
 23820                                  ;***********************************************************************
 23821                                  ; _$P_Simple_String
 23822                                  ;
 23823                                  ; Function:  See value list for the simple string
 23824                                  ;	     and make result buffer.
 23825                                  ;
 23826                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23827                                  ;	     ES:BX -> CONTROL block
 23828                                  ;
 23829                                  ; Output:    None
 23830                                  ;
 23831                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 23832                                  ;
 23833                                  ; Vars: _$P_RC(W)
 23834                                  ;***********************************************************************
 23835                                  
 23836                                  _$P_Simple_String:
 23837 00001ABE 50                      	push	ax			;AN000;
 23838 00001ABF 53                      	push	bx			;AN000;
 23839 00001AC0 52                      	push	dx			;AN000;
 23840 00001AC1 57                      	push	di			;AN000;
 23841 00001AC2 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 23842 00001AC6 268A05                  	mov	al,[es:di]		;AN000; get nval
 23843 00001AC9 08C0                    	or	al,al			;AN000; no value list ?
 23844 00001ACB 7504                    	jnz	short _$P_Sim00		;AN000; then
 23845                                  
 23846 00001ACD B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23847 00001ACF EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 23848                                  
 23849                                  _$P_Sim00:				;AN000;
 23850                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 23851 00001AD1 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 23852 00001AD3 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 23853                                  
 23854 00001AD5 47                      	inc	di			;AN000;
 23855 00001AD6 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 23856 00001AD9 B409                    	mov	ah,_$P_Len_Range 	;AN000;
 23857 00001ADB F6E4                    	mul	ah			;AN000; Skip nrng field
 23858 00001ADD 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 23859 00001ADE 01C7                    	add	di,ax			;AN000; di points to nnval
 23860 00001AE0 268A05                  	mov	al,[es:di]		;AN000; get nnval
 23861 00001AE3 B405                    	mov	ah,_$P_Len_Value 	;AN000;
 23862 00001AE5 F6E4                    	mul	ah			;AN000; Skip nnval field
 23863 00001AE7 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 23864 00001AE8 01C7                    	add	di,ax			;AN000; di points to nstrval
 23865 00001AEA 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 23866 00001AED 47                      	inc	di			;AC035; add '2' to
 23867 00001AEE 47                      	inc	di			;AC035;  DI reg
 23868                                  					;AN000; di points to 1st string in list
 23869                                  _$P_Sim_Loop:				;AN000;
 23870 00001AEF 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 23871 00001AF2 E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 23872 00001AF5 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 23873                                  
 23874 00001AF7 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 23875 00001AFA FEC8                    	dec	al			;AN000; loop nstval times in AL
 23876 00001AFC 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 23877                                  					;AN000; / Not found
 23878 00001AFE 2EC706[EC14]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 23879 00001B05 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23880 00001B07 EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 23881                                  
 23882                                  _$P_Sim_Found:				;AN000;
 23883 00001B09 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 23884 00001B0D B002                    	mov	al,_$P_List_Idx		;AN000;
 23885 00001B0F 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 23886 00001B12 EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 23887                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 23888                                  _$P_Sim01:				;AN000;
 23889 00001B14 2EC706[EC14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 23890 00001B1B B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23891                                  _$P_Sim_Exit:				;AN000;
 23892 00001B1D B003                    	mov	al,_$P_String		;AN000; Set type
 23893                                  _$P_Sim_Exit0:				;AN000;
 23894 00001B1F E8ACFC                  	call	_$P_Fill_Result		;AN000;
 23895 00001B22 5F                      	pop	di			;AN000;
 23896 00001B23 5A                      	pop	dx			;AN000;
 23897 00001B24 5B                      	pop	bx			;AN000;
 23898 00001B25 58                      	pop	ax			;AN000;
 23899 00001B26 C3                      	retn				;AN000;
 23900                                  
 23901                                  ;***********************************************************************
 23902                                  ; _$P_String_Comp:
 23903                                  ;
 23904                                  ; Function:  Compare two string
 23905                                  ;
 23906                                  ; Input:     cs:SI -> 1st string
 23907                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 23908                                  ;	     ES:BX -> CONTROL block
 23909                                  ;
 23910                                  ; Output:    CY = 1 if not match
 23911                                  ;
 23912                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 23913                                  ;
 23914                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 23915                                  ;***********************************************************************
 23916                                  
 23917                                  _$P_String_Comp:
 23918 00001B27 50                      	push	ax			;AN000;
 23919 00001B28 55                      	push	bp			;AN000;
 23920 00001B29 52                      	push	dx			;AN000;
 23921 00001B2A 56                      	push	si			;AN000;
 23922 00001B2B B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 23923                                  _$P_SCOM_Loop:				;AN000;
 23924 00001B2D 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 23925 00001B30 E82E02                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 23926 00001B33 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 23927                                  
 23928 00001B35 E80DFE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 23929                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 23930 00001B38 2EF606[F814]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 23931 00001B3E 740D                    	jz	short _$P_SCOM04	;AN000;
 23932                                  
 23933 00001B40 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 23934 00001B42 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 23935                                  
 23936 00001B44 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 23937 00001B49 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 23938                                  
 23939 00001B4B EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 23940                                  
 23941                                  _$P_SCOM04:				;AN000;
 23942 00001B4D 2EF606[F814]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 23943 00001B53 740E                    	jz	short _$P_SCOM03	;AN000;
 23944                                  
 23945 00001B55 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 23946 00001B57 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 23947                                  
 23948                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23949                                  	;cmp	byte [es:bp+0],_$P_NULL
 23950                                  	; 11/12/2022
 23951 00001B59 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 23952 00001B5E 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 23953                                  
 23954                                  _$P_SCOM05:				;AN000;   found a match
 23955 00001B60 46                      	inc	si			;AN000; si points to just after "=" or ":"
 23956 00001B61 EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 23957                                  
 23958                                  _$P_SCOM03:				;AN000;
 23959                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 23960                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23961                                  	;cmp	al,[es:bp+0]
 23962                                  	; 11/12/2022
 23963 00001B63 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 23964 00001B67 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 23965                                  
 23966 00001B69 08C0                    	or	al,al			;AN000; end of line
 23967 00001B6B 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 23968                                  
 23969                                  	; 12/12/2022
 23970                                  	;inc	si			;AN000; update operand pointer
 23971                                  	;inc	bp			;AN000;    and synonym pointer
 23972                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23973 00001B6D EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 23974                                  
 23975                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 23976                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23977                                  	;cmp	al,[es:bp+0]
 23978                                  	; 11/12/2022
 23979 00001B6F 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 23980 00001B73 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 23981                                  
 23982 00001B75 46                      	inc	si			;AN000; else, load next byte
 23983 00001B76 2E8A04                  	mov	al,[cs:si]		;AN000; and
 23984 00001B79 45                      	inc	bp			;AN000;
 23985                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23986                                  	;cmp	al,[es:bp+0]
 23987                                  	; 11/12/2022
 23988 00001B7A 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 23989 00001B7E 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 23990                                  
 23991                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23992                                  	; 12/12/2022
 23993                                  _$P_SCOM01:
 23994 00001B80 46                      	inc	si			;AN000; else update operand pointer
 23995 00001B81 45                      	inc	bp			;AN000; 		and synonym pointer
 23996                                  ;_$P_SCOM01:				;AN000;
 23997 00001B82 EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 23998                                  
 23999                                  _$P_SCOM_Differ0:			;AN000;
 24000                                  ;IF SwSW				;AN000;(tm10)
 24001 00001B84 2EF606[F814]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 24002 00001B8A 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 24003                                  
 24004                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24005                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 24006                                  	; 12/12/2022
 24007 00001B8C 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 24008 00001B91 7407                    	je	short _$P_not_applicable ;AN000;(tm10)
 24009                                  
 24010                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24011                                  	;cmp	byte [es:bp+0],_$P_NULL
 24012                                  	; 11/12/2022
 24013 00001B93 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 24014                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 24015 00001B98 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 24016                                  
 24017                                  _$P_not_applicable:			;AN000;(tm10)
 24018                                  ;ENDIF					;AN000;(tm10)
 24019                                  
 24020                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 24021                                  					;AN000; ignore colon option specified ?
 24022                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 24023                                  	; 12/12/2022
 24024 00001B9A 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24025                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24026                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 24027 00001B9E 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 24028                                  
 24029 00001BA0 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 24030 00001BA2 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 24031                                  
 24032                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24033                                  	;cmp	byte [es:bp+0],_$P_NULL
 24034                                  	; 11/12/2022
 24035 00001BA4 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 24036 00001BA9 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 24037                                  
 24038 00001BAB EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 24039                                  
 24040                                  _$P_SCOM02:				;AN000;
 24041 00001BAD 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 24042 00001BAF 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 24043                                  
 24044                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24045                                  	;cmp	byte [es:bp+0],_$P_Colon
 24046                                  	; 11/12/2022
 24047 00001BB1 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 24048 00001BB6 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 24049                                  
 24050                                  _$P_SCOM_Differ: 			;AN000;
 24051 00001BB8 F9                      	stc				;AN000; indicate not found
 24052 00001BB9 EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 24053                                  
 24054                                  _$P_SCOM_Same:				;AN000;
 24055                                  	; 12/12/2022
 24056                                  	; cf=0
 24057 00001BBB 2E8936[FB14]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 24058                                  	; 12/12/2022
 24059                                  	;clc				;AN000; indicate found
 24060                                  _$P_SCOM_Exit:				;AN000;
 24061 00001BC0 5E                      	pop	si			;AN000;
 24062 00001BC1 5A                      	pop	dx			;AN000;
 24063 00001BC2 5D                      	pop	bp			;AN000;
 24064 00001BC3 58                      	pop	ax			;AN000;
 24065 00001BC4 C3                      	retn
 24066                                  
 24067                                  ; 30/03/2019
 24068                                  
 24069                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 24070                                  
 24071                                  ;***********************************************************************
 24072                                  ; _$P_File_Format;
 24073                                  ;
 24074                                  ; Function:  Check if the input string is valid file spec format.
 24075                                  ;	     And set the result buffer.
 24076                                  ;
 24077                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24078                                  ;	     ES:BX -> CONTROL block
 24079                                  ;
 24080                                  ; Output:    None
 24081                                  ;
 24082                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 24083                                  ;
 24084                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 24085                                  ;	_$P_SaveSI_Cmpx(R)
 24086                                  ;***********************************************************************
 24087                                  
 24088                                  _$P_File_Format:
 24089 00001BC5 50                      	push	ax			;AN000;
 24090 00001BC6 57                      	push	di			;AN000;
 24091 00001BC7 56                      	push	si			;AN000;
 24092 00001BC8 2E8B3E[F914]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 24093                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 24094 00001BCD 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 24095 00001BD0 08C0                    	or	al,al			;AN000; end of line ?
 24096 00001BD2 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 24097                                  
 24098 00001BD4 E85E00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 24099 00001BD7 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 24100                                  
 24101 00001BD9 2EC606[8F15]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 24102                                  					;AN033;AC034;; set error flag- bad char.
 24103 00001BDF 5E                      	pop	si			;AN033;
 24104 00001BE0 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 24105 00001BE4 5F                      	pop	di			;AN033;
 24106 00001BE5 EB3E                    	jmp	short _$P_FileF02	;AN033;
 24107                                  
 24108                                  _$P_FileF_Err:				;AN000;
 24109 00001BE7 5E                      	pop	si			;AN000;
 24110 00001BE8 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 24111 00001BEC 5F                      	pop	di			;AN000;
 24112                                  
 24113                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 24114                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 24115                                  	; 12/12/2022
 24116 00001BED 26F60701                	test	byte [es:bx],_$P_Optional
 24117                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24118                                  	;test	word [es:bx],_$P_Optional
 24119 00001BF1 7532                    	jnz	short _$P_FileF02	;AN000;
 24120                                  
 24121 00001BF3 2EC706[EC14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 24122 00001BFA EB29                    	jmp	short _$P_FileF02	;AN000;
 24123                                  
 24124                                  _$P_FileF03:				;AN000;
 24125 00001BFC 58                      	pop	ax			;AN000; discard save si
 24126 00001BFD 56                      	push	si			;AN000; save new si
 24127                                  _$P_FileF_Loop1: 			;AN000;
 24128 00001BFE 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 24129 00001C01 08C0                    	or	al,al			;AN000; end of line ?
 24130 00001C03 741E                    	jz	short _$P_FileF_RLT	;AN000;
 24131                                  
 24132 00001C05 E82D00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 24133 00001C08 740B                    	je	short _$P_FileF00	;AN000;
 24134                                  
 24135 00001C0A E85401                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 24136 00001C0D 7302                    	jnc	short _$P_FileF01	;AN000;
 24137 00001C0F 47                      	inc	di			;AN000; if yes, skip next byte
 24138 00001C10 46                      	inc	si			;AN000;
 24139                                  _$P_FileF01:				;AN000;
 24140 00001C11 47                      	inc	di			;AN000;
 24141 00001C12 46                      	inc	si			;AN000;
 24142 00001C13 EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 24143                                  ;
 24144                                  _$P_FileF00:				;AN000;
 24145 00001C15 2EA2[F214]              	mov	[cs:_$P_Terminator],al	;AC034;
 24146 00001C19 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 24147 00001C1D 47                      	inc	di			;AN000;
 24148 00001C1E 2E893E[EE14]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 24149                                  _$P_FileF_RLT:				;AN000;
 24150 00001C23 5E                      	pop	si			;AN000;
 24151 00001C24 5F                      	pop	di			;AN000;
 24152                                  _$P_FileF02:				;AN000;
 24153 00001C25 58                      	pop	ax			;AN000; (tm14)
 24154 00001C26 A90002                  	test	ax,_$P_File_Spc		;AN000; (tm14)
 24155 00001C29 7409                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 24156                                  
 24157 00001C2B 50                      	push	ax			;AN000;  (tm14)
 24158                                  
 24159 00001C2C B4FF                    	mov	ah,_$P_No_Tag		;AN000; set
 24160 00001C2E B005                    	mov	al,_$P_File_Spec 	;AN000;    result
 24161 00001C30 E89BFB                  	call	_$P_Fill_Result		;AN000; 	 buffer to file spec
 24162 00001C33 58                      	pop	ax			;AN000;
 24163                                  
 24164                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 24165 00001C34 C3                      	retn				;AN000;
 24166                                  
 24167                                  ;***********************************************************************
 24168                                  ; _$P_FileSp_Chk
 24169                                  ;
 24170                                  ; Function:  Check if the input byte is one of file special characters
 24171                                  ;
 24172                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24173                                  ;	     AL = character code to be examineed
 24174                                  ;
 24175                                  ; Output:    ZF = 1 , AL is one of special characters
 24176                                  ;***********************************************************************
 24177                                  
 24178                                  _$P_FileSp_Chk:
 24179 00001C35 53                      	push	bx			;AN000;
 24180 00001C36 51                      	push	cx			;AN000;
 24181                                  	;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 24182 00001C37 8D1E[8615]              	lea	bx,[_$P_FileSp_Char]
 24183 00001C3B B90900                  	mov	cx,_$P_FileSp_Len	;AN000; load length of it
 24184                                  _$P_FileSp_Loop: 			;AN000;
 24185 00001C3E 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 24186 00001C41 7404                    	je	short _$P_FileSp_Exit	;AN000;
 24187                                  
 24188 00001C43 43                      	inc	bx			;AN000;
 24189 00001C44 E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 24190                                  
 24191 00001C46 41                      	inc	cx			;AN000; reset ZF
 24192                                  _$P_FileSp_Exit: 			;AN000;
 24193 00001C47 59                      	pop	cx			;AN000;
 24194 00001C48 5B                      	pop	bx			;AN000;
 24195 00001C49 C3                      	retn
 24196                                  
 24197                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 24198                                  
 24199                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 24200                                  
 24201                                  ;***********************************************************************
 24202                                  ; _$P_Drive_Format;
 24203                                  ;
 24204                                  ; Function:  Check if the input string is valid drive only format.
 24205                                  ;	     And set the result buffer.
 24206                                  ;
 24207                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24208                                  ;	     ES:BX -> CONTROL block
 24209                                  ;
 24210                                  ; Output:    None
 24211                                  ;
 24212                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 24213                                  ;
 24214                                  ; Vars: _$P_RC(W)
 24215                                  ;***********************************************************************
 24216                                  
 24217                                  _$P_Drive_Format:
 24218 00001C4A 50                      	push	ax			;AN000;
 24219 00001C4B 52                      	push	dx			;AN000;
 24220 00001C4C 2E8A04                  	mov	al,[cs:si]		;AN000;
 24221 00001C4F 08C0                    	or	al,al			;AN000; if null string
 24222 00001C51 7437                    	je	short _$P_Drv_Exit	;AN000; do nothing
 24223                                  
 24224 00001C53 E80B01                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 24225 00001C56 722B                    	jc	short _$P_Drv_Err	;AN000;
 24226                                  
 24227 00001C58 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d", ":", 0  ?
 24228 00001C5D 740D                    	je	short _$P_DrvF00	;AN000;
 24229                                  
 24230                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 24231                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 24232                                  	; 12/12/2022
 24233 00001C5F 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24234                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24235                                  	;test	word [es:bx],_$P_Ig_Colon
 24236 00001C63 741E                    	jz	short _$P_Drv_Err	;AN000;
 24237                                  
 24238 00001C65 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d", 0  ?
 24239 00001C6A 7517                    	jne	short _$P_Drv_Err	;AN000;
 24240                                  
 24241                                  _$P_DrvF00:				;AN000;
 24242 00001C6C 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 24243 00001C6E 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 24244 00001C70 7211                    	jb	short _$P_Drv_Err	;AN000; in range of
 24245                                  
 24246 00001C72 3C7A                    	cmp	al,"z"                  ;AN000; "a" - "z"
 24247 00001C74 770D                    	ja	short _$P_Drv_Err	;AN000; if no, error
 24248                                  
 24249 00001C76 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 24250 00001C78 88C2                    	mov	dl,al			;AN000; set
 24251 00001C7A B4FF                    	mov	ah,_$P_No_Tag		;AN000;    result
 24252 00001C7C B006                    	mov	al,_$P_Drive		;AN000; 	 buffer
 24253 00001C7E E84DFB                  	call	_$P_Fill_Result		;AN000; 	       to drive
 24254 00001C81 EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 24255                                  
 24256                                  _$P_Drv_Err:				;AN000;
 24257 00001C83 2EC706[EC14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24258                                  _$P_Drv_Exit:				;AN000;
 24259 00001C8A 5A                      	pop	dx			;AN000;
 24260 00001C8B 58                      	pop	ax			;AN000;
 24261 00001C8C C3                      	retn				;AN000;
 24262                                  
 24263                                  ;ENDIF					;AN000;(of DrvSW)
 24264                                  
 24265                                  ;***********************************************************************
 24266                                  ; _$P_Skip_Delim;
 24267                                  ;
 24268                                  ; Function: Skip delimiters specified in the PARMS list, white space
 24269                                  ;	    and comma.
 24270                                  ;
 24271                                  ; Input:    DS:SI -> Command String
 24272                                  ;	    ES:DI -> Parameter List
 24273                                  ;
 24274                                  ; Output:   CY = 1 if the end of line encounterd
 24275                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 24276                                  ;	    AL = Last examineed character
 24277                                  ;
 24278                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 24279                                  ;
 24280                                  ; Vars:     _$P_Flags(R)
 24281                                  ;***********************************************************************
 24282                                  
 24283                                  _$P_Skip_Delim:
 24284                                  _$P_Skip_Delim_Loop:			;AN000;
 24285 00001C8D AC                      	lodsb				;AN000;
 24286 00001C8E E81F00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 24287 00001C91 7417                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 24288                                  
 24289 00001C93 E85000                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 24290 00001C96 7515                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 24291                                  
 24292 00001C98 2EF606[F814]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 24293 00001C9E 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 24294                                  
 24295 00001CA0 2EF606[F814]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 24296 00001CA6 7407                    	jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 24297                                  
 24298                                  	;dec	si			;AN000; backup si for next call (tm08)
 24299                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 24300                                  	; 12/12/2022
 24301                                  	; cf=0
 24302 00001CA8 EB04                    	jmp	short _$P_Skip_Delim_Exit
 24303                                  
 24304                                  _$P_Skip_Delim_CY:			;AN000;
 24305 00001CAA F9                      	stc				;AN000; indicate EOL
 24306 00001CAB EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 24307                                  
 24308                                  _$P_Skip_Delim_NCY:			;AN000;
 24309 00001CAD F8                      	clc				;AN000; indicate non delim
 24310                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 24311 00001CAE 4E                      	dec	si			;AN000;  backup index pointer
 24312                                  	; 12/12/2022
 24313                                  _$P_Exit_At_Extra:	 ; cf=0
 24314 00001CAF C3                      	retn				;AN000;
 24315                                  
 24316                                  	; 12/12/2022
 24317                                  ;_$P_Exit_At_Extra:			;AN000;
 24318                                  	;clc				;AN000; indicate extra delim
 24319                                  	;retn				;AN000;
 24320                                  
 24321                                  ;***********************************************************************
 24322                                  ; _$P_Chk_EOL;
 24323                                  ;
 24324                                  ; Function: Check if AL is one of End of Line characters.
 24325                                  ;
 24326                                  ; Input:    AL = character code
 24327                                  ;	    ES:DI -> Parameter List
 24328                                  ;
 24329                                  ; Output:   ZF = 1 if one of End of Line characters
 24330                                  ;**********************************************************************
 24331                                  
 24332                                  _$P_Chk_EOL:
 24333 00001CB0 53                      	push	bx			;AN000;
 24334 00001CB1 51                      	push	cx			;AN000;
 24335 00001CB2 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 24336 00001CB4 742D                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24337                                  
 24338 00001CB6 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 24339 00001CB8 7429                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24340                                  
 24341                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 24342 00001CBA 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 24343 00001CBC 7425                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24344                                  ;ENDIF					;AN028;
 24345                                  
 24346 00001CBE 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 24347                                  					;AN000; EOL character specified ?
 24348 00001CC3 721E                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 24349                                  
 24350 00001CC5 31DB                    	xor	bx,bx			;AN000;
 24351 00001CC7 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 24352                                  					;AN000; get length of delimiter list
 24353 00001CCB 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 24354 00001CCE 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 24355 00001CD2 740D                    	je	short _$P_Chk_EOL_NZ	;AN000;
 24356                                  
 24357                                  	;xor	cx,cx			;AN000; Get number of extra character
 24358 00001CD4 30ED                    	xor	ch,ch
 24359 00001CD6 268A09                  	mov	cl,[es:bx+di]		;AN000;
 24360                                  _$P_Chk_EOL_Loop:			;AN000;
 24361 00001CD9 43                      	inc	bx			;AN000;
 24362 00001CDA 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 24363 00001CDD 7404                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24364                                  
 24365 00001CDF E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 24366                                  
 24367                                  _$P_Chk_EOL_NZ:				;AN000;
 24368 00001CE1 3C0D                    	cmp	al,_$P_CR		;AN000; reset ZF
 24369                                  _$P_Chk_EOL_Exit:			;AN000;
 24370 00001CE3 59                      	pop	cx			;AN000;
 24371 00001CE4 5B                      	pop	bx			;AN000;
 24372 00001CE5 C3                      	retn
 24373                                  
 24374                                  ;***********************************************************************
 24375                                  ; _$P_Chk_Delim;
 24376                                  ;
 24377                                  ; Function: Check if AL is one of delimiter characters.
 24378                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 24379                                  ;	    blanks.
 24380                                  ;
 24381                                  ; Input:    AL = character code
 24382                                  ;	    DS:SI -> Next Character
 24383                                  ;	    ES:DI -> Parameter List
 24384                                  ;
 24385                                  ; Output:   ZF = 1 if one of delimiter characters
 24386                                  ;	    SI points to the next character
 24387                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 24388                                  ;***********************************************************************
 24389                                  
 24390                                  _$P_Chk_Delim:
 24391 00001CE6 53                      	push	bx			;AN000;
 24392 00001CE7 51                      	push	cx			;AN000;
 24393 00001CE8 2EC606[F214]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 24394                                  					;AC034; Assume terminated by space
 24395                                  	;and	byte [cs:_$P_Flags20,0DFh
 24396 00001CEE 2E8026[F814]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 24397 00001CF4 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 24398 00001CF6 7436                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24399                                  
 24400 00001CF8 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 24401 00001CFA 7432                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24402                                  
 24403 00001CFC 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 24404 00001CFE 7431                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24405                                  
 24406                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24407                                  _$P_Chk_Delim00: 			;AN000;
 24408 00001D00 3C20                    	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 24409 00001D02 750C                    	jne	short _$P_Chk_Delim01	;AN000;
 24410                                  
 24411 00001D04 803C20                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 24412 00001D07 7507                    	jne	short _$P_Chk_Delim01	;AN000;
 24413                                  
 24414 00001D09 B020                    	mov	al,_$P_Space		;AN000;
 24415 00001D0B 46                      	inc	si			;AN000; make si point to next character
 24416 00001D0C 38C0                    	cmp	al,al			;AN000; Set ZF
 24417 00001D0E EB1E                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24418                                  
 24419                                  _$P_Chk_Delim01: 			;AN000;
 24420 00001D10 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 24421                                  					;AN000; delimiter character specified ?
 24422 00001D15 7217                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 24423                                  
 24424                                  	;xor	cx,cx			;AN000;
 24425 00001D17 30ED                    	xor	ch,ch
 24426                                  	;mov	cl,[es:di+3]
 24427 00001D19 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 24428                                  					;AN000; get length of delimiter list
 24429 00001D1D 09C9                    	or	cx,cx			;AN000; No extra Delim character ?
 24430 00001D1F 740B                    	jz	short _$P_Chk_Delim_NZ 	;AN000;
 24431                                  
 24432 00001D21 BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 24433                                  _$P_Chk_Delim_Loop:			;AN000;
 24434 00001D24 43                      	inc	bx			;AN000;
 24435 00001D25 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 24436 00001D28 7407                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24437                                  
 24438 00001D2A E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 24439                                  
 24440                                  _$P_Chk_Delim_NZ:			;AN000;
 24441 00001D2C 3C20                    	cmp	al,_$P_Space		;AN000; reset ZF
 24442                                  _$P_Chk_Delim_Exit:			;AN000;
 24443                                  _$P_ChkDfin:				;AN000;
 24444 00001D2E 59                      	pop	cx			;AN000;
 24445 00001D2F 5B                      	pop	bx			;AN000;
 24446 00001D30 C3                      	retn				;AN000;
 24447                                  
 24448                                  _$P_Chk_Delim_Exit0:			;AN000;
 24449 00001D31 2EA2[F214]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 24450 00001D35 2EF606[F814]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 24451 00001D3B 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 24452                                  
 24453 00001D3D 2E800E[F814]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 24454                                  					;AC034; flag terminated extra delimiter or comma
 24455                                  _$P_No_Set_Extra:			;AN027;
 24456 00001D43 38C0                    	cmp	al,al			;AN000; set ZF
 24457 00001D45 EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24458                                  
 24459                                  
 24460                                  ;***********************************************************************
 24461                                  ; _$P_Chk_Switch;
 24462                                  ;
 24463                                  ; Function: Check if AL is the switch character not in first position of
 24464                                  ;	    _$P_STRING_BUF
 24465                                  ;
 24466                                  ; Input:    AL = character code
 24467                                  ;	    BX = current pointer within _$P_String_Buf
 24468                                  ;	    SI =>next char on command line (following the one in AL)
 24469                                  ;
 24470                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 24471                                  ;		 position, and has no chance of being part of a date string,
 24472                                  ;		 i.e. should be treated as a delimiter.
 24473                                  
 24474                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 24475                                  ;		 position, or is a slash but may be part of a date string, i.e.
 24476                                  ;		 should not be treated as a delimiter.
 24477                                  ;
 24478                                  ; Vars:  _$P_Terminator(W)
 24479                                  
 24480                                  ; Use:	 _$P_0099
 24481                                  ;***********************************************************************
 24482                                  
 24483                                  _$P_Chk_Switch:
 24484                                  	;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 24485 00001D47 8D2E[0115]              	lea	bp,[_$P_STRING_BUF]	;BP=OFFSET of _$P_String_Buf even in group addressing
 24486                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 24487 00001D4B 39EB                    	cmp	bx,bp			;AN000;
 24488 00001D4D 7406                    	je	short _$P_STRUC_L2	;AN000;
 24489                                  
 24490                                  ;	.IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 24491 00001D4F 3C2F                    	cmp	al,_$P_Switch		;AN000;
 24492 00001D51 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 24493                                  
 24494 00001D53 F9                      	stc				;AN020;not in first position and is slash
 24495                                  	;jmp     short _$P_STRUC_L1	;AN000;
 24496                                  	; 12/12/2022
 24497 00001D54 C3                      	retn
 24498                                  
 24499                                  ; 12/12/2022
 24500                                  ;_$P_STRUC_L5:				;AN000;
 24501                                  ;	CLC				;AN020;not a slash
 24502                                  ;;	    .ENDIF			;AN020;
 24503                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 24504                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 24505                                  
 24506                                  _$P_STRUC_L2:				;AN000;
 24507                                  ;	.IF <AL EQ _$P_Switch> THEN	;AN020;
 24508 00001D55 3C2F                    	cmp     al,_$P_Switch		;AN000;
 24509 00001D57 7506                    	jne	short _$P_STRUC_L12	;AN000;
 24510                                  
 24511 00001D59 2E800E[F814]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020 ;AC034;;could be valid switch, first char and is slash
 24512                                  ;	.ENDIF				;AN020;
 24513                                  
 24514                                  	; 12/12/2022
 24515                                  	; cf=0
 24516                                  	;retn
 24517                                  
 24518                                  _$P_STRUC_L5:
 24519                                  	; 12/12/2022
 24520                                  _$P_STRUC_L12:				;AN000;
 24521 00001D5F F8                      	clc				;AN020;CF=0 indicating first char
 24522                                  ;	.ENDIF				;AN020;
 24523                                  _$P_STRUC_L1:				;AN000;
 24524 00001D60 C3                      	retn				;AN000;
 24525                                  
 24526                                  ;**************************************************************************
 24527                                  ; _$P_Chk_DBCS:
 24528                                  ;
 24529                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 24530                                  ;
 24531                                  ;  Input:
 24532                                  ;	  AL	= Code to be examineed
 24533                                  ;
 24534                                  ;  Output:
 24535                                  ;	  If CF is on then a lead byte of DBCS
 24536                                  ;
 24537                                  ; Use: INT 21h w/AH=63
 24538                                  ;
 24539                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 24540                                  ;***************************************************************************
 24541                                  
 24542                                  _$P_Chk_DBCS:
 24543 00001D61 1E                      	push	ds			;AN000;
 24544 00001D62 56                      	push	si			;AN000;
 24545 00001D63 53                      	push	bx			;AN000; (tm11)
 24546                                  	
 24547 00001D64 2E833E[F514]00          	cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 24548 00001D6A 7527                    	jne	short _$P_DBCS00	;AN000;
 24549                                  
 24550 00001D6C 50                      	push	ax			;AN000;
 24551 00001D6D 1E                      	push	ds			;AN000; (tm11)
 24552 00001D6E 51                      	push	cx			;AN000;
 24553 00001D6F 52                      	push	dx			;AN000;
 24554 00001D70 57                      	push	di			;AN000;
 24555 00001D71 55                      	push	bp			;AN000;
 24556 00001D72 06                      	push	es			;AN000;
 24557 00001D73 31F6                    	xor	si,si			;AN000;
 24558 00001D75 8EDE                    	mov	ds,si			;AN000;
 24559 00001D77 B80063                  	MOV	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 24560 00001D7A CD21                    	int	21h			;AN000;
 24561                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 24562 00001D7C 8CDB                    	mov	bx,ds			;AN000; (tm11)
 24563 00001D7E 09DB                    	or	bx,bx			;AN000; (tm11)
 24564 00001D80 07                      	pop	es			;AN000;
 24565 00001D81 5D                      	pop	bp			;AN000;
 24566 00001D82 5F                      	pop	di			;AN000;
 24567 00001D83 5A                      	pop	dx			;AN000;
 24568 00001D84 59                      	pop	cx			;AN000;
 24569 00001D85 1F                      	pop	ds			;AN000; (tm11)
 24570 00001D86 58                      	pop	ax			;AN000;
 24571 00001D87 7429                    	jz	short _$P_NON_DBCS	;AN000;
 24572                                  
 24573                                  _$P_DBCS02:				;AN000;
 24574 00001D89 2E8936[F314]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 24575 00001D8E 2E891E[F514]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 24576                                  _$P_DBCS00:				;AN000;
 24577 00001D93 2E8B36[F314]            	mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 24578 00001D98 2E8E1E[F514]            	mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 24579                                  
 24580                                  _$P_DBCS_LOOP:				;AN000;
 24581 00001D9D 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 24582 00001DA0 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 24583                                  
 24584 00001DA2 3A04                    	cmp	al,[si] 		;AN000;
 24585 00001DA4 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 24586                                  
 24587 00001DA6 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 24588 00001DA9 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 24589                                  
 24590 00001DAB F9                      	stc				;AN000; if yes, indicate DBCS and exit
 24591 00001DAC EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 24592                                  
 24593                                  _$P_DBCS01:				;AN000;
 24594 00001DAE 46                      	inc	si			;AC035; add '2' to
 24595 00001DAF 46                      	inc	si			;AC035;  SI reg
 24596                                  					;AN000; get next vector
 24597 00001DB0 EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 24598                                  
 24599                                  _$P_NON_DBCS:				;AN000;
 24600                                  	; 12/12/2022
 24601                                  	; cf=0
 24602                                  	;clc				;AN000; indicate SBCS
 24603                                  _$P_DBCS_EXIT:				;AN000;
 24604 00001DB2 5B                      	pop	bx			;AN000; (tm11)
 24605 00001DB3 5E                      	pop	si			;AN000;
 24606 00001DB4 1F                      	pop	ds			;AN000;
 24607 00001DB5 C3                      	retn				;AN000;
 24608                                  
 24609                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 24610                                  ; ======================================================================
 24611                                  ; 27/03/2019 - Retro DOS v4.0
 24612                                  
 24613                                  ;control block definitions for parser.
 24614                                  ;-----------------------------------------------------------------------
 24615                                  ; buffer = [n | n,m] {/e}
 24616                                  
 24617                                  ; 30/03/2019
 24618                                  
 24619                                  struc p_parms
 24620 00000000 ????                    	resw	1	; dw ?
 24621 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 24622 00000003 ??                      	resb	1	; db 1	; length is 1
 24623 00000004 ??                      	resb 	1	; db ';' ; delimiter
 24624                                  .size:
 24625                                  endstruc
 24626                                  
 24627                                  struc p_pos
 24628 00000000 ????                    	resw	1	; dw ?	; numeric value??
 24629 00000002 ????                    	resw	1	; dw ?	; function
 24630 00000004 ????                    	resw	1	; dw ?	; result value buffer
 24631                                  
 24632                                  ; note: by defining result_val before this structure, we could remove
 24633                                  ;  the "result_val" from every structure invocation
 24634                                  
 24635 00000006 ????                    	resw	1	; dw ?	; value list
 24636 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 24637                                  .size:
 24638                                  endstruc
 24639                                  
 24640                                  struc	p_range
 24641 00000000 ??                      	resb	1	; db 1	; range definition
 24642 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 24643 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 24644 00000003 ????????                	resd	1	; dd ?	; numeric min
 24645 00000007 ????????                	resd	1	; dd ?	; numeric max
 24646                                  .size:
 24647                                  endstruc
 24648                                  
 24649                                  ;-----------------------------------------------------------------------
 24650                                  
 24651                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24652                                  	; (SYSINIT:1F48h)
 24653                                  
 24654                                  ; buffer = [n | n,m] {/e}
 24655                                  
 24656                                  ;buf_parms p_parms <buf_parmsx>
 24657                                  buf_parms: 
 24658 00001DB6 [BB1D]                  	dw	buf_parmsx
 24659 00001DB8 01                      	db	1	; an extra delimiter list
 24660 00001DB9 01                      	db	1	; length is 1
 24661 00001DBA 3B                      	db	';'	; delimiter
 24662                                  
 24663                                  buf_parmsx:
 24664 00001DBB 0102[C51D][D91D]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 24665 00001DC1 01                      	db	1			; one switch
 24666 00001DC2 [ED1D]                  	dw	sw_x_ctrl
 24667 00001DC4 00                      	db	0			; no keywords
 24668                                  
 24669                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 24670                                  buf_pos1:
 24671 00001DC5 0080                    	dw	8000h	; numeric value??
 24672 00001DC7 0000                    	dw	0	; function
 24673 00001DC9 [FF1D]                  	dw	result_val ; result value buffer	
 24674 00001DCB [CE1D]                  	dw	buf_range_1 ; value list
 24675 00001DCD 00                      	db	0  	; no switches/keywords
 24676                                  
 24677                                  ;buf_range_1 p_range <,,,1,99>		; M050
 24678                                  buf_range_1:
 24679 00001DCE 01                      	db	1	; range definition
 24680 00001DCF 01                      	db	1	; 1 definition of range
 24681 00001DD0 01                      	db	1	; item tag for this range
 24682 00001DD1 01000000                	dd	1	; numeric min
 24683 00001DD5 63000000                	dd	99	; numeric max
 24684                                  
 24685                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 24686                                  buf_pos2:
 24687 00001DD9 0180                    	dw	8001h
 24688 00001DDB 0000                    	dw	0
 24689 00001DDD [FF1D]                  	dw	result_val	
 24690 00001DDF [E21D]                  	dw	buf_range_2
 24691 00001DE1 00                      	db	0
 24692                                  
 24693                                  ;buf_range_2 p_range <,,,0,8>
 24694                                  buf_range_2:
 24695 00001DE2 01                      	db	1
 24696 00001DE3 01                      	db	1
 24697 00001DE4 01                      	db	1
 24698 00001DE5 00000000                	dd	0
 24699 00001DE9 08000000                	dd	8
 24700                                  
 24701                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 24702                                  sw_x_ctrl:
 24703 00001DED 0000                    	dw	0
 24704 00001DEF 0000                    	dw	0
 24705 00001DF1 [FF1D]                  	dw	result_val	
 24706 00001DF3 [FE1D]                  	dw	noval
 24707 00001DF5 01                      	db	1	; 1 switch
 24708                                  	
 24709                                  switch_x:
 24710 00001DF6 2F5800                  	db	'/X',0		; M016
 24711                                  
 24712                                  p_buffers:
 24713 00001DF9 0000                    	dw	0	; local variables
 24714                                  p_h_buffers:
 24715 00001DFB 0000                    	dw	0
 24716                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24717                                  p_buffer_slash_x:
 24718 00001DFD 00                      	db	0 ; 31/03/2019
 24719                                  
 24720                                  ;-- common definitions -------------------------------------------------
 24721                                  
 24722 00001DFE 00                      noval:	db	0
 24723                                  
 24724                                  result_val: 	;label	byte
 24725 00001DFF 00                      	db	0		; type returned
 24726                                  result_val_itag:
 24727 00001E00 00                      	db	0		; item tag returned
 24728                                  result_val_swoff:
 24729 00001E01 0000                    	dw	0		; es:offset of the switch defined
 24730                                  rv_byte:	;label	byte
 24731 00001E03 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 24732                                  
 24733                                  ;-----------------------------------------------------------------------
 24734                                  
 24735                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24736                                  	; (SYSINIT:1F99h)
 24737                                  
 24738                                  ; break = [ on | off ]
 24739                                  
 24740                                  ;brk_parms p_parms  <brk_parmsx>
 24741                                  brk_parms:
 24742 00001E07 [0C1E]                  	dw	brk_parmsx
 24743 00001E09 01                      	db	1	; an extra delimiter list
 24744 00001E0A 01                      	db	1	; length is 1
 24745 00001E0B 3B                      	db	';'	; delimiter
 24746                                  
 24747                                  brk_parmsx:
 24748 00001E0C 0101[121E]              	dw	101h,brk_pos	; min,max = 1 positional
 24749 00001E10 00                      	db	0		; no switches
 24750 00001E11 00                      	db	0		; no keywords
 24751                                  
 24752                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 24753                                  brk_pos:
 24754 00001E12 0020                    	dw	2000h
 24755 00001E14 0000                    	dw	0
 24756 00001E16 [FF1D]                  	dw	result_val	
 24757 00001E18 [1B1E]                  	dw	on_off_string
 24758 00001E1A 00                      	db	0
 24759                                  
 24760                                  on_off_string:	;label	byte
 24761 00001E1B 03                      	db	3		; signals that there is a string choice
 24762 00001E1C 00                      	db	0		; no range definition
 24763 00001E1D 00                      	db	0		; no numeric values choice
 24764 00001E1E 02                      	db	2		; 2 strings for choice
 24765 00001E1F 01                      	db	1		; the 1st string tag
 24766 00001E20 [251E]                  	dw	on_string
 24767 00001E22 02                      	db	2		; the 2nd string tag
 24768 00001E23 [281E]                  	dw	off_string
 24769                                  
 24770                                  on_string:
 24771 00001E25 4F4E00                  	db	"ON",0
 24772                                  off_string:
 24773 00001E28 4F464600                	db	"OFF",0
 24774                                  
 24775                                  p_ctrl_break:
 24776 00001E2C 00                      	db	0	; local variable
 24777                                  
 24778                                  ;-----------------------------------------------------------------------
 24779                                  
 24780                                  	; 27/10/2022
 24781                                  
 24782                                  ; country = n {m {path}}
 24783                                  ; or
 24784                                  ; country = n,,path
 24785                                  
 24786                                  ;cntry_parms p_parms <cntry_parmsx>
 24787                                  cntry_parms:
 24788 00001E2D [321E]                  	dw	cntry_parmsx
 24789 00001E2F 01                      	db	1
 24790 00001E30 01                      	db	1
 24791 00001E31 3B                      	db	';'
 24792                                  	
 24793                                  cntry_parmsx:
 24794 00001E32 0103[3C1E][501E]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 24794 00001E38 [591E]             
 24795 00001E3A 00                      	db	0		; no switches
 24796 00001E3B 00                      	db	0		; no keywords
 24797                                  
 24798                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 24799                                  cntry_pos1:
 24800 00001E3C 0080                    	dw	8000h
 24801 00001E3E 0000                    	dw	0
 24802 00001E40 [FF1D]                  	dw	result_val	
 24803 00001E42 [451E]                  	dw	cc_range
 24804 00001E44 00                      	db	0
 24805                                  
 24806                                  ;cc_range p_range <,,,1,999>
 24807                                  cc_range:
 24808 00001E45 01                      	db	1
 24809 00001E46 01                      	db	1
 24810 00001E47 01                      	db	1
 24811 00001E48 01000000                	dd	1
 24812 00001E4C E7030000                	dd	999
 24813                                  
 24814                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 24815                                  cntry_pos2:
 24816 00001E50 0180                    	dw	8001h
 24817 00001E52 0000                    	dw	0
 24818 00001E54 [FF1D]                  	dw	result_val	
 24819 00001E56 [451E]                  	dw	cc_range
 24820 00001E58 00                      	db	0
 24821                                  
 24822                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 24823                                  cntry_pos3:
 24824 00001E59 0102                    	dw	201h
 24825 00001E5B 0000                    	dw	0
 24826 00001E5D [FF1D]                  	dw	result_val	
 24827 00001E5F [FE1D]                  	dw	noval
 24828 00001E61 00                      	db	0	
 24829                                  
 24830                                  p_cntry_code:
 24831 00001E62 0000                    	dw	0	; local variable
 24832                                  p_code_page:
 24833 00001E64 0000                    	dw	0	; local variable
 24834                                  
 24835                                  ;-----------------------------------------------------------------------
 24836                                  
 24837                                  	; 27/10/2022
 24838                                  
 24839                                  ; files = n
 24840                                  
 24841                                  ;files_parms p_parms <files_parmsx>
 24842                                  files_parms:
 24843 00001E66 [6B1E]                  	dw	files_parmsx
 24844 00001E68 01                      	db	1
 24845 00001E69 01                      	db	1
 24846 00001E6A 3B                      	db	';'
 24847                                  
 24848                                  files_parmsx:
 24849 00001E6B 0101[711E]              	dw	101h,files_pos	; min,max 1 positional
 24850 00001E6F 00                      	db	0		; no switches
 24851 00001E70 00                      	db	0		; no keywords
 24852                                  
 24853                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 24854                                  files_pos:
 24855 00001E71 0080                    	dw	8000h
 24856 00001E73 0000                    	dw	0
 24857 00001E75 [FF1D]                  	dw	result_val	
 24858 00001E77 [7A1E]                  	dw	files_range
 24859 00001E79 00                      	db	0
 24860                                  
 24861                                  ;files_range p_range <,,,8,255>
 24862                                  files_range:
 24863 00001E7A 01                      	db	1
 24864 00001E7B 01                      	db	1
 24865 00001E7C 01                      	db	1
 24866 00001E7D 08000000                	dd	8
 24867 00001E81 FF000000                	dd	255
 24868                                  
 24869                                  p_files:
 24870 00001E85 00                      	db	0		; local variable
 24871                                  
 24872                                  ;-----------------------------------------------------------------------
 24873                                  
 24874                                  	; 27/10/2022
 24875                                  
 24876                                  ; fcbs = n,m
 24877                                  
 24878                                  ;fcbs_parms p_parms <fcbs_parmsx>
 24879                                  fcbs_parms:
 24880 00001E86 [8B1E]                  	dw	fcbs_parmsx
 24881 00001E88 01                      	db	1
 24882 00001E89 01                      	db	1
 24883 00001E8A 3B                      	db	';'
 24884                                  
 24885                                  fcbs_parmsx:
 24886 00001E8B 0102[931E][A71E]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 24887 00001E91 00                      	db	0		; no switches
 24888 00001E92 00                      	db	0		; no keywords
 24889                                  
 24890                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 24891                                  fcbs_pos_1:
 24892 00001E93 0080                    	dw	8000h
 24893 00001E95 0000                    	dw	0
 24894 00001E97 [FF1D]                  	dw	result_val	
 24895 00001E99 [9C1E]                  	dw	fcbs_range
 24896 00001E9B 00                      	db	0
 24897                                  
 24898                                  ;fcbs_range p_range <,,,1,255>
 24899                                  fcbs_range:
 24900 00001E9C 01                      	db	1
 24901 00001E9D 01                      	db	1
 24902 00001E9E 01                      	db	1
 24903 00001E9F 01000000                	dd	1
 24904 00001EA3 FF000000                	dd	255
 24905                                  
 24906                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 24907                                  fcbs_pos_2:
 24908 00001EA7 0080                    	dw	8000h
 24909 00001EA9 0000                    	dw	0
 24910 00001EAB [FF1D]                  	dw	result_val	
 24911 00001EAD [B01E]                  	dw	fcbs_keep_range
 24912 00001EAF 00                      	db	0
 24913                                  
 24914                                  ;fcbs_keep_range p_range <,,,0,255>
 24915                                  fcbs_keep_range:
 24916 00001EB0 01                      	db	1
 24917 00001EB1 01                      	db	1
 24918 00001EB2 01                      	db	1
 24919 00001EB3 00000000                	dd	0
 24920 00001EB7 FF000000                	dd	255
 24921                                  
 24922 00001EBB 00                      p_fcbs:	db	0		; local variable
 24923 00001EBC 00                      p_keep:	db	0		; local variable
 24924                                  
 24925                                  ;-----------------------------------------------------------------------
 24926                                  
 24927                                  	; 27/10/2022
 24928                                  
 24929                                  ; lastdrive = x
 24930                                  
 24931                                  ;ldrv_parms p_parms <ldrv_parmsx>
 24932                                  ldrv_parms:
 24933 00001EBD [C21E]                  	dw	ldrv_parmsx
 24934 00001EBF 01                      	db	1
 24935 00001EC0 01                      	db	1
 24936 00001EC1 3B                      	db	';'
 24937                                  
 24938                                  ldrv_parmsx:
 24939 00001EC2 0101[C81E]              	dw	101h,ldrv_pos	; min,max = 1 positional
 24940 00001EC6 00                      	db	0		; no switches
 24941 00001EC7 00                      	db	0		; no keywords
 24942                                  
 24943                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 24944                                  ldrv_pos:				    ; remove colon at end
 24945 00001EC8 1001                    	dw	110h
 24946 00001ECA 1000                    	dw	10h
 24947 00001ECC [FF1D]                  	dw	result_val	
 24948 00001ECE [FE1D]                  	dw	noval
 24949 00001ED0 00                      	db	0
 24950                                  	
 24951 00001ED1 00                      p_ldrv:	db	0		; local variable
 24952                                  
 24953                                  ;-----------------------------------------------------------------------
 24954                                  
 24955                                  	; 27/10/2022
 24956                                  
 24957                                  ; stacks = n,m
 24958                                  
 24959                                  ;stks_parms p_parms <stks_parmsx>
 24960                                  stks_parms:
 24961 00001ED2 [D71E]                  	dw	stks_parmsx
 24962 00001ED4 01                      	db	1
 24963 00001ED5 01                      	db	1
 24964 00001ED6 3B                      	db	';'
 24965                                  
 24966                                  stks_parmsx:
 24967 00001ED7 0202[DF1E][F31E]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 24968 00001EDD 00                      	db	0		; no switches
 24969 00001EDE 00                      	db	0		; no keywords
 24970                                  
 24971                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 24972                                  stks_pos_1:
 24973 00001EDF 0080                    	dw	8000h
 24974 00001EE1 0000                    	dw	0
 24975 00001EE3 [FF1D]                  	dw	result_val	
 24976 00001EE5 [E81E]                  	dw	stks_range
 24977 00001EE7 00                      	db	0
 24978                                  
 24979                                  ;stks_range p_range <,,,0,64>
 24980                                  stks_range:
 24981 00001EE8 01                      	db	1
 24982 00001EE9 01                      	db	1
 24983 00001EEA 01                      	db	1
 24984 00001EEB 00000000                	dd	0
 24985 00001EEF 40000000                	dd	64
 24986                                  
 24987                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 24988                                  stks_pos_2:
 24989 00001EF3 0080                    	dw	8000h
 24990 00001EF5 0000                    	dw	0
 24991 00001EF7 [FF1D]                  	dw	result_val	
 24992 00001EF9 [FC1E]                  	dw	stk_size_range
 24993 00001EFB 00                      	db	0
 24994                                  
 24995                                  ;stk_size_range p_range <,,,0,512>
 24996                                  stk_size_range:
 24997 00001EFC 01                      	db	1
 24998 00001EFD 01                      	db	1
 24999 00001EFE 01                      	db	1
 25000 00001EFF 00000000                	dd	0
 25001 00001F03 00020000                	dd	512	
 25002                                  
 25003                                  p_stack_count:
 25004 00001F07 0000                    	dw	0	; local variable
 25005                                  p_stack_size:
 25006 00001F09 0000                    	dw	0	; local variable
 25007                                  
 25008                                  ;-----------------------------------------------------------------------
 25009                                  
 25010                                  	; 27/10/2022
 25011                                  
 25012                                  ; multitrack = [ on | off ]
 25013                                  
 25014                                  ;mtrk_parms p_parms <mtrk_parmsx>
 25015                                  mtrk_parms:
 25016 00001F0B [101F]                  	dw	mtrk_parmsx
 25017 00001F0D 01                      	db	1
 25018 00001F0E 01                      	db	1
 25019 00001F0F 3B                      	db	';'
 25020                                  
 25021                                  mtrk_parmsx:
 25022 00001F10 0101[161F]              	dw	101h,mtrk_pos	; min,max = 1 positional
 25023 00001F14 00                      	db	0		; no switches
 25024 00001F15 00                      	db	0		; no keywords
 25025                                  
 25026                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 25027                                  mtrk_pos:
 25028 00001F16 0020                    	dw	2000h
 25029 00001F18 0000                    	dw	0
 25030 00001F1A [FF1D]                  	dw	result_val	
 25031 00001F1C [1B1E]                  	dw	on_off_string
 25032 00001F1E 00                      	db	0
 25033                                  
 25034 00001F1F 00                      p_mtrk:	db	0		; local variable
 25035                                  
 25036                                  ;-----------------------------------------------------------------------
 25037                                  
 25038                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25039                                  	; (SYSINIT:20B2h)
 25040                                  
 25041                                  ; switches=/k
 25042                                  
 25043                                  ;swit_parms p_parms <swit_parmsx>
 25044                                  swit_parms:
 25045 00001F20 [251F]                  	dw	swit_parmsx
 25046 00001F22 01                      	db	1
 25047 00001F23 01                      	db	1
 25048 00001F24 3B                      	db	';'
 25049                                  
 25050                                  swit_parmsx:
 25051 00001F25 0000                    	dw	0		; no positionals
 25052                                  	;db	5               ; # of switches
 25053                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 25054 00001F27 03                      	db	3
 25055 00001F28 [331F]                  	dw	swit_k_ctrl	; /k control
 25056                                  	; 01/01/2023 - Retro DOS v4.2 ; *
 25057 00001F2A [3F1F]                  	dw	swit_n_ctrl ; * ; /n control (for MULTI_CONFIG only)
 25058 00001F2C [4B1F]                  	dw	swit_f_ctrl ; * ; /f control (for MULTI_CONFIG only)
 25059 00001F2E [571F]                  	dw	swit_t_ctrl     ; /t control
 25060 00001F30 [631F]                  	dw	swit_w_ctrl     ; /w control
 25061 00001F32 00                      	db	0		; no keywords
 25062                                  
 25063                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25064                                  swit_k_ctrl:
 25065 00001F33 00000000[FF1D]-         	dw	0,0,result_val,noval
 25065 00001F39 [FE1D]             
 25066 00001F3B 01                      	db	1
 25067 00001F3C 2F4B00                  swit_k:	db	'/K',0
 25068                                  
 25069                                  ; 01/01/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS)
 25070                                  ; (SYSINIT:220Ch) ; *
 25071                                  
 25072                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 25073                                  ;
 25074                                  ;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25075                                  swit_n_ctrl: ; *
 25076 00001F3F 00000000[FF1D]-         	dw	0,0,result_val,noval
 25076 00001F45 [FE1D]             
 25077 00001F47 01                      	db	1
 25078 00001F48 2F4E00                  swit_n: db	'/N',0
 25079                                  
 25080                                  ;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25081                                  swit_f_ctrl: ; *
 25082 00001F4B 00000000[FF1D]-         	dw	0,0,result_val,noval
 25082 00001F51 [FE1D]             
 25083 00001F53 01                      	db	1
 25084 00001F54 2F4600                  swit_f: db 	'/F',0
 25085                                  
 25086                                  	; 27/10/2022
 25087                                  
 25088                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 25089                                  swit_t_ctrl:
 25090 00001F57 00000000[FF1D]-         	dw	0,0,result_val,noval
 25090 00001F5D [FE1D]             
 25091 00001F5F 01                      	db	1
 25092 00001F60 2F5400                  swit_t:	db	'/T',0			   ;				M059
 25093                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 25094                                  swit_w_ctrl:
 25095 00001F63 00000000[FF1D]-         	dw	0,0,result_val,noval
 25095 00001F69 [FE1D]             
 25096 00001F6B 01                      	db	1
 25097 00001F6C 2F5700                  swit_w:	db	'/W',0			   ;				M063
 25098                                  
 25099                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 25100                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 25101                                  ;   in the above table to prevent the parsing code from complaining about them
 25102                                  
 25103 00001F6F 00                      p_swit_k:	db     0	; local variable
 25104 00001F70 00                      p_swit_t:	db     0	; local variable			M059
 25105 00001F71 00                      p_swit_w:	db     0	; local variable			M063
 25106                                  
 25107                                  ;-----------------------------------------------------------------------
 25108                                  
 25109                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25110                                  	; (SYSINIT:20E8h)
 25111                                  
 25112                                  ; DOS = [ high | low ]
 25113                                  
 25114                                  ;dos_parms p_parms  <dos_parmsx>
 25115                                  dos_parms:
 25116 00001F72 [771F]                  	dw	dos_parmsx
 25117 00001F74 01                      	db	1
 25118 00001F75 01                      	db	1
 25119 00001F76 3B                      	db	';'
 25120                                  dos_parmsx:
 25121 00001F77 01                      	db	1		; min parameters
 25122 00001F78 02                      	db	2		; max parameters
 25123 00001F79 [7F1F]                  	dw	dos_pos		; 
 25124 00001F7B [7F1F]                  	dw	dos_pos		; 
 25125 00001F7D 00                      	db	0		; no switches
 25126 00001F7E 00                      	db	0		; no keywords
 25127                                  
 25128                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 25129                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 25130                                  dos_pos:
 25131 00001F7F 00200000[FF1D]-         	dw	2000h,0,result_val,dos_strings
 25131 00001F85 [911F]             
 25132 00001F87 00                      	db	0
 25133 00001F88 00200000[FF1D]-         	dw	2000h,0,result_val,dos_strings
 25133 00001F8E [911F]             
 25134 00001F90 00                      	db	0	
 25135                                  
 25136                                  dos_strings:	;label	byte
 25137 00001F91 03                      	db	3		; signals that there is a string choice
 25138 00001F92 00                      	db	0		; no range definition
 25139 00001F93 00                      	db	0		; no numeric values choice
 25140 00001F94 04                      	db	4		; 4 strings for choice
 25141 00001F95 01                      	db	1		; the 1st string tag
 25142 00001F96 [A11F]                  	dw	hi_string
 25143 00001F98 02                      	db	2		; the 2nd string tag
 25144 00001F99 [A61F]                  	dw	lo_string
 25145 00001F9B 03                      	db	3
 25146 00001F9C [AA1F]                  	dw	umb_string
 25147 00001F9E 04                      	db	4
 25148 00001F9F [AE1F]                  	dw	noumb_string
 25149                                  
 25150 00001FA1 4849474800              hi_string:	db	"HIGH",0
 25151 00001FA6 4C4F5700                lo_string:	db	"LOW",0
 25152 00001FAA 554D4200                umb_string:	db	"UMB",0
 25153 00001FAE 4E4F554D4200            noumb_string:	db	"NOUMB",0
 25154                                  
 25155 00001FB4 00                      p_dos_hi:	db	0	; local variable
 25156                                  				; BUGBUG : I dont know whether PARSER uses
 25157                                  				;          this variable or not
 25158                                  
 25159                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25160                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25161                                  ;%if 0
 25162                                  
 25163                                  ;****************************************************************** RICHID ****
 25164                                  
 25165                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 25166                                  
 25167                                  ; 30/03/2019 - Retro DOS v4.0
 25168                                  ;------------------------------------------------------------------------------
 25169                                  
 25170                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 25171                                  ;
 25172                                  ;   Date:     May 14, 1992
 25173                                  ;
 25174                                  ;******************************************************************************
 25175                                  ;
 25176                                  ;   Modification log:
 25177                                  ;
 25178                                  ;     DATE    WHO      DESCRIPTION
 25179                                  ;   --------  -------  --------------------------------------------------------
 25180                                  ;   05/14/92  t-richj  Original
 25181                                  ;   06/21/92  t-richj  Final revisions before check-in
 25182                                  ;
 25183                                  ;******************************************************************************
 25184                                  ;
 25185                                  ; There are two primary definitions which need to be made, selectively, before
 25186                                  ; this include file should be used.  These are:
 25187                                  ;    HV_Extern - If this has been defined, variables for this module will be
 25188                                  ;                declared as external.  Otherwise, variables will be declared
 25189                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 25190                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 25191                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 25192                                  ;                (as only one module, sysconf.asm, includes this file).
 25193                                  ;    HV_LoadHigh - This should be defined when this module is going into
 25194                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 25195                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 25196                                  ;
 25197                                  ;******************************************************************************
 25198                                  
 25199                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 25200                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 25201                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 25202                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 25203                                  ; space problem (it's just such a nice round number, eh?).
 25204                                  
 25205                                  MAXUMB	equ	16
 25206                                  
 25207                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 25208                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 25209                                  
 25210                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 25211                                  SystemPSPOwner	equ	8
 25212                                  ;JapanPSPOwner	equ	9
 25213                                  
 25214                                  ; for LoadHigh and DeviceHigh:
 25215                                  ;
 25216                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 25217                                  ;	          UnHideUMBs().
 25218                                  ;	fUmbTiny - Is set to 1 iff the user has specified /S on the command-
 25219                                  ;	           line.
 25220                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 25221                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 25222                                  ;	          given a command-line like "/L:3,500;4"
 25223                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 25224                                  ;	          matching its index number was specified on the command-line;
 25225                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 25226                                  ;	          will be set to 1.  All others will be set to 0.
 25227                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 25228                                  ;	          specified by the user for a UMB (in the above example, all
 25229                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 25230                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 25231                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 25232                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 25233                                  ;	           for details).
 25234                                  
 25235 00001FB5 00                      fInHigh:  db	0
 25236 00001FB6 00                      fUmbTiny: db	0
 25237 00001FB7 0000                    SegLoad:  dw	0
 25238 00001FB9 00                      UmbLoad:  db	0
 25239 00001FBA 00<rep 10h>             UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 25240 00001FCA 0000<rep 10h>           UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 25241 00001FEA 00                      fm_umb:   db	0
 25242 00001FEB 00                      fm_strat: db	0
 25243 00001FEC 00                      fm_argc:  db	0	
 25244                                  
 25245                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 25246                                  ; UmbLoad is set to the UMB number given.
 25247                                  
 25248                                  UNSPECIFIED	equ	-1
 25249                                  
 25250                                  ;%endif ; 27/10/2022
 25251                                  
 25252                                  ;****************************************************************** RICHID ****
 25253                                  
 25254                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 25255                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 25256                                  
 25257                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25258                                  ; (SYSINIT:212Bh)	
 25259                                  
 25260                                  		;public	DevEntry
 25261                                  
 25262 00001FED 0000                    DevSize:	dw	0	; size of the device driver being loaded(paras)
 25263 00001FEF 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 25264 00001FF1 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 25265 00001FF3 00000000                DevEntry:	dd	0	; Entry point to the device driver
 25266 00001FF7 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 25267                                  ; 30/12/2022
 25268                                  ; 27/10/2022 
 25269 00001FFB 00                      ConvLoad:	db	0	; Use conventional (dos 5 -style) InitDevLoad?
 25270                                  ;
 25271 00001FFC 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 25272 00001FFD 0000                    DevUMBAddr:	dw	0	; cuurent UMB used fro loading devices (paras)
 25273 00001FFF 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 25274 00002001 0000                    DevUMBFree:	dw	0	; Start of free are in the current UMB (paras)
 25275                                  ;
 25276 00002003 00000000                DevXMSAddr:	dd	0
 25277                                  ;
 25278 00002007 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 25279 00002009 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 25280                                  ;
 25281 0000200B 00                      DeviceHi:	db	0	; Flag indicating whther the current device
 25282                                  				;  is being loaded into UMB
 25283 0000200C 0000                    DevSizeOption:	dw	0	; SIZE= option
 25284                                  ;
 25285 0000200E 00                      Int12Lied:	db	0	; did we trap int 12 ?
 25286 0000200F 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12 ram)
 25287 00002011 50524F544D414E24        ThreeComName:	db	'PROTMAN$'	; 3Com Device name
 25288                                  ;
 25289 00002019 00                      FirstUMBLinked:	db	0
 25290 0000201A 0000                    DevDOSData:	dw	0	; segment of DOS Data
 25291 0000201C 00000000                DevCmdLine:	dd	0	; Current Command line
 25292 00002020 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 25293                                  				; to use the file name in the command line
 25294                                  ;
 25295                                  ;	ifdef	dblspace_hooks
 25296                                  ;MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 25297                                  ;	endif
 25298                                  
 25299                                  ; ===========================================================================
 25300                                  
 25301                                  ; 31/03/2019 - Retro DOS v4.0
 25302                                  
 25303                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25304                                  ; (SYSINIT:215Eh)
 25305                                  
 25306                                  ;----------------------------------------------------------------------------
 25307                                  ;
 25308                                  ; procedure : doconf
 25309                                  ;
 25310                                  ;             Config file is parsed initially with this routine. For the
 25311                                  ;             Subsequent passes 'multi_pass' entry is used .
 25312                                  ;
 25313                                  ;----------------------------------------------------------------------------
 25314                                  
 25315                                  	; 27/10/2022
 25316                                  doconf:
 25317 00002021 0E                      	push	cs
 25318 00002022 1F                      	pop	ds
 25319                                  
 25320 00002023 B80037                  	mov	ax,3700h
 25321                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 25322 00002026 CD21                    	int	21h
 25323 00002028 8816[9247]              	mov	[command_line+1],dl	; set in default command line
 25324                                  
 25325                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21  IO.SYS)
 25326                                  ; 27/10/2022
 25327                                  ;;ifdef	MULTI_CONFIG
 25328                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 25329 0000202C 8816[9047]              	mov	[def_swchr],dl ; 31/03/2019 
 25330                                  ;;endif	;MULTI_CONFIG
 25331                                  
 25332 00002030 BA[A746]                	mov	dx,config ;'\CONFIG.SYS' ;now pointing to file description
 25333 00002033 B8003D                  	mov	ax,3D00h
 25334                                  	;mov	ax,OPEN<<8		;open file "config.sys"
 25335 00002036 F9                      	stc				;in case of int 24
 25336 00002037 CD21                    	int	21h			;function request
 25337 00002039 7309                    	jnc	short noprob		; brif opened okay
 25338                                  
 25339                                  ; 31/12/2022
 25340                                  ; 27/10/2022
 25341                                  ;;ifdef	MULTI_CONFIG
 25342 0000203B E85C19                  	call	kbd_read		; we still want to give the guy
 25343                                  ;					; a chance to select clean boot!
 25344                                  ;;endif					; (ie, no autoexec.bat processing)
 25345 0000203E C606[CB02]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 25346 00002043 C3                      	retn
 25347                                  noprob: 				;get file size (note < 64k!!)
 25348 00002044 89C3                    	mov	bx,ax  ; File handle
 25349 00002046 31C9                    	xor	cx,cx
 25350 00002048 31D2                    	xor	dx,dx
 25351                                  	;mov	ax,4202h
 25352 0000204A B80242                  	mov	ax,(LSEEK<<8)|2
 25353 0000204D CD21                    	int	21h
 25354 0000204F A3[5403]                	mov	[count],ax
 25355                                  
 25356 00002052 31D2                    	xor	dx,dx
 25357                                  	;mov	ax,4200h
 25358 00002054 B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 25359 00002057 CD21                    	int	21h
 25360                                  
 25361                                  	; 31/12/2022 - Retro DOS v4.2 
 25362 00002059 8B16[A302]              	mov	dx,[ALLOCLIM]		;use current alloclim value
 25363                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25364                                  	;mov	dx,[top_of_cdss] 
 25365                                  
 25366 0000205D A1[5403]                	mov	ax,[count]
 25367 00002060 A3[CE02]                	mov	[config_size],ax	;save the size of config.sys file.
 25368 00002063 E803F1                  	call	ParaRound
 25369 00002066 29C2                    	sub	dx,ax
 25370                                  
 25371                                  ; 31/12/2022
 25372                                  ; 27/10/2022
 25373                                  ;ifdef	MULTI_CONFIG
 25374                                  ;
 25375                                  ;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 25376                                  ;  CONFIG.SYS image, and later for building the initial environment) need
 25377                                  ;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 25378                                  ;  we (may) add a variable to the environment that does not explicity appear
 25379                                  ;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 25380                                  ;  The default setting for CONFIG cannot result in more than 1 paragraph
 25381                                  ;  of extra space, so here we account for it (the worst case of course is
 25382                                  ;  when CONFIG.SYS is some very small size, like 0 -JTP)
 25383                                  ;
 25384 00002068 4A                      	dec	dx                      ;reserve 1 additional paragraph
 25385 00002069 8916[DD14]              	mov	[config_wrkseg],dx      ;this is the segment to be used for
 25386 0000206D 29C2                    	sub	dx,ax                   ;rebuilding the config.sys memory image
 25387                                  ;;endif	;MULTI_CONFIG
 25388                                  
 25389 0000206F 83EA11                  	sub	dx,11h			;room for header
 25390                                  	
 25391                                  	; 31/12/2022
 25392 00002072 8916[A302]              	mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 25393 00002076 8916[A102]              	mov	[CONFBOT],dx
 25394                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25395                                  	;mov	[top_of_cdss],dx
 25396                                  	;call    TempCDS 
 25397                                  	
 25398                                  	; 31/12/2022
 25399                                  	; 11/12/2022
 25400                                  	; ds <> cs 
 25401                                  	;mov	dx,[cs:top_of_cdss]
 25402                                   
 25403 0000207A 8EDA                    	mov	ds,dx
 25404 0000207C 8EC2                    	mov	es,dx
 25405                                  
 25406 0000207E 31D2                    	xor	dx,dx
 25407 00002080 2E8B0E[5403]            	mov	cx,[cs:count]
 25408 00002085 B43F                    	mov	ah,3Fh
 25409                                  	;mov	ah,READ  ; 3Fh
 25410 00002087 F9                      	stc				;in case of int 24
 25411 00002088 CD21                    	int	21h			;function request
 25412 0000208A 9C                      	pushf
 25413                                  
 25414                                  ; find the eof mark in the file. if present,then trim length.
 25415                                  
 25416 0000208B 50                      	push	ax
 25417 0000208C 57                      	push	di
 25418 0000208D 51                      	push	cx
 25419 0000208E B01A                    	mov	al,1Ah			; eof mark
 25420 00002090 89D7                    	mov	di,dx			; point to buffer
 25421 00002092 E305                    	jcxz	puteol			; no chars
 25422 00002094 F2AE                    	repnz	scasb			; find end
 25423 00002096 7501                    	jnz	short puteol		; none found and count exhausted
 25424                                  
 25425                                  ; we found a 1a. back up
 25426                                  
 25427 00002098 4F                      	dec	di			; backup past 1Ah
 25428                                  
 25429                                  ;  just for the halibut, stick in an extra eol
 25430                                  
 25431                                  puteol:
 25432 00002099 B00D                    	mov	al,cr ; 0Dh
 25433 0000209B AA                      	stosb
 25434 0000209C B00A                    	mov	al,lf  ;0Ah
 25435 0000209E AA                      	stosb
 25436 0000209F 29D7                    	sub	di,dx			; difference moved
 25437                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25438                                  	;mov	[cs:count],di		; new count
 25439                                  
 25440                                  	; 11/12/2022	
 25441                                  	; 31/03/2019 - Retro DOS v4.0
 25442 000020A1 0E                      	push	cs
 25443 000020A2 1F                      	pop	ds
 25444                                  
 25445 000020A3 893E[5403]              	mov	[count],di		; new count
 25446                                  
 25447 000020A7 59                      	pop	cx
 25448 000020A8 5F                      	pop	di
 25449 000020A9 58                      	pop	ax
 25450                                  
 25451                                  	; 11/12/2022
 25452                                  	; 27/10/2022
 25453                                  	;push	cs
 25454                                  	;pop	ds
 25455                                  
 25456 000020AA 50                      	push	ax
 25457                                  	;mov	ah,CLOSE
 25458 000020AB B43E                    	mov	ah,3Eh
 25459 000020AD CD21                    	int	21h
 25460 000020AF 58                      	pop	ax
 25461 000020B0 9D                      	popf
 25462 000020B1 7204                    	jc	short conferr 		;if not we've got a problem
 25463 000020B3 39C1                    	cmp	cx,ax
 25464 000020B5 742D                    	jz	short getcom		;couldn't read the file
 25465                                  conferr:
 25466 000020B7 BA[A746]                	mov	dx,config		;want to print config error
 25467 000020BA E84025                  	call	badfil
 25468                                  ;endconv:	; 01/01/2023
 25469 000020BD C3                      	retn
 25470                                  
 25471                                  ;----------------------------------------------------------------------------
 25472                                  ;
 25473                                  ; entry : multi_pass
 25474                                  ;
 25475                                  ;             called to execute device=,install= commands
 25476                                  ;
 25477                                  ;----------------------------------------------------------------------------
 25478                                  
 25479                                  	; 27/10/2022
 25480                                  multi_pass:
 25481 000020BE 0E                      	push	cs
 25482 000020BF 1F                      	pop	ds
 25483                                  
 25484 000020C0 803E[CB02]0A            	cmp	byte [multi_pass_id],10
 25485                                  ;jae_endconv:
 25486 000020C5 731C                    	jae	short endconv 		; do nothing. just return.
 25487                                  
 25488                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25489 000020C7 FF36[A102]              	push	word [CONFBOT]
 25490                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25491                                  	;push	word [top_of_cdss]
 25492 000020CB 07                      	pop	es			; es -> confbot
 25493                                  
 25494 000020CC 8B36[5603]              	mov	si,[org_count]
 25495 000020D0 8936[5403]              	mov	[count],si		; set count
 25496 000020D4 31F6                    	xor	si,si ; 0
 25497 000020D6 8936[5803]                      mov     [chrptr],si		; reset chrptr
 25498 000020DA 8936[AD02]                      mov     [linecount],si		; reset linecount
 25499                                  
 25500 000020DE E8DC08                  	call	getchr
 25501 000020E1 EB07                    	jmp	short conflp
 25502                                  
 25503                                  	; 01/01/2023
 25504                                  endconv:
 25505 000020E3 C3                      	retn	
 25506                                  
 25507                                  getcom:
 25508                                  	; 03/01/2023
 25509                                  	; ds = cs
 25510 000020E4 E87116                          call    organize                ; organize the file
 25511 000020E7 E8D308                  	call	getchr
 25512                                  conflp: 
 25513 000020EA 72F7                    	jc	short endconv
 25514                                  
 25515 000020EC FF06[AD02]                      inc     word [linecount]	; increase linecount
 25516                                  
 25517 000020F0 C606[E114]00            	mov	byte [multdeviceflag],0	; reset multdeviceflag.
 25518 000020F5 C606[E414]00            	mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 25519 000020FA 3C0A                    	cmp	al,lf			; linefeed?
 25520 000020FC 7449                    	je	short blank_line	;  then ignore this line.
 25521                                  
 25522                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25523                                  ; (SYSINIT:23CCh)
 25524                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25525                                  ;%if 0
 25526                                  
 25527                                  ;ifdef	MULTI_CONFIG
 25528                                  
 25529                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 25530                                  ;   number immediately following it....
 25531                                  
 25532 000020FE A2[DF14]                        mov     [config_cmd],al         ; save original command code
 25533                                  	;and	al,NOT CONFIG_OPTION_QUERY
 25534 00002101 247F                    	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 25535 00002103 803E[E014]00                    cmp     byte [config_multi],0	; is this a multi-config config.sys?
 25536 00002108 7427                            je      short not_final		; no, line number is not embedded
 25537                                  
 25538 0000210A 50                              push    ax                      ;
 25539 0000210B E8AF08                          call    getchr                  ; ignore end-of-image errors,
 25540 0000210E 88C4                            mov     ah,al                   ; because if there's an error
 25541 00002110 E8AA08                          call    getchr                  ; fetching the line number that's
 25542 00002113 86C4                            xchg    al,ah                   ; supposed to be there, the next
 25543 00002115 A3[AD02]                        mov     [linecount],ax          ; getchr call will get the same error
 25544 00002118 58                              pop     ax
 25545                                  ;
 25546                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 25547                                  ;   which to obtain its original program name, it grovels through all of
 25548                                  ;   memory to find the filename that was used to exec it; it wants to find
 25549                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 25550                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 25551                                  ;   immediately before the filename, but since we are now storing line # info
 25552                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 25553                                  ;   spot.
 25554                                  ;
 25555                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 25556                                  ;   over the line number info, since we no longer need that info anyway. This
 25557                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 25558                                  ;   retrieved.
 25559                                  ;
 25560 00002119 803E[CB02]02                    cmp	byte [multi_pass_id],2	; final pass?
 25561 0000211E 7211                            jb	short not_final		; no
 25562                                          ;test	word [install_flag],have_install_cmd
 25563 00002120 F606[CC02]01            	test	byte [install_flag],have_install_cmd ; 1
 25564 00002125 7407                            jz	short final		; no install cmds, so yes it is
 25565 00002127 803E[CB02]03                    cmp	byte [multi_pass_id],3	; final pass?
 25566 0000212C 7203                            jb	short not_final		; no
 25567                                  final:                                  ;
 25568 0000212E 268804                  	mov	[es:si],al		; save backward-compatible command code
 25569                                  not_final:                              ;
 25570                                  ;endif
 25571                                  
 25572                                  ; 31/12/2022
 25573                                  ;%endif ; 27/10/2022
 25574                                  
 25575 00002131 88C4                    	mov	ah,al
 25576 00002133 E88708                  	call	getchr
 25577 00002136 7314                    	jnc	short tryi
 25578                                  
 25579 00002138 803E[CB02]02            	cmp	byte [multi_pass_id],2
 25580                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 25581                                  	; 27/10/2022
 25582 0000213D 73A4                    	jnb	short endconv	
 25583 0000213F E94708                  	jmp	badop
 25584                                  	
 25585                                  coff:	
 25586                                  	; 11/12/2022
 25587                                  	; ds = cs
 25588                                  	;push	cs
 25589                                  	;pop	ds
 25590 00002142 E8F021                  	call	newline
 25591 00002145 EBA3                    	jmp	short conflp	; 13/05/2019
 25592                                  
 25593                                  blank_line:
 25594 00002147 E87308                  	call	getchr
 25595 0000214A EB9E                    	jmp	short conflp
 25596                                  
 25597                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25598                                  ; 11/12/2022
 25599                                  ; (there is not a jump or call to here from anywhere!)
 25600                                  ;coff_p:
 25601                                  	;push	cs
 25602                                  	;pop	ds
 25603                                  
 25604                                  ;to handle install= commands,we are going to use multi-pass.
 25605                                  ;the first pass handles the other commands and only set install_flag when
 25606                                  ;it finds any install command. the second pass will only handle the
 25607                                  ;install= command.
 25608                                  
 25609                                  ;------------------------------------------------------------------------------
 25610                                  ;install command
 25611                                  ;------------------------------------------------------------------------------
 25612                                  
 25613                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25614                                  	; (SYSINIT:2250h)
 25615                                  tryi:
 25616 0000214C 803E[CB02]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 25617 00002151 7503                    	jne	short not_init_pass
 25618 00002153 E97F01                  	jmp	multi_try_doshi
 25619                                  not_init_pass:
 25620 00002156 803E[CB02]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 25621                                          ; 11/12/2022
 25622                                  	;je	short multi_pass_coff2	; now it is NOPs
 25623 0000215B 74E5                    	je	short coff
 25624                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25625                                  	;je	short multi_pass_coff	
 25626                                  					; This pass can be made use of if
 25627                                  					; we want do some config.sys process
 25628                                  					; after device drivers are loaded
 25629                                  					; and before install= commands
 25630                                  					; are processed
 25631                                  
 25632 0000215D 803E[CB02]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 25633 00002162 741D                    	je	short multi_try_i
 25634 00002164 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 25635                                  	; 11/12/2022
 25636                                  	;je	short multi_pass_coff2
 25637 00002167 74D9                    	je	short coff
 25638                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25639                                  	;je	short multi_pass_coff	
 25640                                  
 25641                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 25642                                  ;       but don't process them now.        
 25643                                          
 25644 00002169 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 25645                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25646 0000216C 7507                    	jne	short precheck_installhigh ; the first pass is for normal operation.
 25647                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25648                                  	;jne	short tryb	
 25649                                  	
 25650                                  	;or	word [install_flag],have_install_cmd ; set the flag
 25651 0000216E 800E[CC02]01            	or	byte [install_flag],have_install_cmd ; 1
 25652                                  multi_pass_coff2:
 25653 00002173 EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 25654                                  
 25655                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25656                                  ; (SYSINIT:2448h)
 25657                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25658                                  ;%if 0
 25659                                  precheck_installhigh:
 25660 00002175 80FC57                  	cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 25661 00002178 756B                    	jne     short tryb		; carry on with normal processing
 25662                                  	;or	word [install_flag],have_install_cmd
 25663 0000217A 800E[CC02]01            	or	byte [install_flag],have_install_cmd ; 1
 25664 0000217F EBC1                    	jmp	short coff
 25665                                  ;%endif ; 27/10/2022
 25666                                  
 25667                                  multi_try_i:
 25668 00002181 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I' ; install= command?
 25669                                  	; 31/12/2022 - Retro DOS v4.2
 25670 00002184 750A                    	jne	short multi_try_n	; no, check for installhigh
 25671                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25672                                  	;jne	short multi_pass_filter
 25673                                  
 25674                                  ; 31/12/2022
 25675                                  ;%if 1 
 25676                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25677                                  ;%if 0
 25678                                  ;ifdef	MULTI_CONFIG
 25679 00002186 E82120                  	call	query_user              ; query the user if config_cmd
 25680 00002189 7241                    	jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 25681                                  ;endif
 25682                                  ;%endif ; 27/10/2022
 25683                                  
 25684 0000218B E85AEF                  	call	do_install_exec 	;install it.
 25685 0000218E EBB2                    	jmp	short coff		;to handle next install= command.
 25686                                  
 25687                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25688                                  ; (SYSINIT:2463h)
 25689                                  ;%if 1
 25690                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25691                                  ;%if 0
 25692                                  
 25693                                  multi_try_n:
 25694 00002190 80FC57                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 25695 00002193 7537                            jne	short multi_pass_filter	; no. ignore this.
 25696                                  ;ifdef	MULTI_CONFIG
 25697 00002195 E81220                          call    query_user              ; query the user if config_cmd
 25698 00002198 7232                            jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 25699                                  ;endif
 25700                                  
 25701                                  ;       The memory environment is in its normal DOS state, so do
 25702                                  ;       the standard calls to set the alloc strategy for loading high
 25703                                  
 25704 0000219A B80058                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 25705 0000219D CD21                    	int	21h			;get alloc strategy
 25706 0000219F 89C3                    	mov	bx,ax
 25707 000021A1 53                              push    bx                      ; save for the return
 25708                                  
 25709 000021A2 81CB8000                        or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 25710 000021A6 B80158                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 25711 000021A9 CD21                    	int	21h			;set alloc strategy
 25712                                  
 25713 000021AB B80258                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 25714 000021AE CD21                            int     21h                     ; get link state
 25715 000021B0 30E4                            xor     ah,ah                   ; clear top byte
 25716 000021B2 50                              push    ax                      ; save for return
 25717                                  
 25718 000021B3 B80358                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 25719 000021B6 BB0100                  	mov	bx,1
 25720 000021B9 CD21                    	int	21h			;link in UMBs
 25721                                  
 25722 000021BB E82AEF                  	call	do_install_exec 	;install it.
 25723                                  
 25724 000021BE B80358                          mov     ax,(ALLOCOPER<<8)|3
 25725 000021C1 5B                              pop     bx                      ; recover original link state
 25726 000021C2 CD21                            int     21h
 25727 000021C4 5B                              pop     bx                      ; recover original alloc strategy
 25728 000021C5 B80158                          mov     ax,(ALLOCOPER<<8)|1
 25729 000021C8 CD21                            int     21h
 25730                                  
 25731                                  	;jmp	short coff		;to handle next install= command.
 25732                                  	; 01/01/2023
 25733 000021CA EBA7                    	jmp	short multi_pass_coff2
 25734                                  
 25735                                  ;%endif ; 27/10/2022
 25736                                  
 25737                                  multi_pass_filter:
 25738 000021CC 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 25739 000021CF 740A                    	je	short multi_pass_adjust
 25740 000021D1 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 25741 000021D4 7405                    	je	short multi_pass_adjust
 25742 000021D6 80FC30                          cmp     ah,CONFIG_REM  ; '0' 	; rem?
 25743 000021D9 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 25744                                  
 25745                                  multi_pass_adjust:			; these commands need to
 25746 000021DB FF0E[5803]              	dec	word [chrptr]		;  adjust chrptr,count
 25747 000021DF FF06[5403]              	inc	word [count]		;  for newline proc.
 25748                                  
 25749                                  multi_pass_coff:
 25750                                  	; 11/12/2022
 25751                                  	;jmp	short coff		; to handle next install= commands.
 25752                                  	; 01/01/2023
 25753 000021E3 EB8E                    	jmp	short multi_pass_coff2
 25754                                  
 25755                                  ;------------------------------------------------------------------------------
 25756                                  ; buffer command
 25757                                  ;------------------------------------------------------------------------------
 25758                                  
 25759                                  ;******************************************************************************
 25760                                  ;									      *
 25761                                  ; function: parse the parameters of buffers= command.			      *
 25762                                  ;									      *
 25763                                  ; input :								      *
 25764                                  ;	es:si -> parameters in command line.				      *
 25765                                  ; output:								      *
 25766                                  ;	buffers set							      *
 25767                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 25768                                  ;	h_buffers set if secondary buffer cache specified.		      *
 25769                                  ;									      *
 25770                                  ; subroutines to be called:						      *
 25771                                  ;	sysinit_parse							      *
 25772                                  ; logic:								      *
 25773                                  ; {									      *
 25774                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 25775                                  ;	set dx,cx to 0; 						      *
 25776                                  ;	reset buffer_slash_x;						      *
 25777                                  ;	while (end of command line)					      *
 25778                                  ;	{ sysinit_parse;						      *
 25779                                  ;	  if (no error) then						      *
 25780                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 25781                                  ;		    buffer_slash_x = 1					      *
 25782                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 25783                                  ;			  buffers = result_val._$P_picked_val;		      *
 25784                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 25785                                  ;	  else	{show error message;error exit} 			      *
 25786                                  ;	};								      *
 25787                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 25788                                  ; };									      *
 25789                                  ;									      *
 25790                                  ;******************************************************************************
 25791                                  
 25792                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25793                                  	; (SYSINIT:229Ch)
 25794                                  tryb:
 25795 000021E5 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 25796 000021E8 755C                    	jne	short tryc
 25797                                  
 25798                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25799                                  ; (SYSINIT:24BFh)
 25800                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25801                                  ;%if 0
 25802                                  ;ifdef	MULTI_CONFIG
 25803 000021EA E8BD1F                  	call	query_user		; query the user if config_cmd
 25804 000021ED 7257                    	jc	short tryc		; has the CONFIG_OPTION_QUERY bit set
 25805                                  ;endif
 25806                                  ;%endif ; 27/10/2022
 25807                                  
 25808                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25809                                  	; 18/12/2022
 25810 000021EF 31C9                    	xor	cx,cx
 25811                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 25812 000021F1 880E[FD1D]              	mov	[p_buffer_slash_x],cl ; 0
 25813                                  
 25814 000021F5 BF[B61D]                	mov	di,buf_parms
 25815                                  	;xor	cx,cx	; 18/12/2022
 25816                                  	; 03/01/2023
 25817                                  	;mov	dx,cx
 25818                                  do7:
 25819 000021F8 E86B07                  	call	sysinit_parse
 25820 000021FB 7303                    	jnc	short if7		; parse error,
 25821                                  	;call	badparm_p		;  and show messages and end the search loop.
 25822                                  	;;jmp	short sr7
 25823                                  	; 31/12/2022
 25824                                  ;sr7:
 25825                                  	;jmp	coff
 25826                                  	; 03/01/2023
 25827 000021FD E9AD06                  	jmp	badparm_p_coff
 25828                                  if7:
 25829 00002200 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 25830 00002203 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 25831                                  	;cmp	word [result_val_swoff],switch_x
 25832 00002205 813E[011E][F61D]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 25833                                  	;jne	short if11
 25834                                  	; 31/12/2022
 25835 0000220B 74EB                    	je	short do7 ;je short en11
 25836                                  
 25837                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 25838                                  	;jmp	short en11 ; 31/12/2022
 25839                                  if11:
 25840                                  	;mov	ax,[rv_dword]
 25841 0000220D A1[031E]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 25842 00002210 83F901                  	cmp	cx,1
 25843 00002213 7505                    	jne	short if13
 25844                                  
 25845 00002215 A3[F91D]                	mov	[p_buffers],ax
 25846                                  	;jmp	short en11
 25847                                  	; 31/12/2022
 25848 00002218 EBDE                    	jmp	short do7
 25849                                  if13:
 25850 0000221A A3[FB1D]                	mov	[p_h_buffers],ax
 25851                                  en11:
 25852 0000221D EBD9                    	jmp	short do7
 25853                                  en7:
 25854 0000221F 833E[F91D]63            	cmp	word [p_buffers],99
 25855 00002224 760B                    	jbe	short if18
 25856                                  
 25857                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 25858                                  ;	jne	short if18
 25859                                  
 25860 00002226 E86C07                  	call	badparm_p
 25861 00002229 C706[FB1D]0000          	mov	word [p_h_buffers],0
 25862 0000222F EB12                    	jmp	short sr7
 25863                                  if18:
 25864 00002231 A1[F91D]                	mov	ax,[p_buffers]	; we don't have any problem.
 25865 00002234 A3[9702]                	mov	[buffers],ax	; now,let's set it really.
 25866                                  
 25867 00002237 A1[FB1D]                	mov	ax,[p_h_buffers]
 25868 0000223A A3[9902]                	mov	[h_buffers],ax
 25869                                  
 25870                                  ;	mov	al,[p_buffer_slash_x]	; M016
 25871                                  ;	mov	[buffer_slash_x],al
 25872                                  
 25873 0000223D A1[AD02]                	mov	ax,[linecount]
 25874 00002240 A3[B702]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 25875                                  	; 31/12/2022
 25876                                  	;jmp	short sr7
 25877                                  	; 03/01/2023
 25878                                  sr7:
 25879 00002243 E9FCFE                  	jmp	coff
 25880                                  
 25881                                  ;------------------------------------------------------------------------------
 25882                                  ; break command
 25883                                  ;------------------------------------------------------------------------------
 25884                                  
 25885                                  ;****************************************************************************
 25886                                  ;									    *
 25887                                  ; function: parse the parameters of break = command.			    *
 25888                                  ;									    *
 25889                                  ; input :								    *
 25890                                  ;	es:si -> parameters in command line.				    *
 25891                                  ; output:								    *
 25892                                  ;	turn the control-c check on or off.				    *
 25893                                  ;									    *
 25894                                  ; subroutines to be called:						    *
 25895                                  ;	sysinit_parse							    *
 25896                                  ; logic:								    *
 25897                                  ; {									    *
 25898                                  ;	set di to brk_parms;						    *
 25899                                  ;	set dx,cx to 0; 						    *
 25900                                  ;	while (end of command line)					    *
 25901                                  ;	{ sysinit_parse;						    *
 25902                                  ;	  if (no error) then						    *
 25903                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 25904                                  ;		   set p_ctrl_break,on;					    *
 25905                                  ;	       else					  /*off 	 */ *
 25906                                  ;		   set p_ctrl_break,off;				    *
 25907                                  ;	  else {show message;error_exit};				    *
 25908                                  ;	};								    *
 25909                                  ;	if (no error) then						    *
 25910                                  ;	   dos function call to set ctrl_break check according to	    *
 25911                                  ; };									    *
 25912                                  ;									    *
 25913                                  ;****************************************************************************
 25914                                  
 25915                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25916                                  	; (SYSINIT:22FFh)
 25917                                  tryc:
 25918 00002246 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 25919 00002249 7539                    	jne	short trym
 25920                                  
 25921                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25922                                  ; (SYSINIT:2527h)
 25923                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25924                                  ;%if 0
 25925                                  ;ifdef	MULTI_CONFIG
 25926 0000224B E85C1F                  	call	query_user              ; query the user if config_cmd
 25927 0000224E 7234                    	jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 25928                                  ;endif
 25929                                  ;%endif ; 27/10/2022
 25930                                  
 25931 00002250 BF[071E]                	mov	di,brk_parms
 25932 00002253 31C9                    	xor	cx,cx
 25933                                  	; 03/01/2023
 25934                                  	;mov	dx,cx
 25935                                  do22:
 25936 00002255 E80E07                  	call	sysinit_parse
 25937 00002258 7303                    	jnc	short if22		; parse error
 25938                                  	;call	badparm_p		;  show message and end the search loop.
 25939                                  	;;jmp	short sr22
 25940                                  	; 31/12/2022
 25941                                  ;sr22:
 25942                                  	;jmp	coff
 25943                                  	; 03/01/2023
 25944 0000225A E95006                  	jmp	badparm_p_coff
 25945                                  if22:
 25946 0000225D 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 25947 00002260 7415                    	je	short en22		; then end the $endloop
 25948                                  
 25949                                  	;cmp	byte [result_val_itag],1
 25950 00002262 803E[001E]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 25951 00002267 7507                    	jne	short if26
 25952                                  
 25953 00002269 C606[2C1E]01            	mov	byte [p_ctrl_break],1	; turn it on
 25954                                  	;jmp	short en26
 25955                                  	; 31/12/2022
 25956 0000226E EBE5                    	jmp	short do22
 25957                                  if26:
 25958 00002270 C606[2C1E]00            	mov	byte [p_ctrl_break],0	; turn it off
 25959                                  en26:
 25960 00002275 EBDE                    	jmp	short do22		; we actually set the ctrl break
 25961                                  en22:
 25962 00002277 B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 25963 00002279 B001                    	mov	al,1
 25964 0000227B 8A16[2C1E]              	mov	dl,[p_ctrl_break]
 25965 0000227F CD21                    	int	21h
 25966                                  	; 31/12/2022
 25967                                  	;jmp	short sr22
 25968                                  	; 03/01/2023
 25969                                  sr22:
 25970 00002281 E9BEFE                  	jmp	coff
 25971                                  
 25972                                  ;------------------------------------------------------------------------------
 25973                                  ; multitrack command
 25974                                  ;------------------------------------------------------------------------------
 25975                                  
 25976                                  ;******************************************************************************
 25977                                  ;									      *
 25978                                  ; function: parse the parameters of multitrack= command.		      *
 25979                                  ;									      *
 25980                                  ; input :								      *
 25981                                  ;	es:si -> parameters in command line.				      *
 25982                                  ; output:								      *
 25983                                  ;	turn multrk_flag on or off.					      *
 25984                                  ;									      *
 25985                                  ; subroutines to be called:						      *
 25986                                  ;	sysinit_parse							      *
 25987                                  ; logic:								      *
 25988                                  ; {									      *
 25989                                  ;	set di to brk_parms;						      *
 25990                                  ;	set dx,cx to 0; 						      *
 25991                                  ;	while (end of command line)					      *
 25992                                  ;	{ sysinit_parse;						      *
 25993                                  ;	  if (no error) then						      *
 25994                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 25995                                  ;		   set p_mtrk,on;					      *
 25996                                  ;	       else					  /*off 	 */   *
 25997                                  ;		   set p_mtrk,off;					      *
 25998                                  ;	  else {show message;error_exit};				      *
 25999                                  ;	};								      *
 26000                                  ;	if (no error) then						      *
 26001                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 26002                                  ;									      *
 26003                                  ; };									      *
 26004                                  ;									      *
 26005                                  ;******************************************************************************
 26006                                  
 26007                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26008                                  trym:
 26009 00002284 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 26010 00002287 7573                    	jne	short tryu
 26011                                  
 26012                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26013                                  ; (SYSINIT:2569h)
 26014                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26015                                  ;%if 0
 26016                                  ;ifdef	MULTI_CONFIG
 26017 00002289 E81E1F                  	call	query_user      ; query the user if config_cmd
 26018 0000228C 726E                    	jc	short tryu	; has the CONFIG_OPTION_QUERY bit set
 26019                                  ;endif
 26020                                  ;%endif	; 27/10/2022
 26021                                  
 26022 0000228E BF[0B1F]                	mov	di,mtrk_parms
 26023 00002291 31C9                    	xor	cx,cx
 26024                                  	; 03/01/2023
 26025                                  	;mov	dx,cx
 26026                                  do31:
 26027 00002293 E8D006                  	call	sysinit_parse
 26028 00002296 7303                    	jnc	short if31	; parse error
 26029                                  	;call	badparm_p	;  show message and end the search loop.
 26030                                  	;;jmp	short sr31
 26031                                  	; 31/12/2022
 26032                                  ;sr31:
 26033                                  	;jmp	coff
 26034                                  	; 03/01/2023
 26035 00002298 E91206                  	jmp	badparm_p_coff
 26036                                  if31:
 26037 0000229B 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 26038 0000229E 7415                    	je	short en31	; then end the $endloop
 26039                                  
 26040                                  	;cmp	byte [result_val_itag],1
 26041 000022A0 803E[001E]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 26042 000022A5 7507                    	jne	short if35
 26043                                  
 26044 000022A7 C606[1F1F]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 26045                                  	;jmp	short en35
 26046                                  	; 31/12/2022
 26047 000022AC EBE5                    	jmp	short do31
 26048                                  if35:
 26049 000022AE C606[1F1F]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 26050                                  en35:
 26051 000022B3 EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 26052                                  en31:
 26053 000022B5 1E                      	push	ds
 26054                                  	;;mov	ax,Bios_Data ; 70h
 26055                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 26056                                  	; 21/10/2022
 26057 000022B6 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 26058 000022B9 8ED8                    	mov	ds,ax
 26059                                  
 26060 000022BB 2E803E[1F1F]00          	cmp	byte [cs:p_mtrk],0
 26061 000022C1 7508                    	jne	short if39
 26062                                  
 26063 000022C3 C706[2F05]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 26064 000022C9 EB06                    	jmp	short en39
 26065                                  if39:
 26066 000022CB C706[2F05]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 26067                                  en39:
 26068 000022D1 1F                      	pop	ds
 26069                                  	; 31/12/2022
 26070                                  	;jmp	short sr31
 26071                                  	; 03/01/2023
 26072                                  sr31:
 26073 000022D2 E96DFE                  	jmp	coff
 26074                                  
 26075                                  ;----------------------------------------------------------------------------
 26076                                  ; DOS=HIGH/LOW command
 26077                                  ;----------------------------------------------------------------------------
 26078                                  
 26079                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26080                                  multi_try_doshi:
 26081 000022D5 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 26082 000022D8 7403                    	je	short it_is_h
 26083                                  skip_it:
 26084 000022DA E9EFFE                  	jmp	multi_pass_filter
 26085                                  it_is_h:				; M003 - removed initing DevUMB
 26086                                  					;	 & runhigh
 26087                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26088                                  ; (SYSINIT:25C1h)
 26089                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26090                                  ;%if 0
 26091                                  ;ifdef	MULTI_CONFIG
 26092 000022DD E8CA1E                  	call	query_user              ; query the user if config_cmd
 26093 000022E0 72F8                    	jc	short skip_it		; has the CONFIG_OPTION_QUERY bit set
 26094                                  ;endif
 26095                                  ;%endif ; 27/10/2022
 26096                                  
 26097 000022E2 BF[721F]                	mov	di,dos_parms
 26098 000022E5 31C9                    	xor	cx,cx
 26099                                  	; 03/01/2023
 26100                                  	;mov	dx,cx
 26101                                  h_do_parse:
 26102 000022E7 E87C06                  	call	sysinit_parse
 26103 000022EA 7303                    	jnc	short h_parse_ok	; parse error
 26104                                  h_badparm:
 26105                                  	; 03/01/2023
 26106                                  	;call	badparm_p		; show message and end the search loop.
 26107                                  	;;jmp	short h_end
 26108                                  	; 11/12/2022
 26109                                  ;h_end:
 26110                                  	;jmp	coff
 26111                                  	; 03/01/2023
 26112 000022EC E9BE05                  	jmp	badparm_p_coff	
 26113                                  h_parse_ok:
 26114 000022EF 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 26115 000022F2 7405                    	je	short h_end		; then end the $endloop
 26116 000022F4 E80C07                  	call	ProcDOS
 26117 000022F7 EBEE                    	jmp	short h_do_parse
 26118                                  	; 11/12/2022
 26119                                  	; 03/01/2023
 26120                                  h_end:
 26121 000022F9 E946FE                  	jmp	coff
 26122                                  
 26123                                  ;-----------------------------------------------------------------------------
 26124                                  ; devicehigh command
 26125                                  ;-----------------------------------------------------------------------------
 26126                                  
 26127                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26128                                  tryu:
 26129 000022FC 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 26130 000022FF 7552                    	jne	short tryd
 26131                                  
 26132                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26133                                  ; (SYSINIT:25E9h)
 26134                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26135                                  ;%if 0
 26136                                  ;ifdef	MULTI_CONFIG
 26137 00002301 E8A61E                  	call	query_user              ; query the user if config_cmd
 26138 00002304 724D                    	jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 26139                                  ;endif
 26140                                  ;%endif ; 28/10/2022
 26141                                  
 26142                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26143                                  ;%if 0
 26144                                  	; 01/01/2023
 26145                                  	; ds = cs
 26146                                  
 26147 00002306 E89107                  	call	InitVar
 26148 00002309 E8B70F                  	call	ParseSize		; process the size= option
 26149                                  	;jnc	short tryu_0
 26150                                  	; 31/12/2022
 26151 0000230C 720C                    	jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 26152                                  
 26153                                  ;%endif ; 28/10/2022
 26154                                  
 26155                                  ; 31/12/2022
 26156                                  %if 0
 26157                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26158                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 26159                                  	;mov	[cs:badparm_seg], es
 26160                                  	; 11/12/2022
 26161                                  	; ds = cs
 26162                                  	mov	[badparm_off], si
 26163                                  	mov	[badparm_seg], es
 26164                                  
 26165                                  	; 31/12/2022
 26166                                  	;call	ParseSize
 26167                                  	;jnc	short tryu_2	; 28/10/2022
 26168                                  	
 26169                                  	;call	badparm_p
 26170                                  	;jmp	coff
 26171                                  	; 03/01/2023
 26172                                  	jmp	badparm_p_coff
 26173                                  %endif
 26174                                  
 26175                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26176                                  ; (SYSINIT:2606h)
 26177                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26178                                  ;%if 0
 26179                                  tryu_0:
 26180                                  	;mov	ax,[cs:DevSizeOption]
 26181                                  	; 31/12/2022
 26182 0000230E A1[0C20]                	mov	ax,[DevSizeOption] ; ds = cs
 26183 00002311 09C0                    	or	ax,ax
 26184 00002313 7510                    	jnz	short tryu_2
 26185                                  
 26186 00002315 E81608                  	call	ParseVar
 26187 00002318 730B                    	jnc	short tryu_2
 26188                                  tryu_1:
 26189                                  	; 31/12/2022
 26190                                  	; ds = cs
 26191 0000231A 8936[E614]              	mov	[badparm_off], si
 26192 0000231E 8C06[E814]              	mov	[badparm_seg], es
 26193                                  	;mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 26194                                  	;mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 26195                                  	
 26196                                  	;call	badparm_p		; so all we have to do is choke and
 26197                                  	;jmp	coff			; die, rather verbosely.
 26198                                  	; 03/01/2023
 26199 00002322 E98805                  	jmp	badparm_p_coff
 26200                                  
 26201                                  ;%endif ; 28/10/2022
 26202                                  
 26203                                  tryu_2:	
 26204 00002325 56                      	push	si
 26205 00002326 06                      	push	es
 26206                                  tryu_3:
 26207 00002327 268A04                  	mov	al,[es:si]
 26208 0000232A 3C0D                    	cmp	al,cr
 26209 0000232C 740C                    	je	short tryu_4
 26210 0000232E 3C0A                    	cmp	al,lf
 26211 00002330 7408                    	je	short tryu_4
 26212 00002332 E8E41F                  	call	delim
 26213 00002335 7403                    	jz	short tryu_4
 26214 00002337 46                      	inc	si
 26215 00002338 EBED                    	jmp	short tryu_3
 26216                                  tryu_4:	
 26217                                  	; 11/12/2022
 26218                                  	; ds = cs
 26219 0000233A A2[2020]                	mov	[DevSavedDelim],al
 26220                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 26221                                  					;  it with null
 26222                                  	; 18/12/2022
 26223 0000233D 29DB                    	sub	bx,bx
 26224 0000233F 26881C                  	mov	[es:si],bl ; 0
 26225                                   	;mov	byte [es:si],0
 26226                                  
 26227 00002342 07                      	pop	es
 26228 00002343 5E                      	pop	si
 26229                                  
 26230                                  ;------------------------------------------------------------------------------
 26231                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 26232                                  ;------------------------------------------------------------------------------
 26233                                  
 26234                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26235                                  ; (SYSINIT:2642h)
 26236                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26237                                  ;%if 0
 26238                                  	; 01/01/2023
 26239                                  	; ds = cs
 26240 00002344 E8850C                  	call	UmbTest			; See if UMBs are around...
 26241                                  	; 01/01/2023
 26242                                  	;jnc	short NrmTst		; ...yep. So do that normal thang.
 26243                                  	
 26244                                  	;mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 26245                                  	; 31/12/2022
 26246                                  	; ds = cs, bx = 0
 26247                                  	;mov	byte [DeviceHi],bl ; 0
 26248                                  	;jmp	short LoadDevice
 26249                                  	; 01/01/2023
 26250 00002347 7222                    	jc	short LoadDevice ; bl = 0
 26251                                  
 26252                                  ;%endif
 26253                                  
 26254                                  ;------------------------------------------------------------------------------
 26255                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 26256                                  ;------------------------------------------------------------------------------
 26257                                  
 26258                                  NrmTst:
 26259                                  	; 11/12/2022
 26260                                  	; ds = cs
 26261                                  	;;mov	byte [cs:DeviceHi],0
 26262                                  	;mov	byte [DeviceHi],0
 26263                                  	; 18/12/2022
 26264                                  	; bx = 0
 26265 00002349 381E[FC1F]              	cmp	[DevUMB],bl ; 0
 26266                                  	;cmp	byte [DevUMB],0
 26267                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 26268 0000234D 741C                    	je	short LoadDevice	; no, we don't
 26269                                  	;mov	byte [cs:DeviceHi],1
 26270                                  	; 11/12/2022
 26271                                  	;mov	byte [DeviceHi],1
 26272                                  	; 18/12/2022
 26273 0000234F FEC3                    	inc	bl ; mov bl,1 ; (*)
 26274                                  	; 11/12/2022
 26275                                  	;jmp	short LoadDevice2	; 11/12/2022
 26276 00002351 EB18                    	jmp	short LoadDevice
 26277                                  
 26278                                  ;------------------------------------------------------------------------------
 26279                                  ; device command
 26280                                  ;------------------------------------------------------------------------------
 26281                                  
 26282                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26283                                  	; (SYSINIT:2665h)
 26284                                  
 26285                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26286                                  	; (SYSINIT:2401h)
 26287                                  tryd:
 26288                                  	; 11/12/2022
 26289                                  	;xor 	bx,bx ; 31/12/2022
 26290                                  	;
 26291 00002353 80FC44                          cmp     ah,CONFIG_DEVICE ; 'D'
 26292 00002356 7403                    	je	short gotd
 26293                                  skip_it2:
 26294 00002358 E99702                  	jmp	tryq
 26295                                  gotd:
 26296                                  
 26297                                  ; 31/12/2022 - Retro DOS v4.2
 26298                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26299                                  ;%if 0
 26300                                  ;ifdef	MULTI_CONFIG
 26301 0000235B E84C1E                  	call	query_user              ; query the user if config_cmd
 26302 0000235E 72F8                    	jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 26303                                  ;endif
 26304                                  ;%endif ; 28/10/2022
 26305                                  
 26306                                  	; 31/12/2022
 26307 00002360 29DB                    	sub	bx,bx
 26308                                  	; bx = 0
 26309                                  	; 11/12/2022
 26310                                  	; ds = cs
 26311                                  	;mov	byte [DeviceHi],0
 26312                                  	;mov	word [DevSizeOption],0
 26313 00002362 891E[0C20]              	mov	[DevSizeOption],bx ; 0
 26314 00002366 C606[2020]20            	mov	byte [DevSavedDelim],' '
 26315                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 26316                                  	;mov	word [cs:DevSizeOption],0
 26317                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 26318                                  					;  be replaced with a ' '
 26319                                  LoadDevice:                             ; device= or devicehigh= command.
 26320                                  	; 11/12/2022
 26321                                  	;mov	byte [DeviceHi],0
 26322 0000236B 881E[0B20]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 26323                                  LoadDevice2:
 26324                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 26325                                  	;
 26326                                  	;push    cs
 26327                                          ;pop     ds
 26328                                  	;
 26329                                  	;mov	[bpb_addr],si		; pass the command line to the dvice
 26330                                  	;mov	[bpb_addr+2],es
 26331                                  	;
 26332                                  	;mov	[DevCmdLine],si		; save it for ourself
 26333                                  	;mov	[DevCmdLine+2],es
 26334                                  	;
 26335                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 26336                                  
 26337                                  	; 11/12/2022
 26338                                  	; ds = cs
 26339                                  	;mov	bx,cs
 26340                                  	;mov	ds,bx
 26341                                  
 26342                                  	;mov	[cs:bpb_addr],si	; pass the command line to the dvice
 26343 0000236F 8936[7A03]              	mov	[bpb_addr],si
 26344                                  	;mov	[cs:bpb_addr+2],es
 26345 00002373 8C06[7C03]              	mov	[bpb_addr+2],es
 26346                                  
 26347                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 26348 00002377 8936[1C20]              	mov	[DevCmdLine],si
 26349                                  	;mov	[cs:DevCmdLine+2],es	
 26350 0000237B 8C06[1E20]              	mov	[DevCmdLine+2],es
 26351                                  
 26352                                  	; 31/12/2022 - Retro DOS v4.2
 26353 0000237F C606[E514]00            	mov	byte [driver_units],0	; clear total block units for driver	
 26354                                  
 26355 00002384 E8E71F                  	call	round
 26356                                  	
 26357 00002387 E8370E                  	call	SizeDevice
 26358 0000238A 7242                    	jc	short BadFile
 26359                                  
 26360                                  	; 11/12/2022
 26361                                  	; ds = cs
 26362                                  
 26363                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 26364                                  
 26365                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26366                                  ; (SYSINIT:26A4h)
 26367                                  
 26368                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26369                                  ;%if 0
 26370 0000238C C606[FB1F]01            	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 26371                                  
 26372 00002391 A0[0B20]                	mov	al,[DeviceHi]		; If not using upper memory,
 26373 00002394 800E[0B20]00            	or	byte [DeviceHi],0	; Skip all this and go on to
 26374 00002399 741E                    	jz	short DevConvLoad	; the actual load.
 26375                                  
 26376                                  	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 26377 0000239B A0[B91F]                	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 26378                                  
 26379 0000239E 3CFF                    	cmp	al,-1			; If umb0 not specified, it's old style
 26380 000023A0 7417                    	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 26381                                  
 26382 000023A2 FE0E[FB1F]              	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 26383                                  
 26384 000023A6 E8E409                  	call	GetLoadSize		; Returns size of first UMB specified
 26385 000023A9 09C0                    	or	ax,ax
 26386 000023AB 7406                    	jz	short tryd_1		; If size1 not specified, nada to do:
 26387                                  
 26388 000023AD 3B06[ED1F]              	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 26389 000023B1 7D06                    	jge	short DevConvLoad
 26390                                  tryd_1:
 26391 000023B3 A1[ED1F]                	mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 26392 000023B6 E8E309                  	call	StoLoadSize		; minsize for load UMB.
 26393                                  
 26394                                  ;%endif ; 28/10/2022
 26395                                  
 26396                                  ; - End DeviceHigh primary logic changes --------------------------------------
 26397                                  
 26398                                  DevConvLoad:
 26399                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26400 000023B9 E8000D                  	call	InitDevLoad
 26401                                  
 26402                                  	; 11/12/2022
 26403                                  	; ds = cs
 26404 000023BC A1[EF1F]                	mov	ax,[DevLoadAddr]
 26405 000023BF 0306[ED1F]              	add	ax,[DevSize]
 26406 000023C3 7206                    	jc	short NoMem
 26407 000023C5 3906[F11F]              	cmp	[DevLoadEnd],ax
 26408 000023C9 7315                    	jae	short LoadDev
 26409                                  	
 26410                                  	; 11/12/2022
 26411                                  	;mov	ax,[cs:DevLoadAddr]
 26412                                  	;add	ax,[cs:DevSize]
 26413                                  	;jc	short NoMem
 26414                                  	;cmp	[cs:DevLoadEnd],ax
 26415                                  	;jae	short LoadDev
 26416                                  NoMem:
 26417                                  	; 11/12/2022
 26418                                  	; ds = cs
 26419                                  	;jmp	mem_err
 26420 000023CB E9E31F                  	jmp	mem_err2
 26421                                  
 26422                                  BadFile:
 26423                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26424                                  	;;call	RetFromUM		; Does nothing if didn't call HideUMBs
 26425                                  	;;cmp	byte [es:si],' '
 26426                                          ;;jae	short tryd_2
 26427                                  	; 31/12/2022	
 26428                                  	;cmp	byte [es:si],0Dh	; cr
 26429                                          ;jne	short tryd_2
 26430                                  	;jmp	badop
 26431                                  	; 31/12/2022
 26432                                  	; ds = cs
 26433                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26434                                  	; (SYSINIT:26E6h)
 26435 000023CE E85E0E                  	call	RetFromUM		; Does nothing if didn't call HideUMBs
 26436 000023D1 26803C20                	cmp	byte [es:si],' ' 
 26437                                  	;cmp	byte [es:si],20h ; space
 26438 000023D5 7303                    	jnb	short tryd_2
 26439 000023D7 E9AF05                  	jmp	badop
 26440                                  tryd_2:
 26441 000023DA E82422                  	call	badload
 26442 000023DD E962FD                  	jmp	coff
 26443                                  
 26444                                  LoadDev:
 26445 000023E0 06                      	push	es
 26446 000023E1 1F                      	pop	ds
 26447                                  
 26448 000023E2 89F2                    	mov	dx,si			;ds:dx points to file name
 26449 000023E4 E82B0E                  	call	ExecDev			; load device driver using exec call
 26450                                  badldreset:
 26451 000023E7 1E                      	push	ds
 26452 000023E8 07                      	pop	es			;es:si back to config.sys
 26453 000023E9 0E                      	push	cs
 26454 000023EA 1F                      	pop	ds			;ds back to sysinit
 26455 000023EB 72E1                    	jc	short BadFile
 26456                                  goodld:
 26457                                  	; 11/12/2022
 26458                                  	; ds = cs
 26459                                  
 26460 000023ED 06                      	push	es ; +	; 31/12/2022
 26461 000023EE 56                      	push	si ; ++
 26462 000023EF E84F0E                  	call	RemoveNull
 26463 000023F2 06                      	push	es
 26464 000023F3 56                      	push	si
 26465                                  
 26466 000023F4 0E                      	push	cs
 26467 000023F5 07                      	pop	es
 26468                                  
 26469 000023F6 1E                      	push	ds ; **  ; ds = cs
 26470 000023F7 56                      	push	si
 26471                                  
 26472                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 26473                                  	; 31/12/2022
 26474                                  	; ds = cs
 26475 000023F8 C536[F31F]              	lds	si,[DevEntry]
 26476                                  
 26477                                  	;test	word [si+4],8000h
 26478                                  	; 11/12/2022
 26479 000023FC F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 26480                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 26481 00002400 7514                    	jnz	short got_device_com_cont   ; no.
 26482                                  
 26483 00002402 2EC536[6B02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 26484                                  	;cmp	byte [si+32],26
 26485 00002407 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 26486 0000240B 7209                    	jb	short got_device_com_cont
 26487                                  
 26488 0000240D 5E                      	pop	si
 26489 0000240E 1F                      	pop	ds ; **
 26490                                  
 26491 0000240F 5E                      	pop	si			; clear the stack
 26492 00002410 07                      	pop	es
 26493                                  
 26494                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26495                                  	;call	RetFromUM
 26496                                  	; 31/12/2022
 26497                                  	; ds = cs ; **
 26498 00002411 E81B0E                  	call	RetFromUM		; Do this before we leave
 26499                                  
 26500                                  	;jmp	short badnumblock
 26501                                  	; 31/12/2022
 26502 00002414 EB77                    	jmp	short badnumblock2  ; ds = cs
 26503                                  
 26504                                  got_device_com_cont:
 26505 00002416 5E                      	pop	si
 26506 00002417 1F                      	pop	ds
 26507                                  
 26508                                  	; 11/12/2022
 26509                                  	; ds = cs
 26510                                  
 26511 00002418 E80B06                  	call	LieInt12Mem
 26512 0000241B E86A06                  	call	UpdatePDB		; update the PSP:2 value M020
 26513                                  
 26514                                  	; 11/12/2022
 26515                                  	; ds = cs
 26516 0000241E 803E[E114]00            	cmp	byte [multdeviceflag],0
 26517                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 26518                                  					;  driver in the file ; M027
 26519 00002423 750E                    	jne	short skip_pass_limit	;		      ; M027
 26520                                  
 26521                                  	; 11/12/2022
 26522                                  	; ds = cs
 26523                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 26524                                  	;mov	bx,[cs:DevLoadEnd]
 26525                                  	;mov	[cs:break_addr+2],bx
 26526                                  
 26527 00002425 C706[7603]0000          	mov	word [break_addr],0
 26528 0000242B 8B1E[F11F]              	mov	bx,[DevLoadEnd]
 26529 0000242F 891E[7803]              	mov	[break_addr+2],bx
 26530                                  
 26531                                  skip_pass_limit:
 26532                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 26533                                  ;	number of installed devices (including DblSpace drives) where
 26534                                  ;	"drivenumber" is the number that the next block device will
 26535                                  ;	be assigned to. Because some naughty device drivers (like
 26536                                  ;	interlnk) look at the internal DOS variable instead of the
 26537                                  ;	value we pass it, we'll temporarily stick our value into
 26538                                  ;	DOS DATA while we're initializing the device drivers.
 26539                                  ;
 26540                                  ;	Note that this will make it impossible for this device
 26541                                  ;	driver to access the DblSpace drive letters, whether
 26542                                  ;	they are swapped-hosts or unswapped compressed drives,
 26543                                  ;	during its initialization phase.
 26544                                  
 26545                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26546                                  ; (SYSINIT:2752h)
 26547                                  ; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26548                                  ;%if 0
 26549                                  	; 31/12/2022
 26550                                  	;push	ds
 26551                                  	
 26552                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26553                                  	; 31/12/2022
 26554                                  	; ds = cs
 26555 00002433 C51E[6B02]              	lds	bx,[DOSINFO]		; ds:bx -> sys_var
 26556                                  
 26557 00002437 2EA0[7E03]              	mov	al,[cs:drivenumber]	; temporarily use this next drv value
 26558 0000243B 2EA2[7E03]              	mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 26559 0000243F 88C4                    	mov	ah,al
 26560                                  	
 26561 00002441 874720                  	xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 26562                                  	; 31/12/2022
 26563                                  	;pop	ds
 26564                                  	
 26565 00002444 50                      	push	ax			; save real sysi_numio/ncds in ax
 26566                                  
 26567                                  ;%endif ; 29/10/2022
 26568                                  
 26569                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26570                                  	; (SYSINIT:24B9h)
 26571                                  
 26572 00002445 BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 26573 00002448 E86F1F                  	call	calldev 		; calldev (sdevstrat);
 26574 0000244B BB0800                  	mov	bx,SYSDEV.INT ; 8
 26575 0000244E E8691F                  	call	calldev 		; calldev (sdevint);
 26576                                  
 26577                                  	; 11/12/2022
 26578                                  	; ds <> cs (from calldev) ; 31/12/2022
 26579                                  
 26580                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26581                                  ; (SYSINIT:2773h)
 26582                                  ; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26583                                  ;%if 0
 26584 00002451 58                      	pop	ax			; get real sysi_numio value
 26585                                  	; 31/12/2022
 26586                                  	;push	ds
 26587 00002452 2EC51E[6B02]            	lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26588 00002457 894720                  	mov	[bx+SYSI_NUMIO],ax	; swap with existing values
 26589                                  	; 31/12/2022
 26590                                  	;pop	ds
 26591                                  
 26592                                  ;%endif ; 29/10/2022
 26593                                  
 26594                                  	; 11/12/2022
 26595 0000245A 0E                      	push	cs
 26596 0000245B 1F                      	pop	ds
 26597                                  
 26598 0000245C E8F705                  	call	TrueInt12Mem
 26599                                  
 26600                                  	; 11/12/2022
 26601                                  	; ds = cs
 26602                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 26603                                  	;mov	[cs:DevBrkAddr],ax
 26604                                  	;mov	ax,[cs:break_addr+2]
 26605                                  	;mov	[cs:DevBrkAddr+2],ax
 26606 0000245F A1[7603]                	mov	ax,[break_addr]	
 26607 00002462 A3[F71F]                	mov	[DevBrkAddr],ax
 26608 00002465 A1[7803]                	mov	ax,[break_addr+2]
 26609 00002468 A3[F91F]                	mov	[DevBrkAddr+2],ax
 26610                                  
 26611                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26612                                  	;call	RetFromUM		; There we go... all done.
 26613                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26614                                  	; (SYSINIT:2791h)
 26615 0000246B E8C10D                  	call	RetFromUM		; There we go... all done.	
 26616                                  
 26617                                  	; 31/12/2022
 26618                                  	; ds = cs
 26619                                  
 26620                                  	; 11/12/2022
 26621 0000246E 803E[FC1F]00            	cmp	byte [DevUMB],0	
 26622                                  	;cmp	byte [cs:DevUMB],0
 26623 00002473 7403                    	je	short tryd_3
 26624 00002475 E8F00E                  	call	AllocUMB
 26625                                  	; 31/12/2022
 26626                                  	; ds = cs
 26627                                  tryd_3:
 26628                                  
 26629                                  ;ifndef ROMDOS
 26630                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 26631                                  
 26632                                  	; 11/12/2022
 26633                                  	; ds = cs
 26634                                  	
 26635                                  	;cmp	byte [cs:runhigh],0FFh
 26636 00002478 803E[6A02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 26637 0000247D 7503                    	jne	short tryd_4
 26638                                  	
 26639                                  	; 11/12/2022
 26640                                  	; ds = cs
 26641 0000247F E8EFE4                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 26642                                  tryd_4:
 26643                                  ;endif ; ROMDOS
 26644                                  
 26645 00002482 5E                      	pop	si
 26646 00002483 1F                      	pop	ds
 26647 00002484 C60400                  	mov	byte [si],0		; *p = 0;
 26648                                  
 26649 00002487 0E                      	push	cs
 26650 00002488 1F                      	pop	ds
 26651                                  
 26652 00002489 EB1F                    	jmp	short was_device_com
 26653                                  
 26654                                  ;----------------------------------------------------------------------------
 26655                                  
 26656                                  ; 02/04/2019 - Retro DOS v4.0
 26657                                  
 26658                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26659                                  ; (SYSINIT:27B3h)
 26660                                  
 26661                                  badnumblock:
 26662 0000248B 0E                      	push	cs
 26663 0000248C 1F                      	pop	ds
 26664                                  badnumblock2:	; 31/12/2022 (ds=cs)
 26665 0000248D BA[764C]                	mov	dx,badblock
 26666 00002490 E89621                  	call	print
 26667                                  
 26668                                  ;------ fall thru -----------------------------------------------------------
 26669                                  
 26670                                  	; 31/12/2022 - Retro DOS v4.2
 26671                                  
 26672                                  erase_dev_do:				; modified to show message "error in config.sys..."
 26673                                  	
 26674                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 26675                                  	
 26676 00002493 5E                      	pop	si ; ++
 26677 00002494 07                      	pop	es ; + ; 31/12/2022
 26678                                  
 26679 00002495 0E                      	push	cs
 26680 00002496 1F                      	pop	ds
 26681                                  
 26682                                  skip1_resetmemhi:
 26683                                  	; 11/12/2022
 26684                                  	; ds = cs
 26685 00002497 833E[7F03]00            	cmp	word [configmsgflag],0
 26686                                  	;cmp	word [cs:configmsgflag],0
 26687 0000249C 7409                    	je	short no_error_line_msg
 26688                                  
 26689 0000249E E83305                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 26690                                  	; 11/12/2022
 26691                                  	; ds = cs
 26692                                  	;mov	word [cs:configmsgflag],0
 26693 000024A1 C706[7F03]0000          	mov	word [configmsgflag],0	; set the default value again.
 26694                                  
 26695                                  no_error_line_msg:
 26696 000024A7 E998FC                  	jmp	coff
 26697                                  
 26698                                  ;----------------------------------------------------------------------------
 26699                                  
 26700                                  was_device_com:
 26701                                  	; 14/12/2022
 26702                                  	; ds = cs
 26703 000024AA A1[F91F]                	mov	ax,[DevBrkAddr+2]
 26704                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 26705 000024AD 3B06[F11F]              	cmp	ax,[DevLoadEnd]
 26706                                  	;cmp	ax,[cs:DevLoadEnd]
 26707 000024B1 7605                    	jbe	short breakok
 26708                                  
 26709 000024B3 5E                      	pop	si
 26710 000024B4 07                      	pop	es
 26711 000024B5 E916FF                  	jmp	BadFile
 26712                                  
 26713                                  breakok:
 26714                                  	; 14/12/2022
 26715                                  	; ds = cs
 26716 000024B8 C43E[6B02]              	les	di,[DOSINFO] 
 26717 000024BC C516[F31F]              	lds	dx,[DevEntry]
 26718                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 26719 000024C0 89D6                    	mov	si,dx
 26720                                  
 26721                                  	; 14/11/2022
 26722                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 26723                                  
 26724                                  	; 14/12/2022
 26725                                  	; ds <> cs
 26726                                  	
 26727                                  	;mov	ax,[si+4]
 26728 000024C2 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 26729                                  	; 12/12/2022
 26730 000024C5 F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 26731                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 26732 000024C8 7426                    	jz	short isblock
 26733                                  
 26734                                  ;------ lets deal with character devices
 26735                                  
 26736 000024CA 2E800E[E414]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 26737 000024D0 E8A10D                  	call	DevSetBreak		;go ahead and alloc mem for device
 26738                                  jc_edd:
 26739 000024D3 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 26740                                  
 26741                                  	; 12/12/2022
 26742 000024D5 A801                    	test	al,ISCIN
 26743                                  	;test	ax,ISCIN ; 1		;is it a console in?
 26744 000024D7 7408                    	jz	short tryclk
 26745                                  
 26746 000024D9 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 26747 000024DD 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 26748                                  tryclk: 
 26749                                  	; 12/12/2022
 26750 000024E1 A808                    	test	al,ISCLOCK
 26751                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 26752 000024E3 7408                    	jz	short golink
 26753                                  
 26754 000024E5 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 26755 000024E9 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 26756                                  golink: 
 26757 000024ED E9B500                  	jmp	linkit
 26758                                  
 26759                                  ;------ deal with block device drivers
 26760                                  
 26761                                  isblock:
 26762 000024F0 2EA0[7503]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 26763 000024F4 08C0                    	or	al,al
 26764 000024F6 749B                    	jz	short erase_dev_do
 26765                                  	;mov	[si+10],al
 26766 000024F8 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 26767                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26768                                  	;add	[cs:driver_units],al
 26769                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26770 000024FB 2E0006[E514]            	add	[cs:driver_units],al	; keep total for all drivers in file
 26771                                  perdrv:
 26772 00002500 98                      	cbw				; warning no device > 127 units
 26773 00002501 89C1                    	mov	cx,ax
 26774 00002503 88E6                    	mov	dh,ah
 26775                                  	;mov	dl,[es:di+32]
 26776 00002505 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 26777 00002509 88D4                    	mov	ah,dl
 26778 0000250B 00C4                    	add	ah,al			; check for too many devices
 26779 0000250D 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 26780 00002510 7603                    	jbe	short ok_block
 26781 00002512 E976FF                  	jmp	badnumblock
 26782                                  
 26783                                  ok_block:
 26784 00002515 2E800E[E414]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 26785 0000251B E8560D                  	call	DevSetBreak		; alloc the device
 26786 0000251E 72B3                    	jc	short jc_edd
 26787 00002520 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 26788                                  
 26789 00002524 2E0006[7E03]            	add	[cs:drivenumber],al	; remember amount for next device
 26790 00002529 2EC51E[7A03]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 26791                                  perunit:
 26792 0000252E 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 26793                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 26794                                  	; 11/12/2022
 26795 00002533 26C46E00                	les	bp,[es:bp]
 26796                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26797                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 26798                                  scandpb:
 26799                                  	;cmp	word [es:bp+25],-1
 26800 00002537 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 26801 0000253C 7406                    	je	short foundpb
 26802                                  	;les	bp,[es:bp+25]
 26803 0000253E 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 26804 00002542 EBF3                    	jmp	short scandpb
 26805                                  foundpb:
 26806 00002544 2EA1[F71F]              	mov	ax,[cs:DevBrkAddr]
 26807 00002548 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 26808 0000254C 2EA1[F91F]              	mov	ax,[cs:DevBrkAddr+2]
 26809 00002550 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 26810                                  
 26811 00002554 2EC42E[F71F]            	les	bp,[cs:DevBrkAddr]
 26812 00002559 2E8306[F71F]21          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 26813                                  
 26814 0000255F E8F10C                  	call	RoundBreakAddr
 26815                                  
 26816 00002562 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 26817 00002568 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 26818                                  
 26819 0000256D 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 26820 0000256F 43                      	inc	bx
 26821 00002570 43                      	inc	bx			;point to next guy
 26822                                  	;mov	[es:bp+DPB.DRIVE],dx
 26823                                  	; 11/12/2022
 26824 00002571 26895600                	mov	[es:bp],dx ; 13/05/2019
 26825                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26826                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 26827                                  	
 26828 00002575 B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 26829 00002577 CD21                    	int	21h
 26830                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 26831                                  			; DS:SI -> BPB (BIOS Parameter Block)
 26832                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 26833                                  
 26834                                  	;mov	ax,[es:bp+2]
 26835 00002579 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 26836 0000257D 06                      	push	es
 26837 0000257E 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 26838                                  	;cmp	ax,[es:di+10h]
 26839 00002583 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 26840 00002587 07                      	pop	es
 26841                                  	;jna	short iblk_1
 26842                                  	;jmp	short bad_bpb_size_sector
 26843                                  	; 29/10/2022
 26844 00002588 775A                    	ja	short bad_bpb_size_sector
 26845                                  iblk_1:
 26846 0000258A 1E                      	push	ds
 26847 0000258B 52                      	push	dx
 26848                                  
 26849 0000258C 2EC516[F31F]            	lds	dx,[cs:DevEntry]
 26850                                  	;mov	[es:bp+13h],dx
 26851 00002591 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 26852                                  	;mov	[es:bp+15h],ds
 26853 00002595 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 26854                                  
 26855 00002599 5A                      	pop	dx
 26856 0000259A 1F                      	pop	ds
 26857                                  
 26858 0000259B 42                      	inc	dx
 26859 0000259C FEC6                    	inc	dh
 26860 0000259E E28E                    	loop	perunit
 26861                                  
 26862 000025A0 0E                      	push	cs
 26863 000025A1 1F                      	pop	ds
 26864                                  
 26865 000025A2 E8C7E6                  	call	TempCDS 		; set cds for new drives
 26866                                  	; 31/12/2022
 26867                                  	; ds <> cs
 26868                                  linkit:
 26869 000025A5 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 26870 000025AA 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 26871 000025AE 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 26872                                  
 26873 000025B2 2EC536[F31F]            	lds	si,[cs:DevEntry]	;ds:si = device location
 26874 000025B7 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 26875 000025BB 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 26876 000025BF 8B04                    	mov	ax,[si]			;get pointer to next device
 26877 000025C1 2EA3[F31F]              	mov	[cs:DevEntry],ax	;and save it
 26878                                  
 26879 000025C5 890C                    	mov	[si],cx			;link in the driver
 26880 000025C7 895402                  	mov	[si+2],dx
 26881                                  enddev:
 26882 000025CA 5E                      	pop	si
 26883 000025CB 07                      	pop	es
 26884 000025CC 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 26885 000025CD 740B                    	jz	short coffj3
 26886                                  
 26887 000025CF 2EFE06[E114]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 26888 000025D4 E8BF0C                  	call	DevBreak		; M009
 26889                                  	; 11/12/2022
 26890                                  	; ds = cs (DevBreak)
 26891                                  
 26892                                  	; 03/04/2019 - Retro DOS v4.0
 26893                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 26894 000025D7 E913FE                  	jmp	goodld			; otherwise pretend we loaded it in
 26895                                  coffj3: 
 26896                                  	; 18/12/2022
 26897                                  	; ax = 0
 26898 000025DA 2EA2[E114]              	mov	[cs:multdeviceflag],al ; 0
 26899                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 26900 000025DE E8B50C                  	call	DevBreak
 26901                                  	; 11/12/2022
 26902                                  	; ds = cs (DevBreak)
 26903                                  	
 26904                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26905                                  	; (SYSINIT:2919h)
 26906                                  	;call	CheckProtmanArena
 26907                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 26908                                  	;;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 26909                                  ;					;  created a bogus arena to try
 26910                                  ;					;  to protect some of its resident-
 26911                                  ;					;  init code.
 26912                                  	;call	CheckDoubleSpace
 26913 000025E1 E95EFB                  	jmp	coff
 26914                                  
 26915                                  ;----------------------------------------------------------------------------
 26916                                  
 26917                                  ;CheckDoubleSpace:
 26918                                  ;;;;	ifdef	dblspace_hooks
 26919                                  ;
 26920                                  ;;	Now check for two special MagicDrv cases:
 26921                                  ;;
 26922                                  ;;       a) the last driver load was MagicDrv final placement:
 26923                                  ;;	   -> add number of MagicDrv reserved drives to drivenumber
 26924                                  ;;
 26925                                  ;;       b) MagicDrv is currently in temporary home:
 26926                                  ;;          -> call it to give it a chance to mount and shuffle drives
 26927                                  ;
 26928                                  ;	cmp	byte [cs:MagicHomeFlag],0 ; already home?
 26929                                  ;	jnz	short no_more_magic_calls ;  nothing more to do if so
 26930                                  ;
 26931                                  ;;	Now inquire of driver whether it is present, and final located
 26932                                  ;
 26933                                  ;	mov	ax,multMagicdrv ; 4A11h
 26934                                  ;	mov	bx,MD_VERSION ; 0
 26935                                  ;	int	2fh			; ch = number of MagicDrv drive letters
 26936                                  ;	or	ax,ax			; is it there?
 26937                                  ;	jnz	short no_more_magic_calls ; done if not
 26938                                  ;
 26939                                  ;	test	dx,8000h		; is it final placed?
 26940                                  ;	jnz	short magic_not_yet_home ;  skip if not
 26941                                  ;
 26942                                  ;;	Okay, now the driver is final placed!  Set the flag so we
 26943                                  ;;	don't keep checking it, and add its number of drive letters
 26944                                  ;;	to drivenumber.
 26945                                  ;
 26946                                  ;	mov	byte [cs:MagicHomeFlag],0ffh ; set the flag!
 26947                                  ;	add	[cs:drivenumber],ch	; add number of MagicDrv volumes to
 26948                                  ;;					;  the drive number we'll pass to the
 26949                                  ;;					;  next loadable block device.
 26950                                  ;
 26951                                  ;	jmp	short no_more_magic_calls ; and finished.
 26952                                  ;
 26953                                  ;magic_not_yet_home:
 26954                                  ;	push	es
 26955                                  ;	push	si
 26956                                  ;
 26957                                  ;	mov	cx,[cs:memhi]		; pass it a work buffer
 26958                                  ;	mov	dx,[cs:ALLOCLIM]	;   address in cx (segment)
 26959                                  ;	sub	dx,cx			;   for len dx (paragraphs)
 26960                                  ;
 26961                                  ;	mov	bx,2
 26962                                  ;	mov	al,[cs:driver_units]	; shuffle magicdrives and new drives
 26963                                  ;;					;   by this many units
 26964                                  ;
 26965                                  ;;BUGBUG 29-Oct-1992 bens Take this 55h out after Beta 4
 26966                                  ;	mov	ah,55h			; backdoor won't shuffle unless it
 26967                                  ;;					;  sees this, to prevent bad things
 26968                                  ;;					;  from happening if people run the
 26969                                  ;;					;  new driver with an old BIOS
 26970                                  ;	call	far [cs:MagicBackdoor]
 26971                                  ;
 26972                                  ;	pop	si
 26973                                  ;	pop	es
 26974                                  ;
 26975                                  ;no_more_magic_calls:
 26976                                  ;
 26977                                  ;;;;	endif
 26978                                  ;	retn
 26979                                  
 26980                                  ; 03/04/2019 - Retro DOS v4.0
 26981                                  
 26982                                  bad_bpb_size_sector:
 26983 000025E4 5E                      	pop	si
 26984 000025E5 07                      	pop	es
 26985 000025E6 BA[984B]                	mov	dx,badsiz_pre
 26986 000025E9 BB[764B]                	mov	bx,crlfm
 26987 000025EC E81820                  	call	prnerr
 26988                                  
 26989 000025EF E950FB                  	jmp	coff
 26990                                  
 26991                                  ;------------------------------------------------------------------------------
 26992                                  ; country command
 26993                                  ;      the syntax is:
 26994                                  ;	country=country id {,codepage {,path}}
 26995                                  ;	country=country id {,,path}	:default codepage id in dos
 26996                                  ;------------------------------------------------------------------------------
 26997                                  
 26998                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26999                                  	; (SYSINIT:2663h)
 27000                                  tryq:
 27001 000025F2 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 27002 000025F5 7403                    	je	short tryq_cont
 27003                                  skip_it3:
 27004 000025F7 E90D01                  	jmp	tryf
 27005                                  tryq_cont:
 27006                                  
 27007                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27008                                  ; (SYSINIT:297Eh)
 27009                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27010                                  ;%if 0
 27011                                  ;ifdef	MULTI_CONFIG
 27012 000025FA E8AD1B                  	call	query_user		; query the user if config_cmd
 27013 000025FD 72F8                    	jc	short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 27014                                  ;endif
 27015                                  ;%endif ; 02/11/2022
 27016                                  
 27017                                  	; 31/12/2022
 27018                                  	;xor	bx,bx
 27019 000025FF 31C9                    	xor	cx,cx
 27020                                  	; 14/12/2022
 27021                                  	; ds = cs
 27022                                  	; bx = 0
 27023                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 27024                                  	;mov	word [cs:p_code_page],0
 27025                                  	; 31/12/2022
 27026                                  	; cx = 0
 27027                                  	;mov	[cntry_drv],bl ; 0
 27028                                  	;mov	[p_code_page],bx ; 0
 27029 00002601 880E[B346]              	mov	[cntry_drv],cl ; 0
 27030 00002605 890E[641E]              	mov	[p_code_page],cx ; 0	
 27031                                  
 27032 00002609 BF[2D1E]                	mov	di,cntry_parms
 27033                                  	;xor	cx,cx	; 31/12/2022
 27034                                  	; 03/01/2023
 27035                                  	;mov	dx,cx
 27036                                  do52:
 27037 0000260C E85703                  	call	sysinit_parse
 27038 0000260F 730B                    	jnc	short if52		; parse error,check error code and
 27039                                  
 27040 00002611 E8E000                  	call	cntry_error		; show message and end the search loop.
 27041                                  	; 14/12/2022
 27042                                  	; ds = cs
 27043 00002614 C706[621E]FFFF          	mov	word [p_cntry_code],-1
 27044                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 27045 0000261A EB34                    	jmp	short sr52
 27046                                  if52:
 27047 0000261C 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 27048 0000261F 742F                    	jz	short sr52		; then end the search loop
 27049                                  
 27050                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 27051                                  	; 14/12/2022
 27052                                  	; ds = cs
 27053 00002621 803E[FF1D]01            	cmp	byte [result_val],_$P_Number	
 27054                                  	;cmp	byte [cs:result_val],_$P_Number
 27055 00002626 7512                    	jnz	short if56
 27056                                  
 27057                                  	;;mov	ax,[cs:rw_dword]
 27058                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27059                                  	; 14/12/2022
 27060 00002628 A1[031E]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 27061 0000262B 83F901                  	cmp	cx,1
 27062 0000262E 7505                    	jne	short if57
 27063                                  
 27064                                  	;mov	[cs:p_cntry_code],ax
 27065                                  	; 14/12/2022
 27066 00002630 A3[621E]                	mov	[p_cntry_code],ax
 27067                                  
 27068                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27069                                  	;jmp	short en57
 27070                                  	; 12/12/2022
 27071                                  	;jmp	short en56
 27072 00002633 EBD7                    	jmp	short do52
 27073                                  if57:
 27074                                  	;mov	[cs:p_code_page],ax
 27075                                  	; 14/12/2022
 27076                                  	; ds = cs
 27077 00002635 A3[641E]                	mov	[p_code_page],ax
 27078                                  en57:
 27079                                  	;jmp	short en56		; path entered
 27080                                  	; 12/12/2022
 27081 00002638 EBD2                    	jmp	short do52
 27082                                  if56:
 27083 0000263A 1E                      	push	ds
 27084 0000263B 06                      	push	es
 27085 0000263C 56                      	push	si
 27086 0000263D 57                      	push	di
 27087                                  
 27088 0000263E 0E                      	push	cs
 27089 0000263F 07                      	pop	es
 27090                                  
 27091                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 27092                                  	; 14/12/2022
 27093 00002640 C536[031E]              	lds	si,[rv_dword]
 27094 00002644 BF[B346]                	mov	di,cntry_drv
 27095 00002647 E8AB1F                  	call	move_asciiz
 27096                                  
 27097 0000264A 5F                      	pop	di
 27098 0000264B 5E                      	pop	si
 27099 0000264C 07                      	pop	es
 27100 0000264D 1F                      	pop	ds
 27101                                  
 27102                                  en56:
 27103 0000264E EBBC                    	jmp	short do52
 27104                                  
 27105                                  sr52:
 27106                                  	; 14/12/2022
 27107                                  	; ds = cs
 27108 00002650 833E[621E]FF            	cmp	word [p_cntry_code],-1
 27109                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 27110 00002655 7509                    	jne	short tryq_open
 27111 00002657 E9E8FA                  	jmp	coff
 27112                                  
 27113                                  tryqbad:				;"invalid country code or code page"
 27114 0000265A F9                      	stc
 27115 0000265B BA[DF4B]                	mov     dx,badcountry
 27116 0000265E EB79                    	jmp     tryqchkerr
 27117                                  
 27118                                  tryq_open:
 27119                                  	; 14/12/2022
 27120                                  	; ds = cs
 27121 00002660 803E[B346]00            	cmp	byte [cntry_drv],0
 27122                                  	;cmp	byte [cs:cntry_drv],0
 27123 00002665 7405                    	je	short tryq_def
 27124 00002667 BA[B346]                	mov	dx,cntry_drv
 27125 0000266A EB03                    	jmp	short tryq_openit
 27126                                  
 27127                                  tryq_def:
 27128 0000266C BA[B546]                	mov	dx,cntry_root
 27129                                  tryq_openit:
 27130 0000266F B8003D                  	mov	ax,3D00h		;open a file
 27131 00002672 F9                      	stc
 27132 00002673 CD21                    	int	21h
 27133 00002675 7242                    	jc	short tryqfilebad	;open failure
 27134                                  
 27135                                  	; 14/12/2022
 27136                                  	; ds = cs
 27137 00002677 A3[5A03]                	mov	[cntryfilehandle],ax
 27138                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 27139 0000267A 89C3                    	mov	bx,ax
 27140 0000267C A1[621E]                	mov	ax,[p_cntry_code]
 27141 0000267F 8B16[641E]              	mov	dx,[p_code_page]
 27142                                  	;mov	ax,[cs:p_cntry_code]
 27143                                  	;mov	dx,[cs:p_code_page]	;now,ax=country id,bx=filehandle
 27144                                  	;mov	cx,[cs:memhi]
 27145 00002683 8B0E[6203]              	mov	cx,[memhi]
 27146 00002687 81C18001                	add	cx,384			;need 6k buffer to handle country.sys
 27147                                  					;M023
 27148                                  	; 14/12/2022
 27149                                  	; ds = cs
 27150 0000268B 3B0E[A302]              	cmp	cx,[ALLOCLIM]
 27151                                  	;cmp	cx,[cs:ALLOCLIM]
 27152 0000268F 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 27153                                  
 27154 00002691 BE[B346]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 27155 00002694 803C00                  	cmp	byte [si],0 		;default path?
 27156 00002697 7502                    	jne	short tryq_set_for_dos
 27157                                  
 27158 00002699 46                      	inc	si
 27159 0000269A 46                      	inc	si			;ds:si -> cntry_root
 27160                                  
 27161                                  tryq_set_for_dos:
 27162                                  	; 14/12/2022
 27163                                  	; ds = cs
 27164 0000269B C43E[7702]              	les	di,[sysi_country]
 27165                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 27166 0000269F 57                      	push	di			;save di
 27167                                  	;add	di,8
 27168 000026A0 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 27169 000026A3 E84F1F                  	call	move_asciiz		;set the path to country.sys in dos.
 27170 000026A6 5F                      	pop	di			;es:di -> country info tab again.
 27171                                  
 27172                                  	; 14/12/2022	
 27173 000026A7 8B0E[6203]              	mov	cx,[memhi]
 27174                                  	;mov	cx,[cs:memhi]
 27175 000026AB 8ED9                    	mov	ds,cx
 27176 000026AD 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 27177 000026AF E88B1D                  	call	setdoscountryinfo	;now do the job!!!
 27178                                  	; ds <> cs ; 14/12/2022
 27179 000026B2 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 27180                                  
 27181 000026B4 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 27182 000026B7 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 27183                                  
 27184                                  tryqfilebad:
 27185 000026B9 0E                      	push	cs
 27186 000026BA 07                      	pop	es
 27187 000026BB 2E803E[B346]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 27188 000026C1 7405                    	je	short tryqdefbad
 27189                                  
 27190 000026C3 BE[B346]                	mov	si,cntry_drv
 27191 000026C6 EB03                    	jmp	short tryqbadload
 27192                                  
 27193                                  tryqdefbad:				;default file has been used.
 27194 000026C8 BE[B546]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 27195                                  tryqbadload:
 27196 000026CB E8331F                  	call	badload 		;ds will be restored to sysinit_seg
 27197                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27198                                  	; (SYSINIT:2A69h)
 27199 000026CE 8B0E[A102]              	mov	cx,[CONFBOT] ; ds = cs (from badload)
 27200                                  	;mov	cx,[cs:CONFBOT]
 27201                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27202                                  	;mov	cx,[cs:top_of_cdss]
 27203                                  	; 11/12/2022
 27204                                  	; ds = cs
 27205                                  	;mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 27206 000026D2 8EC1                    	mov	es,cx			;restore es -> confbot.
 27207 000026D4 EB13                    	jmp	short coffj4
 27208                                  
 27209                                  tryqmemory:
 27210 000026D6 BA[224C]                	mov	dx,insufmemory
 27211                                  tryqchkerr:
 27212                                  	;mov	cx,[cs:CONFBOT]
 27213                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27214                                  	;mov	cx,[cs:top_of_cdss]
 27215                                  	; 12/12/2022
 27216 000026D9 0E                      	push	cs
 27217 000026DA 1F                      	pop	ds
 27218                                  	; 31/12/2022 - Retro DOS v4.2
 27219 000026DB 8B0E[A102]              	mov	cx,[CONFBOT] ; (MSDOS 6.21 IO.SYS, SYSINIT)
 27220                                  	;mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 27221 000026DF 8EC1                    	mov	es,cx			;restore es -> confbot seg
 27222                                  	;push	cs
 27223                                  	;pop	ds			;restore ds to sysinit_seg
 27224 000026E1 7306                    	jnc	short coffj4		;if no error,then exit
 27225                                  
 27226 000026E3 E8431F                  	call	print			;else show error message
 27227 000026E6 E8EB02                  	call	error_line
 27228                                  coffj4:
 27229                                  	;mov	bx,[cs:cntryfilehandle]
 27230                                  	; 11/12/2022
 27231                                  	; ds = cs
 27232 000026E9 8B1E[5A03]              	mov	bx,[cntryfilehandle]
 27233 000026ED B43E                    	mov	ah,3Eh
 27234 000026EF CD21                    	int	21h			;close a file. don't care even if it fails.
 27235 000026F1 E94EFA                  	jmp	coff
 27236                                  
 27237                                  ;--------------------------------------------
 27238                                  
 27239                                  cntry_error:
 27240                                  
 27241                                  ;function: show "invalid country code or code page" messages,or
 27242                                  ;		"error in country command" depending on the error code
 27243                                  ;		in ax returned by sysparse;
 27244                                  ;in:	ax - error code
 27245                                  ;	ds - sysinitseg
 27246                                  ;	es - confbot
 27247                                  ;out:	show message.  dx destroyed.
 27248                                  
 27249 000026F4 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 27250 000026F7 7505                    	jne	short if64
 27251 000026F9 BA[DF4B]                	mov	dx,badcountry		;"invalid country code or code page"
 27252 000026FC EB03                    	jmp	short en64
 27253                                  if64:
 27254 000026FE BA[054C]                	mov	dx,badcountrycom	;"error in contry command"
 27255                                  en64:
 27256 00002701 E8251F                  	call	print
 27257                                  	;call	error_line
 27258                                  	;retn
 27259                                  	; 11/12/2022
 27260 00002704 E9CD02                  	jmp	error_line
 27261                                  
 27262                                  ;------------------------------------------------------------------------------
 27263                                  ; files command
 27264                                  ;------------------------------------------------------------------------------
 27265                                  
 27266                                  ;******************************************************************************
 27267                                  ; function: parse the parameters of files= command.			      *
 27268                                  ;									      *
 27269                                  ; input :								      *
 27270                                  ;	es:si -> parameters in command line.				      *
 27271                                  ; output:								      *
 27272                                  ;	variable files set.						      *
 27273                                  ;									      *
 27274                                  ; subroutines to be called:						      *
 27275                                  ;	sysinit_parse							      *
 27276                                  ; logic:								      *
 27277                                  ; {									      *
 27278                                  ;	set di points to files_parms;					      *
 27279                                  ;	set dx,cx to 0; 						      *
 27280                                  ;	while (end of command line)					      *
 27281                                  ;	{ sysinit_parse;						      *
 27282                                  ;	  if (no error) then						      *
 27283                                  ;	     files = result_val._$P_picked_val				      *
 27284                                  ;	  else								      *
 27285                                  ;	     error exit;						      *
 27286                                  ;	};								      *
 27287                                  ; };									      *
 27288                                  ;									      *
 27289                                  ;******************************************************************************
 27290                                  
 27291                                  tryf:
 27292 00002707 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 27293 0000270A 7528                    	jne	short tryl
 27294                                  
 27295                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27296                                  ; (SYSINIT:2AABh)
 27297                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27298                                  ;%if 0
 27299                                  ;ifdef	MULTI_CONFIG
 27300 0000270C E89B1A                  	call	query_user              ; query the user if config_cmd
 27301 0000270F 7223                    	jc	short tryl		; has the CONFIG_OPTION_QUERY bit set
 27302                                  ;endif
 27303                                  ;%endif ; 30/10/2022
 27304                                  
 27305                                  	; 14/12/2022
 27306                                  	; ds = cs
 27307                                  
 27308 00002711 BF[661E]                	mov	di,files_parms
 27309 00002714 31C9                    	xor	cx,cx
 27310                                  	; 03/01/2023
 27311                                  	;mov	dx,cx
 27312                                  do67:
 27313 00002716 E84D02                  	call	sysinit_parse
 27314 00002719 7303                    	jnc	short if67		; parse error
 27315                                  	;call	badparm_p		;  and show messages and end the search loop.
 27316                                  	;jmp	short sr67
 27317                                  	; 03/01/2023
 27318 0000271B E98F01                  	jmp	badparm_p_coff
 27319                                  if67:
 27320 0000271E 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27321 00002721 7408                    	je	short en67		; then end the $endloop
 27322                                  
 27323                                  	; 14/12/2022
 27324                                  	; ds = cs
 27325                                  	;;mov	al,[cs:rv_dword]
 27326                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27327                                  	;mov	[cs:p_files],al		; save it temporarily
 27328                                  	;mov	al,[rv_dword]
 27329 00002723 A0[031E]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 27330 00002726 A2[851E]                	mov	[p_files],al
 27331                                  
 27332 00002729 EBEB                    	jmp	short do67
 27333                                  en67:
 27334                                  	; 14/12/2022
 27335                                  	; ds = cs
 27336 0000272B A0[851E]                	mov	al,[p_files]
 27337 0000272E A2[9D02]                	mov	[FILES],al	
 27338                                  	;mov	al,[cs:p_files]
 27339                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 27340                                  sr67:
 27341 00002731 E90EFA                  	jmp	coff
 27342                                  
 27343                                  ; 04/04/2019 - Retro DOS v4.0
 27344                                  
 27345                                  ;------------------------------------------------------------------------------
 27346                                  ; lastdrive command
 27347                                  ;------------------------------------------------------------------------------
 27348                                  
 27349                                  ;******************************************************************************
 27350                                  ; function: parse the parameters of lastdrive= command. 		      *
 27351                                  ;									      *
 27352                                  ; input :								      *
 27353                                  ;	es:si -> parameters in command line.				      *
 27354                                  ; output:								      *
 27355                                  ;	set the variable num_cds.					      *
 27356                                  ;									      *
 27357                                  ; subroutines to be called:						      *
 27358                                  ;	sysinit_parse							      *
 27359                                  ; logic:								      *
 27360                                  ; {									      *
 27361                                  ;	set di points to ldrv_parms;					      *
 27362                                  ;	set dx,cx to 0; 						      *
 27363                                  ;	while (end of command line)					      *
 27364                                  ;	{ sysinit_parse;						      *
 27365                                  ;	  if (no error) then						      *
 27366                                  ;	     set num_cds to the returned value; 			      *
 27367                                  ;	  else	/*error exit*/						      *
 27368                                  ;	     error exit;						      *
 27369                                  ;	};								      *
 27370                                  ; };									      *
 27371                                  ;									      *
 27372                                  ;******************************************************************************
 27373                                  
 27374                                  tryl:
 27375 00002734 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 27376 00002737 7528                    	jne	short tryp
 27377                                  
 27378                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27379                                  ; (SYSINIT:2AE0h)
 27380                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27381                                  ;%if 0
 27382 00002739 E86E1A                  	call	query_user      ; query the user if config_cmd
 27383 0000273C 7223                    	jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 27384                                  ;endif
 27385                                  ;%endif ; 30/10/2022
 27386                                  
 27387                                  	; 14/12/2022
 27388                                  	; ds = cs
 27389                                  
 27390 0000273E BF[BD1E]                	mov	di,ldrv_parms
 27391 00002741 31C9                    	xor	cx,cx
 27392                                  	; 03/01/2023
 27393                                  	;mov	dx,cx
 27394                                  do73:
 27395 00002743 E82002                  	call	sysinit_parse
 27396 00002746 7303                    	jnc	short if73	; parse error
 27397                                  	;call	badparm_p	;  and show messages and end the search loop.
 27398                                  	;jmp	short sr73
 27399                                  	; 03/01/2023
 27400 00002748 E96201                  	jmp	badparm_p_coff
 27401                                  if73:
 27402 0000274B 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27403 0000274E 7408                    	je	short en73	; then end the $endloop
 27404                                  
 27405                                  	; 14/12/2022
 27406                                  	; ds = cs
 27407                                  	;;mov	al,[cs:rv_dword]
 27408                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 27409                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 27410                                  
 27411                                  	;mov	al,[rv_dword]
 27412 00002750 A0[031E]                	mov	al,[rv_byte]
 27413 00002753 A2[D11E]                	mov	[p_ldrv],al
 27414                                  
 27415 00002756 EBEB                    	jmp	short do73
 27416                                  en73:
 27417                                  	; 14/12/2022
 27418                                  	; ds = cs
 27419 00002758 A0[D11E]                	mov	al,[p_ldrv]
 27420 0000275B A2[A002]                	mov	[NUM_CDS],al
 27421                                  	;mov	al,[cs:p_ldrv]
 27422                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 27423                                  sr73:
 27424 0000275E E9E1F9                  	jmp	coff
 27425                                  
 27426                                  ;--------------------------------------------------------------------------
 27427                                  ; setting drive parameters
 27428                                  ;--------------------------------------------------------------------------
 27429                                  
 27430                                  tryp:
 27431 00002761 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 27432 00002764 7516                    	jne	short tryk
 27433                                  
 27434                                  ; 31/12/2022 - Retro DOS v4.2
 27435                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27436                                  ;%if 0
 27437                                  ;ifdef	MULTI_CONFIG
 27438 00002766 E8411A                  	call	query_user      ; query the user if config_cmd
 27439 00002769 7211                    	jc	short tryk	; has the CONFIG_OPTION_QUERY bit set
 27440                                  ;endif
 27441                                  ;%endif ; 30/10/2022
 27442                                  
 27443 0000276B E8080F                  	call	parseline
 27444 0000276E 7209                    	jc	short trypbad
 27445 00002770 E8280E                  	call	setparms
 27446 00002773 E85E0E                  	call	diddleback
 27447                                  
 27448                                  ; No error check here, because setparms and diddleback have no error 
 27449                                  ; returns, and setparms as coded now can return with carry set. 
 27450                                  ;       jc	short trypbad
 27451                                  
 27452                                  	; 12/12/2022
 27453                                  	; cf = 0
 27454                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27455                                  	;jc	short trypbad
 27456                                  	
 27457 00002776 E9C9F9                  	jmp	coff
 27458                                  trypbad:
 27459 00002779 E90D02                  	jmp	badop
 27460                                  
 27461                                  ;--------------------------------------------------------------------------
 27462                                  ; setting internal stack parameters
 27463                                  ; stacks=m,n where
 27464                                  ;	m is the number of stacks (range 8 to 64,default 9)
 27465                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 27466                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 27467                                  ;	any combinations that are not within the specified limits will
 27468                                  ;	result in "unrecognized command" error.
 27469                                  ;--------------------------------------------------------------------------
 27470                                  
 27471                                  ;**************************************************************************
 27472                                  ;									  *
 27473                                  ; function: parse the parameters of stacks= command.			  *
 27474                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 27475                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 27476                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 27477                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 27478                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 27479                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 27480                                  ;	    (or if "0,0" pair has been entered.)			  *
 27481                                  ; input :								  *
 27482                                  ;	es:si -> parameters in command line.				  *
 27483                                  ; output:								  *
 27484                                  ;	set the variables stack_count,stack_size.			  *
 27485                                  ;									  *
 27486                                  ; subroutines to be called:						  *
 27487                                  ;	sysinit_parse							  *
 27488                                  ; logic:								  *
 27489                                  ; {									  *
 27490                                  ;	set di points to stks_parms;					  *
 27491                                  ;	set dx,cx to 0; 						  *
 27492                                  ;	while (end of command line)					  *
 27493                                  ;	{ sysinit_parse;						  *
 27494                                  ;	  if (no error) then						  *
 27495                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 27496                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 27497                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 27498                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 27499                                  ;	     }								  *
 27500                                  ;	  else	/*error exit*/						  *
 27501                                  ;	     error exit;						  *
 27502                                  ;	};								  *
 27503                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 27504                                  ;	if o.k.,then set stack_count,stack_size;			  *
 27505                                  ;	 else error_exit;						  *
 27506                                  ; };									  *
 27507                                  ;**************************************************************************
 27508                                  
 27509                                  tryk:
 27510                                          ;if      stacksw
 27511                                  
 27512 0000277C 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 27513 0000277F 7402                    	je	short do_tryk
 27514                                  skip_it4:
 27515 00002781 EB79                    	jmp	short trys	; 15/12/2022
 27516                                  do_tryk:
 27517                                  
 27518                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27519                                  ; (SYSINIT:2B33h)
 27520                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27521                                  ;%if 0
 27522                                  ;ifdef	MULTI_CONFIG
 27523 00002783 E8241A                         call	query_user              ; query the user if config_cmd
 27524 00002786 72F9                           jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 27525                                  ;endif
 27526                                  ;%endif	; 30/10/2022
 27527                                  
 27528                                  	; 14/12/2022
 27529                                  	; ds = cs
 27530                                  
 27531 00002788 BF[D21E]                	mov	di,stks_parms
 27532 0000278B 31C9                    	xor	cx,cx
 27533                                  	; 03/01/2023
 27534                                  	;mov	dx,cx
 27535                                  do79:
 27536 0000278D E8D601                  	call	sysinit_parse
 27537 00002790 730B                    	jnc	short if79		; parse error
 27538                                  
 27539 00002792 BA[914C]                	mov	dx,badstack		; "invalid stack parameter"
 27540 00002795 E8911E                  	call	print			;  and show messages and end the search loop.
 27541 00002798 E83902                  	call	error_line
 27542                                  	;jmp	sr79
 27543                                  	; 11/12/2022
 27544 0000279B EB39                    	jmp	short sr79
 27545                                  if79:
 27546 0000279D 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27547 000027A0 7412                    	je	short en79		; then end the $endloop
 27548                                  
 27549                                  	; 14/12/2022
 27550                                  	; ds = cs
 27551                                  
 27552                                  	;;mov	ax,[cs:rv_dword]
 27553                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27554                                  	;mov	ax,[rv_dword]
 27555 000027A2 A1[031E]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 27556                                  
 27557 000027A5 83F901                  	cmp	cx,1
 27558 000027A8 7505                    	jne	short if83
 27559                                  
 27560                                  	; 14/12/2022
 27561                                  	;mov	[cs:p_stack_count],ax
 27562                                  	;jmp	short en83
 27563 000027AA A3[071F]                	mov	[p_stack_count],ax
 27564 000027AD EBDE                    	jmp	short do79
 27565                                  if83:
 27566                                  	; 14/12/2022
 27567                                  	;mov	[cs:p_stack_size],ax
 27568 000027AF A3[091F]                	mov	[p_stack_size],ax
 27569                                  en83:
 27570 000027B2 EBD9                    	jmp	short do79
 27571                                  en79:
 27572                                  	; 14/12/2022
 27573                                  	; ds = cs
 27574 000027B4 A1[071F]                	mov	ax,[p_stack_count]
 27575 000027B7 09C0                    	or	ax,ax
 27576 000027B9 741E                    	jz	short if87		
 27577                                  
 27578                                  	; 14/12/2022
 27579                                  	;cmp	word [p_stack_count],0
 27580                                  	;;cmp	word [cs:p_stack_count],0
 27581                                  	;je	short if87
 27582                                  
 27583                                  	; 14/12/2022
 27584 000027BB 83F808                  	cmp	ax, mincount ; 8
 27585                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 27586                                  	; 15/12/2022
 27587 000027BE 721F                    	jb	short en87
 27588 000027C0 833E[091F]20            	cmp	word [p_stack_size],minsize ; 32
 27589                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 27590                                  	; 15/12/2022
 27591 000027C5 7218                    	jb	short en87
 27592                                  if94:
 27593                                  	; 14/12/2022
 27594                                  	; ds = cs
 27595                                  	; ax = [p_stack_count]
 27596                                  	;mov	ax,[p_stack_count]
 27597                                  	;;mov	ax,[cs:p_stack_count]
 27598 000027C7 A3[8A02]                	mov	[stack_count],ax
 27599                                  	;mov	[cs:stack_count],ax
 27600                                  	;mov	ax,[cs:p_stack_size]
 27601 000027CA A1[091F]                	mov	ax,[p_stack_size]
 27602                                  	;mov	[cs:stack_size],ax
 27603 000027CD A3[8C02]                	mov	[stack_size],ax
 27604                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27605 000027D0 C706[8E02]FFFF          	mov	word [stack_addr],-1
 27606                                  sr79:
 27607 000027D6 E969F9                  	jmp	coff
 27608                                  
 27609                                  if87:
 27610                                  	; 14/12/2022
 27611 000027D9 3906[091F]              	cmp	[p_stack_size],ax ; 0
 27612 000027DD 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 27613                                  	;cmp	word [cs:p_stack_size],0
 27614                                  	;je	short if94
 27615                                  en87:
 27616                                  	; 15/12/2022
 27617                                  	; ([p_stack_count] is invalid, use default values)
 27618                                  	; 14/12/2022
 27619                                  	; ds = cs
 27620 000027DF C706[8A02]0900          	mov	word [stack_count],defaultcount ; 9
 27621 000027E5 C706[8C02]8000          	mov	word [stack_size],defaultsize ; 128
 27622 000027EB C706[8E02]0000          	mov	word [stack_addr],0
 27623                                  	;mov	word [cs:stack_count],defaultcount ; 9
 27624                                  	;				; reset to default value.
 27625                                  	;mov	word [cs:stack_size],defaultsize ; 128
 27626                                  	;mov	word [cs:stack_addr],0
 27627                                  
 27628 000027F1 BA[914C]                	mov	dx,badstack
 27629 000027F4 E8321E                  	call	print
 27630 000027F7 E8DA01                  	call	error_line
 27631 000027FA EBDA                    	jmp	short sr79
 27632                                  
 27633                                  ; 15/12/2022
 27634                                  %if 0
 27635                                  	mov	di,stks_parms
 27636                                  	xor	cx,cx
 27637                                  	; 03/01/2023
 27638                                  	;mov	dx,cx
 27639                                  do79:
 27640                                  	call	sysinit_parse
 27641                                  	jnc	short if79		; parse error
 27642                                  
 27643                                  	mov	dx,badstack		; "invalid stack parameter"
 27644                                  	call	print			;  and show messages and end the search loop.
 27645                                  	call	error_line
 27646                                  	;jmp	sr79
 27647                                  	; 11/12/2022
 27648                                  	jmp	short sr79
 27649                                  if79:
 27650                                  	cmp	ax,_$P_RC_EOL		; end of line?
 27651                                  	je	short en79		; then end the $endloop
 27652                                  
 27653                                  	;mov	ax,[cs:rv_dword]
 27654                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27655                                  	cmp	cx,1
 27656                                  	jne	short if83
 27657                                  
 27658                                  	mov	[cs:p_stack_count],ax
 27659                                  	jmp	short en83
 27660                                  if83:
 27661                                  	mov	[cs:p_stack_size],ax
 27662                                  en83:
 27663                                  	jmp	short do79
 27664                                  en79:
 27665                                  	cmp	word [cs:p_stack_count],0
 27666                                  	je	short if87
 27667                                  
 27668                                  	cmp	word [cs:p_stack_count],mincount ; 8
 27669                                  	jb	short ll88
 27670                                  	cmp	word [cs:p_stack_size],minsize ; 32
 27671                                  	jnb	short if88
 27672                                  ll88:
 27673                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27674                                  if88:
 27675                                  	jmp	short en87
 27676                                  
 27677                                  	; 11/12/2022
 27678                                  if94:
 27679                                  	mov	ax,[cs:p_stack_count]
 27680                                  	mov	[cs:stack_count],ax
 27681                                  	mov	ax,[cs:p_stack_size]
 27682                                  	mov	[cs:stack_size],ax
 27683                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27684                                  sr79:
 27685                                  	jmp	coff
 27686                                  
 27687                                  if87:
 27688                                  	cmp	word [cs:p_stack_size],0
 27689                                  	je	short en87
 27690                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27691                                  en87:
 27692                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 27693                                  	jne	short if94
 27694                                  
 27695                                  	mov	word [cs:stack_count],defaultcount ; 9
 27696                                  					; reset to default value.
 27697                                  	mov	word [cs:stack_size],defaultsize ; 128
 27698                                  	mov	word [cs:stack_addr],0
 27699                                  
 27700                                  	mov	dx,badstack
 27701                                  	call	print
 27702                                  	call	error_line
 27703                                  	jmp	short sr79
 27704                                  
 27705                                  %endif
 27706                                  
 27707                                  ; 11/12/2022
 27708                                  %if 0 
 27709                                  
 27710                                  if94:
 27711                                  	mov	ax,[cs:p_stack_count]
 27712                                  	mov	[cs:stack_count],ax
 27713                                  	mov	ax,[cs:p_stack_size]
 27714                                  	mov	[cs:stack_size],ax
 27715                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27716                                  sr79:
 27717                                  	jmp	coff
 27718                                  
 27719                                  %endif
 27720                                  
 27721                                  	;endif
 27722                                  
 27723                                  ;------------------------------------------------------------------------
 27724                                  ; shell command
 27725                                  ;------------------------------------------------------------------------
 27726                                  
 27727                                  trys:
 27728 000027FC 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 27729 000027FF 755D                    	jne	short tryx
 27730                                  
 27731                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27732                                  ; (SYSINIT:2BE1h)
 27733                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27734                                  ;%if 0
 27735                                  ;ifdef	MULTI_CONFIG
 27736 00002801 E8A619                  	call	query_user              ; query the user if config_cmd
 27737 00002804 7258                    	jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 27738 00002806 2EC606[0047]01          	mov	byte [cs:newcmd],1
 27739                                  ;endif
 27740                                  ;%endif ; 30/10/2022
 27741                                  
 27742                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 27743                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27744                                  	;mov	byte [cs:command_line+1],0
 27745                                  	; 15/12/2022
 27746                                  	; ds = cs
 27747 0000280C C606[9247]00            	mov	byte [command_line+1],0
 27748                                  
 27749 00002811 BF[0447]                        mov     di,commnd+1		; we already have the first char
 27750 00002814 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 27751                                  storeshell:
 27752 00002817 E8A301                  	call	getchr
 27753 0000281A 08C0                            or      al,al                   ; this is the normal case: "organize"
 27754 0000281C 741F                            jz	short getshparms	; put a ZERO right after the filename
 27755                                  
 27756 0000281E 3C20                            cmp     al," "                  ; this may happen if there are no args
 27757 00002820 7209                            jb	short endofshell	; I suppose...
 27758 00002822 8805                    	mov	[di],al
 27759 00002824 47                      	inc	di
 27760                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 27761                                          ;jb	short storeshell	; commnd (the filename)
 27762                                          ;jmp	short endofshell
 27763                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27764                                  	;jmp	short storeshell
 27765                                  	; 03/01/2023
 27766 00002825 81FF[4247]              	cmp	di,commnd+63		; this makes sure we don't overflow
 27767 00002829 72EC                            jb	short storeshell	; commnd (the filename)
 27768                                  	;jmp	short endofshell
 27769                                  
 27770                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27771                                  ;getshparms:
 27772                                  ;	mov     byte [di],0		; zero-terminate the filename
 27773                                  ;	mov     di,command_line+1	; prepare to process the command-line
 27774                                  ;
 27775                                  ;parmloop:
 27776                                  ;	call	getchr
 27777                                  ;	cmp	al," "
 27778                                  ;	jb	short endofparms
 27779                                  ;	mov	[di],al
 27780                                  ;	inc	di
 27781                                  ;	cmp     di,command_line+126
 27782                                  ;	jb	short parmloop
 27783                                  ;endofparms:
 27784                                  ;	mov     cx,di
 27785                                  ;	sub     cx,command_line+1
 27786                                  ;	mov     [cs:command_line],cl
 27787                                  ;
 27788                                  ;endofshell:
 27789                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 27790                                  ;					; the command-line as the case may be)
 27791                                  ;skipline:
 27792                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 27793                                  ;       je	short endofline		; the line: watch for ever-present LF
 27794                                  ;call	getchr
 27795                                  ;       jnc	short skipline		; keep it up as long as there are chars
 27796                                  ;
 27797                                  ;endofline:
 27798                                  ;       jmp     conflp
 27799                                  
 27800                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27801                                  endofshell:
 27802 0000282B C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 27803                                  					; the command-line as the case may be)
 27804 0000282E E88C01                  	call	getchr
 27805                                  skipline:
 27806 00002831 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 27807 00002833 7405                    	je	short endofline		; the line: watch for ever-present LF
 27808 00002835 E88501                  	call	getchr
 27809                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.1 IO.SYS)
 27810                                  	; (SYSINIT:2C3Ah)
 27811 00002838 73F7                    	jnb	short skipline
 27812                                  	
 27813                                  endofline:
 27814 0000283A E9ADF8                  	jmp     conflp
 27815                                  
 27816                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27817                                  getshparms:
 27818                                  	; 18/12/2022
 27819                                  	; al = 0
 27820 0000283D 8805                    	mov	[di],al ; 0
 27821                                  	;mov	byte [di],0		; zero-terminate the filename
 27822 0000283F BF[9247]                	mov     di,command_line+1	; prepare to process the command-line
 27823                                  parmloop:
 27824 00002842 E87801                  	call	getchr
 27825 00002845 3C20                    	cmp	al," " ; 20h
 27826                                  	;jb	short endofshell
 27827                                  	; 03/01/2023
 27828 00002847 7209                    	jb	short endofparms
 27829                                  
 27830 00002849 8805                    	mov	[di],al
 27831 0000284B 47                      	inc	di
 27832                                  	;jmp	short parmloop
 27833                                  	; 03/01/2023 - Retro DOS v4.2
 27834 0000284C 81FF[0F48]              	cmp     di,command_line+126
 27835 00002850 72F0                    	jb	short parmloop
 27836                                  
 27837                                  	; 03/01/2023 - Retro DOS v4.2
 27838                                  endofparms:
 27839 00002852 89F9                    	mov	cx,di
 27840 00002854 81E9[9247]              	sub	cx,command_line+1
 27841                                  	;mov	[cs:command_line],cl
 27842                                  	; 03/01/2023
 27843 00002858 880E[9147]              	mov	[command_line],cl
 27844 0000285C EBCD                    	jmp	short endofshell
 27845                                  
 27846                                  ;------------------------------------------------------------------------
 27847                                  ; fcbs command
 27848                                  ;------------------------------------------------------------------------
 27849                                  
 27850                                  ;************************************************************************
 27851                                  ; function: parse the parameters of fcbs= command.			*
 27852                                  ;									*
 27853                                  ; input :								*
 27854                                  ;	es:si -> parameters in command line.				*
 27855                                  ; output:								*
 27856                                  ;	set the variables fcbs,keep.					*
 27857                                  ;									*
 27858                                  ; subroutines to be called:						*
 27859                                  ;	sysinit_parse							*
 27860                                  ; logic:								*
 27861                                  ; {									*
 27862                                  ;	set di points to fcbs_parms;					*
 27863                                  ;	set dx,cx to 0; 						*
 27864                                  ;	while (end of command line)					*
 27865                                  ;	{ sysparse;							*
 27866                                  ;	  if (no error) then						*
 27867                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 27868                                  ;		   fcbs = result_val._$P_picked_val;			*
 27869                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 27870                                  ;		   keep = result_val._$P_picked_val;			*
 27871                                  ;	     }								*
 27872                                  ;	  else	/*error exit*/						*
 27873                                  ;	     error exit;						*
 27874                                  ;	};								*
 27875                                  ; };									*
 27876                                  ;************************************************************************
 27877                                  
 27878                                  tryx:
 27879 0000285E 80FC58                          cmp     ah,CONFIG_FCBS  ; 'X'
 27880                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27881 00002861 7534                    	jne	short try1
 27882                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27883                                  	;jne	short tryy	; comment command
 27884                                  
 27885                                  ; 31/12/2022 - Retro DOS v4.2
 27886                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27887                                  ;%if 0
 27888                                  ;ifdef	MULTI_CONFIG
 27889 00002863 E84419                  	call	query_user      ; query the user if config_cmd
 27890 00002866 722F                    	jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 27891                                  ;endif
 27892                                  ;%endif ; 30/10/2022
 27893                                  
 27894 00002868 BF[861E]                	mov	di,fcbs_parms
 27895 0000286B 31C9                    	xor	cx,cx
 27896                                  	; 03/01/2023
 27897                                  	;mov	dx,cx
 27898                                  do98:
 27899 0000286D E8F600                  	call	sysinit_parse
 27900                                          ; 03/01/2023
 27901                                  	;jnc	short if98	; parse error
 27902                                          ;call	badparm_p	;  and show messages and end the search loop.
 27903                                  	;jmp	short sr98
 27904                                  	;------------------------
 27905                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27906 00002870 723B                    	jc	short badparm_p_coff
 27907                                  if98:
 27908 00002872 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27909 00002875 7412                    	je	short en98	; then end the $endloop
 27910                                  
 27911                                  	;;mov	al,[cs:rv_dword]
 27912                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27913                                  	; 15/12/2022
 27914                                  	; ds = cs
 27915 00002877 A0[031E]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 27916 0000287A 83F901                  	cmp	cx,1		; the first positional?
 27917 0000287D 7505                    	jne	short if102
 27918                                  	;mov	[cs:p_fcbs],al
 27919                                  	; 15/12/2022
 27920 0000287F A2[BB1E]                	mov	[p_fcbs],al
 27921                                  	;jmp	short en102
 27922 00002882 EBE9                    	jmp	short do98
 27923                                  if102:
 27924                                  	;mov	[cs:p_keep],al
 27925                                  	; 15/12/2022
 27926 00002884 A2[BC1E]                	mov	[p_keep],al
 27927                                  en102:
 27928 00002887 EBE4                    	jmp	short do98
 27929                                  en98:
 27930                                  	; 15/12/2022
 27931                                  	; ds = cs
 27932 00002889 A0[BB1E]                	mov	al,[p_fcbs]
 27933 0000288C A2[9E02]                	mov	[FCBS],al
 27934 0000288F C606[9F02]00            	mov	byte [KEEP],0
 27935                                  	;mov	al,[cs:p_fcbs]	 ; M017
 27936                                  	;mov	[cs:FCBS],al	 ; M017
 27937                                  	;mov	byte [cs:KEEP],0 ; M017
 27938                                  sr98:
 27939 00002894 E9ABF8                  	jmp	coff
 27940                                  
 27941                                  ; 31/12/2022 - Retro DOS v4.2
 27942                                  %if 0
 27943                                  
 27944                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27945                                  ;-------------------------------------------------------------------------
 27946                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 27947                                  ;		line number
 27948                                  ;-------------------------------------------------------------------------
 27949                                  
 27950                                  tryy:
 27951                                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 27952                                  	jne	short try0
 27953                                  
 27954                                  donothing:
 27955                                  	; 15/12/2022
 27956                                  	; ds = cs
 27957                                  	dec	word [chrptr]
 27958                                  	inc	word [count]
 27959                                  	; 02/11/2022
 27960                                  	;dec	word [cs:chrptr]
 27961                                  	;inc	word [cs:count]
 27962                                  
 27963                                  	jmp	coff
 27964                                  
 27965                                  ;------------------------------------------------------------------------
 27966                                  ; rem command
 27967                                  ;------------------------------------------------------------------------
 27968                                  
 27969                                  try0:				; do nothing with this line.
 27970                                  	cmp     ah,CONFIG_REM ; '0'
 27971                                  	je	short donothing
 27972                                  
 27973                                  %endif
 27974                                  
 27975                                  ; 07/04/2019 - Retro DOS v4.0
 27976                                  
 27977                                  ;-----------------------------------------------------------------------
 27978                                  ; switches command
 27979                                  ;-----------------------------------------------------------------------
 27980                                  
 27981                                  ;***********************************************************************
 27982                                  ;								       *
 27983                                  ; function: parse the option switches specified.		       *
 27984                                  ; note - this command is intended for the future use also.	       *
 27985                                  ; when we need to set system data flag,use this command.	       *
 27986                                  ;								       *
 27987                                  ; input :							       *
 27988                                  ;	es:si -> parameters in command line.			       *
 27989                                  ; output:							       *
 27990                                  ;	p_swit_k set if /k option chosen.			       *
 27991                                  ;								       *
 27992                                  ; subroutines to be called:					       *
 27993                                  ;	sysinit_parse						       *
 27994                                  ; logic:							       *
 27995                                  ; {								       *
 27996                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 27997                                  ;	set dx,cx to 0; 					       *
 27998                                  ;	while (end of command line)				       *
 27999                                  ;	{ sysinit_parse;					       *
 28000                                  ;	  if (no error) then					       *
 28001                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 28002                                  ;		    p_swit_k = 1				       *
 28003                                  ;	       endif						       *
 28004                                  ;	  else {show error message;error exit}			       *
 28005                                  ;	};							       *
 28006                                  ; };								       *
 28007                                  ;								       *
 28008                                  ;***********************************************************************
 28009                                  
 28010                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 28011                                  
 28012                                  try1:
 28013 00002897 80FC31                          cmp     ah,CONFIG_SWITCHES ; '1'
 28014 0000289A 7402                    	je	short do_try1	; switches= command entered?
 28015                                  skip_it5:
 28016                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28017                                  	; (SYSINIT:2C8Ah)
 28018 0000289C EB7F                    	jmp	tryv
 28019                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28020                                  	;jmp	tryz
 28021                                  
 28022                                  do_try1:
 28023                                  
 28024                                  ; 31/12/2022 - Retro DOS v4.2
 28025                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28026                                  ;%if 0
 28027                                  ;ifdef	MULTI_CONFIG
 28028 0000289E E80919                  	call	query_user      ; query the user if config_cmd
 28029 000028A1 72F9                    	jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 28030                                  ;endif
 28031                                  ;%endif ; 30/10/2022
 28032                                  
 28033 000028A3 BF[201F]                	mov	di,swit_parms
 28034 000028A6 31C9                    	xor	cx,cx
 28035                                  	; 03/01/2023
 28036                                  	;mov	dx,cx
 28037                                  do110:
 28038 000028A8 E8BB00                  	call	sysinit_parse
 28039 000028AB 7306                    	jnc	short if110	; parse error
 28040                                  	;call	badparm_p	;  and show messages and end the search loop.
 28041                                  	;jmp	short sr110
 28042                                  	; -----------------------
 28043                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28044                                  badparm_p_coff:
 28045 000028AD E8E500                  	call	badparm_p
 28046 000028B0 E98FF8                  	jmp	coff
 28047                                  	;------------------------
 28048                                  if110:
 28049 000028B3 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 28050 000028B6 742D                    	je	short en110	; then jmp to $endloop for semantic check
 28051                                  
 28052                                  	; 15/12/2022
 28053                                  	; ds = cs
 28054                                  	;;cmp	word [cs:result_val_swoff],swit_k
 28055                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 28056 000028B8 813E[011E][3C1F]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 28057 000028BE 7507                    	jne	short if115	;				;M059
 28058                                  	; 15/12/2022
 28059 000028C0 C606[6F1F]01            	mov	byte [p_swit_k],1
 28060                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 28061 000028C5 EBE1                    	jmp	short do110
 28062                                  if115:	
 28063                                  	; 15/12/2022							;M059
 28064                                  	;;cmp	word [cs:result_val_swoff],swit_t
 28065                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 28066 000028C7 813E[011E][601F]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 28067 000028CD 7507                    	jne	short if116					;M059 M063
 28068                                  	; 15/12/2022
 28069 000028CF C606[701F]01            	mov	byte [p_swit_t],1
 28070                                  	;mov	byte [cs:p_swit_t],1				;M059
 28071 000028D4 EBD2                    	jmp	short do110					;M059
 28072                                  if116:
 28073                                  	; 15/12/2022
 28074                                  	;;cmp	word [cs:result_val_swoff],swit_w
 28075                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 28076 000028D6 813E[011E][6C1F]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 28077 000028DC 75CA                    	jne	short do110					;M063
 28078                                  	; 15/12/2022
 28079 000028DE C606[711F]01            	mov	byte [p_swit_w],1
 28080                                  	;mov	byte [cs:p_swit_w],1				;M063
 28081 000028E3 EBC3                    	jmp	short do110					;M063
 28082                                  en110:
 28083                                  	; 15/12/2022
 28084                                  	; ds = cs
 28085 000028E5 803E[6F1F]01            	cmp	byte [p_swit_k],1
 28086                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 28087 000028EA 1E                      	push	ds
 28088                                  	;;mov	ax,Bios_Data
 28089                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 28090                                  	; 21/10/2022
 28091 000028EB B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 28092 000028EE 8ED8                    	mov	ds,ax
 28093 000028F0 750A                    	jne	short if117
 28094 000028F2 C606[E504]00            	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 28095 000028F7 C606[E604]01            	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 28096                                  if117:
 28097                                  	; 15/12/2022
 28098                                  	; ds <> cs
 28099 000028FC 2EA0[701F]              	mov	al,[cs:p_swit_t]				;M059
 28100 00002900 A2[F204]                	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 28101                                  
 28102 00002903 2E803E[711F]00          	cmp	byte [cs:p_swit_w],0				;M063
 28103 00002909 740E                    	je	short skip_dos_flag				;M063
 28104 0000290B 06                      	push	es
 28105 0000290C 53                      	push	bx
 28106 0000290D B452                    	mov	ah,GET_IN_VARS ; 52h				;M063
 28107 0000290F CD21                    	int	21h						;M063
 28108                                  			; DOS - 2+ internal - GET LIST OF LISTS
 28109                                  			; Return: ES:BX -> DOS list of lists
 28110                                  	;or	bytes [es:86h],2
 28111 00002911 26800E860002            	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 28112 00002917 5B                      	pop	bx
 28113 00002918 07                      	pop	es
 28114                                  skip_dos_flag:							;M063
 28115 00002919 1F                      	pop	ds
 28116                                  sr110:
 28117 0000291A E925F8                  	jmp	coff
 28118                                  
 28119                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28120                                  ; (SYSINIT:2D14h)
 28121                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28122                                  ;%if 0
 28123                                  
 28124                                  tryv:
 28125                                  
 28126                                  ;ifdef	MULTI_CONFIG
 28127                                  ;------------------------------------------------------------------------
 28128                                  ; set command (as in "set var=value<cr/lf>")
 28129                                  ;------------------------------------------------------------------------
 28130                                  
 28131 0000291D 80FC56                  	cmp	ah,CONFIG_SET  ; 'V'
 28132 00002920 750F                    	jne	short tryn
 28133 00002922 E88518                  	call	query_user      ; query the user if config_cmd
 28134 00002925 720A                    	jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 28135 00002927 E87A14                  	call	copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 28136 0000292A 73EE                    	jnc	short sr110	; no error
 28137                                  err:    
 28138 0000292C E8A500                  	call	error_line      ; whoops, display error in line XXX
 28139 0000292F EBE9                    	jmp	short sr110     ; jump to coff (to skip to next line)
 28140                                  
 28141                                  ;------------------------------------------------------------------------
 28142                                  ; numlock command (as in "numlock=on|off")
 28143                                  ;------------------------------------------------------------------------
 28144                                  tryn:
 28145 00002931 80FC4E                  	cmp	ah,CONFIG_NUMLOCK  ;'N'
 28146 00002934 750C                    	jne	short tryy            ;
 28147 00002936 E87118                  	call	query_user      ; query thye user if config_cmd
 28148 00002939 7207                    	jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 28149 0000293B E8E410                  	call	set_numlock
 28150 0000293E 72EC                    	jc	short err
 28151 00002940 EBD8                    	jmp	short sr110	; all done
 28152                                  
 28153                                  ;endif	;MULTI_CONFIG
 28154                                  
 28155                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28156                                  ;-------------------------------------------------------------------------
 28157                                  ; comment= do nothing. just decrese chrptr,and increase count for correct
 28158                                  ;		line number
 28159                                  ;-------------------------------------------------------------------------
 28160                                  
 28161                                  	; 31/12/2022
 28162                                  tryy:
 28163 00002942 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 28164 00002945 750B                    	jne	short try0
 28165                                  
 28166                                  donothing:
 28167                                  	; 15/12/2022
 28168                                  	; ds = cs
 28169 00002947 FF0E[5803]              	dec	word [chrptr]
 28170 0000294B FF06[5403]              	inc	word [count]
 28171                                  	; 02/11/2022
 28172                                  	;dec	word [cs:chrptr]
 28173                                  	;inc	word [cs:count]
 28174                                  
 28175 0000294F E9F0F7                  	jmp	coff
 28176                                  
 28177                                  ;------------------------------------------------------------------------
 28178                                  ; rem command
 28179                                  ;------------------------------------------------------------------------
 28180                                  
 28181                                  try0:				; do nothing with this line.
 28182 00002952 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 28183 00002955 74F0                    	je	short donothing
 28184                                  
 28185                                  ;%endif	; 30/10/2022
 28186                                  
 28187                                  ; 30/10/2022
 28188                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 28189                                  
 28190                                  ;------------------------------------------------------------------------
 28191                                  ; bogus command
 28192                                  ;------------------------------------------------------------------------
 28193                                  
 28194                                  tryz:
 28195 00002957 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 28196                                  	; 31/12/2022
 28197 0000295A 74EB                    	je	short donothing
 28198                                  	; 02/11/2022
 28199                                  	;je	short tryz_donothing
 28200                                  
 28201 0000295C FF0E[5803]              	dec	word [chrptr]
 28202 00002960 FF06[5403]              	inc	word [count]
 28203 00002964 EB23                    	jmp	short badop
 28204                                  
 28205                                  ; 31/12/2022
 28206                                  ;	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 28207                                  ;tryz_donothing:
 28208                                  ;	jmp	donothing
 28209                                  
 28210                                  ; 07/04/2019 - Retro DOS v4.0
 28211                                  
 28212                                  ;------------------------------------------------------------------------------
 28213                                  
 28214                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28215                                  ; (SYSINIT:2D5Dh)
 28216                                  
 28217                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28218                                  ;
 28219                                  ;
 28220                                  ;;***	CheckProtmanArena -- special hack for adjusting alloclim with Protman$
 28221                                  ;;
 28222                                  ;;	adjusts alloclim if Protman$ reduced our arena through a manual hack.
 28223                                  ;
 28224                                  ;CheckProtmanArena:
 28225                                  ;	push	es
 28226                                  ;	mov	ax,[cs:area]	; get our arena header
 28227                                  ;	dec	ax
 28228                                  ;	mov	es,ax
 28229                                  ;	add	ax,[es:3]	; find end of arena
 28230                                  ;	inc	ax
 28231                                  ;	cmp	ax,[cs:ALLOCLIM] ; is it less than alloclim?
 28232                                  ;	ja	short CheckProtmanDone
 28233                                  ;
 28234                                  ;	mov	[cs:ALLOCLIM],ax ; reduce alloclim then
 28235                                  ;CheckProtmanDone:
 28236                                  ;	pop	es
 28237                                  ;	retn
 28238                                  
 28239                                  ;------------------------------------------------------------------------------
 28240                                  
 28241                                  sysinit_parse:
 28242                                  
 28243                                  ;------------------------------------------------------------------------------
 28244                                  ;set up registers for sysparse
 28245                                  ;in)	es:si -> command line in confbot
 28246                                  ;	di -> offset of the parse control definition.
 28247                                  ;
 28248                                  ;out)	calls sysparse.
 28249                                  ;	carry will set if parse error.
 28250                                  ;	*** the caller should check the eol condition by looking at ax
 28251                                  ;	*** after each call.
 28252                                  ;	*** if no parameters are found,then ax will contain a error code.
 28253                                  ;	*** if the caller needs to look at the synomym@ of the result,
 28254                                  ;	***  the caller should use cs:@ instead of es:@.
 28255                                  ;	cx register should be set to 0 at the first time the caller calls this
 28256                                  ;	 procedure.
 28257                                  ;	ax - exit code
 28258                                  ;	bl - terminated delimeter code
 28259                                  ;	cx - new positional ordinal
 28260                                  ;	si - set to pase scanned operand
 28261                                  ;	dx - selected result buffer
 28262                                  ;------------------------------------------------------------------------------
 28263                                  
 28264                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28265                                  	; (SYSINIT:2D78h)
 28266                                  
 28267                                  	; 24/10/2022
 28268 00002966 06                      	push	es			;save es,ds
 28269 00002967 1E                      	push	ds
 28270                                  
 28271 00002968 06                      	push	es
 28272 00002969 1F                      	pop	ds			;now ds:si -> command line
 28273                                  
 28274 0000296A 0E                      	push	cs
 28275 0000296B 07                      	pop	es			;now es:di -> control definition
 28276                                  
 28277 0000296C 2E8C1E[E814]            	mov	[cs:badparm_seg],ds	;save the pointer to the parm
 28278 00002971 2E8936[E614]            	mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 28279                                  	;mov	dx,0
 28280                                  	; 03/01/2023
 28281 00002976 29D2                    	sub	dx,dx ; 0
 28282 00002978 E815EC                  	call	SysParse
 28283 0000297B 83F800                  	cmp	ax,_$P_No_Error	; 0	;no error
 28284                                  
 28285                                  ;**cas note:  when zero true after cmp, carry clear
 28286                                  
 28287                                  	;je	short ll4
 28288                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 28289                                  	; 12/12/2022
 28290 0000297E 7406                    	je	short en4 ; cf=0
 28291 00002980 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 28292                                  	;jne	short if4
 28293                                  	; 12/12/2022
 28294 00002983 7401                    	je	short en4 ; cf=0
 28295                                  
 28296                                  ; 12/12/2022
 28297                                  ;ll4:
 28298                                  ;	; 12/12/2022
 28299                                  ;	; cf=0
 28300                                  ;	;clc
 28301                                  ;	jmp	short en4
 28302                                  
 28303                                  if4:
 28304                                  	; 24/10/2022
 28305 00002985 F9                      	stc
 28306                                  en4:
 28307 00002986 1F                      	pop	ds
 28308 00002987 07                      	pop	es
 28309 00002988 C3                      	retn
 28310                                  
 28311                                  ; 11/12/2022
 28312                                  %if 0
 28313                                  
 28314                                  ;----------------------------------------------------------------------------
 28315                                  ;
 28316                                  ; procedure : badop_p
 28317                                  ;
 28318                                  ;             same thing as badop,but will make sure to set ds register back
 28319                                  ;             to sysinitseg and return back to the caller.
 28320                                  ;
 28321                                  ;----------------------------------------------------------------------------
 28322                                  
 28323                                  badop_p:
 28324                                  	push	cs
 28325                                  	pop	ds		;set ds to configsys seg.
 28326                                  	mov	dx,badopm
 28327                                  	call	print
 28328                                          ;call	error_line
 28329                                  	;retn
 28330                                  	; 11/12/2022
 28331                                  	jmp	error_line
 28332                                  
 28333                                  %endif
 28334                                  
 28335                                  ;----------------------------------------------------------------------------
 28336                                  ;
 28337                                  ; label : badop
 28338                                  ;
 28339                                  ;----------------------------------------------------------------------------
 28340                                  
 28341                                  badop:	
 28342 00002989 BA[524B]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 28343 0000298C E89A1C                  	call	print
 28344 0000298F E84200                  	call	error_line	;show "error in config.sys ..." .
 28345 00002992 E9ADF7                  	jmp	coff
 28346                                  
 28347                                  ;----------------------------------------------------------------------------
 28348                                  ;
 28349                                  ; procedure : badparm_p
 28350                                  ;
 28351                                  ;             show "bad command or parameters - xxxxxx"
 28352                                  ;             in badparm_seg,badparm_off -> xxxxx
 28353                                  ;
 28354                                  ;----------------------------------------------------------------------------
 28355                                  
 28356                                  	; 24/10/2022
 28357                                  badparm_p:
 28358                                  	; 11/12/2022
 28359                                  	; ds = cs
 28360                                  	; 11/12/2022
 28361                                  	;push	ds ; *
 28362 00002995 52                      	push	dx
 28363 00002996 56                      	push	si
 28364                                  
 28365                                  	; 11/12/2022
 28366                                  	; ds = cs
 28367                                  	;push	cs
 28368                                  	;pop	ds
 28369                                  
 28370 00002997 BA[794B]                	mov	dx,badparm
 28371 0000299A E88C1C                  	call	print			; "bad command or parameters - "
 28372 0000299D C536[E614]              	lds	si,[badparm_ptr]
 28373                                  
 28374                                  ;	print "xxxx" until cr.
 28375                                  
 28376                                  do1:
 28377 000029A1 8A14                    	mov	dl,[si]			; get next character
 28378 000029A3 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 28379 000029A6 7407                    	je	short en1		; exit loop if so
 28380                                  
 28381 000029A8 B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 28382 000029AA CD21                    	int	21h			; display character
 28383 000029AC 46                      	inc	si			; next character
 28384 000029AD EBF2                    	jmp	short do1
 28385                                  en1:
 28386 000029AF 0E                      	push	cs
 28387 000029B0 1F                      	pop	ds
 28388                                  
 28389 000029B1 BA[764B]                	mov	dx,crlfm
 28390 000029B4 E8721C                  	call	print
 28391 000029B7 E81A00                  	call	error_line
 28392                                  
 28393 000029BA 5E                      	pop	si
 28394 000029BB 5A                      	pop	dx
 28395                                  	; 11/12/2022
 28396                                  	;pop	ds ; *
 28397                                  badparmp_ret:
 28398 000029BC C3                      	retn
 28399                                  
 28400                                  ;----------------------------------------------------------------------------
 28401                                  ;
 28402                                  ; procedure : getchr
 28403                                  ;
 28404                                  ;----------------------------------------------------------------------------
 28405                                  
 28406                                  	; 24/10/2022
 28407                                  getchr:
 28408                                  	; 12/12/2022
 28409                                  	;push	cx
 28410                                  	;mov	cx,[count]
 28411                                  	;jcxz	nochar
 28412                                  	; 12/12/2022
 28413 000029BD 833E[5403]01            	cmp	word [count],1 
 28414 000029C2 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 28415                                  	
 28416 000029C4 8B36[5803]              	mov	si,[chrptr]
 28417 000029C8 268A04                  	mov	al,[es:si]
 28418 000029CB FF0E[5403]              	dec	word [count]
 28419 000029CF FF06[5803]              	inc	word [chrptr]
 28420                                  	; 12/12/202
 28421                                  	; cf=0
 28422                                  	;clc
 28423                                  ;get_ret:
 28424                                  	;pop	cx
 28425                                  	;retn
 28426                                  nochar: 
 28427                                  	; 12/12/2022
 28428                                  	; cf=1
 28429                                  	;stc
 28430                                  	;jmp	short get_ret
 28431                                  	
 28432 000029D3 C3                      	retn
 28433                                  
 28434                                  ; 11/12/2022
 28435                                  %if 0
 28436                                  
 28437                                  ;----------------------------------------------------------------------------
 28438                                  ;
 28439                                  ; procedure : incorrect_order
 28440                                  ;
 28441                                  ;             show "incorrect order in config.sys ..." message.
 28442                                  ;
 28443                                  ;----------------------------------------------------------------------------
 28444                                  
 28445                                  incorrect_order:
 28446                                  	mov	dx,badorder
 28447                                  	call	print
 28448                                  	call	showlinenum
 28449                                  	retn
 28450                                  
 28451                                  %endif
 28452                                  
 28453                                  ;----------------------------------------------------------------------------
 28454                                  ;
 28455                                  ; procedure : error_line
 28456                                  ;
 28457                                  ;             show "error in config.sys ..." message.
 28458                                  ;
 28459                                  ;----------------------------------------------------------------------------
 28460                                  
 28461                                  	; 11/12/2022
 28462                                  	; 24/10/2022
 28463                                  error_line:
 28464                                  	; 11/12/2022
 28465                                  	; ds = cs
 28466                                  	;push	cs
 28467                                  	;pop	ds
 28468                                  
 28469 000029D4 BA[AE4C]                	mov	dx,errorcmd
 28470 000029D7 E84F1C                  	call	print
 28471                                  	;call	showlinenum
 28472                                  	;retn
 28473                                  	; 11/12/2022
 28474                                  	;jmp	short shortlinemum
 28475                                  
 28476                                  ;----------------------------------------------------------------------------
 28477                                  ;
 28478                                  ; procedure : showlinenum
 28479                                  ;
 28480                                  ; convert the binary linecount to decimal ascii string in showcount
 28481                                  ; and display showcount at the current curser position.
 28482                                  ; in.) linecount
 28483                                  ;
 28484                                  ; out) the number is printed.
 28485                                  ;
 28486                                  ;----------------------------------------------------------------------------
 28487                                  
 28488                                  	; 11/12/2022
 28489                                  	; ds = cs
 28490                                  	; 24/10/2022
 28491                                  showlinenum:
 28492 000029DA 06                      	push	es
 28493                                  	; 11/12/2022
 28494                                  	;push	ds
 28495 000029DB 57                      	push	di
 28496                                  
 28497 000029DC 0E                      	push	cs
 28498 000029DD 07                      	pop	es		; es=cs
 28499                                  
 28500                                  	; 11/12/2022
 28501                                  	;push	cs
 28502                                  	;pop	ds
 28503                                  
 28504 000029DE BF[B302]                	mov	di,showcount+4	; di -> the least significant decimal field.
 28505 000029E1 B90A00                  	mov	cx,10		; decimal divide factor
 28506                                  	;mov	ax,[cs:linecount]
 28507                                  	; 11/12/2022
 28508 000029E4 A1[AD02]                	mov	ax,[linecount]
 28509                                  sln_loop:
 28510                                  	; 11/12/2022
 28511 000029E7 39C8                    	cmp	ax,cx ; < 10 ?
 28512                                  	;cmp	ax,10		; < 10?
 28513 000029E9 720C                    	jb	short sln_last
 28514                                  
 28515 000029EB 31D2                    	xor	dx,dx
 28516 000029ED F7F1                    	div	cx	; cx = 10
 28517 000029EF 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 28518 000029F2 8815                    	mov	[di],dl
 28519 000029F4 4F                      	dec	di
 28520 000029F5 EBF0                    	jmp	short sln_loop
 28521                                  
 28522                                  sln_last:
 28523 000029F7 0C30                    	or	al,30h	; "0"
 28524 000029F9 8805                    	mov	[di],al
 28525 000029FB 89FA                    	mov	dx,di
 28526 000029FD E8291C                  	call	print		; show it.
 28527 00002A00 5F                      	pop	di
 28528                                  	; 11/12/2022
 28529                                  	;pop	ds
 28530 00002A01 07                      	pop	es
 28531 00002A02 C3                      	retn
 28532                                  
 28533                                  ; 07/04/2019 - Retro DOS v4.0
 28534                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 28535                                  
 28536                                  ;----------------------------------------------------------------------------
 28537                                  ;
 28538                                  ; procedure : ProcDOS
 28539                                  ;
 28540                                  ;	Process the result of DOS= parsing
 28541                                  ;
 28542                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 28543                                  ;				= 2 for DOS=LOW
 28544                                  ;				= 3 for DOS=UMB
 28545                                  ;				= 4 for DOS=NOUMB
 28546                                  ;----------------------------------------------------------------------------
 28547                                  
 28548                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 28549                                  	; (SYTSINIT:2AB5h)
 28550                                  ProcDOS:
 28551                                  	; 01/01/2023
 28552                                  	; ds = cs
 28553 00002A03 30E4                    	xor	ah,ah
 28554                                  	;;mov	al,[cs:result_val_itag]
 28555                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 28556                                  	; 01/01/2023
 28557 00002A05 A0[001E]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 28558 00002A08 48                      	dec	ax
 28559 00002A09 7415                    	jz	short pd_hi
 28560 00002A0B 48                      	dec	ax
 28561 00002A0C 740E                    	jz	short pd_lo
 28562 00002A0E 48                      	dec	ax
 28563 00002A0F 7405                    	jz	short pd_umb
 28564                                  	;;mov	byte [cs:DevUMB],0
 28565                                  	; 18/12/2022
 28566                                  	;mov	byte [cs:DevUMB],ah ; 0
 28567                                  	; 01/01/2023
 28568 00002A11 8826[FC1F]              	mov	byte [DevUMB],ah ; 0
 28569 00002A15 C3                      	retn
 28570                                  pd_umb:
 28571                                  	; 01/01/2023
 28572 00002A16 C606[FC1F]FF            	mov	byte [DevUMB],0FFh
 28573                                  	;mov	byte [cs:DevUMB],0FFh
 28574 00002A1B C3                      	retn
 28575                                  pd_lo:
 28576                                  	; 01/01/2023
 28577 00002A1C A2[6A02]                	mov	[runhigh],al ; 0
 28578                                  	; 18/12/2022
 28579                                  	;mov	[cs:runhigh],al ; 0
 28580                                  	;;mov	byte [cs:runhigh],0
 28581 00002A1F C3                      	retn
 28582                                  pd_hi:
 28583                                  	; 01/01/2023
 28584 00002A20 C606[6A02]FF            	mov	byte [runhigh],0FFh
 28585                                  	;mov	byte [cs:runhigh],0FFh
 28586                                  limx:	; 11/12/2022
 28587 00002A25 C3                      	retn
 28588                                  
 28589                                  ;----------------------------------------------------------------------------
 28590                                  ;
 28591                                  ; procedure : LieInt12Mem
 28592                                  ;
 28593                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 28594                                  ;		alloclim set to the limit of low memory.
 28595                                  ;
 28596                                  ;	Output : none
 28597                                  ;
 28598                                  ;	Changes the ROM BIOS variable which stores the total low memory
 28599                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 28600                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 28601                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 28602                                  ;	converted into Ks and stored in 40:13h
 28603                                  ;
 28604                                  ;----------------------------------------------------------------------------
 28605                                  
 28606                                  LieInt12Mem:
 28607                                  	; 11/12/2022
 28608                                  	; ds = cs
 28609 00002A26 A1[A302]                	mov	ax,[ALLOCLIM]
 28610                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12 as alloclim
 28611                                  					; assuming that it is 3Com
 28612 00002A29 E84400                  	call	IsIt3Com		; Is it 3Com driver?
 28613 00002A2C 740A                    	jz	short lim_set		; yes, lie to him differently
 28614                                  	; 13/05/2019
 28615                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 28616                                  	;je	short limx		; no, don't lie
 28617                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12 as end of UMB
 28618                                  	; 11/12/2022
 28619                                  	; ds = cs
 28620 00002A2E 803E[0B20]00            	cmp	byte [DeviceHi],0
 28621 00002A33 74F0                    	je	short limx
 28622 00002A35 A1[F11F]                	mov	ax,[DevLoadEnd]
 28623                                  lim_set:
 28624                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28625                                  	; 11/12/2022
 28626                                  	;call	SetInt12Mem
 28627                                  ;limx:
 28628                                  	;retn
 28629                                  	
 28630                                  	;jmp	short SetInt12Mem 
 28631                                  
 28632                                  ;----------------------------------------------------------------------------
 28633                                  ;
 28634                                  ; procedure : SetInt12Mem
 28635                                  ;
 28636                                  ;	Input : AX = Memory size to be set (in paras)
 28637                                  ;	Output : none
 28638                                  ;
 28639                                  ;	Sets the variable 40:13 to the memory size passed in AX
 28640                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 28641                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 28642                                  ;	restoring the value of 40:13
 28643                                  ;
 28644                                  ;----------------------------------------------------------------------------
 28645                                  
 28646                                  	; 01/11/2022
 28647                                  SetInt12Mem:
 28648 00002A38 1E                      	push	ds
 28649 00002A39 BB4000                  	mov	bx,40h
 28650 00002A3C 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 28651 00002A3E 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 28652 00002A42 2E891E[0F20]            	mov	[cs:OldInt12Mem],bx	; save it
 28653 00002A47 B106                    	mov	cl,6
 28654 00002A49 D3E8                    	shr	ax,cl			; convert paras into Ks
 28655 00002A4B A31300                  	mov	[13h],ax		; Lie
 28656 00002A4E 2EC606[0E20]FF          	mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 28657 00002A54 1F                      	pop	ds
 28658                                  ;limx:
 28659 00002A55 C3                      	retn
 28660                                  
 28661                                  ;----------------------------------------------------------------------------
 28662                                  ;
 28663                                  ; procedure : TrueInt12Mem
 28664                                  ;
 28665                                  ;	Input : Int12Lied = 0 if we are not lying currently
 28666                                  ;			  = 0ffh if we are lying
 28667                                  ;		OldInt12Mem = Saved value of 40:13h
 28668                                  ;
 28669                                  ;	Output : none
 28670                                  ;
 28671                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 28672                                  ;	and resets the flag which indicates that we were lying
 28673                                  ;
 28674                                  ;----------------------------------------------------------------------------
 28675                                  
 28676                                  TrueInt12Mem:
 28677                                  	; 11/12/2022
 28678                                  	; ds = cs
 28679 00002A56 803E[0E20]00            	cmp	byte [Int12Lied],0
 28680                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 28681                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 28682                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 28683 00002A5B 7412                    	je	short timx		; no, we weren't
 28684                                  	; 18/12/2022
 28685 00002A5D B84000                  	mov	ax,40h
 28686 00002A60 8826[0E20]              	mov	[Int12Lied],ah ; 0
 28687                                  	;mov	byte [Int12Lied],0
 28688                                  	;mov	byte [cs:Int12Lied],0
 28689 00002A64 1E                      	push	ds
 28690                                  	;mov	ax,40h
 28691 00002A65 8ED8                    	mov	ds,ax
 28692 00002A67 2EA1[0F20]              	mov	ax,[cs:OldInt12Mem]
 28693 00002A6B A31300                  	mov	[13h],ax		; restore INT 12 memory
 28694 00002A6E 1F                      	pop	ds
 28695                                  timx:
 28696 00002A6F C3                      	retn
 28697                                  
 28698                                  ;----------------------------------------------------------------------------
 28699                                  ;
 28700                                  ; procedure : IsIt3Com?
 28701                                  ;
 28702                                  ;	Input : DevEntry = Seg:0 of device driver
 28703                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 28704                                  ;		 else Zero flag is reset
 28705                                  ;
 28706                                  ;----------------------------------------------------------------------------
 28707                                  
 28708                                  IsIt3Com:
 28709                                  	; 11/12/2022
 28710                                  	; ds = cs
 28711 00002A70 1E                      	push	ds
 28712 00002A71 06                      	push	es
 28713 00002A72 56                      	push	si
 28714                                  	; 11/12/2022
 28715 00002A73 C536[F31F]              	lds	si,[DevEntry]
 28716                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 28717 00002A77 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 28718 00002A7A 0E                      	push	cs
 28719 00002A7B 07                      	pop	es
 28720 00002A7C BF[1120]                	mov	di,ThreeComName
 28721 00002A7F B90800                  	mov	cx,8			; name length
 28722 00002A82 F3A6                    	rep	cmpsb
 28723 00002A84 5E                      	pop	si
 28724 00002A85 07                      	pop	es
 28725 00002A86 1F                      	pop	ds
 28726 00002A87 C3                      	retn
 28727                                  
 28728                                  ;M020 : BEGIN
 28729                                  ;----------------------------------------------------------------------------
 28730                                  
 28731                                  UpdatePDB:
 28732 00002A88 1E                      	push	ds
 28733 00002A89 B462                    	mov	ah,62h
 28734 00002A8B CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 28735 00002A8D 8EDB                    	mov	ds,bx
 28736 00002A8F 2E8B1E[A302]            	mov	bx,[cs:ALLOCLIM]
 28737                                  	;mov	[2],bx
 28738 00002A94 891E0200                	mov	[PDB.BLOCK_LEN],bx
 28739 00002A98 1F                      	pop	ds
 28740 00002A99 C3                      	retn
 28741                                  
 28742                                  ; M020 : END
 28743                                  
 28744                                  ;----------------------------------------------------------------------------
 28745                                  
 28746                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28747                                  ;%if 0
 28748                                  
 28749                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28750                                  ; (SYSINIT:2EEEh)
 28751                                  
 28752                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 28753                                  ;include highexit.inc	; umb's, etc
 28754                                  
 28755                                  ; ----------------------------------------------------------------------
 28756                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 28757                                  ; ----------------------------------------------------------------------
 28758                                  ; 07/04/2019 - Retro DOS v4.0
 28759                                  
 28760                                  ;******************************************************************************
 28761                                  ;
 28762                                  ; This file contains routines needed to parse and implement user-given
 28763                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 28764                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 28765                                  ; the variables in highvar.inc, for use by the rest of the routines.
 28766                                  ;
 28767                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 28768                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 28769                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 28770                                  ;    DH/LH module opts
 28771                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 28772                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 28773                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 28774                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 28775                                  ; available during the load.
 28776                                  ;
 28777                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 28778                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 28779                                  ; upper-memory block which was not specified by the user... in addition, if
 28780                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 28781                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 28782                                  ; allocated. After the load, the function UnHideUMBs() (in highexit.inc) will
 28783                                  ; free any UMBs so allocated.
 28784                                  ;
 28785                                  ; When a device driver loads, there is the additional problem of allocating its
 28786                                  ; initial load site; this should be restricted to the first UMB specified on
 28787                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 28788                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 28789                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 28790                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 28791                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 28792                                  ;
 28793                                  ;******************************************************************************
 28794                                  
 28795                                  SWTCH	equ	'/'		; Switch character
 28796                                  
 28797                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 28798                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 28799                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 28800                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 28801                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 28802                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 28803                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 28804                                  
 28805                                  CR	equ	0Dh		; Carriage Return
 28806                                  LF	equ	0Ah		; Line Feed
 28807                                  TAB	equ	09h		; Tab character (^I)
 28808                                  
 28809                                  ; -----------------------------------------------------------------------------
 28810                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 28811                                  ; -----------------------------------------------------------------------------
 28812                                  ; ENTRY:       None
 28813                                  ; EXIT:        Variables listed in highvar.inc are initialized
 28814                                  ; ERROR EXIT:  None
 28815                                  ; USES:        Flags, variables in highvar.inc
 28816                                  ; -----------------------------------------------------------------------------
 28817                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1. Its contents
 28818                                  ; are largely ignored, but it is initialized nonetheless.
 28819                                  ; -----------------------------------------------------------------------------
 28820                                  
 28821                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28822                                  ; (SYSINIT:2EEEh)
 28823                                  
 28824                                  InitVar:
 28825                                  	; 01/01/2023
 28826                                  	; ds = cs
 28827                                  
 28828                                  	;pushreg <ax, cx, di, es>
 28829                                  	; 03/01/2023
 28830                                  	;push	ax
 28831                                  	;push	cx
 28832                                  	;push	di
 28833 00002A9A 06                      	push	es
 28834                                  
 28835                                  	;dataseg es			;Point ES into appropriate data segment
 28836 00002A9B 0E                      	push	cs
 28837 00002A9C 07                      	pop	es
 28838                                  
 28839 00002A9D 31C0                    	xor	ax,ax
 28840                                  	;mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 28841                                  	;mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 28842                                  	;mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 28843                                  	;mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 28844                                  	;				;Later is the # of the 1st spec'd UMB
 28845                                  	;mov	[es:fm_argc], al	;Start with zero args having been read
 28846                                  
 28847                                  	; 01/01/2023
 28848                                  	; ds = cs
 28849 00002A9F A2[B61F]                	mov	[fUmbTiny],al		;Shrink UMBs? (made 1 if /S given)
 28850 00002AA2 A2[B51F]                	mov	[fInHigh],al		;Set to 1 when DH/LH has been called
 28851 00002AA5 A3[B71F]                	mov	[SegLoad],ax		;Load Address (seg), used for DH only
 28852 00002AA8 C606[B91F]FF            	mov	byte [UmbLoad],UNSPECIFIED ; 0FFh
 28853                                  					;Later is the # of the 1st spec'd UMB
 28854 00002AAD A2[EC1F]                	mov	[fm_argc], al		;Start with zero args having been read
 28855                                  
 28856 00002AB0 FC                      	cld
 28857                                  
 28858 00002AB1 B91000                  	mov	cx,MAXUMB ; 16		;For each entry
 28859 00002AB4 BF[BA1F]                	mov	di,UmbUsed		;on the UmbUsed array,
 28860 00002AB7 F3AA                    	rep	stosb			;	Store 0
 28861                                  
 28862                                  	;mov	cx,MAXUMB ; 16		;Okay... for each entry
 28863                                  	; 01/01/2033
 28864 00002AB9 B110                    	mov	cl,MAXUMB ; 16
 28865 00002ABB BF[CA1F]                	mov	di,UmbSize		;on the UmbSize array,
 28866 00002ABE F3AB                    	rep	stosw			;	Store 0
 28867                                  
 28868                                  	;normseg es			; Return ES
 28869                                  
 28870                                  	;popreg	<es, di, cx, ax>
 28871 00002AC0 07                      	pop	es
 28872                                  	; 03/01/2023
 28873                                  	;pop	di
 28874                                  	;pop	cx
 28875                                  	;pop	ax	 	
 28876                                  
 28877 00002AC1 C3                      	retn
 28878                                  
 28879                                  ; -----------------------------------------------------------------------------
 28880                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 28881                                  ; -----------------------------------------------------------------------------
 28882                                  ; ENTRY   : None
 28883                                  ; EXIT    : None
 28884                                  ; ERROR   : None
 28885                                  ; USES    : Flags, fm_umb, fm_strat
 28886                                  ; -----------------------------------------------------------------------------
 28887                                  
 28888                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28889                                  	; (SYSINIT:2F22h)
 28890                                  FixMem:
 28891                                  	; 01/01/2023
 28892                                  	;push	ax
 28893                                  	;push	bx
 28894                                  	;push	cx
 28895                                  	;push	dx
 28896 00002AC2 06                      	push	es
 28897                                  
 28898 00002AC3 E84B00                  	call	fm_link		; Link in UMBs
 28899                                  
 28900 00002AC6 E80E02                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 28901 00002AC9 7241                    	jc	short fmX	; (if couldn't get it, leave now).
 28902                                  
 28903 00002ACB 8EC0                    	mov	es,ax		; It returns in AX, so move it to ES.
 28904                                  
 28905                                  ; - Walk MCB Chain ------------------------------------------------------------
 28906                                  
 28907 00002ACD 31D2                    	xor	dx,dx		; We're keeping the address of the last MCB
 28908 00002ACF 89D1                    	mov 	cx,dx		; in CX... and the last owner
 28909 00002AD1 42                      	inc	dx		; in dx as we go through the loop:
 28910                                  
 28911                                  ; ------------------------------------------
 28912                                  ; FM10--DX  = last MCB's owner's PSP address
 28913                                  ;       CX  = last MCB's address (segment)
 28914                                  ; ------------------------------------------
 28915                                  
 28916 00002AD2 26A00000                fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 28917 00002AD6 268B1E0100              	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 28918 00002ADB 09D3                    	or	bx,dx			; dx was owner of previous MCB
 28919 00002ADD 7518                    	jnz	short fm30		; If not both zero, don't cat.
 28920                                  
 28921                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 28922                                  
 28923 00002ADF 268B1E0300              fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 28924 00002AE4 8EC1                    	mov	es,cx			; Go back to prev MCB's address
 28925 00002AE6 26A20000                	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 28926                                  
 28927 00002AEA 26031E0300              	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 28928 00002AEF 83C301                  	add	bx,1			; And add one for the header
 28929 00002AF2 26891E0300              	mov	[es:ARENA.SIZE],bx	; Write the size
 28930                                  
 28931                                  	; ---------------------------------------------------------------------
 28932                                  
 28933 00002AF7 8CC1                    fm30:	mov	cx,es			; Put this address on the stack
 28934 00002AF9 268B160100              	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 28935                                  
 28936 00002AFE 8CC3                    	mov	bx,es			; Move to the next MCB
 28937 00002B00 26031E0300              	add	bx,[es:ARENA.SIZE]
 28938 00002B05 43                      	inc	bx
 28939 00002B06 8EC3                    	mov	es,bx
 28940                                  
 28941                                  	;cmp	al,'Z'
 28942 00002B08 3C5A                    	cmp	al,arena_signature_end
 28943 00002B0A 75C6                    	jne	short fm10		; If signature != 'Z', there are more.
 28944                                  fmX:	
 28945 00002B0C E81300                  	call	fm_unlink		; Unlink UMBs
 28946                                  
 28947 00002B0F 07                      	pop	es
 28948                                  	; 01/01/2023
 28949                                  	;pop	dx
 28950                                  	;pop	cx
 28951                                  	;pop	bx
 28952                                  	;pop	ax
 28953                                  
 28954 00002B10 C3                      	retn
 28955                                  
 28956                                  ; -----------------------------------------------------------------------------
 28957                                  ;*** fm_link - links UMBs not already linked in
 28958                                  ; -----------------------------------------------------------------------------
 28959                                  ; ENTRY:    None
 28960                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 28961                                  ; ERROR:    None
 28962                                  ; USES:     AX, BX, fm_umb
 28963                                  ; -----------------------------------------------------------------------------
 28964                                  
 28965                                  	; 01/01/2023 - Retro DOS v4.2
 28966                                  fm_link:
 28967 00002B11 B80258                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 28968 00002B14 CD21                    	int	21h			; Current link-state is now in al
 28969                                  
 28970                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 28971                                  	;
 28972                                  	;push	es
 28973                                  	;push	cs
 28974                                  	;pop	es
 28975                                  	;mov	[es:fm_umb],al
 28976                                  	;pop	es
 28977                                  	
 28978                                  	; 01/01/2023
 28979                                  	; ds = cs
 28980                                  	;mov	[cs:fm_umb],al
 28981 00002B16 A2[EA1F]                	mov	[fm_umb],al
 28982                                  
 28983 00002B19 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 28984 00002B1C BB0100                  	mov	bx,1
 28985 00002B1F CD21                    	int	21h
 28986 00002B21 C3                      	retn
 28987                                  
 28988                                  ; -----------------------------------------------------------------------------
 28989                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 28990                                  ; -----------------------------------------------------------------------------
 28991                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 28992                                  ; EXIT:     None
 28993                                  ; ERROR:    None
 28994                                  ; USES:     AX, BX
 28995                                  ; -----------------------------------------------------------------------------
 28996                                  
 28997                                  	; 01/01/2023 - Retro DOS v4.2
 28998                                  fm_unlink:
 28999 00002B22 31DB                    	xor	bx,bx
 29000                                  	
 29001                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 29002                                  	;
 29003                                  	;push	ds
 29004                                  	;push	cs
 29005                                  	;pop	ds
 29006                                  	;mov	bl,[fm_umb]	
 29007                                  	;pop	ds
 29008                                  	
 29009                                  	; 01/01/2023
 29010                                  	; ds = cs
 29011                                  	;mov	bl,[cs:fm_umb]
 29012 00002B24 8A1E[EA1F]              	mov	bl,[fm_umb]
 29013                                  
 29014 00002B28 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 29015 00002B2B CD21                    	int	21h			; so just use that, and call int 21h
 29016 00002B2D C3                      	retn
 29017                                  
 29018                                  ; 08/04/2019 - Retro DOS v4.0
 29019                                  
 29020                                  ; -----------------------------------------------------------------------------
 29021                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 29022                                  ; laid out in highvar.inc
 29023                                  ; -----------------------------------------------------------------------------
 29024                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 29025                                  ; EXIT:     ES:SI points to first character in child program name
 29026                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 29027                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 29028                                  ; -----------------------------------------------------------------------------
 29029                                  ; Error codes (in AX if carry set on return):
 29030                                  ;
 29031                                  PV_InvArg	equ	1	; Invalid argument passed
 29032                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 29033                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 29034                                  ;
 29035                                  ; This routine exects ES:SI to point to a string much like the following:
 29036                                  ;    "/S/L:1,200;2 module options"
 29037                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 29038                                  ; required, though that's what this routine is supposed to parse.
 29039                                  ;
 29040                                  optS		equ	'S'	; /S
 29041                                  optL		equ	'L'	; /L:...
 29042                                  ;
 29043                                  ; -----------------------------------------------------------------------------
 29044                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 29045                                  ; a command-line for spawning a child process. For a typical LH command, say,
 29046                                  ;     lh /l:1,1000;2 print/d:lpt2
 29047                                  ; the arguments would look like (one per line):
 29048                                  ;     lh
 29049                                  ;     /l
 29050                                  ;     1
 29051                                  ;     1000
 29052                                  ;     2
 29053                                  ;     print
 29054                                  ;     /d
 29055                                  ;     :lpt2
 29056                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 29057                                  ; arg was the filename. So, inside this routine, we keep a running counter
 29058                                  ; of the number of arguments LH will need to skip in order to get to the
 29059                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 29060                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 29061                                  ; for:
 29062                                  ;    Each /L
 29063                                  ;    Each /S (there should be only one)
 29064                                  ;    Each UMB number (they follow ":" or ";")
 29065                                  ;    Each UMB size   (they follow ",")
 29066                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 29067                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 29068                                  ; -----------------------------------------------------------------------------
 29069                                  
 29070                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 29071                                  	; (SYSINIT:2F9Fh)
 29072                                  
 29073                                  ParseVar:
 29074                                  	;pushreg <di, ds, es>
 29075                                  	; 01/01/2023
 29076                                  	;push	di ; * ; (not required) ; 01/01/2023
 29077 00002B2E 1E                      	push	ds
 29078 00002B2F 06                      	push	es
 29079                                  
 29080 00002B30 06                      	push	es		; Make DS:SI point to it, as well as ES:SI
 29081 00002B31 1F                      	pop	ds		; (regardless if we're in devhigh or loadhigh)
 29082 00002B32 FC                      	cld
 29083                                  
 29084                                  ; ------------------------------------------------
 29085                                  ; PV10--ES:SI = any whitespace on the command-line
 29086                                  ; ------------------------------------------------
 29087                                  
 29088 00002B33 AC                      pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 29089 00002B34 E8A200                  	call	isWhite
 29090 00002B37 74FA                    	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 29091                                  	;cmp	al,'/'
 29092 00002B39 3C2F                    	cmp	al,SWTCH
 29093 00002B3B 7404                    	je	short pv20	;       ES:SI=="/L..."--go process a switch
 29094                                  
 29095 00002B3D 4E                      	dec	si		; Backup--it's now "odule options", and we need
 29096 00002B3E F8                      	clc			; that "m" we just read (or whatever it is).
 29097 00002B3F EB2B                    	jmp	short pvX	; Then return with carry clear == we're done.
 29098                                  
 29099 00002B41 AC                      pv20:	lodsb			; Just read 'S' or 'L', hopefully
 29100                                  	;toUpper al		; So we make it upper-case, and...
 29101 00002B42 24DF                    	and	al,0DFh
 29102                                  	;cmp	al,'S'
 29103 00002B44 3C53                    	cmp	al,optS		; just read 'S'?
 29104 00002B46 750D                    	jne	short pv30
 29105                                  
 29106                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 29107 00002B48 2EFE06[EC1F]            	inc	byte [cs:fm_argc] ; 19/04/2019
 29108                                  
 29109                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 29110                                  	;
 29111                                  	;push	es
 29112                                  	;push	cs
 29113                                  	;pop	es
 29114                                  	;mov	[es:fUmbTiny],1	
 29115                                  	;pop	es
 29116                                  
 29117 00002B4D 2EC606[B61F]01          	mov	byte [cs:fUmbTiny],1
 29118                                  
 29119 00002B53 EBDE                    	jmp	short pv10	; possibly even "/L...".
 29120                                  
 29121                                  pv30:	;cmp	al,'L'
 29122 00002B55 3C4C                    	cmp	al,optL		; If it's not 'L' either, then 'tis a bad
 29123 00002B57 750D                    	jne	short pvE1		; switch!
 29124                                  
 29125                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 29126 00002B59 2EFE06[EC1F]            	inc	byte [cs:fm_argc] ; 19/04/2019
 29127                                  
 29128 00002B5E E80E00                  	call	parseL
 29129 00002B61 73D0                    	jnc	short pv10	; If no carry, go back and look for more
 29130                                  
 29131 00002B63 4E                      	dec	si		; Else, back up and exit.
 29132 00002B64 EB03                    	jmp	short pvErr	; AX has already been set by parseL
 29133                                  
 29134                                  pvE1:	;mov	ax,3
 29135 00002B66 B80300                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 29136 00002B69 4E                      pvErr:	dec	si
 29137 00002B6A 4E                      	dec	si
 29138 00002B6B F9                      	stc
 29139                                  pvX:	;popreg	<es, ds, di>
 29140 00002B6C 07                      	pop	es
 29141 00002B6D 1F                      	pop	ds
 29142                                  	; 01/01/2023
 29143                                  	;pop	di ; * ; (not required) ; 01/01/2023
 29144 00002B6E C3                      	retn
 29145                                  
 29146                                  ; -----------------------------------------------------------------------------
 29147                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 29148                                  ; -----------------------------------------------------------------------------
 29149                                  ; ENTRY:    ES:SI points to colon
 29150                                  ; EXIT:     ES:SI points to first character not parsed
 29151                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 29152                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 29153                                  ; -----------------------------------------------------------------------------
 29154                                  ; If the string here is terminated with anything other than whitespace or a
 29155                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 29156                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 29157                                  ; makes sure the app /L: is reported as being the culprit.
 29158                                  ; -----------------------------------------------------------------------------
 29159                                  
 29160                                  parseL:
 29161 00002B6F AC                      	lodsb
 29162 00002B70 3C3A                    	cmp	al,':'		; Make sure they did /L:
 29163 00002B72 754E                    	jne	short plE1	; If they didn't, return with carry set.
 29164                                  
 29165                                  ; ------------------------------------------
 29166                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 29167                                  ; ------------------------------------------
 29168                                  
 29169 00002B74 E8E700                  pl10:	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 29170 00002B77 724F                    	jc	short plE2	; And error if it's a bad number.
 29171 00002B79 E8B601                  	call	convUMB		; Convert any address to a UMB number
 29172                                  
 29173 00002B7C 88C1                    	mov	cl,al		; Remember the UMB number
 29174 00002B7E E87600                  	call	stowUMB		; Mark this UMB # as used;
 29175 00002B81 7245                    	jc	short plE2	; If it was already marked, it'll error
 29176                                  
 29177                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 29178 00002B83 2EFE06[EC1F]            	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 29179                                  
 29180 00002B88 AC                      	lodsb
 29181 00002B89 3C3B                    	cmp	al,';'		; Did "umb;" ?
 29182 00002B8B 74E7                    	je	short pl10	; Yep: go back and get another UMB.
 29183                                  
 29184 00002B8D E84900                  	call	isWhite		; Did "umb " ?
 29185 00002B90 743B                    	jz	short plX	; Yep: return (it'll go back to whitespace)
 29186                                  
 29187 00002B92 E83900                  	call	isEOL		; Did "umb" ?
 29188 00002B95 7435                    	jz	short plSwX	; If so, backup and exit like everything's ok
 29189                                  
 29190                                  	;cmp	al,'/'
 29191 00002B97 3C2F                    	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 29192 00002B99 7431                    	je	short plSwX	; If so, back up ES:SI one character and return
 29193                                  
 29194 00002B9B 3C2C                    	cmp	al,','		; Did "umb," ?
 29195 00002B9D 7523                    	jne	short plE1	; Just what the heck DID they do? Return error.
 29196                                  
 29197                                  ; --- Read a size -------------------------------------------------------------
 29198                                  
 29199 00002B9F E8BC00                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 29200 00002BA2 721E                    	jc	short plE1	; And error if it's a bad size.
 29201                                  
 29202 00002BA4 E82201                  	call	toPara		; Convert from bytes to paragraphs
 29203                                  
 29204 00002BA7 E87200                  	call	stowSiz		; CL still has the UMB number for this routine
 29205                                  
 29206                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 29207 00002BAA 2EFE06[EC1F]            	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 29208                                  
 29209 00002BAF AC                      	lodsb
 29210 00002BB0 3C3B                    	cmp	al,';'		; They did "umb,size;", so get another UMB.
 29211 00002BB2 74C0                    	je	short pl10	;
 29212                                  
 29213 00002BB4 E82200                  	call	isWhite		; Did it end with whitespace?
 29214 00002BB7 7414                    	jz	short plX	; If so, we're done here--go back.
 29215                                  
 29216 00002BB9 E81200                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 29217 00002BBC 740E                    	jz	short plSwX	; If so, backup and exit like everything's ok
 29218                                  
 29219                                  	;cmp	al,'/'
 29220 00002BBE 3C2F                    	cmp	al,SWTCH	; Did they do "umb,size/" ?
 29221 00002BC0 740A                    	je	short plSwX	; If so, again, we're done here.
 29222                                  plE1:	
 29223                                  	;mov	ax,1
 29224 00002BC2 B80100                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 29225 00002BC5 4E                      	dec	si
 29226 00002BC6 F9                      	stc
 29227 00002BC7 C3                      	retn
 29228                                  
 29229                                  plE2:	;mov	ax,2
 29230 00002BC8 B80200                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 29231                                  	; 12/12/2022
 29232                                  	; cf=1
 29233                                  	;stc
 29234 00002BCB C3                      	retn
 29235                                  plSwX:	
 29236 00002BCC 4E                      	dec	si		; If we hit a '/' character, back up one char
 29237                                  				; so the whitespace checker will see it too.
 29238                                  plX:	; 12/12/2022
 29239                                  	; cf=0
 29240                                  	;clc			; Then just return with carry clear, so
 29241 00002BCD C3                      	retn			; ParseVar will go about its business.
 29242                                  
 29243                                  ; -----------------------------------------------------------------------------
 29244                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 29245                                  ; -----------------------------------------------------------------------------
 29246                                  ; ENTRY:    None
 29247                                  ; EXIT:     None
 29248                                  ; ERROR:    None
 29249                                  ; USES:     fm_argc, flags
 29250                                  ; -----------------------------------------------------------------------------
 29251                                  
 29252                                  ;incArgc:
 29253                                  	;push	ax
 29254                                  
 29255                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 29256                                  
 29257                                  	;mov	al,[cs:fm_argc]
 29258                                  
 29259                                  	;inc	al		; Increment it,
 29260                                  
 29261                                  	;;putdata fm_argc, al	; And store it right back.
 29262                                  
 29263                                  	;mov	[cs:fm_argc],al
 29264                                  
 29265                                  	;pop	ax
 29266                                  	;retn
 29267                                  
 29268                                  ; -----------------------------------------------------------------------------
 29269                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 29270                                  ; -----------------------------------------------------------------------------
 29271                                  ; ENTRY:    AL contains character to test
 29272                                  ; EXIT:     ZF set iff AL contains CR or LF, or 0
 29273                                  ; ERROR:    None
 29274                                  ; USES:     ZF
 29275                                  ; -----------------------------------------------------------------------------
 29276                                  
 29277                                  isEOL:
 29278 00002BCE 3C00                    	cmp	al,0		; Null-terminator
 29279 00002BD0 7406                    	je	short ieX
 29280 00002BD2 3C0D                    	cmp	al,CR ; 0Dh	; Carriage Return
 29281 00002BD4 7402                    	je	short ieX
 29282 00002BD6 3C0A                    	cmp	al,LF ; 0Ah	; LineFeed
 29283                                  ieX:	
 29284 00002BD8 C3                      	retn
 29285                                  
 29286                                  ; -----------------------------------------------------------------------------
 29287                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 29288                                  ; -----------------------------------------------------------------------------
 29289                                  ; ENTRY:    AL contains character to test
 29290                                  ; EXIT:     ZF set iff AL contains space, tab, or equals
 29291                                  ; ERROR:    None
 29292                                  ; USES:     ZF
 29293                                  ; -----------------------------------------------------------------------------
 29294                                  
 29295                                  isWhite:
 29296 00002BD9 3C20                    	cmp	al,' '		; Space
 29297 00002BDB 7406                    	je	short iwX
 29298 00002BDD 3C3D                    	cmp	al,'='		; Equals (treat as whitespace)
 29299 00002BDF 7402                    	je	short iwX
 29300 00002BE1 3C09                    	cmp	al,tab ; 9	; Tab
 29301                                  iwX:	
 29302 00002BE3 C3                      	retn
 29303                                  
 29304                                  ; -----------------------------------------------------------------------------
 29305                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 29306                                  ; -----------------------------------------------------------------------------
 29307                                  ; ENTRY:    AL contains UMB number
 29308                                  ; EXIT:     None
 29309                                  ; ERROR:    None
 29310                                  ; USES:     Flags, variables in highvar.inc
 29311                                  ; -----------------------------------------------------------------------------
 29312                                  
 29313                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 29314                                  
 29315                                  unMarkUMB:
 29316                                  	; 02/01/2023
 29317                                  	;push	ax
 29318                                  	;push	bx
 29319                                  	;push	di
 29320                                  	;push	es
 29321                                  	;
 29322                                  	;push	cs
 29323                                  	;pop	es
 29324                                  
 29325 00002BE4 30E4                    	xor	ah,ah
 29326 00002BE6 89C3                    	mov	bx,ax
 29327                                  
 29328                                  	; 19/04/2019
 29329                                  	
 29330                                  	;;mov	byte [es:bx+UmbUsed],0
 29331                                  	;mov	[es:bx+UmbUsed],ah ; 0
 29332                                  	; 02/01/2023
 29333                                  	; ds= cs
 29334                                  	;mov	[cs:bx+UmbUsed],ah ; 0
 29335 00002BE8 88A7[BA1F]              	mov	[bx+UmbUsed],ah ; 0
 29336                                  
 29337 00002BEC 3806[B91F]              	cmp	[UmbLoad],al
 29338                                  	;cmp	[cs:UmbLoad],al
 29339                                  	;;cmp	[es:UmbLoad],al
 29340 00002BF0 7504                    	jne	short umu10
 29341                                  
 29342                                  	;;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 29343                                  	;mov	[es:UmbLoad],ah ; 0
 29344                                  	; 02/01/2023
 29345                                  	; ds = cs
 29346                                  	;mov	[cs:UmbLoad],ah ; 0
 29347 00002BF2 8826[B91F]              	mov	[UmbLoad],ah ; 0
 29348                                  umu10:	
 29349                                  	;pop	es
 29350                                  	;pop	di
 29351                                  	;pop	bx
 29352                                  	;pop	ax
 29353 00002BF6 C3                      	retn
 29354                                  
 29355                                  ; -----------------------------------------------------------------------------
 29356                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 29357                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 29358                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 29359                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 29360                                  ; -----------------------------------------------------------------------------
 29361                                  ; ENTRY:    AL contains UMB number, as specified by the user
 29362                                  ; EXIT:     None
 29363                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 29364                                  ; USES:     AX, Flags, variables in highvar.inc
 29365                                  ; -----------------------------------------------------------------------------
 29366                                  
 29367                                  	; 01/01/2023 - Retro DOS v4.2
 29368                                  stowUMB:
 29369 00002BF7 3C10                    	cmp	al,MAXUMB ; 16
 29370 00002BF9 7202                    	jb	short su10
 29371 00002BFB F9                      	stc
 29372 00002BFC C3                      	retn			; Ooops-- UMB>=MAXUMB
 29373                                  su10:	
 29374                                  	; 01/01/2023
 29375                                  	;push	bx
 29376                                  	;push	di
 29377                                  	;push	si
 29378                                  	;push	ds
 29379                                  	;push	es
 29380                                  	;push	cs
 29381                                  	;pop	es
 29382                                  	;push	cs
 29383                                  	;pop	ds
 29384                                  
 29385                                  	; 01/01/2023
 29386                                  	; ds <> cs
 29387                                  	;cmp	byte [cs:UmbLoad],0FFh
 29388 00002BFD 2E803E[B91F]FF          	cmp	byte [cs:UmbLoad],UNSPECIFIED
 29389                                  				; If this, we haven't been here before
 29390 00002C03 7504                    	jne	short su20
 29391 00002C05 2EA2[B91F]              	mov	[cs:UmbLoad],al	; So remember this UMB as the load UMB slot.
 29392                                  
 29393                                  	;;cmp	byte [UmbLoad],0FFh
 29394                                  	;cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 29395                                  	;jne	short su20
 29396                                  	;mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 29397                                  su20:	
 29398 00002C09 08C0                    	or	al,al		; If they gave UMB 0, there's really nothing
 29399 00002C0B 740E                    	jz	short su30	; that we should do here.
 29400                                  
 29401                                  	;mov	bl,al
 29402                                  	;xor	bh,bh
 29403                                  	;mov	ax,1		; Now, AX = 1, and BX = UMB Number
 29404                                  	; 01/01/2023
 29405 00002C0D 30E4                    	xor	ah,ah
 29406 00002C0F 89C3                    	mov	bx,ax
 29407 00002C11 B001                    	mov	al,1
 29408                                  
 29409                                  	;xchg	[es:bx+UmbUsed],al
 29410                                  	; 01/01/2023
 29411 00002C13 2E8687[BA1F]            	xchg	[cs:bx+UmbUsed],al
 29412                                  
 29413                                  	;or	al,al		; If it was already 1, then al==1... and that
 29414                                  	;jz	short su30	; means an error.
 29415                                  	;
 29416                                  	;stc			; OOOPS!  This one's been used before.  :(
 29417                                  	
 29418                                  	; 01/01/2023
 29419 00002C18 3C01                    	cmp	al,1
 29420 00002C1A F5                      	cmc 	; if al > 0 -> cf = 1
 29421                                  su30:	
 29422                                  	; 01/01/2023
 29423                                  	;pop	es
 29424                                  	;pop	ds
 29425                                  	;pop	si
 29426                                  	;pop	di
 29427                                  	;pop	bx
 29428 00002C1B C3                      	retn
 29429                                  
 29430                                  ; -----------------------------------------------------------------------------
 29431                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 29432                                  ; -----------------------------------------------------------------------------
 29433                                  ; ENTRY:    CL contains UMB number, AX contains size
 29434                                  ; EXIT:     None
 29435                                  ; ERROR:    None
 29436                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 29437                                  ; -----------------------------------------------------------------------------
 29438                                  
 29439                                  ; 13/05/2019
 29440                                  
 29441                                  	; 01/01/2023 - Retro DOS v4.2
 29442                                  stowSiz:
 29443                                  	; 01/01/2023
 29444                                  	;push	bx
 29445                                  	;;push	di ; ?
 29446                                  	;push	es
 29447                                  
 29448                                  	;push	cs
 29449                                  	;pop	es	
 29450                                  
 29451 00002C1C 88CB                    	mov	bl,cl			; Now bl==UMB number, AX==size
 29452 00002C1E B700                    	mov	bh,0			;     bx==UMB number, AX==size
 29453 00002C20 D0E3                    	shl	bl,1			;     bx==offset into array, AX=size
 29454                                  	;mov	[es:bx+UmbSize],ax	; Store the size
 29455                                  	; 01/01/2023
 29456 00002C22 2E8987[CA1F]            	mov	[cs:bx+UmbSize],ax	; Store the size
 29457                                  
 29458                                  	; 01/01/2023
 29459                                  	;pop	es
 29460                                  	;;pop	di ; ?
 29461                                  	;pop	bx
 29462                                  
 29463 00002C27 C3                      	retn
 29464                                  
 29465                                  ; -----------------------------------------------------------------------------
 29466                                  ;*** toDigit - converts a character-digit to its binary counterpart
 29467                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 29468                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 29469                                  ; A-F are considered valid iff gnradix is 16.
 29470                                  ; -----------------------------------------------------------------------------
 29471                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 29472                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 29473                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 29474                                  ; USES:     CL, Flags
 29475                                  ; -----------------------------------------------------------------------------
 29476                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 29477                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 29478                                  ; will be 10 or 16.
 29479                                  ; -----------------------------------------------------------------------------
 29480                                  
 29481                                  gnradix:
 29482 00002C28 0000                    	dw	0		; Must be a word--16x16 multiplication
 29483                                  
 29484                                  toDigit:
 29485 00002C2A 2E833E[282C]10          	cmp	word [cs:gnradix],16
 29486 00002C30 751C                    	jne	short td20	; Don't check hex digits if radix isn't 16
 29487                                  
 29488                                  toDigit_hex:
 29489 00002C32 80F961                  	cmp	cl,'a'	; 61h
 29490 00002C35 7209                    	jb	short td10
 29491 00002C37 80F966                  	cmp	cl,'f'	; 66h
 29492 00002C3A 7720                    	ja	short tdE	; Nothing valid above 'z' at all...
 29493 00002C3C 80E957                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 29494                                  	;clc			; <- CLC is implicit from last SUB
 29495 00002C3F C3                      	retn
 29496                                  td10:	
 29497 00002C40 80F941                  	cmp	cl,'A'  ; 41h
 29498 00002C43 7209                    	jb	short td20	; Below 'A'?  Not a letter...
 29499 00002C45 80F946                  	cmp	cl,'F'	; 46h
 29500 00002C48 7712                    	ja	short tdE	; Above 'F'?  Not a digit.
 29501 00002C4A 80E937                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 29502                                  	;clc			; <- CLC is implicit from last SUB
 29503 00002C4D C3                      	retn
 29504                                  toDigit_dec:
 29505                                  td20:	
 29506 00002C4E 80F930                  	cmp	cl,'0'		; If less than zero,
 29507                                  	;jb	short tdE	; Done.
 29508 00002C51 720A                    	jb	short tdEr ; 08/04/2019
 29509 00002C53 80F939                  	cmp	cl,'9'		; Or, if greater than nine,
 29510 00002C56 7704                    	ja	short tdE	; Done.
 29511 00002C58 80E930                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 29512                                  	;clc			; <- CLC is implicit from last SUB
 29513 00002C5B C3                      	retn
 29514                                  tdE:	
 29515 00002C5C F9                      	stc
 29516                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 29517 00002C5D C3                      	retn
 29518                                  
 29519                                  ; -----------------------------------------------------------------------------
 29520                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 29521                                  ; -----------------------------------------------------------------------------
 29522                                  ; ENTRY:    ES:SI points to an ascii string to scan
 29523                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 29524                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 29525                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 29526                                  ; -----------------------------------------------------------------------------
 29527                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 29528                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 29529                                  ; will be 10 or 16.
 29530                                  ; -----------------------------------------------------------------------------
 29531                                  
 29532                                  ; 08/04/2019 - Retro DOS v4.0
 29533                                  
 29534                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 29535                                  ; (SYSINIT:3109h)
 29536                                  
 29537                                  GetXNum:
 29538                                  	;pushreg <bx, cx, ds>
 29539                                  	; 01/01/2023
 29540                                  	;push	bx
 29541 00002C5E 51                      	push	cx ; *
 29542                                  	;push	ds
 29543                                  
 29544 00002C5F FC                      	cld
 29545 00002C60 31C0                    	xor	ax,ax
 29546 00002C62 31DB                    	xor	bx,bx
 29547 00002C64 31C9                    	xor	cx,cx
 29548 00002C66 31D2                    	xor	dx,dx			; Start with 0 (makes sense)
 29549                                  
 29550 00002C68 2EC706[282C]0A00        	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 29551                                  
 29552 00002C6F 268A0C                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 29553                                  	;call	toDigit
 29554 00002C72 E8D9FF                  	call	toDigit_dec
 29555                                  	;jc	short gxnE		; If it's not a digit, leave now.
 29556                                  	; 01/01/2023
 29557 00002C75 7233                    	jc	short gxnX
 29558                                  
 29559 00002C77 08C9                    	or	cl,cl
 29560 00002C79 7517                    	jnz	short gxn20		; Doesn't have '0x'
 29561 00002C7B 268A4C01                	mov	cl,[es:si+1]
 29562 00002C7F 80F978                  	cmp	cl,'x'			; Either 'x'...
 29563 00002C82 7405                    	je	short gxn10
 29564 00002C84 80F958                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 29565 00002C87 7509                    	jne	short gxn20
 29566                                  
 29567                                  gxn10:	
 29568 00002C89 2EC706[282C]1000        	mov	word [cs:gnradix], 16
 29569 00002C90 46                      	inc	si			; Since we read "0x", march over it.
 29570 00002C91 46                      	inc	si
 29571                                  
 29572                                  ; ------------------------------------------------------
 29573                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 29574                                  ;        DX:AX = current total
 29575                                  ;        BX    = 0
 29576                                  ;        CH    = 0
 29577                                  ; ------------------------------------------------------
 29578                                  
 29579                                  gxn20:	
 29580 00002C92 268A0C                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 29581 00002C95 46                      	inc	si
 29582                                  
 29583 00002C96 E891FF                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 29584 00002C99 720D                    	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 29585                                  
 29586 00002C9B E80E00                  	call	mul32		; Multiply DX:AX by gnradix
 29587 00002C9E 720A                    	jc	short gxnX	; (if it's too big, error out)
 29588                                  
 29589 00002CA0 01C8                    	add	ax,cx		; Add the digit
 29590 00002CA2 11DA                    	adc	dx,bx		; (BX is 0!)--Adds 1 iff last add wrapped
 29591                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 29592                                  	;jmp	short gxn20
 29593 00002CA4 73EC                    	jnc	short gxn20
 29594                                  gxnE:	
 29595                                  	;stc			; In this case, we need to set the carry
 29596 00002CA6 EB02                    	jmp	short gxnX	; and leave--there were no digits given.
 29597                                  gxnQ:	
 29598 00002CA8 4E                      	dec	si		; Don't read in the offensive character.
 29599 00002CA9 F8                      	clc			; And clear carry, so they know it's okay.
 29600                                  gxnX:	
 29601                                  	; 01/01/2023
 29602                                  	;pop	ds
 29603 00002CAA 59                      	pop	cx ; *
 29604                                  	;pop	bx
 29605 00002CAB C3                      	retn
 29606                                  
 29607                                  ; -----------------------------------------------------------------------------
 29608                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 29609                                  ; -----------------------------------------------------------------------------
 29610                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 29611                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 29612                                  ; ERROR:   Carry set if number was too large
 29613                                  ; USES:    Flags, AX, DX
 29614                                  ; -----------------------------------------------------------------------------
 29615                                  
 29616                                  mul32:
 29617 00002CAC 50                      	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 29618 00002CAD 89D0                    	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 29619 00002CAF 2EF726[282C]            	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 29620 00002CB4 7211                    	jc	short m32E	; Too big?
 29621                                  
 29622 00002CB6 89C2                    	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 29623 00002CB8 58                      	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 29624                                  
 29625 00002CB9 87D3                    	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 29626 00002CBB 2EF726[282C]            	mul	word [cs:gnradix] ; DX=carry,  AX=new:lo, TOS=orig, BX=new:hi
 29627 00002CC0 87D3                    	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29628 00002CC2 01DA                    	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29629 00002CC4 31DB                    	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 29630 00002CC6 C3                      	retn
 29631                                  m32E:	
 29632 00002CC7 58                      	pop	ax
 29633 00002CC8 C3                      	retn
 29634                                  
 29635                                  ; -----------------------------------------------------------------------------
 29636                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 29637                                  ; -----------------------------------------------------------------------------
 29638                                  ; ENTRY:   DX:AX = the number to be divided
 29639                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 29640                                  ; ERROR:   None
 29641                                  ; USES:    Flags, AX, DX
 29642                                  ; -----------------------------------------------------------------------------
 29643                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 29644                                  ;       can't ensure a 386 host machine. Sorry.
 29645                                  ; -----------------------------------------------------------------------------
 29646                                  
 29647                                  	; 01/01/2023 - Retro DOS v4.2
 29648                                  toPara:
 29649 00002CC9 51                      	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 29650                                  
 29651 00002CCA B104                    	mov	cl,4		;
 29652 00002CCC D3E8                    	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 29653 00002CCE 92                      	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 29654 00002CCF B10C                    	mov	cl,12
 29655 00002CD1 D3E0                    	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 29656 00002CD3 09D0                    	or	ax,dx		;    AX=hhhh LLLL llll llll
 29657                                  
 29658 00002CD5 59                      	pop	cx
 29659 00002CD6 C3                      	retn
 29660                                  
 29661                                  ; -----------------------------------------------------------------------------
 29662                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 29663                                  ; -----------------------------------------------------------------------------
 29664                                  ; ENTRY:  Nothing
 29665                                  ; EXIT:   AX contains 0x9FFF for most systems
 29666                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 29667                                  ; USES:   Flags, AX
 29668                                  ; -----------------------------------------------------------------------------
 29669                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 29670                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 29671                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 29672                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 29673                                  ; -----------------------------------------------------------------------------
 29674                                  
 29675                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 29676                                  UmbHead:
 29677                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 29678                                  
 29679                                  	;push	si ; ?
 29680                                  	;push	ds ; ? 
 29681                                  	;push	es
 29682                                  	;push	bx ; *	
 29683                                  
 29684                                  	; 09/04/2019
 29685                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 29686                                  
 29687 00002CD7 B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 29688 00002CD9 CD21                    	int	21h
 29689                                  
 29690 00002CDB 26A18C00                	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 29691                                  	
 29692                                  	; 01/01/2023
 29693 00002CDF 83F8FF                  	cmp	ax,0FFFFh
 29694 00002CE2 F5                      	cmc
 29695                                  	; if AX=0FFFFh -> CF=1
 29696 00002CE3 C3                      	retn
 29697                                  
 29698                                  ; 01/01/2023
 29699                                  ;%if 0
 29700                                  ;	cmp	ax,0FFFFh
 29701                                  ;	je	short uhE		; If it's 0xFFFF, it's an error...
 29702                                  ;
 29703                                  ;	clc				; Else, it isn't (CLC done by prev cmp)
 29704                                  ;	;jmp	short uhX
 29705                                  ;	; 12/12/2022
 29706                                  ;	retn
 29707                                  ;uhE:	
 29708                                  ;	stc
 29709                                  ;uhX:	
 29710                                  ;	;pop	bx ; *
 29711                                  ;	;pop	es
 29712                                  ;	;pop	ds ; ?
 29713                                  ;	;pop	si ; ?
 29714                                  ;	retn
 29715                                  ;%endif
 29716                                  
 29717                                  ; -----------------------------------------------------------------------------
 29718                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 29719                                  ; -----------------------------------------------------------------------------
 29720                                  ; ENTRY:  ES:0 should point to a valid MCB
 29721                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 29722                                  ; USES:   Flags
 29723                                  ; -----------------------------------------------------------------------------
 29724                                  
 29725                                  isSysMCB:
 29726                                  	;push	ax
 29727                                  
 29728                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 29729                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 29730                                  	;je	short ism10
 29731                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 29732                                  	;;je	short ism10
 29733                                  	;;jmp	short ismX		; Anything else isn't.
 29734                                  	;jne	short ismX
 29735 00002CE4 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 29736 00002CEA 7507                    	jne	short ismX 
 29737                                  ism10:	
 29738                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 29739                                  	;cmp	ax,'SC' ; 4353h
 29740 00002CEC 26813E08005343          	cmp	word [es:ARENA.NAME],'SC'
 29741                                  ismX:	
 29742                                  	;pop	ax
 29743 00002CF3 C3                      	retn
 29744                                  
 29745                                  ; 09/04/2019 - Retro DOS v4.0
 29746                                  
 29747                                  ; -----------------------------------------------------------------------------
 29748                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 29749                                  ; -----------------------------------------------------------------------------
 29750                                  ; ENTRY:  AX contains a segment address
 29751                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 29752                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 29753                                  ; USES:   Flags, AX
 29754                                  ; -----------------------------------------------------------------------------
 29755                                  ; An address in the following areas is treated as:
 29756                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 29757                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 29758                                  ;      ...
 29759                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 29760                                  ; -----------------------------------------------------------------------------
 29761                                  
 29762                                  	; 01/01/2023 - Retro DOS v4.2
 29763                                  AddrToUmb:
 29764                                  	; 01/01/2023
 29765                                  	;push	cx
 29766                                  	;push	dx
 29767 00002CF4 06                      	push	es
 29768                                  
 29769 00002CF5 89C2                    	mov	dx,ax		; DX = address to search for
 29770                                  
 29771 00002CF7 E8DDFF                  	call	UmbHead		; AX = first segment
 29772 00002CFA 722F                    	jc	short atuE	; If it couldn't get it, error out.
 29773                                  
 29774 00002CFC 8EC0                    	mov	es,ax		; ES = first UMB segment
 29775 00002CFE 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now... (cx = UMB#)
 29776                                  
 29777                                  ; ----------------------------------------
 29778                                  ; ATU10--ES - Current MCB address
 29779                                  ;        DX - Address given for conversion
 29780                                  ;        CX - Current UMB #
 29781                                  ; ----------------------------------------
 29782                                  
 29783 00002D00 8CC0                    atu10:	mov	ax,es
 29784 00002D02 39D0                            cmp	ax,dx		; Present segment >= given segment?
 29785 00002D04 7328                    	jae	short atuX	; Yep--done.
 29786                                  
 29787 00002D06 E8DBFF                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 29788 00002D09 7501                    	jnz	short atu20
 29789                                  
 29790 00002D0B 41                      	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 29791                                  atu20:	
 29792 00002D0C 26A00000                	mov	al,[es:ARENA.SIGNATURE]
 29793 00002D10 3C5A                    	cmp	al,arena_signature_end  ; 'Z'
 29794 00002D12 740C                    	je	short atu30		; 'Z' means this was the last MCB... that's it.
 29795                                  
 29796                                  	;NextMCB es, ax
 29797                                  
 29798 00002D14 8CC0                    	mov     ax,es
 29799                                  	;add	ax,[es:3]
 29800 00002D16 2603060300              	add     ax,[es:ARENA.SIZE]
 29801 00002D1B 40                      	inc     ax
 29802 00002D1C 8EC0                    	mov     es,ax
 29803                                  	
 29804 00002D1E EBE0                    	jmp	short atu10
 29805                                  
 29806                                  ; -----------------------------------------------------------------------------
 29807                                  ; if we get to atu30, they specified a number that was past the last MCB.
 29808                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 29809                                  ; -----------------------------------------------------------------------------
 29810                                  
 29811                                  atu30:	
 29812 00002D20 8CC0                    	mov	ax,es
 29813 00002D22 2603060300              	add	ax,[es:ARENA.SIZE]
 29814 00002D27 39D0                    	cmp	ax,dx		; Present >= given?
 29815 00002D29 7303                    	jae	short atuX	; Yep! It _was_ inside.
 29816                                  atuE:	
 29817 00002D2B 31C9                    	xor	cx,cx		; Else, fall through with UMB # == -1
 29818 00002D2D 49                      	dec	cx		; (that makes it return 0xFFFF and sets CF)
 29819                                  atuX:	
 29820 00002D2E 89C8                    	mov	ax,cx		; Return the UMB number in AX
 29821                                  	
 29822 00002D30 07                      	pop	es	
 29823                                  	; 01/01/2023
 29824                                  	;pop	dx
 29825                                  	;pop	cx
 29826 00002D31 C3                      	retn
 29827                                  
 29828                                  ; -----------------------------------------------------------------------------
 29829                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 29830                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 29831                                  ; address rather than a UMB number... and use that address to look up a UMB.
 29832                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 29833                                  ; -----------------------------------------------------------------------------
 29834                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 29835                                  ; EXIT:   AX will contain a UMB number
 29836                                  ; ERROR:  None
 29837                                  ; USES:   Flags, AX
 29838                                  ; -----------------------------------------------------------------------------
 29839                                  
 29840                                  	; 01/01/2023 - Retro DOS v4.2
 29841                                  convUMB:
 29842 00002D32 2E833E[282C]10          	cmp	word [cs:gnradix],16
 29843 00002D38 7507                    	jne	short cu10	; If it didn't read in hex, it's not an address
 29844 00002D3A E8B7FF                  	call	AddrToUmb	; Else, convert the address to a UMB number
 29845                                  	;cmp	ax,0FFFFh
 29846                                  	;jne	short cu10
 29847                                  	;inc	ax		; If too high, ignore it (make it conventional)
 29848                                  	; 01/01/2023
 29849 00002D3D 40                      	inc	ax
 29850 00002D3E 7401                    	jz	short cu10	; If too high, ignore it (make it conventional)
 29851 00002D40 48                      	dec	ax
 29852                                  cu10:	
 29853 00002D41 C3                      	retn
 29854                                  
 29855                                  ; 01/01/2023 - Retro DOS v4.2
 29856                                  ;%if 0
 29857                                  ;
 29858                                  ;; -----------------------------------------------------------------------------
 29859                                  ;;*** setUMBs - links umbs and sets allocation strategy for a load
 29860                                  ;;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 29861                                  ;; of the usual HIGH_FIRST. See the code.
 29862                                  ;; -----------------------------------------------------------------------------
 29863                                  ;; ENTRY:  None
 29864                                  ;; EXIT:   None
 29865                                  ;; ERROR:  None
 29866                                  ;; USES:   Flags, fm_umb, fm_strat
 29867                                  ;; -----------------------------------------------------------------------------
 29868                                  ;
 29869                                  ;setUMBs:
 29870                                  ;	push	ax
 29871                                  ;	push	bx
 29872                                  ;	call	fm_link
 29873                                  ;	pop	bx
 29874                                  ;	pop	ax
 29875                                  ;	retn
 29876                                  ;
 29877                                  ;%endif
 29878                                  
 29879                                  ; -----------------------------------------------------------------------------
 29880                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 29881                                  ; -----------------------------------------------------------------------------
 29882                                  ; ENTRY:  None
 29883                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 29884                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 29885                                  ; ERROR:  None
 29886                                  ; USES:   Flags, fm_strat, fm_umb
 29887                                  ; -----------------------------------------------------------------------------
 29888                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 29889                                  ; load UMB, and it is 0.  That 0 can be either from the user having _specified_
 29890                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 29891                                  ; such that the load UMB is too small, and shouldn't be used.
 29892                                  ; -----------------------------------------------------------------------------
 29893                                  
 29894                                  loadLow:
 29895                                  	;push	ds
 29896                                  	;push	cs		; Point DS into appropriate data segment
 29897                                  	;pop	ds	
 29898                                  
 29899                                  	;mov	al,[UmbLoad]
 29900 00002D42 2EA0[B91F]              	mov	al,[cs:UmbLoad]
 29901 00002D46 3CFF                    	cmp	al,UNSPECIFIED ; 0FFh, -1
 29902 00002D48 7504                    	jne	short ll10
 29903                                  
 29904 00002D4A F9                      	stc
 29905                                  ll15:
 29906 00002D4B B001                    	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 29907                                  	;stc
 29908                                  	;jmp	short llX
 29909 00002D4D C3                      	retn
 29910                                  ll10:	
 29911 00002D4E 08C0                    	or	al,al		; AL=the load UMB: Is it == 0?
 29912                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 29913                                  
 29914 00002D50 75F9                    	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 29915 00002D52 C3                      	retn
 29916                                  
 29917                                  	;mov	al,1
 29918                                  	;clc
 29919                                  ;llX:
 29920                                  	;pop	ds		; Return DS to where it was
 29921                                  	;retn
 29922                                  
 29923                                  ; -----------------------------------------------------------------------------
 29924                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 29925                                  ; -----------------------------------------------------------------------------
 29926                                  ; ENTRY:  None
 29927                                  ; EXIT:   None
 29928                                  ; ERROR:  None
 29929                                  ; USES:   Flags, fm_strat, fm_umb
 29930                                  ; -----------------------------------------------------------------------------
 29931                                  
 29932                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 29933                                  	; (SYSINIT:322Fh)
 29934                                  HideUMBs:
 29935                                  	; 01/01/2023
 29936                                  	;push	ax
 29937                                  	;push	cx
 29938                                  	;push	ds
 29939 00002D53 06                      	push	es
 29940                                  
 29941                                  	; 01/01/2023
 29942                                  	; ds = cs
 29943                                  
 29944 00002D54 E87502                  	call	UmbTest		; See if we REALLY linked in anything...
 29945 00002D57 7232                    	jc	short husX	; ...if not, there's nothing for us to do.
 29946                                  
 29947 00002D59 E866FD                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 29948                                  	
 29949                                  	;call	setUMBs		; Link UMBs and set memory-allocation strategy
 29950                                  	; 01/01/2023
 29951 00002D5C E8B2FD                  	call	fm_link
 29952                                  
 29953                                  	;putdata fInHigh,1	; Remember that we're now running high
 29954                                  	;mov	byte [cs:fInHigh],1
 29955                                  	; 01/01/2023
 29956 00002D5F C606[B51F]01            	mov	byte [fInHigh],1
 29957                                  
 29958                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 29959                                  	;mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 29960                                  	; 01/01/2023
 29961 00002D64 A0[B91F]                	mov	al,[UmbLoad]
 29962                                  
 29963 00002D67 3CFF                    	cmp	al,UNSPECIFIED	; If they didn't,
 29964 00002D69 7420                    	je	short husX	; then we shouldn't do this loop:
 29965                                  
 29966 00002D6B 31C9                    	xor	cx,cx
 29967                                  
 29968                                  ; -----------------------------------------------
 29969                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 29970                                  ; -----------------------------------------------
 29971                                  
 29972 00002D6D 41                      hus10:	inc	cx		; For each UMB:
 29973                                  	; 01/01/2023
 29974 00002D6E 80F910                  	cmp	cl,MAXUMB
 29975                                  	;cmp	cx,MAXUMB ; 16
 29976 00002D71 730E                    	jae	short hus20
 29977                                  
 29978 00002D73 88C8                    	mov	al,cl		; (stopping as soon as we're outside of the
 29979 00002D75 06                      	push	es
 29980 00002D76 E89E00                  	call	findUMB		; valid range of UMBs)
 29981 00002D79 07                      	pop	es		; push/pop: trash what findumb finds.  :-)
 29982 00002D7A 7205                    	jc	short hus20
 29983                                  	
 29984                                  	; 02/01/2023
 29985                                  	;push	cx ; *
 29986 00002D7C E85001                  	call	_hideUMB_	; hide what we need to hide.
 29987                                  	;pop	cx ; *
 29988                                  
 29989 00002D7F EBEC                    	jmp	short hus10
 29990                                  hus20:	
 29991                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 29992                                  	; 01/01/2023
 29993                                  	; ds = cs
 29994                                  	;mov	al,[UmbLoad]
 29995                                  	;;mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 29996 00002D81 800E[B91F]00            	or	byte [UmbLoad],0
 29997                                  	;or	al,al		; --Is the load UMB 0? (-1==unspecified)
 29998 00002D86 7503                    	jnz	short husX	; If not, we're done.
 29999                                  
 30000 00002D88 E87502                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 30001                                  husX:	
 30002 00002D8B 07                      	pop	es
 30003                                  	; 01/01/2023
 30004                                  	;pop	ds
 30005                                  	;pop	cx
 30006                                  	;pop	ax
 30007 00002D8C C3                      	retn
 30008                                  
 30009                                  ; -----------------------------------------------------------------------------
 30010                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 30011                                  ; -----------------------------------------------------------------------------
 30012                                  ; ENTRY:  None
 30013                                  ; EXIT:   AL == load UMB
 30014                                  ; ERROR:  None
 30015                                  ; USES:   Flags, AX
 30016                                  ; -----------------------------------------------------------------------------
 30017                                  
 30018                                  ;GetLoadUMB:
 30019                                  ;	;getdata al, UmbLoad
 30020                                  ;	push	ds
 30021                                  ;	push	cs
 30022                                  ;	pop	ds
 30023                                  ;	mov	al,[UmLoad]
 30024                                  ;	pop	ds
 30025                                  ;	retn
 30026                                  
 30027                                  ; -----------------------------------------------------------------------------
 30028                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 30029                                  ; -----------------------------------------------------------------------------
 30030                                  ; ENTRY:  None
 30031                                  ; EXIT:   AX == load UMB minimum size
 30032                                  ; ERROR:  None
 30033                                  ; USES:   Flags, AX
 30034                                  ; -----------------------------------------------------------------------------
 30035                                  
 30036                                  	; 01/01/2023 - Retro DOS v4.2
 30037                                  GetLoadSize:
 30038                                  	; 09/04/2019 - Retro DOS v4.0
 30039                                  	;mov	al,[cs:UmbLoad]
 30040                                  	; 01/01/2023
 30041                                  	; ds = cs
 30042 00002D8D A0[B91F]                	mov	al,[UmbLoad] 
 30043                                  	;jmp	short GetSize
 30044                                  
 30045                                  	;push	bx
 30046                                  	;;push	si
 30047                                  	;push	ds
 30048                                  	;push	cs
 30049                                  	;pop	ds
 30050                                  
 30051                                  	;mov	al,[UmbLoad]
 30052                                  
 30053                                  	;xor	ah,ah			;    ax==UMB
 30054                                  	;mov	bx,UmbSize		;    bx==array
 30055                                  	;shl	al,1	                ;    ax==offset
 30056                                  	;;add	ax,bx			;    ax==element index
 30057                                  	;;mov	si,ax			; ds:si==element index
 30058                                  
 30059                                  	;;lodsw				;    ax==size
 30060                                  
 30061                                  	;add	bx,ax
 30062                                  	;mov	ax,[bx]
 30063                                  
 30064                                  	;pop	ds
 30065                                  	;;pop	si
 30066                                  	;pop	bx
 30067                                  	;retn
 30068                                  
 30069                                  ; -----------------------------------------------------------------------------
 30070                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 30071                                  ; -----------------------------------------------------------------------------
 30072                                  ; ENTRY:  AL == a UMB number
 30073                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 30074                                  ; ERROR:  None
 30075                                  ; USES:   Flags, AX
 30076                                  ; -----------------------------------------------------------------------------
 30077                                  
 30078                                  	; 01/01/2023 - Retro DOS v4.2
 30079                                  GetSize:
 30080                                  	; 09/04/2019 - Retro DOS v4.0
 30081                                  
 30082                                  	;push	bx ; 01/01/2023
 30083                                  	;push	si
 30084                                  	;push	ds
 30085                                  	;push	cs
 30086                                  	;pop	ds
 30087                                  
 30088 00002D90 30E4                    	xor	ah,ah			;    ax==UMB
 30089 00002D92 BB[CA1F]                	mov	bx,UmbSize		;    bx==array
 30090 00002D95 D0E0                    	shl	al,1	                ;    ax==offset
 30091                                  	;add	ax,bx			;    ax==element index
 30092                                  	;mov	si,ax			; ds:si==element index
 30093                                  
 30094                                  	;lodsw				;    ax==size
 30095                                  
 30096 00002D97 01C3                    	add	bx,ax
 30097                                  	; 01/01/2023
 30098                                  	; ds = cs
 30099 00002D99 8B07                    	mov	ax,[bx]
 30100                                  	;mov	ax,[cs:bx]
 30101                                  
 30102                                  	;pop	ds
 30103                                  	;pop	si
 30104                                  	;pop	bx ; 01/01/2023
 30105 00002D9B C3                      	retn
 30106                                  
 30107                                  ; -----------------------------------------------------------------------------
 30108                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 30109                                  ; -----------------------------------------------------------------------------
 30110                                  ; ENTRY:   AL == new load UMB
 30111                                  ; EXIT:    None
 30112                                  ; ERROR:   None
 30113                                  ; USES:    Flags, AX
 30114                                  ; -----------------------------------------------------------------------------
 30115                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 30116                                  ;          time you would ever need this, so that's okay.
 30117                                  ; -----------------------------------------------------------------------------
 30118                                  
 30119                                  ;StoLoadUMB:
 30120                                  ;	;putdata UmbLoad, al
 30121                                  ;	push	es
 30122                                  ;	push	cs
 30123                                  ;	pop	es
 30124                                  ;	mov	[es:UmbLoad],al
 30125                                  ;	pop	es
 30126                                  ;	retn
 30127                                  
 30128                                  ; -----------------------------------------------------------------------------
 30129                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 30130                                  ; -----------------------------------------------------------------------------
 30131                                  ; ENTRY:  AL == new load size
 30132                                  ; EXIT:   None
 30133                                  ; ERROR:  None
 30134                                  ; USES:   Flags, AX
 30135                                  ; -----------------------------------------------------------------------------
 30136                                  
 30137                                  	; 01/01/2023 - Retro DOS v4.2
 30138                                  StoLoadSize:
 30139                                  	; 01/01/2023
 30140                                  	;push	dx
 30141                                  
 30142                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 30143                                  	;
 30144                                  	;push	ds
 30145                                  	;push	cs
 30146                                  	;pop	ds
 30147                                  	;mov	dl,[UmbLoad]
 30148                                  	;pop	ds	
 30149                                  
 30150 00002D9C 2E8A16[B91F]            	mov	dl,[cs:UmbLoad]
 30151                                  
 30152 00002DA1 80FAFF                  	cmp	dl,UNSPECIFIED ; 0FFh
 30153 00002DA4 7403                    	je	short sls10
 30154                                  
 30155 00002DA6 E873FE                  	call	stowSiz			; We've got a function to do just this
 30156                                  sls10:	
 30157                                  	; 01/01/2023
 30158                                  	;pop	dx
 30159 00002DA9 C3                      	retn
 30160                                  
 30161                                  ; -----------------------------------------------------------------------------
 30162                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 30163                                  ; -----------------------------------------------------------------------------
 30164                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 30165                                  ; EXIT:     None; free elements in UMB marked as hidden
 30166                                  ; ERROR:    None
 30167                                  ; USES:     Flags
 30168                                  ; -----------------------------------------------------------------------------
 30169                                  
 30170                                  	; 01/01/2023 - Retro DOS v4.2
 30171                                  hideUMB:
 30172                                  	; 02/01/2023
 30173 00002DAA 52                      	push	dx ; (*)
 30174                                  	; 01/01/2023
 30175                                  	;push	ax
 30176 00002DAB 06                      	push	es
 30177                                  
 30178 00002DAC E86800                  	call	findUMB	; (*)	; Returns with carry if err, else ES == MCB
 30179 00002DAF 7224                    	jc	short huX
 30180                                  
 30181                                  ; ------------------------------------------------
 30182                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 30183                                  ;            we're not in the same UMB, so exit.
 30184                                  ; ------------------------------------------------
 30185                                  
 30186 00002DB1 E830FF                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30187 00002DB4 741F                    	jz	short huX	; If it is, we've finished the UMB.
 30188                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 30189 00002DB6 26830E010000            	or	word [es:ARENA.OWNER],0
 30190 00002DBC 7503                    	jnz	short hu20
 30191                                  
 30192 00002DBE E81700                  	call	hideMCB
 30193                                  hu20:	
 30194 00002DC1 26A00000                	mov	al,[es:ARENA.SIGNATURE]
 30195 00002DC5 3C5A                    	cmp	al,arena_signature_end  ;'Z'
 30196 00002DC7 740C                    	jz	short huX	; 'Z' means this was the last MCB... that's it.
 30197                                  
 30198                                  	;NextMCB es,ax		; Go on forward.
 30199 00002DC9 8CC0                    	mov     ax,es
 30200                                  	;add	ax,[es:3]
 30201 00002DCB 2603060300              	add     ax,[es:ARENA.SIZE]
 30202 00002DD0 40                      	inc     ax
 30203 00002DD1 8EC0                    	mov     es,ax
 30204                                  
 30205 00002DD3 EBDC                    	jmp	short hu10
 30206                                  huX:	
 30207 00002DD5 07                      	pop	es
 30208                                  	; 01/01/2023
 30209                                  	;pop	ax
 30210                                  	; 02/01/2023
 30211 00002DD6 5A                      	pop	dx ; (*)
 30212 00002DD7 C3                      	retn
 30213                                  
 30214                                  ; 02/01/2023
 30215                                  %if 0
 30216                                  
 30217                                  ; -----------------------------------------------------------------------------
 30218                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 30219                                  ; -----------------------------------------------------------------------------
 30220                                  ; ENTRY:    None
 30221                                  ; EXIT:     ZF set if user DIDN'T specify /S
 30222                                  ; ERROR:    None
 30223                                  ; USES:     Flags
 30224                                  ; -----------------------------------------------------------------------------
 30225                                  
 30226                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 30227                                  isTiny:
 30228                                  	; 02/01/2023
 30229                                  	;push	ax
 30230                                  
 30231                                  	;getdata al,fUmbTiny
 30232                                  	;
 30233                                  	;push	ds
 30234                                  	;push	cs
 30235                                  	;pop	ds
 30236                                  	;mov	al,[fUmbTiny]
 30237                                  	;pop	ds
 30238                                  
 30239                                  	mov	al,[cs:fUmbTiny]
 30240                                  	; 02/01/2023
 30241                                  	; ds = cs
 30242                                  	mov	al,[fUmbTiny]
 30243                                  
 30244                                  	or	al,al
 30245                                  	; 02/01/2023
 30246                                  	;pop	ax
 30247                                  	retn
 30248                                  
 30249                                  %endif
 30250                                  
 30251                                  ; -----------------------------------------------------------------------------
 30252                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 30253                                  ; -----------------------------------------------------------------------------
 30254                                  ; ENTRY:    ES:0 should point to an MCB
 30255                                  ; EXIT:     ZF set if MCB is free, else !ZF
 30256                                  ; ERROR:    None
 30257                                  ; USES:     Flags
 30258                                  ; -----------------------------------------------------------------------------
 30259                                  
 30260                                  ;isFreeMCB:
 30261                                  ;	or	word [es:ARENA.OWNER],0
 30262                                  ;	retn
 30263                                  
 30264                                  ; -----------------------------------------------------------------------------
 30265                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 30266                                  ; -----------------------------------------------------------------------------
 30267                                  ; ENTRY:    ES:0 should point to an MCB
 30268                                  ; EXIT:     None; MCB marked as HIDDEN
 30269                                  ; ERROR:    None
 30270                                  ; USES:     None
 30271                                  ; -----------------------------------------------------------------------------
 30272                                  
 30273                                  hideMCB:
 30274 00002DD8 26C70601000800          	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 30275 00002DDF 26C70608004849          	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 30276 00002DE6 26C7060A004444          	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 30277 00002DED 26C7060C00454E          	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 30278 00002DF4 26C7060E002020          	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 30279 00002DFB C3                      	retn
 30280                                  
 30281                                  ; -----------------------------------------------------------------------------
 30282                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 30283                                  ; -----------------------------------------------------------------------------
 30284                                  ; ENTRY:    ES:0 should point to an MCB
 30285                                  ; EXIT:     None; MCB marked as FREE
 30286                                  ; ERROR:    None
 30287                                  ; USES:     None
 30288                                  ; -----------------------------------------------------------------------------
 30289                                  
 30290                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 30291                                  
 30292                                  unHideMCB:
 30293                                  	; 03/01/2023
 30294                                  	;push	ax
 30295 00002DFC 26C70601000000          	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 30296 00002E03 B82020                  	mov	ax,'  ' ; 2020h
 30297 00002E06 26A30800                	mov	[es:ARENA.NAME+0],ax
 30298 00002E0A 26A30A00                	mov	[es:ARENA.NAME+2],ax
 30299 00002E0E 26A30C00                	mov	[es:ARENA.NAME+4],ax
 30300 00002E12 26A30E00                	mov	[es:ARENA.NAME+6],ax
 30301                                  	; 03/01/2023
 30302                                  	;pop	ax
 30303 00002E16 C3                      	retn
 30304                                  
 30305                                  ; -----------------------------------------------------------------------------
 30306                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 30307                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 30308                                  ; -----------------------------------------------------------------------------
 30309                                  ; ENTRY:    AL should be to a valid UMB number
 30310                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 30311                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 30312                                  ; USES:     Flags, ES
 30313                                  ; -----------------------------------------------------------------------------
 30314                                  
 30315                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 30316                                  	; (SYSINIT:3344h)
 30317                                  findUMB:
 30318                                  	; 01/01/2023
 30319                                  	;push	ax
 30320                                  	; 02/01/2023
 30321 00002E17 51                      	push	cx ; *
 30322                                  	;push	dx
 30323                                  
 30324 00002E18 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 30325                                  
 30326 00002E1A 89C2                    	mov	dx,ax		; Store the to-be-found UMB number in DX
 30327                                  
 30328 00002E1C E8B8FE                  	call	UmbHead		; Returns first UMB segment in AX
 30329 00002E1F 8EC0                    	mov	es,ax
 30330 00002E21 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 30331                                  
 30332                                  ; ---------------------------------------------
 30333                                  ; FU10--CX - This UMB number; 0 == conventional
 30334                                  ;       DX - The UMB number they're looking for
 30335                                  ;       ES - The current MCB address
 30336                                  ; ---------------------------------------------
 30337                                  
 30338                                  fu10:	
 30339 00002E23 39D1                    	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 30340 00002E25 741B                    	je	short fuX	; searching for--so exit.
 30341                                  
 30342 00002E27 E8BAFE                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30343 00002E2A 7501                    	jnz	short fu20
 30344                                  
 30345 00002E2C 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 30346                                  fu20:	
 30347 00002E2D 26A00000                	mov	al,[es:ARENA.SIGNATURE]
 30348 00002E31 3C5A                    	cmp	al,arena_signature_end ; 'Z'
 30349 00002E33 740C                    	je	short fuE	; 'Z' means this was the last MCB... that's it.
 30350                                  
 30351                                  	;NextMCB es,ax		; Go on forward.
 30352 00002E35 8CC0                    	mov     ax,es
 30353                                  	;add	ax,[es:3]
 30354 00002E37 2603060300              	add     ax,[es:ARENA.SIZE]
 30355 00002E3C 40                      	inc     ax
 30356 00002E3D 8EC0                    	mov     es,ax
 30357                                  
 30358 00002E3F EBE2                    	jmp	short fu10
 30359                                  fuE:	
 30360 00002E41 F9                      	stc
 30361                                  fuX:
 30362                                  	; 01/01/2023
 30363                                  	;pop	dx
 30364                                  	; 02/01/2023
 30365 00002E42 59                      	pop	cx ; *
 30366                                  	;pop	ax		; The address is already in ES.
 30367 00002E43 C3                      	retn
 30368                                  
 30369                                  ; -----------------------------------------------------------------------------
 30370                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 30371                                  ; -----------------------------------------------------------------------------
 30372                                  ; ENTRY:    AL should be to a valid UMB number
 30373                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 30374                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 30375                                  ; USES:     Flags, ES
 30376                                  ; -----------------------------------------------------------------------------
 30377                                  
 30378                                  	; 01/01/2023 - Retro DOS v4.2
 30379                                  BigFree:
 30380                                  	; 01/01/2023
 30381                                  	;push	bx
 30382 00002E44 51                      	push	cx
 30383                                  
 30384 00002E45 E8CFFF                  	call	findUMB			; Returns with CF if err, else ES==MCB
 30385 00002E48 723A                    	jc	short bfX		; (would be "jc bfE"; it just does stc)
 30386                                  
 30387 00002E4A 31DB                    	xor	bx,bx			; Segment address of largest free MCB
 30388 00002E4C 31C9                    	xor	cx,cx			; Size of largest free MCB
 30389                                  
 30390                                  ; ---------------------------------------------
 30391                                  ; BF10--ES - Current MCB address
 30392                                  ;       BX - Address of largest free MCB so far
 30393                                  ;       CX - Size of largest free MCB so far
 30394                                  ; ---------------------------------------------
 30395                                  
 30396                                  bf10:	
 30397 00002E4E E893FE                  	call	isSysMCB		; If we've left the MCB, we're done.
 30398 00002E51 7428                    	jz	short bf30
 30399                                  
 30400                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 30401 00002E53 26830E010000            	or	word [es:ARENA.OWNER],0
 30402 00002E59 750C                    	jnz	short bf20
 30403                                  
 30404 00002E5B 26A10300                	mov	ax,[es:ARENA.SIZE]
 30405                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 30406 00002E5F 39C1                    	cmp	cx,ax
 30407 00002E61 7F04                    	jg	short bf20		; Unless we're bigger,
 30408                                  
 30409 00002E63 8CC3                    	mov	bx,es			; Store this new element's address,
 30410                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 30411 00002E65 89C1                    	mov	cx,ax
 30412                                  
 30413 00002E67 26A00000                bf20:	mov	al,[es:ARENA.SIGNATURE]
 30414 00002E6B 3C5A                    	cmp	al,arena_signature_end	; 'Z'
 30415 00002E6D 740C                    	jz	short bf30		; 'Z' means this was the last MCB.
 30416                                  
 30417                                  	;NextMCB es,ax		; Go on forward.
 30418 00002E6F 8CC0                    	mov     ax,es
 30419                                  	;add	ax,[es:3]
 30420 00002E71 2603060300              	add     ax,[es:ARENA.SIZE]
 30421 00002E76 40                      	inc     ax
 30422 00002E77 8EC0                    	mov     es,ax
 30423                                  
 30424 00002E79 EBD3                    	jmp	short bf10
 30425                                  
 30426 00002E7B 8EC3                    bf30:	mov	es,bx			; Return the address
 30427 00002E7D 89C8                    	mov	ax,cx			; Return the size
 30428 00002E7F 09DB                    	or	bx,bx
 30429 00002E81 7501                    	jnz	short bfX		; (if size==0, there's nothing free)
 30430                                  bfE:	
 30431 00002E83 F9                      	stc
 30432                                  bfX:
 30433 00002E84 59                      	pop	cx
 30434                                  	; 01/01/2023
 30435                                  	;pop	bx
 30436 00002E85 C3                      	retn
 30437                                  
 30438                                  ; -----------------------------------------------------------------------------
 30439                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 30440                                  ; -----------------------------------------------------------------------------
 30441                                  ; ENTRY:    AL should be to a valid UMB number
 30442                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 30443                                  ; ERROR:    None
 30444                                  ; USES:     Flags
 30445                                  ; -----------------------------------------------------------------------------
 30446                                  
 30447                                  	; 02/01/2023 - Retro DOS v4.2
 30448                                  
 30449                                  isSpecified:
 30450                                  	; 02/01/2023
 30451                                  	;push	ax
 30452                                  
 30453 00002E86 30FF                    	xor	bh,bh
 30454 00002E88 88C3                    	mov	bl,al
 30455                                  
 30456                                  	;getdata al,DS:UmbUsed[bx]
 30457                                  	;
 30458                                  	;push	ds
 30459                                  	;push	cs
 30460                                  	;pop	ds
 30461                                  	;mov	al,[bx+UmbUsed]
 30462                                  	;pop	ds
 30463                                  	
 30464                                  	;mov	al,[cs:bx+UmbUsed]
 30465                                  	; 02/01/2023
 30466                                  	; ds = cs
 30467 00002E8A 8A87[BA1F]              	mov	al,[bx+UmbUsed]
 30468                                  
 30469 00002E8E 08C0                    	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 30470                                  
 30471                                  	; 02/01/2023
 30472 00002E90 58                      	pop	ax
 30473 00002E91 C3                      	retn
 30474                                  
 30475                                  ; -----------------------------------------------------------------------------
 30476                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 30477                                  ; -----------------------------------------------------------------------------
 30478                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 30479                                  ; EXIT:     None; MCB broken if carry clear
 30480                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 30481                                  ; USES:     Flags
 30482                                  ; -----------------------------------------------------------------------------
 30483                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 30484                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 30485                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 30486                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 30487                                  ; minimum for performing a split.
 30488                                  ; -----------------------------------------------------------------------------
 30489                                  
 30490                                  MIN_SPLIT_SIZE	equ	20h
 30491                                  
 30492                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 30493                                  
 30494                                  shrinkMCB:
 30495                                  	;pushreg <bx,cx,es>
 30496                                  	; 02/01/2023
 30497                                  	;push	bx
 30498 00002E92 51                      	push	cx
 30499 00002E93 06                      	push	es
 30500                                  
 30501 00002E94 89C3                    	mov	bx,ax			; Move things around... and
 30502                                  	; 02/01/2023
 30503                                  	;mov	ax,es			; save this one for later.
 30504                                  
 30505 00002E96 268B0E0300              	mov	cx,[es:ARENA.SIZE]
 30506                                  	; 02/01/2023
 30507 00002E9B 89C8                    	mov	ax,cx 
 30508                                  
 30509 00002E9D 83E820                  	sub	ax,MIN_SPLIT_SIZE ; 32
 30510                                  	;sub	cx,MIN_SPLIT_SIZE ; 32
 30511                                  	;;cmp	bx,cx			; {New size} vs {Current Size-20h}
 30512                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 30513                                  	; 18/12/2022
 30514                                  	;cmp	cx,bx
 30515                                  	; 02/01/2023
 30516 00002EA0 39D8                    	cmp	ax,bx
 30517 00002EA2 7228                    	jb	short smE ; (*)
 30518                                  
 30519 00002EA4 268A160000              	mov	dl,[es:ARENA.SIGNATURE]
 30520                                  	
 30521                                  	;mov	cx,[es:ARENA.SIZE]
 30522                                  	; 02/01/2023
 30523 00002EA9 8CC0                    	mov	ax,es
 30524                                  
 30525 00002EAB 26891E0300              	mov	[es:ARENA.SIZE],bx
 30526 00002EB0 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],'M'
 30527                                  
 30528 00002EB6 01D8                    	add	ax,bx
 30529 00002EB8 40                      	inc	ax
 30530 00002EB9 8EC0                    	mov	es,ax			; Move to new arena area
 30531                                  
 30532 00002EBB 89C8                    	mov	ax,cx
 30533 00002EBD 29D8                    	sub	ax,bx
 30534                                  	; 12/12/2022
 30535                                  	; ax > 0
 30536 00002EBF 48                      	dec	ax			; And prepare the new size
 30537                                  
 30538                                  	; 18/12/2022
 30539 00002EC0 2688160000              	mov	[es:ARENA.SIGNATURE],dl
 30540                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 30541 00002EC5 26A30300                	mov	[es:ARENA.SIZE],ax
 30542                                  	;mov	ax,'  ' ; 2020h
 30543                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 30544                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 30545                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 30546                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 30547                                  
 30548                                  	; 18/12/2022
 30549 00002EC9 E8B601                  	call	freeMCB	; (**)
 30550                                  
 30551                                  	; 12/12/2022
 30552                                  	; cf=0
 30553                                  	;clc
 30554                                  	; 18/12/2022
 30555                                  	;jmp	short smX
 30556                                  smE:	
 30557                                  	; 18/12/2022
 30558                                  	; cf=1 (*)
 30559                                  	;stc
 30560                                  smX:	
 30561                                  	;popreg	<es,cx,bx>
 30562 00002ECC 07                      	pop	es
 30563 00002ECD 59                      	pop	cx
 30564                                  	; 02/01/2023
 30565                                  	;pop	bx
 30566 00002ECE C3                      	retn
 30567                                  
 30568                                  ; -----------------------------------------------------------------------------
 30569                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 30570                                  ; -----------------------------------------------------------------------------
 30571                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 30572                                  ; EXIT:     None; UMB is hidden as necessary
 30573                                  ; ERROR:    None
 30574                                  ; USES:     Flags, AX, CX
 30575                                  ; -----------------------------------------------------------------------------
 30576                                  ; PRIMARY LOGIC:
 30577                                  ;
 30578                                  ; If the UMB is specified in the DH/LH statement, then:
 30579                                  ;    If the largest free segment is too small (check specified size), then:
 30580                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 30581                                  ;    Else, if largest free segment is LARGER than specified size, then:
 30582                                  ;       If /S was given on the command-line, then:
 30583                                  ;          Break that element into two pieces
 30584                                  ;          Set a flag that we're shrinking
 30585                                  ;       Endif
 30586                                  ;    Endif
 30587                                  ; Endif
 30588                                  ; If the UMB is NOT specified (or was removed by the above):
 30589                                  ;    Hide all free elements in the UMB
 30590                                  ;    If the flag that we're shrinking was set, then:
 30591                                  ;       UN-hide the lower portion of the shrunken UMB
 30592                                  ;    ENDIF
 30593                                  ; ENDIF
 30594                                  ; -----------------------------------------------------------------------------
 30595                                  
 30596                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 30597                                  	; (SYSINIT:3426h)
 30598                                  _hideUMB_:
 30599                                  	; 02/01/2023
 30600                                  	; ds = cs
 30601                                  
 30602                                  	; 01/01/2023
 30603                                  	;push	bx
 30604                                  	;push	dx
 30605 00002ECF 06                      	push	es
 30606                                  
 30607 00002ED0 88C8                    	mov	al,cl
 30608 00002ED2 E8B1FF                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 30609 00002ED5 742D                    	jz	short hu_20
 30610                                  
 30611 00002ED7 88C8                    	mov	al,cl		; Retrieve the size of the largest
 30612 00002ED9 E868FF                  	call	BigFree		; free element in AX; put its address in ES
 30613 00002EDC 7226                    	jc	short hu_20	; Oops. Errors mean skip this part.
 30614                                  
 30615 00002EDE 50                      	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 30616 00002EDF 88C8                    	mov	al,cl		; Retrieve the user's specified
 30617 00002EE1 E8ACFE                  	call	GetSize		; minimum size for this umb (into AX)
 30618 00002EE4 5B                      	pop	bx		; Now BX==BigFree, AX==Specified Size
 30619                                  
 30620 00002EE5 09C0                    	or	ax,ax		; If they didn't specify one,
 30621 00002EE7 741B                    	jz	short hu_20	; Skip over all this.
 30622                                  
 30623 00002EE9 39D8                    	cmp	ax,bx		; Ah... if (specified > max free)
 30624 00002EEB 7607                    	jbe	short hu_10
 30625                                  
 30626 00002EED 88C8                    	mov	al,cl		;  Then mark that UMB as unused. Nya nya.
 30627 00002EEF E8F2FC                  	call	unMarkUMB
 30628 00002EF2 EB10                    	jmp	short hu_20
 30629                                  hu_10:	
 30630                                  	;call	isTiny		; Returns ZF clear if user specified /S
 30631                                  	;jz	short hu_20
 30632                                  	; 02/01/2023
 30633                                  ;isTiny:
 30634                                  	;mov	al,[fUmbTiny] ; ds = cs
 30635                                  	;or	al,al
 30636 00002EF4 800E[B61F]00            	or	byte [fUmbTiny],0
 30637 00002EF9 7409                    	jz	short hu_20
 30638                                  
 30639 00002EFB E894FF                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 30640 00002EFE 7204                    	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 30641                                  
 30642 00002F00 8CC2                    	mov	dx,es
 30643 00002F02 EB09                    	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 30644                                  
 30645 00002F04 89C8                    hu_20:	mov	ax,cx
 30646 00002F06 E87DFF                  	call	isSpecified	; If they specified this UMB, we're done...
 30647 00002F09 7510                    	jnz	short hu_X	; so leave.
 30648                                  
 30649 00002F0B 31D2                    	xor	dx,dx
 30650                                  hu_30:	
 30651 00002F0D 88C8                    	mov	al,cl
 30652                                  
 30653 00002F0F E898FE                  	call	hideUMB		; Hides everything in UMB #al
 30654                                  
 30655 00002F12 09D2                    	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 30656 00002F14 7405                    	jz	short hu_X	; So we should leave.
 30657                                  
 30658 00002F16 8EC2                    	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 30659 00002F18 E8E1FE                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 30660                                  hu_X:	
 30661 00002F1B 07                      	pop	es
 30662                                  	; 01/01/2023
 30663                                  	;pop	dx
 30664                                  	;pop	bx
 30665 00002F1C C3                      	retn
 30666                                  
 30667                                  ; -----------------------------------------------------------------------------
 30668                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 30669                                  ; -----------------------------------------------------------------------------
 30670                                  ; Entry:  None
 30671                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 30672                                  ; Error:  None
 30673                                  ; Uses:   Flags
 30674                                  ; -----------------------------------------------------------------------------
 30675                                  
 30676                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 30677                                  
 30678                                  UnFreeze:
 30679                                  	; 03/01/2023
 30680                                  	;push	ax
 30681 00002F1D 06                      	push	es
 30682                                  
 30683 00002F1E E8B6FD                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 30684 00002F21 721E                    	jc	short ufX
 30685                                  
 30686 00002F23 8EC0                    	mov	es,ax
 30687                                  
 30688                                  ; ------------------------------
 30689                                  ; UF10--ES - Current MCB address
 30690                                  ; ------------------------------
 30691                                  
 30692 00002F25 E81B00                  uf10:	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 30693 00002F28 7503                    	jnz	short uf20
 30694 00002F2A E8CFFE                  	call	unHideMCB
 30695                                  uf20:	
 30696 00002F2D 26A00000                	mov	al,[es:ARENA.SIGNATURE]
 30697                                  
 30698 00002F31 3C5A                    	cmp	al,arena_signature_end ; 'Z'
 30699 00002F33 740C                    	jz	short ufX	; 'Z' means this was the last MCB... that's it.
 30700                                  
 30701                                  	;NextMCB es,ax		; Go on forward.
 30702 00002F35 8CC0                    	mov     ax,es
 30703                                  	;add	ax,[es:3]
 30704 00002F37 2603060300              	add     ax,[es:ARENA.SIZE]
 30705 00002F3C 40                      	inc     ax
 30706 00002F3D 8EC0                    	mov     es,ax
 30707                                  
 30708 00002F3F EBE4                    	jmp	short uf10
 30709                                  ufX:	
 30710 00002F41 07                      	pop	es
 30711                                  	; 03/01/2023
 30712                                  	;pop	ax
 30713 00002F42 C3                      	retn
 30714                                  
 30715                                  ; -----------------------------------------------------------------------------
 30716                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 30717                                  ; -----------------------------------------------------------------------------
 30718                                  ; ENTRY:    ES:0 should point to an MCB
 30719                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 30720                                  ; ERROR:    None
 30721                                  ; USES:     Flags
 30722                                  ; -----------------------------------------------------------------------------
 30723                                  
 30724                                  isFrozMCB:
 30725                                  	;push	ax
 30726                                  
 30727                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 30728                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 30729 00002F43 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 30730 00002F49 7522                    	jne	short ifmX
 30731                                  
 30732                                  	;mov	ax,[es:ARENA.NAME+0]
 30733                                  	;cmp	ax,'FR' ; 5246h
 30734 00002F4B 26813E08004652          	cmp	word [es:ARENA.NAME+0],'FR'
 30735 00002F52 7519                    	jne	short ifmX
 30736                                  	;mov	ax,[es:ARENA.NAME+2]
 30737                                  	;cmp	ax,'OZ' ; 5A4Fh
 30738 00002F54 26813E0A004F5A          	cmp	word [es:ARENA.NAME+2],'OZ'
 30739 00002F5B 7510                    	jne	short ifmX
 30740                                  	;mov	ax,[es:ARENA.NAME+4]
 30741                                  	;cmp	ax,'EN' ; 4E45h
 30742 00002F5D 26813E0C00454E          	cmp	word [es:ARENA.NAME+4],'EN'
 30743 00002F64 7507                    	jne	short ifmX
 30744                                  	;mov	ax,[es:ARENA.NAME+6]
 30745                                  	;cmp	ax,'  ' ; 2020h
 30746 00002F66 26813E0E002020          	cmp	word [es:ARENA.NAME+6],'  '
 30747                                  ifmX:	
 30748                                  	;pop	ax
 30749 00002F6D C3                      	retn
 30750                                  
 30751                                  ; -----------------------------------------------------------------------------
 30752                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 30753                                  ; -----------------------------------------------------------------------------
 30754                                  ; ENTRY:    ES:0 should point to an MCB
 30755                                  ; EXIT:     None; MCB frozen
 30756                                  ; ERROR:    None
 30757                                  ; USES:     None
 30758                                  ; -----------------------------------------------------------------------------
 30759                                  
 30760                                  frezMCB:
 30761 00002F6E 26C70601000800          	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 30762 00002F75 26C70608004652          	mov	word [es:ARENA.NAME+0],'FR'
 30763 00002F7C 26C7060A004F5A          	mov	word [es:ARENA.NAME+2],'OZ'
 30764 00002F83 26C7060C00454E          	mov	word [es:ARENA.NAME+4],'EN'
 30765 00002F8A 26C7060E002020          	mov	word [es:ARENA.NAME+6],'  '
 30766 00002F91 C3                      	retn
 30767                                  
 30768                                  ; -----------------------------------------------------------------------------
 30769                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 30770                                  ; -----------------------------------------------------------------------------
 30771                                  ; Entry:  None
 30772                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 30773                                  ; Error:  None
 30774                                  ; Uses:   Flags
 30775                                  ; -----------------------------------------------------------------------------
 30776                                  
 30777                                  	; 01/01/2023 - Retro DOS v4.2  
 30778                                  FreezeUM:
 30779                                  	; 01/01/2023
 30780                                  	;push	ax
 30781                                  	;push	cx
 30782                                  	;push	dx
 30783 00002F92 06                      	push	es
 30784                                  
 30785                                  	;;call	GetLoadUMB
 30786                                  	; 01/01/2023
 30787                                  	; ds = cs
 30788                                  	;mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 30789 00002F93 A0[B91F]                	mov	al,[UmbLoad] 	
 30790                                  
 30791 00002F96 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 30792 00002F98 89C2                    	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 30793                                  
 30794 00002F9A E83AFD                  	call	UmbHead		; Returns first UMB segment in AX
 30795 00002F9D 8EC0                    	mov	es,ax
 30796 00002F9F 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 30797                                  
 30798                                  ; -----------------------------------------
 30799                                  ; FUM10--ES - Current MCB address
 30800                                  ;        CX - Current UMB number
 30801                                  ;        DX - UMB number to skip (load UMB)
 30802                                  ; -----------------------------------------
 30803                                  
 30804 00002FA1 E840FD                  fum10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30805 00002FA4 7501                    	jnz	short fum20
 30806                                  
 30807 00002FA6 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 30808                                  fum20:	
 30809 00002FA7 39D1                    	cmp	cx,dx		; If this is the load UMB, we don't want to
 30810 00002FA9 740B                    	je	short fum30	; freeze anything... so skip that section.
 30811                                  
 30812                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 30813 00002FAB 26830E010000            	or	word [es:ARENA.OWNER],0
 30814 00002FB1 7503                    	jnz	short fum30	; either.
 30815                                  
 30816 00002FB3 E8B8FF                  	call	frezMCB
 30817                                  fum30:	
 30818 00002FB6 26A00000                	mov	al,[es:ARENA.SIGNATURE]
 30819 00002FBA 3C5A                    	cmp	al,arena_signature_end ; 'Z'
 30820 00002FBC 740C                    	je	short fumX	; 'Z' means this was the last MCB... that's it.
 30821                                  
 30822                                  	;NextMCB es, ax		; Go on forward.
 30823 00002FBE 8CC0                    	mov     ax,es
 30824                                  	;add	ax,[es:3]
 30825 00002FC0 2603060300              	add     ax,[es:ARENA.SIZE]
 30826 00002FC5 40                      	inc     ax
 30827 00002FC6 8EC0                    	mov     es,ax
 30828                                  	
 30829 00002FC8 EBD7                    	jmp	short fum10
 30830                                  
 30831 00002FCA 07                      fumX:	pop	es
 30832                                  	; 01/01/2023
 30833                                  	;pop	dx
 30834                                  	;pop	cx
 30835                                  	;pop	ax
 30836 00002FCB C3                      	retn
 30837                                  
 30838                                  ; -----------------------------------------------------------------------------
 30839                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 30840                                  ; -----------------------------------------------------------------------------
 30841                                  ; ENTRY:    None
 30842                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 30843                                  ; ERROR:    None
 30844                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 30845                                  ; -----------------------------------------------------------------------------
 30846                                  
 30847                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 30848                                  UmbTest:
 30849                                  	; 01/01/2023
 30850                                  	;push	ax
 30851 00002FCC 53                      	push	bx ; *
 30852                                  	;push	ds
 30853 00002FCD 06                      	push	es ; **
 30854                                  
 30855                                  	; 01/01/2023
 30856                                  	; ds = cs
 30857                                  
 30858 00002FCE E840FB                  	call	fm_link			; Link in UMBs (if not already linked)
 30859 00002FD1 E80800                  	call	WalkMem			; Check to see if they're really linked
 30860 00002FD4 9C                      	pushf				; And remember what we found out
 30861 00002FD5 E84AFB                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 30862 00002FD8 9D                      	popf				; And restore what we found out.
 30863                                  
 30864 00002FD9 07                      	pop	es ; **
 30865                                  	; 01/01/2023
 30866                                  	;pop	ds
 30867 00002FDA 5B                      	pop	bx ; *
 30868                                  	;pop	ax
 30869 00002FDB C3                      	retn
 30870                                  
 30871                                  ; -----------------------------------------------------------------------------
 30872                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 30873                                  ; -----------------------------------------------------------------------------
 30874                                  ; ENTRY:    None
 30875                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 30876                                  ; ERROR:    None
 30877                                  ; USES:     Flags
 30878                                  ; -----------------------------------------------------------------------------
 30879                                  
 30880                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 30881                                  	; (SYSINIT:3541h)
 30882                                  
 30883                                  WalkMem:
 30884                                  	;push	ax ; ?
 30885                                  	;push	bx ; ?
 30886                                  	;;push	ds ; ? ; 01/01/2023 (MSDOS 6.21 IO.SYS, SYSINIT:352Fh)
 30887                                  	;push	es ; ? no need to save contents of these registers ?
 30888                                  		   	
 30889 00002FDC B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30890 00002FDE CD21                    	int	21h
 30891                                  
 30892 00002FE0 268B47FE                	mov	ax,[es:bx-2]
 30893 00002FE4 8EC0                    	mov	es,ax
 30894                                  
 30895                                  ; ------------------------------
 30896                                  ; UM10: ES = Current MCB pointer
 30897                                  ; ------------------------------
 30898                                  
 30899 00002FE6 26A00000                um10:	mov	al,[es:ARENA.SIGNATURE]
 30900 00002FEA 3C5A                    	cmp	al,arena_signature_end ; 'Z'
 30901 00002FEC 740C                    	je	short um20		; If signature == 'Z', hay no more.
 30902                                  
 30903                                  	;NextMCB es,bx			; Move to the next MCB
 30904                                  
 30905 00002FEE 8CC3                    	mov     bx,es
 30906                                  	;add	bx,[es:3]
 30907 00002FF0 26031E0300              	add     bx,[es:ARENA.SIZE]
 30908 00002FF5 43                      	inc     bx
 30909 00002FF6 8EC3                    	mov     es,bx
 30910                                  		
 30911 00002FF8 EBEC                    	jmp	short um10		; And restart the loop.
 30912                                  um20:	
 30913 00002FFA 8CC0                    	mov	ax,es
 30914                                  
 30915 00002FFC 3DFF9F                  	cmp	ax,9FFFh		; This sets CF iff ax < 9FFF.
 30916                                  
 30917                                  	;pop	es ; ?
 30918                                  	;;pop	ds ; ? ; 01/01/2023 (MSDOS 6.21 IO.SYS, SYSINIT:353Dh)
 30919                                  	;pop	bx ; ?
 30920                                  	;pop	ax ; ?
 30921                                  	
 30922 00002FFF C3                      	retn
 30923                                  
 30924                                  ; -----------------------------------------------------------------------------
 30925                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 30926                                  ; -----------------------------------------------------------------------------
 30927                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 30928                                  ; EXIT:     None
 30929                                  ; ERROR:    None
 30930                                  ; USES:     AX, BX
 30931                                  ; -----------------------------------------------------------------------------
 30932                                  
 30933                                  	; 01/01/2023 - Retro DOS v4.2
 30934                                  hl_unlink:
 30935 00003000 30FF                    	xor	bh,bh
 30936                                  
 30937                                  	;getdata bl,fm_umb		; Restore original link-state
 30938                                  	;
 30939                                  	;push	ds
 30940                                  	;push	cs
 30941                                  	;pop	ds
 30942                                  	;mov	bl,[fm_umb]
 30943                                  	;pop	ds
 30944                                  
 30945                                  	; 01/01/2023
 30946                                  	; ds = cs
 30947                                  	;mov	bl,[cs:fm_umb]
 30948 00003002 8A1E[EA1F]              	mov	bl,[fm_umb]
 30949                                  
 30950 00003006 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30951 00003009 CD21                    	int	21h
 30952 0000300B C3                      	retn
 30953                                  
 30954                                  ; ----------------------------------------------------------------------
 30955                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 30956                                  ; ----------------------------------------------------------------------
 30957                                  ; 09/04/2019 - Retro DOS v4.0
 30958                                  
 30959                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 30960                                  ;   Date:     May 14, 1992
 30961                                  
 30962                                  ;   Modification log:
 30963                                  ;
 30964                                  ;     DATE    WHO      DESCRIPTION
 30965                                  ;   --------  -------  --------------------------------------------------------
 30966                                  ;   05/14/92  t-richj  Original
 30967                                  ;   06/21/92  t-richj  Final revisions before check-in
 30968                                  
 30969                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 30970                                  
 30971                                  ; -----------------------------------------------------------------------------
 30972                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 30973                                  ; -----------------------------------------------------------------------------
 30974                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 30975                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 30976                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 30977                                  ; ERROR:  None
 30978                                  ; USES:   fInHigh (from highvar.inc), carry flag
 30979                                  ; -----------------------------------------------------------------------------
 30980                                  
 30981                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 30982                                  	; (SYSINIT:357Bh)
 30983                                  
 30984                                  UnHideUMBs:
 30985 0000300C 50                      	push	ax		; Save ax for what we're about to do
 30986                                  
 30987                                  ; -----------------------------------------------------------------------------
 30988                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 30989                                  ;    length of time. Those six constitute a check of whether or not we should
 30990                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 30991                                  ;    will destroy the current link-state and memory-allocation strategy after
 30992                                  ;    every command execution.
 30993                                  ; -----------------------------------------------------------------------------
 30994                                  
 30995                                  	;getdata al,fInHigh	; Get InHigh from data segment
 30996                                  	;
 30997                                  	;push	ds
 30998                                  	;push	cs
 30999                                  	;pop	ds
 31000                                  	;mov	al,[fInHigh]
 31001                                  	;pop	ds	
 31002                                  
 31003                                  	;mov	al,[cs:fInHigh]
 31004                                  	; 31/12/2022
 31005                                  	; ds = cs
 31006 0000300D A0[B51F]                	mov	al,[fInHigh]	
 31007                                  
 31008 00003010 08C0                    	or	al,al
 31009 00003012 7503                    	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 31010                                  
 31011 00003014 58                      	pop	ax		; then there's nothing to do here... so
 31012 00003015 F9                      	stc			; restore everything and return. Just like
 31013 00003016 C3                      	retn			; that.
 31014                                  uhu10:	
 31015 00003017 E89000                  	call	linkumb		; Make sure UMBs are linked in.
 31016 0000301A E81200                  	call	FreeUMBs
 31017                                  
 31018                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 31019                                  	;
 31020                                  	;push	es
 31021                                  	;push	cs
 31022                                  	;pop	es
 31023                                  	;mov	byte [es:fInHigh],0
 31024                                  	;pop	ds
 31025                                  
 31026                                  	; 31/12/2022
 31027                                  	; ds = cs	
 31028                                  	;mov	byte [cs:fInHigh],0
 31029 0000301D C606[B51F]00            	mov	byte [fInHigh],0
 31030                                  
 31031                                  	;call	he_unlink	; Unlink UMBs
 31032                                  	; 31/12/2022
 31033                                  ;;he_unlink:
 31034 00003022 30FF                    	xor	bh,bh
 31035                                  
 31036                                  	;getdata bl,fm_umb	; Restore original link-state
 31037                                  	;mov	bl,[cs:fm_umb]	
 31038 00003024 8A1E[EA1F]              	mov	bl,[fm_umb]
 31039                                  
 31040 00003028 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 31041 0000302B CD21                    	int	21h
 31042                                  	;;retn
 31043                                  
 31044 0000302D 58                      	pop	ax
 31045                                  	; 12/12/2022
 31046                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 31047 0000302E C3                      	retn
 31048                                  
 31049                                  ; 31/12/2022
 31050                                  ;%if 0
 31051                                  ;
 31052                                  ;; -----------------------------------------------------------------------------
 31053                                  ;;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 31054                                  ;; -----------------------------------------------------------------------------
 31055                                  ;; ENTRY:    fm_umb == 1 : leave linked, else unlink
 31056                                  ;; EXIT:     None
 31057                                  ;; ERROR:    None
 31058                                  ;; USES:     AX, BX
 31059                                  ;; -----------------------------------------------------------------------------
 31060                                  ;
 31061                                  ;he_unlink:
 31062                                  ;	xor	bh, bh
 31063                                  ;
 31064                                  ;	;getdata bl, fm_umb	; Restore original link-state
 31065                                  ;	mov	bl,[cs:fm_umb]	
 31066                                  ;
 31067                                  ;	mov	ax,DOS_SET_UMBLINK ; 5803h
 31068                                  ;	int	21h
 31069                                  ;	retn
 31070                                  ;
 31071                                  ;%endif
 31072                                  
 31073                                  ; -----------------------------------------------------------------------------
 31074                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 31075                                  ; -----------------------------------------------------------------------------
 31076                                  ; ENTRY:    None
 31077                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 31078                                  ; ERROR:    None (ignore CF)
 31079                                  ; USES:     Flags
 31080                                  ; -----------------------------------------------------------------------------
 31081                                  
 31082                                  FreeUMBs:
 31083 0000302F 50                      	push	ax
 31084 00003030 06                      	push	es
 31085                                  
 31086 00003031 E86900                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 31087 00003034 721E                    	jc	short fusX
 31088                                  
 31089 00003036 8EC0                    	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 31090                                  fus10:	
 31091 00003038 E81C00                  	call	isHideMCB	; Returns with ZF set if owner is 0
 31092 0000303B 7503                    	jnz	short fus20
 31093 0000303D E84200                  	call	freeMCB
 31094                                  fus20:	   
 31095 00003040 26A00000                	mov	al,[es:ARENA.SIGNATURE]
 31096 00003044 3C5A                    	cmp	al,arena_signature_end ; 'Z'
 31097 00003046 740C                    	jz	short fusX	; That means this was the last MCB--that's it.
 31098                                  
 31099 00003048 8CC0                    	mov	ax,es
 31100 0000304A 2603060300              	add	ax,[es:ARENA.SIZE]
 31101 0000304F 40                      	inc	ax
 31102 00003050 8EC0                    	mov	es,ax		; Go on forward.
 31103                                  
 31104 00003052 EBE4                    	jmp	short fus10
 31105                                  fusX:	
 31106 00003054 07                      	pop	es
 31107 00003055 58                      	pop	ax
 31108 00003056 C3                      	retn
 31109                                  
 31110                                  ; -----------------------------------------------------------------------------
 31111                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 31112                                  ; -----------------------------------------------------------------------------
 31113                                  ; ENTRY:    ES:0 should point to an MCB
 31114                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 31115                                  ; ERROR:    None
 31116                                  ; USES:     Flags
 31117                                  ; -----------------------------------------------------------------------------
 31118                                  
 31119                                  isHideMCB:
 31120                                  	;push	ax
 31121                                  
 31122 00003057 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 31123 0000305D 7522                    	jne	short ihm_x				; then check for HIDDEN
 31124                                  
 31125                                  	;mov	ax,[es:ARENA.NAME]
 31126                                  	;cmp	ax,'HI' ; 4948h
 31127 0000305F 26813E08004849          	cmp	word [es:ARENA.NAME+0],'HI'
 31128 00003066 7519                    	jne	short ihm_x
 31129                                  	;mov	ax,[es:ARENA.NAME+2]
 31130                                  	;cmp	ax,'DD' ; 4444h
 31131 00003068 26813E0A004444          	cmp	word [es:ARENA.NAME+2],'DD'
 31132 0000306F 7510                    	jne	short ihm_x
 31133                                  	;mov	ax,[es:ARENA.NAME+4]
 31134                                  	;cmp	ax,'EN' ; 4E45h
 31135 00003071 26813E0C00454E          	cmp	word [es:ARENA.NAME+4],'EN'
 31136 00003078 7507                    	jne	short ihm_x
 31137                                  	;mov	ax,[es:ARENA.NAME+6]
 31138                                  	;cmp	ax,'  ' ; 2020h
 31139 0000307A 26813E0E002020          	cmp	word [es:ARENA.NAME+6],'  '
 31140                                  ihm_x:	
 31141                                  	;pop	ax
 31142 00003081 C3                      	retn
 31143                                  
 31144                                  ; -----------------------------------------------------------------------------
 31145                                  ;*** freeMCB - marks as free the MCB at ES:0
 31146                                  ; -----------------------------------------------------------------------------
 31147                                  ; ENTRY:    ES:0 should point to an MCB
 31148                                  ; EXIT:     None; MCB free'd
 31149                                  ; ERROR:    None
 31150                                  ; USES:     AX
 31151                                  ; -----------------------------------------------------------------------------
 31152                                  
 31153                                  freeMCB:
 31154 00003082 26C70601000000          	mov	word [es:ARENA.OWNER],0
 31155 00003089 B82020                  	mov	ax,'  ' ; mov ax,2020h ; 31/12/2022
 31156 0000308C 26A30800                	mov	[es:ARENA.NAME+0],ax
 31157 00003090 26A30A00                	mov	[es:ARENA.NAME+2],ax
 31158 00003094 26A30C00                	mov	[es:ARENA.NAME+4],ax
 31159 00003098 26A30E00                	mov	[es:ARENA.NAME+6],ax
 31160 0000309C C3                      	retn
 31161                                  
 31162                                  ; -----------------------------------------------------------------------------
 31163                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 31164                                  ; -----------------------------------------------------------------------------
 31165                                  ; ENTRY:  Nothing
 31166                                  ; EXIT:   AX contains 0x9FFF for most systems
 31167                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 31168                                  ; USES:   Flags, AX
 31169                                  ; -----------------------------------------------------------------------------
 31170                                  
 31171                                  HeadUmb:
 31172                                  	; 13/05/2019
 31173                                  
 31174                                  	;push	si ; ?
 31175                                  	;push	ds ; ?
 31176                                  	;push	es
 31177                                  	;push	bx ; *
 31178                                  
 31179                                  	; 09/04/2019
 31180                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 31181                                  
 31182 0000309D B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 31183 0000309F CD21                    	int	21h
 31184                                  			; DOS - 2+ internal - GET LIST OF LISTS
 31185                                  			; Return: ES:BX -> DOS list of lists
 31186                                  	;mov	ax,[es:8Ch]
 31187 000030A1 26A18C00                	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 31188 000030A5 83F8FF                  	cmp	ax,0FFFFh
 31189                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 31190                                  
 31191                                  	;clc				; Else, it isn't.
 31192                                  	;jmp	short xhu_x
 31193                                  xhu_e:	
 31194                                  	;stc
 31195 000030A8 F5                      	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 31196                                  xhu_x:	
 31197                                  	;pop	bx ; *
 31198                                  	;pop	es	
 31199                                  	;pop	ds ; ?
 31200                                  	;pop	si ; ?
 31201 000030A9 C3                      	retn
 31202                                  
 31203                                  ; -----------------------------------------------------------------------------
 31204                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 31205                                  ; -----------------------------------------------------------------------------
 31206                                  ; ENTRY:    None
 31207                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 31208                                  ; ERROR:    None
 31209                                  ; USES:     AX, BX, fm_umb
 31210                                  ; -----------------------------------------------------------------------------
 31211                                  
 31212                                  linkumb:
 31213 000030AA B80258                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 31214 000030AD CD21                    	int	21h			; Current link-state is now in al
 31215                                  
 31216 000030AF 08C0                    	or	al,al			; BUGBUG: proper check?
 31217 000030B1 7508                    	jnz	short lumbX		; Jumps if UMBs already linked in
 31218                                  
 31219 000030B3 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 31220 000030B6 BB0100                  	mov	bx,1
 31221 000030B9 CD21                    	int	21h
 31222                                  lumbX:
 31223 000030BB C3                      	retn
 31224                                  
 31225                                  ;%endif
 31226                                  
 31227                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31228                                  ; (SYSINIT:2B5Fh)
 31229                                  
 31230                                  ; ----------------------------------------------------------------------
 31231                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 31232                                  ; ----------------------------------------------------------------------
 31233                                  ; 09/04/2019 - Retro DOS v4.0
 31234                                  
 31235                                  ;----------------------------------------------------------------------------
 31236                                  ;
 31237                                  ; procedure : InitDevLoad
 31238                                  ;
 31239                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 31240                                  ;			 = 1 indicates load in UMB:
 31241                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 31242                                  ;		                    = 1 indicates a DOS 5-style load
 31243                                  ;		DevSize  = Size of the device driver file in paras
 31244                                  ;
 31245                                  ;	Output : none
 31246                                  ;
 31247                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 31248                                  ;	Also sets up a header for the Device driver entry for mem utility
 31249                                  ;
 31250                                  ;----------------------------------------------------------------------------
 31251                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 31252                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 31253                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 31254                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 31255                                  ;----------------------------------------------------------------------------
 31256                                  
 31257                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31258                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31259                                  	; (SYSINIT:364Ah)
 31260                                  InitDevLoad:
 31261                                  	; 01/01/2023
 31262                                  	;push	es ; *
 31263                                  
 31264                                  	; 11/12/2022
 31265                                  	; ds = cs
 31266 000030BC 803E[0B20]00            	cmp	byte [DeviceHi],0
 31267                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 31268                                  	;je	short InitForLo		; no, init for lo mem
 31269 000030C1 743B                    	je	short initforlo_x ; 09/04/2019
 31270                                  
 31271                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31272                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31273                                  ; %if 0
 31274                                  	; 01/01/2023
 31275 000030C3 803E[FB1F]01            	cmp	byte [ConvLoad],1	; Are we loading as per DOS 5?
 31276                                  	;cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 31277 000030C8 7415                    	je	short InitForConv
 31278                                  
 31279                                  ; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 31280                                  ; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 31281                                  ; any areas left in upper-memory, except for elements in the load UMB...
 31282                                  ; we then malloc space as per Dos-5 style, and mark as free any spaces which
 31283                                  ; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 31284                                  ; and UnHideUMBs later on marks all 8+HIDDEN as free.
 31285                                  
 31286 000030CA E87A04                  	call	ShrinkUMB		; Stop using the old device arena
 31287                                  
 31288 000030CD E883FC                  	call	HideUMBs		; Mark up the UM area as we see fit
 31289 000030D0 E8BFFE                  	call	FreezeUM		; Hide everything BUT the load area
 31290 000030D3 E85900                  	call	GetUMBForDev		; And grab that load area as needed
 31291 000030D6 9C                      	pushf
 31292 000030D7 E843FE                  	call	UnFreeze		; Then unhide everything frozen
 31293 000030DA 9D                      	popf
 31294                                  
 31295 000030DB 721C                    	jc	short InitForLo		; (if carry, it's loading low)
 31296                                  
 31297 000030DD EB0D                    	jmp	short InitForHi
 31298                                  
 31299                                  ;%endif ; 01/11/2022
 31300                                  
 31301                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31302                                  	; (SYSINIT:2B67h)
 31303                                  InitForConv:
 31304                                  	; 11/12/2022
 31305                                  	; ds = cs
 31306 000030DF E83700                  	call	SpaceInUMB		; Do we have space left in the
 31307                                  					;  current UMB ?
 31308 000030E2 7308                    	jnc	short InitForHi		; yes, we have
 31309 000030E4 E86004                  	call	ShrinkUMB		; shrink the current UMB in use
 31310 000030E7 E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 31311 000030EA 720D                    	jc	short InitForLo		; we didn't succeed, so load
 31312                                  					;  in low memory
 31313                                  InitForHi:
 31314                                  	; 11/12/2022
 31315                                  	; ds = cs
 31316                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 31317                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 31318                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 31319 000030EC A1[0120]                	mov	ax,[DevUMBFree]
 31320 000030EF 8B16[FD1F]              	mov	dx,[DevUMBAddr]
 31321 000030F3 0316[FF1F]              	add	dx,[DevUMBSize]
 31322 000030F7 EB0C                    	jmp	short idl1
 31323                                  
 31324                                  InitForLo:
 31325                                  	; 11/12/2022
 31326                                  	; ds = cs
 31327                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 31328 000030F9 C606[0B20]00            	mov	byte [DeviceHi],0
 31329                                  initforlo_x:
 31330                                  	; 11/12/2022
 31331                                  	; ds = cs
 31332                                  					;  into UMB indicate that
 31333                                  					;  we are loading low
 31334                                  	;mov	ax,[cs:memhi]		; AX = start of Low memory
 31335                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 31336 000030FE A1[6203]                	mov	ax,[memhi]
 31337 00003101 8B16[A302]              	mov	dx,[ALLOCLIM]
 31338                                  idl1:
 31339 00003105 E86C00                  	call	DevSetMark		; setup a sub-arena for DD
 31340                                  	; 11/12/2022
 31341                                  	; ds = cs
 31342                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 31343                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 31344                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 31345                                  	;mov	[cs:DevEntry+2],ax
 31346 00003108 A3[EF1F]                	mov	[DevLoadAddr],ax
 31347 0000310B 8916[F11F]              	mov	[DevLoadEnd],dx
 31348 0000310F C706[F31F]0000          	mov	word [DevEntry],0
 31349 00003115 A3[F51F]                	mov	[DevEntry+2],ax
 31350                                  	; 01/01/2023
 31351                                  	;pop	es ; *
 31352 00003118 C3                      	retn
 31353                                  
 31354                                  ;----------------------------------------------------------------------------
 31355                                  ;
 31356                                  ; procedure : SpaceInUMB?
 31357                                  ;
 31358                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 31359                                  ;	Output : Carry set if no space in UMB
 31360                                  ;		 Carry clear if Space is available for the device in
 31361                                  ;		   current UMB
 31362                                  ;
 31363                                  ;----------------------------------------------------------------------------
 31364                                  
 31365                                  SpaceInUMB:
 31366                                  	; 11/12/2022
 31367                                  	; ds = cs
 31368                                  	;mov	ax,[cs:DevUMBSize]
 31369                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 31370                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 31371 00003119 A1[FF1F]                	mov	ax,[DevUMBSize]
 31372 0000311C 0306[FD1F]              	add	ax,[DevUMBAddr]		; End of UMB
 31373 00003120 2B06[0120]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 31374                                  	; 11/12/2022
 31375                                  	;or	ax,ax			; Nospace ?
 31376                                  	;jnz	short spcinumb1
 31377                                  	;stc
 31378                                  	;retn
 31379                                  	; 11/12/2022
 31380 00003124 83F801                  	cmp	ax,1
 31381 00003127 7205                    	jb	short spcinumb2	; cf=1
 31382                                  spcinumb1:
 31383 00003129 48                      	dec	ax			; space for sub-arena
 31384                                  	; 11/12/2022
 31385                                  	; ds = cs
 31386 0000312A 3B06[ED1F]              	cmp	ax,[DevSize]
 31387                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 31388                                  spcinumb2:
 31389 0000312E C3                      	retn
 31390                                  
 31391                                  ;----------------------------------------------------------------------------
 31392                                  ;
 31393                                  ; procedure : PrepareMark
 31394                                  ;
 31395                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 31396                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 31397                                  ;
 31398                                  ;----------------------------------------------------------------------------
 31399                                  
 31400                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31401                                  ;
 31402                                  ;PrepareMark:
 31403                                  ;	push	ds
 31404                                  ;	mov	ds,ax
 31405                                  ;	mov	word [ARENA.OWNER],8
 31406                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 31407                                  ;	pop	ds
 31408                                  ;
 31409                                  ;	inc	ax
 31410                                  ;	mov	[cs:DevUMBAddr],ax
 31411                                  ;	mov	[cs:DevUMBFree],ax
 31412                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 31413                                  ;	retn
 31414                                  
 31415                                  ;----------------------------------------------------------------------------
 31416                                  ;
 31417                                  ; procedure : GetUMBForDev
 31418                                  ;
 31419                                  ;	Input : DevSize
 31420                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 31421                                  ;		 the device.
 31422                                  ;		 If success carry clear
 31423                                  ;
 31424                                  ;	Allocates the biggest UMB for loading devices and updates
 31425                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 31426                                  ;	UMB.
 31427                                  ;
 31428                                  ;	This routine relies on the fact that all of the low memory
 31429                                  ;	is allocated, and any DOS alloc calls should return memory
 31430                                  ;	from the UMB pool.
 31431                                  ;
 31432                                  ;----------------------------------------------------------------------------
 31433                                  
 31434                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31435                                  	; (SYSINIT:2BC6h)
 31436                                  
 31437                                  GetUMBForDev:
 31438                                  	; 11/12/2022
 31439                                  	; ds = cs
 31440 0000312F BBFFFF                  	mov	bx,0FFFFh
 31441 00003132 B80048                  	mov	ax,4800h
 31442 00003135 CD21                    	int	21h
 31443                                  		; DOS - 2+ - ALLOCATE MEMORY
 31444                                  		; BX = number of 16-byte paragraphs desired
 31445                                  
 31446 00003137 09DB                    	or	bx,bx
 31447 00003139 742C                    	jz	short gufd_err
 31448                                  
 31449 0000313B 4B                      	dec	bx
 31450                                  	; 11/12/2022
 31451                                  	; ds = cs
 31452 0000313C 391E[ED1F]              	cmp	[DevSize],bx
 31453                                  	;cmp	[cs:DevSize],bx
 31454 00003140 7725                    	ja	short gufd_err
 31455 00003142 43                      	inc	bx
 31456                                  
 31457 00003143 B80048                  	mov	ax,4800h
 31458 00003146 CD21                    	int	21h
 31459 00003148 721D                    	jc	short gufd_err
 31460                                  
 31461                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31462                                  	;dec	ax
 31463                                  	;call	PrepareMark
 31464                                  	;
 31465                                  PrepareMark:
 31466 0000314A 1E                      	push	ds
 31467 0000314B 48                      	dec	ax
 31468 0000314C 8ED8                    	mov	ds,ax
 31469 0000314E C70601000800            	mov	word [ARENA.OWNER],8
 31470 00003154 C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 31471 0000315A 40                      	inc	ax
 31472 0000315B 1F                      	pop	ds
 31473                                  	; 11/12/2022
 31474                                  	; ds = cs
 31475                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 31476                                  	;mov	[cs:DevUMBAddr],ax
 31477                                  	;mov	[cs:DevUMBFree],ax
 31478 0000315C 891E[FF1F]              	mov	[DevUMBSize],bx		; update the UMB Variables
 31479 00003160 A3[FD1F]                	mov	[DevUMBAddr],ax
 31480 00003163 A3[0120]                	mov	[DevUMBFree],ax
 31481                                  	;
 31482                                  	; 11/12/2022
 31483                                  	; cf=0
 31484                                  	;clc				; mark no error
 31485 00003166 C3                      	retn
 31486                                  gufd_err:
 31487 00003167 31C0                    	xor	ax,ax ; 0
 31488                                  	; 11/12/2022
 31489                                  	; ds = cs
 31490                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 31491                                  	;mov	[cs:DevUMBAddr],ax
 31492                                  	;mov	[cs:DevUMBFree],ax
 31493 00003169 A3[FF1F]                	mov	[DevUMBSize],ax		; erase the previous values
 31494 0000316C A3[FD1F]                	mov	[DevUMBAddr],ax
 31495 0000316F A3[0120]                	mov	[DevUMBFree],ax
 31496 00003172 F9                      	stc
 31497 00003173 C3                      	retn
 31498                                  
 31499                                  ;----------------------------------------------------------------------------
 31500                                  ;
 31501                                  ; procedure : DevSetMark
 31502                                  ;
 31503                                  ;	Input : AX - Free segment were device is going to be loaded
 31504                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 31505                                  ;
 31506                                  ;	Creates a sub-arena for the device driver
 31507                                  ;	puts 'D' marker in the sub-arena
 31508                                  ;	Put the owner of the sub-arena as (AX+1)
 31509                                  ;	Copies the file name into sub-arena name field
 31510                                  ;
 31511                                  ;	Size field of the sub-arena will be set only at succesful
 31512                                  ;	completion of Device load.
 31513                                  ;
 31514                                  ;----------------------------------------------------------------------------
 31515                                  
 31516                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31517                                  	; (SYSINIT:2C13h)
 31518                                  
 31519                                  DevSetMark:
 31520 00003174 06                      	push	es
 31521                                  	; 03/01/2023
 31522                                  	;push	di
 31523 00003175 1E                      	push	ds
 31524 00003176 56                      	push	si
 31525 00003177 8EC0                    	mov	es,ax
 31526 00003179 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 31527 0000317F 40                      	inc	ax
 31528 00003180 26A30100                	mov	[es:devmark.seg],ax
 31529                                  
 31530                                  ;-------------- Copy file name
 31531                                  
 31532 00003184 50                      	push	ax			; save load addr
 31533 00003185 2EC536[7A03]            	lds	si,[cs:bpb_addr]	; command line is still there
 31534                                  
 31535 0000318A 89F7                    	mov	di,si
 31536 0000318C FC                      	cld
 31537                                  dsm_again:
 31538 0000318D AC                      	lodsb
 31539 0000318E 3C3A                    	cmp	al,':'
 31540 00003190 7504                    	jne	short isit_slash
 31541 00003192 89F7                    	mov	di,si
 31542 00003194 EBF7                    	jmp	short dsm_again
 31543                                  isit_slash:
 31544 00003196 3C5C                    	cmp	al, '\'
 31545 00003198 7504                    	jne	short isit_null
 31546 0000319A 89F7                    	mov	di,si
 31547 0000319C EBEF                    	jmp	short dsm_again
 31548                                  isit_null:
 31549 0000319E 08C0                    	or	al,al
 31550 000031A0 75EB                    	jnz	short dsm_again
 31551 000031A2 89FE                    	mov	si,di
 31552                                  
 31553 000031A4 BF0800                  	mov	di,devmark.filename ; 8
 31554 000031A7 B90800                  	mov	cx,8			; maximum 8 characters
 31555                                  dsm_next_char:
 31556 000031AA AC                      	lodsb
 31557 000031AB 08C0                    	or	al, al
 31558 000031AD 7407                    	jz	short blankout
 31559 000031AF 3C2E                    	cmp	al, '.'
 31560 000031B1 7403                    	je	short blankout
 31561 000031B3 AA                      	stosb
 31562 000031B4 E2F4                    	loop	dsm_next_char
 31563                                  blankout:
 31564 000031B6 E304                    	jcxz	dsm_exit
 31565 000031B8 B020                    	mov	al, ' '
 31566 000031BA F3AA                    	rep	stosb			; blank out the rest
 31567                                  dsm_exit:
 31568 000031BC 58                      	pop	ax			; restore load addr
 31569 000031BD 5E                      	pop	si
 31570 000031BE 1F                      	pop	ds
 31571                                  	; 03/01/2023
 31572                                  	;pop	di
 31573 000031BF 07                      	pop	es
 31574 000031C0 C3                      	retn
 31575                                  
 31576                                  ;----------------------------------------------------------------------------
 31577                                  ;
 31578                                  ; procedure : SizeDevice
 31579                                  ;
 31580                                  ;	Input : ES:SI - points to device file to be sized
 31581                                  ;
 31582                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 31583                                  ;
 31584                                  ;	Calculates the size of the device file in paras and stores it
 31585                                  ;	in DevSize
 31586                                  ;
 31587                                  ;----------------------------------------------------------------------------
 31588                                  
 31589                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31590                                  SizeDevice:
 31591                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31592                                  	; 11/12/2022 ; *
 31593 000031C1 1E                      	push	ds ; *
 31594 000031C2 06                      	push	es
 31595 000031C3 1F                      	pop	ds
 31596 000031C4 89F2                    	mov	dx,si			; ds:dx -> file name
 31597 000031C6 B8003D                  	mov	ax,3D00h		; open
 31598 000031C9 CD21                    	int	21h
 31599 000031CB 7243                    	jc	short sd_err		; open failed
 31600                                  
 31601 000031CD 89C3                    	mov	bx,ax			; BX - file handle
 31602 000031CF B80242                  	mov	ax,4202h		; seek
 31603 000031D2 31C9                    	xor	cx,cx
 31604 000031D4 89CA                    	mov	dx,cx			; to end of file
 31605 000031D6 CD21                    	int	21h
 31606 000031D8 722F                    	jc	short sd_close		; did seek fail (impossible)
 31607 000031DA 83C00F                  	add	ax,15			; para convert
 31608 000031DD 83D200                  	adc	dx,0
 31609 000031E0 F7C2F0FF                	test	dx,0FFF0h		; size > 0ffff paras ?
 31610 000031E4 7409                    	jz	short szdev1		; no
 31611 000031E6 2EC706[ED1F]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 31612                                  					; assuming that we fail later
 31613 000031ED EB1A                    	jmp	short sd_close
 31614                                  szdev1:
 31615 000031EF B104                    	mov	cl,4			; convert it to paras
 31616 000031F1 D3E8                    	shr	ax,cl
 31617 000031F3 B10C                    	mov	cl,12
 31618 000031F5 D3E2                    	shl	dx,cl
 31619 000031F7 09D0                    	or	ax,dx
 31620                                  	;
 31621                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31622 000031F9 2E3B06[0C20]            	cmp     ax,[cs:DevSizeOption]
 31623 000031FE 7705                    	ja      short szdev2
 31624 00003200 2EA1[0C20]              	mov     ax,[cs:DevSizeOption]
 31625                                  	; 12/12/2022
 31626 00003204 F8                      	clc
 31627                                  szdev2:
 31628 00003205 2EA3[ED1F]              	mov	[cs:DevSize],ax		; save file size
 31629                                  
 31630                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31631                                  	; 12/12/2022
 31632                                  	; cf=0
 31633                                  	;clc
 31634                                  sd_close:
 31635 00003209 9C                      	pushf				; let close not spoil our
 31636                                  					;  carry flag
 31637 0000320A B8003E                  	mov	ax,3E00h		; close
 31638 0000320D CD21                    	int	21h			; we are not checking for err
 31639 0000320F 9D                      	popf
 31640                                  sd_err:
 31641                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31642                                  	; 11/12/2022 ; *
 31643 00003210 1F                      	pop     ds ; *
 31644 00003211 C3                      	retn
 31645                                  
 31646                                  ;----------------------------------------------------------------------------
 31647                                  ;
 31648                                  ; procedure : ExecDev
 31649                                  ;
 31650                                  ;	Input : ds:dx -> device to be executed
 31651                                  ;		DevLoadAddr - contains where device has to be loaded
 31652                                  ;
 31653                                  ;	Output : Carry if error
 31654                                  ;		 Carry clear if no error
 31655                                  ;
 31656                                  ;	Loads a device driver using the 4b03h function call
 31657                                  ;
 31658                                  ;----------------------------------------------------------------------------
 31659                                  
 31660                                  	; 01/11/2022
 31661                                  ExecDev:
 31662 00003212 2E8B1E[EF1F]            	mov	bx,[cs:DevLoadAddr]
 31663 00003217 2E891E[0720]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 31664                                  					;  block for exec with
 31665                                  					;  Load address
 31666 0000321C 2E891E[0920]            	mov	[cs:DevExecReloc],bx
 31667 00003221 8CCB                    	mov	bx,cs
 31668 00003223 8EC3                    	mov	es,bx
 31669 00003225 BB[0720]                	mov	bx,DevExecAddr		;es:bx points to parameters
 31670 00003228 B003                    	mov	al,3	; (load program only)
 31671 0000322A B44B                    	mov	ah,EXEC ; 4Bh
 31672 0000322C CD21                    	int	21h			;load in the device driver
 31673                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 31674                                  		; DS:DX -> ASCIZ filename
 31675                                  		; ES:BX -> parameter block
 31676                                  		; AL = subfunction 
 31677 0000322E C3                      	retn
 31678                                  
 31679                                  ;----------------------------------------------------------------------------
 31680                                  ;
 31681                                  ; procedure : RetFromUM
 31682                                  ;
 31683                                  ;	Input : None
 31684                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 31685                                  ;		 ConvLoad clear if did.
 31686                                  ;
 31687                                  ;	Prepares memory for more devices after returning from loading one
 31688                                  ;	using the DOS 6 options (/L:... etc).
 31689                                  ;
 31690                                  ;----------------------------------------------------------------------------
 31691                                  
 31692                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31693                                  ;  (SYSINIT:37D1h)
 31694                                  
 31695                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31696                                  ;%if 0
 31697                                  RetFromUM:
 31698                                  	; 31/12/2022
 31699                                  	; ds = cs
 31700 0000322F 9C                      	pushf
 31701                                  	;mov	byte [cs:ConvLoad],1
 31702 00003230 C606[FB1F]01            	mov	byte [ConvLoad],1
 31703 00003235 E8D4FD                  	call	UnHideUMBs
 31704 00003238 7205                    	jc	short rfUM1		; Skip this if didn't HideUMBs
 31705                                  	; 31/12/2022
 31706                                  	; ds = cs
 31707                                  	;mov	byte [cs:ConvLoad],0
 31708 0000323A C606[FB1F]00            	mov	byte [ConvLoad],0
 31709                                  rfUM1:	
 31710 0000323F 9D                      	popf
 31711 00003240 C3                      	retn
 31712                                  
 31713                                  ;%endif ; 01/11/2022
 31714                                  
 31715                                  ;----------------------------------------------------------------------------
 31716                                  ;
 31717                                  ; procedure : RemoveNull
 31718                                  ;
 31719                                  ;	Input : ES:SI points to a null terminated string
 31720                                  ;
 31721                                  ;	Output : none
 31722                                  ;
 31723                                  ;	Replaces the null at the end of a string with blank
 31724                                  ;
 31725                                  ;----------------------------------------------------------------------------
 31726                                  
 31727                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31728                                  	; (SYSINIT:2CCEh)
 31729                                  RemoveNull:
 31730                                  	; 11/12/2022
 31731                                  	; ds = cs
 31732                                  rn_next:
 31733 00003241 268A1C                  	mov	bl,[es:si]
 31734 00003244 08DB                    	or	bl,bl			; null ?
 31735 00003246 7403                    	jz	short rn_gotnull
 31736 00003248 46                      	inc	si			; advance the pointer
 31737 00003249 EBF6                    	jmp	short rn_next
 31738                                  rn_gotnull:
 31739                                  	; 11/12/2022
 31740 0000324B 8A1E[2020]              	mov	bl,[DevSavedDelim]
 31741                                  	;mov	bl,[cs:DevSavedDelim]
 31742 0000324F 26881C                  	mov	[es:si],bl		; replace null with blank
 31743                                  	; 02/11/2022
 31744                                  ; 11/12/2022
 31745                                  rba_ok:		; 10/04/2019
 31746 00003252 C3                      	retn
 31747                                  
 31748                                  ;----------------------------------------------------------------------------
 31749                                  ;
 31750                                  ; procedure : RoundBreakAddr
 31751                                  ;
 31752                                  ;	Input : DevBrkAddr
 31753                                  ;	Output : DevBrkAddr
 31754                                  ;
 31755                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 31756                                  ;
 31757                                  ;----------------------------------------------------------------------------
 31758                                  
 31759                                  RoundBreakAddr:
 31760 00003253 2EA1[F71F]              	mov	ax,[cs:DevBrkAddr]
 31761 00003257 E80FDF                  	call	ParaRound
 31762 0000325A 2E0106[F91F]            	add	[cs:DevBrkAddr+2],ax
 31763 0000325F 2EC706[F71F]0000        	mov	word [cs:DevBrkAddr],0
 31764 00003266 2EA1[F11F]              	mov	ax,[cs:DevLoadEnd]
 31765 0000326A 2E3906[F91F]            	cmp	[cs:DevBrkAddr+2],ax
 31766 0000326F 76E1                    	jbe	short rba_ok
 31767 00003271 E93B11                  	jmp	mem_err
 31768                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31769                                  	; 11/12/2022
 31770                                  ;rba_ok:
 31771                                  ;	retn
 31772                                  
 31773                                  ;----------------------------------------------------------------------------
 31774                                  ;
 31775                                  ; procedure : DevSetBreak
 31776                                  ;
 31777                                  ;	Input : DevBrkAddr
 31778                                  ;	Output : Carry set if Device returned Init failed
 31779                                  ;		 Else carry clear
 31780                                  ;
 31781                                  ;----------------------------------------------------------------------------
 31782                                  
 31783                                  DevSetBreak:
 31784 00003274 50                      	push	ax
 31785                                  
 31786 00003275 2EA1[F91F]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 31787 00003279 2E803E[E114]00          	cmp	byte [cs:multdeviceflag],0
 31788 0000327F 750F                    	jne	short set_break_continue ;do not check it.
 31789 00003281 2E3B06[EF1F]            	cmp	ax,[cs:DevLoadAddr]
 31790 00003286 7508                    	jne	short set_break_continue ;if not same, then o.k.
 31791                                  
 31792                                  	;cmp	word [cs:DevBrkAddr],0
 31793                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 31794                                  	; 12/12/2022
 31795 00003288 2E833E[F71F]01          	cmp	word [cs:DevBrkAddr],1
 31796 0000328E 7204                    	jb	short break_failed
 31797                                  
 31798                                  set_break_continue:
 31799 00003290 E8C0FF                  	call	RoundBreakAddr
 31800                                  	; 12/12/2022
 31801 00003293 F8                      	clc
 31802                                  break_failed:
 31803 00003294 58                      	pop	ax
 31804                                  	;clc
 31805 00003295 C3                      	retn
 31806                                  
 31807                                  	; 12/12/2022
 31808                                  ;break_failed:
 31809                                  	;pop	ax
 31810                                  	;stc
 31811                                  	;retn
 31812                                  
 31813                                  ;----------------------------------------------------------------------------
 31814                                  ;
 31815                                  ; procedure : DevBreak
 31816                                  ;
 31817                                  ;	Input : DevLoadAddr & DevBrkAddr
 31818                                  ;	Output : none
 31819                                  ;
 31820                                  ;	Marks a succesful install of a device driver
 31821                                  ;	Sets device size field in sub-arena &
 31822                                  ;	Updates Free ptr in UMB or adjusts memhi
 31823                                  ;
 31824                                  ;----------------------------------------------------------------------------
 31825                                  
 31826                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31827                                  DevBreak:
 31828                                  	;push	ds ; 11/12/2022
 31829                                  
 31830                                  	; 11/12/2022
 31831 00003296 0E                      	push	cs
 31832 00003297 1F                      	pop	ds
 31833                                  	;mov	ax,[cs:DevLoadAddr]
 31834                                  	;mov	bx,[cs:DevBrkAddr+2]
 31835 00003298 A1[EF1F]                	mov	ax,[DevLoadAddr]
 31836 0000329B 8B1E[F91F]              	mov	bx,[DevBrkAddr+2]
 31837                                  	; 11/12/2022
 31838 0000329F 1E                      	push	ds
 31839                                  
 31840 000032A0 48                      	dec	ax			; seg of sub-arena
 31841 000032A1 8ED8                    	mov	ds,ax
 31842 000032A3 40                      	inc	ax			; Back to Device segment
 31843 000032A4 29D8                    	sub	ax,bx
 31844 000032A6 F7D8                    	neg	ax			; size of device in paras
 31845 000032A8 A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 31846                                  	
 31847                                  	; 11/12/2022
 31848 000032AB 1F                      	pop	ds
 31849                                  	; ds = cs
 31850                                   	
 31851 000032AC 803E[0B20]00            	cmp	byte [DeviceHi],0
 31852                                  	;cmp	byte [cs:DeviceHi],0
 31853 000032B1 7405                    	je	short db_lo
 31854                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 31855                                  	;jmp	short db_exit
 31856                                  	; 11/12/2022
 31857 000032B3 891E[0120]              	mov	[DevUMBFree],bx
 31858 000032B7 C3                      	retn	
 31859                                  db_lo:
 31860                                  	; 11/12/2022
 31861                                  	; ds = cs
 31862                                  	;mov	[cs:memhi],bx
 31863                                  	;mov	word [cs:memlo],0
 31864 000032B8 891E[6203]              	mov	[memhi],bx
 31865 000032BC C706[6003]0000          	mov	word [memlo],0 ; 18/12/2022
 31866                                  db_exit:
 31867                                  	;pop	ds ; 11/12/2022
 31868 000032C2 C3                      	retn
 31869                                  
 31870                                  ; 10/04/2019 - Retro DOS v4.0
 31871                                  
 31872                                  ;----------------------------------------------------------------------------
 31873                                  ;
 31874                                  ; procedure : ParseSize
 31875                                  ;
 31876                                  ;	Parses the command line for SIZE= command
 31877                                  ;
 31878                                  ;	ES:SI = command line to parsed
 31879                                  ;
 31880                                  ;	returns ptr to command line after SIZE= option in ES:SI
 31881                                  ;	updates the DevSizeOption variable with value supplied
 31882                                  ;	in SIZE=option
 31883                                  ;	Returns carry if the SIZE option was invalid
 31884                                  ;
 31885                                  ;----------------------------------------------------------------------------
 31886                                  
 31887                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31888                                  	; (SYSINIT:2D5Ah)
 31889                                  ParseSize:
 31890                                  	;push	bx
 31891                                  	;mov	bx,si
 31892                                  
 31893                                  	; 11/12/2022
 31894                                  	; ds = cs
 31895                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 31896                                  	;mov	[cs:DevCmdLine],si
 31897                                  	;mov	[cs:DevCmdLine+2],es
 31898 000032C3 C706[0C20]0000          	mov	word [DevSizeOption],0 ; init the value
 31899 000032C9 8936[1C20]              	mov	[DevCmdLine],si
 31900 000032CD 8C06[1E20]              	mov	[DevCmdLine+2],es	
 31901 000032D1 E82900                  	call	SkipDelim
 31902 000032D4 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 31903 000032D9 751F                    	jne	short ps_no_size
 31904 000032DB 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 31905 000032E1 7517                    	jne	short ps_no_size
 31906 000032E3 268A4404                	mov	al,[es:si+4]
 31907 000032E7 E82F10                  	call	delim
 31908 000032EA 750E                    	jne	short ps_no_size
 31909 000032EC 83C605                  	add	si,5
 31910 000032EF E81600                  	call	GetHexNum
 31911 000032F2 7207                    	jc	short ps_err
 31912                                  	; 11/12/2022
 31913                                  	; ds = cs
 31914                                  	;mov	[cs:DevSizeOption],ax
 31915 000032F4 A3[0C20]                	mov	[DevSizeOption],ax
 31916 000032F7 E80300                  	call	SkipDelim
 31917                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31918                                  	;mov	bx,si
 31919                                  ps_no_size:	
 31920                                  	;mov	si,bx
 31921                                  	;pop	bx
 31922 000032FA F8                      	clc	; cf=0
 31923                                  	;retn
 31924                                  	; 11/12/2022
 31925                                  ps_err:		; cf=1
 31926                                  sd_ret:		; cf=?
 31927 000032FB C3                      	retn
 31928                                  ;ps_err:
 31929                                  	; 02/11/2022
 31930                                  	;pop	bx
 31931                                  	;stc
 31932                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31933                                  	; 11/12/2022
 31934                                  	; cf=1
 31935                                  	;stc
 31936                                  	; 11/12/2022
 31937                                  ;sd_ret: 
 31938                                  	; 12/04/2019
 31939 000032FC C3                      	retn
 31940                                  
 31941                                  ; 12/04/2019 - Retro DOS v4.0
 31942                                  
 31943                                  ;----------------------------------------------------------------------------
 31944                                  ;
 31945                                  ; procedure : SkipDelim
 31946                                  ;
 31947                                  ;	Skips delimiters in the string pointed to by ES:SI
 31948                                  ;	Returns ptr to first non-delimiter character in ES:SI
 31949                                  ;
 31950                                  ;----------------------------------------------------------------------------
 31951                                  	
 31952                                  	; 01/11/2022
 31953                                  SkipDelim:
 31954                                  sd_next_char:
 31955 000032FD 268A04                  	mov	al,[es:si]
 31956 00003300 E81610                  	call	delim
 31957 00003303 75F6                    	jnz	short sd_ret
 31958 00003305 46                      	inc	si
 31959 00003306 EBF5                    	jmp	short sd_next_char ; 01/11/2022
 31960                                  	; 11/12/2022
 31961                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31962                                  ;sd_ret:
 31963                                  	;retn
 31964                                  
 31965                                  ;----------------------------------------------------------------------------
 31966                                  ;
 31967                                  ; procedure : GetHexNum
 31968                                  ;
 31969                                  ;	Converts an ascii string terminated by a delimiter into binary.
 31970                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 31971                                  ;
 31972                                  ;	Returns in AX the number number of paras equivalent to the
 31973                                  ;	hex number of bytes specified by the hexadecimal string.
 31974                                  ;
 31975                                  ;	Returns carry in case it encountered a non-hex character or
 31976                                  ;	if it encountered crlf
 31977                                  ;
 31978                                  ;----------------------------------------------------------------------------
 31979                                  
 31980                                  ; 13/05/2019
 31981                                  
 31982                                  	; 036/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31983                                  	; (SYSINIT:38C5h)
 31984                                  
 31985                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31986                                  	; (SYSINIT:2DA5h)
 31987                                  GetHexNum:
 31988 00003308 31C0                    	xor	ax,ax
 31989 0000330A 31D2                    	xor	dx,dx
 31990                                  ghn_next:
 31991 0000330C 268A1C                  	mov	bl,[es:si]
 31992 0000330F 80FB0D                  	cmp	bl,cr  ; 0Dh
 31993 00003312 7436                    	je	short ghn_err
 31994 00003314 80FB0A                  	cmp	bl,lf  ; 0Ah
 31995 00003317 7431                    	je	short ghn_err
 31996 00003319 50                      	push	ax
 31997 0000331A 88D8                    	mov	al,bl
 31998 0000331C E8FA0F                  	call	delim
 31999 0000331F 58                      	pop	ax
 32000                                  	; 03/01/2023
 32001 00003320 B90400                  	mov	cx, 4
 32002 00003323 7410                    	jz	short ghn_into_paras
 32003 00003325 E82400                  	call	GetNibble
 32004                                  	;jc	short ghn_err
 32005                                  	; 11/12/2022
 32006 00003328 7221                    	jc	short ghn_ret ; cf=1
 32007                                  	; 03/01/2023
 32008                                  	;mov	cx,4
 32009                                  ghn_shift1:
 32010 0000332A D1E0                    	shl	ax,1
 32011 0000332C D1D2                    	rcl	dx,1
 32012 0000332E E2FA                    	loop	ghn_shift1
 32013 00003330 08D8                    	or	al,bl
 32014 00003332 46                      	inc	si
 32015 00003333 EBD7                    	jmp	short ghn_next
 32016                                  ghn_into_paras:
 32017 00003335 83C00F                  	add	ax,15
 32018 00003338 83D200                  	adc	dx,0
 32019 0000333B F7C2F0FF                	test	dx,0FFF0h
 32020 0000333F 7509                    	jnz	short ghn_err
 32021                                  	; 03/01/2023
 32022                                  	;mov	cx,4
 32023                                  ghn_shift2:
 32024 00003341 F8                      	clc
 32025 00003342 D1DA                    	rcr	dx,1
 32026 00003344 D1D8                    	rcr	ax,1
 32027 00003346 E2F9                    	loop	ghn_shift2
 32028 00003348 F8                      	clc
 32029 00003349 C3                      	retn
 32030                                  	; 11/12/2022
 32031                                  ghn_err:
 32032                                  gnib_err:
 32033 0000334A F9                      	stc
 32034                                  ghn_ret:
 32035                                  gnib_ret:
 32036 0000334B C3                      	retn
 32037                                  
 32038                                  ;----------------------------------------------------------------------------
 32039                                  ;
 32040                                  ; procedure : GetNibble
 32041                                  ;
 32042                                  ;	Convert one nibble (hex digit) in BL into binary
 32043                                  ;
 32044                                  ;	Returns binary value in BL
 32045                                  ;
 32046                                  ;	Returns carry if BL contains non-hex digit
 32047                                  ;
 32048                                  ;----------------------------------------------------------------------------
 32049                                  
 32050                                  GetNibble:
 32051 0000334C 80FB30                  	cmp	bl,'0'
 32052                                  	;jb	short gnib_err
 32053                                  	; 11/12/2022
 32054 0000334F 72FA                    	jb	short gnib_ret ; cf=1
 32055 00003351 80FB39                  	cmp	bl,'9'
 32056 00003354 7704                    	ja	short is_it_hex
 32057 00003356 80EB30                  	sub	bl,'0'		; clc
 32058 00003359 C3                      	retn
 32059                                  is_it_hex:
 32060 0000335A 80FB41                  	cmp	bl,'A'
 32061                                  	;jb	short gnib_err
 32062                                  	; 11/12/2022
 32063 0000335D 72EC                    	jb	short gnib_ret ; cf=1
 32064 0000335F 80FB46                  	cmp	bl,'F'
 32065 00003362 77E6                    	ja	short gnib_err ; 11/12/2022
 32066 00003364 80EB37                  	sub	bl,'A'- 10	; clc
 32067 00003367 C3                      	retn
 32068                                  	; 11/12/2022
 32069                                  ;gnib_err:
 32070                                  ;	stc
 32071                                  ;gnib_ret:
 32072                                  ;	retn
 32073                                  
 32074                                  ;============================================================================
 32075                                  
 32076                                  ; 12/04/2019 - Retro DOS v4.0
 32077                                  
 32078                                  ; umb.inc (MSDOS 6.0, 1991)
 32079                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 32080                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 32081                                  
 32082                                  XMM_REQUEST_UMB	equ 10h
 32083                                  XMM_RELEASE_UMB	equ 11h
 32084                                  
 32085                                  ;----------------------------------------------------------------------------
 32086                                  ;
 32087                                  ; procedure : AllocUMB
 32088                                  ;
 32089                                  ;	Allocate all UMBs and link it to DOS arena chain
 32090                                  ;
 32091                                  ;----------------------------------------------------------------------------
 32092                                  
 32093                                  AllocUMB:
 32094                                  	; 31/12/2022
 32095                                  	; ds = cs
 32096 00003368 E81000                  	call	InitAllocUMB		; link in the first UMB
 32097 0000336B 720D                    	jc	short au_exit		; quit on error
 32098                                  au_next:
 32099 0000336D E83900                  	call	umb_allocate		; allocate
 32100 00003370 7205                    	jc	short au_coalesce
 32101 00003372 E85200                  	call	umb_insert		; & insert till no UMBs
 32102 00003375 EBF6                    	jmp	short au_next
 32103                                  au_coalesce:
 32104 00003377 E80B01                  	call	umb_coalesce		; coalesce all UMBs
 32105                                  au_exit:
 32106                                  	; 31/12/2022
 32107                                  	; ds = cs
 32108 0000337A C3                      	retn
 32109                                  
 32110                                  ;----------------------------------------------------------------------------
 32111                                  ;
 32112                                  ; procedure : InitAllocUMB
 32113                                  ;
 32114                                  ;----------------------------------------------------------------------------
 32115                                  
 32116                                  InitAllocUMB:
 32117                                  	; 31/12/2022
 32118                                  	; ds = cs
 32119 0000337B E838D7                  	call	IsXMSLoaded
 32120 0000337E 7527                    	jnz	short iau_err		; quit on no XMS driver
 32121 00003380 B452                    	mov	ah,52h
 32122 00003382 CD21                    	int	21h			; get DOS DATA seg
 32123                                  	; 31/12/2022
 32124                                  	; ds = cs
 32125                                  	;mov	[cs:DevDOSData],es	; & save it for later
 32126 00003384 8C06[1A20]              	mov	[DevDOSData],es		; & save it for later
 32127 00003388 B81043                  	mov	ax,4310h
 32128 0000338B CD2F                    	int	2Fh
 32129                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 32130                                  	;mov	[cs:DevXMSAddr+2],es
 32131 0000338D 891E[0320]              	mov	[DevXMSAddr],bx		; get XMS driver address
 32132 00003391 8C06[0520]              	mov	[DevXMSAddr+2],es	
 32133                                  	; 31/12/2022
 32134 00003395 803E[1920]00            	cmp	byte [FirstUMBLinked],0 
 32135                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 32136                                  	;jne	short ia_1		; quit if we already did it
 32137                                  	; 12/12/2022
 32138 0000339A 770A                    	ja	short ia_1 ; cf=0
 32139 0000339C E83401                  	call	LinkFirstUMB		; else link the first UMB
 32140                                  	;jc	short iau_err
 32141                                  	; 12/12/2022
 32142 0000339F 7207                    	jc	short iau_err2  ; cf=1
 32143                                  	; 31/12/2022
 32144                                  	; ds = cs
 32145 000033A1 C606[1920]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 32146                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 32147                                  ia_1:
 32148                                  	; 12/12/2022
 32149                                  	; cf=0
 32150                                  	;clc
 32151 000033A6 C3                      	retn
 32152                                  iau_err:
 32153 000033A7 F9                      	stc
 32154                                  iau_err2:
 32155 000033A8 C3                      	retn
 32156                                  
 32157                                  ;-------------------------------------------------------------------------
 32158                                  ;
 32159                                  ; Procedure Name	: umb_allocate
 32160                                  ;
 32161                                  ; Inputs		: DS = data
 32162                                  ;
 32163                                  ; Outputs		: if UMB available
 32164                                  ;				Allocates the largest available UMB and 
 32165                                  ;			  	BX = segment of allocated block
 32166                                  ;				DX = size of allocated block
 32167                                  ;				NC
 32168                                  ;			  else 
 32169                                  ;				CY
 32170                                  ;
 32171                                  ; Uses			: BX, DX
 32172                                  ;
 32173                                  ;-------------------------------------------------------------------------
 32174                                  
 32175                                  umb_allocate:
 32176                                  	; 31/12/2022
 32177                                  	; ds = cs
 32178 000033A9 50                      	push	ax
 32179 000033AA B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 32180 000033AC BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 32181                                  					;   possible
 32182                                  	; 31/12/2022
 32183 000033AF FF1E[0320]              	call	far [DevXMSAddr]
 32184                                  	;call	far [cs:DevXMSAddr]
 32185                                  					; dx now contains the size of
 32186                                  					; the largest UMB
 32187 000033B3 09D2                    	or	dx,dx
 32188 000033B5 740D                    	jz	short ua_err
 32189                                  	
 32190 000033B7 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 32191                                  
 32192                                  	; 31/12/2022
 32193 000033B9 FF1E[0320]              	call	far [DevXMSAddr]
 32194                                  	;call	far [cs:DevXMSAddr]
 32195                                  
 32196 000033BD 83F801                  	cmp	ax,1			; Q: was the reqst successful
 32197 000033C0 7502                    	jne	short ua_err		; N: error
 32198                                  	;clc
 32199                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32200                                  	; 12/12/2022
 32201                                  	; cf=0
 32202                                  	;clc 
 32203                                  ua_done:
 32204 000033C2 58                      	pop	ax
 32205 000033C3 C3                      	retn
 32206                                  ua_err:
 32207 000033C4 F9                      	stc
 32208 000033C5 EBFB                    	jmp	short ua_done
 32209                                  
 32210                                  ;---------------------------------------------------------------------------
 32211                                  ;
 32212                                  ; Procedure Name	: umb_insert
 32213                                  ;
 32214                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 32215                                  ;			: BX = seg address of UMB to be linked in
 32216                                  ;			: DX = size of UMB to be linked in paras
 32217                                  ;			; DS = data
 32218                                  ;
 32219                                  ; Outputs		: links the UMB into the arena chain
 32220                                  ;
 32221                                  ; Uses			: AX, CX, ES, DX, BX
 32222                                  ;
 32223                                  ;---------------------------------------------------------------------------
 32224                                  
 32225                                  umb_insert:
 32226 000033C7 1E                      	push	ds
 32227                                  
 32228                                  	; 31/12/2022
 32229                                  	; ds = cs
 32230                                  
 32231                                  	;mov	ds,[cs:DevDOSData]
 32232 000033C8 8E1E[1A20]              	mov	ds,[DevDOSData] ; 31/12/2022 
 32233                                  	;mov	ds,[8Ch]
 32234 000033CC 8E1E8C00                	mov	ds,[UMB_ARENA]		; es = UMB_HEAD
 32235 000033D0 8CD8                    	mov	ax,ds
 32236 000033D2 8EC0                    	mov	es,ax
 32237                                  ui_next:
 32238 000033D4 39D8                    	cmp	ax,bx			; Q: is current block above
 32239                                  					;    new block
 32240 000033D6 770F                    	ja	short ui_insert		; Y: insert it
 32241                                  					; Q: is current block the
 32242                                  					;    last
 32243 000033D8 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 32244 000033DE 745C                    	je	short ui_append		; Y: append new block to chain
 32245                                  					; N: get next block
 32246 000033E0 8ED8                    	mov	ds,ax			; M005
 32247                                  	;call	get_next		; ax = es = next block
 32248 000033E2 E8E200                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 32249 000033E5 EBED                    	jmp	short ui_next
 32250                                  
 32251                                  ui_insert:
 32252 000033E7 8CD9                    	mov	cx,ds			; ds = previous arena
 32253 000033E9 41                      	inc	cx			; top of previous block
 32254                                  
 32255 000033EA 29D9                    	sub	cx,bx
 32256 000033EC F7D9                    	neg	cx			; cx = size of used block
 32257                                  	;mov	byte [0],'M'
 32258 000033EE C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32259                                  	;mov	word [1],8
 32260 000033F3 C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 32261                                  	;mov	[3],cx
 32262 000033F9 890E0300                	mov	[ARENA.SIZE],cx	
 32263                                  	;mov	word [8],4353h ; 'SC'
 32264 000033FD C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 32265                                  
 32266                                  ; prepare the arena at start of new block
 32267                                  
 32268 00003403 8EC3                    	mov	es,bx
 32269 00003405 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32270 0000340B 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 32271                                  					; mark as free
 32272 00003412 83EA02                  	sub	dx,2			; make room for arena at
 32273                                  					; start & end of new block
 32274 00003415 2689160300              	mov	[es:ARENA.SIZE],dx
 32275                                  
 32276                                  ; prepare arena at end of new block
 32277                                  	
 32278 0000341A 01D3                    	add	bx,dx
 32279 0000341C 43                      	inc	bx
 32280 0000341D 8EC3                    	mov	es,bx			; es=arena at top of new block
 32281 0000341F 43                      	inc	bx			; bx=top of new block
 32282                                  
 32283                                  					; ax contains arena just above
 32284                                  					; this block
 32285 00003420 29D8                    	sub	ax,bx			; ax = size of used block
 32286                                  	
 32287 00003422 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 32288 00003428 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 32289 0000342F 26A30300                	mov	[es:ARENA.SIZE],ax	
 32290 00003433 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 32291                                  
 32292 0000343A EB47                    	jmp	short ui_done
 32293                                  
 32294                                  ui_append:
 32295                                  					; es = arena of last block	
 32296 0000343C 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 32297 00003441 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 32298                                  					; going to rsrv on top of this 
 32299                                  					; block for the next arena.
 32300                                  	; 13/05/2019
 32301 00003447 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 32302                                  
 32303 0000344D 89C1                    	mov	cx,ax			; cx=top of prev block-1
 32304 0000344F 40                      	inc	ax
 32305 00003450 29D8                    	sub	ax,bx			; ax=top of prev block - 
 32306                                  					;    seg. address of new block
 32307 00003452 F7D8                    	neg	ax
 32308                                  
 32309 00003454 8EC1                    	mov	es,cx			; ds = arena of unused block
 32310                                  
 32311 00003456 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 32312 0000345C 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 32313 00003463 26A30300                	mov	[es:ARENA.SIZE],ax	
 32314 00003467 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 32315                                  
 32316                                  ; prepare the arena at start of new block
 32317 0000346E 8EC3                    	mov	es,bx
 32318 00003470 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 32319 00003476 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 32320                                  					; mark as free
 32321 0000347D 4A                      	dec	dx			; make room for arena
 32322 0000347E 2689160300              	mov	[es:ARENA.SIZE],dx	
 32323                                  ui_done:
 32324                                  uc_done: ; 31/12/2022 ; *!
 32325 00003483 1F                      	pop	ds
 32326                                  	; ds = cs ; 31/12/2022
 32327                                  ;uc_done:	; 18/12/2022
 32328 00003484 C3                      	retn
 32329                                  
 32330                                  ; 13/04/2019 - Retro DOS v4.0
 32331                                  
 32332                                  ;----------------------------------------------------------------------------
 32333                                  ;
 32334                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 32335                                  ;
 32336                                  ;	Coalesce adds the block following the argument to the argument block,
 32337                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 32338                                  ;	some callers (such as $setblock) use it to join a free block to it's
 32339                                  ;	preceeding allocated block.
 32340                                  ;
 32341                                  ;	EXIT	'C' clear if OK
 32342                                  ;		  (ds) unchanged, this block updated
 32343                                  ;		  (ax) = address of next block, IFF not at end
 32344                                  ;		'C' set if arena trashed
 32345                                  ;	USES	cx, di, ds, es
 32346                                  ;
 32347                                  ;----------------------------------------------------------------------------
 32348                                  
 32349                                  umb_coalesce:
 32350                                  	; 31/12/2022
 32351                                  	; ds = cs
 32352 00003485 1E                      	push	ds ; *!
 32353                                  
 32354 00003486 31FF                    	xor	di, di
 32355                                  
 32356                                  	;mov	es,[cs:DevDOSData]
 32357                                  	; 31/12/2022
 32358 00003488 8E06[1A20]              	mov	es,[DevDOSData]
 32359 0000348C 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 32360                                  uc_nextfree:
 32361 00003491 8CC0                    	mov	ax,es
 32362 00003493 8ED8                    	mov	ds,ax
 32363                                  	;cmp	[es:1],di
 32364 00003495 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 32365 0000349A 7407                    	je	short uc_again		; Y: try to coalesce with next block
 32366                                  					; N: get next arena
 32367 0000349C E82100                  	call	get_next		; es, ax = next arena
 32368 0000349F 72E2                    	jc	short uc_done	; *!
 32369 000034A1 EBEE                    	jmp	short uc_nextfree
 32370                                  uc_again:
 32371 000034A3 E81A00                  	call	get_next		; ES, AX <- next block
 32372 000034A6 72DB                    	jc	short uc_done	; *!
 32373                                  uc_check:
 32374 000034A8 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 32375 000034AD 75E2                    	jne	short uc_nextfree	; N: get next free arena
 32376                                  					; Y: coalesce
 32377 000034AF 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 32378 000034B4 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 32379                                  	;add	[3],cx
 32380 000034B5 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 32381 000034B9 268A0D                  	mov     cl,[es:di]              ; move up signature
 32382 000034BC 880D                    	mov     [di],cl
 32383 000034BE EBE3                    	jmp     short uc_again		; try again
 32384                                  
 32385                                  	; 18/12/2022
 32386                                  ;uc_done:
 32387                                  	;retn
 32388                                  
 32389                                  ;----------------------------------------------------------------------------
 32390                                  ;
 32391                                  ;**	get_next - Find Next item in Arena
 32392                                  ;
 32393                                  ;	ENTRY	dS - pointer to block head
 32394                                  ;	EXIT	AX,ES - pointers to next head
 32395                                  ;		'C' set if arena damaged
 32396                                  ;
 32397                                  ;----------------------------------------------------------------------------
 32398                                  
 32399                                  	; 01/11/2022
 32400                                  get_next:
 32401 000034C0 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 32402 000034C5 740A                    	je	short gn_err
 32403                                  _get_next_:
 32404 000034C7 8CD8                    	mov     ax,ds                   ; ax=current block
 32405 000034C9 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 32406 000034CD 40                      	inc     ax                      ; remember that header!
 32407 000034CE 8EC0                    	mov	es,ax
 32408                                  	;clc
 32409                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32410                                  	; 11/12/2022
 32411                                  	; cf=0
 32412                                  	;clc
 32413 000034D0 C3                      	retn
 32414                                  gn_err:
 32415 000034D1 F9                      	stc
 32416                                  	; 11/12/2022	
 32417                                  lfu_err:	 ; cf=1
 32418 000034D2 C3                      	retn
 32419                                  
 32420                                  ;----------------------------------------------------------------------------
 32421                                  ;
 32422                                  ; procedure : LinkFirstUMB
 32423                                  ;
 32424                                  ;----------------------------------------------------------------------------
 32425                                  
 32426                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32427                                  	; (SYSINIT:2F81h)
 32428                                  LinkFirstUMB:
 32429                                  	; 31/12/2022
 32430                                  	; ds = cs
 32431 000034D3 E8D3FE                  	call	umb_allocate
 32432 000034D6 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 32433                                  
 32434                                  ; bx = segment of allocated UMB
 32435                                  ; dx = size of UMB
 32436                                  
 32437                                  	; 31/12/2022
 32438                                  	; ds = cs
 32439                                  
 32440 000034D8 CD12                    	int	12h			; ax = size of memory
 32441 000034DA B106                    	mov	cl,6
 32442 000034DC D3E0                    	shl	ax,cl			; ax = size in paragraphs
 32443                                  
 32444 000034DE 89C1                    	mov	cx,ax			; cx = size in paras
 32445 000034E0 29D8                    	sub	ax,bx			; ax = - size of unused block
 32446                                  
 32447 000034E2 F7D8                    	neg	ax
 32448                                  
 32449 000034E4 83E901                  	sub	cx,1			; cx = first umb_arena
 32450 000034E7 8EC1                    	mov	es,cx			; es = first umb_arena
 32451                                  	
 32452 000034E9 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32453 000034EF 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 32454                                  					
 32455 000034F6 26A30300                	mov	[es:ARENA.SIZE],ax	
 32456 000034FA 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 32457                                  
 32458                                  ; put in the arena for the first UMB
 32459                                  
 32460 00003501 8EC3                    	mov	es,bx			; es has first free umb seg
 32461 00003503 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 32462 00003509 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 32463                                  					; mark as free 
 32464 00003510 4A                      	dec	dx			; make room for arena
 32465 00003511 2689160300              	mov	[es:ARENA.SIZE],dx	
 32466                                  
 32467                                  	;mov	es,[cs:DevDOSData]
 32468                                  	; 31/12/2022
 32469 00003516 8E06[1A20]              	mov	es,[DevDOSData] ; ds = cs
 32470 0000351A BF8C00                  	mov	di,UMB_ARENA ; 8Ch
 32471 0000351D 26890D                  	mov	[es:di],cx		; initialize umb_head in DOS
 32472                                  					;  data segment with the arena
 32473                                  					;  just below Top of Mem
 32474                                  
 32475                                  ; we must now scan the arena chain and update the size of the last arena
 32476                                  
 32477 00003520 BF2400                  	mov	di,DOS_ARENA ; 24h
 32478 00003523 268E05                  	mov	es,[es:di]		; es = start arena
 32479 00003526 31FF                    	xor	di,di
 32480                                  ;scan_next
 32481                                  ; 09/12/2022
 32482                                  scannext:
 32483 00003528 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 32484 0000352C 740C                    	je	short got_last
 32485                                  	
 32486 0000352E 8CC0                    	mov	ax,es
 32487 00003530 2603060300              	add	ax,[es:ARENA.SIZE]
 32488 00003535 40                      	inc	ax
 32489 00003536 8EC0                    	mov	es,ax
 32490                                  	;jmp	short scan_next
 32491                                  	; 09/12/2022
 32492 00003538 EBEE                    	jmp	short scannext
 32493                                  got_last:
 32494 0000353A 26832E030001            	sub	word [es:ARENA.SIZE],1
 32495 00003540 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32496                                  	;clc
 32497                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32498                                  	; 11/12/2022
 32499                                  	; cf=0
 32500                                  	;clc
 32501 00003546 C3                      	retn
 32502                                  
 32503                                  ; 11/12/2022
 32504                                  ;;lfu_err:
 32505                                  ;	;stc
 32506                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32507                                  ;	; 11/12/2022
 32508                                  ;	; cf=1
 32509                                  ;	;stc
 32510                                  ;	retn
 32511                                  
 32512                                  ;----------------------------------------------------------------------------
 32513                                  ;
 32514                                  ; procedure : ShrinkUMB
 32515                                  ;
 32516                                  ;	Shrinks the current UMB in use, so that the unused portions
 32517                                  ;	of the UMB is given back to the DOS free mem pool
 32518                                  ;
 32519                                  ;----------------------------------------------------------------------------
 32520                                  
 32521                                  ShrinkUMB:
 32522                                  	; 12/12/2022
 32523                                  	; ds = cs
 32524 00003547 833E[FD1F]00            	cmp	word [DevUMBAddr],0
 32525                                  	;cmp	word [cs:DevUMBAddr],0
 32526 0000354C 741F                    	je	short su_exit
 32527 0000354E 06                      	push	es
 32528                                  	; 01/01/2023
 32529                                  	;push	bx
 32530                                  	; 12/12/2022
 32531                                  	;mov	bx,[cs:DevUMBFree]
 32532                                  	;sub	bx,[cs:DevUMBAddr]
 32533                                  	;mov	es,[cs:DevUMBAddr]
 32534 0000354F 8B1E[0120]              	mov	bx,[DevUMBFree]
 32535 00003553 2B1E[FD1F]              	sub	bx,[DevUMBAddr]
 32536 00003557 8E06[FD1F]              	mov	es,[DevUMBAddr]
 32537                                  	
 32538 0000355B B8004A                  	mov	ax,4A00h
 32539 0000355E CD21                    	int	21h
 32540                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 32541                                  		; ES = segment address of block to change
 32542                                  		; BX = new size in paragraphs
 32543 00003560 8CC0                    	mov	ax,es
 32544 00003562 48                      	dec	ax
 32545 00003563 8EC0                    	mov	es,ax
 32546 00003565 26C70601000800          	mov	word [es:ARENA.OWNER],8
 32547                                  	; 01/01/2023
 32548                                  	;pop	bx
 32549 0000356C 07                      	pop	es
 32550                                  su_exit:
 32551 0000356D C3                      	retn
 32552                                  
 32553                                  ;----------------------------------------------------------------------------
 32554                                  ;
 32555                                  ; procedure : UnlinkUMB
 32556                                  ;
 32557                                  ;	Unlinks the UMBs from the DOS arena chain
 32558                                  ;
 32559                                  ;----------------------------------------------------------------------------
 32560                                  
 32561                                  UnlinkUMB:
 32562                                  	; 12/12/2022
 32563                                  	; ds = cs
 32564 0000356E 1E                      	push	ds
 32565 0000356F 06                      	push	es
 32566                                  	; 12/12/2022
 32567 00003570 803E[1920]00            	cmp	byte [FirstUMBLinked],0
 32568                                  	;cmp	byte [cs:FirstUMBLinked],0
 32569 00003575 7420                    	je	short ulu_x		; nothing to unlink
 32570                                  	; 12/12/2022
 32571 00003577 8E06[1A20]              	mov	es,[DevDOSData]
 32572                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 32573 0000357B 268E1E2400              	mov	ds,[es:DOS_ARENA]
 32574 00003580 268B3E8C00              	mov	di,[es:UMB_ARENA]
 32575                                  ulu_next:
 32576 00003585 E838FF                  	call	get_next
 32577 00003588 720D                    	jc	short ulu_x
 32578 0000358A 39C7                    	cmp	di,ax			; is the next one UMB ?
 32579 0000358C 7404                    	je	short ulu_found
 32580 0000358E 8ED8                    	mov	ds,ax
 32581 00003590 EBF3                    	jmp	short ulu_next
 32582                                  ulu_found:
 32583                                  	;mov	byte [0],'Z'
 32584 00003592 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 32585                                  ulu_x:
 32586 00003597 07                      	pop	es
 32587 00003598 1F                      	pop	ds
 32588 00003599 C3                      	retn
 32589                                  
 32590                                  ; ----------------------------------------------------------------------
 32591                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 32592                                  ; ----------------------------------------------------------------------
 32593                                  ; 14/04/2019 - Retro DOS v4.0
 32594                                  
 32595                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 32596                                  ;
 32597                                  ; Summary:
 32598                                  ;
 32599                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 32600                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 32601                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 32602                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 32603                                  ;   and/or config.inc for the full list.
 32604                                  ;
 32605                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 32606                                  ;   configuration support. blockname is either MENU, which contains one
 32607                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 32608                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 32609                                  ;   INCLUDE allows the current block to name another block for inclusion
 32610                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 32611                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 32612                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 32613                                  ;
 32614                                  ; Example:
 32615                                  ;
 32616                                  ;   [menu]
 32617                                  ;   menuitem=misc,Miscellaneous
 32618                                  ;   menuitem=network,Network Configuration
 32619                                  ;   menudefault=network,15
 32620                                  ;
 32621                                  ;   [network]
 32622                                  ;   include misc
 32623                                  ;   device=foo
 32624                                  ;
 32625                                  ;   [misc]
 32626                                  ;   device=bar
 32627                                  ;   include alternate
 32628                                  ;
 32629                                  ;   [alternate]
 32630                                  ;   device=tar
 32631                                  ;
 32632                                  ;
 32633                                  ;   When the menu is displayed
 32634                                  ;
 32635                                  ;    1. Miscellaneous
 32636                                  ;    2. Network Configuration
 32637                                  ;
 32638                                  ;   #2 is highlighted as the default option, and will be automatically
 32639                                  ;   selected after 15 seconds. It will invoke the following lines in the
 32640                                  ;   following order:
 32641                                  ;
 32642                                  ;       DEVICE=BAR
 32643                                  ;       DEVICE=TAR
 32644                                  ;       DEVICE=FOO
 32645                                  ;
 32646                                  
 32647                                  ;MULTI_CONFIG equ 1
 32648                                  
 32649                                  ; the following depend on the positions of the various letters in switchlist
 32650                                  
 32651                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 32652                                  
 32653                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 32654                                  flagdrive	equ 00001000b ; 8 
 32655                                  flagcyln	equ 00010000b ; 16
 32656                                  flagseclim	equ 00100000b ; 32
 32657                                  flagheads	equ 01000000b ; 64
 32658                                  flagff		equ 10000000b ; 128
 32659                                  
 32660                                  ;----------------------------------------------------------------------------
 32661                                  ; 19/04/2019 - Retro DOS v4.0
 32662                                  
 32663                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 32664                                  
 32665                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32666                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 32667                                  
 32668 0000359A 00                      insert_blank:	db 	0
 32669                                  
 32670                                  ;----------------------------------------------------------------------------
 32671                                  ;
 32672                                  ; procedure : setparms
 32673                                  ;
 32674                                  ; the following set of routines is used to parse the drivparm = command in
 32675                                  ; the config.sys file to change the default drive parameters.
 32676                                  ;
 32677                                  ;----------------------------------------------------------------------------
 32678                                  
 32679                                  setparms:
 32680 0000359B 1E                      	push	ds
 32681 0000359C 50                      	push	ax
 32682 0000359D 53                      	push	bx
 32683 0000359E 51                      	push	cx
 32684 0000359F 52                      	push	dx
 32685                                  
 32686 000035A0 0E                      	push	cs
 32687 000035A1 1F                      	pop	ds
 32688                                  
 32689 000035A2 31DB                    	xor	bx,bx
 32690 000035A4 8A1E[B34A]              	mov	bl,[drive]
 32691                                  	; 18/12/2022
 32692 000035A8 43                      	inc	bx
 32693                                  	;inc	bl			; get it correct for ioctl call
 32694                                  					; (1=a,2=b...)
 32695 000035A9 BA[8B49]                	mov	dx,deviceparameters
 32696 000035AC B444                    	mov	ah,IOCTL ; 44h
 32697 000035AE B00D                    	mov	al,GENERIC_IOCTL ; 0Dh
 32698 000035B0 B508                    	mov	ch,RAWIO ; 8
 32699 000035B2 B140                    	mov	cl,SET_DEVICE_PARAMETERS ; 40h
 32700 000035B4 CD21                    	int	21h
 32701                                  
 32702                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32703                                  ;
 32704                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 32705                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 32706                                  ;	; 21/10/2022
 32707                                  ;	mov	ax,DOSBIODATASEG ; 0070h	
 32708                                  ;	mov	ds,ax			; set Bios_Data segment
 32709                                  ;
 32710                                  ;	test	word [cs:switches],flagec35 ; 4
 32711                                  ;	jz	short not_ec35
 32712                                  
 32713                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32714                                  	;test	word [switches],flagec35 ; 4
 32715                                  	; 12/12/2022
 32716 000035B6 F606[B44A]04            	test	byte [switches],flagec35 ; 4
 32717 000035BB 7411                    	jz	short eot_ok
 32718                                  
 32719                                  	;mov	cl,[cs:drive]		; which drive was this for?
 32720                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32721 000035BD 8A0E[B34A]              	mov	cl,[drive]
 32722 000035C1 B87000                  	mov	ax,DOSBIODATASEG ; 0070h	
 32723 000035C4 8ED8                    	mov	ds,ax	
 32724                                  
 32725 000035C6 B001                    	mov	al,1			; assume drive 0
 32726 000035C8 D2E0                    	shl	al,cl			; set proper bit depending on drive
 32727                                  	;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 32728 000035CA 0806[3105]              	or	[ec35_flag],al		; set the bit in the permanent flags
 32729                                  
 32730                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32731                                  ;
 32732                                  ;not_ec35:
 32733                                  ;;	Now adjust the BIOS's EOT variable if our new drive has more
 32734                                  ;;	sectors per track than any old ones.
 32735                                  ;
 32736                                  ;	;mov	al,[cs:deviceparameters+20]
 32737                                  ;	mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 32738                                  ;	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 32739                                  ;	cmp	al,[EOT]
 32740                                  ;	jbe	short eot_ok
 32741                                  ;	mov	[EOT],al
 32742                                  
 32743                                  eot_ok:
 32744 000035CE 5A                      	pop	dx			; fix up all the registers
 32745 000035CF 59                      	pop	cx
 32746 000035D0 5B                      	pop	bx
 32747 000035D1 58                      	pop	ax
 32748 000035D2 1F                      	pop	ds ; 13/05/2019
 32749 000035D3 C3                      	retn
 32750                                  
 32751                                  ;----------------------------------------------------------------------------
 32752                                  ;
 32753                                  ; procedure : diddleback
 32754                                  ;
 32755                                  ; replace default values for further drivparm commands
 32756                                  ;
 32757                                  ;----------------------------------------------------------------------------
 32758                                  
 32759                                  diddleback:
 32760 000035D4 1E                      	push	ds
 32761 000035D5 0E                      	push	cs
 32762 000035D6 1F                      	pop	ds
 32763                                  	;mov	word [deviceparameters+4],80
 32764 000035D7 C706[8F49]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 32765                                  	;mov	byte [deviceparameters+1],2
 32766 000035DD C606[8C49]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 32767                                  	;mov	word [deviceparameters+2],0
 32768 000035E2 C706[8D49]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 32769 000035E8 C706[B44A]0000          	mov	word [switches],0	    ; zero all switches
 32770 000035EE 1F                      	pop	ds
 32771 000035EF C3                      	retn
 32772                                  
 32773                                  
 32774                                  ; 03/01/2023
 32775                                  %if 0
 32776                                  
 32777                                  ; 15/04/2019 - Retro DOS v4.0
 32778                                  
 32779                                  ;----------------------------------------------------------------------------
 32780                                  ;
 32781                                  ; procedure : parseline
 32782                                  ;
 32783                                  ; entry point is parseline. al contains the first character in command line.
 32784                                  ;
 32785                                  ;----------------------------------------------------------------------------
 32786                                  
 32787                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 32788                                  	; (SYSINIT:3EDFh)
 32789                                  
 32790                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32791                                  	; (SYSINIT:30ACh)
 32792                                  parseline:
 32793                                  	; 03/01/2023
 32794                                  	; ds = cs ; *
 32795                                  
 32796                                  	;push	ds ; *
 32797                                  
 32798                                  	;push	cs ; *
 32799                                  	;pop	ds ; *
 32800                                  
 32801                                  nextswtch:
 32802                                  	cmp	al,cr			; carriage return?
 32803                                  	je	short done_line
 32804                                  	cmp	al,lf			; linefeed?
 32805                                  	je	short put_back		; put it back and done
 32806                                  
 32807                                  ; anything less or equal to a space is ignored.
 32808                                  
 32809                                  	cmp	al,' '                  ; space?
 32810                                  	jbe	short getnext		; skip over space
 32811                                  	cmp	al,'/'
 32812                                  	je	short getparm
 32813                                  	stc				; mark error invalid-character-in-input
 32814                                  	;jmp	short exitpl
 32815                                  	; 03/01/2023
 32816                                  swterr:
 32817                                  	retn
 32818                                  
 32819                                  getparm:
 32820                                  	call	check_switch
 32821                                  	mov	[switches],bx		; save switches read so far
 32822                                  	jc	short swterr
 32823                                  getnext:
 32824                                  	call	getchr
 32825                                  	;jc	short done_line
 32826                                  	;jmp	short nextswtch
 32827                                  	; 03/01/2023
 32828                                  	jnc	short nextswtch
 32829                                  ;swterr:
 32830                                  	;jmp	short exitpl		; exit if error
 32831                                  
 32832                                  done_line:
 32833                                  	; 12/12/2022
 32834                                  	test	byte [switches],flagdrive ; 8
 32835                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 32836                                  	jnz	short okay
 32837                                  	stc				; mark error no-drive-specified
 32838                                  	;jmp	short exitpl
 32839                                  	; 03/01/2023
 32840                                  	retn
 32841                                  
 32842                                  okay:
 32843                                  	mov	ax,[switches]
 32844                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 32845                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 32846                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 32847                                  	;clc			    ; everything is fine
 32848                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32849                                  	; 12/12/2022
 32850                                  	; cf=0
 32851                                  	;clc
 32852                                  	;call	setdeviceparameters
 32853                                  	; 03/01/2023
 32854                                  	jmp	setdeviceparameters
 32855                                  ;exitpl:
 32856                                  	; 03/01/2023
 32857                                  	; ds = cs
 32858                                  	;pop	ds ; *
 32859                                  	retn
 32860                                  put_back:
 32861                                  	inc	word [count]		; one more char to scan
 32862                                  	dec	word [chrptr]		; back up over linefeed
 32863                                  	jmp	short done_line
 32864                                  
 32865                                  %endif
 32866                                  
 32867                                  ;----------------------------------------------------------------------------
 32868                                  ;
 32869                                  ; procedure : check_switch
 32870                                  ;
 32871                                  ; processes a switch in the input. it ensures that the switch is valid, and
 32872                                  ; gets the number, if any required, following the switch. the switch and the
 32873                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 32874                                  ; error.
 32875                                  ;
 32876                                  ;----------------------------------------------------------------------------
 32877                                  
 32878                                  check_switch:
 32879 000035F0 E8CAF3                  	call	getchr
 32880                                  	;jc	short err_check
 32881 000035F3 724E                    	jc	short err_chk
 32882 000035F5 24DF                            and     al,0DFh                 ; convert it to upper case
 32883 000035F7 3C41                    	cmp	al,'A'
 32884                                  	;jb	short err_check
 32885 000035F9 7248                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 32886 000035FB 3C5A                    	cmp	al,'Z'
 32887 000035FD 7743                    	ja	short err_check
 32888                                  
 32889 000035FF 06                      	push	es
 32890                                  
 32891 00003600 0E                      	push	cs
 32892 00003601 07                      	pop	es
 32893                                  
 32894 00003602 8A0E[484B]              	mov	cl,[switchlist]		; get number of valid switches
 32895 00003606 B500                    	mov	ch,0
 32896 00003608 BF[494B]                	mov	di,1+switchlist		; point to string of valid switches
 32897 0000360B F2AE                    	repne	scasb
 32898                                  
 32899 0000360D 07                      	pop	es
 32900 0000360E 7532                    	jnz	short err_check
 32901                                  
 32902 00003610 B80100                  	mov	ax,1
 32903 00003613 D3E0                    	shl	ax,cl			; set bit to indicate switch
 32904 00003615 8B1E[B44A]              	mov	bx,[switches]		; get switches so far
 32905 00003619 09C3                    	or	bx,ax			; save this with other switches
 32906 0000361B 89C1                    	mov	cx,ax
 32907                                  	; 12/12/2022
 32908 0000361D A8F8                    	test	al,switchnum ; 0F8h
 32909                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 32910 0000361F 741E                    	jz	short done_swtch
 32911                                  
 32912 00003621 E899F3                  	call	getchr
 32913 00003624 721A                    	jc	short err_swtch
 32914                                  
 32915 00003626 3C3A                    	cmp	al,':'
 32916 00003628 7516                    	jne	short err_swtch
 32917                                  
 32918 0000362A E890F3                  	call	getchr
 32919 0000362D 53                      	push	bx			; preserve switches
 32920                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32921                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 32922                                  	; 12/12/2022
 32923                                  	; ds = cs
 32924 0000362E C606[AC02]20            	mov	byte [sepchr],' '
 32925 00003633 E8AF0D                  	call	getnum
 32926                                  	;mov	byte [cs:sepchr],0
 32927                                  	; 12/12/2022
 32928 00003636 C606[AC02]00            	mov	byte [sepchr],0
 32929 0000363B 5B                      	pop	bx			; restore switches
 32930                                  
 32931                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 32932                                  ; not check for carry set here. if there is an error, it will be detected
 32933                                  ; further on (hopefully).
 32934                                  
 32935 0000363C E80500                  	call	process_num
 32936                                  
 32937                                  done_swtch:
 32938                                  	;clc
 32939                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32940                                  	; 12/12/2022
 32941                                  	; cf=0
 32942                                  	;clc
 32943 0000363F C3                      	retn
 32944                                  
 32945                                  err_swtch:
 32946 00003640 31CB                    	xor	bx,cx			; remove this switch from the records
 32947                                  err_check:
 32948 00003642 F9                      	stc
 32949                                  err_chk:
 32950 00003643 C3                      	retn
 32951                                  
 32952                                  ;----------------------------------------------------------------------------
 32953                                  ;
 32954                                  ; procedure : process_num
 32955                                  ;
 32956                                  ; this routine takes the switch just input, and the number following (if any),
 32957                                  ; and sets the value in the appropriate variable. if the number input is zero
 32958                                  ; then it does nothing - it assumes the default value that is present in the
 32959                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 32960                                  ;
 32961                                  ;----------------------------------------------------------------------------
 32962                                  
 32963                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32964                                  	; (SYSINIT:3156h)
 32965                                  process_num:
 32966 00003644 850E[B44A]              	test	[switches],cx		; if this switch has been done before,
 32967 00003648 752B                    	jnz	short done_ret		; ignore this one.
 32968                                  	; 12/12/2022
 32969 0000364A F6C108                  	test	cl,flagdrive ; 8
 32970                                  	;test	cx,flagdrive ; 8
 32971 0000364D 7404                    	jz	short try_f
 32972 0000364F A2[B34A]                	mov	byte [drive],al
 32973                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32974                                  	;jmp	short done_ret
 32975                                  	; 12/12/2022
 32976                                  	; cf=0
 32977 00003652 C3                      	retn	; 13/05/2019
 32978                                  try_f:
 32979                                  	; 12/12/2022
 32980 00003653 F6C180                  	test	cl,flagff ; 80h
 32981                                  	;test	cx,flagff ; 80h
 32982 00003656 7404                    	jz	short try_t
 32983                                  
 32984                                  ; ensure that we do not get bogus form factors that are not supported
 32985                                  
 32986                                  	;mov	[deviceparameters+1],al
 32987 00003658 A2[8C49]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 32988                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32989                                  	;jmp	short done_ret
 32990                                  	; 12/12/2022
 32991                                  	; cf=0
 32992 0000365B C3                      	retn	; 13/05/2019
 32993                                  try_t:
 32994 0000365C 09C0                    	or	ax,ax
 32995 0000365E 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 32996                                  	; 12/12/2022
 32997 00003660 F6C110                  	test	cl,flagcyln ; 10h
 32998                                  	;test	cx,flagcyln ; 10h
 32999 00003663 7404                    	jz	short try_s
 33000                                  
 33001                                  	;mov	[deviceparameters+4],ax
 33002 00003665 A3[8F49]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 33003                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33004                                  	;jmp	short done_ret
 33005                                  	; 12/12/2022
 33006                                  	; cf=0
 33007 00003668 C3                      	retn	; 13/05/2019
 33008                                  try_s:
 33009                                  	; 12/12/2022
 33010 00003669 F6C120                  	test	cl,flagseclim ; 20h
 33011                                  	;test	cx,flagseclim ; 20h
 33012 0000366C 7404                    	jz	short try_h
 33013 0000366E A3[B14A]                	mov	[slim],ax
 33014                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33015                                  	;jmp	short done_ret
 33016                                  	; 12/12/2022
 33017                                  	; cf=0
 33018 00003671 C3                      	retn	; 13/05/2019
 33019                                  
 33020                                  ; must be for number of heads
 33021                                  
 33022                                  try_h:
 33023 00003672 A3[AF4A]                	mov	[hlim],ax
 33024                                  done_ret:
 33025                                  	;clc
 33026                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33027                                  	; 12/12/2022
 33028                                  	; cf=0 (test instruction resets cf)
 33029                                  	;clc
 33030 00003675 C3                      	retn
 33031                                  
 33032                                  
 33033                                  ; 03/01/2023 - Retro DOS v4.2
 33034                                  %if 1
 33035                                  
 33036                                  ; 15/04/2019 - Retro DOS v4.0
 33037                                  
 33038                                  ;----------------------------------------------------------------------------
 33039                                  ;
 33040                                  ; procedure : parseline
 33041                                  ;
 33042                                  ; entry point is parseline. al contains the first character in command line.
 33043                                  ;
 33044                                  ;----------------------------------------------------------------------------
 33045                                  
 33046                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 33047                                  	; (SYSINIT:3EDFh)
 33048                                  
 33049                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33050                                  	; (SYSINIT:30ACh)
 33051                                  parseline:
 33052                                  	; 03/01/2023
 33053                                  	; ds = cs ; *
 33054                                  
 33055                                  	;push	ds ; *
 33056                                  
 33057                                  	;push	cs ; *
 33058                                  	;pop	ds ; *
 33059                                  
 33060                                  nextswtch:
 33061 00003676 3C0D                    	cmp	al,cr			; carriage return?
 33062 00003678 741C                    	je	short done_line
 33063 0000367A 3C0A                    	cmp	al,lf			; linefeed?
 33064 0000367C 7421                    	je	short put_back		; put it back and done
 33065                                  
 33066                                  ; anything less or equal to a space is ignored.
 33067                                  
 33068 0000367E 3C20                    	cmp	al,' '                  ; space?
 33069 00003680 760F                    	jbe	short getnext		; skip over space
 33070 00003682 3C2F                    	cmp	al,'/'
 33071 00003684 7402                    	je	short getparm
 33072 00003686 F9                      	stc				; mark error invalid-character-in-input
 33073                                  	;jmp	short exitpl
 33074                                  	; 03/01/2023
 33075                                  swterr:
 33076 00003687 C3                      	retn
 33077                                  
 33078                                  getparm:
 33079 00003688 E865FF                  	call	check_switch
 33080 0000368B 891E[B44A]              	mov	[switches],bx		; save switches read so far
 33081 0000368F 72F6                    	jc	short swterr
 33082                                  getnext:
 33083 00003691 E829F3                  	call	getchr
 33084                                  	;jc	short done_line
 33085                                  	;jmp	short nextswtch
 33086                                  	; 03/01/2023
 33087 00003694 73E0                    	jnc	short nextswtch
 33088                                  ;swterr:
 33089                                  	;jmp	short exitpl		; exit if error
 33090                                  
 33091                                  done_line:
 33092                                  	; 12/12/2022
 33093 00003696 F606[B44A]08            	test	byte [switches],flagdrive ; 8
 33094                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 33095 0000369B 750C                    	jnz	short okay
 33096 0000369D F9                      	stc				; mark error no-drive-specified
 33097                                  	;jmp	short exitpl
 33098                                  	; 03/01/2023
 33099 0000369E C3                      	retn
 33100                                  
 33101                                  ;exitpl:
 33102                                  	; 03/01/2023
 33103                                  	; ds = cs
 33104                                  	;;pop	ds ; *
 33105                                  	;retn
 33106                                  
 33107                                  put_back:
 33108 0000369F FF06[5403]              	inc	word [count]		; one more char to scan
 33109 000036A3 FF0E[5803]              	dec	word [chrptr]		; back up over linefeed
 33110 000036A7 EBED                    	jmp	short done_line
 33111                                  
 33112                                  okay:
 33113 000036A9 A1[B44A]                	mov	ax,[switches]
 33114 000036AC 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 33115 000036AF A3[8D49]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 33116 000036B2 C706[B149]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 33117                                  	;clc			    ; everything is fine
 33118                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33119                                  	; 12/12/2022
 33120                                  	; cf=0
 33121                                  	;clc
 33122                                  	;call	setdeviceparameters
 33123                                  	; 03/01/2023
 33124                                  	;jmp	short setdeviceparameters
 33125                                  
 33126                                  %endif
 33127                                  
 33128                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 33129                                  
 33130                                  ;----------------------------------------------------------------------------
 33131                                  ;
 33132                                  ; procedure : setdeviceparameters
 33133                                  ;
 33134                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 33135                                  ; system based on the form factor. it is assumed that the bpbs for the
 33136                                  ; various form factors are present in the bpbtable. for hard files,
 33137                                  ; the recommended bpb is the same as the bpb on the drive.
 33138                                  ; no attempt is made to preserve registers since we are going to jump to
 33139                                  ; sysinit straight after this routine.
 33140                                  ;
 33141                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 33142                                  ;	  we always return no carry
 33143                                  ;
 33144                                  ;	note:  there is a routine by the same name in msdioctl.asm
 33145                                  ;
 33146                                  ;----------------------------------------------------------------------------
 33147                                  
 33148                                  ; 15/04/2019 - Retro DOS v4.0
 33149                                  
 33150                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33151                                  
 33152                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33153                                  	; (SYSINIT:3FC4h)
 33154                                  
 33155                                  setdeviceparameters:
 33156                                  	; 03/01/2023
 33157                                  	; ds = cs
 33158                                  
 33159 000036B8 06                      	push	es
 33160                                  
 33161 000036B9 0E                      	push	cs
 33162 000036BA 07                      	pop	es
 33163                                  
 33164 000036BB 31DB                    	xor	bx,bx
 33165 000036BD 8A1E[8C49]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 33166 000036C1 80FB00                  	cmp	bl,DEV_5INCH ; 0
 33167 000036C4 7506                    	jne	short got_80
 33168                                  
 33169 000036C6 C706[8F49]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 33170                                  							; 48 tpi=40 cyl
 33171                                  got_80:
 33172 000036CC D1E3                    	shl	bx,1			; get index into bpb table
 33173 000036CE 8BB7[344B]              	mov	si,[bpbtable+bx]	; get address of bpb
 33174                                  
 33175                                  	;mov	di,deviceparameters+7	
 33176                                  	; 02/11/2022
 33177 000036D2 BF[9249]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 33178 000036D5 B91F00                  	mov	cx,A_BPB.size ; 31
 33179 000036D8 FC                      	cld
 33180                                  	;repe	movsb
 33181                                  	; 02/11/2022
 33182 000036D9 F3A4                    	rep	movsb
 33183                                  
 33184 000036DB 07                      	pop	es
 33185                                  
 33186                                  	; 12/12/2022
 33187 000036DC F606[B44A]20            	test	byte [switches],flagseclim ; 20h
 33188                                  	;test	word [switches],flagseclim ; 20h
 33189 000036E1 7406                    	jz	short see_heads
 33190                                  
 33191 000036E3 A1[B14A]                	mov	ax,[slim]
 33192                                  	;mov	[deviceparameters+20],ax
 33193 000036E6 A3[9F49]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],ax
 33194                                  
 33195                                  see_heads:
 33196                                  	; 12/12/2022
 33197 000036E9 F606[B44A]40            	test	byte [switches],flagheads ; 40h
 33198                                  	;test	word [switches],flagheads ; 40h
 33199 000036EE 7406                    	jz	short heads_not_altered
 33200                                  
 33201 000036F0 A1[AF4A]                	mov	ax,[hlim]
 33202                                  	;mov	[deviceparameters+22],ax	
 33203 000036F3 A3[A149]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax
 33204                                  
 33205                                  heads_not_altered:
 33206                                  
 33207                                  ; set up correct media descriptor byte and sectors/cluster
 33208                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 33209                                  
 33210                                  	;mov	byte [deviceparameters+9],2
 33211                                  	; 02/11/2022
 33212                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],2
 33213                                  	; 03/01/2023
 33214 000036F6 B80200                  	mov	ax,2	
 33215 000036F9 A2[9449]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 2
 33216                                  
 33217 000036FC B3F0                    	mov	bl,0F0h			; get default mediabyte
 33218                                  
 33219                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 33220                                  
 33221                                  	;mov	bh,[deviceparameters+17]
 33222                                  	; 02/11/2022
 33223 000036FE 8A3E[9C49]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR]
 33224                                  	
 33225                                  	; 03/01/2023
 33226                                  	; ax = 2
 33227 00003702 3906[A149]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax ; >2 heads?
 33228                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],2 ; >2 heads?
 33229 00003706 773C                    	ja	short got_correct_mediad ; just use default if heads>2
 33230                                  
 33231 00003708 7524                    	jne	short only_one_head	; one head, do one head stuff
 33232                                  
 33233                                  ;	two head drives will use the mediadescriptor from the bpb
 33234                                  
 33235 0000370A 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 33236                                  
 33237                                  ;	two sided drives have two special cases to look for. One is
 33238                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 33239                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 33240                                  ;	   one sector/cluster.
 33241                                  
 33242                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 33243                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 33244                                  ;	   type of 2 headed drive is all set.
 33245                                  
 33246 0000370C 833E[9F49]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],18
 33247 00003711 7509                    	jne	short not_144m
 33248 00003713 833E[8F49]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 33249 00003718 7502                    	jne	short not_144m
 33250                                  
 33251                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 33252                                  
 33253 0000371A EB24                    	jmp	short got_one_secperclus_drive
 33254                                  
 33255                                  ;	check for 320K
 33256                                  
 33257                                  not_144m:
 33258 0000371C 833E[8F49]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 33259 00003721 7521                    	jne	short got_correct_mediad
 33260 00003723 833E[9F49]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 33261 00003728 751A                    	jne	short got_correct_mediad
 33262                                  
 33263 0000372A B3FC                    	mov	bl,0FCh
 33264 0000372C EB16                    	jmp	short got_correct_mediad
 33265                                  
 33266                                  only_one_head:
 33267                                  
 33268                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 33269                                  
 33270 0000372E 803E[8C49]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 33271 00003733 740B                    	je	short got_one_secperclus_drive
 33272                                  
 33273                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 33274                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 33275                                  ;	  besides 8 will be considered 0fch
 33276                                  
 33277 00003735 B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 33278 00003737 833E[9F49]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 33279                                  	; 12/12/2022
 33280 0000373C 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 33281                                  
 33282 0000373E B3FE                    	mov	bl,0FEh			; 160K mediaid
 33283                                  
 33284                                  ;	we've either got a one sided drive, or a 1.44M drive
 33285                                  ;	  either case we'll use 1 sector per cluster instead of 2
 33286                                  
 33287                                  got_one_secperclus_drive:
 33288                                  	; 03/01/2023
 33289                                  	; ax = 2
 33290 00003740 48                      	dec	ax  ; ax = 1
 33291 00003741 A2[9449]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 1
 33292                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],1
 33293                                  
 33294                                  got_correct_mediad:
 33295 00003744 881E[9C49]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR],bl
 33296                                  
 33297                                  ;	 Calculate the correct number of Total Sectors on medium
 33298                                  
 33299 00003748 A1[8F49]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 33300 0000374B F726[A149]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS]
 33301 0000374F F726[9F49]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 33302 00003753 A3[9A49]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS],ax
 33303 00003756 F8                      	clc				; we currently return no errors
 33304                                  
 33305 00003757 C3                      	retn
 33306                                  
 33307                                  ;	M047 -- end rewritten routine
 33308                                  
 33309                                  ;----------------------------------------------------------------------------
 33310                                  ;
 33311                                  ; procedure : organize
 33312                                  ;
 33313                                  ;----------------------------------------------------------------------------
 33314                                  
 33315                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33316                                  	; (SYSINIT:3234h)
 33317                                  
 33318                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 33319                                  	; (SYSINIT:4067h)
 33320                                  
 33321                                  organize:
 33322                                  	; 03/01/2023
 33323                                  	; ds = cs
 33324 00003758 8B0E[5403]              	mov	cx,[count]
 33325                                  	;mov	cx,[cs:count]
 33326 0000375C E323                    	jcxz	nochar1
 33327                                  
 33328                                  ;ifndef	MULTI_CONFIG
 33329                                  ;
 33330                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 33331                                  ;;   because we the case of values in SET commands preserved
 33332                                  ;
 33333                                  ;	call	mapcase
 33334                                  ;endif
 33335                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33336                                  	; 03/01/2023 - Retro DOS v4.2
 33337                                  	;call	mapcase
 33338                                  
 33339 0000375E 31F6                    	xor	si,si
 33340 00003760 89F7                    	mov	di,si
 33341 00003762 31C0                    	xor	ax,ax
 33342                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 33343                                  	;;mov	byte [cs:com_level],0
 33344                                  	; 12/12/2022
 33345                                  	;mov	[cs:com_level],al ; 0
 33346                                  	; 03/01/2023
 33347                                  	; ds = cs
 33348 00003764 A2[4E03]                	mov	[com_level],al ; 0
 33349                                  org1:
 33350 00003767 E8FA01                  	call	skip_comment
 33351 0000376A 740D                    	jz	short end_commd_line	; found a comment string and skipped.
 33352 0000376C E8DB01                  	call	get2			; not a comment string. then get a char.
 33353 0000376F 3C0A                    	cmp	al,lf ; 0Ah
 33354 00003771 7406                    	je	short end_commd_line	; starts with a blank line.
 33355 00003773 3C20                    	cmp	al,' ' ; 20h
 33356 00003775 76F0                    	jbe	short org1		; skip leading control characters
 33357 00003777 EB0A                    	jmp	short findit
 33358                                  
 33359                                  end_commd_line:
 33360 00003779 AA                      	stosb				; store line feed char in buffer for the linecount.
 33361                                  	;mov	byte [cs:com_level],0	; reset the command level.
 33362                                  	; 03/01/2023
 33363                                  	; ds = cs
 33364 0000377A C606[4E03]00            	mov	byte [com_level],0
 33365 0000377F EBE6                    	jmp	short org1
 33366                                  
 33367                                  nochar1:
 33368 00003781 F9                      	stc
 33369 00003782 C3                      	retn
 33370                                  
 33371                                  findit:
 33372 00003783 51                      	push	cx
 33373 00003784 56                      	push	si
 33374 00003785 57                      	push	di
 33375 00003786 89F5                    	mov	bp,si
 33376 00003788 4D                      	dec	bp
 33377 00003789 BE[A848]                        mov     si,comtab		; prepare to search command table
 33378 0000378C B500                    	mov	ch,0
 33379                                  findcom:
 33380 0000378E 89EF                    	mov	di,bp
 33381 00003790 8A0C                    	mov	cl,[si]
 33382 00003792 46                      	inc	si
 33383 00003793 E345                    	jcxz	nocom
 33384                                  
 33385                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33386                                  
 33387                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 33388                                  
 33389                                  ;ifdef	MULTI_CONFIG
 33390                                  
 33391                                  ;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 33392                                  ;   time skip the upcoming delimiter test (since ";" need not be followed by
 33393                                  ;   anything in particular)
 33394                                  
 33395 00003795 26803D3B                	cmp	byte [es:di],CONFIG_SEMICOLON  ; ';'
 33396 00003799 7430                    	je	short semicolon
 33397                                  loopcom:
 33398 0000379B 268A05                  	mov	al,[es:di]
 33399 0000379E 47                      	inc	di
 33400 0000379F 24DF                    	and	al,~20h ; 0DFh		; force upper case
 33401 000037A1 46                      	inc	si                      ; compare to byte @es:di
 33402 000037A2 3A44FF                  	cmp	al,[si-1]
 33403 000037A5 E1F4                    	loope	loopcom
 33404                                  ;else
 33405                                  ;	repe	cmpsb
 33406                                  ;endif
 33407                                  	; 02/11/2022
 33408                                  	; 03/01/2023 - Retro DOS v4.2
 33409                                  	;repe	cmpsb
 33410                                  
 33411 000037A7 9F                      	lahf
 33412 000037A8 01CE                            add     si,cx                   ; bump to next position without affecting flags
 33413 000037AA 9E                      	sahf
 33414 000037AB AC                              lodsb                           ; get indicator letter
 33415 000037AC 75E0                    	jnz	short findcom
 33416 000037AE 26803D0D                        cmp     byte [es:di],cr		; the next char might be cr,lf
 33417 000037B2 7421                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 33418 000037B4 26803D0A                	cmp	byte [es:di],lf
 33419 000037B8 741B                    	je	short gotcom0
 33420                                  
 33421                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33422                                  
 33423                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 33424                                  
 33425                                  ;ifdef	MULTI_CONFIG
 33426                                  
 33427                                  ;   Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 33428                                  
 33429 000037BA 3C5B                    	cmp	al,CONFIG_BEGIN  ; '['
 33430 000037BC 7417                    	je	short gotcom0
 33431                                  ;endif
 33432 000037BE 50                      	push	ax
 33433 000037BF 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 33434                                  
 33435                                  ;ifdef	MULTI_CONFIG
 33436                                  
 33437                                  ;   If keyword is *immediately* followed by a question mark (?), then
 33438                                  ;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 33439                                  ;   stored in the CONFIG.SYS memory image.
 33440                                  
 33441 000037C2 3C3F                    	cmp	al,'?'                  ; explicit interactive command?
 33442 000037C4 7509                    	jne	short no_query		; no
 33443 000037C6 58                      	pop	ax                      ; yes, so retrieve the original code
 33444                                  	;or	al,80h ; 03/01/2023
 33445 000037C7 0C80                    	or	al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 33446 000037C9 EB0A                    	jmp	short gotcom0           ;
 33447                                  semicolon:
 33448 000037CB B030                    	mov	al,CONFIG_REM ; 0
 33449 000037CD EB06                    	jmp	short gotcom0
 33450                                  no_query:
 33451                                  ;endif  ;MULTI_CONFIG
 33452                                  
 33453                                  	; 02/11/2022
 33454                                  	; 03/01/2023 - Retro DOS v4.2
 33455                                  	;push	ax
 33456                                  	;mov	al,[es:di]		; now the next char. should be a delim.
 33457                                  
 33458 000037CF E8470B                  	call	delim
 33459                                  no_delim:
 33460 000037D2 58                      	pop	ax
 33461 000037D3 75B9                    	jnz	short findcom
 33462                                  gotcom0:
 33463 000037D5 5F                      	pop	di
 33464 000037D6 5E                      	pop	si
 33465 000037D7 59                      	pop	cx
 33466 000037D8 EB0F                    	jmp	short gotcom
 33467                                  nocom:
 33468 000037DA 5F                      	pop	di
 33469 000037DB 5E                      	pop	si
 33470 000037DC 59                      	pop	cx
 33471 000037DD B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 33472 000037DF AA                      	stosb				; save indicator char.
 33473                                  _skipline:
 33474 000037E0 E86701                  	call	get2
 33475 000037E3 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 33476 000037E5 75F9                            jne     short _skipline
 33477 000037E7 EB90                    	jmp	short end_commd_line	; handle next command line
 33478                                  gotcom:
 33479 000037E9 AA                              stosb                           ; save indicator char in buffer
 33480                                  
 33481                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33482                                  
 33483                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 33484                                  
 33485                                  ;ifdef	MULTI_CONFIG
 33486                                  
 33487                                  ;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 33488                                  ;   it screws up the direct comparisons below.
 33489                                  
 33490 000037EA 247F                    	and	al,~CONFIG_OPTION_QUERY ; 7Fh
 33491                                  ;endif
 33492                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 33493                                  	; 03/01/2023
 33494                                  	; ds = cs
 33495 000037EC A2[5203]                	mov	[cmd_indicator],al	; save it for the future use.	
 33496                                  
 33497                                  ;ifdef	MULTI_CONFIG
 33498                                  
 33499                                  ;   There is no whitespace/delimiter between the "begin block" character
 33500                                  ;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 33501                                  ;   skipping code
 33502                                  
 33503 000037EF 3C5B                    	cmp	al,CONFIG_BEGIN
 33504 000037F1 7455                    	je	short org31
 33505 000037F3 3C4F                    	cmp	al,CONFIG_SUBMENU ; 'O'
 33506 000037F5 740F                    	je	short no_mapcase
 33507 000037F7 3C45                    	cmp	al,CONFIG_MENUITEM ; 'E'
 33508 000037F9 740B                    	je	short no_mapcase
 33509 000037FB 3C41                    	cmp	al,CONFIG_MENUDEFAULT ; 'A'
 33510 000037FD 7407                    	je	short no_mapcase
 33511 000037FF 3C4A                    	cmp	al,CONFIG_INCLUDE ; 'J'
 33512 00003801 7403                    	je	short no_mapcase
 33513 00003803 E83C0B                  	call	mapcase			; map case of rest of line to UPPER
 33514                                  no_mapcase:
 33515                                  ;endif
 33516                                  	;; 02/11/2022
 33517                                  	;;mov	[cs:cmd_indicator],al	; save it for the future use.
 33518                                  	;; 03/01/2023
 33519                                  	;; ds = cs
 33520                                  	;mov	[cmd_indicator],al
 33521                                  org2:	
 33522 00003806 E84101                  	call    get2                    ; skip the command name until delimiter
 33523 00003809 3C0A                            cmp     al,lf 	    ; 0Ah
 33524 0000380B 740F                    	je	short org21
 33525 0000380D 3C0D                    	cmp	al,cr 	    ; 0Dh	
 33526 0000380F 740B                    	je	short org21
 33527                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33528                                  	; 03/01/2023 - Retro DOS v4.2
 33529 00003811 3C2F                    	cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 33530 00003813 7407                    	je	short org21		; T-RICHJ: to be parsed properly.
 33531                                  
 33532 00003815 E8010B                  	call	delim
 33533 00003818 75EC                            jnz	short org2
 33534 0000381A EB02                    	jmp	short org3
 33535                                  org21:					;if cr or lf then
 33536 0000381C 4E                      	dec	si			; undo si, cx register
 33537 0000381D 41                      	inc	cx			;  and continue
 33538                                  org3:	
 33539                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 33540                                  	;je	short get_cmt_token
 33541                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33542                                  	; 03/01/2023 - Retro DOS v4.2	
 33543                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 33544                                  	;je	short org_file
 33545                                  	;cmp	byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 33546                                  	;je	short org_file
 33547                                  	;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 33548                                  	;je	short org_file
 33549                                  	; 02/11/2022
 33550                                  	; 03/01/2023 - Retro DOS v4.2
 33551                                  	;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 33552                                  	;;je	short org_file
 33553                                  	;cmp	byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 33554                                  	;je	short org_file
 33555                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 33556                                  	;je	short org_switch
 33557                                  
 33558                                  	; 03/01/2023
 33559                                  	; ds = cs
 33560                                  
 33561 0000381E 803E[5203]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 33562 00003823 745D                    	je	short get_cmt_token
 33563                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33564                                  	; 03/01/2023 - Retro DOS v4.2	
 33565 00003825 803E[5203]44            	cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 33566 0000382A 7430                    	je	short org_file
 33567 0000382C 803E[5203]49            	cmp	byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 33568 00003831 7429                    	je	short org_file
 33569 00003833 803E[5203]57            	cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 33570 00003838 7422                    	je	short org_file
 33571                                  	; 02/11/2022
 33572                                  	; 03/01/2023 - Retro DOS v4.2
 33573                                  	;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 33574                                  	;je	short org_file
 33575 0000383A 803E[5203]53                    cmp	byte [cmd_indicator],CONFIG_SHELL ; 'S'
 33576 0000383F 741B                    	je	short org_file
 33577 00003841 803E[5203]31                    cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 33578 00003846 7403                    	je	short org_switch
 33579                                  	
 33580                                  org31:
 33581 00003848 E99500                  	jmp	org4
 33582                                  
 33583                                  org_switch:
 33584 0000384B E81601                  	call	skip_comment
 33585 0000384E 7472                    	jz	short end_commd_line_brdg
 33586                                  
 33587 00003850 E8F700                  	call	get2
 33588 00003853 E8CB0A                  	call	org_delim
 33589 00003856 74F3                    	jz	short org_switch
 33590                                  
 33591 00003858 AA                      	stosb
 33592 00003859 E99300                  	jmp	org5
 33593                                  
 33594                                  org_file:			; get the filename and put 0 at end
 33595 0000385C E80501                  	call	skip_comment
 33596 0000385F 7464                    	jz	short org_put_zero
 33597                                  
 33598 00003861 E8E600                  	call	get2		; not a comment
 33599 00003864 E8B20A                  	call	delim
 33600 00003867 74F3                    	jz	short org_file	; skip the possible delimiters
 33601                                  
 33602 00003869 AA                      	stosb			; copy the first non delim char found in buffer
 33603                                  
 33604                                  org_copy_file:
 33605 0000386A E8F700                  	call	skip_comment	; comment char in the filename?
 33606 0000386D 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 33607                                  
 33608 0000386F E8D800                  	call	get2
 33609 00003872 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 33610 00003874 7457                    	je	short end_file_slash ; this will be the special case.
 33611                                  
 33612 00003876 AA                      	stosb			; save the char. in buffer
 33613 00003877 E89F0A                  	call	delim
 33614 0000387A 7459                    	jz	short end_copy_file
 33615                                  
 33616 0000387C 3C20                    	cmp	al, ' '
 33617 0000387E 77EA                    	ja	short org_copy_file ; keep copying
 33618 00003880 EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 33619                                  
 33620                                  get_cmt_token:			; get the token. just max. 2 char.
 33621 00003882 E8C500                  	call	get2
 33622 00003885 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 33623 00003887 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 33624 00003889 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 33625 0000388B 74F5                    	je	short get_cmt_token ;  character.)
 33626 0000388D 3C3D                    	cmp	al,'='		; = is special in this case.
 33627 0000388F 74F1                    	je	short get_cmt_token
 33628 00003891 3C0D                    	cmp	al,cr
 33629 00003893 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 33630 00003895 3C0A                    	cmp	al,lf
 33631 00003897 7422                    	je	short get_cmt_end
 33632                                  
 33633                                  	; 03/01/2023
 33634                                  	; ds = cs
 33635                                  	;mov	[cs:cmmt1],al	; store it
 33636                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 33637 00003899 A2[5003]                	mov	[cmmt1],al	; store it
 33638 0000389C C606[4F03]01            	mov	byte [cmmt],1	; 1 char. so far.
 33639 000038A1 E8A600                  	call	get2
 33640 000038A4 3C20                    	cmp	al,' ' ; 20h
 33641 000038A6 7413                    	je	short get_cmt_end
 33642 000038A8 3C09                    	cmp	al,tab ; 9
 33643 000038AA 740F                    	je	short get_cmt_end
 33644 000038AC 3C0D                    	cmp	al,cr  ; 0Dh
 33645 000038AE 740B                    	je	short get_cmt_end
 33646 000038B0 3C0A                    	cmp	al,lf  ; 0Ah
 33647 000038B2 740E                    	je	short end_commd_line_brdg
 33648                                  
 33649                                  	;mov	[cs:cmmt2],al
 33650                                  	;inc	byte [cs:cmmt]
 33651                                  	; 03/01/2023
 33652 000038B4 A2[5103]                	mov	[cmmt2],al
 33653 000038B7 FE06[4F03]              	inc	byte [cmmt]
 33654                                  
 33655                                  get_cmt_end:
 33656 000038BB E88C00                  	call	get2
 33657 000038BE 3C0A                    	cmp	al,lf
 33658 000038C0 75F9                    	jne	short get_cmt_end	; skip it.
 33659                                  end_commd_line_brdg: 
 33660 000038C2 E9B4FE                  	jmp	end_commd_line		; else jmp to end_commd_line
 33661                                  
 33662                                  org_put_zero:				; make the filename in front of
 33663 000038C5 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 33664 000038C9 47                      	inc	di
 33665 000038CA E9ACFE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 33666                                  
 33667                                  end_file_slash: 			; al = "/" option char.
 33668 000038CD 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 33669 000038D1 47                      	inc	di			; and
 33670 000038D2 AA                      	stosb				; store "/" after that.
 33671 000038D3 EB1A                    	jmp	short org5		; continue with the rest of the line
 33672                                  
 33673                                  end_copy_file:
 33674 000038D5 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 33675 000038DA 3C0A                    	cmp	al,lf
 33676 000038DC 74E4                    	je	short end_commd_line_brdg
 33677 000038DE EB0F                    	jmp	short org5
 33678                                  
 33679                                  org4:					; org4 skips all delimiters after the command name except for '/'
 33680 000038E0 E88100                  	call	skip_comment
 33681 000038E3 74DD                    	jz	short end_commd_line_brdg
 33682                                  
 33683 000038E5 E86200                  	call	get2
 33684 000038E8 E8360A                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 33685 000038EB 74F3                    	jz	short org4
 33686 000038ED EB08                    	jmp	short org51
 33687                                  
 33688                                  org5:					; rest of the line
 33689 000038EF E87200                  	call	skip_comment		; comment?
 33690 000038F2 74CE                    	jz	short end_commd_line_brdg
 33691 000038F4 E85300                  	call	get2			; not a comment.
 33692                                  
 33693                                  org51:
 33694 000038F7 AA                      	stosb				; copy the character
 33695 000038F8 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 33696 000038FA 743A                    	je	short at_quote
 33697 000038FC 3C20                    	cmp	al,' '  ; 20h
 33698 000038FE 77EF                    	ja	short org5
 33699                                  					; M051 - Start
 33700                                  	; 03/01/2023
 33701                                  	; ds = cs
 33702 00003900 803E[5203]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 33703                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 33704 00003905 7514                    	jne	short not_dh		; N: 
 33705 00003907 3C0A                    	cmp	al,lf			; Q: is this line feed
 33706 00003909 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 33707 0000390B 3C0D                    	cmp	al,cr			; Q: is this a cr
 33708 0000390D 75E0                    	jne	short org5		; N: 
 33709 0000390F 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 33710 00003914 AA                      	stosb				; put cr after blank
 33711 00003915 FE06[9A35]              	inc	byte [insert_blank]
 33712                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 33713                                  					; inserted
 33714 00003919 EBD4                    	jmp	short org5
 33715                                  not_dh:					; M051 - End
 33716                                  
 33717 0000391B 3C0A                    	cmp	al,lf			; line feed?
 33718 0000391D 740F                    	je	short org1_brdg		; handles the next command line.
 33719 0000391F EBCE                    	jmp	short org5		; handles next char in this line.
 33720                                  
 33721                                  org_dhlf:				; M051 - Start
 33722                                  	; 03/01/2023
 33723                                  	; ds = cs
 33724 00003921 803E[9A35]01            	cmp	byte [insert_blank],1
 33725                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 33726 00003926 7406                    	je	short org1_brdg		; Y:
 33727 00003928 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 33728 0000392D AA                      	stosb				; put lf after blank
 33729                                  					; M051 - End
 33730                                  org1_brdg:
 33731 0000392E C606[9A35]00            	mov	byte [insert_blank],0 
 33732                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 33733                                  					; M051: devicehigh
 33734 00003933 E931FE                  	jmp	org1
 33735                                  
 33736                                  at_quote:
 33737 00003936 803E[4E03]00            	cmp	byte [com_level],0
 33738                                  	;cmp	byte [cs:com_level],0
 33739 0000393B 7407                    	je	short up_level
 33740                                  	;mov	byte [cs:com_level],0	; reset it.
 33741 0000393D C606[4E03]00            	mov	byte [com_level],0
 33742 00003942 EBAB                    	jmp	short org5
 33743                                  
 33744                                  up_level:
 33745                                  	;inc	byte [cs:com_level]	; set it.
 33746 00003944 FE06[4E03]              	inc	byte [com_level]
 33747 00003948 EBA5                    	jmp	short org5
 33748                                  
 33749                                  ;----------------------------------------------------------------------------
 33750                                  ;
 33751                                  ; procedure : get2
 33752                                  ;
 33753                                  ;----------------------------------------------------------------------------
 33754                                  
 33755                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33756                                  	; (SYSINIT:33FAh)
 33757                                  
 33758                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 33759                                  	; (SYSINIT:4270h)
 33760                                  get2:
 33761 0000394A E304                    	jcxz	noget
 33762                                  	;
 33763                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33764                                  	;;lods	byte ptr es:[si]
 33765                                  	; 12/12/2022
 33766 0000394C 26                      	es	
 33767 0000394D AC                      	lodsb
 33768                                  	;mov	al, [es:si]
 33769                                  	;inc	si
 33770                                  	;
 33771 0000394E 49                      	dec	cx
 33772 0000394F C3                      	retn
 33773                                  noget:
 33774 00003950 59                      	pop	cx
 33775                                  	; 03/01/2023
 33776                                  	; ds = cs
 33777                                  	;mov	[cs:count],di ; 13/05/2019
 33778                                  	;mov	[cs:org_count],di
 33779 00003951 893E[5403]              	mov	[count],di
 33780 00003955 893E[5603]              	mov	[org_count],di
 33781 00003959 31F6                    	xor	si,si
 33782                                  	;mov	[cs:chrptr],si
 33783 0000395B 8936[5803]              	mov	[chrptr],si
 33784                                  
 33785                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33786                                  
 33787                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 33788                                  
 33789                                  ;ifndef MULTI_CONFIG
 33790                                  ;	retn
 33791                                  ;else
 33792                                  
 33793                                  ;   This was the rather kludgy way out of procedure "organize", but instead
 33794                                  ;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 33795                                  ;   and the new boot menu stuff...
 33796                                  
 33797 0000395F 89F9                    	mov     cx,di
 33798 00003961 E9E300                  	jmp     menu_check
 33799                                  
 33800                                  ;endif
 33801                                  	; 02/11/2022
 33802                                  	; 03/01/2023 - Retro DOS v4.2
 33803                                  	;retn
 33804                                  
 33805                                  ;----------------------------------------------------------------------------
 33806                                  ;
 33807                                  ; procedure : skip_comment
 33808                                  ;
 33809                                  ;skip the commented string until lf, if current es:si-> a comment string.
 33810                                  ;in) es:si-> string
 33811                                  ;	 cx -> length.
 33812                                  ;out) zero flag not set if not found a comment string.
 33813                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 33814                                  ;	  the line feed character at this moment when return.
 33815                                  ;	  ax register destroyed.
 33816                                  ;	  if found, si, cx register adjusted accordingly.
 33817                                  ;
 33818                                  ;----------------------------------------------------------------------------
 33819                                  
 33820                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 33821                                  	; (SYSINIT:428Dh)
 33822                                  
 33823                                  skip_comment:
 33824 00003964 E3EA                    	jcxz	noget		; get out of the organize routine.
 33825                                  
 33826                                  	; 03/01/2023
 33827                                  	; ds = cs	
 33828                                  
 33829 00003966 803E[4E03]00            	cmp	byte [com_level],0
 33830                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 33831 0000396B 752C                    	jne	short no_commt	 ; (not inside quotations)
 33832                                  
 33833 0000396D 803E[4F03]01            	cmp	byte [cmmt],1
 33834                                  	;cmp	byte [cs:cmmt],1
 33835 00003972 7225                    	jb	short no_commt
 33836                                  
 33837 00003974 268A04                  	mov	al,[es:si]
 33838                                  	
 33839 00003977 3806[5003]              	cmp	[cmmt1],al
 33840                                  	;cmp	[cs:cmmt1],al
 33841 0000397B 751C                    	jne	short no_commt
 33842                                  
 33843 0000397D 803E[4F03]02            	cmp	byte [cmmt],2
 33844                                  	;cmp	byte [cs:cmmt],2
 33845 00003982 750A                    	jne	short skip_cmmt
 33846                                  
 33847 00003984 268A4401                	mov	al,[es:si+1]
 33848                                  	
 33849 00003988 3806[5103]              	cmp	[cmmt2],al
 33850                                  	;cmp	[cs:cmmt2],al
 33851 0000398C 750B                    	jne	short no_commt
 33852                                  skip_cmmt:
 33853 0000398E E3C0                    	jcxz	noget		; get out of organize routine.
 33854 00003990 268A04                  	mov	al,[es:si]
 33855 00003993 46                      	inc	si
 33856 00003994 49                      	dec	cx
 33857 00003995 3C0A                    	cmp	al,lf		; line feed?
 33858 00003997 75F5                    	jne	short skip_cmmt
 33859                                  no_commt:
 33860 00003999 C3                      	retn
 33861                                  
 33862                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33863                                  ; (SYSINIT:42C8h)
 33864                                  
 33865                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33866                                  ;%if 0
 33867                                  
 33868                                  ;ifdef	MULTI_CONFIG
 33869                                  
 33870                                  ;----------------------------------------------------------------------------
 33871                                  ;
 33872                                  ;   kbd_read: wait for keystroke
 33873                                  ;
 33874                                  ;   INPUT
 33875                                  ;       DS == CS == sysinitseg
 33876                                  ;
 33877                                  ;   OUTPUT
 33878                                  ;       Carry SET to clean boot, CLEAR otherwise
 33879                                  ;
 33880                                  ;   OTHER REGS USED
 33881                                  ;       All
 33882                                  ;
 33883                                  ;   HISTORY
 33884                                  ;       Created 16-Nov-1992 by JeffPar
 33885                                  ;
 33886                                  ;----------------------------------------------------------------------------
 33887                                  
 33888                                  kbd_read:
 33889 0000399A F606[5748]02                    test    byte [bDisableUI],2
 33890 0000399F 7520                            jnz     short kbd_nodelay
 33891                                  
 33892 000039A1 1E                              push    ds              ; the bios timer tick count is incremented
 33893 000039A2 29C0                            sub     ax,ax           ; 18.2 times per second;
 33894 000039A4 8ED8                            mov     ds,ax           ; watch the timer tick count for 37 transitions
 33895                                  	;mov	dx,[046Ch]	; get initial value
 33896                                  kbd_loop:
 33897 000039A6 B401                            mov     ah,1            ;
 33898 000039A8 CD16                            int     16h             ; peek the keyboard
 33899 000039AA 7514                            jnz	short kbd_loopdone ; something's there, get out
 33900 000039AC B402                            mov     ah,2            ; peek the shift states
 33901 000039AE CD16                            int     16h             ;
 33902 000039B0 A803                            test    al,03h          ; either right or left shift key bits set?
 33903 000039B2 750C                            jnz	short kbd_loopdone ; yes
 33904 000039B4 A16C04                          mov     ax,[046Ch]	;
 33905                                  	;sub	ax,dx           ; get difference
 33906                                  	; 15/04/2019 - Retro DOS v4.0
 33907 000039B7 2E2B06[8403]            	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 33908                                  
 33909 000039BC 3C25                    	cmp     al,37           ; reached limit?  ; (2 seconds)
 33910 000039BE 72E6                            jb	short kbd_loop	; not yet
 33911                                  kbd_loopdone:
 33912 000039C0 1F                              pop     ds              ; delay complete!
 33913                                  kbd_nodelay:
 33914 000039C1 29DB                            sub     bx,bx           ; assume clean boot
 33915 000039C3 B402                            mov     ah,2            ; peek the shift states
 33916 000039C5 CD16                            int     16h             ;
 33917 000039C7 A803                            test    al,03h          ; either right or left shift key bits set?
 33918 000039C9 7407                            jz      short kbd_notshift ; no
 33919 000039CB 43                              inc     bx              ; yes
 33920 000039CC 43                              inc     bx
 33921                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 33922 000039CD 800E[5B48]04            	or	byte [bQueryOpt],4
 33923                                  kbd_notshift:                   ;
 33924 000039D2 B401                            mov     ah,1            ; peek the keyboard
 33925 000039D4 CD16                            int     16h             ;
 33926 000039D6 743E                            jz	short kbd_test	; no key present
 33927 000039D8 08C0                            or      al,al           ; is it a function key?
 33928 000039DA 753A                            jnz	short kbd_test	; no
 33929                                  
 33930                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 33931 000039DC 80FC62                          cmp     ah,62h          ; CTRL F5
 33932 000039DF 7405                            je	short kbd_cfg_bypass
 33933                                  	
 33934 000039E1 80FC3F                          cmp     ah,3Fh          ; F5 function key?
 33935 000039E4 750D                            jne	short kbd_notf5	; no
 33936                                  kbd_cfg_bypass:
 33937 000039E6 BA[EF4C]                        mov     dx,_$CleanMsg
 33938 000039E9 E83D0C                          call    print
 33939                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 33940 000039EC 800E[5B48]04            	or	byte [bQueryOpt],4 
 33941 000039F1 EB16                            jmp     short kbd_eat   ; yes, clean boot selected
 33942                                  kbd_notf5:
 33943                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 33944 000039F3 80FC65                          cmp     ah,65h          ; CTRL F8
 33945 000039F6 7405                            je	short kbd_cfg_confirm
 33946                                  
 33947 000039F8 80FC42                          cmp     ah,42h          ; F8 function key?
 33948 000039FB 7523                            jne	short kbd_exit	; no
 33949                                  kbd_cfg_confirm:
 33950 000039FD BA[2D4D]                        mov     dx,_$InterMsg
 33951 00003A00 E8260C                          call    print           ;
 33952 00003A03 B301                            mov     bl,1            ; yes, interactive-boot option enabled
 33953 00003A05 881E[5B48]                      mov     [bQueryOpt],bl  ; change default setting
 33954                                  kbd_eat:                        ;
 33955 00003A09 B400                            mov     ah,0            ;
 33956 00003A0B CD16                            int     16h             ; eat the key we assumed was a signal
 33957 00003A0D C606[6148]FF                    mov	byte [secElapsed],-1
 33958 00003A12 09DB                            or      bx,bx           ;
 33959 00003A14 7405                            jz	short kbd_clean	;
 33960                                  kbd_test:                       ;
 33961 00003A16 80FB02                          cmp     bl,2            ;
 33962 00003A19 7205                            jb	short kbd_exit	;
 33963                                  kbd_clean:                      ;
 33964 00003A1B E88808                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 33965 00003A1E F9                              stc                     ; set carry to indicate abort
 33966 00003A1F C3                              retn			;
 33967                                  kbd_exit:                       ;
 33968 00003A20 F8                              clc                     ; clear carry to indicate success
 33969 00003A21 C3                              retn			;
 33970                                  
 33971                                  ;----------------------------------------------------------------------------
 33972                                  ;
 33973                                  ;   set_numlock: set numlock LED
 33974                                  ;
 33975                                  ;   INPUT
 33976                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 33977                                  ;
 33978                                  ;   OUTPUT
 33979                                  ;       None
 33980                                  ;
 33981                                  ;   OTHER REGS USED
 33982                                  ;       None
 33983                                  ;
 33984                                  ;   HISTORY
 33985                                  ;       Created 16-Nov-1992 by JeffPar
 33986                                  ;
 33987                                  ;----------------------------------------------------------------------------
 33988                                  
 33989                                  	; 04/01/2023 - Retro DOS v4.2
 33990                                  
 33991                                  set_numlock:
 33992                                          ; 04/01/2023
 33993                                  	;push	ax
 33994 00003A22 1E                              push    ds
 33995 00003A23 29C0                            sub     ax,ax
 33996 00003A25 8ED8                            mov     ds,ax
 33997 00003A27 268B04                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 33998 00003A2A 2E3B06[CA4C]                    cmp     ax,[cs:OnOff+2]	; should we turn it off?
 33999 00003A2F 7507                            jne	short not_off	; no
 34000 00003A31 80261704DF                      and     byte [0417h],~20h ; 0DFh
 34001 00003A36 EB0D                            jmp     short set_done
 34002                                  not_off:
 34003 00003A38 2E3B06[C84C]                    cmp     ax,[cs:OnOff]	; should we turn it on?
 34004 00003A3D F9                              stc
 34005 00003A3E 7505                            jne	short set_done	; no
 34006 00003A40 800E170420                      or      byte [0417h],20h
 34007                                  set_done:
 34008 00003A45 1F                              pop     ds
 34009                                  	; 04/01/2023
 34010                                  	;pop	ax
 34011 00003A46 C3                              retn
 34012                                  
 34013                                  ; 16/04/2019 - Retro DOS v4.0
 34014                                  
 34015                                  ;----------------------------------------------------------------------------
 34016                                  ;
 34017                                  ;   menu_check:  check for presence of menu (and other) configuration blocks
 34018                                  ;
 34019                                  ;   INPUT
 34020                                  ;       CX == "organized" config.sys memory image length
 34021                                  ;    ES:SI -> "organized" config.sys memory image
 34022                                  ;       DS == CS == sysinitseg
 34023                                  ;
 34024                                  ;   OUTPUT
 34025                                  ;       Same as above; the idea is that menu_check simply transforms
 34026                                  ;       a block-structured config.sys image into a conventional image,
 34027                                  ;       based on the user's block selection and any other boot-time options
 34028                                  ;       the user may have employed...
 34029                                  ;
 34030                                  ;   OTHER REGS USED
 34031                                  ;       All
 34032                                  ;
 34033                                  ;   NOTES
 34034                                  ;       [count] and [org_count] are set to the new config.sys image length
 34035                                  ;
 34036                                  ;   HISTORY
 34037                                  ;       Created 16-Mar-1992 by JeffPar
 34038                                  ;
 34039                                  ;----------------------------------------------------------------------------
 34040                                  
 34041                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 34042                                  	; (SYSINIT:4378h)
 34043                                  
 34044                                  menu_check:
 34045                                  
 34046                                  ;   Search for SWITCHES, determine if /N or /F are present; if so, then
 34047                                  ;   disable clean/interactive boot options
 34048                                  
 34049 00003A47 51                              push    cx              ;
 34050 00003A48 56                              push    si              ;
 34051 00003A49 29DB                            sub     bx,bx           ; remains ZERO until first block
 34052                                  swchk_loop:                     ;
 34053 00003A4B E84E07                          call    get_char        ; get first char of current line
 34054 00003A4E 724C                            jc	short swchk_end	; hit eof
 34055 00003A50 3C5B                            cmp     al,CONFIG_BEGIN ; '['
 34056 00003A52 7503                            jne	short swchk_next1 ;
 34057 00003A54 43                              inc     bx              ; remember that we've seen a block
 34058 00003A55 EB40                            jmp     short swchk_nextline
 34059                                  swchk_next1:                    ;
 34060 00003A57 3C4E                            cmp     al,CONFIG_NUMLOCK
 34061 00003A59 750E                            jne	short swchk_next2 ;
 34062 00003A5B 09DB                            or      bx,bx           ; only do NUMLOCK commands that exist
 34063 00003A5D 7538                            jnz	short swchk_nextline ; before the first block
 34064 00003A5F E8C0FF                          call    set_numlock     ; REM it out so we don't act on it later, too
 34065 00003A62 26C644FF30                      mov     byte [es:si-1],CONFIG_REM
 34066 00003A67 EB2E                            jmp     short swchk_nextline
 34067                                  swchk_next2:                    ;
 34068 00003A69 3C31                            cmp     al,CONFIG_SWITCHES
 34069 00003A6B 752A                            jne	short swchk_nextline ; this line ain't it
 34070                                  swchk_scan:                     ;
 34071 00003A6D E82C07                          call    get_char        ; look for /N or /F
 34072                                  swchk_scan1:                    ;
 34073 00003A70 3C0A                            cmp     al,LF           ; end of line?
 34074 00003A72 7423                            je	short swchk_nextline ; yes
 34075 00003A74 3C2F                            cmp     al,'/'          ; switch-char?
 34076 00003A76 75F5                            jne	short swchk_scan ; no
 34077 00003A78 E82107                          call    get_char        ;
 34078 00003A7B 24DF                            and     al,~20h ; 0DFh	; convert to upper case
 34079 00003A7D 3A06[491F]                      cmp     al,[swit_n+1]
 34080 00003A81 7507                            jne	short swchk_scan2 ; no
 34081 00003A83 800E[5748]01                    or      byte [bDisableUI],1
 34082 00003A88 EBE3                            jmp	short swchk_scan ; continue looking for switches of interest
 34083                                  swchk_scan2:                    ;
 34084 00003A8A 3A06[551F]                      cmp     al,[swit_f+1]
 34085 00003A8E 75E0                            jne	short swchk_scan1 ; no
 34086 00003A90 800E[5748]02                    or      byte [bDisableUI],2
 34087 00003A95 EBD6                            jmp     short swchk_scan ; continue looking for switches of interest
 34088                                  swchk_nextline:                 ;
 34089 00003A97 E8D306                          call    skip_opt_line   ;
 34090 00003A9A EBAF                            jmp     short swchk_loop ;
 34091                                  swchk_end:                      ;
 34092 00003A9C 5E                              pop     si              ;
 34093 00003A9D 59                              pop     cx              ;
 34094                                  
 34095                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 34096                                  ;   the DisableUI flag is still clear
 34097                                  
 34098 00003A9E F606[5748]01                    test    byte [bDisableUI],1
 34099 00003AA3 7508                            jnz	short menu_search
 34100                                  ;
 34101                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 34102                                  ;   there is anything at all in the keyboard buffer
 34103                                  ;
 34104 00003AA5 E8F2FE                          call    kbd_read
 34105 00003AA8 7303                            jnc	short menu_search
 34106 00003AAA E9F901                          jmp	menu_abort
 34107                                  
 34108                                  ;   Search for MENU block; it is allowed to be anywhere in config.sys
 34109                                  
 34110                                  menu_search:
 34111 00003AAD 29DB                            sub     bx,bx           ; if no MENU, default to zero for no_selection
 34112 00003AAF BF[9C48]                        mov     di,szMenu	;
 34113 00003AB2 E81B04                          call    find_block      ; find the MENU block
 34114 00003AB5 7340                            jnc	short menu_found ;
 34115 00003AB7 C606[9448]00                    mov     byte [szBoot],0
 34116 00003ABC E91702                          jmp	no_selection ; not found
 34117                                  
 34118                                  ;   Process the requested menu color(s)
 34119                                  
 34120                                  menu_color:
 34121 00003ABF 51                              push    cx              ;
 34122 00003AC0 52                              push    dx              ;
 34123 00003AC1 BA0700                          mov     dx,0007h        ; default color setting
 34124 00003AC4 E8B406                          call    get_number	; get first number
 34125 00003AC7 80E30F                          and     bl,0Fh		; first # is foreground color (for low nibble)
 34126 00003ACA 88DD                            mov     ch,bl           ; save it in CH
 34127 00003ACC 80E2F0                          and     dl,0F0h         ;
 34128 00003ACF 08DA                            or      dl,bl           ;
 34129 00003AD1 E84508                          call    delim           ; did we hit a delimiter
 34130 00003AD4 7511                            jne	short check_color ; no, all done
 34131 00003AD6 E8A206                          call    get_number	; get next number
 34132 00003AD9 80E30F                          and     bl,0Fh		; second # is background color (for high nibble)
 34133 00003ADC 88DE                            mov     dh,bl           ; save it in DH
 34134 00003ADE 80E20F                          and     dl,0Fh		;
 34135 00003AE1 B104                            mov     cl,4            ;
 34136 00003AE3 D2E3                            shl     bl,cl           ;
 34137 00003AE5 08DA                            or      dl,bl           ;
 34138                                  check_color:                    ;
 34139 00003AE7 38F5                            cmp     ch,dh           ; are foreground/background the same?
 34140 00003AE9 7503                            jne	short set_color	; no
 34141 00003AEB 80F208                          xor     dl,08h          ; yes, so modify the fgnd intensity
 34142                                  set_color:
 34143 00003AEE 8816[5248]                      mov     [bMenuColor],dl ;
 34144 00003AF2 5A                              pop     dx              ;
 34145 00003AF3 59                              pop     cx              ;
 34146 00003AF4 E9AB00                          jmp	menu_nextitem
 34147                                  
 34148                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 34149                                  ;   above is there simply to alleviate short jump problems)
 34150                                  
 34151                                  menu_found:
 34152 00003AF7 C606[5C48]01                    mov     byte [bDefBlock],1
 34153 00003AFC C706[5E48]0000                  mov     word [offDefBlock],0
 34154 00003B02 C606[6048]FF                    mov     byte [secTimeOut],-1
 34155 00003B07 8026[5B48]FD                    and     byte [bQueryOpt],~2 ; 0FDh
 34156                                  
 34157 00003B0C E85E06                          call    skip_opt_line   ; skip to next line
 34158 00003B0F 29D2                            sub     dx,dx           ; initialize total block count (0 => none yet)
 34159                                  
 34160                                  ;   Process the menu block now
 34161                                  
 34162                                  menu_process:
 34163 00003B11 E88806                          call    get_char        ; get first char of current line
 34164 00003B14 722E                            jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 34165 00003B16 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34166 00003B18 3C5B                            cmp     al,CONFIG_BEGIN ; BEGIN implies END
 34167 00003B1A 7428                            je	short to_menu_getdefault
 34168 00003B1C 3C4F                            cmp     al,CONFIG_SUBMENU
 34169 00003B1E 744D                            je	short menu_item	; go process sub-menu
 34170 00003B20 3C45                            cmp     al,CONFIG_MENUITEM
 34171 00003B22 7449                            je	short menu_item	; go process menu item
 34172 00003B24 3C41                            cmp     al,CONFIG_MENUDEFAULT
 34173 00003B26 741E                            je	short menu_default ; go process menu default
 34174 00003B28 3C52                            cmp     al,CONFIG_MENUCOLOR
 34175 00003B2A 7493                            je	short menu_color ; go process menu color
 34176 00003B2C 3C4E                            cmp     al,CONFIG_NUMLOCK
 34177 00003B2E 740F                            je	short menu_numlock ;
 34178 00003B30 3C30                            cmp     al,CONFIG_REM   ; allow remarks in menu block
 34179 00003B32 746E                            je	short menu_nextitem ;
 34180 00003B34 E8D207                          call    any_delim       ; allow blank lines and such
 34181 00003B37 7469                            je	short menu_nextitem ;
 34182 00003B39 F9                              stc                     ;
 34183 00003B3A E83507                          call    print_error     ; non-MENU command!
 34184 00003B3D EB63                            jmp     short menu_nextitem
 34185                                  menu_numlock:
 34186 00003B3F E8E0FE                          call    set_numlock
 34187 00003B42 EB5E                            jmp     short menu_nextitem
 34188                                  to_menu_getdefault:
 34189 00003B44 EB62                            jmp     short menu_getdefault
 34190                                  
 34191                                  ;   Save the offset of the default block name, we'll need it later
 34192                                  
 34193                                  menu_default:
 34194 00003B46 8936[5E48]                      mov     [offDefBlock],si; save address of default block name
 34195 00003B4A 803E[6148]00                    cmp     byte [secElapsed],0
 34196 00003B4F 751A                            jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 34197 00003B51 E8F405                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 34198 00003B54 724C                            jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 34199 00003B56 E80506                          call    skip_delim      ; something is typed
 34200 00003B59 7247                            jc	short menu_nextitem ;
 34201 00003B5B 89DE                            mov     si,bx           ;
 34202 00003B5D E81B06                          call    get_number      ; get number (of seconds for timeout)
 34203 00003B60 80FB5A                          cmp     bl,90           ; limit it to a reasonable number
 34204 00003B63 7202                            jb	short timeout_ok ; (besides, 99 is the largest # my simple
 34205 00003B65 B35A                            mov     bl,90           ;  display function can handle)
 34206                                  timeout_ok:                     ;
 34207 00003B67 881E[6048]                      mov     [secTimeOut],bl ;
 34208                                  timeout_skip:
 34209 00003B6B EB35                            jmp     short menu_nextitem
 34210                                  
 34211                                  ;   Verify that this is a valid menu item by searching for the named block
 34212                                  
 34213                                  menu_item:
 34214                                  	;cmp	dl,9	; 04/01/2023
 34215 00003B6D 80FA09                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 34216 00003B70 7330                            jae	short menu_nextitem ;
 34217 00003B72 89F7                            mov     di,si           ; DS:DI -> block name to search for
 34218 00003B74 E84003                          call    srch_block      ;
 34219 00003B77 7406                            je	short menu_itemfound ;
 34220 00003B79 F9                              stc                     ;
 34221 00003B7A E8F506                          call    print_error     ; print error and pause
 34222 00003B7D EB23                            jmp     short menu_nextitem ; if not found, ignore this menu item
 34223                                  
 34224                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 34225                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 34226                                  ;   and CX are unmodified
 34227                                  
 34228                                  menu_itemfound:
 34229 00003B7F 42                              inc     dx              ; otherwise, increment total block count
 34230 00003B80 89D3                            mov     bx,dx           ; and use it to index the arrays of offsets
 34231 00003B82 8887[6248]                      mov	[abBlockType+bx],al
 34232 00003B86 01DB                            add     bx,bx           ; of recorded block names and descriptions
 34233                                  
 34234                                  ;   There should be a description immediately following the block name on
 34235                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 34236                                  ;   description...
 34237                                  
 34238 00003B88 89B7[6C48]                      mov     [aoffBlockName+bx],si
 34239 00003B8C 89B7[8048]                      mov     [aoffBlockDesc+bx],si
 34240 00003B90 89DF                            mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 34241 00003B92 E8B305                          call    skip_token      ;
 34242 00003B95 720B                            jc	short menu_nextitem ; hit eol/eof
 34243 00003B97 E8C405                          call    skip_delim      ;
 34244 00003B9A 7206                            jc	short menu_nextitem ; hit eol/eof
 34245 00003B9C 87DF                            xchg    bx,di           ;
 34246 00003B9E 89BF[8048]                      mov     [aoffBlockDesc+bx],di
 34247                                  
 34248                                  menu_nextitem:
 34249 00003BA2 E8C805                          call    skip_opt_line   ;
 34250 00003BA5 E969FF                          jmp     menu_process    ; go back for more lines
 34251                                  
 34252                                  ;   Display menu items now, after determining which one is default
 34253                                  
 34254                                  menu_getdefault:
 34255 00003BA8 08D2                            or      dl,dl           ; where there any valid blocks at all?
 34256 00003BAA 7505                            jnz	short menu_valid ; yes
 34257 00003BAC 29DB                            sub     bx,bx           ; no, so force autoselect of 0
 34258 00003BAE E9ED00                          jmp     menu_autoselect ; (meaning: process common blocks only)
 34259                                  menu_valid:
 34260 00003BB1 29DB                            sub     bx,bx           ;
 34261 00003BB3 8816[5D48]                      mov     [bMaxBlock],dl  ; first, record how many blocks we found
 34262 00003BB7 8B3E[5E48]                      mov     di,[offDefBlock];
 34263 00003BBB 09FF                            or      di,di           ; does a default block exist?
 34264 00003BBD 741C                            jz	short menu_nodefault ; no
 34265 00003BBF 43                              inc     bx              ; yes, walk name table, looking for default
 34266                                  menu_chkdefault:
 34267 00003BC0 53                              push    bx              ;
 34268 00003BC1 01DB                            add     bx,bx           ;
 34269 00003BC3 8BB7[6C48]                      mov     si,[aoffBlockName+bx]
 34270 00003BC7 B98000                          mov     cx,128          ; arbitrary maximum length of a name
 34271 00003BCA 1E                              push    ds              ;
 34272 00003BCB 06                              push    es              ;
 34273 00003BCC 1F                              pop     ds              ;
 34274 00003BCD E82703                          call    comp_names      ; is this block the same as the default?
 34275 00003BD0 1F                              pop     ds              ;
 34276 00003BD1 5B                              pop     bx              ;
 34277 00003BD2 7409                            je	short menu_setdefault ; yes
 34278 00003BD4 43                              inc     bx              ;
 34279 00003BD5 3A1E[5D48]                      cmp     bl,[bMaxBlock]  ; all done searching?
 34280 00003BD9 76E5                            jbe	short menu_chkdefault ; not yet
 34281                                  menu_nodefault:
 34282 00003BDB B301                            mov     bl,1            ; if no default, force default to #1
 34283                                  menu_setdefault:
 34284 00003BDD 881E[5C48]                      mov     [bDefBlock],bl  ; yes, this will be the initial current block
 34285                                  
 34286                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 34287                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 34288                                  ;   supposed to skip menu display and run with the specified default block;
 34289                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 34290                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 34291                                  ;   with no timeout)
 34292                                  
 34293 00003BE1 803E[6048]00                    cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 34294 00003BE6 750A                            jne	short menu_display ; no
 34295 00003BE8 F606[5B48]01                    test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 34296 00003BED 7503                            jnz	short menu_display ; yes, so *don't* assume default after all
 34297 00003BEF E9C700                          jmp     not_topmenu	;
 34298                                  
 34299                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 34300                                  
 34301                                  menu_display:
 34302 00003BF2 B40F                            mov     ah,0Fh          ; get current video mode
 34303 00003BF4 CD10                            int     10h             ;
 34304 00003BF6 B400                            mov     ah,00h          ; just re-select that mode
 34305 00003BF8 CD10                            int     10h             ;
 34306 00003BFA 06                              push    es              ;
 34307 00003BFB B84000                          mov     ax,40h          ; reach down into the ROM BIOS data area
 34308 00003BFE 8EC0                            mov     es,ax           ; and save the current (default) video page
 34309 00003C00 26A14E00                        mov     ax,[es:004Eh]   ; start address and page #, in case the
 34310 00003C04 A3[5948]                        mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 34311 00003C07 26A06200                        mov     al,[es:0062h]   ;
 34312 00003C0B A2[5848]                        mov     [bCRTPage],al   ;
 34313 00003C0E A1[5348]                        mov     ax,[bMenuPage]	; select new page for menu
 34314 00003C11 CD10                            int     10h             ;
 34315 00003C13 B80006                          mov     ax,0600h        ; clear entire screen
 34316 00003C16 8A3E[5248]                      mov     bh,[bMenuColor] ; using this color
 34317 00003C1A 29C9                            sub     cx,cx           ; upper left row/col
 34318                                          ;mov	dl,[es:CRT_Cols] 
 34319 00003C1C 268A164A00                      mov	dl,[es:4Ah]
 34320 00003C21 FECA                    	dec     dl              ;
 34321                                          ;mov	dh,[es:CRT_Rows];
 34322 00003C23 268A368400                      mov	dh,[es:84h]
 34323 00003C28 08F6                    	or      dh,dh           ; # of rows valid?
 34324 00003C2A 7504                            jnz	short menu_clear ; hopefully
 34325 00003C2C 8A36[5648]                      mov     dh,[bLastRow]   ; no, use a default
 34326                                  menu_clear:
 34327 00003C30 CD10                            int     10h             ; clear the screen using the req. attribute
 34328 00003C32 07                              pop     es              ;
 34329 00003C33 8836[5648]                      mov     [bLastRow],dh   ; save DH
 34330 00003C37 BA[6A4D]                        mov     dx,_$MenuHeader
 34331 00003C3A E8EC09                          call    print           ; cursor now on row 3 (numbered from 0)
 34332                                  
 34333 00003C3D F606[5748]01                    test    byte [bDisableUI],1
 34334 00003C42 751F                            jnz     short menu_nostatus
 34335 00003C44 8A3E[5348]                      mov     bh,[bMenuPage]  ;
 34336 00003C48 8A36[5648]                      mov     dh,[bLastRow]   ; restore DH
 34337 00003C4C B200                            mov     dl,0            ; print the status line on row DH, col 0,
 34338 00003C4E B402                            mov     ah,02h          ; now that we can trash the cursor position
 34339 00003C50 CD10                            int     10h             ;
 34340 00003C52 BA[B64D]                        mov     dx,_$StatusLine
 34341 00003C55 E8D109                          call    print           ;
 34342 00003C58 B403                            mov     ah,3            ; get cursor position
 34343 00003C5A CD10                            int     10h             ;
 34344 00003C5C 80EA02                          sub     dl,2            ;
 34345 00003C5F 8816[5548]                      mov     [bLastCol],dl   ; save column where status char will go
 34346                                  
 34347                                  menu_nostatus:
 34348 00003C63 BB0100                          mov     bx,1            ; now prepare to display all the menu items
 34349                                  menu_disploop:
 34350 00003C66 E8BD02                          call    print_item	; print item #BL
 34351 00003C69 43                              inc     bx              ; why "inc bx"?  because it's a 1-byte opcode
 34352 00003C6A 3A1E[5D48]                      cmp     bl,[bMaxBlock]  ; all done?
 34353 00003C6E 76F6                            jbe	short menu_disploop ; not yet
 34354                                  
 34355                                  ;   Set cursor position to just below the menu items
 34356                                  
 34357 00003C70 B200                            mov     dl,0            ; select column
 34358 00003C72 88DE                            mov     dh,bl           ;
 34359 00003C74 80C604                          add     dh,4            ; select row below menu
 34360 00003C77 8A3E[5348]                      mov     bh,[bMenuPage]  ;
 34361 00003C7B B402                            mov     ah,02h          ; set cursor position beneath the block list
 34362 00003C7D CD10                            int     10h             ;
 34363                                  
 34364 00003C7F BA[A34D]                        mov     dx,_$MenuPrmpt
 34365 00003C82 E8A409                          call    print           ;
 34366 00003C85 E83603                          call    select_item     ; make a selection, return # in BX
 34367 00003C88 BA[764B]                        mov     dx,crlfm	
 34368 00003C8B E89B09                          call    print           ;
 34369 00003C8E FF36[5748]                      push    word [bDisableUI]
 34370 00003C92 800E[5748]01                    or      byte [bDisableUI],1
 34371 00003C97 E86F04                          call    show_status     ; clear the status line now
 34372 00003C9A 8F06[5748]                      pop     word [bDisableUI]
 34373                                  
 34374                                  ;   Now begins the "re-organization" process...
 34375                                  
 34376                                  menu_autoselect:
 34377 00003C9E 83FBFF                          cmp     bx,-1           ; clean boot requested?
 34378 00003CA1 7508                            jne	short normal_boot ; no
 34379 00003CA3 E80006                          call    disable_autoexec; basically, add a /D to the command.com line
 34380                                  menu_abort:
 34381 00003CA6 29C9                            sub     cx,cx           ; then immediately exit with 0 config.sys image
 34382 00003CA8 E9EE00                          jmp	menu_exit	;
 34383                                  
 34384                                  normal_boot:
 34385 00003CAB 83FBFE                          cmp     bx,-2           ; back to top-level menu?
 34386 00003CAE 7509                            jne	short not_topmenu ; no
 34387 00003CB0 8B0E[5403]                      mov     cx,[count]      ; yes, start all over
 34388 00003CB4 29F6                            sub     si,si           ;
 34389 00003CB6 E9F4FD                          jmp     menu_search
 34390                                  
 34391                                  not_topmenu:
 34392 00003CB9 80BF[6248]4F                    cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 34393 00003CBE 7510                            jne	short not_submenu
 34394 00003CC0 01DB                            add     bx,bx           ;
 34395 00003CC2 8BBF[6C48]                      mov     di,[aoffBlockName+bx]
 34396 00003CC6 E8EE01                          call    srch_block      ; THIS CANNOT FAIL!
 34397 00003CC9 89FE                            mov     si,di           ;
 34398 00003CCB 89D9                            mov     cx,bx           ; ES:SI and CX are ready for another round
 34399 00003CCD E927FE                          jmp     menu_found
 34400                                  
 34401                                  not_submenu:
 34402 00003CD0 01DB                            add     bx,bx           ; get BX -> name of selected block
 34403 00003CD2 8B9F[6C48]                      mov     bx,[aoffBlockName+bx]
 34404                                  
 34405                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 34406                                  ;   the offset relative to ES of the block name to be processed (along with
 34407                                  ;   all the "common" lines of course)
 34408                                  
 34409                                  no_selection:
 34410 00003CD6 891E[5E48]                      mov     [offDefBlock],bx; save selection
 34411 00003CDA 8B0E[5403]                      mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 34412 00003CDE 29F6                            sub     si,si           ;
 34413 00003CE0 1E                              push    ds              ;
 34414 00003CE1 8E1E[DD14]                      mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 34415 00003CE5 29FF                            sub     di,di           ;
 34416                                  
 34417                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 34418                                  ;
 34419                                  ;   Work our way through the config.sys image again, this time copying
 34420                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 34421                                  ;   within the requested block. Lines inside INCLUDEd blocks are transparently
 34422                                  ;   copied by copy_block in a recursive fashion; the amount of recursion is
 34423                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 34424                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 34425                                  ;
 34426                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 34427                                  ;   stack we're running on, then we should check it inside copy_block
 34428                                  
 34429                                  copyblock_loop:
 34430 00003CE7 53                              push    bx              ; save selected block name
 34431 00003CE8 E83C01                          call    copy_block      ; process (named or common) block
 34432 00003CEB 5B                              pop     bx              ;
 34433 00003CEC 723C                            jc	short move_config ; hit eof
 34434                                  
 34435                                  ;   copy_block can only return for two reasons: it hit eof or a new block
 34436                                  
 34437                                  copyblock_begin:
 34438 00003CEE 50                              push    ax              ;
 34439 00003CEF 51                              push    cx              ;
 34440 00003CF0 56                              push    si              ;
 34441 00003CF1 57                              push    di              ; always do "common" blocks
 34442 00003CF2 BF[A148]                        mov     di,szCommon
 34443 00003CF5 1E                              push    ds              ;
 34444 00003CF6 0E                              push    cs              ;
 34445 00003CF7 1F                              pop     ds              ;
 34446 00003CF8 E8FC01                          call    comp_names      ;
 34447 00003CFB 1F                              pop     ds              ;
 34448 00003CFC 5F                              pop     di              ;
 34449 00003CFD 5E                              pop     si              ;
 34450 00003CFE 59                              pop     cx              ;
 34451 00003CFF 58                              pop     ax              ;
 34452 00003D00 740F                            je	short copyblock_check
 34453 00003D02 09DB                            or      bx,bx           ; is there a block name to check?
 34454 00003D04 7414                            jz	short copyblock_skip ; no
 34455 00003D06 57                              push    di              ;
 34456 00003D07 89DF                            mov     di,bx           ; check block against given block name
 34457 00003D09 1E                              push    ds              ;
 34458 00003D0A 06                              push    es              ;
 34459 00003D0B 1F                              pop     ds              ;
 34460 00003D0C E8E801                          call    comp_names      ; is this the block we really want to do?
 34461 00003D0F 1F                              pop     ds              ;
 34462 00003D10 5F                              pop     di              ;
 34463                                  copyblock_check:
 34464 00003D11 7217                            jc	short move_config ; hit eof
 34465 00003D13 7505                            jne	short copyblock_skip  ;
 34466 00003D15 E85504                          call    skip_opt_line   ;
 34467 00003D18 EBCD                            jmp	short copyblock_loop 
 34468                                  
 34469                                  copyblock_skip:                 ;
 34470 00003D1A E85004                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 34471 00003D1D E87C04                          call    get_char        ;
 34472 00003D20 7208                            jc	short move_config ; hit eof
 34473 00003D22 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34474 00003D24 3C5B                            cmp     al,CONFIG_BEGIN ;
 34475 00003D26 74C6                            je	short copyblock_begin
 34476 00003D28 EBF0                            jmp     short copyblock_skip ; anything else is just skipped
 34477                                  ;
 34478                                  ;   To create as little risk to the rest of SysInit as little as possible,
 34479                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 34480                                  ;   copy the new config.sys image to "confbot"
 34481                                  ;
 34482                                  move_config:
 34483 00003D2A 89F9                            mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 34484 00003D2C 51                              push    cx              ;
 34485                                  ;
 34486                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 34487                                  ;   since the configuration name only currently exists in the "confbot" area
 34488                                  ;
 34489                                   	;mov	cx,7
 34490 00003D2D B90700                  	mov     cx,szMenu-szBoot-1
 34491 00003D30 BE[9448]                        mov     si,szBoot	; first copy the CONFIG= part
 34492 00003D33 47                              inc     di              ; skip a byte, in case absolutely nothing
 34493                                                                  ; was copied to the workspace, because we always
 34494                                                                  ; zero the first byte of the workspace (below)
 34495                                  copy_boot: 
 34496                                  	;lods    byte ptr cs:[si];
 34497 00003D34 2E                              cs
 34498 00003D35 AC                      	lodsb
 34499 00003D36 8805                    	mov     [di],al         ;
 34500 00003D38 47                              inc     di              ;
 34501 00003D39 E2F9                            loop    copy_boot       ;
 34502                                  
 34503 00003D3B 06                              push    es              ; then copy the configuration name
 34504                                          ;mov	cx,128-7	; put an upper limit on the name, to be safe
 34505                                  	; 04/01/2023
 34506 00003D3C B179                    	mov	cl,128-7
 34507 00003D3E 2E8B36[5E48]            	mov     si,[cs:offDefBlock]; ES:SI -> default block name
 34508 00003D43 09F6                            or      si,si           ; valid?
 34509 00003D45 7505                            jnz	short l1	; yes
 34510 00003D47 0E                              push    cs              ;
 34511 00003D48 07                              pop     es              ;
 34512 00003D49 BE[A148]                        mov     si,szCommon
 34513 00003D4C 268A04                  l1:     mov     al,[es:si]      ;
 34514 00003D4F E8B705                          call    any_delim       ;
 34515 00003D52 7406                            je	short l2	;
 34516 00003D54 8805                            mov     [di],al         ;
 34517 00003D56 46                              inc     si              ;
 34518 00003D57 47                              inc     di              ;
 34519 00003D58 E2F2                            loop    l1              ;
 34520 00003D5A C6050A                  l2:     mov     byte [di],lf	; terminate the configuration string
 34521 00003D5D 07                              pop     es              ;
 34522                                  
 34523                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 34524                                  
 34525 00003D5E 29FF                            sub     di,di           ;
 34526 00003D60 2E893E[DB14]                    mov     [cs:config_envlen],di
 34527 00003D65 29F6                            sub     si,si           ;
 34528 00003D67 59                              pop     cx              ; recover the size of "config_wrkseg"
 34529                                  
 34530 00003D68 51                              push    cx              ;
 34531 00003D69 F3A4                            rep     movsb           ; moved!
 34532 00003D6B 59                              pop     cx              ;
 34533 00003D6C 8CD8                            mov     ax,ds           ;
 34534 00003D6E 1F                              pop     ds              ;
 34535                                  
 34536                                  ;   Now that the config_wrkseg is available once again, we shall
 34537                                  ;   use it to create an environment. The first thing to go in will be
 34538                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 34539                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 34540                                  ;   is empty.
 34541                                  
 34542 00003D6F 06                              push    es              ;
 34543 00003D70 8EC0                            mov     es,ax           ;
 34544 00003D72 46                              inc     si              ; ES:SI -> "CONFIG=configuration"
 34545 00003D73 26C606000000                    mov     byte [es:0],0	;empty the environment block
 34546 00003D79 E82800                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 34547 00003D7C 07                              pop     es
 34548                                  
 34549                                  ;   Before returning, restore the default video page setting but do NOT
 34550                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 34551                                  ;   displayed on a different page, then it's because we don't want to see
 34552                                  ;   all the device driver/TSR goop (which goes to the default page)
 34553                                  
 34554                                  menu_done:
 34555 00003D7D 803E[5348]00                    cmp     byte [bMenuPage],0
 34556 00003D82 7415                            je	short menu_exit	;
 34557 00003D84 06                              push    es              ;
 34558 00003D85 B84000                          mov     ax,40h          ;
 34559 00003D88 8EC0                            mov     es,ax           ;
 34560 00003D8A A1[5948]                        mov     ax,[wCRTStart]  ;
 34561 00003D8D 26A34E00                        mov     [es:004Eh],ax   ;
 34562 00003D91 A0[5848]                        mov     al,[bCRTPage]   ;
 34563 00003D94 26A26200                        mov     [es:0062h],al   ;
 34564 00003D98 07                              pop     es              ;
 34565                                  menu_exit:
 34566 00003D99 890E[5403]                      mov     [count],cx      ; set new counts
 34567 00003D9D 890E[5603]                      mov     [org_count],cx  ;
 34568 00003DA1 29F6                            sub     si,si           ; always return ES:SI pointing to config.sys
 34569 00003DA3 C3                              retn
 34570                                  
 34571                                  ;----------------------------------------------------------------------------
 34572                                  ;
 34573                                  ;   copy_envvar:  copy the envvar at ES:SI to "config_wrkseg"
 34574                                  ;
 34575                                  ;   INPUT
 34576                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 34577                                  ;
 34578                                  ;   OUTPUT
 34579                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 34580                                  ;       carry set if error (eg, missing =); clear otherwise
 34581                                  ;
 34582                                  ;   OTHER REGS USED
 34583                                  ;       None
 34584                                  ;
 34585                                  ;   NOTES
 34586                                  ;       None
 34587                                  ;
 34588                                  ;   HISTORY
 34589                                  ;       Created 29-Mar-1992 by JeffPar
 34590                                  ;
 34591                                  ;----------------------------------------------------------------------------
 34592                                  
 34593                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 34594                                  	; (SYSINIT:46D4h)
 34595                                  
 34596                                  copy_envvar:
 34597 00003DA4 51                              push    cx              ;
 34598 00003DA5 56                              push    si              ;
 34599 00003DA6 1E                              push    ds              ;
 34600 00003DA7 06                              push    es              ;
 34601 00003DA8 06                              push    es              ;
 34602 00003DA9 8E06[DD14]                      mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 34603 00003DAD 1F                              pop     ds                 ; DS:SI to point to envvar
 34604                                  
 34605                                  ;   Have to calculate the length of the variable name (and if we hit
 34606                                  ;   the end of the line before we hit '=', then it's curtains for this
 34607                                  ;   config.sys line)
 34608                                  ;
 34609                                  ;   The check for NULL is important because copy_envvar is also used to copy
 34610                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 34611                                  ;   menu block existed (in order to prevent the creation of an environment)
 34612                                  
 34613 00003DAE 29C9                            sub     cx,cx           ;
 34614                                  copy_varlen:                    ;
 34615 00003DB0 AC                              lodsb                   ;
 34616 00003DB1 08C0                            or      al,al           ; NULL?
 34617 00003DB3 F9                              stc                     ;
 34618 00003DB4 746C                            jz	short copy_envexit ; yes, abort
 34619 00003DB6 3C0D                            cmp     al,cr          ;
 34620 00003DB8 F9                              stc                     ;
 34621 00003DB9 7467                            je	short copy_envexit
 34622 00003DBB 3C0A                            cmp     al,lf          ;
 34623 00003DBD F9                              stc                     ;
 34624 00003DBE 7462                            je	short copy_envexit
 34625 00003DC0 41                              inc     cx              ;
 34626 00003DC1 3C3D                            cmp     al,'='          ;
 34627 00003DC3 75EB                            jne	short copy_varlen
 34628 00003DC5 B000                            mov     al,0            ;
 34629 00003DC7 8A24                            mov     ah,[si]         ; save char after '='
 34630 00003DC9 29CE                            sub     si,cx           ; back up to given varname
 34631 00003DCB 49                              dec     cx              ; CX == # of bytes in varname
 34632 00003DCC 29FF                            sub     di,di           ; start looking for DS:SI at ES:0
 34633                                  copy_varsrch:
 34634 00003DCE 263805                          cmp     byte [es:di],al
 34635 00003DD1 7425                            je	short copy_envprep ; search failed, just copy var
 34636 00003DD3 89FB                            mov     bx,di           ; ES:BX -> start of this varname
 34637 00003DD5 51                              push    cx              ;
 34638 00003DD6 56                              push    si              ;
 34639 00003DD7 F3A6                            repe    cmpsb           ;
 34640 00003DD9 5E                              pop     si              ;
 34641 00003DDA 59                              pop     cx              ;
 34642 00003DDB 7531                            jne	short copy_varnext ; no match, skip to next varname
 34643 00003DDD 26803D3D                        cmp     byte [es:di],'='
 34644 00003DE1 752B                            jne     short copy_varnext ; no match, there's more characters
 34645                                  
 34646                                  ;   Previous occurrence of variable has been found; determine the
 34647                                  ;   entire length and then destroy it
 34648                                  
 34649 00003DE3 B9FFFF                          mov     cx,-1           ;
 34650 00003DE6 F2AE                            repne   scasb           ; guaranteed to get null (since we put it there)
 34651 00003DE8 56                              push    si              ;
 34652 00003DE9 89FE                            mov     si,di           ;
 34653 00003DEB 89DF                            mov     di,bx           ;
 34654 00003DED 2E8B0E[DB14]                    mov     cx,[cs:config_envlen]
 34655 00003DF2 29F1                            sub     cx,si           ; destroy variable now
 34656                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 34657                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO:SYS - SYSINIT:4724h
 34658                                  
 34659 00003DF4 F3                      	rep	; 0F3h
 34660 00003DF5 26                      	es	; 26h
 34661 00003DF6 A4                      	movsb	; 0A4h
 34662                                  
 34663 00003DF7 5E                      	pop     si
 34664                                  copy_envprep:
 34665 00003DF8 80FC0D                          cmp     ah,cr          ; if there is nothing after the '='
 34666 00003DFB 741D                            je	short copy_envdel ; then just exit with variable deleted
 34667 00003DFD 80FC0A                          cmp     ah,lf           ;
 34668 00003E00 7418                            je	short copy_envdel
 34669                                          ;jmp	short copy_envloop
 34670                                  	; 04/01/2023
 34671                                  copy_envloop:                  ;
 34672 00003E02 AC                      	lodsb                   ;
 34673 00003E03 3C0D                    	cmp	al,cr           ;
 34674 00003E05 7410                    	je	short copy_envdone
 34675 00003E07 3C0A                    	cmp	al,lf           ;
 34676 00003E09 740C                    	je	short copy_envdone
 34677 00003E0B AA                      	stosb                   ;
 34678 00003E0C EBF4                    	jmp	short copy_envloop
 34679                                  
 34680                                  copy_varnext:                   ;
 34681 00003E0E 51                              push    cx              ;
 34682 00003E0F B9FFFF                          mov     cx,-1           ;
 34683 00003E12 F2AE                            repne   scasb           ;
 34684 00003E14 59                              pop     cx              ;
 34685 00003E15 EBB7                            jmp	short copy_varsrch
 34686                                  
 34687                                  	; 04/01/2023
 34688                                  ;copy_envloop:                  ;
 34689                                  ;	lodsb                   ;
 34690                                  ;	cmp	al,cr           ;
 34691                                  ;	je	short copy_envdone
 34692                                  ;	cmp	al,lf           ;
 34693                                  ;	je	short copy_envdone
 34694                                  ;	stosb                   ;
 34695                                  ;	jmp	short copy_envloop
 34696                                  
 34697                                  copy_envdone:                   ;
 34698 00003E17 28C0                            sub     al,al           ; do SUB to clear carry as well
 34699 00003E19 AA                              stosb                   ; always null-terminate these puppies
 34700                                  copy_envdel:                    ;
 34701 00003E1A 268805                          mov     [es:di],al      ; and stick another null to terminate the env.
 34702 00003E1D 2E893E[DB14]                    mov     [cs:config_envlen],di
 34703                                  
 34704                                  copy_envexit:                   ;
 34705 00003E22 07                              pop     es              ;
 34706 00003E23 1F                              pop     ds              ;
 34707 00003E24 5E                              pop     si              ;
 34708 00003E25 59                              pop     cx              ;
 34709                                  
 34710                                  copy_done:	; 18/12/2022
 34711 00003E26 C3                              retn
 34712                                  
 34713                                  ;----------------------------------------------------------------------------
 34714                                  ;
 34715                                  ;   copy_block:  copy the current block to the new config.sys workspace
 34716                                  ;
 34717                                  ;   INPUT
 34718                                  ;       CX == remaining bytes in "organized" config.sys memory image
 34719                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 34720                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 34721                                  ;             config.sys image) where the current block is to be copied
 34722                                  ;
 34723                                  ;   OUTPUT
 34724                                  ;       Same as above
 34725                                  ;       AL also equals the last character read from the organized image
 34726                                  ;
 34727                                  ;   OTHER REGS USED
 34728                                  ;       All
 34729                                  ;
 34730                                  ;   NOTES
 34731                                  ;       None
 34732                                  ;
 34733                                  ;   HISTORY
 34734                                  ;       Created 16-Mar-1992 by JeffPar
 34735                                  ;
 34736                                  ;----------------------------------------------------------------------------
 34737                                  
 34738                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 34739                                  	; (SYSINIT:4759h)
 34740                                  
 34741                                  copy_block:
 34742 00003E27 E87203                          call    get_char        ; check for include
 34743 00003E2A 72FA                            jc	short copy_done	;
 34744 00003E2C 247F                    	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34745 00003E2E 3C5B                    	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 34746 00003E30 74F4                            je	short copy_done ;
 34747                                  
 34748 00003E32 3C4A                            cmp     al,CONFIG_INCLUDE ; 'J'
 34749 00003E34 88E0                            mov     al,ah           ; AL == the original line code
 34750 00003E36 753A                            jne	short copy_line	; not an "include" line
 34751                                  
 34752                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 34753                                  ;   never try to include the block again (no infinite include loops please),
 34754                                  ;   then search for the named block and call copy_block again.
 34755                                  
 34756 00003E38 26C644FF30                      mov     byte [es:si-1],CONFIG_REM ; '0'
 34757 00003E3D 57                              push    di              ;
 34758                                  
 34759 00003E3E BF[9C48]                        mov     di,szMenu
 34760 00003E41 E8D400                          call    comp_names_safe ; don't allow INCLUDE MENU
 34761 00003E44 7425                            je	short copy_skip	;
 34762                                  
 34763 00003E46 BF[A148]                        mov     di,szCommon
 34764 00003E49 E8CC00                          call    comp_names_safe ; don't allow INCLUDE COMMON
 34765 00003E4C 741D                            je	short copy_skip	;
 34766                                  
 34767 00003E4E 89F7                            mov     di,si           ; try to find the block
 34768 00003E50 E86400                          call    srch_block      ;
 34769 00003E53 89FA                            mov     dx,di           ;
 34770 00003E55 5F                              pop     di              ;
 34771 00003E56 7514                            jne	short copy_error ; no such block
 34772 00003E58 51                              push    cx              ;
 34773 00003E59 89D9                            mov     cx,bx           ;
 34774 00003E5B 56                              push    si              ;
 34775 00003E5C 4A                              dec     dx              ;
 34776 00003E5D 89D6                            mov     si,dx           ;
 34777 00003E5F E80F03                          call    skip_line       ; skip the rest of the "block name" line
 34778 00003E62 E8C2FF                          call    copy_block      ; and copy in the rest of that block
 34779 00003E65 5E                              pop     si              ;
 34780 00003E66 59                              pop     cx              ;
 34781 00003E67 28C0                            sub     al,al           ; force skip_opt_line to skip...
 34782 00003E69 EB2B                            jmp     short copy_nextline
 34783                                  
 34784                                  copy_skip:
 34785 00003E6B 5F                              pop     di
 34786                                  copy_error:
 34787 00003E6C F8                              clc                     ;
 34788 00003E6D E80204                          call    print_error     ; note that carry is clear, no pause
 34789 00003E70 EB24                            jmp     short copy_nextline
 34790                                  
 34791                                  ;   Copy the line at ES:SI to the current location at DS:DI
 34792                                  
 34793                                  copy_line:
 34794 00003E72 8805                            mov     [di],al         ;
 34795 00003E74 47                              inc     di              ;
 34796 00003E75 3C20                            cmp     al,' '          ; is this is a "real" line with a "real" code?
 34797 00003E77 721D                            jb	short copy_nextline ; no
 34798 00003E79 2E803E[E014]00                  cmp     byte [cs:config_multi],0
 34799 00003E7F 7409                            je	short copy_loop	; not a multi-config config.sys, don't embed #s
 34800 00003E81 E81700                          call    get_linenum	; BX == line # of line @ES:SI
 34801 00003E84 891D                            mov     [di],bx         ; stash it immediately following the line code
 34802 00003E86 47                              inc     di              ;
 34803 00003E87 47                              inc     di              ;
 34804 00003E88 EB08                            jmp     short copy_next ;
 34805                                  copy_loop:                      ;
 34806 00003E8A E80F03                          call    get_char        ;
 34807 00003E8D 7297                            jc	short copy_done ; end of file
 34808 00003E8F 8805                            mov     [di],al         ;
 34809 00003E91 47                              inc     di              ;
 34810                                  copy_next:
 34811 00003E92 3C0A                            cmp     al,lf ; 0Ah	; done with line?
 34812 00003E94 75F4                            jne	short copy_loop	; nope
 34813                                  
 34814                                  copy_nextline:
 34815 00003E96 E8D402                          call    skip_opt_line   ;
 34816 00003E99 EB8C                            jmp     short copy_block
 34817                                  
 34818                                  	; 18/12/2022
 34819                                  ;copy_done:
 34820                                          ;retn
 34821                                  
 34822                                  ;----------------------------------------------------------------------------
 34823                                  ;
 34824                                  ;   get_linenum:  return line # (in BX) of current line (@ES:SI)
 34825                                  ;
 34826                                  ;   INPUT
 34827                                  ;    ES:SI -> some line in the config.sys memory image
 34828                                  ;
 34829                                  ;   OUTPUT
 34830                                  ;       BX == line # (relative to 1)
 34831                                  ;
 34832                                  ;   OTHER REGS USED
 34833                                  ;       DX
 34834                                  ;
 34835                                  ;   NOTES
 34836                                  ;       None
 34837                                  ;
 34838                                  ;   HISTORY
 34839                                  ;       Created 16-Mar-1992 by JeffPar
 34840                                  ;
 34841                                  ;----------------------------------------------------------------------------
 34842                                  
 34843                                  get_linenum:
 34844 00003E9B 50                              push    ax              ;
 34845 00003E9C 29DB                            sub     bx,bx           ; BX == line # (to be returned)
 34846 00003E9E 51                              push    cx              ;
 34847 00003E9F 89F2                            mov     dx,si           ; DX == the offset we're looking for
 34848 00003EA1 56                              push    si              ;
 34849 00003EA2 2E8B0E[5403]                    mov     cx,[cs:count]   ;
 34850 00003EA7 29F6                            sub     si,si           ; prepare to scan entire file
 34851                                  get_linenum_loop:               ;
 34852 00003EA9 E8C502                          call    skip_line       ;
 34853 00003EAC 7205                            jc	short get_linenum_done
 34854 00003EAE 43                              inc     bx              ;
 34855 00003EAF 39D6                            cmp     si,dx           ; have we exceeded the desired offset yet?
 34856 00003EB1 72F6                            jb	short get_linenum_loop ; no
 34857                                  get_linenum_done:               ;
 34858 00003EB3 5E                              pop     si              ;
 34859 00003EB4 59                              pop     cx              ;
 34860 00003EB5 58                              pop     ax              ;
 34861 00003EB6 C3                              retn
 34862                                  
 34863                                  ;----------------------------------------------------------------------------
 34864                                  ;
 34865                                  ;   srch_block:  searches entire config.sys for block name @ES:DI
 34866                                  ;
 34867                                  ;   INPUT
 34868                                  ;       ES -> config.sys image
 34869                                  ;    ES:DI -> block name to find
 34870                                  ;
 34871                                  ;   OUTPUT
 34872                                  ;       ZF flag set, if found
 34873                                  ;    ES:DI -> just past the name in the block heading, if found
 34874                                  ;       BX == # bytes remaining from that point, if found
 34875                                  ;
 34876                                  ;   OTHER REGS USED
 34877                                  ;       None
 34878                                  ;
 34879                                  ;   NOTES
 34880                                  ;       This differs from "find_block" in that it searches the ENTIRE
 34881                                  ;       config.sys image, not merely the remaining portion, and that it
 34882                                  ;       takes a pointer to block name that is *elsewhere* in the image
 34883                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 34884                                  ;
 34885                                  ;   HISTORY
 34886                                  ;       Created 16-Mar-1992 by JeffPar
 34887                                  ;
 34888                                  ;----------------------------------------------------------------------------
 34889                                  
 34890                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 34891 00003EB7 50                              push    ax              ;
 34892 00003EB8 51                              push    cx              ;
 34893 00003EB9 2E8B0E[5403]                    mov     cx,[cs:count]   ;
 34894 00003EBE 56                              push    si              ;
 34895 00003EBF 29F6                            sub     si,si           ;
 34896 00003EC1 1E                              push    ds              ;
 34897 00003EC2 06                              push    es              ;
 34898 00003EC3 1F                              pop     ds              ;
 34899 00003EC4 E80900                          call    find_block      ;
 34900 00003EC7 89F7                            mov     di,si           ;
 34901 00003EC9 89CB                            mov     bx,cx           ;
 34902 00003ECB 1F                              pop     ds              ;
 34903 00003ECC 5E                              pop     si              ;
 34904 00003ECD 59                              pop     cx              ;
 34905 00003ECE 58                              pop     ax              ;
 34906                                  find_exit: ; 16/04/2019
 34907 00003ECF C3                              retn			;
 34908                                  
 34909                                  ;----------------------------------------------------------------------------
 34910                                  ;
 34911                                  ;   find_block:  searches rest of config.sys for block name @DS:DI
 34912                                  ;
 34913                                  ;   INPUT
 34914                                  ;    DS:DI -> block name to find
 34915                                  ;    ES:SI -> remainder of config.sys image
 34916                                  ;       CX == remaining size of config.sys image
 34917                                  ;
 34918                                  ;   OUTPUT
 34919                                  ;       ZF flag set, if found (also, CF set if EOF)
 34920                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 34921                                  ;       CX == # bytes remaining from that point
 34922                                  ;
 34923                                  ;   OTHER REGS USED
 34924                                  ;       AX
 34925                                  ;
 34926                                  ;   NOTES
 34927                                  ;       This differs from "srch_block" in that it searches only the
 34928                                  ;       remaining portion of the config.sys image and leaves SI and CX
 34929                                  ;       pointing to where the search left off, and that it takes a pointer
 34930                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 34931                                  ;
 34932                                  ;   HISTORY
 34933                                  ;       Created 16-Mar-1992 by JeffPar
 34934                                  ;
 34935                                  ;----------------------------------------------------------------------------
 34936                                  
 34937                                  find_block:
 34938 00003ED0 E8C902                          call    get_char        ; get line code
 34939 00003ED3 72FA                            jc	short find_exit	; end of file
 34940 00003ED5 247F                            and     al,~CONFIG_OPTION_QUERY
 34941 00003ED7 3C5B                            cmp     al,CONFIG_BEGIN ; beginning of a block?
 34942 00003ED9 740C                            je	short check_line ; no
 34943 00003EDB 3C4A                            cmp     al,CONFIG_INCLUDE
 34944 00003EDD 7513                            jne	short next_line	;
 34945 00003EDF 2E800E[E014]01                  or	byte [cs:config_multi],1
 34946 00003EE5 EB0B                            jmp     short next_line ;
 34947                                  check_line:
 34948 00003EE7 2E800E[E014]01                  or      byte [cs:config_multi],1
 34949 00003EED E80700                          call    comp_names      ; compare block names
 34950 00003EF0 76DD                            jbe	short find_exit	; end of file, or names matched
 34951                                  next_line:
 34952 00003EF2 E87802                          call    skip_opt_line   ; no, so skip to next line
 34953 00003EF5 EBD9                            jmp	short find_block  ;
 34954                                  ;find_exit:
 34955                                  ;	retn
 34956                                  
 34957                                  ;----------------------------------------------------------------------------
 34958                                  ;
 34959                                  ;   comp_names:  compares keyword @DS:DI to position in config.sys @ES:SI
 34960                                  ;
 34961                                  ;   INPUT
 34962                                  ;    DS:DI -> keyword to compare
 34963                                  ;    ES:SI -> position in config.sys
 34964                                  ;       CX == remaining bytes in config.sys
 34965                                  ;
 34966                                  ;   OUTPUT
 34967                                  ;       ZF flag set, if match (also, CF set if EOF)
 34968                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 34969                                  ;       CX == # bytes remaining from that point
 34970                                  ;
 34971                                  ;   OTHER REGS USED
 34972                                  ;       AX
 34973                                  ;
 34974                                  ;   NOTES
 34975                                  ;       None
 34976                                  ;
 34977                                  ;   HISTORY
 34978                                  ;       Created 16-Mar-1992 by JeffPar
 34979                                  ;
 34980                                  ;----------------------------------------------------------------------------
 34981                                  
 34982                                  comp_names:
 34983 00003EF7 57                              push    di              ;
 34984                                  comp_loop:                      ;
 34985 00003EF8 E8A102                          call    get_char        ;
 34986 00003EFB 7210                            jc	short comp_exit	;
 34987 00003EFD E80904                          call    any_delim       ; is next character a delimiter?
 34988 00003F00 8A25                            mov     ah,[di]         ; (get next character we're supposed to match)
 34989 00003F02 740B                            je	short comp_almost ; yes, it *could* be a match
 34990 00003F04 47                              inc     di              ;
 34991 00003F05 25DFDF                          and     ax,~2020h ; 0DFDFh 
 34992                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 34993 00003F08 38E0                            cmp     al,ah           ; match?
 34994 00003F0A 74EC                            je	short comp_loop ; yes, keep looking at the characters
 34995 00003F0C F8                              clc                     ; prevent erroneous eof indication: clear carry
 34996                                  comp_exit:                      ;
 34997 00003F0D 5F                              pop     di              ;
 34998 00003F0E C3                              retn			;
 34999                                  comp_almost:                    ;
 35000 00003F0F 86C4                            xchg    al,ah           ; we don't know for sure if it's a match
 35001 00003F11 E8F503                          call    any_delim       ; until we verify that the second string has
 35002 00003F14 86C4                            xchg    al,ah           ; been exhausted also...
 35003 00003F16 EBF5                            jmp     short comp_exit ; if we are, this call to any_delim will tell...
 35004                                  
 35005                                  ;----------------------------------------------------------------------------
 35006                                  
 35007                                  comp_names_safe:
 35008 00003F18 50                              push    ax
 35009 00003F19 51                              push    cx
 35010 00003F1A 56                              push	si
 35011 00003F1B 1E                              push    ds
 35012 00003F1C 0E                              push    cs
 35013 00003F1D 1F                              pop     ds
 35014 00003F1E E8D6FF                          call    comp_names
 35015 00003F21 1F                              pop     ds
 35016 00003F22 5E                      	pop	si
 35017 00003F23 59                              pop     cx
 35018 00003F24 58                              pop     ax
 35019 00003F25 C3                              retn
 35020                                  
 35021                                  ;----------------------------------------------------------------------------
 35022                                  ;
 35023                                  ;   print_item:  display menu item #BL
 35024                                  ;
 35025                                  ;   INPUT
 35026                                  ;       BL == menu item # to display
 35027                                  ;
 35028                                  ;   OUTPUT
 35029                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 35030                                  ;
 35031                                  ;   OTHER REGS USED
 35032                                  ;       None
 35033                                  ;
 35034                                  ;   NOTES
 35035                                  ;       This function saves/restores the current cursor position, so you
 35036                                  ;       needn't worry about it.
 35037                                  ;
 35038                                  ;   HISTORY
 35039                                  ;       Created 16-Mar-1992 by JeffPar
 35040                                  ;
 35041                                  ;----------------------------------------------------------------------------
 35042                                  
 35043                                  	; 04/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35044                                  	; (SYSINIT:485Ah)
 35045                                  
 35046                                  print_item:		; prints menu item #BL (1 to N)
 35047 00003F26 50                              push    ax              ;
 35048 00003F27 53                              push    bx              ;
 35049 00003F28 51                              push    cx              ;
 35050 00003F29 52                              push    dx              ;
 35051 00003F2A 56                              push    si              ;
 35052 00003F2B B403                            mov     ah,03h          ; get cursor position
 35053 00003F2D 8A3E[5348]                      mov     bh,[bMenuPage]  ; always page zero
 35054 00003F31 CD10                            int     10h             ; DH/DL = row/column
 35055 00003F33 52                              push    dx              ; save it
 35056 00003F34 B402                            mov     ah,02h          ; set cursor position
 35057 00003F36 88DE                            mov     dh,bl           ;
 35058 00003F38 80C603                          add     dh,3            ;
 35059 00003F3B B205                            mov     dl,5            ;
 35060 00003F3D CD10                            int     10h             ; set cursor position for correct row/col
 35061 00003F3F 88D8                            mov     al,bl           ;
 35062 00003F41 0430                            add     al,'0'          ; convert menu item # to ASCII digit
 35063 00003F43 8A26[5248]                      mov     ah,[bMenuColor] ; normal attribute
 35064 00003F47 3A1E[5C48]                      cmp     bl,[bDefBlock]  ; are we printing the current block?
 35065 00003F4B 7510                            jne	short print_other ; no
 35066 00003F4D 80CC70                          or      ah,70h          ; yes, set bgnd color to white
 35067 00003F50 88E5                            mov     ch,ah           ;
 35068 00003F52 B104                            mov     cl,4            ;
 35069 00003F54 D2C5                            rol     ch,cl           ;
 35070 00003F56 38E5                            cmp     ch,ah           ; are fgnd/bgnd the same?
 35071 00003F58 7503                            jne	short print_other ; no
 35072 00003F5A 80F408                          xor     ah,08h          ; yes, so modify the fgnd intensity
 35073                                  print_other:                    ;
 35074 00003F5D B700                            mov     bh,0            ;
 35075 00003F5F 01DB                            add     bx,bx           ;
 35076 00003F61 8BBF[8048]                      mov     di,[aoffBlockDesc+bx]
 35077 00003F65 88E3                            mov     bl,ah           ; put the attribute in the correct register now
 35078 00003F67 8A3E[5348]                      mov     bh,[bMenuPage]  ; get correct video page #
 35079 00003F6B B409                            mov     ah,09h          ; write char/attr
 35080 00003F6D B90100                          mov     cx,1            ;
 35081 00003F70 CD10                            int     10h             ;
 35082 00003F72 FEC2                            inc     dl              ; increment column
 35083 00003F74 B402                            mov     ah,02h          ;
 35084 00003F76 CD10                            int     10h             ;
 35085                                          ;mov	ax,0900h+'.'    ;
 35086 00003F78 B82E09                          mov	ax,092Eh
 35087 00003F7B CD10                    	int     10h             ; display '.'
 35088 00003F7D FEC2                            inc     dl              ; increment column
 35089 00003F7F B402                            mov     ah,02h          ;
 35090 00003F81 CD10                            int     10h             ;
 35091                                          ;mov	ax,0900h+' '    ;
 35092 00003F83 B82009                          mov	ax,0920h
 35093 00003F86 CD10                    	int     10h             ; display ' '
 35094 00003F88 FEC2                            inc     dl              ; increment column
 35095 00003F8A B402                            mov     ah,02h          ;
 35096 00003F8C CD10                            int     10h             ;
 35097 00003F8E 06                              push    es              ;
 35098                                  print_loop:                     ;
 35099 00003F8F 268A05                          mov     al,[es:di]	; get a character of the description
 35100 00003F92 47                              inc     di              ;
 35101 00003F93 3C09                            cmp     al,TAB ; 9	; substitute spaces for tabs
 35102 00003F95 7502                            jne	short print_nontab ;
 35103 00003F97 B020                            mov     al,' '          ;
 35104                                  print_nontab:                   ;
 35105 00003F99 3C20                            cmp     al,' '          ;
 35106 00003F9B 7215                            jb	short print_done ; stop at the 1st character < space
 35107 00003F9D 3C24                            cmp     al,'$'          ;
 35108 00003F9F 7411                            je	short print_done ; also stop on $
 35109 00003FA1 B409                            mov     ah,09h          ; display function #
 35110 00003FA3 CD10                            int     10h             ;
 35111 00003FA5 FEC2                            inc     dl              ; increment column
 35112 00003FA7 80FA4E                          cmp     dl,78           ; far enough?
 35113 00003FAA 7306                            jae	short print_done ; yes
 35114 00003FAC B402                            mov     ah,02h          ;
 35115 00003FAE CD10                            int     10h             ;
 35116 00003FB0 EBDD                            jmp	short  print_loop
 35117                                  print_done:                     ;
 35118 00003FB2 07                              pop     es              ;
 35119 00003FB3 5A                              pop     dx              ;
 35120 00003FB4 B402                            mov     ah,02h          ;
 35121 00003FB6 CD10                            int     10h             ; restore previous row/col
 35122 00003FB8 5E                              pop     si              ;
 35123 00003FB9 5A                              pop     dx              ;
 35124 00003FBA 59                              pop     cx              ;
 35125 00003FBB 5B                              pop     bx              ;
 35126 00003FBC 58                              pop     ax              ;
 35127 00003FBD C3                              retn			;
 35128                                  
 35129                                  ;----------------------------------------------------------------------------
 35130                                  ;
 35131                                  ;   select_item:  wait for user to select menu item, with time-out
 35132                                  ;
 35133                                  ;   INPUT
 35134                                  ;       None
 35135                                  ;
 35136                                  ;   OUTPUT
 35137                                  ;       BX == menu item # (1-N), or -1 for clean boot
 35138                                  ;       Selected menu item highlighted
 35139                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 35140                                  ;
 35141                                  ;   OTHER REGS USED
 35142                                  ;       None
 35143                                  ;
 35144                                  ;   NOTES
 35145                                  ;       None
 35146                                  ;
 35147                                  ;   HISTORY
 35148                                  ;       Created 16-Mar-1992 by JeffPar
 35149                                  ;
 35150                                  ;----------------------------------------------------------------------------
 35151                                  
 35152                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 35153 00003FBE 8A1E[5C48]                      mov     bl,[bDefBlock]  ; BL will be the default block #
 35154 00003FC2 88D8                            mov     al,bl           ;
 35155 00003FC4 E83201                          call    disp_num        ;
 35156 00003FC7 E83F01                          call    show_status     ; display current interactive status
 35157 00003FCA 803E[6048]FF                    cmp     byte [secTimeOut],-1
 35158 00003FCF 7452                            je	short input_key	; no time-out, just go to input
 35159 00003FD1 B42C                            mov     ah,GET_TIME ; 2Ch
 35160 00003FD3 CD21                            int     21h             ;
 35161 00003FD5 88F7                            mov     bh,dh           ; BH = initial # of seconds
 35162                                  check_time:
 35163 00003FD7 A0[6048]                        mov     al,[secTimeOut] ;
 35164 00003FDA 2A06[6148]                      sub     al,[secElapsed] ;
 35165 00003FDE 730D                            jae	short show_time	;
 35166 00003FE0 800E[5B48]02                    or      byte [bQueryOpt],2  ; disable all further prompting
 35167 00003FE5 C606[6148]00                    mov     byte [secElapsed],0
 35168 00003FEA E9F100                          jmp	select_done	; time's up!
 35169                                  show_time:
 35170 00003FED 53                              push    bx              ;
 35171 00003FEE 88C3                            mov     bl,al           ; save # in BL
 35172 00003FF0 8A3E[5348]                      mov     bh,[bMenuPage]  ;
 35173 00003FF4 B403                            mov     ah,03h          ; get cursor position
 35174 00003FF6 CD10                            int     10h             ;
 35175 00003FF8 52                              push    dx              ;
 35176 00003FF9 80C208                  	add	dl,8		; move cursor to the right
 35177 00003FFC B402                            mov     ah,02h          ; set cursor position
 35178 00003FFE CD10                            int     10h             ;
 35179 00004000 BA[164E]                        mov     dx,_$TimeOut
 35180 00004003 E82306                          call    print           ; print the "Time remaining: " prompt
 35181 00004006 88D8                            mov     al,bl           ; recover # from BL
 35182 00004008 98                              cbw                     ; this works because AL is always <= 90
 35183 00004009 B10A                            mov     cl,10           ;
 35184 0000400B F6F1                            div     cl              ; AL = tens digit, AH = ones digit
 35185 0000400D 88E1                            mov     cl,ah           ;
 35186 0000400F 0430                            add     al,'0'          ;
 35187 00004011 B40E                            mov     ah,0Eh          ;
 35188 00004013 CD10                            int     10h             ; write TTY tens digit
 35189 00004015 88C8                            mov     al,cl           ;
 35190 00004017 0430                            add     al,'0'          ;
 35191 00004019 B40E                            mov     ah,0Eh          ;
 35192 0000401B CD10                            int     10h             ; write TTY ones digit
 35193 0000401D 5A                              pop     dx
 35194 0000401E B402                            mov     ah,02h          ; set cursor position back to where it was
 35195 00004020 CD10                            int     10h             ;
 35196 00004022 5B                              pop     bx              ;
 35197                                  input_key:
 35198 00004023 B406                            mov     ah,RAW_CON_IO ; 6
 35199 00004025 B2FF                            mov     dl,0FFh         ; input request
 35200 00004027 CD21                            int     21h             ;
 35201 00004029 751F                            jnz	short got_key	;
 35202 0000402B 803E[6048]FF                    cmp     byte [secTimeOut],-1; is there a time-out?
 35203 00004030 74F1                            je	short input_key	; no, just go back to input
 35204 00004032 B42C                            mov     ah,GET_TIME     ;
 35205 00004034 CD21                            int     21h             ; DH = seconds
 35206 00004036 88F4                            mov     ah,dh           ;
 35207 00004038 28FE                            sub     dh,bh           ; should generally be zero or one
 35208 0000403A 88E7                            mov     bh,ah           ;
 35209 0000403C 7302                            jnc	short got_time	;
 35210 0000403E B601                            mov     dh,1            ; it wrapped back to zero, so assume one
 35211                                  got_time:
 35212 00004040 08F6                            or      dh,dh           ; any change?
 35213 00004042 74DF                            jz	short input_key	; no
 35214 00004044 0036[6148]                      add     [secElapsed],dh ;
 35215 00004048 EB8D                            jmp	short check_time ;
 35216                                  got_key:
 35217 0000404A 50                              push    ax              ;
 35218 0000404B B8FFFF                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 35219 0000404E 8706[6048]                      xchg    [secTimeOut],ax
 35220 00004052 3CFF                            cmp     al,-1           ; was time-out already disabled?
 35221 00004054 740E                            je	short timeout_disabled ; yes
 35222 00004056 53                              push    bx              ; let's disable # seconds display
 35223 00004057 B8200A                          mov     ax,0A20h        ; write multiple spaces
 35224 0000405A 8B1E[5248]                      mov     bx,[bMenuColor]
 35225 0000405E B95000                          mov     cx,80           ; 80 of them, to be safe
 35226 00004061 CD10                            int     10h             ; to completely obliterate # seconds display
 35227 00004063 5B                              pop     bx   		;
 35228                                  
 35229                                  timeout_disabled:
 35230 00004064 58                              pop     ax              ;
 35231 00004065 08C0                            or      al,al           ; extended key pressed?
 35232 00004067 7555                            jnz	short normal_key ; no
 35233 00004069 CD21                            int     21h             ; get the next part of the key then
 35234 0000406B 74B6                            jz	short input_key	; hmmm, what happened to the second part?
 35235                                  
 35236 0000406D 3C48                            cmp     al,48h          ; up arrow?
 35237 0000406F 7510                            jne	short not_up	; no
 35238 00004071 80FB01                          cmp     bl,1            ; are we as up as up can get?
 35239 00004074 76AD                            jbe	short input_key	; yes, ignore it
 35240 00004076 FE0E[5C48]                      dec     byte [bDefBlock] ;
 35241 0000407A E8A9FE                          call    print_item      ; re-print the current item
 35242 0000407D FECB                            dec     bl              ; and then print the new current item
 35243 0000407F EB12                            jmp     short print1
 35244                                  not_up:
 35245 00004081 3C50                            cmp     al,50h          ; down arrow?
 35246 00004083 7518                            jne	short not_down	; no
 35247 00004085 3A1E[5D48]                      cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 35248 00004089 7310                            jae	short to_input_key ; yes, ignore it
 35249 0000408B FE06[5C48]                      inc     byte [bDefBlock] ;
 35250 0000408F E894FE                          call    print_item      ; re-print the current item
 35251 00004092 43                              inc     bx              ; and then print the new current item
 35252                                  print1: 
 35253 00004093 88D8                    	mov     al,bl           ;
 35254                                  print2: 
 35255 00004095 E88EFE                  	call    print_item      ;
 35256 00004098 E85E00                          call    disp_num        ;
 35257                                  to_input_key:
 35258 0000409B EB86                            jmp     input_key       ;
 35259                                  not_down:
 35260 0000409D F606[5748]01                    test    byte [bDisableUI],1
 35261 000040A2 75F7                            jnz	short to_input_key ; don't allow F8 or F5
 35262 000040A4 3C42                            cmp     al,42h          ; F8 function key?
 35263 000040A6 750B                            jne	short not_f8	; no
 35264 000040A8 8036[5B48]01                    xor     byte [bQueryOpt],1
 35265 000040AD E85900                          call    show_status     ;
 35266 000040B0 E970FF                          jmp     input_key	;
 35267                                  not_f8:
 35268 000040B3 3C3F                            cmp     al,3Fh          ; F5 function key?
 35269 000040B5 75E4                            jne	short to_input_key ; no
 35270 000040B7 BBFFFF                          mov     bx,-1           ; special return code (-1) indicating clean boot
 35271 000040BA B020                            mov     al,' '          ; don't want to display anything really;
 35272 000040BC EB26                            jmp     short disp_input; just want to display the cr/lf sequence...
 35273                                  
 35274                                  normal_key:
 35275 000040BE 3C0D                            cmp     al,0Dh          ; Enter?
 35276 000040C0 741C                            je	short select_done ; yes
 35277 000040C2 3C08                            cmp     al,08h          ; backspace?
 35278 000040C4 7504                            jne	short not_backspace ; no
 35279 000040C6 BBFEFF                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 35280 000040C9 C3                              retn			;
 35281                                  not_backspace:
 35282 000040CA 2C30                            sub     al,'0'          ; is greater than '0'?
 35283 000040CC 76CD                            jbe	short to_input_key ; no
 35284 000040CE 3A06[5D48]                      cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 35285 000040D2 77C7                            ja	short to_input_key ; no
 35286 000040D4 A2[5C48]                        mov	[bDefBlock],al  ;
 35287 000040D7 E84CFE                          call    print_item      ; redisplay the current selection
 35288 000040DA 88C3                            mov     bl,al           ; set new selection
 35289 000040DC EBB7                            jmp	short print2
 35290                                  
 35291                                  select_done:
 35292 000040DE B700                            mov     bh,0            ; return a full 16-bit value (for indexing)
 35293 000040E0 88D8                            mov     al,bl           ;
 35294 000040E2 0430                            add     al,'0'          ; convert it into a digit, then display it
 35295                                  
 35296                                  	; fall into disp_input
 35297                                  
 35298                                  ; 16/04/2019 - Retro DOS v4.0
 35299                                  
 35300                                  ;----------------------------------------------------------------------------
 35301                                  ;
 35302                                  ;   disp_input:  display a single character + cr/lf
 35303                                  ;
 35304                                  ;   INPUT
 35305                                  ;       AL == character to display
 35306                                  ;
 35307                                  ;   OUTPUT
 35308                                  ;       None
 35309                                  ;
 35310                                  ;   OTHER REGS USED
 35311                                  ;       None
 35312                                  ;
 35313                                  ;   NOTES
 35314                                  ;       This function is used not only for the menu input selection but
 35315                                  ;       also for the interactive line prompting (the y/n/a thing).
 35316                                  ;
 35317                                  ;   HISTORY
 35318                                  ;       Created 16-Mar-1992 by JeffPar
 35319                                  ;
 35320                                  ;----------------------------------------------------------------------------
 35321                                  
 35322                                  disp_input:
 35323 000040E4 50                              push    ax
 35324 000040E5 3C20                            cmp     al,' '
 35325 000040E7 7302                            jae	short disp_ok
 35326 000040E9 B020                            mov     al,' '
 35327                                  disp_ok:
 35328 000040EB 88C2                            mov     dl,al
 35329 000040ED B402                            mov     ah,STD_CON_OUTPUT ; 2
 35330 000040EF CD21                            int     21h
 35331 000040F1 BA[764B]                        mov     dx,crlfm
 35332 000040F4 E83205                          call    print
 35333 000040F7 58                              pop     ax
 35334 000040F8 C3                              retn
 35335                                  
 35336                                  ;----------------------------------------------------------------------------
 35337                                  
 35338                                  disp_num:
 35339 000040F9 53                              push    bx
 35340 000040FA 0430                            add     al,'0'
 35341 000040FC B40A                            mov     ah,0Ah
 35342 000040FE 8B1E[5248]                      mov     bx,[bMenuColor]
 35343 00004102 B90100                          mov     cx,1
 35344 00004105 CD10                            int     10h
 35345 00004107 5B                              pop     bx
 35346 00004108 C3                              retn
 35347                                  
 35348                                  ;----------------------------------------------------------------------------
 35349                                  ;
 35350                                  ;   show_status:  display current interactive mode setting (on/off/none)
 35351                                  ;
 35352                                  ;   INPUT
 35353                                  ;       None
 35354                                  ;
 35355                                  ;   OUTPUT
 35356                                  ;       None
 35357                                  ;
 35358                                  ;   OTHER REGS USED
 35359                                  ;       None
 35360                                  ;
 35361                                  ;   NOTES
 35362                                  ;       None
 35363                                  ;
 35364                                  ;   HISTORY
 35365                                  ;       Created 16-Mar-1992 by JeffPar
 35366                                  ;
 35367                                  ;----------------------------------------------------------------------------
 35368                                  
 35369                                  show_status:
 35370 00004109 53                              push    bx              ; BL = video page #
 35371 0000410A 8B1E[5248]                      mov     bx,[bMenuColor]
 35372 0000410E B403                            mov     ah,03h          ; get cursor position
 35373 00004110 CD10                            int     10h             ;
 35374 00004112 52                              push    dx              ; save it
 35375 00004113 B402                            mov     ah,02h          ; set cursor position
 35376 00004115 8B16[5548]                      mov     dx,[bLastCol]   ; set correct row/col
 35377 00004119 F606[5748]01                    test    byte [bDisableUI],1
 35378 0000411E 740E                            jz	short show_onoff ; just show on/off
 35379 00004120 B200                            mov     dl,0            ;
 35380 00004122 CD10                            int     10h             ;
 35381 00004124 B8200A                          mov     ax,0A20h        ; write multiple spaces
 35382 00004127 B95000                          mov     cx,80           ; 80 of them, to be exact
 35383 0000412A CD10                            int     10h             ; to obliterate the status line
 35384 0000412C EB13                            jmp     short show_done ;
 35385                                  show_onoff: 
 35386 0000412E CD10                            int     10h
 35387                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 35388                                  		; AL = character, BH = display page - alpha mode
 35389                                  		; BL = color of character (graphics mode, PCjr only)
 35390                                  		; CX = number of times to write character
 35391                                  
 35392 00004130 A0[124E]                        mov     al,[_$NO]	; assume OFF
 35393 00004133 803E[5B48]01                    cmp     byte [bQueryOpt],1 ; is interactive mode on?
 35394 00004138 7503                            jne	short show_noton ; no
 35395 0000413A A0[0E4E]                        mov     al,[_$YES]	; yes
 35396                                  show_noton:                     ;
 35397 0000413D B40E                            mov     ah,0Eh          ; write TTY
 35398 0000413F CD10                            int     10h             ;
 35399                                  show_done:                      ;
 35400 00004141 5A                              pop     dx              ;
 35401 00004142 B402                            mov     ah,02h          ;
 35402 00004144 CD10                            int     10h             ; restore original cursor position
 35403 00004146 5B                              pop     bx              ;
 35404 00004147 C3                              retn			;
 35405                                  
 35406                                  ; 16/04/2019 - Retro DOS v4.0
 35407                                  
 35408                                  ;----------------------------------------------------------------------------
 35409                                  ;
 35410                                  ;   skip_token: advances ES:SI/CX past the current token
 35411                                  ;
 35412                                  ;   INPUT
 35413                                  ;    ES:SI -> position in config.sys
 35414                                  ;       CX == remaining bytes in config.sys
 35415                                  ;
 35416                                  ;   OUTPUT
 35417                                  ;       CF set if EOL/EOF hit
 35418                                  ;       AL == 1st char of delimiter
 35419                                  ;    ES:SI -> just past the delimiter
 35420                                  ;       CX == # bytes remaining from that point
 35421                                  ;
 35422                                  ;   OTHER REGS USED
 35423                                  ;       AX
 35424                                  ;
 35425                                  ;   NOTES
 35426                                  ;       None
 35427                                  ;
 35428                                  ;   HISTORY
 35429                                  ;       Created 16-Mar-1992 by JeffPar
 35430                                  ;
 35431                                  ;----------------------------------------------------------------------------
 35432                                  
 35433                                  skip_token:
 35434 00004148 E85100                          call    get_char
 35435 0000414B 7210                            jc	short skip_token_done
 35436 0000414D E8B901                          call    any_delim
 35437 00004150 75F6                            jne	short skip_token
 35438                                  skip_check_eol:
 35439 00004152 3C0D                            cmp     al,cr ; 0Dh
 35440 00004154 7406                            je	short skip_token_eol
 35441 00004156 3C0A                            cmp     al,lf ; 0Ah
 35442 00004158 7402                            je	short skip_token_eol
 35443 0000415A F8                              clc
 35444                                          ;jmp	short skip_token_done
 35445 0000415B C3                      	retn
 35446                                  skip_token_eol:
 35447 0000415C F9                              stc
 35448                                  skip_token_done:
 35449 0000415D C3                              retn
 35450                                  
 35451                                  ;----------------------------------------------------------------------------
 35452                                  ;
 35453                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 35454                                  ;
 35455                                  ;   INPUT
 35456                                  ;    ES:SI -> position in config.sys
 35457                                  ;       CX == remaining bytes in config.sys
 35458                                  ;
 35459                                  ;   OUTPUT
 35460                                  ;       CF set if EOF hit
 35461                                  ;       AL == 1st char of token
 35462                                  ;    ES:SI -> just past the token
 35463                                  ;       CX == # bytes remaining from that point
 35464                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 35465                                  ;
 35466                                  ;   OTHER REGS USED
 35467                                  ;       AX
 35468                                  ;
 35469                                  ;   NOTES
 35470                                  ;       None
 35471                                  ;
 35472                                  ;   HISTORY
 35473                                  ;       Created 16-Mar-1992 by JeffPar
 35474                                  ;
 35475                                  ;----------------------------------------------------------------------------
 35476                                  
 35477                                  skip_delim:	; returns carry set if eol/eof
 35478 0000415E E83B00                          call    get_char        ;
 35479 00004161 8D5CFF                          lea     bx,[si-1]       ; also returns BX -> next token
 35480 00004164 72F7                            jc	short skip_token_done ;
 35481 00004166 E8B001                          call    delim           ;
 35482 00004169 74F3                            je	short skip_delim ;
 35483 0000416B EBE5                            jmp	short skip_check_eol  ; 13/05/2019
 35484                                  
 35485                                  ;----------------------------------------------------------------------------
 35486                                  ;
 35487                                  ;   skip_opt_line: same as skip_line provided AL != LF
 35488                                  ;
 35489                                  ;   INPUT
 35490                                  ;       AL == last character read
 35491                                  ;    ES:SI -> position in config.sys
 35492                                  ;       CX == remaining bytes in config.sys
 35493                                  ;
 35494                                  ;   OUTPUT
 35495                                  ;       CF set if EOF hit
 35496                                  ;       AL == 1st char of new line
 35497                                  ;    ES:SI -> just past 1st char of new line
 35498                                  ;       CX == # bytes remaining from that point
 35499                                  ;
 35500                                  ;   OTHER REGS USED
 35501                                  ;       AX
 35502                                  ;
 35503                                  ;   NOTES
 35504                                  ;       In other words, the purpose here is to skip to the next line,
 35505                                  ;       unless ES:SI is already sitting at the front of the next line (which
 35506                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 35507                                  ;
 35508                                  ;   HISTORY
 35509                                  ;       Created 16-Mar-1992 by JeffPar
 35510                                  ;
 35511                                  ;----------------------------------------------------------------------------
 35512                                  
 35513                                  skip_opt_line:
 35514 0000416D 3C0A                            cmp     al,lf ; 0Ah
 35515 0000416F 7409                            je	short skip_line_done
 35516                                       
 35517                                  	; fall into skip_line
 35518                                  
 35519                                  ;----------------------------------------------------------------------------
 35520                                  ;
 35521                                  ;   skip_line: skip to the next line
 35522                                  ;
 35523                                  ;   INPUT
 35524                                  ;    ES:SI -> position in config.sys
 35525                                  ;       CX == remaining bytes in config.sys
 35526                                  ;
 35527                                  ;   OUTPUT
 35528                                  ;       CF set if EOF hit
 35529                                  ;    ES:SI -> just past 1st char of new line
 35530                                  ;       CX == # bytes remaining from that point
 35531                                  ;
 35532                                  ;   OTHER REGS USED
 35533                                  ;       AX
 35534                                  ;
 35535                                  ;   NOTES
 35536                                  ;       None
 35537                                  ;
 35538                                  ;   HISTORY
 35539                                  ;       Created 16-Mar-1992 by JeffPar
 35540                                  ;
 35541                                  ;----------------------------------------------------------------------------
 35542                                  
 35543                                  skip_line:
 35544 00004171 E82800                          call    get_char
 35545 00004174 7204                            jc	short skip_line_done
 35546 00004176 3C0A                            cmp     al,lf ; 0Ah
 35547 00004178 75F7                            jne	short skip_line
 35548                                  skip_line_done:
 35549                                  num_done:	; 18/12/2022
 35550 0000417A C3                              retn
 35551                                  
 35552                                  ;----------------------------------------------------------------------------
 35553                                  ;
 35554                                  ;   get_number: return binary equivalent of numeric string
 35555                                  ;
 35556                                  ;   INPUT
 35557                                  ;    ES:SI -> position in config.sys
 35558                                  ;       CX == remaining bytes in config.sys
 35559                                  ;
 35560                                  ;   OUTPUT
 35561                                  ;       AL == non-digit encountered
 35562                                  ;       BX == binary #
 35563                                  ;    ES:SI -> just past 1st non-digit
 35564                                  ;       CX == # bytes remaining from that point
 35565                                  ;
 35566                                  ;   OTHER REGS USED
 35567                                  ;       AX
 35568                                  ;
 35569                                  ;   NOTES
 35570                                  ;       None
 35571                                  ;
 35572                                  ;   HISTORY
 35573                                  ;       Created 16-Mar-1992 by JeffPar
 35574                                  ;
 35575                                  ;----------------------------------------------------------------------------
 35576                                  
 35577                                  ; 13/05/2019
 35578                                  
 35579                                  get_number:
 35580 0000417B 29DB                            sub     bx,bx           ; BX = result
 35581                                  num_loop:
 35582 0000417D E81C00                          call    get_char        ;
 35583 00004180 72F8                            jc	short num_done	;
 35584 00004182 3C30                            cmp     al,'0'          ; convert to value
 35585 00004184 72F4                            jb	short num_done	; no more number
 35586 00004186 3C39                            cmp     al,'9'          ;
 35587 00004188 77F0                            ja	short num_done	;
 35588 0000418A 50                              push    ax              ;
 35589 0000418B B80A00                          mov     ax,10           ;
 35590 0000418E 52                              push    dx              ;
 35591 0000418F F7E3                            mul     bx              ;
 35592 00004191 5A                              pop     dx              ;
 35593 00004192 89C3                            mov     bx,ax           ;
 35594 00004194 58                              pop     ax              ;
 35595 00004195 2C30                            sub     al,'0'          ;
 35596 00004197 98                              cbw                     ;
 35597 00004198 01C3                            add     bx,ax           ;
 35598 0000419A EBE1                            jmp	short num_loop	;
 35599                                  
 35600                                  	; 18/12/2022
 35601                                  ;num_done:
 35602                                          ;retn
 35603                                  
 35604                                  ;----------------------------------------------------------------------------
 35605                                  ;
 35606                                  ;   get_char:  return next character, advance ES:SI, and decrement CX
 35607                                  ;
 35608                                  ;   INPUT
 35609                                  ;    ES:SI -> position in config.sys
 35610                                  ;       CX == remaining bytes in config.sys
 35611                                  ;
 35612                                  ;   OUTPUT
 35613                                  ;       AL == next character
 35614                                  ;    ES:SI -> just past next character
 35615                                  ;       CX == # bytes remaining from that point
 35616                                  ;
 35617                                  ;   OTHER REGS USED
 35618                                  ;       AX
 35619                                  ;
 35620                                  ;   NOTES
 35621                                  ;       None
 35622                                  ;
 35623                                  ;   HISTORY
 35624                                  ;       Created 16-Mar-1992 by JeffPar
 35625                                  ;
 35626                                  ;----------------------------------------------------------------------------
 35627                                  
 35628                                  get_char:
 35629 0000419C 83E901                          sub     cx,1            ; use SUB to set carry,zero
 35630 0000419F 7205                            jb	short get_fail	; out of data
 35631                                          ;lods	byte ptr es:[si] ;
 35632 000041A1 26                      	es	
 35633 000041A2 AC                      	lodsb
 35634 000041A3 88C4                            mov     ah,al           ;
 35635 000041A5 C3                              retn			;
 35636                                  get_fail:                       ; restore CX to zero
 35637 000041A6 B90000                          mov     cx,0            ; leave carry set, zero not set
 35638                                  nearby_ret:
 35639 000041A9 C3                              retn
 35640                                  
 35641                                  ;----------------------------------------------------------------------------
 35642                                  ;
 35643                                  ;   query_user: ask user whether to execute current config.sys command
 35644                                  ;
 35645                                  ;   INPUT
 35646                                  ;       AL == current command code
 35647                                  ;    ES:SI -> current command line in config.sys
 35648                                  ;    config_cmd == current command code, but with QUERY bit intact
 35649                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 35650                                  ;
 35651                                  ;   OUTPUT
 35652                                  ;       CF set if command should be ignored (it is also REM'ed out)
 35653                                  ;
 35654                                  ;   OTHER REGS USED
 35655                                  ;       BX, CX, DX, DI
 35656                                  ;
 35657                                  ;   NOTES
 35658                                  ;       None
 35659                                  ;
 35660                                  ;   HISTORY
 35661                                  ;       Created 16-Mar-1992 by JeffPar
 35662                                  ;
 35663                                  ;----------------------------------------------------------------------------
 35664                                  
 35665                                  	; 31/12/2022 - Retro UNIX 386 v4.2 (Modified MSDOS 6.21 IO.SYS)
 35666                                  	; (SYSINIT:4AE5h)
 35667                                  
 35668                                  	; 12/12/2022
 35669                                  query_user:
 35670 000041AA F606[5B48]04                    test    byte [bQueryOpt],4	; answer no to everything?
 35671                                  	; 01/01/2023
 35672 000041AF 7403                    	jz	short qu_1		;
 35673 000041B1 E9BA00                  	jmp	skip_all
 35674                                  	; 12/12/2022
 35675                                  	;;jmp	short skip_all		;
 35676                                  	;jnz	short skip_all
 35677                                  qu_1:
 35678 000041B4 F606[5B48]02            	test    byte [bQueryOpt],2	; answer yes to everything?
 35679 000041B9 75EE                            jnz	short nearby_ret	; yes (and return carry clear!)
 35680 000041BB 50                              push    ax                      ;
 35681 000041BC A0[DF14]                        mov     al,[config_cmd]         ;
 35682 000041BF F606[5B48]01                    test    byte [bQueryOpt],1	; query every command?
 35683 000041C4 7506                            jnz	short query_all		; yes
 35684 000041C6 A880                            test    al,CONFIG_OPTION_QUERY  ;
 35685                                  	; 01/01/2023
 35686 000041C8 7502                    	jnz	short query_all		;
 35687                                  	; 12/12/2022
 35688                                  	;;jmp	short do_cmd		;
 35689                                  	;jz	short do_cmd ; cf=0
 35690                                  
 35691                                  	; 01/01/2023
 35692 000041CA 58                      	pop	ax
 35693 000041CB C3                      	retn
 35694                                  
 35695                                  query_all:
 35696                                  
 35697                                  ;   Search for the command code (AL) in "comtab", and then print
 35698                                  ;   out the corresponding keyword, followed by the rest of the actual
 35699                                  ;   line pointed to by ES:SI
 35700                                  
 35701 000041CC 56                              push    si                      ; save pointer to rest of CONFIG.SYS line
 35702 000041CD BA[684E]                        mov     dx,_$AutoPrmpt    	;
 35703 000041D0 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 35704 000041D2 7451                            jz	short generic_prompt	; config_cmd must have been 0
 35705                                  
 35706 000041D4 88C6                            mov     dh,al                   ; save config_cmd in DH
 35707 000041D6 29DB                            sub     bx,bx                   ;
 35708 000041D8 BF[A848]                        mov     di,comtab		;
 35709                                  find_match:                             ;
 35710 000041DB 8A1D                            mov     bl,[di]                 ; get size of current keyword
 35711 000041DD 08DB                            or      bl,bl                   ;
 35712 000041DF 7425                            jz	short line_print	; end of table
 35713 000041E1 47                              inc     di                      ;
 35714 000041E2 3A01                            cmp     al,[di+bx]              ; match?
 35715 000041E4 7405                            je	short cmd_match		; yes
 35716 000041E6 8D7901                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 35717                                  	; 13/05/2019	
 35718 000041E9 EBF0                            jmp	short find_match	; loop
 35719                                  cmd_match:                              ;
 35720 000041EB 8A4DFF                          mov     cl,[di-1]               ;
 35721 000041EE B500                            mov	ch,0                    ;
 35722 000041F0 B402                            mov     ah,STD_CON_OUTPUT ; 2
 35723                                  cmd_print:                              ;
 35724 000041F2 8A05                            mov     al,[di]                 ;
 35725 000041F4 47                              inc     di                      ;
 35726 000041F5 88C2                            mov     dl,al                   ;
 35727 000041F7 CD21                            int     21h                     ;
 35728 000041F9 E2F7                            loop    cmd_print               ;
 35729 000041FB B23D                            mov     dl,'='                  ;
 35730 000041FD 80FE56                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 35731 00004200 7502                            jne	short cmd_notset	;
 35732 00004202 B220                            mov     dl,' '                  ;
 35733                                  cmd_notset:
 35734 00004204 CD21                            int     21h                     ; '=' looks funny on SET commands
 35735                                  line_print:                             ;
 35736                                  	;lods	byte ptr es:[si]        ;
 35737 00004206 26                              es
 35738 00004207 AC                      	lodsb
 35739 00004208 08C0                    	or      al,al                   ;
 35740 0000420A 7502                            jnz	short non_null		;
 35741 0000420C B020                            mov     al,' '                  ;
 35742                                  non_null:                               ;
 35743 0000420E 3C20                            cmp     al,' '                  ; control code?
 35744 00004210 7210                            jb	short prompt_user	; yes, assume end of line
 35745 00004212 7506                            jne	short non_space		;
 35746 00004214 26803C20                        cmp     byte [es:si],' '	;
 35747 00004218 7208                            jb	short prompt_user	;
 35748                                  non_space:                              ;
 35749 0000421A 88C2                            mov     dl,al                   ;
 35750 0000421C B402                            mov     ah,STD_CON_OUTPUT ; 2	;
 35751 0000421E CD21                            int     21h                     ;
 35752 00004220 EBE4                            jmp	short line_print	;
 35753                                  prompt_user:                            ;
 35754 00004222 BA[064E]                        mov     dx,_$InterPrmpt		;
 35755                                  
 35756                                  generic_prompt:
 35757 00004225 E80104                          call    print                   ;
 35758                                  input_loop:                             ;
 35759 00004228 B400                            mov     ah,0                    ; read a key
 35760 0000422A CD16                            int     16h                     ;
 35761 0000422C 08C0                            or      al,al                   ; is it a function key?
 35762 0000422E 750F                            jnz	short not_func		; no
 35763 00004230 80FC3F                          cmp     ah,3Fh                  ; F5 function key?
 35764 00004233 75F3                            jne	short input_loop	; no
 35765 00004235 A0[124E]                        mov     al,[_$NO]                  ;
 35766 00004238 800E[5B48]04                    or      byte [bQueryOpt],4	; no more queries
 35767 0000423D EB21                            jmp     short legal_char        ;
 35768                                  not_func:
 35769 0000423F 24DF                            and     al,~20h ; 0DFh		; converting to upper case
 35770 00004241 3A06[124E]                      cmp     al,[_$NO]		; verify character is legal
 35771 00004245 7419                            je	short legal_char	;
 35772 00004247 3A06[0E4E]                      cmp     al,[_$YES]		;
 35773 0000424B 7413                            je	short legal_char	;
 35774 0000424D 803E[DF14]00                    cmp     byte [config_cmd],0	;
 35775 00004252 74D4                            je	short input_loop	; don't allow Esc on this query
 35776 00004254 3C1B                            cmp     al,1Bh                  ; Esc?
 35777 00004256 75D0                            jne	short input_loop	;
 35778 00004258 800E[5B48]02                    or      byte [bQueryOpt],2	; no more interactive boot prompts
 35779 0000425D A0[0E4E]                        mov     al,[_$YES]
 35780                                  legal_char:                             ;
 35781 00004260 E881FE                          call    disp_input              ;
 35782 00004263 5E                              pop     si                      ; restore pointer to rest of CONFIG.SYS line
 35783                                  
 35784 00004264 3A06[124E]                      cmp     al,[_$NO]		; process line?
 35785 00004268 7403                            je	short skip_cmd		; no
 35786                                  	; 12/12/2022
 35787 0000426A F8                      	clc
 35788                                  do_cmd:
 35789 0000426B 58                      	pop     ax			;
 35790                                  	; 12/12/2022
 35791                                  	; cf=0
 35792                                  	;clc				; just do the command
 35793 0000426C C3                      	retn
 35794                                  
 35795                                  skip_cmd:
 35796 0000426D 58                      	pop     ax			;
 35797                                  skip_all:
 35798 0000426E B430                    	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 35799 00004270 F9                      	stc
 35800 00004271 C3                      	retn
 35801                                  
 35802                                  ;----------------------------------------------------------------------------
 35803                                  ;
 35804                                  ;   print_error: displays multi-config error conditions
 35805                                  ;
 35806                                  ;   INPUT
 35807                                  ;    Carry set to pause, clear to not
 35808                                  ;    ES:SI -> current command line in config.sys
 35809                                  ;
 35810                                  ;   OUTPUT
 35811                                  ;       None
 35812                                  ;
 35813                                  ;   OTHER REGS USED
 35814                                  ;       None
 35815                                  ;
 35816                                  ;   NOTES
 35817                                  ;       None
 35818                                  ;
 35819                                  ;   HISTORY
 35820                                  ;       Created 16-Mar-1992 by JeffPar
 35821                                  ;
 35822                                  ;----------------------------------------------------------------------------
 35823                                  
 35824                                  print_error:
 35825 00004272 50                              push    ax
 35826 00004273 53                              push    bx
 35827 00004274 51                              push    cx
 35828 00004275 52                              push    dx
 35829 00004276 1E                              push    ds
 35830 00004277 0E                              push    cs
 35831 00004278 1F                              pop     ds
 35832 00004279 9C                              pushf
 35833 0000427A E81EFC                          call    get_linenum
 35834 0000427D 891E[AD02]                      mov     [linecount],bx
 35835 00004281 E850E7                          call    error_line
 35836 00004284 9D                              popf
 35837 00004285 7319                            jnc	short pe_ret
 35838 00004287 BA[CD4C]                        mov     dx,_$PauseMsg
 35839 0000428A E89C03                          call    print
 35840 0000428D B8070C                          mov     ax,0C07h		; flush input buffer, then wait for key
 35841 00004290 CD21                            int     21h			; wait for a key
 35842 00004292 08C0                            or      al,al			; extended key?
 35843 00004294 7504                            jnz	short pe_1		; no
 35844 00004296 B407                            mov     ah,07h			; yes
 35845 00004298 CD21                            int     21h			; eat it too
 35846                                  pe_1:     
 35847 0000429A BA[764B]                	mov     dx,crlfm
 35848 0000429D E88903                          call    print
 35849                                  pe_ret: 
 35850 000042A0 1F                      	pop     ds
 35851 000042A1 5A                              pop     dx
 35852 000042A2 59                              pop     cx
 35853 000042A3 5B                              pop     bx
 35854 000042A4 58                              pop     ax
 35855 000042A5 C3                      	retn
 35856                                  
 35857                                  ;----------------------------------------------------------------------------
 35858                                  
 35859                                  ;   This function is very simple: it merely prepends a "/D" to the
 35860                                  ;   command-line for the shell; this (undocumented) switch disables
 35861                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 35862                                  ;   displayed when there's no AUTOEXEC.BAT.
 35863                                  
 35864                                  disable_autoexec:
 35865                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 35866                                  	; 17/04/2019 - Retro DOS v4.0
 35867                                  
 35868 000042A6 F606[5B48]04            	test	byte [bQueryOpt],4
 35869 000042AB 7443                    	jz	short disable_exit
 35870 000042AD F606[5148]01            	test	byte [dae_flag],1
 35871 000042B2 753C                    	jnz	short disable_exit
 35872 000042B4 800E[5148]01            	or	byte [dae_flag],1
 35873                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 35874 000042B9 810E[5B48]0201          	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 35875 000042BF BA4420                  	mov     dx,'D ' ; 2044h
 35876                                  dae_1:
 35877                                          ;mov	al,[def_swchr]
 35878 000042C2 A0[9047]                	mov     al,[command_line-1]     ; get default switchchar
 35879 000042C5 08C0                            or      al,al                   ; anything there?
 35880 000042C7 7427                            jz	short disable_exit	; no, disable_autoexec already called
 35881 000042C9 8A1E[9147]                      mov     bl,[command_line]       ;
 35882 000042CD B700                            mov     bh,0                    ; BX == command-line length
 35883 000042CF 89D9                            mov     cx,bx                   ;
 35884 000042D1 80C303                          add     bl,3                    ;
 35885 000042D4 80FB7E                          cmp     bl,126                  ;
 35886 000042D7 7717                            ja	short disable_exit	;
 35887 000042D9 881E[9147]                      mov     [command_line],bl       ; update length
 35888 000042DD 81C3[9247]                      add     bx,command_line+1	; make sure we move the NULL too
 35889 000042E1 41                              inc     cx                      ; (just for consistency sake)
 35890                                  disable_loop:                           ;
 35891 000042E2 8A67FD                          mov     ah,[bx-3]               ;
 35892 000042E5 8827                            mov     [bx],ah                 ;
 35893 000042E7 4B                              dec     bx                      ;
 35894 000042E8 E2F8                            loop    disable_loop            ;
 35895 000042EA 8847FE                          mov     [bx-2],al               ;
 35896                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 35897 000042ED 8957FF                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 35898                                          ;mov	byte [command_line-1],0 ;
 35899                                  disable_exit:                           ;
 35900 000042F0 C3                              retn
 35901                                  
 35902                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 35903 000042F1 803E[5B48]01            	cmp     byte [bQueryOpt],1
 35904 000042F6 75F8                    	jnz     short disable_exit
 35905 000042F8 F606[5148]02            	test	byte [dae_flag],2
 35906 000042FD 75F1                    	jnz     short disable_exit
 35907 000042FF 800E[5148]02            	or      byte [dae_flag],2
 35908 00004304 BA2059                  	mov     dx,' Y'
 35909 00004307 EBB9                    	jmp     short dae_1
 35910                                  
 35911                                  ;endif  ;MULTI_CONFIG
 35912                                  
 35913                                  ;%endif	; 02/11/2022
 35914                                  
 35915                                  
 35916                                  ; 19/04/2019 - Retro DOS v4.0
 35917                                  
 35918                                  ;----------------------------------------------------------------------------
 35919                                  ;
 35920                                  ; procedure : delim
 35921                                  ;
 35922                                  ;----------------------------------------------------------------------------
 35923                                  
 35924                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35925                                  ; (SYSINIT:4C45h)
 35926                                  
 35927                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35928                                  ;%if 0
 35929                                  ;;ifdef	MULTI_CONFIG
 35930                                  ;
 35931                                  any_delim:
 35932 00004309 3C0D                    	cmp	al,cr
 35933 0000430B 7427                    	je	short delim_ret
 35934 0000430D 3C0A                    	cmp	al,lf
 35935 0000430F 7423                    	je	short delim_ret
 35936 00004311 3C5B                    	cmp	al,'['
 35937 00004313 741F                    	je	short delim_ret
 35938 00004315 3C5D                    	cmp	al,']'
 35939 00004317 741B                    	je	short delim_ret
 35940                                  ;
 35941                                  ;;endif ;MULTI_CONFIG
 35942                                  ;%endif ; 02/11/2022
 35943                                  
 35944                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35945                                  	; (SYSINIT:3450h)	
 35946                                  delim:
 35947 00004319 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 35948 0000431B 7417                    	je	short delim_ret
 35949                                  
 35950 0000431D 3C00                    	cmp	al,0		; special case for sysinit!!!
 35951 0000431F 7413                    	je	short delim_ret
 35952                                  
 35953                                  org_delim:			; used by organize routine except for getting
 35954 00004321 3C20                    	cmp	al,' '          ; the filename.
 35955 00004323 740F                    	je	short delim_ret
 35956 00004325 3C09                            cmp     al,tab ; 9
 35957 00004327 740B                    	je	short delim_ret
 35958 00004329 3C3D                    	cmp	al,'='
 35959 0000432B 7407                    	je	short delim_ret
 35960 0000432D 3C2C                    	cmp	al,','
 35961 0000432F 7403                    	je	short delim_ret
 35962 00004331 3C3B                    	cmp	al,';'
 35963                                  
 35964                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35965                                  
 35966                                  ; 04/01/2023 - Retro DOS v4.2
 35967                                  ;ifdef	MULTI_CONFIG
 35968                                  ;   Make sure there's no chance of a false EOF indication
 35969 00004333 F8                      	clc
 35970                                  ;endif
 35971                                  	; 02/11/2022
 35972                                  delim_ret:
 35973                                  	; 04/01/2023
 35974                                  	; cf = 0
 35975 00004334 C3                      	retn
 35976                                  
 35977                                  ;----------------------------------------------------------------------------
 35978                                  ;
 35979                                  ; procedure : newline
 35980                                  ;
 35981                                  ;  newline returns with first character of next line
 35982                                  ;
 35983                                  ;----------------------------------------------------------------------------
 35984                                  
 35985                                  newline:
 35986 00004335 E885E6                  	call	getchr			;skip non-control characters
 35987 00004338 7207                    	jc	short nl_ret
 35988 0000433A 3C0A                    	cmp	al,lf			;look for line feed
 35989 0000433C 75F7                    	jne	short newline
 35990 0000433E E87CE6                  	call	getchr
 35991                                  nl_ret:
 35992 00004341 C3                      	retn
 35993                                  
 35994                                  ;----------------------------------------------------------------------------
 35995                                  ; 
 35996                                  ; procedure : mapcase
 35997                                  ;
 35998                                  ;----------------------------------------------------------------------------
 35999                                  
 36000                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 36001                                  
 36002                                  	; 04/01/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 36003                                  	; (SYSINIT:4C7Eh)
 36004                                  mapcase:
 36005 00004342 51                      	push	cx
 36006 00004343 56                      	push	si
 36007 00004344 1E                      	push	ds
 36008                                  
 36009 00004345 06                      	push	es
 36010 00004346 1F                      	pop	ds
 36011                                  
 36012                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36013                                  
 36014                                  ; 04/01/2023 - Retro DOS 4.2
 36015                                  
 36016                                  ;ifdef	MULTI_CONFIG
 36017 00004347 88C3                    	mov	bl,al			; same cmd code this line
 36018                                  ;else
 36019                                  ;	xor	si,si
 36020                                  ;endif
 36021                                  	; 02/11/2022
 36022                                  	; 04/01/2023 - Retro DOS 4.2
 36023                                  	;xor	si, si
 36024                                  
 36025                                  convloop:
 36026 00004349 AC                      	lodsb
 36027 0000434A 3C61                    	cmp	al,'a'
 36028 0000434C 7209                    	jb	short noconv
 36029 0000434E 3C7A                    	cmp	al,'z'
 36030 00004350 7705                    	ja	short noconv
 36031 00004352 2C20                    	sub	al,20h
 36032 00004354 8844FF                  	mov	[si-1],al
 36033                                  noconv:
 36034                                  
 36035                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36036                                  
 36037                                  ; 04/01/2023 - Retro DOS 4.2
 36038                                  ;ifdef	MULTI_CONFIG
 36039                                  
 36040                                  ;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 36041                                  ;   upper-case a line at a time, after we've been able to figure out whether
 36042                                  ;   the line is a SET command or not (since we don't want to upper-case
 36043                                  ;   anything after the "=" in a SET)
 36044                                  ;
 36045 00004357 80FB56                  	cmp	bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 36046 0000435A 7504                    	jne	short check_eol		; no, just check for end-of-line
 36047 0000435C 3C3D                    	cmp	al,'='                  ; separator between SET var and value?
 36048 0000435E 740A                    	je	short convdone		; yes
 36049                                  check_eol:
 36050 00004360 3C0D                    	cmp	al,cr
 36051 00004362 7406                    	je	short convdone
 36052 00004364 3C0A                    	cmp	al,lf
 36053 00004366 7402                    	je	short convdone
 36054                                  ;endif
 36055                                  	; 02/11/2022
 36056 00004368 E2DF                    	loop	convloop
 36057                                  convdone:
 36058 0000436A 1F                      	pop	ds
 36059 0000436B 5E                      	pop	si
 36060 0000436C 59                      	pop	cx
 36061 0000436D C3                      	retn
 36062                                  
 36063                                  ;----------------------------------------------------------------------------
 36064                                  ;
 36065                                  ; procedure : round
 36066                                  ;
 36067                                  ; round the values in memlo and memhi to paragraph boundary.
 36068                                  ; perform bounds check.
 36069                                  ;
 36070                                  ;----------------------------------------------------------------------------
 36071                                  
 36072                                  round:
 36073 0000436E 50                      	push	ax
 36074 0000436F 2EA1[6003]              	mov	ax,[cs:memlo]
 36075                                  
 36076 00004373 E8F3CD                  	call	ParaRound		; para round up
 36077                                  
 36078 00004376 2E0106[6203]            	add	[cs:memhi],ax
 36079 0000437B 2EC706[6003]0000        	mov	word [cs:memlo],0
 36080 00004382 2EA1[6203]              	mov	ax,[cs:memhi]		; ax = new memhi
 36081 00004386 2E3B06[A302]            	cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 36082 0000438B 7322                    	jae	short mem_err
 36083 0000438D 2EF606[E414]02          	test	byte [cs:setdevmarkflag],for_devmark ; 2
 36084 00004393 7418                    	jz	short skip_set_devmarksize
 36085 00004395 06                      	push	es
 36086 00004396 56                      	push	si
 36087 00004397 2E8B36[E214]            	mov	si,[cs:devmark_addr]
 36088 0000439C 8EC6                    	mov	es,si
 36089 0000439E 29F0                    	sub	ax,si
 36090 000043A0 48                      	dec	ax
 36091                                  	;mov	[es:3],ax
 36092 000043A1 26A30300                	mov	[es:devmark.size],ax	; paragraph
 36093 000043A5 2E8026[E414]FD          	and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 36094 000043AB 5E                      	pop	si
 36095 000043AC 07                      	pop	es
 36096                                  skip_set_devmarksize:
 36097 000043AD 58                      	pop	ax
 36098                                  	; 11/12/2022
 36099                                  	; cf = 0
 36100                                  	; 02/11/2022
 36101                                  	;clc	; ? (not needed here)	; clear carry
 36102 000043AE C3                      	retn
 36103                                  
 36104                                  ;----------------------------------------------------------------------------
 36105                                  
 36106                                  mem_err:
 36107                                  	; 11/12/2022
 36108 000043AF 0E                      	push	cs
 36109 000043B0 1F                      	pop	ds
 36110                                  mem_err2:
 36111 000043B1 BA[4F4C]                	mov	dx,badmem
 36112                                  	;push	cs
 36113                                  	;pop	ds
 36114 000043B4 E87202                  	call	print
 36115 000043B7 E9E8CD                  	jmp	stall
 36116                                  
 36117                                  ;----------------------------------------------------------------------------
 36118                                  ;
 36119                                  ; procedure : calldev
 36120                                  ;
 36121                                  ;----------------------------------------------------------------------------
 36122                                  
 36123                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 36124                                  	; (SYSINIT:34E0h)
 36125                                  calldev:
 36126 000043BA 2E8E1E[F51F]            	mov	ds,[cs:DevEntry+2]
 36127 000043BF 2E031E[F31F]            	add	bx,[cs:DevEntry]	; do a little relocation
 36128 000043C4 8B07                    	mov	ax,[bx]
 36129                                  
 36130 000043C6 2EFF36[F31F]            	push	word [cs:DevEntry]
 36131 000043CB 2EA3[F31F]              	mov	word [cs:DevEntry],ax
 36132 000043CF BB[6803]                	mov	bx,packet
 36133 000043D2 2EFF1E[F31F]            	call	far [cs:DevEntry]
 36134 000043D7 2E8F06[F31F]            	pop	word [cs:DevEntry]
 36135 000043DC C3                      	retn
 36136                                  
 36137                                  ;----------------------------------------------------------------------------
 36138                                  ;
 36139                                  ; procedure : todigit
 36140                                  ;
 36141                                  ;----------------------------------------------------------------------------
 36142                                  
 36143                                  todigit:
 36144 000043DD 2C30                    	sub	al,'0'
 36145                                  	;jb	short notdig  ; 02/11/2022
 36146                                  	; 12/12/2022
 36147 000043DF 7203                    	jb	short notdig2
 36148                                  	;cmp	al,9
 36149                                  	;ja	short notdig
 36150                                  	;clc
 36151                                  	;retn
 36152                                  	; 12/12/2022
 36153 000043E1 3C0A                    	cmp	al,10
 36154 000043E3 F5                      	cmc
 36155                                  notdig:
 36156                                  	;stc
 36157                                  notdig2:
 36158 000043E4 C3                      	retn
 36159                                  
 36160                                  ;----------------------------------------------------------------------------
 36161                                  ;
 36162                                  ; procedure : getnum
 36163                                  ;
 36164                                  ; getnum parses a decimal number.
 36165                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 36166                                  ; error), if number is bad carry is set, zero is set, ax=0.
 36167                                  ;
 36168                                  ;----------------------------------------------------------------------------
 36169                                  
 36170                                  getnum:
 36171 000043E5 53                      	push	bx
 36172 000043E6 31DB                    	xor	bx,bx			; running count is zero
 36173                                  b2:
 36174 000043E8 E8F2FF                  	call	todigit 		; do we have a digit ?
 36175 000043EB 7247                    	jc	short badnum		; no, bomb
 36176                                  
 36177 000043ED 93                      	xchg	ax,bx			; put total in ax
 36178 000043EE 53                      	push	bx			; save digit (0 to 9)
 36179                                  	;mov	bx,10			; base of arithmetic
 36180                                  	; 12/12/2022
 36181 000043EF B30A                    	mov	bl,10
 36182 000043F1 F7E3                    	mul	bx			; shift by one decimal digit
 36183 000043F3 5B                      	pop	bx			; get back digit (0 to 9)
 36184 000043F4 00D8                    	add	al,bl			; get total
 36185 000043F6 80D400                  	adc	ah,0			; make that 16 bits
 36186 000043F9 7239                    	jc	short badnum		; too big a number
 36187                                  
 36188 000043FB 93                      	xchg	ax,bx			; stash total
 36189                                  
 36190 000043FC E8BEE5                  	call	getchr			;get next digit
 36191 000043FF 722D                    	jc	short b1		; no more characters
 36192 00004401 3C20                    	cmp	al,' ' 			; space?
 36193 00004403 741F                    	je	short b15		; then end of digits
 36194 00004405 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 36195 00004407 741B                    	je	short b15		; then end of digits.
 36196 00004409 3C09                    	cmp	al, tab ; 9		; tab
 36197 0000440B 7417                    	je	short b15
 36198 0000440D 2E3A06[AC02]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 36199 00004412 7410                    	je	short b15
 36200 00004414 3C2F                    	cmp	al,'/'			; see if another switch follows
 36201                                  	; 12/12/2022
 36202                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36203                                  	;nop				; cas - remnant of old bad code
 36204                                  	;nop
 36205 00004416 740C                    	je	short b15
 36206 00004418 3C0A                    	cmp	al,lf			; line-feed?
 36207 0000441A 7408                    	je	short b15
 36208 0000441C 3C0D                    	cmp	al,cr			; carriage return?
 36209 0000441E 7404                    	je	short b15
 36210 00004420 08C0                    	or	al,al			; end of line separator?
 36211 00004422 75C4                    	jnz	short b2		; no, try as a valid char...
 36212                                  b15:
 36213 00004424 2EFF06[5403]            	inc	word [cs:count]		; one more character to s...
 36214 00004429 2EFF0E[5803]            	dec	word [cs:chrptr]	; back up over separator
 36215                                  b1:
 36216 0000442E 89D8                    	mov	ax,bx			; get proper count
 36217 00004430 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 36218 00004432 5B                      	pop	bx
 36219 00004433 C3                      	retn
 36220                                  badnum:
 36221                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36222                                  	;mov	byte [cs:sepchr],0
 36223 00004434 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 36224                                  	; 12 /12/2022
 36225 00004436 2EA2[AC02]              	mov	[cs:sepchr],al ; 0
 36226 0000443A 5B                      	pop	bx
 36227 0000443B F9                      	stc				; and carry set
 36228 0000443C C3                      	retn
 36229                                  
 36230                                  ;****************************************************************************
 36231                                  
 36232                                  setdoscountryinfo:
 36233                                  
 36234                                  ;----------------------------------------------------------------------------
 36235                                  ;input: es:di -> pointer to dos_country_cdpg_info
 36236                                  ;	ds:0  -> buffer.
 36237                                  ;	si = 0
 36238                                  ;	ax = country id
 36239                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 36240                                  ;	bx = file handle
 36241                                  ;	this routine can handle maximum 438 country_data entries.
 36242                                  ;
 36243                                  ;output: dos_country_cdpg_info set.
 36244                                  ;	 carry set if any file read failure or wrong information in the file.
 36245                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 36246                                  ;	 codepage_id in the file.
 36247                                  ;----------------------------------------------------------------------------
 36248                                  
 36249                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 36250                                  	; (SYSINIT:4D83h)
 36251                                  
 36252 0000443D 57                      	push	di
 36253 0000443E 50                      	push	ax
 36254 0000443F 52                      	push	dx
 36255                                  
 36256 00004440 31C9                    	xor	cx,cx
 36257 00004442 31D2                    	xor	dx,dx
 36258 00004444 B80002                  	mov	ax,512			;read 512 bytes
 36259 00004447 E84F01                  	call	readincontrolbuffer	;read the file header
 36260 0000444A 724D                    	jc	short setdosdata_fail
 36261                                  
 36262 0000444C 06                      	push	es
 36263 0000444D 56                      	push	si
 36264                                  
 36265 0000444E 0E                      	push	cs
 36266 0000444F 07                      	pop	es
 36267                                  
 36268 00004450 BF[F646]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 36269 00004453 B90800                  	mov	cx,8			;length of the signature
 36270 00004456 F3A6                    	repz	cmpsb
 36271                                  
 36272 00004458 5E                      	pop	si
 36273 00004459 07                      	pop	es
 36274 0000445A 753D                    	jnz	short setdosdata_fail 	;signature mismatch
 36275                                  
 36276 0000445C 83C612                  	add	si,18			;si -> county info type
 36277 0000445F 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 36278 00004462 7535                    	jne	short setdosdata_fail 	;cannot proceed. error return
 36279                                  
 36280 00004464 46                      	inc	si			;si -> file offset
 36281 00004465 8B14                    	mov	dx,[si]			;get the info file offset.
 36282 00004467 8B4C02                  	mov	cx,[si+2]
 36283 0000446A B80018                  	mov	ax,6144			;read 6144 bytes.
 36284 0000446D E82901                  	call	readincontrolbuffer	;read info
 36285 00004470 7227                    	jc	short setdosdata_fail
 36286                                  
 36287 00004472 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 36288 00004474 81F9B601                	cmp	cx, 438			;cannot handle more than 438 entries.
 36289 00004478 771F                    	ja	short setdosdata_fail
 36290                                  
 36291 0000447A 46                      	inc	si
 36292 0000447B 46                      	inc	si			;si -> entry information packet
 36293 0000447C 5A                      	pop	dx			;restore code page id
 36294 0000447D 58                      	pop	ax			;restore country id
 36295 0000447E 5F                      	pop	di
 36296                                  
 36297                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 36298 0000447F 3B4402                  	cmp	ax,[si+2]		;compare country_id
 36299 00004482 750A                    	jne	short setdoscntry_next
 36300                                  
 36301 00004484 83FA00                  	cmp	dx,0			;no user specified code page ?
 36302 00004487 7415                    	je	short setdoscntry_any_codepage ;then no need to match code page id.
 36303 00004489 3B5404                  	cmp	dx,[si+4]		;compare code page id
 36304 0000448C 7413                    	je	short setdoscntry_got_it
 36305                                  
 36306                                  setdoscntry_next:
 36307 0000448E 0334                    	add	si,[si]			;next entry
 36308 00004490 46                      	inc	si
 36309 00004491 46                      	inc	si			;take a word for size of entry itself
 36310 00004492 E2EB                    	loop	setdoscntry_find
 36311                                  
 36312 00004494 B9FFFF                  	mov	cx,-1			;signals that bad country id entered.
 36313                                  setdoscntry_fail:
 36314 00004497 F9                      	stc
 36315 00004498 C3                      	retn
 36316                                  
 36317                                  setdosdata_fail:
 36318 00004499 5E                      	pop	si
 36319 0000449A 59                      	pop	cx
 36320 0000449B 5F                      	pop	di
 36321 0000449C EBF9                    	jmp	short setdoscntry_fail
 36322                                  
 36323                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 36324 0000449E 8B5404                  	mov	dx,[si+4]
 36325                                  
 36326                                  setdoscntry_got_it:			;found the matching entry
 36327 000044A1 2E8916[FE46]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 36328 000044A6 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 36329 000044A9 8B4C0C                  	mov	cx,[si+12]
 36330 000044AC B80002                  	mov	ax,512 			;read 512 bytes
 36331 000044AF E8E700                  	call	readincontrolbuffer
 36332 000044B2 72E3                    	jc	short setdoscntry_fail
 36333                                  
 36334 000044B4 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 36335 000044B6 46                      	inc	si
 36336 000044B7 46                      	inc	si			;si -> first entry
 36337                                  
 36338                                  setdoscntry_data:
 36339 000044B8 57                      	push	di			;es:di -> dos_country_cdpg_info
 36340 000044B9 51                      	push	cx			;save # of entry left
 36341 000044BA 56                      	push	si			;si -> current entry in control buffer
 36342                                  
 36343 000044BB 8A4402                  	mov	al,[si+2]		;get data entry id
 36344 000044BE E8AA00                  	call	getcountrydestination	;get the address of destination in es:di
 36345 000044C1 727D                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 36346                                  
 36347 000044C3 8B5404                  	mov	dx,[si+4]		;get offset of data
 36348 000044C6 8B4C06                  	mov	cx,[si+6]
 36349 000044C9 B80042                  	mov	ax,4200h
 36350 000044CC F9                      	stc
 36351 000044CD CD21                    	int	21h			;move pointer
 36352 000044CF 72C8                    	jc	short setdosdata_fail
 36353                                  
 36354 000044D1 BA0002                  	mov	dx,512			;start of data buffer
 36355 000044D4 B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 36356 000044D7 B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 36357 000044D9 F9                      	stc
 36358 000044DA CD21                    	int	21h			;read the country.sys data
 36359 000044DC 72BB                    	jc	short setdosdata_fail 	;read failure
 36360                                  
 36361 000044DE 39C8                    	cmp	ax,cx
 36362 000044E0 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 36363                                  
 36364 000044E2 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 36365 000044E5 8B4C06                  	mov	cx,[si+6]
 36366 000044E8 B80042                  	mov	ax,4200h
 36367 000044EB F9                      	stc
 36368 000044EC CD21                    	int	21h			;move pointer back again
 36369 000044EE 72A9                    	jc	short setdosdata_fail
 36370                                  
 36371 000044F0 56                      	push	si
 36372 000044F1 BE0802                  	mov	si,(512+8)		;get length of the data from the file
 36373 000044F4 8B0C                    	mov	cx,[si]
 36374 000044F6 5E                      	pop	si
 36375 000044F7 BA0002                  	mov	dx,512			;start of data buffer
 36376 000044FA 83C10A                  	add	cx,10			;signature + a word for the length itself
 36377 000044FD B43F                    	mov	ah,3Fh			;read the data from the file.
 36378 000044FF F9                      	stc
 36379 00004500 CD21                    	int	21h
 36380 00004502 7295                    	jc	short setdosdata_fail
 36381                                  
 36382 00004504 39C8                    	cmp	ax,cx
 36383 00004506 7591                    	jne	short setdosdata_fail
 36384                                  
 36385 00004508 8A4402                  	mov	al,[si+2]		;save data id for future use.
 36386 0000450B BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 36387 0000450E 8B0C                    	mov	cx,[si]			;get the length of the file
 36388 00004510 41                      	inc	cx			;take care of a word for lenght of tab
 36389 00004511 41                      	inc	cx			;itself.
 36390 00004512 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 36391 00004516 7781                    	ja	short setdosdata_fail
 36392                                  
 36393                                  	;if	bugfix
 36394 00004518 E83500                  	call	setdbcs_before_copy
 36395                                  	;endif
 36396                                  
 36397 0000451B 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 36398 0000451D 7512                    	jne	short setdoscntry_mov 	;no, don't worry
 36399                                  
 36400 0000451F 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 36401                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 36402 00004523 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 36403                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 36404                                  	
 36405 00004527 57                      	push	di			;save di
 36406                                  
 36407 00004528 50                      	push	ax
 36408 00004529 2EA1[FE46]              	mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 36409 0000452D 894404                  	mov	[si+4],ax		;use the saved one for this !!!!
 36410 00004530 58                      	pop	ax
 36411                                  
 36412                                  setdoscntry_mov:
 36413 00004531 F3A4                    	rep	movsb			;copy the table into dos
 36414 00004533 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 36415 00004535 7509                    	jne	short setdoscntry_data_next
 36416                                  
 36417 00004537 5F                      	pop	di			;restore di
 36418 00004538 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 36419                                  	;pop	word [es:di+26]		;restore
 36420 0000453C 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 36421                                  	;pop	word [es:di+24]
 36422                                  
 36423                                  setdoscntry_data_next:
 36424 00004540 5E                      	pop	si			;restore control buffer pointer
 36425 00004541 59                      	pop	cx			;restore # of entries left
 36426 00004542 5F                      	pop	di			;restore pointer to dso_country_cdpg
 36427 00004543 0334                    	add	si,[si]			;try to get the next entry
 36428 00004545 46                      	inc	si
 36429 00004546 46                      	inc	si			;take a word of entry length itself
 36430 00004547 49                      	dec	cx
 36431 00004548 83F900                  	cmp	cx,0
 36432 0000454B 741D                    	je	short setdoscntry_ok
 36433 0000454D E968FF                  	jmp	setdoscntry_data
 36434                                  
 36435                                  	; 18/12/2022
 36436                                  ;setdoscntry_ok:
 36437                                  	;retn
 36438                                  
 36439                                  ;----------------------------------------------------------------------------
 36440                                  
 36441                                  	;if	bugfix
 36442                                  
 36443                                  setdbcs_before_copy:
 36444 00004550 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 36445 00004552 7516                    	jne	short sdbcsbc		; jump if not
 36446 00004554 26833D00                	cmp	word [es:di],0		; zero byte data block?
 36447 00004558 7410                    	je	short sdbcsbc		; jump if so
 36448                                  
 36449 0000455A 57                      	push	di
 36450 0000455B 50                      	push	ax
 36451 0000455C 51                      	push	cx
 36452 0000455D 268B0D                  	mov	cx,[es:di]		; load block length
 36453 00004560 83C702                  	add	di,2			; points actual data
 36454 00004563 30C0                    	xor	al,al			; fill bytes
 36455 00004565 F3AA                    	rep	stosb			; clear data block
 36456 00004567 59                      	pop	cx
 36457 00004568 58                      	pop	ax
 36458 00004569 5F                      	pop	di
 36459                                  sdbcsbc:
 36460                                  setdoscntry_ok:	; 18/12/2022	
 36461 0000456A C3                      	retn
 36462                                  
 36463                                  	;endif
 36464                                  
 36465                                  ;----------------------------------------------------------------------------
 36466                                  
 36467                                  getcountrydestination:
 36468                                  
 36469                                  ;----------------------------------------------------------------------------
 36470                                  ;get the destination address in the dos country info table.
 36471                                  ;
 36472                                  ;input: al - data id
 36473                                  ;	es:di -> dos_country_cdpg_info
 36474                                  ;on return:
 36475                                  ;	es:di -> destination address of the matching data id
 36476                                  ;	carry set if no matching data id found in dos.
 36477                                  ;----------------------------------------------------------------------------
 36478                                  
 36479                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 36480                                  	; (SYSINIT:4EB2h)
 36481                                  
 36482 0000456B 51                      	push	cx
 36483                                  	;add	di,74
 36484 0000456C 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 36485                                  					;skip the reserved area, syscodepage etc.
 36486 0000456F 268B0D                  	mov	cx,[es:di]		;get the number of entries
 36487 00004572 47                      	inc	di
 36488 00004573 47                      	inc	di			;si -> the first start entry id
 36489                                  
 36490                                  getcntrydest:
 36491 00004574 263805                  	cmp	byte [es:di],al
 36492 00004577 7413                    	je	short getcntrydest_ok
 36493 00004579 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 36494 0000457D 7405                    	je	short getcntrydest_1
 36495                                  
 36496 0000457F 83C705                  	add	di,5			;next data id
 36497 00004582 EB03                    	jmp	short getcntrydest_loop
 36498                                  
 36499                                  getcntrydest_1:
 36500                                  	;add	di,41
 36501 00004584 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 36502                                  getcntrydest_loop:
 36503 00004587 E2EB                    	loop	getcntrydest
 36504 00004589 F9                      	stc
 36505 0000458A EB0B                    	jmp	short getcntrydest_exit
 36506                                  
 36507                                  getcntrydest_ok:
 36508 0000458C 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 36509 0000458E 7503                    	jne	short getcntrydest_ok1
 36510                                  
 36511 00004590 47                      	inc	di			;now di -> cccountryinfolen
 36512 00004591 EB04                    	jmp	short getcntrydest_exit
 36513                                  
 36514                                  getcntrydest_ok1:
 36515 00004593 26C47D01                	les	di,[es:di+1]		;get the destination in es:di
 36516                                  
 36517                                  getcntrydest_exit:
 36518 00004597 59                      	pop	cx
 36519 00004598 C3                      	retn
 36520                                  
 36521                                  ;----------------------------------------------------------------------------
 36522                                  
 36523                                  readincontrolbuffer:
 36524                                  
 36525                                  ;----------------------------------------------------------------------------
 36526                                  ;move file pointer to cx:dx
 36527                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 36528                                  ;si will be set to 0 hence ds:si points to the control buffer.
 36529                                  ;
 36530                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 36531                                  ;	 be moved.
 36532                                  ;	 ax - # of bytes to read
 36533                                  ;	 bx - file handle
 36534                                  ;	 ds - buffer seg.
 36535                                  ;return: the control data information is read into ds:0 - ds:0200.
 36536                                  ;	 cx,dx value destroyed.
 36537                                  ;	 carry set if error in reading file.
 36538                                  ;----------------------------------------------------------------------------
 36539                                  
 36540 00004599 50                      	push	ax			;# of bytes to read
 36541 0000459A B80042                  	mov	ax,4200h
 36542 0000459D F9                      	stc
 36543 0000459E CD21                    	int	21h			;move pointer
 36544 000045A0 59                      	pop	cx			;# of bytes to read
 36545 000045A1 7209                    	jc	short ricb_exit
 36546                                  
 36547 000045A3 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 36548 000045A5 31F6                    	xor	si,si
 36549 000045A7 B43F                    	mov	ah,3Fh			;read into the buffer
 36550 000045A9 F9                      	stc
 36551 000045AA CD21                    	int	21h			;should be less than 1024 bytes.
 36552                                  ricb_exit:
 36553 000045AC C3                      	retn
 36554                                  
 36555                                  ;----------------------------------------------------------------------------
 36556                                  
 36557                                  set_country_path:
 36558                                  
 36559                                  ;----------------------------------------------------------------------------
 36560                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 36561                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 36562                                  ;     assumes current directory is the root directory.
 36563                                  ;out: ds:di -> full path (cntry_drv).
 36564                                  ;     set the cntry_drv string from the country=,,path command.
 36565                                  ;     ds, es, si value saved.
 36566                                  ;----------------------------------------------------------------------------
 36567                                  
 36568                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 36569                                  	; (SYSINIT:4EF4h)
 36570                                  
 36571 000045AD 56                      	push	si
 36572                                  
 36573 000045AE 1E                      	push	ds			;switch ds, es
 36574 000045AF 06                      	push	es
 36575 000045B0 1F                      	pop	ds
 36576 000045B1 07                      	pop	es			;now ds -> confbot, es -> sysinitseg
 36577                                  
 36578 000045B2 E82C00                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 36579 000045B5 7206                    	jc	short scp_default_drv 	;no, use current default drive.
 36580                                  
 36581 000045B7 8A04                    	mov	al,[si]
 36582 000045B9 46                      	inc	si
 36583 000045BA 46                      	inc	si			;si -> next char after ":"
 36584 000045BB EB06                    	jmp	short scp_setdrv
 36585                                  
 36586                                  scp_default_drv:
 36587 000045BD B419                    	mov	ah,19h
 36588 000045BF CD21                    	int	21h
 36589 000045C1 0441                    	add	al,"A"			;convert it to a character.
 36590                                  
 36591                                  scp_setdrv:
 36592 000045C3 2EA2[B346]              	mov	[cs:cntry_drv],al	;set the drive letter.
 36593 000045C7 BF[B646]                	mov	di,cntry_path
 36594 000045CA 8A04                    	mov	al,[si]
 36595 000045CC 3C5C                    	cmp	al, "\"
 36596 000045CE 7404                    	je	short scp_root_dir
 36597                                  
 36598 000045D0 3C2F                    	cmp	al,"/"			;let's accept "/" as an directory delim
 36599                                  	;je	short scp_root_dir
 36600                                  	;jmp	short scp_path
 36601                                  	; 04/01/2023
 36602 000045D2 7501                    	jne	short scp_path
 36603                                  
 36604                                  scp_root_dir:
 36605 000045D4 4F                      	dec	di			;di -> cntry_root
 36606                                  scp_path:
 36607 000045D5 E81D00                  	call	move_asciiz		;copy it
 36608                                  
 36609 000045D8 BF[B346]                	mov	di,cntry_drv
 36610                                  scpath_exit:
 36611                                  
 36612 000045DB 1E                      	push	ds			;switch ds, es
 36613 000045DC 06                      	push	es
 36614 000045DD 1F                      	pop	ds
 36615 000045DE 07                      	pop	es			;ds, es value restored
 36616                                  
 36617 000045DF 5E                      	pop	si
 36618 000045E0 C3                      	retn
 36619                                  
 36620                                  ;----------------------------------------------------------------------------
 36621                                  
 36622                                  chk_drive_letter:
 36623                                  
 36624                                  ;check if ds:[si] is a drive letter followed by ":".
 36625                                  ;assume that every alpha character is already converted to upper case.
 36626                                  ;carry set if not.
 36627                                  
 36628                                  	; 04/01/2023 - Retrodos v4.2
 36629                                  
 36630 000045E1 50                      	push	ax
 36631 000045E2 803C41                  	cmp	byte [si],"A"
 36632                                  	;jb	short cdletter_no
 36633 000045E5 720C                    	jb	short cdletter_exit
 36634 000045E7 803C5A                  	cmp	byte [si],"Z"
 36635 000045EA 7706                    	ja	short cdletter_no
 36636 000045EC 807C013A                	cmp	byte [si+1],":"
 36637                                  	;jne	short cdletter_no
 36638                                  	;jmp	short cdletter_exit
 36639                                  	; 04/01/2023
 36640 000045F0 7401                    	je	short cdletter_exit
 36641                                  
 36642                                  cdletter_no:
 36643 000045F2 F9                      	stc
 36644                                  cdletter_exit:
 36645 000045F3 58                      	pop	ax
 36646 000045F4 C3                      	retn
 36647                                  
 36648                                  ;----------------------------------------------------------------------------
 36649                                  
 36650                                  move_asciiz:
 36651                                  
 36652                                  ;in: ds:si -> source es:di -> target
 36653                                  ;out: copy the string until 0.
 36654                                  ;assumes there exists a 0.
 36655                                  
 36656                                  masciiz_loop:
 36657 000045F5 A4                      	movsb
 36658 000045F6 807CFF00                	cmp	byte [si-1],0	; was it 0?
 36659 000045FA 75F9                    	jne	short masciiz_loop
 36660 000045FC C3                      	retn
 36661                                  
 36662                                  ;----------------------------------------------------------------------------
 36663                                  
 36664                                  ;	ds:dx points to string to output (asciz)
 36665                                  ;
 36666                                  ;	prints <badld_pre> <string> <badld_post>
 36667                                  
 36668                                  badfil:
 36669 000045FD 0E                      	push	cs
 36670 000045FE 07                      	pop	es
 36671                                  
 36672 000045FF 89D6                    	mov	si,dx
 36673                                  badload:
 36674 00004601 BA[B94B]                	mov	dx,badld_pre	; want to print config error
 36675 00004604 BB[764B]                	mov	bx,crlfm
 36676                                  prnerr:
 36677 00004607 0E                      	push	cs
 36678 00004608 1F                      	pop	ds ; *
 36679 00004609 E81D00                  	call	print
 36680                                  prn1:
 36681 0000460C 268A14                  	mov	dl,[es:si]
 36682 0000460F 08D2                    	or	dl,dl
 36683 00004611 7407                    	jz	short prn2
 36684 00004613 B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 36685 00004615 CD21                    	int	21h
 36686 00004617 46                      	inc	si
 36687 00004618 EBF2                    	jmp	short prn1
 36688                                  prn2:
 36689 0000461A 89DA                    	mov	dx,bx
 36690 0000461C E80A00                  	call	print
 36691                                  	; 11/12/2022
 36692                                  	; ds = cs ; *
 36693 0000461F 803E[5303]01            	cmp	byte [donotshownum],1
 36694                                  				; suppress line number when handling command.com
 36695                                  	;cmp	byte [cs:donotshownum],1 
 36696 00004624 7407                    	je	short prnexit
 36697                                  	
 36698                                  	; 18/12/2022
 36699                                  	;call	error_line
 36700 00004626 E9ABE3                  	jmp	error_line
 36701                                  ;prnexit:
 36702                                  	;retn
 36703                                  
 36704                                  ;----------------------------------------------------------------------------
 36705                                  
 36706                                  print:
 36707 00004629 B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 36708 0000462B CD21                    	int	21h
 36709                                  prnexit:	; 18/12/2022
 36710 0000462D C3                      	retn
 36711                                  
 36712                                  ;----------------------------------------------------------------------------
 36713                                  
 36714                                  ;  open device pointed to by dx, al has access code
 36715                                  ;   if unable to open do a device open null device instead
 36716                                  
 36717                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 36718                                  	; (SYSINIT:3764h)
 36719                                  open_dev:
 36720 0000462E E80500                  	call	open_file
 36721 00004631 7309                    	jnc	short open_dev3
 36722                                  
 36723                                  open_dev1:
 36724 00004633 BA[9746]                	mov	dx,nuldev
 36725                                  	; 18/12/2022
 36726                                  	;call	open_file
 36727                                  ;of_retn:
 36728                                  	;retn
 36729                                  	; 18/12/2022
 36730                                  	;jmp	short open_file
 36731                                  open_file:
 36732 00004636 B43D                    	mov	ah,OPEN	; 3Dh
 36733 00004638 F9                      	stc
 36734 00004639 CD21                    	int	21h
 36735                                  of_retn:	; 18/12/2022
 36736 0000463B C3                      	retn
 36737                                  
 36738                                  open_dev3:
 36739 0000463C 89C3                    	mov	bx,ax			; handle from open to bx
 36740                                  	;;xor	ax,ax			; get device info
 36741                                  	;;mov	ah,IOCTL ; 44h
 36742                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 36743                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36744                                  	;xor	ax,ax
 36745                                  	;mov	ah,44h	; IOCTL
 36746                                  	; 11/12/2022
 36747 0000463E B80044                  	mov	ax,4400h ; IOCTL<<8 
 36748                                  
 36749 00004641 CD21                    	int	21h
 36750                                  
 36751 00004643 F6C280                  	test	dl,10000000b ; 80h
 36752 00004646 75F3                    	jnz	short of_retn
 36753                                  
 36754 00004648 B43E                    	mov	ah,CLOSE ; 3Eh
 36755 0000464A CD21                    	int	21h
 36756 0000464C EBE5                    	jmp	short open_dev1
 36757                                  
 36758                                  ;----------------------------------------------------------------------------
 36759                                  
 36760                                  ; 18/12/2022
 36761                                  %if 0
 36762                                  open_file:
 36763                                  	mov	ah,OPEN	; 3Dh
 36764                                  	stc
 36765                                  	int	21h
 36766                                  	retn
 36767                                  %endif
 36768                                  
 36769                                  ;----------------------------------------------------------------------------
 36770                                  
 36771                                  ; test int24. return back to dos with the fake user response of "fail"
 36772                                  
 36773                                  int24:
 36774 0000464E B003                    	mov	al,3			; fail the system call
 36775 00004650 CF                      	iret				; return back to dos.
 36776                                  
 36777                                  ; 19/04/2019 - Retro DOS v4.0
 36778                                  
 36779                                  ;----------------------------------------------------------------------------
 36780                                  ; DATA
 36781                                  ;----------------------------------------------------------------------------
 36782                                  
 36783                                  ;include copyrigh.inc			; copyright statement
 36784                                  
 36785                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 36786                                  
 36787                                  ;MsDosVersion6Copyr:
 36788                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 36789                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 36790                                  
 36791                                  ; 22/10/2022
 36792                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 36793                                  
 36794                                  ; 28/12/2022
 36795                                  %if 0
 36796                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36797                                  MsDosVersion5Copyr:
 36798                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 36799                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 36800                                  %endif
 36801                                  
 36802                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36803                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36804                                  ; 20/04/2019 - Retro DOS v4.0
 36805                                  ;BOOTMES:
 36806                                  ;	db      13
 36807                                  ;	db      10
 36808                                  ;	db      "MS-DOS version "
 36809                                  ;	db      MAJOR_VERSION + "0"
 36810                                  ;	db      "."
 36811                                  ;	db      (MINOR_VERSION / 10) + "0"
 36812                                  ;	db      (MINOR_VERSION % 10) + "0"
 36813                                  ;	db      13,10
 36814                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 36815                                  ;	; 22/10/2022
 36816                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 36817                                  ;	;
 36818                                  ;	db	0
 36819                                  
 36820                                  	; 01/01/2023 - Retro DOS v4.2
 36821                                  
 36822                                  	; 28/12/2022 - Retro DOS v4.1
 36823                                  ;MsDosVersion5Copyr:
 36824                                  ;  	db	13,10,"MS DOS Version 5.0"
 36825                                  ;	db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
 36826                                  
 36827                                  	; 12/12/2022
 36828 00004651 00                      	db	0
 36829                                  ; 12/12/2022
 36830                                  BOOTMES:
 36831 00004652 0D0A                    	db	13,10
 36832                                  	;;db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 36833                                  	; 28/12/2022
 36834                                  	;db 	"Retro DOS v4.1 (Modified MSDOS 5.0) "
 36835                                  	; 01/01/2023
 36836 00004654 526574726F20444F53-     	db 	"Retro DOS v4.2 (Modified MSDOS 6.22) "
 36836 0000465D 2076342E3220284D6F-
 36836 00004666 646966696564204D53-
 36836 0000466F 444F5320362E323229-
 36836 00004678 20                 
 36837                                  	
 36838 00004679 0D0A                    	db	13,10
 36839 0000467B 6279204572646F6761-     	db	"by Erdogan Tan [2023] "
 36839 00004684 6E2054616E205B3230-
 36839 0000468D 32335D20           
 36840 00004691 0D0A                    	db	13,10
 36841 00004693 0D0A2400                	db	13,10,"$",0
 36842                                  
 36843 00004697 4E554C00                nuldev:	db	"NUL",0
 36844 0000469B 434F4E00                condev:	db	"CON",0
 36845 0000469F 41555800                auxdev:	db	"AUX",0
 36846 000046A3 50524E00                prndev:	db	"PRN",0
 36847                                  
 36848                                  ;IFDEF	CONFIGPROC
 36849 000046A7 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 36849 000046B0 595300             
 36850                                  
 36851 000046B3 413A                    cntry_drv:  db	"A:"
 36852 000046B5 5C                      cntry_root: db	"\"
 36853 000046B6 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 36853 000046BF 595300             
 36854                                  	    ;db	52 dup (0)
 36855 000046C2 00<rep 34h>             	    times 52 db 0	
 36856                                  
 36857                                  country_file_signature:
 36858 000046F6 FF434F554E545259        	db	0FFh,'COUNTRY'
 36859                                  
 36860                                  cntrycodepage_id: 
 36861 000046FE 0000                    	dw	0 	
 36862                                  
 36863                                  ;ENDIF ; CONFIGPROC
 36864                                  
 36865                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36866                                  ; (SYSINIT:5081h)
 36867                                  
 36868                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36869                                  ;ifdef	MULTI_CONFIG
 36870 00004700 00                      newcmd:  db	0			; non-zero if non-std shell specified
 36871 00004701 40                      tmplate: db	64                      ; must precede commnd
 36872                                  ;endif
 36873                                  
 36874                                  ;ifdef ROMEXEC
 36875                                  ;	db      7                       ; size of commnd line (excl. null)
 36876                                  ;commnd: db	"COMMAND",0
 36877                                  ;	db	56 dup (0)
 36878                                  ;else
 36879                                  	; 02/11/2022
 36880 00004702 0C                      	db	12                      ; size of commnd line (excl. null)
 36881 00004703 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 36881 0000470C 434F4D00           
 36882                                  	;db	51 dup (0)
 36883 00004710 00<rep 33h>             	times	51 db 0
 36884                                  ;endif
 36885                                  
 36886                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36887                                  ;ifdef	MULTI_CONFIG
 36888 00004743 5C434F4D4D414E442E-     commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 36888 0000474C 434F4D00           
 36889 00004750 022F5000                	 db	2,"/P",0 		; followed by their respective alternate
 36890 00004754 5C4D53444F535C434F-     commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 36890 0000475D 4D4D414E442E434F4D-
 36890 00004766 00                 
 36891 00004767 0B413A5C4D53444F53-     	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 36891 00004770 202F5000           
 36892 00004774 5C444F535C434F4D4D-     commnd4: db	"\DOS\COMMAND.COM",0 	;
 36892 0000477D 414E442E434F4D00   
 36893 00004785 09413A5C444F53202F-     	 db	9,"A:\DOS /P",0		;
 36893 0000478E 5000               
 36894                                  def_swchr:	
 36895 00004790 00                      	 db	0			; default switchchar (referenced as command_line-1)
 36896                                  ;endif
 36897                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36898                                  command_line:
 36899 00004791 022F50                  	db	2,"/P"			; default command.com args
 36900                                  	;db	125 dup (0)
 36901 00004794 00<rep 7Dh>             	times	125 db 0
 36902                                  
 36903                                  pathstring:
 36904                                  	;db	64 dup (0)
 36905 00004811 00<rep 40h>             	times	64 db 0
 36906                                  
 36907                                  
 36908                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36909                                  ; (SYSINIT:51D3h)
 36910                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36911                                  ;%if 0
 36912                                  
 36913                                  dae_flag:
 36914 00004851 00                      	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 36915                                  
 36916                                  ;ifdef	MULTI_CONFIG
 36917                                  
 36918                                  ; 04/03/2022- Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 36919                                  MAX_MULTI_CONFIG equ 9	; max # of multi-config menu items supported
 36920                                  
 36921                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 36922                                  
 36923 00004852 07                      bMenuColor:	db      07h ; 1Fh       ; default fgnd/bgnd color
 36924 00004853 00                      bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 36925 00004854 05                      		db      5               ; video page function # (KEEP AFTER bMenuPage)
 36926 00004855 00                      bLastCol:	db      0               ; ending column on status line
 36927 00004856 18                      bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 36928 00004857 00                      bDisableUI:	db      0               ; 1=disable clean/interactive
 36929                                                                          ; 2=disable default 2-second delay
 36930 00004858 00                      bCRTPage:	db      0               ; value saved from BIOS data area
 36931 00004859 0000                    wCRTStart:	dw      0               ; value saved from BIOS data area
 36932 0000485B 00                      bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 36933 0000485C 01                      bDefBlock:	db      1               ; default block #
 36934 0000485D 00                      bMaxBlock:	db      0               ; maxmimum block #
 36935 0000485E 0000                    offDefBlock:	dw      0               ; offset of name of default block (if any)
 36936 00004860 FF                      secTimeOut:	db      -1 ; 0FFh       ; # of seconds for timeout (-1 == indefinite)
 36937 00004861 00                      secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 36938 00004862 00<rep Ah>              abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 36939 0000486C 0000<rep Ah>            aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 36940 00004880 0000<rep Ah>            aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 36941                                  
 36942 00004894 434F4E4649473D00        szBoot:		db      "CONFIG=",0
 36943 0000489C 4D454E5500              szMenu:		db      "MENU",0
 36944 000048A1 434F4D4D4F4E00          szCommon:	db      "COMMON",0
 36945                                  
 36946                                  ;endif	;MULTI_CONFIG
 36947                                  
 36948                                  comtab:	 ; label byte
 36949                                  
 36950                                  ;            cmd len    command         cmd code
 36951                                  ;            -------    -------         --------
 36952                                  
 36953                                  ;ifdef MULTI_CONFIG
 36954 000048A8 015B5B                          db      1,      "[",            CONFIG_BEGIN
 36955                                  ;endif
 36956 000048AB 05425245414B43                  db      5,      "BREAK",        CONFIG_BREAK
 36957 000048B2 074255464645525342              db      7,      "BUFFERS",      CONFIG_BUFFERS
 36958 000048BB 07434F4D4D454E5459              db      7,      "COMMENT",      CONFIG_COMMENT
 36959 000048C4 07434F554E54525951              db      7,      "COUNTRY",      CONFIG_COUNTRY
 36960 000048CD 0644455649434544                db      6,      "DEVICE",       CONFIG_DEVICE
 36961 000048D5 0A4445564943454849-             db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 36961 000048DE 474855             
 36962 000048E1 03444F5348                      db      3,      "DOS",          CONFIG_DOS
 36963 000048E6 08445249565041524D-             db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 36963 000048EF 50                 
 36964 000048F0 044643425358                    db      4,      "FCBS",         CONFIG_FCBS
 36965 000048F6 0546494C455346                  db      5,      "FILES",        CONFIG_FILES
 36966                                  ;ifdef MULTI_CONFIG
 36967 000048FD 07494E434C5544454A              db      7,      "INCLUDE",      CONFIG_INCLUDE
 36968                                  ;endif
 36969 00004906 07494E5354414C4C49              db      7,      "INSTALL",      CONFIG_INSTALL
 36970 0000490F 0B494E5354414C4C48-             db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 36970 00004918 49474857           
 36971 0000491C 094C41535444524956-             db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 36971 00004925 454C               
 36972                                  ;ifdef MULTI_CONFIG
 36973 00004927 075355424D454E554F              db      7,      "SUBMENU",      CONFIG_SUBMENU
 36974 00004930 094D454E55434F4C4F-             db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 36974 00004939 5252               
 36975 0000493B 0B4D454E5544454641-             db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 36975 00004944 554C5441           
 36976 00004948 084D454E554954454D-             db      8,      "MENUITEM",     CONFIG_MENUITEM
 36976 00004951 45                 
 36977                                  ;endif
 36978 00004952 0A4D554C5449545241-             db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 36978 0000495B 434B4D             
 36979                                  ;ifdef MULTI_CONFIG
 36980 0000495E 074E554D4C4F434B4E              db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 36981                                  ;endif
 36982 00004967 0352454D30                      db      3,      "REM",          CONFIG_REM
 36983                                  ;ifdef MULTI_CONFIG
 36984 0000496C 0353455456                      db      3,      "SET",          CONFIG_SET
 36985                                  ;endif
 36986 00004971 055348454C4C53                  db      5,      "SHELL",        CONFIG_SHELL
 36987                                  ;if    STACKSW
 36988 00004978 06535441434B534B                db      6,      "STACKS",       CONFIG_STACKS
 36989                                  ;endif
 36990 00004980 085357495443484553-             db      8,      "SWITCHES",     CONFIG_SWITCHES
 36990 00004989 31                 
 36991 0000498A 00                      	db	0
 36992                                  
 36993                                  ;%endif ; 02/11/2022
 36994                                  
 36995                                  ; 01/01/2023 - Retro DOS v4.2
 36996                                  %if 0
 36997                                  
 36998                                  comtab:
 36999                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37000                                  	; (SYSINIT:38EDh)
 37001                                  	db      7,      "BUFFERS",      CONFIG_BUFFERS
 37002                                  	db      5,      "BREAK",        CONFIG_BREAK
 37003                                  	db      6,      "DEVICE",       CONFIG_DEVICE
 37004                                  	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 37005                                  	db      5,      "FILES",        CONFIG_FILES
 37006                                  	db      4,      "FCBS",         CONFIG_FCBS
 37007                                  	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 37008                                  	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 37009                                  	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 37010                                  	db      6,      "STACKS",       CONFIG_STACKS
 37011                                  	db      7,      "COUNTRY",      CONFIG_COUNTRY
 37012                                  	db      5,      "SHELL",        CONFIG_SHELL
 37013                                  	db      7,      "INSTALL",      CONFIG_INSTALL
 37014                                  	db      7,      "COMMENT",      CONFIG_COMMENT
 37015                                  	db      3,      "REM",          CONFIG_REM
 37016                                  	db      8,      "SWITCHES",     CONFIG_SWITCHES
 37017                                  	db      3,      "DOS",          CONFIG_DOS
 37018                                  	db	0
 37019                                  
 37020                                  %endif
 37021                                  
 37022                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37023                                  ; (SYSINIT:530Ch)
 37024                                  
 37025                                  deviceparameters:	
 37026                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 37027                                  devp.specialfunc:	; deviceparameters +
 37028 0000498B 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 37029                                  devp.devtype:
 37030 0000498C 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 37031                                  devp.devattr:
 37032 0000498D 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 37033                                  devp.cylinders:
 37034 0000498F 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 37035                                  
 37036 00004991 00<rep 11Eh>            	times	286	db 0
 37037                                  
 37038                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37039                                  ; (SYSINIT:5430h)
 37040                                  	
 37041 00004AAF 0200                    hlim:	dw	2
 37042 00004AB1 0900                    slim:	dw	9
 37043                                  
 37044 00004AB3 00                      drive:	db	0
 37045                                  
 37046                                  switches:
 37047 00004AB4 0000                    	dw	0
 37048                                  
 37049                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37050                                  ; (SYSINIT:5437h)
 37051                                  
 37052                                  ; the following are the recommended bpbs for the media that
 37053                                  ; we know of so far.
 37054                                  
 37055                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37056                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 37057                                  
 37058                                  ; 48 tpi diskettes
 37059                                  
 37060 00004AB6 0002                    bpb48t	dw	512
 37061 00004AB8 02                      	db	2
 37062 00004AB9 0100                    	dw	1
 37063 00004ABB 02                      	db	2
 37064 00004ABC 7000                    	dw	112
 37065 00004ABE D002                    	dw	2*9*40 ; 720
 37066 00004AC0 FD                      	db	0FDh
 37067 00004AC1 0200                    	dw	2
 37068 00004AC3 0900                    	dw	9
 37069 00004AC5 0200                    	dw	2
 37070 00004AC7 00000000                	dd	0
 37071 00004ACB 00000000                        dd      0
 37072                                  
 37073                                  ; 96tpi diskettes
 37074                                  
 37075 00004ACF 0002                    bpb96t:	dw	512
 37076 00004AD1 01                      	db	1
 37077 00004AD2 0100                    	dw	1
 37078 00004AD4 02                      	db	2
 37079 00004AD5 E000                    	dw	224
 37080 00004AD7 6009                    	dw	2*15*80 ; 2400
 37081 00004AD9 F9                      	db	0F9h
 37082 00004ADA 0700                    	dw	7
 37083 00004ADC 0F00                    	dw	15
 37084 00004ADE 0200                    	dw	2
 37085 00004AE0 00000000                	dd	0
 37086 00004AE4 00000000                        dd      0
 37087                                  
 37088                                  ; 3 1/2 inch diskette bpb
 37089                                  
 37090 00004AE8 0002                    bpb35:	dw	512
 37091 00004AEA 02                      	db	2
 37092 00004AEB 0100                    	dw	1
 37093 00004AED 02                      	db	2
 37094 00004AEE 7000                    	dw	112
 37095 00004AF0 A005                    	dw	2*9*80 ; 1440
 37096 00004AF2 F9                      	db	0F9h
 37097 00004AF3 0300                    	dw	3
 37098 00004AF5 0900                    	dw	9
 37099 00004AF7 0200                    	dw	2
 37100 00004AF9 00000000                	dd	0
 37101 00004AFD 00000000                        dd      0
 37102                                        
 37103 00004B01 0002                    bpb35h:	dw	512
 37104 00004B03 01                      	db	1
 37105 00004B04 0100                    	dw	1
 37106 00004B06 02                      	db	2
 37107 00004B07 E000                    	dw	224
 37108 00004B09 400B                    	dw	2*18*80 ; 2880
 37109 00004B0B F0                      	db	0F0h
 37110 00004B0C 0900                    	dw	9
 37111 00004B0E 1200                    	dw	18
 37112 00004B10 0200                    	dw	2
 37113 00004B12 00000000                	dd	0
 37114 00004B16 00000000                        dd      0
 37115                                  
 37116                                  ; m037 - BEGIN
 37117                                  
 37118 00004B1A 0002                    bpb288:	dw	512
 37119 00004B1C 02                      	db	2
 37120 00004B1D 0100                    	dw	1
 37121 00004B1F 02                      	db	2
 37122 00004B20 F000                    	dw	240
 37123 00004B22 8016                    	dw	2*36*80 ; 5760
 37124 00004B24 F0                      	db	0F0h
 37125 00004B25 0900                    	dw	9
 37126 00004B27 2400                    	dw	36
 37127 00004B29 0200                    	dw	2
 37128 00004B2B 00000000                	dd	0
 37129 00004B2F 00000000                        dd      0
 37130                                  
 37131                                  ; m037 - END
 37132                                  
 37133                                  ; 12/05/2019
 37134                                  
 37135 00004B33 90                      align 2
 37136                                  
 37137                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37138                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 37139                                  
 37140 00004B34 [B64A]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 37141 00004B36 [CF4A]                  	    dw	    bpb96t		; 96tpi drives
 37142 00004B38 [E84A]                  	    dw	    bpb35		; 3.5" drives
 37143                                  ; the following are not supported, so default to 3.5" media layout
 37144 00004B3A [E84A]                  	    dw	    bpb35		; not used - 8" drives
 37145 00004B3C [E84A]                  	    dw	    bpb35		; not used - 8" drives
 37146 00004B3E [E84A]                  	    dw	    bpb35		; not used - hard files
 37147 00004B40 [E84A]                  	    dw	    bpb35		; not used - tape drives
 37148 00004B42 [014B]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 37149 00004B44 [E84A]                  	    dw	    bpb35		; ERIMO				m037
 37150 00004B46 [1A4B]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 37151                                  
 37152                                  switchlist: 
 37153 00004B48 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 37154                                  
 37155                                  ;----------------------------------------------------------------------------
 37156                                  ; Messages
 37157                                  ;----------------------------------------------------------------------------
 37158                                  
 37159                                  ; 19/04/2019 - Retro DOS v4.0
 37160                                  
 37161                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 37162                                  
 37163 00004B51 00                      	db 	0
 37164                                  
 37165                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37166                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 37167                                  
 37168                                  badopm:
 37169 00004B52 0D0A                    	db	0Dh,0Ah 
 37170 00004B54 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 37170 00004B5D 7A656420636F6D6D61-
 37170 00004B66 6E6420696E20434F4E-
 37170 00004B6F 4649472E535953     
 37171                                  crlfm:
 37172 00004B76 0D0A24                  	db	0Dh,0Ah,'$'
 37173                                  badparm:
 37174 00004B79 0D0A                    	db	0Dh,0Ah
 37175 00004B7B 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 37175 00004B84 6E64206F7220706172-
 37175 00004B8D 616D6574657273202D-
 37175 00004B96 2024               
 37176                                  badsiz_pre:
 37177 00004B98 0D0A                    	db	0Dh,0Ah
 37178 00004B9A 536563746F72207369-     	db	'Sector size too large in file $'
 37178 00004BA3 7A6520746F6F206C61-
 37178 00004BAC 72676520696E206669-
 37178 00004BB5 6C652024           
 37179                                  badld_pre:
 37180 00004BB9 0D0A                    	db	0Dh,0Ah
 37181 00004BBB 426164206F72206D69-     	db	'Bad or missing $'
 37181 00004BC4 7373696E672024     
 37182                                  badcom:
 37183 00004BCB 436F6D6D616E642049-     	db	'Command Interpreter',0
 37183 00004BD4 6E7465727072657465-
 37183 00004BDD 7200               
 37184                                  badcountry:
 37185 00004BDF 0D0A                    	db	0Dh,0Ah
 37186 00004BE1 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 37186 00004BEA 6F756E74727920636F-
 37186 00004BF3 6465206F7220636F64-
 37186 00004BFC 6520706167650D0A24 
 37187                                  badcountrycom:
 37188 00004C05 0D0A                    	db	0Dh,0Ah
 37189 00004C07 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 37189 00004C10 434F554E5452592063-
 37189 00004C19 6F6D6D616E640D0A24 
 37190                                  insufmemory:
 37191 00004C22 0D0A                    	db	0Dh,0Ah
 37192 00004C24 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 37192 00004C2D 656E74206D656D6F72-
 37192 00004C36 7920666F7220434F55-
 37192 00004C3F 4E5452592E53595320-
 37192 00004C48 66696C650D0A24     
 37193                                  badmem:
 37194 00004C4F 0D0A                    	db	0Dh,0Ah
 37195 00004C51 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 37195 00004C5A 74696F6E20746F6F20-
 37195 00004C63 6C6172676520666F72-
 37195 00004C6C 206D656D6F72790D0A-
 37195 00004C75 24                 
 37196                                  badblock:
 37197 00004C76 0D0A                    	db	0Dh,0Ah
 37198 00004C78 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 37198 00004C81 626C6F636B20646576-
 37198 00004C8A 696365730D0A24     
 37199                                  badstack:
 37200 00004C91 0D0A                    	db	0Dh,0Ah
 37201 00004C93 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 37201 00004C9C 5441434B2070617261-
 37201 00004CA5 6D65746572730D0A24 
 37202                                  	; 18/12/2022
 37203                                  ;badorder:
 37204                                  	;db	0Dh,0Ah
 37205                                  	;db	'Incorrect order in CONFIG.SYS line $'
 37206                                  errorcmd:
 37207 00004CAE 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 37207 00004CB7 434F4E4649472E5359-
 37207 00004CC0 53206C696E652024   
 37208                                  
 37209                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37210                                  ; (SYSINIT:566Eh)
 37211                                  
 37212                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37213                                  ;%if 0
 37214                                  
 37215 00004CC8 4F4E                    OnOff:	db	'ON'
 37216 00004CCA 4F4646                  OnOff2:	db	'OFF'
 37217                                  
 37218                                  	; 04/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37219                                  	; (SYSINIT:5673h)
 37220                                  ;StartMsg:
 37221                                  ;	db	'Starting MS-DOS...',0Dh,0Ah
 37222                                  ;	db	0Ah,0
 37223                                  
 37224                                  _$PauseMsg:
 37225 00004CCD 507265737320616E79-     	db	'Press any key to continue . . .',0Dh,0Ah,'$'
 37225 00004CD6 206B657920746F2063-
 37225 00004CDF 6F6E74696E7565202E-
 37225 00004CE8 202E202E0D0A24     
 37226                                  _$CleanMsg:
 37227 00004CEF 4D532D444F53206973-     	db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 37227 00004CF8 20627970617373696E-
 37227 00004D01 6720796F757220434F-
 37227 00004D0A 4E4649472E53595320-
 37227 00004D13 616E64204155544F45-
 37227 00004D1C 5845432E4241542066-
 37227 00004D25 696C65732E0D0A24   
 37228                                  _$InterMsg:
 37229 00004D2D 4D532D444F53207769-     	db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 37229 00004D36 6C6C2070726F6D7074-
 37229 00004D3F 20796F7520746F2063-
 37229 00004D48 6F6E6669726D206561-
 37229 00004D51 636820434F4E464947-
 37229 00004D5A 2E53595320636F6D6D-
 37229 00004D63 616E642E0D0A24     
 37230                                  _$MenuHeader:
 37231 00004D6A 0D0A                    	db	0Dh,0Ah
 37232 00004D6C 20204D532D444F5320-     	db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 37232 00004D75 362E32205374617274-
 37232 00004D7E 7570204D656E750D0A 
 37233 00004D87 20203D3D3D3D3D3D3D-     	db	'  =======================',0Dh,0Ah,'$'
 37233 00004D90 3D3D3D3D3D3D3D3D3D-
 37233 00004D99 3D3D3D3D3D3D3D0D0A-
 37233 00004DA2 24                 
 37234                                  _$MenuPrmpt:
 37235 00004DA3 2020456E7465722061-     	db	'  Enter a choice: $'
 37235 00004DAC 2063686F6963653A20-
 37235 00004DB5 24                 
 37236                                  _$StatusLine:
 37237 00004DB6 46353D427970617373-     	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS '
 37237 00004DBF 207374617274757020-
 37237 00004DC8 66696C65732046383D-
 37237 00004DD1 436F6E6669726D2065-
 37237 00004DDA 616368206C696E6520-
 37237 00004DE3 6F6620434F4E464947-
 37237 00004DEC 2E53595320         
 37238 00004DF1 616E64204155544F45-     	db	'and AUTOEXEC.BAT [ ]$'
 37238 00004DFA 5845432E424154205B-
 37238 00004E03 205D24             
 37239                                  _$InterPrmpt:
 37240 00004E06 205B592C4E5D3F24        	db	' [Y,N]?$'
 37241 00004E0E 59455324                _$YES:	db	'YES$'
 37242 00004E12 4E4F2024                _$NO:	db	'NO $'
 37243                                  _$TimeOut:
 37244 00004E16 54696D652072656D61-     	db	'Time remaining: $'
 37244 00004E1F 696E696E673A2024   
 37245                                  badcomprmpt:
 37246 00004E27 456E74657220636F72-     	db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 37246 00004E30 72656374206E616D65-
 37246 00004E39 206F6620436F6D6D61-
 37246 00004E42 6E6420496E74657270-
 37246 00004E4B 726574657220286567-
 37246 00004E54 2C20433A5C434F4D4D-
 37246 00004E5D 414E442E434F4D29   
 37247 00004E65 0D0A24                  	db	0Dh,0Ah,'$'
 37248                                  _$AutoPrmpt:
 37249 00004E68 50726F636573732041-     	db	'Process AUTOEXEC.BAT [Y,N]?$'
 37249 00004E71 55544F455845432E42-
 37249 00004E7A 4154205B592C4E5D3F-
 37249 00004E83 24                 
 37250                                  
 37251                                  ;%endif ; 02/11/2022
 37252                                  
 37253                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37254                                  ; (SYSINIT:5840h)
 37255                                  
 37256                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37257                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 37258                                  
 37259                                  TooManyDrivesMsg:
 37260 00004E84 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 37260 00004E8D 4C6F676963616C2064-
 37260 00004E96 726976657320706173-
 37260 00004E9F 74205A3A2065786973-
 37260 00004EA8 7420616E642077696C-
 37260 00004EB1 6C2062652069676E6F-
 37260 00004EBA 7265640D0A24       
 37261                                  
 37262                                  ;MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 37263                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 37264                                  	;db	7 dup(0)
 37265                                  
 37266                                  	;times	7 db 0
 37267                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37268                                  ;MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 37269                                  	; 09/12/2022
 37270                                  	;times 4 db 0
 37271                                  
 37272                                  ;----------------------------------------------------------------------------
 37273                                  		; 09/12/2022
 37274                                  		;db 0
 37275                                  
 37276                                  number3div	equ ($-SYSINIT$)
 37277                                  number3mod	equ (number3div % 16)
 37278                                  
 37279                                  %if number3mod>0 & number3mod<16
 37280 00004EC0 00<rep 10h>             		times (16-number3mod) db 0
 37281                                  %endif
 37282                                  
 37283                                  ;---------------------------------------------------------------------------- 
 37284                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS 
 37285                                  ;---------------------------------------------------------------------------- 
 37286                                  
 37287                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 37288                                  
 37289                                  ;----------------------------------------------------------------------------
 37290                                  ; 20/04/2019 - Retro DOS v4.0
 37291                                  
 37292                                  ; 09/12/2022
 37293                                  ;
 37294                                  ;bss_start:
 37295                                  ;
 37296                                  ;ABSOLUTE bss_start
 37297                                  ;
 37298                                  ;alignb 16
 37299                                  
 37300                                  SI_end:  ; SI_end equ $
 37301                                  
 37302                                  ;----------------------------------------------------------------------------
 37303                                  
 37304                                  ;sysinitseg	ends
 37305                                  
 37306                                  ; ***************************************************************************
 37307                                  
 37308                                  ; 04/01/2023 - MSDOS 6.21 SYSINIT:SI_end = SYSINIT:58A0h (IOSYS:9F46h)
 37309                                  ; 09/12/2022 - MSDOS 5.0 SYSINIT:SI_end = SYSINIT:3D20h
 37310                                  
 37311                                  SYSINITSIZE	equ SI_end - SYSINIT$
 37312                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 37313                                  
 37314                                  ;----------------------------------------------------------------------------
 37315                                  ; End of Retro DOS v4.2 IO.SYS source by Erdogan Tan - 04/01/2023 -
 37316                                  ;----------------------------------------------------------------------------
 37317                                  
 37318                                  ; 21/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 37319                                  ;----------------------------------------------------------------------------
 37320                                  ;----------------------------------------------------------------------------
 37321                                  
 37322                                  ; ----------------------------------------------------------------------------
 37323                                  ; START OF MSDOS 6.0 -IBMDOS.COM- KERNEL CODE (MSDOS.SYS) -will be relocated-
 37324                                  ; ----------------------------------------------------------------------------
 37325                                  ; 04/01/2023 - Retro DOS v4.2
 37326                                  ; 29/12/2022 - Retro DOS v4.1
 37327                                  ; 18/03/2019 - Retro DOS v4.0 
 37328                                  ; 11/06/2018 - Retro DOS v3.0 
 37329                                  
 37330                                  MSDOS_BIN_OFFSET: ; this offset must be paragraph aligned
 37331                                  		;; 28/06/2019 ('msdos6.s') 
 37332                                  		;incbin	'MSDOS6.BIN' ; Retro DOS 4.0 - MSDOS 6.21 KERNEL
 37333                                  		
 37334                                  		; 29/12/2022
 37335                                  		;incbin	'MSDOS51.BIN' ; Retro DOS 4.1 - MSDOS 5.0+ KERNEL
 37336                                  
 37337                                  		; 04/01/2023
 37338 00004ED0 <bin 8EFAh>             		incbin	'MSDOS6.BIN' ; Retro DOS 4.2 - MSDOS 6.21+ KERNEL		
 37339                                  		
 37340                                  		;; 28/12/2022 (BugFix)
 37341                                  		;; 22/12/2022
 37342                                  		;; 21/12/2022 ('msdos5.s')
 37343                                  		;incbin 'MSDOS5.BIN'  ; Retro DOS 4.0 - MSDOS 5.0+ KERNEL
 37344                                  	
 37345                                  msdos_bin_size equ $ - MSDOS_BIN_OFFSET
 37346                                  
 37347                                  align 2
 37348                                  
 37349                                  ; 21/12/2022
 37350                                  ;END_OF_KERNEL:
 37351                                  END_OF_KERNEL equ $
 37352                                  
 37353                                  ;=============================================================================
 37354                                  ;	END
 37355                                  ;=============================================================================
 37356                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 37357                                  ; ------------------------------
 37358                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
