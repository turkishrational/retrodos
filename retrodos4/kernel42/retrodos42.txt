     1                                  ; ****************************************************************************
     2                                  ; RETRODOS.SYS (MSDOS 6.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 01/10/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 28/08/2023 - Retro DOS v4.2 (Modified MSDOS 6.22)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 26/12/2018 (Retro DOS 4.0), 28/12/2022 (Retro DOS 4.1, MSDOS 5.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15 (2.11)
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm retrodos.s -l retrodos.lst -o MSDOS.SYS -Z error.txt)) 
    11                                  ; ----------------------------------------------------------------------------
    12                                  
    13                                  ; 20/12/2022 - Modifications for initiating IO.SYS by Retro DOS v2 boot sector
    14                                  ;
    15                                  ;	       (Retro DOS v2 BS loads IO.SYS & MSDOS.SYS as single kernel file
    16                                  ;	       with name of 'MSDOS.SYS'. Retro DOS init code -for IO.SYS init-
    17                                  ;	       is different than original MSDOS IO.SYS LOADER and INIT code.)
    18                                  ;
    19                                  ;	       ((RETRODOS.SYS/MSDOS.SYS can be loaded by a fake IO.SYS for
    20                                  ;		using it with MSDOS 5.0 boot sector & as bootable MSDOS disk.
    21                                  ;		For that, fake IO.SYS must load 'MSDOS.SYS' at 1000h:0000h.))		-	
    22                                  ; 		
    23                                  ; 18/12/2022 - Modified MSDOS 5.0 IO.SYS (for using with MSDOS 5 boot sector)
    24                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    25                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    26                                  
    27                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    28                                  ;     (as included binary, 'IOSYS5.BIN') 
    29                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    30                                  ;						        (except MSLOAD code)
    31                                        
    32                                  ;------- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    33                                  ;	 at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    34                                  ;	 moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    35                                  ;	 Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    36                                  ;	 SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    37                                  ;	 (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    38                                  
    39                                  ; ----------------------------------------------------------------------------
    40                                  
    41                                  ;=============================================================================
    42                                  ; Modified from 'retrodos3.s', Retro DOS v3.0 Kernel (IBMBIO.COM) Source code
    43                                  ; by Erdogan Tan, 10/09/2018
    44                                  ;=============================================================================
    45                                  
    46                                  ; MSBIO (IO.SYS 6.0) source files:
    47                                  ; 	MSBIO1.ASM,MSCHAR.ASM,MSDISK.ASM,MSDIOCTL.ASM,MSINT13.ASM,MSBIO2.ASM
    48                                  ;	MSINIT.ASM,SYSINIT1.ASM,SYSCONF.ASM,SYSPRE.ASM,SYSINIT2.ASM 
    49                                  ;	SYSIMES.ASM,POWER.ASM,PTIME.ASM,MSEND.ASM
    50                                  
    51                                  ;=============================================================================
    52                                  ; MSBIO
    53                                  ;=============================================================================
    54                                  ;msbio1+mschar+msdisk+msdioctl+msint13+msbio2+
    55                                  ;msinit+sysinit1+sysconf+syspre+sysinit2+sysimes+power+ptime+
    56                                  ;msend,msbio,msbio;
    57                                  
    58                                  ;=============================================================================
    59                                  ; RETRO DOS kernel versions by Erdogan Tan (2018-2022)
    60                                  ;=============================================================================
    61                                  
    62                                  ;Retro DOS v1.0 == MSDOS 1.25 -- derived from MSDOS 1.25 source code 
    63                                  ;Retro DOS v2.0 == MSDOS 2.11 -- derived from MSDOS 2.11 source code 
    64                                  ;Retro DOS v3.0 == MSDOS 3.30 -- derived from MSDOS 3.3 & 6.0 source code 
    65                                  ;Retro DOS v4.0 == MSDOS 6.21 -- derived from MSDOS 6.0 source code (2019) (*)
    66                                  ;Retro DOS v4.0 == MSDOS 5.0+ -- derived from MSDOS 6.0 source code (2022) (**)
    67                                  ;Retro DOS v4.1 == MSDOS 5.0+ -- will be optimized -shortened- version (2023)
    68                                  ;Retro DOS v4.2 == MSDOS 6.21 -- will be MSDOS 6.21 (6.22) compatible (2023)(?)
    69                                  ;Retro DOS v5.0 == PCDOS 7.10 -- will be derived from IBM PCDOS 7.1 source code
    70                                  
    71                                  ;(*) unfinished, draft, canceled (failed in 2019)
    72                                  ;(**) MSDOS 5.0 IO.SYS & SYSINIT, MSDOS 5.0-6.22 mixed MSDOS.SYS (successed)
    73                                  ;(?) MSDOS 6.21 IO.SYS & SYSINIT, MSDOS 6.21 MSDOS.SYS except doublespace
    74                                  
    75                                  ;Disassembly: (reverse engineering via IDA Pro Free)
    76                                  
    77                                  ;Retro DOS v1.0 <-- IBM PCDOS 1.1
    78                                  ;Retro DOS v2.0 <-- IBM PCDOS 2.1 & MSDOS 2.11
    79                                  ;Retro DOS v3.0 <-- IBM PCDOS 3.3 & MSDOS 3.3
    80                                  ;Retro DOS v4.0 <-- MSDOS 6.21 ; 2018-2019 (*)
    81                                  ;Retro DOS v4.0 <-- MSDOS 5.0 ; 2022 (**)
    82                                  ;Retro DOS v5.0 <-- IBM PCDOS 7.1 
    83                                  
    84                                  ;-----------------------------------------------------------------------------
    85                                  ; MSDOS 6.21 IO.SYS (13/02/1994)
    86                                  ;-----------------------------------------------------------------------------
    87                                  
    88                                  SECTOR_SIZE     equ     0200h		; size of a sector
    89                                  PAUSE_KEY       equ     7200h		; scancode + charcode of PAUSE key
    90                                  KEYBUF_NEXT     equ     041Ah		; next character in keyboard buffer
    91                                  KEYBUF_FREE     equ     041Ch		; next free slot in keyboard buffer
    92                                  KEYBUF          equ     041Eh		; keyboard buffer data
    93                                  LOGICAL_DRIVE   equ     0504h		; linear address of logical drive byte
    94                                  ;DOS_SEGMENT	equ     00BFh ; v1.1	; segment in which DOS will run
    95                                  DOS_SEGMENT	equ     00C4h		; Retro DOS v1.0 - 13/02/2018
    96                                  BIO_SEGMENT     equ     0060h		; segment in which BIO is running
    97                                  
    98                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "DISKPRM.INC" - 24/07/1987)
    99                                  ; The following structure defines the disk parameter table
   100                                  ; pointed to by Interrupt vector 1EH (location 0:78H)
   101                                  
   102                                  struc	DISK_PARMS
   103 00000000 ??                      .DISK_SPECIFY_1:  resb	1
   104 00000001 ??                      .DISK_SPECIFY_2:  resb	1
   105 00000002 ??                      .DISK_MOTOR_WAIT: resb  1	; Wait till motor off
   106 00000003 ??                      .DISK_SECTOR_SIZ: resb 	1	; Bytes/Sector (2 = 512)
   107 00000004 ??                      .DISK_EOT:	  resb  1	; Sectors per track (MAX)
   108 00000005 ??                      .DISK_RW_GAP:	  resb  1	; Read Write Gap
   109 00000006 ??                      .DISK_DTL:	  resb	1
   110 00000007 ??                      .DISK_FORMT_GAP:  resb  1	; Format Gap Length
   111 00000008 ??                      .DISK_FILL:	  resb  1	; Format Fill Byte
   112 00000009 ??                      .DISK_HEAD_STTL:  resb  1	; Head Settle Time (MSec)
   113 0000000A ??                      .DISK_MOTOR_STRT: resb  1	; Motor start delay
   114                                  .size:
   115                                  endstruc
   116                                  
   117                                  ; 09/03/2019 - Retro DOS v4.0
   118                                  ; -------------------------------------------------------------------------
   119                                  ; MSEQU.INC, MSDOS 6.0, 1991
   120                                  
   121                                  ftoobig 	equ	80h
   122                                  fbig		equ	40h
   123                                  romstatus	equ	1
   124                                  romread 	equ	2
   125                                  romwrite	equ	3
   126                                  romverify	equ	4
   127                                  romformat	equ	5
   128                                  
   129                                  ; 26/12/2018 (Retro DOS 4.0 - MSDOS 6.0 "MSBDS.INC" - 1991)
   130                                  ; -------------------------------------------------------------------------
   131                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "MSBDS.INC" - 24/07/1987)
   132                                  ;
   133                                  ;  BDS is the Bios Data Structure.
   134                                  ;
   135                                  ;  There is one BDS for each logical drive in the system. All the BDS's
   136                                  ;  are linked together in a list with the pointer to the first BDS being
   137                                  ;  found in START_BDS. The BDS hold various values important to the disk
   138                                  ;  drive. For example there is a field for last time accesses. As actions
   139                                  ;  take place in the system the BDS are update to reflect the actions.
   140                                  ;  For example is there is a read to a disk the last access field for the
   141                                  ;  BDS for that drive is update to the current time.
   142                                  ;
   143                                  ; Values for various flags in BDS.flags.
   144                                  ;
   145                                  
   146                                  fnon_removable	    equ     01h 	;For non-removable media
   147                                  fchangeline	    equ     02h 	;If changeline supported on drive
   148                                  return_fake_bpb     equ     04h 	; When set, don't do a build BPB
   149                                  					; just return the fake one
   150                                  good_tracklayout    equ     08h 	; The track layout has no funny sectors
   151                                  fi_am_mult	    equ     10h 	;If more than one logical for this physical
   152                                  fi_own_physical     equ     20h 	;Signify logical owner of this physical
   153                                  fchanged	    equ     40h 	;Indicates media changed
   154                                  set_dasd_true	    equ     80h 	; Set DASD before next format
   155                                  fchanged_by_format  equ    100h		;Media changed by format
   156                                  ; MSDOS 6.0
   157                                  unformatted_media   equ    200h 	;Fixed disk only
   158                                  
   159                                  ;
   160                                  ; Various form factors to describe media
   161                                  ;
   162                                  
   163                                  ff48tpi 	    equ     0
   164                                  ff96tpi 	    equ     1
   165                                  ffSmall 	    equ     2
   166                                  ffHardFile	    equ     5
   167                                  ffOther 	    equ     7
   168                                  ; MSDOS 6.0 ("MSBDS.INC", 1991)
   169                                  ff288		    equ     9	; 2.88 MB drive
   170                                  ; Retro DOS v4.0 feature only !
   171                                  ;ff144		    equ	   10	; 1.44 MB drive			
   172                                  
   173                                  ; 26/05/2019
   174                                  
   175                                  struc	BDS	; BDS_Type
   176 00000000 ????????                .link:		resd 1		; Link to next BDS
   177 00000004 ??                      .drivenum:	resb 1		; Physical drive number
   178 00000005 ??                      .drivelet:	resb 1		; DOS drive number
   179                                  
   180                                  	;We want to embed a BPB declaration here, but we can't initialize
   181                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   182                                  	;of the BPB declaration.
   183                                  .BPB:	
   184 00000006 ????                    .bytespersec:	resw 1		; bytes per sectors ; def = 512
   185 00000008 ??                      .secperclus:	resb 1		; sectors per cluster
   186 00000009 ????                    .resectors:	resw 1		; reserved sectors
   187 0000000B ??                      .fats:		resb 1		; number of fats
   188 0000000C ????                    .direntries:	resw 1		; number of root directory entries
   189 0000000E ????                    .totalsecs16:	resw 1		; total sectors on medium
   190 00000010 ??                      .media:		resb 1		; media descriptor byte ; def = 0F8h
   191 00000011 ????                    .fatsecs: 	resw 1		; number of fat sectors
   192 00000013 ????                    .secpertrack:	resw 1		; sectors per track
   193 00000015 ????                    .heads:		resw 1		; number of heads
   194                                  ;.hiddensecs:	resw 1		; hidden sectors
   195                                  ; MSDOS 6.0
   196 00000017 ????????                .hiddensecs:	resd 1		; hidden sectors	
   197 0000001B ????????                .totalsecs32:	resd 1		; big total sectors		
   198                                  ;
   199 0000001F ??                      .fatsiz:	resb 1		; flags...
   200 00000020 ????                    .opcnt:		resw 1		; open ref. count
   201                                  ;.volid:	resb 12		; volume ID of medium
   202 00000022 ??                      .formfactor:	resb 1		; form factor index
   203 00000023 ????                    .flags:		resw 1		; various flags ; def: 0020h
   204 00000025 ????                    .cylinders:	resw 1		; number of cylinders
   205                                  ;
   206                                  .R_BPB:  			; recommended BPB
   207 00000027 ????                    .rbytespersec:	resw 1		
   208 00000029 ??                      .rsecperclus:	resb 1
   209 0000002A ????                    .rresectors: 	resw 1
   210 0000002C ??                      .rfats:		resb 1
   211 0000002D ????                    .rdirentries:	resw 1
   212 0000002F ????                    .rtotalsecs16:	resw 1
   213 00000031 ??                      .rmedia: 	resb 1
   214 00000032 ????                    .rfatsecs:	resw 1
   215 00000034 ????                    .rsecpertrack: 	resw 1
   216 00000036 ????                    .rheads:	resw 1
   217 00000038 ????????                .rhidsecs: 	resd 1
   218 0000003C ????????                .rtotalsecs32: 	resd 1
   219 00000040 ????????????            .rreserved:	resb 6		; not used (reserved)
   220                                  ;
   221 00000046 ??                      .track:		resb 1		; last track accessed on drive
   222                                  .bdsm_ismini:
   223 00000047 ????                    .tim_lo:	resw 1		; time of last access. keep
   224                                  .bdsm_hidden_trks:
   225 00000049 ????                    .tim_hi:	resw 1		; these contiguous.
   226 0000004B <res Ch>                .volid:		resb 12		; volume id of medium
   227                                  	       ;db "NO NAME    ",0
   228 00000057 ????????                .vol_serial:	resd 1	; current volume serial number from boot record
   229 0000005B <res 9h>                .filesys_id:	resb 9	; current file system id from boot record
   230                                  	       ;db "FAT12   ",0
   231                                  .size:			
   232                                  endstruc
   233                                  
   234                                  ;The assembler will generate bad data for "size bds_volid",
   235                                  ;so we'll define an equate here.
   236                                  
   237                                  VOLID_SIZ	equ	12
   238                                  
   239                                  ;bdsm_ismini	equ	bds_tim_lo	; overlapping bds_tim_lo
   240                                  ;bdsm_hidden_trks equ	bds_tim_hi	; overlapping bds_tim_hi
   241                                  
   242                                  max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
   243                                  
   244                                  ; 29/12/2018
   245                                  ; Retro DOS v4.0
   246                                  ;
   247                                  ; MSDOS 6.0 - BOOTFORM.INC
   248                                  
   249                                  BOOT_SIZE	    EQU	 512
   250                                  EXT_BOOT_SIGNATURE  EQU	 29h ; 41 ; Extended boot signature
   251                                  
   252                                  struc EBPB ; EXT_BPB_INFO
   253 00000000 ????                    .BYTESPERSECTOR:    resw 1
   254 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   255 00000003 ????                    .RESERVEDSECTORS:   resw 1
   256 00000005 ??                      .NUMBEROFFATS:	    resb 1
   257 00000006 ????                    .ROOTENTRIES:	    resw 1
   258 00000008 ????                    .TOTALSECTORS:	    resw 1
   259 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   260 0000000B ????                    .SECTORSPERFAT:	    resw 1
   261 0000000D ????                    .SECTORSPERTRACK:   resw 1
   262 0000000F ????                    .HEADS:		    resw 1
   263 00000011 ????????                .HIDDENSECTORS:	    resd 1
   264 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   265                                  .size:
   266                                  endstruc
   267                                  
   268                                  ;EXT_PHYDRV, EXT_CURHD included in the header for OS2.
   269                                  struc EXT_BOOT ; EXT_IBMBOOT_HEADER
   270 00000000 ??????                  .JUMP:		resb 3
   271 00000003 ????????????????        .OEM:		resb 8
   272 0000000B <res 19h>               .BPB:		resb EBPB.size
   273 00000024 ??                      .PHYDRV:	resb 1
   274 00000025 ??                      .CURHD:		resb 1
   275 00000026 ??                      .SIG:		resb 1
   276 00000027 ????????                .SERIAL:	resd 1
   277 0000002B <res Bh>                .VOL_LABEL:	resb 11
   278 00000036 ????????????????        .SYSTEM_ID:	resb 8
   279                                  .size:
   280                                  endstruc
   281                                  
   282                                  %define BOOT_SIGNATURE	[BOOT_SIZE-2]
   283                                  
   284                                  ; 23/03/2018
   285                                  
   286                                  ;STATIC REQUEST HEADER (DEVSYM.INC, MSDOS 6.0, 1991)
   287                                  STRUC SRHEAD
   288 00000000 ??                      .REQLEN:	resb 1		;LENGTH IN BYTES OF REQUEST BLOCK
   289 00000001 ??                      .REQUNIT:	resb 1		;DEVICE UNIT NUMBER
   290 00000002 ??                      .REQFUNC:	resb 1		;TYPE OF REQUEST
   291 00000003 ????                    .REQSTAT:	resw 1		;STATUS WORD
   292 00000005 ????????????????        	       	resb 8		;RESERVED FOR QUEUE LINKS
   293                                  .size:
   294                                  endstruc
   295                                  
   296                                  ; GENERIC IOCTL REQUEST STRUCTURE (DEVSYM.INC, MSDOS 6.0, 1991)
   297                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
   298                                  ;
   299                                  struc IOCTL_REQ
   300                                  	       ;DB   (SIZE SRHEAD) DUP(?)
   301 00000000 <res Dh>                		resb SRHEAD.size	
   302                                  			    	; GENERIC IOCTL ADDITION.
   303 0000000D ??                      .MAJORFUNCTION:	resb 1		;FUNCTION CODE
   304 0000000E ??                      .MINORFUNCTION:	resb 1		;FUNCTION CATEGORY
   305 0000000F ????                    .REG_SI:	resw 1
   306 00000011 ????                    .REG_DI:	resw 1
   307 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
   308                                  endstruc
   309                                  
   310                                  ; GENERIC IOCTL CATEGORY CODES  (IOCTL.INC, MSDOS 6.0, 1991)
   311                                  IOC_OTHER	EQU	0	; Other device control J.K. 4/29/86
   312                                  IOC_SE		EQU	1	; SERIAL DEVICE CONTROL
   313                                  IOC_TC		EQU	2	; TERMINAL CONTROL
   314                                  IOC_SC		EQU	3	; SCREEN CONTROL
   315                                  IOC_KC		EQU	4	; KEYBOARD CONTROL
   316                                  IOC_PC		EQU	5	; PRINTER CONTROL
   317                                  IOC_DC		EQU	8	; DISK CONTROL (SAME AS RAWIO)
   318                                  
   319                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
   320                                  GEN_IOCTL_WRT_TRK   EQU   40H
   321                                  GEN_IOCTL_RD_TRK    EQU   60H
   322                                  GEN_IOCTL_FN_TST    EQU   20H	; USED TO DIFF. BET READS AND WRTS
   323                                  
   324                                  ;struc A_RETRYCOUNT  ; (IOCTL.INC, MSDOS 6.0, 1991)
   325                                  ;.RC_COUNT:	resw 	1
   326                                  ;endstruc
   327                                  
   328                                  ; 29/05/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
   329                                  
   330                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   331                                  
   332                                  ;struc SYSDEV
   333                                  ; .NEXT:  resd 1	;POINTER TO NEXT DEVICE HEADER
   334                                  ; .ATT:	  resw 1	;ATTRIBUTES OF THE DEVICE
   335                                  ; .STRAT: resw 1	;STRATEGY ENTRY POINT
   336                                  ; .INT:	  resw 1	;INTERRUPT ENTRY POINT
   337                                  ; .NAME:  resb 8	;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   338                                  ; .size:
   339                                  ;endstruc
   340                                  
   341                                  ; 27/03/2018 - DEVSYM.INC - MSDOS 3.3 - 24/07/1987
   342                                  
   343                                  ;
   344                                  ; ATTRIBUTE BIT MASKS
   345                                  ;
   346                                  ; CHARACTER DEVICES:
   347                                  ;
   348                                  ; BIT 15 -> MUST BE 1
   349                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   350                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
   351                                  ;     12 -> UNUSED
   352                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
   353                                  ;     10 -> MUST BE 0
   354                                  ;      9 -> MUST BE 0
   355                                  ;      8 -> UNUSED
   356                                  ;      7 -> UNUSED
   357                                  ;      6 -> UNUSED
   358                                  ;      5 -> UNUSED
   359                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
   360                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
   361                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
   362                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
   363                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
   364                                  ;
   365                                  ; BLOCK DEVICES:
   366                                  ;
   367                                  ; BIT 15 -> MUST BE 0
   368                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   369                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
   370                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
   371                                  ;	    THE SAME PLACE.
   372                                  ;     12 -> UNUSED
   373                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
   374                                  ;     10 -> MUST BE 0
   375                                  ;      9 -> MUST BE 0
   376                                  ;      8 -> UNUSED
   377                                  ;      7 -> UNUSED
   378                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
   379                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
   380                                  ;      5 -> UNUSED
   381                                  ;      4 -> UNUSED
   382                                  ;      3 -> UNUSED
   383                                  ;      2 -> UNUSED
   384                                  ;      1 -> UNUSED
   385                                  ;      0 -> UNUSED
   386                                  ;
   387                                  
   388                                  DEVTYP	       EQU   8000H	    ; BIT 15 - 1 IF CHAR, 0 IF BLOCK
   389                                  CHARDEV        EQU   8000H
   390                                  DEVIOCTL       EQU   4000H	    ; BIT 14 - CONTROL MODE BIT
   391                                  ISFATBYDEV     EQU   2000H	    ; BIT 13 - DEVICE USES FAT ID BYTES,
   392                                  				    ;  COMP MEDIA.
   393                                  OUTTILBUSY     EQU   2000H	    ; OUTPUT UNTIL BUSY IS ENABLED
   394                                  ISNET	       EQU   1000H	    ; BIT 12 - 1 IF A NET DEVICE, 0 IF
   395                                  				    ;  NOT.  CURRENTLY BLOCK ONLY.
   396                                  DEVOPCL        EQU   0800H	    ; BIT 11 - 1 IF THIS DEVICE HAS
   397                                  				    ;  OPEN,CLOSE AND REMOVABLE MEDIA
   398                                  				    ;  ENTRY POINTS, 0 IF NOT
   399                                  
   400                                  EXTENTBIT      EQU   0400H	    ; BIT 10 - CURRENTLY 0 ON ALL DEVS
   401                                  				    ;  THIS BIT IS RESERVED FOR FUTURE USE
   402                                  				    ;  TO EXTEND THE DEVICE HEADER BEYOND
   403                                  				    ;  ITS CURRENT FORM.
   404                                  
   405                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
   406                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
   407                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
   408                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
   409                                  
   410                                  ; 18/03/2019 - Retro DOS v4.0
   411                                  IOQUERY	       EQU   0080H	    ;Bit 7 - Supports generic IOCtl query M017
   412                                  
   413                                  DEV320	       EQU   0040H	    ;BIT 6 - FOR BLOCK DEVICES, THIS
   414                                  				    ;DEVICE SUPPORTS SET/GET MAP OF
   415                                  				    ;LOGICAL DRIVES, AND SUPPORTS
   416                                  				    ;GENERIC IOCTL CALLS.
   417                                  				    ;FOR CHARACTER DEVICES, THIS
   418                                  				    ;DEVICE SUPPORTS GENERIC IOCTL.
   419                                  				    ;THIS IS A DOS 3.2 DEVICE DRIVER.
   420                                  ISSPEC	       EQU   0010H	    ;BIT 4 - THIS DEVICE IS SPECIAL
   421                                  ISCLOCK        EQU   0008H	    ;BIT 3 - THIS DEVICE IS THE CLOCK DEVICE.
   422                                  ISNULL	       EQU   0004H	    ;BIT 2 - THIS DEVICE IS THE NULL DEVICE.
   423                                  ISCOUT	       EQU   0002H	    ;BIT 1 - THIS DEVICE IS THE CONSOLE OUTPUT.
   424                                  ISCIN	       EQU   0001H	    ;BIT 0 - THIS DEVICE IS THE CONSOLE INPUT.
   425                                  ; 23/07/2019 - Retro DOS v4.0
   426                                  EXTDRVR	       EQU   0002h ; (MSDOS 6.0, DEVSYM.INC, 1991)
   427                                  
   428                                  ; 27/05/2018 - Retro DOS v3.0 
   429                                  ; [MSDOS 3.3, MSDISK.ASM]
   430                                  
   431                                  struc INT13FRAME
   432 00000000 ????                    .oldbp:	resw 1
   433 00000002 ????                    .oldax:	resw 1
   434 00000004 ????                    .oldbx:	resw 1
   435 00000006 ????                    .oldcx:	resw 1
   436 00000008 ????                    .olddx:	resw 1
   437 0000000A ????????                .olddd:	resd 1
   438 0000000E ????                    .oldf:	resw 1
   439                                  .size:
   440                                  endstruc
   441                                  
   442                                  ; 02/06/2018 - Retro DOS v3.0
   443                                  ; [MSDOS 3.3, BIOSTRUC.INC]
   444                                  
   445                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   446 00000000 ????                    .bios_sd_leng:		resw 1				  
   447 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
   448                                  .bios_sd_scnd_modelbyte: 
   449 00000003 ??                      			resb 1					  
   450 00000004 ??                      			resb 1					  
   451 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
   452 00000006 ????????                			resb 4					  
   453                                  endstruc
   454                                  
   455                                  ;-----------------------------------------------------------------------------
   456                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
   457                                  ;-----------------------------------------------------------------------------
   458                                  ; 11/03/2019 - Retro DOS v4.0
   459                                  
   460                                  ; 18/03/2019
   461                                  DSK_TIMEOUT_ERR 	EQU	80h	; Time out error (no media present).
   462                                  DSK_CHANGELINE_ERR	EQU	06h	; Change line error
   463                                  DSK_ILLEGAL_COMBINATION EQU	0Ch	; Return code of ah=18h function.
   464                                  MULTI_TRK_ON		EQU	10000000b ; User specified multitrack=on,
   465                                  					  ; or system turns
   466                                  ; IOCTL.INC - MSDOS 6.0 - 1991
   467                                  ; ............................................................................
   468                                  
   469                                  ;*** J.K.
   470                                  ;General Guide -
   471                                  ;Category Code:
   472                                  ; 0... .... DOS Defined
   473                                  ; 1... .... User defined
   474                                  ; .xxx xxxx Code
   475                                  
   476                                  ;Function Code:
   477                                  ; 0... .... Return error if unsupported
   478                                  ; 1... .... Ignore if unsupported
   479                                  ; .0.. .... Intercepted by DOS
   480                                  ; .1.. .... Passed to driver
   481                                  ; ..0. .... Sends data/commands to device
   482                                  ; ..1. .... Quries data/info from device
   483                                  ; ...x .... Subfunction
   484                                  ;
   485                                  ; Note that "Sends/queries" data bit is intended only to regularize the
   486                                  ; function set.  It plays no critical role; some functions may contain both
   487                                  ; command and query elements. The convention is that such commands are
   488                                  ; defined as "sends data".
   489                                  
   490                                  ;*****************************;*
   491                                  ; BLOCK DRIVERS 	      ;*
   492                                  ;*****************************;*
   493                                  
   494                                  ; IOCTL SUB-FUNCTIONS
   495                                  IOCTL_GET_DEVICE_INFO	EQU	0
   496                                  IOCTL_SET_DEVICE_INFO	EQU	1
   497                                  IOCTL_READ_HANDLE	EQU	2
   498                                  IOCTL_WRITE_HANDLE	EQU	3
   499                                  IOCTL_READ_DRIVE	EQU	4
   500                                  IOCTL_WRITE_DRIVE	EQU	5
   501                                  IOCTL_GET_INPUT_STATUS	EQU	6
   502                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   503                                  IOCTL_CHANGEABLE?	EQU	8
   504                                  IOCTL_DeviceLocOrRem?	EQU	9
   505                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
   506                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
   507                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
   508                                  GENERIC_IOCTL		EQU	0Dh   ;13
   509                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
   510                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
   511                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
   512                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
   513                                  
   514                                  ; GENERIC IOCTL SUB-FUNCTIONS
   515                                  RAWIO			EQU	8
   516                                  
   517                                  ; RAWIO SUB-FUNCTIONS
   518                                  GET_DEVICE_PARAMETERS	EQU	60H
   519                                  SET_DEVICE_PARAMETERS	EQU	40H
   520                                  READ_TRACK		EQU	61H
   521                                  WRITE_TRACK		EQU	41H
   522                                  VERIFY_TRACK		EQU	62H
   523                                  FORMAT_TRACK		EQU	42H
   524                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
   525                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
   526                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
   527                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
   528                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
   529                                  
   530                                  
   531                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
   532                                  BUILD_DEVICE_BPB	EQU	000000001B
   533                                  
   534                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
   535                                  INSTALL_FAKE_BPB	EQU	000000001B
   536                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
   537                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
   538                                  
   539                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
   540                                  STATUS_FOR_FORMAT	EQU	000000001B
   541                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
   542                                  ; CODES RETURNED FROM FORMAT STATUS CALL
   543                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
   544                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
   545                                  
   546                                  ; DEVICETYPE VALUES
   547                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
   548                                  DEV_5INCH		EQU	0
   549                                  DEV_5INCH96TPI		EQU	1
   550                                  DEV_3INCH720KB		EQU	2
   551                                  DEV_8INCHSS		EQU	3
   552                                  DEV_8INCHDS		EQU	4
   553                                  DEV_HARDDISK		EQU	5
   554                                  DEV_OTHER		EQU	7
   555                                  ;DEV_3INCH1440KB	EQU	7
   556                                  DEV_3INCH2880KB		EQU	9
   557                                  ; Retro DOS v2.0 - 26/03/2018
   558                                  ;;DEV_TAPE		EQU	6
   559                                  ;;DEV_ERIMO		EQU	8
   560                                  ;DEV_3INCH2880KB	EQU	9
   561                                  DEV_3INCH1440KB		EQU	10
   562                                  
   563                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   564                                  					; CURRENTLY SUPPORT.
   565                                  MAX_DEV_TYPE		EQU	10
   566                                  
   567                                  struc A_SECTORTABLE
   568 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   569 00000002 ????                    .ST_SECTORSIZE:		resw	1
   570                                  .size:
   571                                  endstruc
   572                                  
   573                                  ; MSDOS 6.0 - BPB.INC - 1991
   574                                  ; ####
   575                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   576                                  ;
   577                                  ;	The BPB contains information about the disk structure. It dates
   578                                  ;	back to the earliest FAT systems and so FAT information is
   579                                  ;	intermingled with physical driver information.
   580                                  ;
   581                                  ;	A boot sector contains a BPB for its device; for other disks
   582                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   583                                  ;	information in the DPB.
   584                                  ;
   585                                  ;	The BDS structure contains a BPB within it.
   586                                  ;
   587                                  
   588                                  struc A_BPB
   589 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   590 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   591 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   592 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   593 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   594 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   595 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   596 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   597 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   598 0000000F ????                    .BPB_HEADS:		resw	1
   599 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   600 00000013 ????                    			resw	1
   601 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   602 00000017 ????                    			resw	1
   603 00000019 ????????????            			resb	6	; NOTE:  many times these
   604                                  ;					; 	 6 bytes are omitted
   605                                  ;					;	 when BPB manipulations
   606                                  ;					;	 are performed!
   607                                  .size:
   608                                  endstruc
   609                                  ; ####
   610                                  
   611                                  struc A_DEVICEPARAMETERS
   612 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   613 00000001 ??                      .DP_DEVICETYPE:		resb	1
   614 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   615 00000004 ????                    .DP_CYLINDERS:		resw	1
   616 00000006 ??                      .DP_MEDIATYPE:		resb	1
   617 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
   618 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   619 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   620                                  endstruc
   621                                  
   622                                  struc A_TRACKREADWRITEPACKET
   623 00000000 ??                      .TRWP_SPECIALFUNCTIONS:	resb	1
   624 00000001 ????                    .TRWP_HEAD:		resw	1
   625 00000003 ????                    .TRWP_CYLINDER:		resw	1
   626 00000005 ????                    .TRWP_FIRSTSECTOR:	resw	1
   627 00000007 ????                    .TRWP_SECTORSTOREADWRITE: resw	1
   628 00000009 ????????                .TRWP_TRANSFERADDRESS:	resd	1
   629                                  endstruc
   630                                  
   631                                  ;AN001; - FP_TRACKCOUNT is only meaningful when FP_SPECIALFUNCTIONS bit 1 = 1.
   632                                  struc A_FORMATPACKET
   633 00000000 ??                      .FP_SPECIALFUNCTIONS:	resb	1  ; db ?
   634 00000001 ????                    .FP_HEAD: 		resw	1  ; dw ? 
   635 00000003 ????                    .FP_CYLINDER:		resw	1  ; dw ?
   636 00000005 ????                    .FP_TRACKCOUNT:		resw	1  ; dw 1 ; !
   637                                  endstruc
   638                                  
   639                                  struc A_VERIFYPACKET
   640 00000000 ??                      .VP_SPECIALFUNCTIONS:	resb	1
   641 00000001 ????                    .VP_HEAD: 		resw	1
   642 00000003 ????                    .VP_CYLINDER:		resw	1
   643                                  endstruc
   644                                  
   645                                  struc A_MEDIA_ID_INFO
   646 00000000 ????                    .MI_LEVEL:		resw	1  ; dw 0 ; !		;J.K. 87 Info. level
   647 00000002 ????????                .MI_SERIAL:		resd	1  ; dd ?		;J.K. 87 Serial #
   648 00000006 <res Bh>                .MI_LABEL:		resb	11 ; db 11 DUP (' ') ;!	;J.K. 87 volume label
   649 00000011 ????????????????        .MI_SYSTEM:		resb 	8  ; db 8 DUP (' ')  ;!	;J.K. 87 File system type
   650                                  endstruc
   651                                  
   652                                  struc A_DISKACCESS_CONTROL	   ;AN002; Unpublished function. Only for Hard file.
   653 00000000 ??                      .DAC_SPECIALFUNCTIONS:	resb 	1  ; db 0 ; ! ;AN002; Always 0
   654 00000001 ??                      .DAC_ACCESS_FLAG: 	resb 	1  ; db 0 ; ! 
   655                                  				   ; Non Zero - allow disk I/O to unformatted hard file
   656                                  endstruc			   ; 0 - Disallow disk I/O to unformatted hard file
   657                                  
   658                                  
   659                                  struc A_MEDIA_SENSE			; Media sense structure added 5.00
   660 00000000 ??                      .MS_ISDEFAULT:		resb	1	; If 1 type returned is drv default
   661 00000001 ??                      .MS_DEVICETYPE:		resb	1	; Drive type 
   662 00000002 ??                      .MS_RESERVED1:		resb	1	; RESERVED
   663 00000003 ??                      .MS_RESERVED2:		resb 	1	; RESERVED 
   664                                  endstruc
   665                                  
   666                                  ;********************************;*
   667                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
   668                                  ;********************************;*
   669                                  
   670                                  ;RAWIO SUB-FUNCTIONS
   671                                  GET_RETRY_COUNT 	EQU	65H
   672                                  SET_RETRY_COUNT 	EQU	45H
   673                                  
   674                                  struc A_RETRYCOUNT
   675 00000000 ????                    .RC_COUNT:		resw 1
   676                                  endstruc
   677                                  
   678                                  ;********************************;*		;J.K. 4/29/86
   679                                  ; CHARACTER DEVICES (SCREEN)	 ;*
   680                                  ;********************************;*		;J.K. 4/29/86
   681                                  ;
   682                                  ;SC_MODE_INFO	 struc
   683                                  ;SC_INFO_LENGTH 	 DW	 9
   684                                  ;SC_MODE		 DB	 0
   685                                  ;SC_COLORS		 DW	 0
   686                                  ;SC_WIDTH		 DW	 0
   687                                  ;SC_LENGTH		 DW	 0
   688                                  ;SC_MODE_INFO	 ends
   689                                  ;
   690                                  ;SC_INFO_PACKET_LENGTH	 EQU	 9		 ;LENGTH OF THE INFO PACKET.
   691                                  
   692                                  ;SUBFUNCTIONS FOR CON$GENIOCTL
   693                                  ;GET_SC_MODE		 EQU	 60h
   694                                  ;SET_SC_MODE		 EQU	 40h
   695                                  ;The following subfunctions are reserved for installable CODE PAGE switch
   696                                  ;console devices. - J.K. 4/29/86
   697                                  ;Get_active_codepage	 equ	 6Ah
   698                                  ;Invoke_active_codepage  equ	 4Ah
   699                                  ;Start_designate_codepage equ	 4Ch
   700                                  ;End_designate_codepage  equ	 4Dh
   701                                  ;Get_list_of_designated_codepage equ 6Bh
   702                                  ;J.K. 4/29/86 *** End of Con$genioctl equates & structures
   703                                  
   704                                  ;-----------------------------------------------------------------------------
   705                                  ; MULT.INC - MSDOS 6.0 - 1991
   706                                  ;-----------------------------------------------------------------------------
   707                                  ; 18/03/2019
   708                                  
   709                                  ; The current set of defined multiplex channels is (* means documented):
   710                                  ;
   711                                  ;   Channel(h)  Issuer          Receiver    Function
   712                                  ;      00       server          PSPRINT     print job control
   713                                  ;     *01       print/apps      PRINT       Queueing of files
   714                                  ;      02       BIOS            REDIR       signal open/close of printers
   715                                  ;
   716                                  ;      05       command         REDIR       obtain text of net int 24 message
   717                                  ;     *06       server/assign   ASSIGN      Install check
   718                                  ;
   719                                  ;      08       external driver IBMBIO      interface to internal routines
   720                                  ;
   721                                  ;      10       sharer/server   Sharer      install check
   722                                  ;      11       DOS/server      Redir       install check/redirection funcs
   723                                  ;      12       sharer/redir    DOS         dos functions and structure maint
   724                                  ;      13       MSNET           MSNET       movement of NCBs
   725                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
   726                                  ;                                           of alternative INT_13 drivers after
   727                                  ;                                           boot_up
   728                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
   729                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
   730                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
   731                                  ;      16       WIN386          WIN386      Windows communications
   732                                  ;      17       Clipboard       WINDOWS     Clipboard interface
   733                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
   734                                  ;      19       Shell
   735                                  ;      1A       Ansi.sys
   736                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
   737                                  ;
   738                                  ;      40h      OS/2
   739                                  ;      41h      Lanman
   740                                  ;      42h      Lanman
   741                                  ;      43h      Himem
   742                                  ;                               AL = 20h    reserved for Mach 20 Himem support
   743                                  ;                               AL = 30h    reserved for Himem external A20 code
   744                                  ;      44h      Dosextender
   745                                  ;      45H      Windows profiler
   746                                  ;      46h      Windows/286 DOS extender
   747                                  ;      47h      Basic Compiler Vn. 7.0
   748                                  ;      48h      Doskey
   749                                  ;      49h      DOS 5.x install 
   750                                  ;      4Ah      Multi Purpose
   751                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
   752                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
   753                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
   754                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
   755                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
   756                                  ;
   757                                  ;                multSmartdrv           10h
   758                                  ;                multMagicdrv           11h
   759                                  ;      4Bh      Task Switcher API
   760                                  ;
   761                                  ;      4Ch      APPS            APM             Advanced power management
   762                                  ;      4Dh      Kana Kanji Converter, MSKK
   763                                  ;
   764                                  ;      51h      ODI real mode support driver (for Chicago)
   765                                  ;
   766                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
   767                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
   768                                  ;
   769                                  ;      55h      COMMAND.COM
   770                                  ;                multCOMFIRST           0 - API to determine whether 1st
   771                                  ;                                           instance of command.com
   772                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
   773                                  ;                                           instance of ROM COMMAND
   774                                  ;      56h      Sewell Development
   775                                  ;               INTERLNK
   776                                  ;
   777                                  ;      57h      Iomega Corp.
   778                                  ;
   779                                  ;      AB       Unspecified IBM use
   780                                  ;      AC       Graphics
   781                                  ;      AD       NLS (toronto)
   782                                  ;      AE
   783                                  ;      AF       Mode
   784                                  ;      B0       GRAFTABL        GRAFTABL
   785                                  ;
   786                                  ;      D7       Banyan VINES
   787                                  
   788                                  multMULT	  equ	4Ah
   789                                  
   790                                  multMULTSWPDSK	  equ	0	; Swap Disk in drive A (BIOS)
   791                                  multMULTGETHMAPTR equ	1	; Get available HMA & ptr
   792                                  multMULTALLOCHMA  equ	2	; Allocate HMA (bx == no of bytes)
   793                                  multMULTTASKSHELL equ	5	; Shell/switcher API
   794                                  multMULTRPLTOM	  equ	6	; Top Of Memory for RPL support
   795                                  
   796                                  ;-----------------------------------------------------------------------------
   797                                  ; WIN386.INC - MSDOS 6.0 - 1991
   798                                  ;-----------------------------------------------------------------------------
   799                                  ; 18/03/2019
   800                                  
   801                                  ; WIN386.INC
   802                                  ;
   803                                  ;  Symbols and structures relating to WIN386 support.
   804                                  ;
   805                                  ;  Used by files in both the DOS and the BIOS.
   806                                  ;
   807                                  ;  Created: 7-13-89 by MRW
   808                                  ;
   809                                  
   810                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
   811                                  
   812                                  MultWin386		equ     16h	; Int 2f multiplex number
   813                                  
   814                                  Win386_Init		equ	05h	; Win386 initialization
   815                                  Win386_Exit		equ	06h	; Win386 exit
   816                                  Win386_Devcall		equ	07h	; Win386 device call out
   817                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
   818                                  
   819                                  ; ============================================================================
   820                                  
   821                                  ;bpbx		struc ;	(sizeof=0x19)	
   822                                  ;
   823                                  ;bytespersec	dw ?			; base 10
   824                                  ;secperclust	db ?			; base 10
   825                                  ;rsvdsecs	dw ?			; base 10
   826                                  ;numfats	db ?			; base 10
   827                                  ;rootdirents	dw ?			; base 10
   828                                  ;totalsize16	dw ?			; base 10
   829                                  ;mediaid	db ?
   830                                  ;fatsecs	dw ?			; base 10
   831                                  ;secpertrack	dw ?			; base 10
   832                                  ;heads		dw ?			; base 10
   833                                  ;hiddensecs_lw	dw ?			; base 10
   834                                  ;hiddensecs_hw	dw ?			; base 10
   835                                  ;totalsecs_lw	dw ?			; base 10
   836                                  ;totalsecs_hw	dw ?			; base 10
   837                                  ;
   838                                  ;bpbx		ends
   839                                  
   840                                  ;-----------------------------------------------------------------------------
   841                                  ;
   842                                  ; +-------------------------------------------------------------------------+
   843                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
   844                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
   845                                  ; |			 Licensed to: Freeware version			    |
   846                                  ; +-------------------------------------------------------------------------+
   847                                  ;
   848                                  ; Input	MD5   :	B2FA03653E5C5D545327EE28B8A24356
   849                                  ; Input	CRC32 :	20FC79BF
   850                                  
   851                                  ;-----------------------------------------------------------------------------
   852                                  
   853                                  ;		.386
   854                                  ;		.model flat
   855                                  
   856                                  ; ============================================================================
   857                                  
   858                                  ; 10/12/2022
   859                                  ; 09/12/2022
   860                                  ; 21/10/2022
   861                                  ; 19/10/2022
   862                                  ; 17/10/2022, 18/10/2022
   863                                  ; 15/10/2022, 16/10/2022
   864                                  ; 03/10/2022
   865                                  ; 02/10/2022
   866                                  ; 01/10/2022 - Erdogan Tan
   867                                  
   868                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
   869                                  
   870                                  ;-----------------------------------------------------------------------------
   871                                  ; Start of (MSDOS 5.0) IO.SYS (IBMBIO.COM)
   872                                  ;-----------------------------------------------------------------------------
   873                                  
   874                                  		; [ORG 0]		; segment 0x0070h
   875                                  
   876                                  ;=============================================================================
   877                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
   878                                  ;=============================================================================
   879                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
   880                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
   881                                  
   882                                  section .BIOSDATA vstart=0
   883                                  
   884                                  ;--- DOSBIOS data segment ----------------------------------------------------
   885                                  ;-----------------------------------------------------------------------------
   886                                  
   887                                  ;Bios_Data segment
   888                                  
   889                                  BData_start:				
   890 00000000 E91C16                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
   891                                  ; ----------------------------------------------------------------------------
   892                                  
   893 00000003 0000                    DosDataSg:	dw 0
   894                                  
   895                                  ; DOS's int 2f handler will exit via a jump through here.
   896                                  ; This is how the BIOS hooks int2f
   897                                  
   898                                  ;BIOSDATA:0005h: ; 10/05/2023 (Note the 'bios_i2f equ 5' in 'msdos6.s')
   899                                  			
   900 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
   901                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
   902                                  		; PCDOS 7.1 IBMBIO.COM - BIODATA:0006h
   903                                  		;dw int_2f
   904                                  		;dw 70h			; BIOSDATA segment (KERNEL_SEGMENT)
   905 00000006 [5713]                  		dw i2f_handler	
   906                                  bios_i2f_seg:	; 10/08/2023
   907 00000008 8602                    		dw DOSBIOCODESEG	; 02CCh for MSDOS 6.21 IO.SYS (25Ch+070h)
   908                                  					; 0364h PCDOS 7.1 IBMBIO.COM  (2F4h+070h)
   909                                  
   910 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
   911                                  					; This is to maintain binary compatibility
   912                                  					; with DISK based DOS 5.0
   913                                  
   914                                  ; This is a byte used for special key handling in the resident
   915                                  ; console device driver. It must be here so that it can be included
   916                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
   917                                  
   918 0000000C 00                      altah:		db 0			; special key handling
   919                                  			
   920 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
   921 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
   922                                  
   923                                  ; PTRSAV - pointer save
   924                                  ;
   925                                  ; This variable holds the pointer to the Request Header passed by a program
   926                                  ; wishing to use a device driver. When the strategy routine is called it 
   927                                  ; puts the address of the Request header in this variable and returns.
   928                                  		
   929 00000012 00000000                ptrsav:		dd 0			
   930                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
   931 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
   932 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero			
   933 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through	
   934 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).			
   935 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
   936 00000021 0000                    auxnum:		dw 0			; which aux device was requested			
   937                                  
   938                                  ;-----------------------------------------------------------------------------
   939                                  
   940                                  res_dev_list:
   941                                  
   942                                  ; Device Header for the CON Device Driver
   943                                  
   944                                  CONHeader:				; HEADER FOR DEVICE "CON"
   945 00000023 [3500]                  		dw auxdev2
   946 00000025 7000                    		dw 70h	
   947 00000027 1380                    word_727:	dw 8013h
   948 00000029 [D006]                  		dw strategy
   949 0000002B [DB06]                  		dw con_entry
   950 0000002D 434F4E2020202020        aCon:		db 'CON     '           
   951 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"	
   952 00000037 7000                    		dw 70h
   953 00000039 0080                    		dw 8000h
   954 0000003B [D006]                  		dw strategy
   955 0000003D [FC06]                  		dw aux0_entry
   956 0000003F 4155582020202020        aAux:		db 'AUX     '
   957 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
   958 00000049 7000                    		dw 70h
   959 0000004B C0A0                    word_74B:	dw 0A0C0h
   960 0000004D [D006]                  		dw strategy
   961 0000004F [E006]                  		dw prn0_entry
   962 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
   963 00000059 [6B00]                  timdev:		dw dskdev	
   964 0000005B 7000                    		dw 70h
   965 0000005D 0880                    		dw 8008h
   966 0000005F [D006]                  		dw strategy
   967 00000061 [1407]                  		dw tim_entry
   968 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
   969 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
   970 0000006D 7000                    		dw 70h
   971 0000006F C208                    		dw 8C2h
   972                                  		;dw offset strategy
   973                                  		;dw offset dsk_entry
   974                                  		; 19/10/2022
   975 00000071 [D006]                  		dw strategy
   976 00000073 [1907]                  		dw dsk_entry
   977                                  
   978                                  ; maximum number of drives
   979                                  
   980 00000075 04                      drvmax:		db 4			
   981 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed		
   982 00000077 00                      fhave96:	db 0			; flag to indicate presence of
   983                                  					; 96tpi support		
   984 00000078 00                      single:		db 0			; used to detect single drive systems		
   985 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
   986                                  					; used by console driver.			
   987 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
   988                                  					; drive. (examined by checksingle).
   989                                  		
   990 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"	
   991 0000007D 7000                    		dw 70h
   992 0000007F 0080                    		dw 8000h
   993 00000081 [D006]                  		dw strategy
   994 00000083 [FC06]                  		dw aux0_entry
   995 00000085 434F4D3120202020        aCom1:		db 'COM1    '
   996 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1	
   997 0000008F 7000                    		dw 70h
   998 00000091 C0A0                    		dw 0A0C0h
   999 00000093 [D006]                  		dw strategy
  1000 00000095 [E706]                  		dw prn1_entry
  1001 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
  1002 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2	
  1003 000000A1 7000                    		dw 70h
  1004 000000A3 C0A0                    		dw 0A0C0h
  1005 000000A5 [D006]                  		dw strategy
  1006 000000A7 [EE06]                  		dw prn2_entry
  1007 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
  1007 000000B2 0000               
  1008                                  
  1009                                  ;M058; Start of changes
  1010                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  1011                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  1012                                  ;cannot change for them to work. Even ProComm does this.
  1013                                  
  1014 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h		
  1015                                  
  1016 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  1017 000000BA 7000                    		dw 70h
  1018 000000BC C0A0                    		dw 0A0C0h
  1019 000000BE [D006]                  		dw strategy
  1020 000000C0 [F506]                  		dw prn3_entry
  1021 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  1022 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  1023 000000CC 7000                    		dw 70h
  1024 000000CE 0080                    		dw 8000h
  1025 000000D0 [D006]                  		dw strategy
  1026 000000D2 [0207]                  		dw aux1_entry
  1027                                  		; 19/10/2022
  1028 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  1029                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  1030 000000DC [EE00]                  		dw com4dev
  1031 000000DE 7000                    		dw 70h
  1032 000000E0 0080                    		dw 8000h
  1033                                  		;dw offset strategy
  1034                                  		;dw offset aux2_entry
  1035 000000E2 [D006]                  		dw strategy
  1036 000000E4 [0807]                  		dw aux2_entry	
  1037 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  1038 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"	
  1039 000000F0 7000                    		dw 70h
  1040 000000F2 0080                    		dw 8000h
  1041 000000F4 [D006]                  		dw strategy
  1042 000000F6 [0E07]                  		dw aux3_entry
  1043 000000F8 434F4D3420202020        		db 'COM4    '
  1044                                  
  1045                                  ;-----------------------------------------------------------------------------
  1046                                  
  1047 00000100 10                      RomVectors:	db 10h			
  1048 00000101 00000000                Old10:		dd 0
  1049 00000105 13                      		db 13h
  1050 00000106 00000000                Old13:		dd 0			
  1051 0000010A 15                      		db 15h
  1052 0000010B 00000000                Old15:		dd 0			
  1053 0000010F 19                      		db 19h
  1054 00000110 00000000                Old19:		dd 0
  1055 00000114 1B                      		db 1Bh
  1056 00000115 00000000                Old1B:		dd 0
  1057                                  
  1058                                  ;EndRomVectors	equ $
  1059                                  
  1060                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  1061                                  
  1062                                  ;-----------------------------------------------------------------------------
  1063                                  
  1064 00000119 [4E03]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  1065 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  1066                                  
  1067                                  ; (MSDOS 3.3) NOTE:
  1068                                  ; Some floppy drives do not have changeline support. The result is a
  1069                                  ; large amount of inefficiency in the code. A media-check always returns
  1070                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  1071                                  ; always discard any cached data.
  1072                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  1073                                  ; The following three items are used to do this. The logical door latch is
  1074                                  ; based on the premise that it is not physically possible to change floppy
  1075                                  ; disks in a drive in under two seconds (most people take about 10). The
  1076                                  ; logical door latch is implemented by saving the time of the last successful
  1077                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  1078                                  ; current time is compared to the saved time. If less than two seconds have
  1079                                  ; passed then the value "No Change" is returned. If more than two seconds
  1080                                  ; have passed the value "Don't Know" is returned.
  1081                                  ;    There is one complecation to this algorithm. Some programs change the
  1082                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  1083                                  ; This possibility is detected by counting the number of disk operations
  1084                                  ; which occur without any time passing. If this count exceeds the value of
  1085                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  1086                                  ; Know". The variable "AccessCount" is used to keep track of the number
  1087                                  ; of disk operation which occur without the time changing.
  1088                                  
  1089 0000011D 00                      accesscount:	db 0			
  1090 0000011E FF                      tim_drv:	db 0FFh			
  1091 0000011F 00                      medbyt:		db 0
  1092                                  wrtverify:	; 15/10/2022			
  1093 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  1094 00000121 00                      verify:		db 0			; 1 if verify after write
  1095 00000122 0000                    seccnt:		dw 0			
  1096 00000124 00                      		db 0			; -- pad where hardnum was
  1097 00000125 01                      dsktnum:	db 1			; number of diskette drives			
  1098                                  
  1099                                  ; (MSDOS 3.3) NOTE:
  1100                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  1101                                  ; have to be made to read the diskette. Consequently a large head settle
  1102                                  ; time was always used in the I/O operations. To get around this problem
  1103                                  ; we need to continually adjust the head settle time. The following
  1104                                  ; algorithm is used:
  1105                                  ;
  1106                                  ;   Get the current head settle value.
  1107                                  ;   If it is 1, then
  1108                                  ;	set slow = 15
  1109                                  ;   else
  1110                                  ;	set slow = value
  1111                                  ;   ...
  1112                                  ;   if we are seeking and writing then
  1113                                  ;	use slow
  1114                                  ;   else
  1115                                  ;	use fast
  1116                                  ;   ...
  1117                                  ;   restore current head settle value
  1118                                  
  1119 00000126 00                      motorstartup:	db 0			; value from table
  1120 00000127 00                      settlecurrent:	db 0			; value from table
  1121 00000128 00                      settleslow:	db 0			; slow settle value
  1122 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  1123 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  1124 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  1125 0000012C 09                      eot:		db 9			
  1126 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table
  1127 00000131 00                      cursec:		db 0			; current sector
  1128 00000132 00                      curhd:		db 0			; current head
  1129 00000133 0000                    curtrk:		dw 0			; current track
  1130 00000135 0000                    spsav:		dw 0			; save the stack pointer
  1131 00000137 08                      formt_eot:	db 8			; eot used for format
  1132 00000138 00                      hdnum:		db 0			; head number
  1133 00000139 0000                    trknum:		dw 0			; track	being manipulated
  1134 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  1135                                  
  1136                                  ;-----------------------------------------------------------------------------
  1137                                  
  1138                                  ; disk errors returned from the IBM rom
  1139                                  
  1140 0000013C CC                      errin:		db 0CCh			; write	fault error
  1141 0000013D 80                      		db 80h			; no response
  1142 0000013E 40                      		db 40h			; seek failure
  1143 0000013F 10                      		db 10h			; bad crc
  1144 00000140 08                      		db 8			; dma overrun
  1145 00000141 06                      		db 6			; media	change
  1146 00000142 04                      		db 4			; sector not found
  1147 00000143 03                      		db 3			; write	attempt	to write-protect disk
  1148 00000144 00                      lsterr:		db 0			; all other errors
  1149                                  
  1150                                  ; returned error codes corresponding to above
  1151                                  
  1152 00000145 0A                      errout:		db 10			; write	fault error
  1153 00000146 02                      		db 2			; no response
  1154 00000147 06                      		db 6			; seek failure
  1155 00000148 04                      		db 4			; bad crc
  1156 00000149 04                      		db 4			; dma overrun
  1157 0000014A 0F                      		db 15			; invalid media	change
  1158 0000014B 08                      		db 8			; sector not found
  1159 0000014C 00                      		db 0			; write	attempt	to write-protect disk
  1160 0000014D 0C                      		db 12			; general error
  1161                                  
  1162                                  ;-----------------------------------------------------------------------------
  1163                                  
  1164                                  ; 30/12/2018 - Retro DOS v4.0
  1165                                  
  1166                                  ; read in boot sector here, read done in readboot.
  1167                                  ; also read sector for dma check for hard disk.
  1168                                  ;
  1169                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  1170                                  ; in them which causes the byte after the buffer to be trashed
  1171                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  1172                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  1173                                  ; makes that system more-or-less work.
  1174                                  
  1175                                  disksector:	;db 512 dup(0)		; read in boot sector here
  1176                                  		; 19/10/2022
  1177 0000014E 00<rep 200h>            		times 512 db 0
  1178                                  
  1179                                  ;-----------------------------------------------------------------------------
  1180                                  
  1181                                  ; 30/12/2018 - Retro DOS v4.0
  1182                                  ;-----------------------------------------------------------------------------
  1183                                  ; 25/05/2018 (04/04/2018)
  1184                                  ;*****************************************************************************
  1185                                  ;	"bds" contains information for each drive in the system.
  1186                                  ;	various values are patched whenever actions are performed.
  1187                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  1188                                  ;	the bpb has not been filled. link also set to -1 to signify end
  1189                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  1190                                  ;	that the parameters have not been set.
  1191                                  
  1192                                  bds1:		;dw offset bds2
  1193 0000034E [B203]                  		dw bds2	; 19/10/2022
  1194 00000350 7000                    		dw 70h			; dword	link to	next structure
  1195 00000352 00                      		db 0			; int 13h drive	number
  1196 00000353 00                      		db 0			; logical drive	letter
  1197 00000354 0002                    fdrive1:	dw 512			
  1198                                  					; physical sector size in bytes
  1199 00000356 FF                      		db 0FFh			; sectors/allocation unit
  1200 00000357 0100                    		dw 1			; reserved sectors for dos
  1201 00000359 02                      		db 2			; no of	file allocation	tables
  1202 0000035A 4000                    		dw 64			; number of root directory entries
  1203 0000035C 6801                    		dw 360			; number sectors (at 512 bytes each)
  1204 0000035E 00                      		db 0			; media	descriptor, initially 0
  1205 0000035F 0200                    		dw 2			; number of fat	sectors
  1206 00000361 0900                    		dw 9			; sector limit (sectors	per track)
  1207 00000363 0100                    		dw 1			; head limit (number of	heads -	1)
  1208 00000365 0000                    		dw 0			; hidden sector	count (low word)
  1209 00000367 0000                    		dw 0			; hidden sector	(high)
  1210 00000369 0000                    		dw 0			; number sectors (low)
  1211 0000036B 0000                    		dw 0			; number sectors (high)
  1212 0000036D 00                      		db 0			; true => large	fats
  1213 0000036E 0000                    		dw 0			; open ref. count
  1214 00000370 03                      		db 3			; form factor
  1215 00000371 2000                    		dw 20h			; various flags
  1216 00000373 2800                    		dw 40			; number of cylinders
  1217 00000375 0002                    recommended_bps: dw 512			; recommended bps for this drive
  1218 00000377 01                      		db 1
  1219 00000378 0100                    		dw 1
  1220 0000037A 02                      		db 2
  1221 0000037B E000                    		dw 224			; number of root directory entries
  1222 0000037D 6801                    		dw 360
  1223 0000037F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  1224 00000380 0200                    		dw 2
  1225 00000382 0900                    		dw 9
  1226 00000384 0200                    		dw 2
  1227 00000386 0000                    		dw 0
  1228 00000388 0000                    		dw 0
  1229 0000038A 0000                    		dw 0
  1230 0000038C 0000                    		dw 0
  1231                                  		;db 6 dup(0)
  1232 0000038E 00<rep 6h>              		times 6 db 0		; 19/10/2022
  1233 00000394 FF                      		db 0FFh			; last track accessed on this drive
  1234 00000395 FFFF                    		dw 0FFFFh		; keep these two contiguous (?)
  1235 00000397 FFFF                    		dw 0FFFFh
  1236 00000399 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  1236 000003A2 202000             
  1237 000003A5 00000000                		dd 0			; current volume serial	from boot record
  1238 000003A9 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  1239                                  ; ----
  1240                                  
  1241 000003B2 [1604]                  bds2:		dw bds3		
  1242 000003B4 7000                    		dw 70h
  1243 000003B6 00                      		db 0
  1244 000003B7 00                      		db 0
  1245 000003B8 0002                    fdrive2:	dw 512			
  1246 000003BA FF0100024000680100-     		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1246 000003C3 020009000100       
  1247 000003C9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1247 000003D2 00000320002800     
  1248 000003D9 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1248 000003E2 01F002000900       
  1249 000003E8 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1249 000003F1 00000000000000FF   
  1250 000003F9 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1250 00000402 4D                 
  1251 00000403 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1251 0000040C 00464154           
  1252 00000410 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1253                                  ; ----
  1254                                  
  1255 00000416 [7A04]                  bds3:		dw bds4		
  1256 00000418 7000                    		dw 70h
  1257 0000041A 00                      		db 0
  1258 0000041B 00                      		db 0
  1259 0000041C 0002                    fdrive3:	dw 512			
  1260 0000041E FF0100024000680100-     		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1260 00000427 020009000100       
  1261 0000042D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1261 00000436 00000320002800     
  1262 0000043D 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1262 00000446 01F002000900       
  1263 0000044C 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1263 00000455 00000000000000FF   
  1264 0000045D FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1264 00000466 4D                 
  1265 00000467 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1265 00000470 00464154           
  1266 00000474 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1267                                  ; ----
  1268                                  
  1269 0000047A FFFF                    bds4:		dw 0FFFFh		
  1270 0000047C 7000                    		dw 70h
  1271 0000047E 00                      		db 0
  1272 0000047F 00                      		db 0
  1273 00000480 0002                    fdrive4:	dw 512			
  1274 00000482 FF0100024000680100-     		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1274 0000048B 020009000100       
  1275 00000491 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1275 0000049A 00000320002800     
  1276 000004A1 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1276 000004AA 01F002000900       
  1277 000004B0 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1277 000004B9 00000000000000FF   
  1278 000004C1 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1278 000004CA 4D                 
  1279 000004CB 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1279 000004D4 00464154           
  1280 000004D8 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1281                                  
  1282                                  ;-----------------------------------------------------------------------------
  1283                                  
  1284 000004DE 03                      sm92:		db 3			; .spf			
  1285 000004DF 09                      		db 9			; .spt
  1286 000004E0 70                      		db 112	; 70h		; .cdire
  1287 000004E1 A005                    		dw 1440	; 2*9*80	; .csec
  1288 000004E3 02                      		db 2			; .spau
  1289 000004E4 02                      		db 2			; .chead
  1290                                  
  1291 000004E5 00                      keyrd_func:	db 0			
  1292 000004E6 01                      keysts_func:	db 1			
  1293 000004E7 00                      printdev:	db 0			; printer device index
  1294                                  
  1295                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  1296 000004E8 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  1297                                  
  1298 000004F0 0000                    daycnt:		dw 0			
  1299 000004F2 00                      t_switch:	db 0			; flag for updating daycnt
  1300 000004F3 00                      havecmosclock:	db 0			
  1301 000004F4 13                      base_century:	db 19			
  1302 000004F5 50                      base_year:	db 80			
  1303                                  
  1304 000004F6 1F                      month_tab:	db 31
  1305 000004F7 1C                      february:	db 28 ; 08/08/2023
  1306 000004F8 1F1E1F1E1F1F1E1F1E-     		db 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
  1306 00000501 1F                 
  1307                                  
  1308                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1309                                  %if 0  
  1310                                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  1311                                  		dw 70h ; 17/10/2022	
  1312                                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  1313                                  		dw 70h ; 17/10/2022
  1314                                  %endif
  1315 00000502 00                      set_id_flag:	db 0			; flag for getbp routine
  1316 00000503 464154313220202000      fat_12_id:	db 'FAT12   ',0         
  1317 0000050C 464154313620202000      fat_16_id:	db 'FAT16   ',0         
  1318 00000515 4E4F204E414D452020-     vol_no_name:	db 'NO NAME    ',0      
  1318 0000051E 202000             
  1319                                  
  1320 00000521 0000                    temp_h:		dw 0			; temporary for	32 bit calculation
  1321 00000523 0000                    start_sec_h:	dw 0			; starting sector number high word
  1322 00000525 0000                    saved_word:	dw 0			; tempory saving place for a word
  1323 00000527 0000                    multrk_flag:	dw 0			
  1324 00000529 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  1325 0000052A 0000                    vretry_cnt:	dw 0			
  1326 0000052C 0000                    soft_ecc_cnt:	dw 0			
  1327 0000052E 00                      multitrk_format_flag: db 0		; multi	track format request flag
  1328 0000052F 0000                    xfer_seg:	dw 0			; temp for transfer segment
  1329                                  
  1330                                  ; variables for msdioctl.asm module
  1331                                  
  1332                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  1333                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  1334                                  ;	n	bytes per sector
  1335                                  ;      ---	----------------
  1336                                  ;	0	      128
  1337                                  ;	1	      256
  1338                                  ;	2	      512
  1339                                  ;	3	     1024
  1340                                  
  1341                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  1342                                  ;					; we support (was 40 in dos 3.2)
  1343                                  
  1344 00000531 2400                    sectorspertrack: dw 36			
  1345 00000533 00000102                tracktable:	db 0, 0, 1, 2		
  1346 00000537 00000202                		db 0, 0, 2, 2
  1347 0000053B 00000302                		db 0, 0, 3, 2
  1348 0000053F 00000402                		db 0, 0, 4, 2
  1349 00000543 00000502                		db 0, 0, 5, 2
  1350 00000547 00000602                		db 0, 0, 6, 2
  1351 0000054B 00000702                		db 0, 0, 7, 2
  1352 0000054F 00000802                		db 0, 0, 8, 2
  1353 00000553 00000902                		db 0, 0, 9, 2
  1354 00000557 00000A02                		db 0, 0, 10, 2
  1355 0000055B 00000B02                		db 0, 0, 11, 2
  1356 0000055F 00000C02                		db 0, 0, 12, 2
  1357 00000563 00000D02                		db 0, 0, 13, 2
  1358 00000567 00000E02                		db 0, 0, 14, 2
  1359 0000056B 00000F02                		db 0, 0, 15, 2
  1360 0000056F 00001002                		db 0, 0, 16, 2
  1361 00000573 00001102                		db 0, 0, 17, 2
  1362 00000577 00001202                		db 0, 0, 18, 2
  1363 0000057B 00001302                		db 0, 0, 19, 2
  1364 0000057F 00001402                		db 0, 0, 20, 2
  1365 00000583 00001502                		db 0, 0, 21, 2
  1366 00000587 00001602                		db 0, 0, 22, 2
  1367 0000058B 00001702                		db 0, 0, 23, 2
  1368 0000058F 00001802                		db 0, 0, 24, 2
  1369 00000593 00001902                		db 0, 0, 25, 2
  1370 00000597 00001A02                		db 0, 0, 26, 2
  1371 0000059B 00001B02                		db 0, 0, 27, 2
  1372 0000059F 00001C02                		db 0, 0, 28, 2
  1373 000005A3 00001D02                		db 0, 0, 29, 2
  1374 000005A7 00001E02                		db 0, 0, 30, 2
  1375 000005AB 00001F02                		db 0, 0, 31, 2
  1376 000005AF 00002002                		db 0, 0, 32, 2
  1377 000005B3 00002102                		db 0, 0, 33, 2
  1378 000005B7 00002202                		db 0, 0, 34, 2
  1379 000005BB 00002302                		db 0, 0, 35, 2
  1380 000005BF 00002402                		db 0, 0, 36, 2
  1381 000005C3 00<rep 6Ch>             		times 108 db 0		; 19/10/2022
  1382                                  		;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  1383                                  					; times	((4*63)	- 144) db 0
  1384                                  
  1385                                  ;-----------------------------------------------------------------------------
  1386                                  
  1387                                  ; this is a real ugly place to put this
  1388                                  ; it should really go in the bds
  1389                                  
  1390 0000062F 00                      mediatype:	db 0			
  1391 00000630 00                      media_set_for_format: db 0		; 1 if we have done an int 13h set media
  1392                                  					; type for format call
  1393 00000631 00                      had_format_error: db 0			; 1 if the previous format operation
  1394                                  					; failed.
  1395                                  
  1396                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  1397                                  ; the one passed by "new roms" before we perform a format operation. the old
  1398                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  1399                                  ; this table does not contain the previously saved dpt.
  1400                                  		
  1401 00000632 FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  1402 00000636 FF                      model_byte:	db 0FFh			; model	byte set at init time
  1403 00000637 00                      secondary_model_byte: db 0
  1404                                  		
  1405 00000638 00                      int19sem:	db 0			; indicate that all int 19h
  1406                                  					; initialization is complete
  1407                                  		
  1408                                  ;; we assume the following remain contiguous and their order doesn't change
  1409                                  ;i19_lst:
  1410                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  1411                                  ;	public	int19old&aa
  1412                                  ;		db	aa&h	; store the number as a byte
  1413                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  1414                                  ;	endm
  1415                                  
  1416                                  ; 21/10/2022
  1417                                  
  1418 00000639 02                      i19_lst:	db 2			
  1419                                  					; Int19old&aa
  1420 0000063A FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  1421 0000063E 08                      		db 8
  1422 0000063F FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  1423 00000643 09                      		db 9
  1424 00000644 FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  1425 00000648 0A                      		db 0Ah
  1426 00000649 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  1427 0000064D 0B                      		db 0Bh
  1428 0000064E FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  1429 00000652 0C                      		db 0Ch
  1430 00000653 FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  1431 00000657 0D                      		db 0Dh
  1432 00000658 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  1433 0000065C 0E                      		db 0Eh
  1434 0000065D FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  1435 00000661 70                      		db 70h
  1436 00000662 FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  1437 00000666 72                      		db 72h
  1438 00000667 FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  1439 0000066B 73                      		db 73h
  1440 0000066C FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  1441 00000670 74                      		db 74h
  1442 00000671 FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  1443 00000675 76                      		db 76h
  1444 00000676 FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  1445 0000067A 77                      		db 77h
  1446 0000067B FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  1447                                  
  1448                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  1449                                  
  1450                                  ;-----------------------------------------------------------------------------
  1451                                  
  1452 0000067F [5403]                  dskdrvs:	dw fdrive1	
  1453 00000681 [B803]                  		dw fdrive2
  1454 00000683 [1C04]                  		dw fdrive3
  1455 00000685 [8004]                  		dw fdrive4
  1456                                  
  1457                                  ;M011 -- made all hard drive stuff variable
  1458                                  		;dw 22 dup(0)		; up to	26 drives for mini disks
  1459 00000687 0000<rep 16h>           		times 22 dw 0	; 19/10/2022
  1460                                  
  1461                                  ;-----------------------------------------------------------------------------
  1462                                  
  1463                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  1464                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  1465                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  1466                                  
  1467                                  ;variables for dynamic relocatable modules
  1468                                  ;these should be stay resident.
  1469                                  
  1470 000006B3 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  1471                                  					; for p12 machine
  1472                                  
  1473                                  ; data structures for real-time date and time
  1474                                  			
  1475 000006B7 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  1476                                  
  1477                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1478                                  %if 0
  1479                                  month_table:	dw 0			; january
  1480                                  		dw 31			; february
  1481                                  		dw 59
  1482                                  		dw 90
  1483                                  		dw 120
  1484                                  		dw 151
  1485                                  		dw 181
  1486                                  		dw 212
  1487                                  		dw 243
  1488                                  		dw 273
  1489                                  		dw 304
  1490                                  		dw 334			; december
  1491                                  %endif
  1492                                  
  1493 000006BB 0000                    daycnt2:	dw 0			
  1494                                  ; 08/08/2023
  1495                                  ;feb29:		db 0			; february 29 in a leap	year flag
  1496                                  
  1497                                  ;-----------------------------------------------------------------------------
  1498                                  ;
  1499                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  1500                                  ; by Erdogan Tan (Istanbul) ! free source code !
  1501                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  1502                                  
  1503                                  ; ----------------------------------------------------------------------------
  1504                                  
  1505                                  ;************************************************************************
  1506                                  ;*									*
  1507                                  ;*	Entry points into Bios_Code routines. The segment values	*
  1508                                  ;*	  are plugged in by seg_reinit.					*
  1509                                  ;*									*
  1510                                  ;************************************************************************
  1511                                  
  1512                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  1513                                  ; BIOSCODE_SEGMENT equ 2C7h
  1514                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  1515                                  
  1516                                  ; 01/10/2022 - Erdogan Tan
  1517                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  1518                                  ;  addresses, they will be changed to table labels later)
  1519                                  
  1520                                  ; 09/12/2022
  1521                                  %if 0
  1522                                  cdev:		dw 43h,	2C7h		; chardev_entry
  1523                                  					; at 2C7h:43h =	70h:25B3h
  1524                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  1525                                  					; at 2C7h:396h = 70h:2906h
  1526                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  1527                                  					; at 2C7h:1302h	= 70h:3872h
  1528                                  i13x:		dw 154Bh, 2C7h		; i13z
  1529                                  					; at 2C7h:154Bh	= 70h:3ABBh
  1530                                  %endif
  1531                                  
  1532                                  ; 30/12/2022
  1533                                  ; (IOSYSCODESEG is 2CCh for MSDOS 6.21 IO.SYS)
  1534                                  
  1535                                  ; 09/12/2022
  1536 000006BD [4700]8602              cdev:		dw chardev_entry, IOSYSCODESEG
  1537 000006C1 [8D03]8602              ttticks:	dw time_to_ticks, IOSYSCODESEG
  1538                                  ; 07/08/2023
  1539                                  ;bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  1540 000006C5 [9415]8602              i13x:		dw i13z, IOSYSCODESEG
  1541                                  
  1542                                  end_BC_entries:	; 15/10/2022
  1543                                  
  1544                                  ;************************************************************************
  1545                                  ;*									*
  1546                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  1547                                  ;*									*
  1548                                  ;************************************************************************
  1549                                  
  1550                                  cbreak:					
  1551 000006C9 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  1552                                  					; indicate break key set
  1553                                  intret:					
  1554 000006CF CF                      		iret
  1555                                  
  1556                                  ; =============== S U B	R O U T	I N E ========================================
  1557                                  
  1558                                  
  1559                                  ;************************************************************************
  1560                                  ;*									*
  1561                                  ;*	strategy - store es:bx (device driver request packet)		*
  1562                                  ;*		     away at [ptrsav] for next driver function call	*
  1563                                  ;*									*
  1564                                  ;************************************************************************
  1565                                  
  1566                                  strategy:	; proc far		
  1567 000006D0 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  1568                                  					; away at [ptrsav] for next driver function call
  1569 000006D5 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  1570 000006DA CB                      		retf
  1571                                  
  1572                                  ; ----------------------------------------------------------------------------
  1573                                  
  1574                                  ;************************************************************************
  1575                                  ;*									*
  1576                                  ;*	device driver entry points. these are the initial		*
  1577                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  1578                                  ;*	  in the case of our resident drivers, they'll just		*
  1579                                  ;*	  stick a fake return address on the stack which		*
  1580                                  ;*	  points to dispatch tables and possibly some unit		*
  1581                                  ;*	  numbers, and then call through a common entry point		*
  1582                                  ;*	  which can take care of a20 switching				*
  1583                                  ;*									*
  1584                                  ;************************************************************************
  1585                                  
  1586                                  ; 01/10/2022 - Erdogan Tan
  1587                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  1588                                  ;  addresses, they will be changed to table labels later)
  1589                                  
  1590                                  ; 09/12/2022
  1591                                  
  1592                                  con_entry:				
  1593 000006DB E84000                  		call	cdev_entry
  1594                                  ; ----------------------------------------------------------------------------
  1595                                  		;dw 0E4h		; con_table
  1596 000006DE [E700]                  		dw con_table	
  1597                                  					; 2C7h:0E4h = 70h:2654h
  1598                                  ; ----------------------------------------------------------------------------
  1599                                  
  1600                                  prn0_entry:				
  1601 000006E0 E83B00                  		call	cdev_entry
  1602                                  ; ----------------------------------------------------------------------------
  1603                                  		;dw 0FBh		; prn_table
  1604 000006E3 [FE00]                  		dw prn_table
  1605                                  					; 2C7h:0FBh = 70h:266Bh
  1606 000006E5 0000                    		db 0, 0
  1607                                  ; ----------------------------------------------------------------------------
  1608                                  
  1609                                  prn1_entry:				
  1610 000006E7 E83400                  		call	cdev_entry
  1611                                  ; ----------------------------------------------------------------------------
  1612                                  		;dw 0FBh		; prn_table
  1613 000006EA [FE00]                  		dw prn_table
  1614                                  					; 2C7h:0FBh = 70h:266Bh
  1615 000006EC 0001                    		db 0, 1
  1616                                  ; ----------------------------------------------------------------------------
  1617                                  
  1618                                  prn2_entry:				
  1619 000006EE E82D00                  		call	cdev_entry
  1620                                  ; ----------------------------------------------------------------------------
  1621                                  		;dw 0FBh		; prn_table
  1622 000006F1 [FE00]                  		dw prn_table
  1623                                  					; 2C7h:0FBh = 70h:266Bh
  1624 000006F3 0102                    		db 1, 2
  1625                                  ; ----------------------------------------------------------------------------
  1626                                  
  1627                                  prn3_entry:				
  1628 000006F5 E82600                  		call	cdev_entry
  1629                                  ; ----------------------------------------------------------------------------
  1630                                  		;dw 0FBh		; prn_table
  1631 000006F8 [FE00]                  		dw prn_table
  1632                                  					; 2C7h:0FBh = 70h:266Bh
  1633 000006FA 0203                    		db 2, 3
  1634                                  ; ----------------------------------------------------------------------------
  1635                                  
  1636                                  aux0_entry:				
  1637 000006FC E81F00                  		call	cdev_entry
  1638                                  ; ----------------------------------------------------------------------------
  1639                                  		;dw 130h		; aux_table
  1640 000006FF [3301]                  		dw aux_table
  1641                                  					; 2C7h:130h = 70h:26A0h
  1642 00000701 00                      		db 0
  1643                                  ; ----------------------------------------------------------------------------
  1644                                  
  1645                                  aux1_entry:				
  1646 00000702 E81900                  		call	cdev_entry
  1647                                  ; ----------------------------------------------------------------------------
  1648                                  		;dw 130h		; aux_table
  1649 00000705 [3301]                  		dw aux_table
  1650                                  					; 2C7h:130h = 70h:26A0h
  1651 00000707 01                      		db 1
  1652                                  ; ----------------------------------------------------------------------------
  1653                                  
  1654                                  aux2_entry:				
  1655 00000708 E81300                  		call	cdev_entry
  1656                                  ; ----------------------------------------------------------------------------
  1657                                  		;dw 130h		; aux_table
  1658 0000070B [3301]                  		dw aux_table
  1659                                  					; 2C7h:130h = 70h:26A0h
  1660 0000070D 02                      		db 2
  1661                                  ; ----------------------------------------------------------------------------
  1662                                  
  1663                                  aux3_entry:				
  1664 0000070E E80D00                  		call	cdev_entry
  1665                                  ; ----------------------------------------------------------------------------
  1666                                  		;dw 130h		; aux_table
  1667 00000711 [3301]                  		dw aux_table
  1668                                  					; 2C7h:130h = 70h:26A0h
  1669 00000713 03                      		db 3
  1670                                  ; ----------------------------------------------------------------------------
  1671                                  
  1672                                  tim_entry:				
  1673 00000714 E80700                  		call	cdev_entry
  1674                                  ; ----------------------------------------------------------------------------
  1675                                  		;dw 147h		; tim_table
  1676 00000717 [4A01]                  		dw tim_table
  1677                                  					; 2C7h:147h = 70h:26B7h
  1678                                  ; ----------------------------------------------------------------------------
  1679                                  
  1680                                  ; 15/10/2022
  1681                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  1682                                  ; 09/12/2022
  1683                                  DSKTBL equ dsktbl
  1684                                  
  1685                                  dsk_entry:				
  1686 00000719 E80200                  		call	cdev_entry
  1687                                  ; ----------------------------------------------------------------------------
  1688                                  		;dw 4A2h		; dsktbl
  1689 0000071C [3B05]                  		dw DSKTBL		; 09/12/2022
  1690                                  					; 2C7h:4A2h = 70h:2A12h
  1691                                  
  1692                                  ; =============== S U B	R O U T	I N E ========================================
  1693                                  
  1694                                  ;************************************************************************
  1695                                  ;*									*
  1696                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  1697                                  ;*	This code assumes that if Segment of Device request packet is	*
  1698                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  1699                                  ;*	A20 is already on.						*
  1700                                  ;*									*
  1701                                  ;************************************************************************
  1702                                  
  1703                                  cdev_entry:	; proc near		
  1704 0000071E 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1705 00000724 740D                    		jz	short ce_enter_codeseg
  1706                                  				; optimized for DOS in HMA
  1707 00000726 50                      		push	ax
  1708 00000727 2EA1[0300]              		mov	ax, [cs:DosDataSg]
  1709 0000072B 2E3906[1400]            		cmp	[cs:ptrsav+2], ax
  1710 00000730 58                      		pop	ax
  1711 00000731 7505                    		jnz	short not_from_dos
  1712                                  				; jump is coded this way to fall thru
  1713                                  				; in 99.99% of the cases
  1714                                  ce_enter_codeseg:
  1715 00000733 2EFF2E[BD06]            		jmp	far [cs:cdev]			
  1716                                  		;jmp	dword ptr cs:cdev
  1717                                  ;-----------------------------------------------------------------------------
  1718                                  
  1719                                  not_from_dos:				
  1720 00000738 E85500                  		call	EnsureA20On
  1721 0000073B EBF6                    		jmp	short ce_enter_codeseg
  1722                                  
  1723                                  ;************************************************************************
  1724                                  ;*									*
  1725                                  ;*	outchr - this is our int 29h handler. it writes the		*
  1726                                  ;*	   character in al on the display using int 10h ttywrite	*
  1727                                  ;*									*
  1728                                  ;************************************************************************
  1729                                  
  1730                                  outchr:					
  1731 0000073D 50                      		push	ax		; int 29h handler
  1732 0000073E 56                      		push	si
  1733 0000073F 57                      		push	di
  1734 00000740 55                      		push	bp
  1735 00000741 53                      		push	bx
  1736 00000742 B40E                    		mov	ah, 0Eh
  1737 00000744 BB0700                  		mov	bx, 7
  1738 00000747 CD10                    		int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  1739                                  					; AL = character, BH = display page (alpha modes)
  1740                                  					; BL = foreground color	(graphics modes)
  1741 00000749 5B                      		pop	bx
  1742 0000074A 5D                      		pop	bp
  1743 0000074B 5F                      		pop	di
  1744 0000074C 5E                      		pop	si
  1745 0000074D 58                      		pop	ax
  1746 0000074E CF                      		iret
  1747                                  ;-----------------------------------------------------------------------------
  1748                                  
  1749                                  ;************************************************************************
  1750                                  ;*									*
  1751                                  ;*	block13 - our int13 hooker					*
  1752                                  ;*									*
  1753                                  ;************************************************************************
  1754                                  
  1755                                  block13:				
  1756 0000074F 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1757 00000755 7408                    		jz	short skipa20
  1758 00000757 E84700                  		call	IsA20Off	; A20 Off?
  1759 0000075A 7503                    		jnz	short skipa20
  1760 0000075C E83600                  		call	EnableA20	; assure a20 enabled
  1761                                  
  1762                                  skipa20:				
  1763 0000075F 2E8C1E[1C00]            		mov	[cs:i13_ds], ds	; save caller's ds for call-through
  1764 00000764 9C                      		pushf			; fake interrupt
  1765 00000765 2EFF1E[C506]            		call	far [cs:i13x]
  1766                                  		;call	dword ptr cs:i13x
  1767                                  					; call through Bios_Code entry table
  1768 0000076A 2E8E1E[1C00]            		mov	ds, [cs:i13_ds]
  1769 0000076F CA0200                  		retf	2
  1770                                  
  1771                                  ; =============== S U B	R O U T	I N E =======================================
  1772                                  
  1773                                  ; the int13 hook calls back here to call-through to the ROM
  1774                                  ; this is necessary because some people have extended their
  1775                                  ; ROM BIOSs to use ds as a parameter/result register and
  1776                                  ; our int13 hook relies heavily on ds to access Bios_Data
  1777                                  
  1778                                  call_orig13:	; proc far		
  1779 00000772 8E1E[1C00]              		mov	ds, [i13_ds]	; get caller's ds register
  1780 00000776 9C                      		pushf			; simulate an int13
  1781 00000777 2EFF1E[B400]            		call	far [cs:Orig13]
  1782                                  		;call	cs:Orig13
  1783 0000077C 2E8C1E[1C00]            		mov	[cs:i13_ds], ds
  1784 00000781 0E                      		push	cs
  1785 00000782 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  1786                                  
  1787 00000783 9C                      		pushf
  1788                                  		; 10/12/2022
  1789                                  		; ds = cs
  1790 00000784 803E[0D00]00            		cmp	byte [inHMA], 0	; 16/10/2022
  1791                                  		;cmp	byte [cs:inHMA], 0
  1792 00000789 7403                    		jz	short corig13_popf_retf
  1793                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1794                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0725h	
  1795                                  		;call	IsA20Off
  1796                                  		;jnz	short corig13_popf_retf
  1797                                  		;call	EnableA20
  1798 0000078B E80200                  		call	EnsureA20On ; 07/08/2023
  1799                                  corig13_popf_retf:			
  1800 0000078E 9D                      		popf
  1801                                  re_init:	; 07/08/2023
  1802 0000078F CB                      		retf
  1803                                  
  1804                                  ;-----------------------------------------------------------------------------
  1805                                  
  1806                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  1807                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  1808                                  
  1809                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1810                                  ;HiMem:		dd 0FFFF0090h		
  1811                                  ;LoMem:		dd 80h
  1812                                  
  1813                                  ; ----------------------------------------------------------------------------			
  1814                                  
  1815                                  ; =============== S U B	R O U T	I N E ========================================
  1816                                  
  1817                                  
  1818                                  ;************************************************************************
  1819                                  ;*									*
  1820                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  1821                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  1822                                  ;*									*
  1823                                  ;************************************************************************
  1824                                  
  1825                                  EnsureA20On:	; proc near		
  1826 00000790 E80E00                  		call	IsA20Off
  1827                                  		;jz	short EnableA20
  1828                                  		;retn
  1829                                  		; 18/12/2022
  1830 00000793 750B                    		jnz	short A20On_retn	
  1831                                  
  1832                                  ; =============== S U B	R O U T	I N E ========================================
  1833                                  
  1834                                  
  1835                                  EnableA20:	; proc near		
  1836 00000795 50                      		push	ax
  1837 00000796 53                      		push	bx
  1838 00000797 B405                    		mov	ah, 5	 ; local enable a20
  1839                                  		;call	cs:xms
  1840 00000799 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  1841 0000079E 5B                      		pop	bx
  1842 0000079F 58                      		pop	ax
  1843                                  A20On_retn:	; 18/12/2022	
  1844 000007A0 C3                      		retn
  1845                                  
  1846                                  ; =============== S U B	R O U T	I N E ========================================
  1847                                  
  1848                                  
  1849                                  IsA20Off:	; proc near		
  1850 000007A1 1E                      		push	ds
  1851 000007A2 06                      		push	es
  1852 000007A3 51                      		push	cx
  1853 000007A4 56                      		push	si
  1854 000007A5 57                      		push	di
  1855                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1856                                  		;lds	si, [cs:HiMem]
  1857                                  		;les	di, [cs:LoMem]
  1858                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0740h
  1859 000007A6 31FF                    		xor	di, di
  1860 000007A8 8EC7                    		mov	es, di
  1861 000007AA 4F                      		dec	di
  1862 000007AB BE9000                  		mov	si, 90h	; 0FFFFh:0090h ; HiMem
  1863 000007AE 8EDF                    		mov	ds, di
  1864 000007B0 BF8000                  		mov	di, 80h ; 0000h:0080h ; LoMem
  1865 000007B3 B90800                  		mov	cx, 8
  1866 000007B6 F3A7                    		repe cmpsw
  1867                                  				; zf = 0 -> A20 line is ON
  1868                                  				; zf = 1 -> A20 line is OFF
  1869 000007B8 5F                      		pop	di
  1870 000007B9 5E                      		pop	si
  1871 000007BA 59                      		pop	cx
  1872 000007BB 07                      		pop	es
  1873 000007BC 1F                      		pop	ds
  1874 000007BD C3                      		retn
  1875                                  
  1876                                  ; ----------------------------------------------------------------------------
  1877                                  
  1878                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1879                                  %if 0
  1880                                  DisableA20:
  1881                                  		push	ax
  1882                                  		push	bx
  1883                                  		mov	ah, 6		; local disable A20
  1884                                  		call	far [cs:xms]
  1885                                  		;call	cs:xms
  1886                                  		pop	bx
  1887                                  		pop	ax
  1888                                  		retn
  1889                                  %endif
  1890                                  
  1891                                  ; ----------------------------------------------------------------------------
  1892                                  
  1893                                  ;************************************************************************
  1894                                  ;*									*
  1895                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  1896                                  ;*	  interrupt vectors before resuming the original int19 code	*
  1897                                  ;*									*
  1898                                  ;************************************************************************
  1899                                  
  1900                                  int19:
  1901 000007BE 0E                      		push	cs
  1902 000007BF 1F                      		pop	ds
  1903                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1904                                  		;mov	es, [zeroseg]	; 16/10/2022
  1905                                  		;mov	cx, 5		; NUMROMVECTORS
  1906 000007C0 31C9                    		xor	cx, cx
  1907 000007C2 8EC1                    		mov	es, cx
  1908 000007C4 B105                    		mov	cl, 5
  1909                                  		;mov	si, offset RomVectors
  1910 000007C6 BE[0001]                		mov	si, RomVectors	; 19/10/2022
  1911                                  next_int:				
  1912 000007C9 AC                      		lodsb			; get int number
  1913 000007CA 98                      		cbw			; assume < 128
  1914 000007CB D1E0                    		shl	ax, 1
  1915 000007CD D1E0                    		shl	ax, 1		; int *	4
  1916                                  		; 07/08/2023
  1917                                  		;mov	di, ax
  1918                                  		;lodsw
  1919                                  		;stosw
  1920                                  		;lodsw
  1921                                  		;stosw			; install the saved vector
  1922                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:076Ah
  1923 000007CF 97                      		xchg	ax, di
  1924 000007D0 A5                      		movsw
  1925 000007D1 A5                      		movsw
  1926 000007D2 E2F5                    		loop	next_int
  1927                                  		;cmp	byte [int19sem], 0 ; 19/10/2022
  1928 000007D4 380E[3806]              		cmp	[int19sem], cl ; 0 ; 07/08/2023
  1929 000007D8 7419                    		jz	short doint19
  1930 000007DA BE[3906]                		mov	si, i19_lst	; stacks code has changed these hardware interrupt vectors
  1931                                  					; stkinit in sysinit1 will initialize int19oldxx values
  1932                                  		;mov	cx, 14		; num_i19
  1933                                  		; 07/08/2023
  1934 000007DD B10E                    		mov	cl, 14	
  1935                                  i19_restore_loop:			
  1936 000007DF AC                      		lodsb			; get interrupt	number
  1937 000007E0 98                      		cbw			; assume < 128
  1938                                  		;mov	di, ax
  1939                                  		;lodsw			; get original vector offset
  1940                                  		;mov	bx, ax		; save it
  1941                                  		;lodsw
  1942                                  		; 07/08/2023
  1943 000007E1 97                      		xchg	ax, di
  1944 000007E2 AD                      		lodsw
  1945 000007E3 93                      		xchg	ax, bx
  1946 000007E4 AD                      		lodsw
  1947                                  		;cmp	bx, 0FFFFh	; check	for 0ffffh (unlikely segment)
  1948 000007E5 43                      		inc	bx ; 07/08/2023
  1949 000007E6 7409                    		jz	short i19_restor_1 ; opt no need to check selector too
  1950                                  		;cmp	ax, 0FFFFh	; opt 0ffffh is	unlikely offset
  1951                                  		;jz	short i19_restor_1
  1952 000007E8 4B                      		dec	bx ; 07/08/2023
  1953 000007E9 01FF                    		add	di, di
  1954 000007EB 01FF                    		add	di, di
  1955 000007ED 93                      		xchg	ax, bx
  1956 000007EE AB                      		stosw
  1957 000007EF 93                      		xchg	ax, bx
  1958 000007F0 AB                      		stosw			; put the vector back
  1959                                  
  1960                                  i19_restor_1:				
  1961 000007F1 E2EC                    		loop	i19_restore_loop
  1962                                  
  1963                                  doint19:				
  1964                                  		;cmp	byte [inHMA], 0	; ; Is dos running from	HMA
  1965 000007F3 380E[0D00]              		cmp	[inHMA], cl ; 0 ; 07/08/2023
  1966 000007F7 7403                    		jz	short SkipVDisk
  1967 000007F9 E82800                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  1968                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  1969                                  					; the memory above 1MB during a	warm boot.
  1970                                  SkipVDisk:				
  1971 000007FC CD19                    		int	19h		; DISK BOOT
  1972                                  					; causes reboot	of disk	system
  1973                                  
  1974                                  ; =============== S U B	R O U T	I N E ========================================
  1975                                  
  1976                                  ;-----------------------------------------------------------------------------
  1977                                  ;
  1978                                  ; procedure : int15
  1979                                  ;
  1980                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  1981                                  ;		If it recognizes ctrl-alt-del and if DOS was
  1982                                  ;		is running high, it Erases the VDISK header
  1983                                  ;		present at 1MB boundary
  1984                                  ;
  1985                                  ;-----------------------------------------------------------------------------
  1986                                  
  1987                                  ; 16/10/2022
  1988                                  ;DELKEY		equ	53h
  1989                                  ;ROMDATASEG	equ	40h
  1990                                  KBFLAG		equ	17h
  1991                                  ;CTRLSTATE	equ	04h
  1992                                  ;ALTSTATE	equ	08h
  1993                                  
  1994                                  Int15:		; proc near		
  1995                                  		;cmp	ax, 4F00h+DELKEY
  1996 000007FE 3D534F                  		cmp	ax, 4F53h	; del keystroke ?
  1997                                  		; 07/08/2023
  1998                                  		;jz	short int15_1
  1999                                  		;jmp	far [cs:Old15]	; 16/10/2022
  2000                                  		;;jmp	cs:Old15
  2001 00000801 751C                    		jnz	short Old15_j	; 07/08/2023 
  2002                                  ; ----------------------------------------------------------------------------
  2003                                  int15_1:				
  2004 00000803 1E                      		push	ds
  2005 00000804 50                      		push	ax
  2006                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2007                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07A5h
  2008                                  		;mov	ax, 40h		; ROMDATASEG
  2009                                  		;mov	ds, ax
  2010                                  		;;mov	al, ds:17h	; [KBFLAG]
  2011                                  		;; 16/10/2022
  2012                                  		;mov	al, [KBFLAG]
  2013 00000805 31C0                    		xor	ax, ax
  2014 00000807 8ED8                    		mov	ds, ax
  2015 00000809 A01704                  		mov	al, [0417h]	; KBFLAG = 0417h (PCDOS 7.1 IBMBIO.COM)
  2016 0000080C 240C                    		and	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  2017 0000080E 3C0C                    		cmp	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  2018 00000810 750A                    		jnz	short int15_2
  2019                                  		; 07/08/2023
  2020                                  		;push	cs
  2021                                  		;pop	ds
  2022                                  		;cmp	byte [inHMA], 0	; is DOS running from HMA
  2023 00000812 2E3826[0D00]            		cmp	byte [cs:inHMA], ah ; 0
  2024 00000817 7403                    		jz	short int15_2
  2025 00000819 E80800                  		call	EraseVDiskHead
  2026                                  int15_2:				
  2027 0000081C 58                      		pop	ax
  2028 0000081D 1F                      		pop	ds
  2029 0000081E F9                      		stc
  2030                                  Old15_j:		; 07/08/2023
  2031 0000081F 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  2032                                  		;jmp	cs:Old15
  2033                                  	
  2034                                  ; =============== S U B	R O U T	I N E ========================================
  2035                                  
  2036                                  ;-----------------------------------------------------------------------------
  2037                                  ;
  2038                                  ; procedure : EraseVDiskHead
  2039                                  ;
  2040                                  ;		Erases the VDisk Header present in the 1MB boundary
  2041                                  ;
  2042                                  ;-----------------------------------------------------------------------------
  2043                                  
  2044                                  EraseVDiskHead:	; proc near
  2045                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2046                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07C1h
  2047                                  		;push	ax
  2048 00000824 51                      		push	cx
  2049 00000825 57                      		push	di
  2050 00000826 06                      		push	es
  2051 00000827 E866FF                  		call	EnsureA20On
  2052 0000082A B8FFFF                  		mov	ax, 0FFFFh	; HMA seg
  2053 0000082D 8EC0                    		mov	es, ax
  2054 0000082F BF1000                  		mov	di, 10h		; point	to VDISK header
  2055                                  		; 07/08/2023
  2056                                  		;mov	cx, 10h		; size of vdisk	header
  2057 00000832 89F9                    		mov	cx, di ; 16
  2058                                  		;xor	ax, ax
  2059 00000834 40                      		inc	ax ; ax = 0
  2060 00000835 F3AB                    		rep stosw		; clear	it
  2061 00000837 07                      		pop	es
  2062 00000838 5F                      		pop	di
  2063 00000839 59                      		pop	cx
  2064                                  		;pop	ax ; 07/08/2023
  2065 0000083A C3                      		retn
  2066                                  
  2067                                  ; ----------------------------------------------------------------------------
  2068                                  
  2069                                  ;************************************************************************
  2070                                  ;*									*
  2071                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  2072                                  ;*	  it returns through one of the three functions that follow.	*
  2073                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  2074                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  2075                                  ;*									*
  2076                                  ;************************************************************************
  2077                                  
  2078                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2079                                  %if 0
  2080                                  int_2f:		
  2081                                  		jmp	far [cs:bcode_i2f] ; 16/10/2022
  2082                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  2083                                  
  2084                                  ; ----------------------------------------------------------------------------
  2085                                  
  2086                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  2087                                  ; note:  is it really necessary to transiton out and then back in?
  2088                                  ;	 It's not as if this is a really speed critical function.
  2089                                  ;	 might as well do whatever's most compact.
  2090                                  
  2091                                  i2f_dskentry:
  2092                                  		jmp	dsk_entry
  2093                                  
  2094                                  ; ----------------------------------------------------------------------------
  2095                                  
  2096                                  ;************************************************************************
  2097                                  ;*									*
  2098                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  2099                                  ;*		is done. presently does nothing. affects no		*
  2100                                  ;*		registers!						*
  2101                                  ;*									*
  2102                                  ;************************************************************************
  2103                                  
  2104                                  ; 09/12/2022
  2105                                  ; re_init_:
  2106                                  re_init:				; called back by sysinit after
  2107                                  		retf			; a bunch of stuff is done.
  2108                                  					; presently does nothing
  2109                                  %endif
  2110                                  
  2111                                  ; ----------------------------------------------------------------------------
  2112                                  
  2113                                  ;SR; WIN386 support
  2114                                  
  2115                                  ; WIN386 instance data structure
  2116                                  ;
  2117                                  ; Here is a Win386 startup info structure which we set up and to which
  2118                                  ; we return a pointer when Win386 initializes.
  2119                                  
  2120 0000083B 0300                    Win386_SI:	db 3, 0			; SI_Version
  2121                                  					; Startup Info for Win386
  2122 0000083D 00000000                SI_Next:	dd 0			; pointer to next info structure
  2123 00000841 00000000                		dd 0			; a field we don't need
  2124 00000845 00000000                		dd 0			; another field	we don't need
  2125 00000849 [4D08]                  SI_Instance:	dw Instance_Table
  2126 0000084B 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  2127                                  
  2128                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  2129                                  ; areas. Note that the address and size of the hardware stacks must
  2130                                  ; be calculated and inserted at boot time.
  2131                                  
  2132 0000084D 00005000                Instance_Table:	dw 0, 50h		; print	screen status...
  2133 00000851 0200                    		dw 2			; ... 2	bytes
  2134 00000853 0E005000                		dw 0Eh,	50h		; ROM Basic data...
  2135 00000857 1400                    		dw 14h			; ... 14H bytes
  2136 00000859 [0C00]                  		dw altah		; a con	device buffer...
  2137 0000085B 7000                    		dw 70h			; Bios_Data segment
  2138 0000085D 0100                    		dw 1			; ... 1 byte
  2139                                  
  2140                                  NextStack:
  2141                                  
  2142                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  2143                                  ;	instance items WILL NOT be filled in by SYSINIT.
  2144                                  ;	That's just fine as long as these are the last items
  2145                                  ;	in the instance list since the first item is initialized
  2146                                  ;	to 0000 at load time.
  2147                                  
  2148 0000085F 00000000                		dw 0, 0			; pointer to next stack	to be used...
  2149 00000863 0200                    		dw 2			; ... 2 bytes
  2150 00000865 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  2151 00000869 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  2152 0000086B 00000000                		dd 0			; terminate the	instance table
  2153                                  
  2154                                  					;SR;
  2155 0000086F 00                      IsWin386:	db 0			; Flag to indicate whether
  2156                                  					; Win386 is running or not
  2157                                  ;-----------------------------------------------------------------------------
  2158                                  
  2159                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  2160                                  ;when we call it including checking of A20. The code being only about 
  2161                                  ;30 bytes, we might as well put it in BIOS_DATA
  2162                                  
  2163                                  V86_Crit_SetFocus:			
  2164 00000870 57                      		push	di
  2165 00000871 06                      		push	es
  2166 00000872 53                      		push	bx
  2167 00000873 50                      		push	ax
  2168 00000874 31FF                    		xor	di, di
  2169 00000876 8EC7                    		mov	es, di
  2170 00000878 BB1500                  		mov	bx, 15h		; Device ID of DOSMGR device
  2171 0000087B B88416                  		mov	ax, 1684h	; Get API entry	point
  2172 0000087E CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  2173                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  2174                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  2175 00000880 8CC0                    		mov	ax, es
  2176 00000882 09F8                    		or	ax, di
  2177 00000884 740B                    		jz	short Skip	; Here,	es:di is address of API	routine.
  2178                                  					; Set up stack frame to	simulate a call.
  2179 00000886 0E                      		push	cs
  2180                                  		;mov	ax, offset Skip
  2181 00000887 B8[9108]                		mov	ax, Skip
  2182 0000088A 50                      		push	ax
  2183 0000088B 06                      		push	es
  2184 0000088C 57                      		push	di		; API far call address
  2185 0000088D B80100                  		mov	ax, 1		; SetFocus function number
  2186 00000890 CB                      		retf			; do the call
  2187                                  ;-----------------------------------------------------------------------------
  2188                                  
  2189                                  Skip:					
  2190 00000891 58                      		pop	ax
  2191 00000892 5B                      		pop	bx
  2192 00000893 07                      		pop	es
  2193 00000894 5F                      		pop	di
  2194 00000895 CB                      		retf
  2195                                  
  2196                                  ;End WIN386 support
  2197                                  
  2198                                  ; ----------------------------------------------------------------------------
  2199                                  
  2200                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2201                                  
  2202                                  ; 09/12/2022
  2203                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  2204                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  2205                                  ; (followings are in sysinit segment)
  2206                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  2207                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  2208                                  ;DEVICELIST	equ 273h
  2209                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  2210                                  ;MEMORYSIZE	equ 292h	
  2211                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  2212                                  ;DEFAULTDRIVE	equ 296h
  2213                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  2214                                  ;;currentdoslocation equ 271h
  2215                                  ;CURRENTDOSLOCATION equ 271h
  2216                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  2217                                  ;SYSINITSTART	equ 267h
  2218                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  2219                                  ; 18/10/2022
  2220                                  ;toomanydrivesflag equ 3FFh 
  2221                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  2222                                  
  2223                                  ; ----------------------------------------------------------------------------
  2224                                  
  2225 00000896 FFFF                    FreeHMAPtr:	dw 0FFFFh		
  2226                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2227                                  					; (procedure in	SYSINIT	segment)
  2228                                  ; 17/10/2022
  2229 00000898 [BD0A]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2230 0000089A 3104                    		dw SYSINITSEG		; 08/08/2023
  2231                                  					; 0544h for PCDOS 7.1 IBMBIO.COM
  2232                                  					; 0473h for MSDOS 6.21 IO.SYS
  2233                                  ;SR;
  2234                                  ; A communication block has been setup between the DOS and the BIOS. All
  2235                                  ;the data starting from SysinitPresent will be part of the data block. 
  2236                                  ;Right now, this is the only data being communicated. It can be expanded 
  2237                                  ;later to add more stuff
  2238                                  
  2239 0000089C 00                      SysinitPresent:	db 0			
  2240 0000089D 0000                    endfloppy:	db 0, 0
  2241                                  
  2242                                  ; ----------------------------------------------------------------------------			
  2243                                  
  2244                                  ; Bios_Data ends
  2245                                  	
  2246                                  ; Possibly disposable BIOS data
  2247                                  ; This data follows the	regular	BIOS data,
  2248                                  ; and is part of the same group.
  2249                                  
  2250 0000089F 4E4F204E414D452020-     nul_vid:	db 'NO NAME    ',0      
  2250 000008A8 202000             
  2251                                  					; null volume id
  2252 000008AB 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    ',0      
  2252 000008B4 202000             
  2253                                  					; vid scratch buffer
  2254 000008B7 80                      harddrv:	db 80h			
  2255                                  
  2256                                  end96tpi:
  2257                                  
  2258                                  ;;*********************************************************************
  2259                                  ;;memory allocation for bdss
  2260                                  ;;*********************************************************************
  2261                                  ;
  2262                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  2263                                  ;
  2264                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  2265                                  ;
  2266                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  2267                                  
  2268 000008B8 FFFF                    bdss:		dw 0FFFFh		
  2269 000008BA 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2269 000008C3 0210000000F8       
  2270 000008C9 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2270 000008D2 000000000000000003 
  2271 000008DB 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2271 000008E4 00000000000000     
  2272 000008EB 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2272 000008F4 000000000000000000 
  2273 000008FD 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2273 00000906 4E414D45           
  2274 0000090A 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2274 00000913 46415431           
  2275 00000917 3220202000              		db 32h,	20h, 20h, 20h, 0
  2276 0000091C FFFF                    		dw 0FFFFh
  2277 0000091E 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2277 00000927 0210000000F8       
  2278 0000092D 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2278 00000936 000000000000000003 
  2279 0000093F 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2279 00000948 00000000000000     
  2280 0000094F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2280 00000958 000000000000000000 
  2281 00000961 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2281 0000096A 4E414D45           
  2282 0000096E 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2282 00000977 46415431           
  2283 0000097B 3220202000              		db 32h,	20h, 20h, 20h, 0
  2284 00000980 FFFF                    		dw 0FFFFh
  2285 00000982 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2285 0000098B 0210000000F8       
  2286 00000991 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2286 0000099A 000000000000000003 
  2287 000009A3 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2287 000009AC 00000000000000     
  2288 000009B3 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2288 000009BC 000000000000000000 
  2289 000009C5 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2289 000009CE 4E414D45           
  2290 000009D2 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2290 000009DB 46415431           
  2291 000009DF 3220202000              		db 32h,	20h, 20h, 20h, 0
  2292 000009E4 FFFF                    		dw 0FFFFh
  2293 000009E6 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2293 000009EF 0210000000F8       
  2294 000009F5 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2294 000009FE 000000000000000003 
  2295 00000A07 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2295 00000A10 00000000000000     
  2296 00000A17 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2296 00000A20 000000000000000000 
  2297 00000A29 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2297 00000A32 4E414D45           
  2298 00000A36 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2298 00000A3F 46415431           
  2299 00000A43 3220202000              		db 32h,	20h, 20h, 20h, 0
  2300 00000A48 FFFF                    		dw 0FFFFh
  2301 00000A4A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2301 00000A53 0210000000F8       
  2302 00000A59 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2302 00000A62 000000000000000003 
  2303 00000A6B 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2303 00000A74 00000000000000     
  2304 00000A7B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2304 00000A84 000000000000000000 
  2305 00000A8D 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2305 00000A96 4E414D45           
  2306 00000A9A 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2306 00000AA3 46415431           
  2307 00000AA7 3220202000              		db 32h,	20h, 20h, 20h, 0
  2308 00000AAC FFFF                    		dw 0FFFFh
  2309 00000AAE 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2309 00000AB7 0210000000F8       
  2310 00000ABD 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2310 00000AC6 000000000000000003 
  2311 00000ACF 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2311 00000AD8 00000000000000     
  2312 00000ADF 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2312 00000AE8 000000000000000000 
  2313 00000AF1 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2313 00000AFA 4E414D45           
  2314 00000AFE 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2314 00000B07 46415431           
  2315 00000B0B 3220202000              		db 32h,	20h, 20h, 20h, 0
  2316 00000B10 FFFF                    		dw 0FFFFh
  2317 00000B12 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2317 00000B1B 0210000000F8       
  2318 00000B21 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2318 00000B2A 000000000000000003 
  2319 00000B33 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2319 00000B3C 00000000000000     
  2320 00000B43 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2320 00000B4C 000000000000000000 
  2321 00000B55 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2321 00000B5E 4E414D45           
  2322 00000B62 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2322 00000B6B 46415431           
  2323 00000B6F 3220202000              		db 32h,	20h, 20h, 20h, 0
  2324 00000B74 FFFF                    		dw 0FFFFh
  2325 00000B76 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2325 00000B7F 0210000000F8       
  2326 00000B85 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2326 00000B8E 000000000000000003 
  2327 00000B97 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2327 00000BA0 00000000000000     
  2328 00000BA7 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2328 00000BB0 000000000000000000 
  2329 00000BB9 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2329 00000BC2 4E414D45           
  2330 00000BC6 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2330 00000BCF 46415431           
  2331 00000BD3 3220202000              		db 32h,	20h, 20h, 20h, 0
  2332 00000BD8 FFFF                    		dw 0FFFFh
  2333 00000BDA 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2333 00000BE3 0210000000F8       
  2334 00000BE9 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2334 00000BF2 000000000000000003 
  2335 00000BFB 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2335 00000C04 00000000000000     
  2336 00000C0B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2336 00000C14 000000000000000000 
  2337 00000C1D 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2337 00000C26 4E414D45           
  2338 00000C2A 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2338 00000C33 46415431           
  2339 00000C37 3220202000              		db 32h,	20h, 20h, 20h, 0
  2340 00000C3C FFFF                    		dw 0FFFFh
  2341 00000C3E 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2341 00000C47 0210000000F8       
  2342 00000C4D 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2342 00000C56 000000000000000003 
  2343 00000C5F 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2343 00000C68 00000000000000     
  2344 00000C6F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2344 00000C78 000000000000000000 
  2345 00000C81 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2345 00000C8A 4E414D45           
  2346 00000C8E 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2346 00000C97 46415431           
  2347 00000C9B 3220202000              		db 32h,	20h, 20h, 20h, 0
  2348 00000CA0 FFFF                    		dw 0FFFFh
  2349 00000CA2 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2349 00000CAB 0210000000F8       
  2350 00000CB1 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2350 00000CBA 000000000000000003 
  2351 00000CC3 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2351 00000CCC 00000000000000     
  2352 00000CD3 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2352 00000CDC 000000000000000000 
  2353 00000CE5 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2353 00000CEE 4E414D45           
  2354 00000CF2 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2354 00000CFB 46415431           
  2355 00000CFF 3220202000              		db 32h,	20h, 20h, 20h, 0
  2356 00000D04 FFFF                    		dw 0FFFFh
  2357 00000D06 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2357 00000D0F 0210000000F8       
  2358 00000D15 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2358 00000D1E 000000000000000003 
  2359 00000D27 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2359 00000D30 00000000000000     
  2360 00000D37 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2360 00000D40 000000000000000000 
  2361 00000D49 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2361 00000D52 4E414D45           
  2362 00000D56 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2362 00000D5F 46415431           
  2363 00000D63 3220202000              		db 32h,	20h, 20h, 20h, 0
  2364 00000D68 FFFF                    		dw 0FFFFh
  2365 00000D6A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2365 00000D73 0210000000F8       
  2366 00000D79 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2366 00000D82 000000000000000003 
  2367 00000D8B 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2367 00000D94 00000000000000     
  2368 00000D9B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2368 00000DA4 000000000000000000 
  2369 00000DAD 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2369 00000DB6 4E414D45           
  2370 00000DBA 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2370 00000DC3 46415431           
  2371 00000DC7 3220202000              		db 32h,	20h, 20h, 20h, 0
  2372 00000DCC FFFF                    		dw 0FFFFh
  2373 00000DCE 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2373 00000DD7 0210000000F8       
  2374 00000DDD 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2374 00000DE6 000000000000000003 
  2375 00000DEF 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2375 00000DF8 00000000000000     
  2376 00000DFF 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2376 00000E08 000000000000000000 
  2377 00000E11 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2377 00000E1A 4E414D45           
  2378 00000E1E 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2378 00000E27 46415431           
  2379 00000E2B 3220202000              		db 32h,	20h, 20h, 20h, 0
  2380 00000E30 FFFF                    		dw 0FFFFh
  2381 00000E32 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2381 00000E3B 0210000000F8       
  2382 00000E41 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2382 00000E4A 000000000000000003 
  2383 00000E53 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2383 00000E5C 00000000000000     
  2384 00000E63 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2384 00000E6C 000000000000000000 
  2385 00000E75 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2385 00000E7E 4E414D45           
  2386 00000E82 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2386 00000E8B 46415431           
  2387 00000E8F 3220202000              		db 32h,	20h, 20h, 20h, 0
  2388 00000E94 FFFF                    		dw 0FFFFh
  2389 00000E96 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2389 00000E9F 0210000000F8       
  2390 00000EA5 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2390 00000EAE 000000000000000003 
  2391 00000EB7 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2391 00000EC0 00000000000000     
  2392 00000EC7 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2392 00000ED0 000000000000000000 
  2393 00000ED9 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2393 00000EE2 4E414D45           
  2394 00000EE6 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2394 00000EEF 46415431           
  2395 00000EF3 3220202000              		db 32h,	20h, 20h, 20h, 0
  2396 00000EF8 FFFF                    		dw 0FFFFh
  2397 00000EFA 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2397 00000F03 0210000000F8       
  2398 00000F09 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2398 00000F12 000000000000000003 
  2399 00000F1B 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2399 00000F24 00000000000000     
  2400 00000F2B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2400 00000F34 000000000000000000 
  2401 00000F3D 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2401 00000F46 4E414D45           
  2402 00000F4A 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2402 00000F53 46415431           
  2403 00000F57 3220202000              		db 32h,	20h, 20h, 20h, 0
  2404 00000F5C FFFF                    		dw 0FFFFh
  2405 00000F5E 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2405 00000F67 0210000000F8       
  2406 00000F6D 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2406 00000F76 000000000000000003 
  2407 00000F7F 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2407 00000F88 00000000000000     
  2408 00000F8F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2408 00000F98 000000000000000000 
  2409 00000FA1 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2409 00000FAA 4E414D45           
  2410 00000FAE 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2410 00000FB7 46415431           
  2411 00000FBB 3220202000              		db 32h,	20h, 20h, 20h, 0
  2412 00000FC0 FFFF                    		dw 0FFFFh
  2413 00000FC2 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2413 00000FCB 0210000000F8       
  2414 00000FD1 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2414 00000FDA 000000000000000003 
  2415 00000FE3 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2415 00000FEC 00000000000000     
  2416 00000FF3 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2416 00000FFC 000000000000000000 
  2417 00001005 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2417 0000100E 4E414D45           
  2418 00001012 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2418 0000101B 46415431           
  2419 0000101F 3220202000              		db 32h,	20h, 20h, 20h, 0
  2420 00001024 FFFF                    		dw 0FFFFh
  2421 00001026 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2421 0000102F 0210000000F8       
  2422 00001035 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2422 0000103E 000000000000000003 
  2423 00001047 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2423 00001050 00000000000000     
  2424 00001057 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2424 00001060 000000000000000000 
  2425 00001069 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2425 00001072 4E414D45           
  2426 00001076 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2426 0000107F 46415431           
  2427 00001083 3220202000              		db 32h,	20h, 20h, 20h, 0
  2428 00001088 FFFF                    		dw 0FFFFh
  2429 0000108A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2429 00001093 0210000000F8       
  2430 00001099 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2430 000010A2 000000000000000003 
  2431 000010AB 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2431 000010B4 00000000000000     
  2432 000010BB 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2432 000010C4 000000000000000000 
  2433 000010CD 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2433 000010D6 4E414D45           
  2434 000010DA 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2434 000010E3 46415431           
  2435 000010E7 3220202000              		db 32h,	20h, 20h, 20h, 0
  2436 000010EC FFFF                    		dw 0FFFFh
  2437 000010EE 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2437 000010F7 0210000000F8       
  2438 000010FD 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2438 00001106 000000000000000003 
  2439 0000110F 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2439 00001118 00000000000000     
  2440 0000111F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2440 00001128 000000000000000000 
  2441 00001131 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2441 0000113A 4E414D45           
  2442 0000113E 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2442 00001147 46415431           
  2443 0000114B 3220202000              		db 32h,	20h, 20h, 20h, 0
  2444 00001150 FFFF                    		dw 0FFFFh
  2445 00001152 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2445 0000115B 0210000000F8       
  2446 00001161 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2446 0000116A 000000000000000003 
  2447 00001173 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2447 0000117C 00000000000000     
  2448 00001183 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2448 0000118C 000000000000000000 
  2449 00001195 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2449 0000119E 4E414D45           
  2450 000011A2 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2450 000011AB 46415431           
  2451 000011AF 3220202000              		db 32h,	20h, 20h, 20h, 0
  2452 000011B4 FFFF                    		dw 0FFFFh
  2453 000011B6 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2453 000011BF 0210000000F8       
  2454 000011C5 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2454 000011CE 000000000000000003 
  2455 000011D7 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2455 000011E0 00000000000000     
  2456 000011E7 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2456 000011F0 000000000000000000 
  2457 000011F9 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2457 00001202 4E414D45           
  2458 00001206 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2458 0000120F 46415431           
  2459 00001213 3220202000              		db 32h,	20h, 20h, 20h, 0
  2460 00001218 FFFF                    		dw 0FFFFh
  2461 0000121A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2461 00001223 0210000000F8       
  2462 00001229 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2462 00001232 000000000000000003 
  2463 0000123B 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2463 00001244 00000000000000     
  2464 0000124B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2464 00001254 000000000000000000 
  2465 0000125D 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2465 00001266 4E414D45           
  2466 0000126A 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2466 00001273 46415431           
  2467 00001277 3220202000              		db 32h,	20h, 20h, 20h, 0
  2468 0000127C 00                      		db 0
  2469                                  
  2470                                  ;---------------------------------------------------------------------------
  2471                                  ; Possibly disposable data, goes at end of data group
  2472                                  ;***************************************************************************
  2473                                  
  2474                                  ; Possibly disposable data, goes at end of data group
  2475                                  
  2476                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  2477                                  ;
  2478                                  ;	entry:	(ah) = function, 02 or 0a for read.
  2479                                  ;		(dl) = drive number (80h or 81h).
  2480                                  ;		(dh) = head number.
  2481                                  ;		(ch) = cylinder number.
  2482                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  2483                                  ;		(al) = number of sectors.
  2484                                  ;		(es:bx) = address of read buffer.
  2485                                  ;		for more on register contents see rom bios listing.
  2486                                  ;		stack set up for return by an iret.
  2487                                  ;
  2488                                  ;	exit:	(ah) = status of current operation.
  2489                                  ;		(cy) = 1 if failed, 0 if successful.
  2490                                  ;		for other register contents see rom bios listing.
  2491                                  ;
  2492                                  ;	uses:	
  2493                                  ;
  2494                                  ;
  2495                                  ;	warning: uses old13 vector for non-read calls.
  2496                                  ;		does direct calls to the at rom.
  2497                                  ;		does segment arithmatic.
  2498                                  ;
  2499                                  ;	effects: performs disk i/o operation.
  2500                                  
  2501                                  ; 16/10/2022
  2502                                  ; 28/05/2019
  2503                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  2504                                  
  2505                                  ;* offsets into cmd_block for registers
  2506                                  
  2507                                  pre_comp equ 0	;write pre-compensation
  2508                                  sec_cnt	 equ 1	;sector count
  2509                                  sec_num	 equ 2	;sector number
  2510                                  cyl_low	 equ 3	;cylinder number, low part
  2511                                  cyl_high equ 4	;cylinder number, high part
  2512                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  2513                                  		;            bit 4 = drive number, bits 3-0 have head number)
  2514                                  cmd_reg  equ 6	;command register
  2515                                  
  2516                                  ; 01/10/2022
  2517                                  disk_status1	equ 74h
  2518                                  hf_num		equ 75h
  2519                                  control_byte	equ 76h
  2520                                  
  2521                                  ibm_disk_io:				
  2522 0000127D 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  2523 00001280 720A                    		jb	short atd1	; pass through floppy disk calls. 
  2524 00001282 80FC02                  		cmp	ah, 2
  2525 00001285 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  2526 00001287 80FC0A                  		cmp	ah, 0Ah
  2527 0000128A 7405                    		jz	short atd2	; and call 0Ah (read long).
  2528                                  atd1:
  2529 0000128C 2EFF2E[0601]            		jmp	far [cs:Old13]					
  2530                                  		;jmp	cs:Old13	; use rom int 13h handler
  2531                                  ;-----------------------------------------------------------------------------
  2532                                  
  2533                                  atd2:					
  2534 00001291 53                      		push	bx
  2535 00001292 51                      		push	cx
  2536 00001293 52                      		push	dx
  2537 00001294 57                      		push	di
  2538 00001295 1E                      		push	ds
  2539 00001296 06                      		push	es
  2540 00001297 50                      		push	ax
  2541 00001298 B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  2542                                  					; establish bios segment addressing
  2543 0000129B 8ED8                    		mov	ds, ax
  2544                                  		; 16/10/2022
  2545 0000129D C606740000              		mov	byte [disk_status1], 0
  2546                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  2547                                  					; initially no error code.
  2548 000012A2 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  2549 000012A5 3A167500                		cmp	dl, [hf_num]
  2550                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  2551 000012A9 7207                    		jb	short atd3	; disk number in range
  2552                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  2553 000012AB C606740001              		mov	byte [disk_status1], 1
  2554 000012B0 EB20                    		jmp	short atd4	; disk number out of range error,
  2555                                  					; return
  2556                                  ; ----------------------------------------------------------------------------
  2557                                  
  2558                                  atd3:					
  2559 000012B2 53                      		push	bx
  2560 000012B3 8CC0                    		mov	ax, es
  2561 000012B5 C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  2562 000012B8 01D8                    		add	ax, bx
  2563 000012BA 8EC0                    		mov	es, ax
  2564 000012BC 5B                      		pop	bx
  2565 000012BD 83E30F                  		and	bx, 0Fh
  2566 000012C0 0E                      		push	cs
  2567 000012C1 E8DF00                  		call	check_dma
  2568 000012C4 720C                    		jb	short atd4	; abort if dma across segment boundary
  2569 000012C6 58                      		pop	ax
  2570 000012C7 50                      		push	ax
  2571 000012C8 E81A00                  		call	setcmd		; set up command block for disk op
  2572 000012CB BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  2573 000012CE EE                      		out	dx, al		; write out command modifier
  2574 000012CF E86B00                  		call	docmd		; carry out command
  2575                                  ; ----------------------------------------------------------------------------
  2576                                  
  2577                                  atd4:	
  2578                                  
  2579                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  2580                                  ;	      and save a couple bytes while were at it.
  2581                                  				
  2582 000012D2 58                      		pop	ax
  2583                                  		;mov	ah, ds:74h	; [disk_status1]
  2584 000012D3 8A267400                		mov	ah, [disk_status1]
  2585 000012D7 08E4                    		or	ah, ah
  2586 000012D9 7401                    		jz	short atd5
  2587 000012DB F9                      		stc
  2588                                  atd5:					
  2589 000012DC 07                      		pop	es
  2590 000012DD 1F                      		pop	ds
  2591 000012DE 5F                      		pop	di
  2592 000012DF 5A                      		pop	dx
  2593 000012E0 59                      		pop	cx
  2594 000012E1 5B                      		pop	bx
  2595 000012E2 CA0200                  		retf	2		; far return, dropping flags
  2596                                  
  2597                                  ; =============== S U B	R O U T	I N E ========================================
  2598                                  
  2599                                  ;***	setcmd - set up cmd_block for the disk operation
  2600                                  ;
  2601                                  ;	entry:	(ds) = bios data segment.
  2602                                  ;		(es:bx) in seg:000x form.
  2603                                  ;		other registers as in int 13h call
  2604                                  ;	
  2605                                  ;	exit:	cmd_block set up for disk read call.
  2606                                  ;		control_byte set up for disk operation.
  2607                                  ;		(al) = control byte modifier
  2608                                  ;
  2609                                  ;	sets the fields of cmd_block using the register contents
  2610                                  ;	and the contents of the disk parameter block for the given drive.
  2611                                  ;
  2612                                  ;	warning: (ax) destroyed.
  2613                                  ;		does direct calls to the at rom.
  2614                                  
  2615                                  setcmd:		; proc near		
  2616                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  2617                                  		; 16/10/2022
  2618 000012E5 A24300                  		mov	[cmd_block+sec_cnt], al
  2619                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  2620 000012E8 C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  2621 000012ED 80FC02                  		cmp	ah, 2
  2622 000012F0 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  2623 000012F2 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  2624                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  2625                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  2626                                  setc1:					
  2627 000012F7 88C8                    		mov	al, cl
  2628 000012F9 243F                    		and	al, 3Fh		; mask sector number
  2629                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  2630                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  2631 000012FB A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  2632 000012FE 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  2633 00001302 88C8                    		mov	al, cl
  2634 00001304 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  2635                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  2636 00001307 A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  2637 0000130A 89D0                    		mov	ax, dx
  2638 0000130C C0E004                  		shl	al, 4		; drive	number
  2639 0000130F 80E40F                  		and	ah, 0Fh
  2640 00001312 08E0                    		or	al, ah		; head number
  2641 00001314 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  2642                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  2643 00001316 A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  2644 00001319 06                      		push	es
  2645 0000131A 53                      		push	bx
  2646 0000131B 0E                      		push	cs
  2647 0000131C E85C00                  		call	get_vec
  2648 0000131F 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  2649                                  			 		; write pre-comp from disk parameters
  2650 00001323 C1E802                  		shr	ax, 2
  2651                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  2652 00001326 A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  2653                                  					; only use low part
  2654 00001329 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  2655                                  					; control byte modifier
  2656 0000132D 5B                      		pop	bx
  2657 0000132E 07                      		pop	es
  2658                                  		;mov	ah, ds:76h	; [control_byte]
  2659 0000132F 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  2660 00001333 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  2661 00001336 08C4                    		or	ah, al
  2662                                  		;mov	ds:76h,	ah
  2663 00001338 88267600                		mov	[control_byte], ah ; mov [76h],al
  2664 0000133C C3                      		retn
  2665                                  
  2666                                  ; =============== S U B	R O U T	I N E ========================================
  2667                                  
  2668                                  ;***	docmd - carry out read operation to at hard disk
  2669                                  ;
  2670                                  ;	entry:	(es:bx) = address for read in data.
  2671                                  ;		cmd_block set up for disk read.
  2672                                  ;
  2673                                  ;	exit:	buffer at (es:bx) contains data read.
  2674                                  ;		disk_status1 set to error code (0 if success).
  2675                                  ;
  2676                                  ;	
  2677                                  ;
  2678                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  2679                                  ;		no check is made for dma boundary overrun.
  2680                                  ;
  2681                                  ;	effects: programs disk controller.
  2682                                  ;		performs disk input.
  2683                                  
  2684                                  docmd:		; proc near		
  2685 0000133D 89DF                    		mov	di, bx
  2686 0000133F 0E                      		push	cs
  2687 00001340 E84000                  		call	command
  2688 00001343 7535                    		jnz	short doc3
  2689                                  doc1:					
  2690 00001345 0E                      		push	cs
  2691 00001346 E84200                  		call	waitt		; wait for controller to complete read
  2692 00001349 752F                    		jnz	short doc3
  2693 0000134B B90001                  		mov	cx, 256		; 256 words per sector
  2694 0000134E BAF001                  		mov	dx, 1F0h	; hf_port
  2695 00001351 FC                      		cld			; string op goes up
  2696 00001352 FA                      		cli			; disable interrupts
  2697                                  					; (bug was forgetting this)
  2698                                  
  2699                                  ;	M062 -- some of these old machines have intermittent failures
  2700                                  ;		when the read is done at full speed. Instead of using
  2701                                  ;		a string rep instruction, we'll use a loop. There is
  2702                                  ;		a slight performance hit, but it only affects these
  2703                                  ;		very old machines with an exact date code match, and
  2704                                  ;		it makes said machines more reliable
  2705                                  ;
  2706                                  ;M062	repz	insw		;read in sector
  2707                                  
  2708                                  rsct_loop:				
  2709 00001353 6D                      		insw
  2710 00001354 E2FD                    		loop	rsct_loop
  2711 00001356 FB                      		sti
  2712                                  		; 16/10/2022
  2713 00001357 F606480002              		test	byte [cmd_block+cmd_reg], 02h
  2714                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  2715                                  					; (ds =	40h)
  2716 0000135C 7410                    		jz	short doc2	; no ecc bytes to read.
  2717 0000135E 0E                      		push	cs
  2718 0000135F E83100                  		call	wait_drq	; wait for controller to complete read
  2719 00001362 7216                    		jb	short doc3
  2720 00001364 B90400                  		mov	cx, 4		; 4 bytes of ecc
  2721 00001367 BAF001                  		mov	dx, 1F0h	; hf_port
  2722 0000136A FA                      		cli
  2723 0000136B F36C                    		rep insb		; read in ecc
  2724 0000136D FB                      		sti
  2725                                  doc2:					
  2726 0000136E 0E                      		push	cs
  2727 0000136F E82900                  		call	check_status
  2728 00001372 7506                    		jnz	short doc3	; operation failed
  2729                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  2730 00001374 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  2731 00001378 75CB                    		jnz	short doc1	; loop while more sectors to read
  2732                                  doc3:					
  2733 0000137A C3                      		retn
  2734                                  
  2735                                  ; =============== S U B	R O U T	I N E ========================================
  2736                                  
  2737                                  ;***	define where the rom routines are actually located
  2738                                  ;	   in the buggy old AT BIOS that we might need to
  2739                                  ;	   install a special level of int13 handler for
  2740                                  
  2741                                  ; 16/10/2022
  2742                                  
  2743                                  romsegment 	equ 0F000h  ; segment
  2744                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  2745                                  romwait		equ 2E7Fh   ; offset in romsegment
  2746                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  2747                                  romcheck_status equ 2EF8h   ; offset in romsegment
  2748                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  2749                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  2750                                  romfret		equ 0FF65h  ; far return in rom	
  2751                                  
  2752                                  ;***	get_vec - get pointer to hard disk parameters.
  2753                                  ;
  2754                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  2755                                  ;
  2756                                  ;	exit:	(es:bx) = address of disk parameters table.
  2757                                  ;
  2758                                  ;	uses:	ax for segment computation.
  2759                                  ;
  2760                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  2761                                  ;	or 70h (disk 1).
  2762                                  ;	
  2763                                  ;	warning: (ax) destroyed.
  2764                                  ;		this does a direct call to the at rom.
  2765                                  
  2766                                  get_vec:	; proc near		
  2767                                  		;push	0FF65h		; romfret ; far	return in rom
  2768                                  		;jmp	far ptr	0F000h:2F8Eh
  2769                                  		; 16/10/2022
  2770 0000137B 6865FF                  		push	romfret		; far return in rom
  2771 0000137E EA8E2F00F0              		jmp	romsegment:romget_vec
  2772                                  
  2773                                  ; =============== S U B	R O U T	I N E ========================================
  2774                                  
  2775                                  ;***	command - send contents of cmd_block to disk controller.
  2776                                  ;
  2777                                  ;	entry:	control_byte 
  2778                                  ;		cmd_block - set up with values for hard disk controller.
  2779                                  ;
  2780                                  ;	exit:	disk_status1 = error code.
  2781                                  ;		nz if error, zr for no error.
  2782                                  ;
  2783                                  ;
  2784                                  ;	warning: (ax), (cx), (dx) destroyed.
  2785                                  ;		does a direct call to the at rom.
  2786                                  ;
  2787                                  ;	effects: programs disk controller.
  2788                                  
  2789                                  command:	; proc near		
  2790                                  		;push	0FF65h		; romfret ; far	return in rom
  2791                                  		;jmp	far ptr	0F000h:2E1Eh
  2792                                  		; 16/10/2022
  2793 00001383 6865FF                  		push	romfret		; far return in rom
  2794 00001386 EA1E2E00F0              		jmp	romsegment:romcommand
  2795                                  
  2796                                  ; =============== S U B	R O U T	I N E ========================================
  2797                                  
  2798                                  ;***	waitt - wait for disk interrupt
  2799                                  ;
  2800                                  ;	entry:	nothing.
  2801                                  ;
  2802                                  ;	exit:	disk_status1 = error code.
  2803                                  ;		nz if error, zr if no error.
  2804                                  ;
  2805                                  ;
  2806                                  ;	warning: (ax), (bl), (cx) destroyed.
  2807                                  ;		does a direct call to the at rom.
  2808                                  ;		
  2809                                  ;	effects: calls int 15h, function 9000h.
  2810                                  
  2811                                  waitt:		; proc near		
  2812                                  		;push	0FF65h		; romfret ; far	return in rom
  2813                                  		;jmp	far ptr	0F000h:2E7Fh
  2814                                  		; 16/10/2022
  2815 0000138B 6865FF                  		push	romfret		; far return in rom
  2816 0000138E EA7F2E00F0              		jmp	romsegment:romwait
  2817                                  
  2818                                  ; =============== S U B	R O U T	I N E ========================================
  2819                                  
  2820                                  ;***	wait_drq - wait for data request.
  2821                                  ;
  2822                                  ;	entry:	nothing.
  2823                                  ;
  2824                                  ;	exit:	disk_status1 = error code.
  2825                                  ;		cy if error, nc if no error.
  2826                                  ;
  2827                                  ;	warning: (al), (cx), (dx) destroyed.
  2828                                  ;		does a direct call to the at rom.
  2829                                  
  2830                                  wait_drq:	; proc near		
  2831                                  		;push	0FF65h		; romfret ; far	return in rom
  2832                                  		;jmp	far ptr	0F000h:2EE2h
  2833                                  		; 16/10/2022
  2834 00001393 6865FF                  		push	romfret		; far return in rom
  2835 00001396 EAE22E00F0              		jmp	romsegment:romwait_drq
  2836                                  
  2837                                  ; =============== S U B	R O U T	I N E ========================================
  2838                                  
  2839                                  ;***	check_status - check hard disk status.
  2840                                  ;
  2841                                  ;	entry:	nothing.
  2842                                  ;
  2843                                  ;	exit:	disk_status1 = error code.
  2844                                  ;		nz if error, zr if no error.
  2845                                  ;
  2846                                  ;	warning: (ax), (cx), (dx) destroyed.
  2847                                  ;		does a direct call to the at rom.
  2848                                  
  2849                                  check_status:	; proc near		
  2850                                  		;push	0FF65h		; romfret ; far	return in rom
  2851                                  		;jmp	far ptr	0F000h:2EF8h
  2852                                  		; 16/10/2022
  2853 0000139B 6865FF                  		push	romfret		; far return in rom
  2854 0000139E EAF82E00F0              		jmp	romsegment:romcheck_status
  2855                                  
  2856                                  ; =============== S U B	R O U T	I N E ========================================
  2857                                  
  2858                                  ;***	check_dma - check for dma overrun 64k segment.
  2859                                  ;
  2860                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  2861                                  ;		cmd_block set up for operation.
  2862                                  ;
  2863                                  ;	exit:	disk_status1 - error code.
  2864                                  ;		cy if error, nc if no error.
  2865                                  ;
  2866                                  ;	warning: does a direct call to the at rom.
  2867                                  
  2868                                  check_dma:	; proc near		
  2869                                  		;push	0FF65h		; romfret ; far	return in rom
  2870                                  		;jmp	far ptr	0F000h:2F69h
  2871                                  		; 16/10/2022
  2872 000013A3 6865FF                  		push	romfret		; far return in rom
  2873 000013A6 EA692F00F0              		jmp	romsegment:romcheck_dma
  2874                                  
  2875                                  ;-----------------------------------------------------------------------------
  2876                                  
  2877                                  endatrom:
  2878                                  
  2879                                  ; ----------------------------------------------------------------------------
  2880                                  
  2881                                  ;; M015 -- begin changes
  2882                                  ;;
  2883                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  2884                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  2885                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  2886                                  ;; If our init code detects this error, it will install this
  2887                                  ;; special Int13 hook through the same mechanism that was set
  2888                                  ;; up for the IBM patch above. This code is also dynamically
  2889                                  ;; relocated by MSINIT.
  2890                                  
  2891                                  compaq_disk_io:
  2892 000013AB 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  2893                                  					;
  2894                                  					; the following	label defines the end of the at	rom patch.
  2895                                  					; this is used at configuration	time.
  2896                                  					;
  2897                                  					; warning!!!
  2898                                  					; this code will be dynamically	relocated by msinit
  2899 000013AE 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  2900                                  no_hookit:				
  2901                                  		;jmp	cs:Old13
  2902                                  		; 16/10/2022
  2903 000013B0 2EFF2E[0601]            		jmp	far [cs:Old13]
  2904                                  
  2905                                  ; ----------------------------------------------------------------------------
  2906                                  
  2907                                  mebbe_hookit:
  2908 000013B5 80FA80                  		cmp	dl, 80h
  2909 000013B8 72F6                    		jb	short no_hookit
  2910 000013BA 1E                      		push	ds
  2911                                  		
  2912                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2913                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:1830h
  2914                                  		;push	ax
  2915                                  		;mov	ax, 40h
  2916                                  		;mov	ds, ax
  2917                                  		;pop	ax
  2918 000013BB 6A40                    		push	40h
  2919 000013BD 1F                      		pop	ds
  2920                                  
  2921 000013BE 9C                      		pushf
  2922                                  		;call	cs:Old13
  2923                                  		; 16/10/2022
  2924 000013BF 2EFF1E[0601]            		call	far [cs:Old13]
  2925 000013C4 1F                      		pop	ds
  2926 000013C5 CA0200                  		retf	2
  2927                                  
  2928                                  ; ----------------------------------------------------------------------------
  2929                                  
  2930 000013C8 00                      end_compaq_i13hook: db 0			
  2931                                  
  2932                                  ; =============== S U B	R O U T	I N E ========================================
  2933                                  
  2934                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2935                                  %if 0  
  2936                                  
  2937                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  2938                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  2939                                  
  2940                                  daycnt_to_day:	; proc far
  2941                                  
  2942                                  ; entry: [daycnt] = number of days since 1-1-80
  2943                                  ;
  2944                                  ; return: ch - century in bcd
  2945                                  ;	  cl - year in bcd
  2946                                  ;	  dh - month in bcd
  2947                                  ;	  dl - day in bcd
  2948                                  
  2949                                  		; 16/10/2022		
  2950                                  		push	word [cs:daycnt] ; save daycnt
  2951                                  		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  2952                                  					; # days from 1-1-1980 to 1-1-2000
  2953                                  		jnb	short century20
  2954                                  		mov	byte [cs:base_century], 19
  2955                                  		mov	byte [cs:base_year], 80
  2956                                  		jmp	short years
  2957                                  ; ----------------------------------------------------------------------------
  2958                                  		
  2959                                  century20:				
  2960                                  		mov	byte [cs:base_century], 20
  2961                                  		mov	byte [cs:base_year], 0
  2962                                  		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  2963                                  					; adjust daycnt
  2964                                  years:					
  2965                                  		xor	dx, dx
  2966                                  		mov	ax, [cs:daycnt]
  2967                                  		mov	bx, 1461	; (366+365*3)
  2968                                  					; # of days in a Leap year block
  2969                                  		div	bx		; AX = # of leap block,	DX = daycnt
  2970                                  		mov	[cs:daycnt], dx	; save daycnt left
  2971                                  		mov	bl, 4
  2972                                  		mul	bl		; AX = # of years. Less	than 100
  2973                                  		add	[cs:base_year], al ; So, ah = 0. Adjust year
  2974                                  		inc	word [cs:daycnt]	; set daycnt to	1 base
  2975                                  		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  2976                                  		jbe	short leapyear	; within 366+355+355+355 days.
  2977                                  		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  2978                                  		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  2979                                  		mov	cx, 3		; And next three years are normal
  2980                                  regularyear:				
  2981                                  		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  2982                                  		jbe	short yeardone	; {if (daycnt >	365)
  2983                                  		inc	byte [cs:base_year]	;   { daycnt -=	365
  2984                                  		sub	word [cs:daycnt], 365	;   }
  2985                                  		loop	regularyear	; }
  2986                                  					;
  2987                                  					; should never fall through loop
  2988                                  leapyear:				
  2989                                  		mov	byte [cs:month_tab+1], 29 ; leap year.
  2990                                  					; change month table.
  2991                                  yeardone:				
  2992                                  		xor	bx, bx
  2993                                  		xor	dx, dx
  2994                                  		mov	ax, [cs:daycnt]
  2995                                  		;mov	si, offset month_tab
  2996                                  		mov	si, month_tab	; 19/10/2022
  2997                                  		mov	cx, 12
  2998                                  months:					
  2999                                  		inc	bl
  3000                                  
  3001                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  3002                                  		;mov	dl, [cs:si]
  3003                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  3004                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  3005                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  3006                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  3007                                  		
  3008                                  		mov	dl, [si] ; ?	; mov dl, [cs:si]
  3009                                  		cmp	ax, dx		; cmp daycnt for each month till fit
  3010                                  					; dh=0
  3011                                  		jbe	short month_done
  3012                                  		inc	si		; next month
  3013                                  		sub	ax, dx		; adjust daycnt
  3014                                  		loop	months		;
  3015                                  					; should never fall through loop
  3016                                  month_done:				
  3017                                  		mov	byte [cs:month_tab+1], 28
  3018                                  					; restore month table value
  3019                                  		mov	dl, bl
  3020                                  		mov	dh, [cs:base_year]
  3021                                  		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  3022                                  		call	far [cs:bintobcd]
  3023                                  		;call	cs:bintobcd	; convert "day"	to bcd
  3024                                  					; dl = bcd day,	al = month
  3025                                  		xchg	dl, al
  3026                                  		call	far [cs:bintobcd]
  3027                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  3028                                  		xchg	dh, al
  3029                                  		call	far [cs:bintobcd]
  3030                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  3031                                  		xchg	cl, al
  3032                                  		call	far [cs:bintobcd]
  3033                                  		;call	cs:bintobcd	; ch = bcd century
  3034                                  		mov	ch, al
  3035                                  		pop	word [cs:daycnt] ; restore original value
  3036                                  		retf
  3037                                  
  3038                                  enddaycnttoday:	
  3039                                  
  3040                                  %endif
  3041                                  
  3042                                  ; =============== S U B	R O U T	I N E ========================================
  3043                                  
  3044                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3045                                  %if 0  
  3046                                  
  3047                                  bin_to_bcd:	; proc far		; real time clock support
  3048                                  
  3049                                  ;convert a binary input in al (less than 63h or 99 decimal)
  3050                                  ;into a bcd value in al. ah destroyed.	
  3051                                  		
  3052                                  		push	cx		
  3053                                  		aam			; al=high digit	bcd, ah=low digit bcd
  3054                                  		mov	cl, 4
  3055                                  		shl	ah, cl		; mov the high digit to	high nibble
  3056                                  		or	al, ah
  3057                                  		pop	cx
  3058                                  		retf
  3059                                  %endif
  3060                                  
  3061                                  ; ----------------------------------------------------------------------------
  3062                                  
  3063                                  ; the k09 requires the routines for reading the clock because of the suspend/
  3064                                  ; resume facility. the system clock needs to be reset after resume.
  3065                                  
  3066                                  ; the following routine is executed at resume time when the system
  3067                                  ; powered on after suspension. it reads the real time clock and
  3068                                  ; resets the system time and date, and then irets.
  3069                                  
  3070                                  ; warning!!! this code will be dynamically relocated by msinit.
  3071                                  
  3072                                  	; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3073                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:183Eh
  3074                                  int_6Ch:
  3075 000013C9 0E                      		push	cs
  3076 000013CA 1F                      		pop	ds
  3077                                  		;cmp	byte [cs:inHMA], 0  
  3078 000013CB 803E[0D00]00            		cmp	byte [inHMA], 0
  3079 000013D0 7405                    		jz      short int6c
  3080 000013D2 BB[9007]                		mov     bx, EnsureA20On
  3081 000013D5 FFD3                    		call    bx
  3082                                  int6c:					
  3083                                  		;push	cs
  3084                                  		;pop	ds
  3085 000013D7 8F06[B306]              		pop	word [int6c_ret_addr]	; pop off return address
  3086 000013DB 8F06[B506]              		pop	word [int6c_ret_addr+2]
  3087 000013DF 9D                      		popf
  3088 000013E0 E81300                  		call	read_real_date	; get the date from the clock
  3089 000013E3 FA                      		cli
  3090 000013E4 8936[F004]              		mov	[daycnt], si	; update dos copy of date
  3091 000013E8 FB                      		sti
  3092 000013E9 E8B900                  		call	read_real_time	; get the time from the	rtc
  3093 000013EC FA                      		cli
  3094 000013ED B401                    		mov	ah, 1
  3095 000013EF CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  3096                                  					; CX:DX	= clock	count
  3097                                  					; Return: time of day set
  3098 000013F1 FB                      		sti
  3099                                  		;jmp	int6c_ret_addr	; long jump
  3100                                  		; 16/10/2022
  3101 000013F2 FF2E[B306]              		jmp	far [int6c_ret_addr] ; long jump
  3102                                  
  3103                                  ; =============== S U B	R O U T	I N E ========================================
  3104                                  
  3105                                  ;   read_real_date reads real-time clock for date and returns the number
  3106                                  ;   of days elapsed since 1-1-80 in si
  3107                                  
  3108                                  read_real_date:	; proc near		
  3109 000013F6 50                      		push	ax
  3110 000013F7 51                      		push	cx
  3111 000013F8 52                      		push	dx
  3112 000013F9 30E4                    		xor	ah, ah		; throw	away clock roll	over
  3113 000013FB CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  3114                                  					; Return: CX:DX	= clock	count
  3115                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  3116                                  					; midnight
  3117                                  					; Otherwise, AL	> 0
  3118 000013FD 5A                      		pop	dx
  3119 000013FE 59                      		pop	cx
  3120 000013FF 58                      		pop	ax
  3121 00001400 50                      		push	ax
  3122 00001401 53                      		push	bx
  3123 00001402 51                      		push	cx
  3124 00001403 52                      		push	dx
  3125                                  		;mov	word [cs:daycnt2], 1
  3126                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3127                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:187Ah
  3128 00001404 C706[BB06]0100          		mov	word [daycnt2], 1
  3129                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  3130 0000140A B404                    		mov	ah, 4
  3131 0000140C CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  3132                                  					; Return: DL = day in BCD
  3133                                  					; DH = month in	BCD
  3134                                  					; CL = year in BCD
  3135                                  					; CH = century (19h or 20h)
  3136 0000140E 7303                    		jnb	short read_ok
  3137 00001410 E98300                  		jmp	r_d_ret
  3138                                  ;-----------------------------------------------------------------------------
  3139                                  
  3140                                  read_ok:
  3141 00001413 882E[B706]              		mov	[bin_date_time], ch
  3142 00001417 880E[B806]              		mov	[bin_date_time+1], cl
  3143 0000141B 8836[B906]              		mov	[bin_date_time+2], dh
  3144 0000141F 8816[BA06]              		mov	[bin_date_time+3], dl
  3145                                  		;mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  3146                                  		; 08/08/2023
  3147                                  		;mov	byte [daycnt2], 2
  3148 00001423 FE06[BB06]              		inc	byte [daycnt2] ; 2
  3149 00001427 E83401                  		call	bcd_verify	; verify bcd values in range
  3150 0000142A 726A                    		jb	short r_d_ret	; some value out of range
  3151                                  		;mov	word [cs:daycnt2], 3
  3152                                  		; 08/08/2023
  3153                                  		;mov	byte [daycnt2], 3
  3154 0000142C FE06[BB06]              		inc	byte [daycnt2] ; 3
  3155 00001430 E8DB00                  		call	date_verify
  3156 00001433 7261                    		jb	short r_d_ret
  3157                                  		;mov	word [cs:daycnt2], 0
  3158                                  		; 08/08/2023
  3159 00001435 C606[BB06]00            		mov	byte [daycnt2], 0
  3160 0000143A E8A100                  		call	in_bin
  3161 0000143D A0[B806]                		mov	al, [bin_date_time+1]
  3162 00001440 98                      		cbw
  3163 00001441 803E[B706]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  3164 00001446 7503                    		jnz	short century_19 ; no
  3165 00001448 83C064                  		add	ax, 100		; add in a century
  3166                                  century_19:				
  3167 0000144B 83E850                  		sub	ax, 80		; subtract off 1-1-80
  3168 0000144E B104                    		mov	cl, 4		; leap year every 4
  3169 00001450 F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  3170 00001452 88E3                    		mov	bl, ah		; save odd years
  3171 00001454 98                      		cbw			; zero ah
  3172 00001455 B9B505                  		mov	cx, 1461	; 366+(3*365)
  3173                                  					; # of days in leap year blocks
  3174 00001458 F7E1                    		mul	cx
  3175                                  		;mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  3176                                  		; 08/08/2023
  3177 0000145A A3[BB06]                		mov	[daycnt2], ax
  3178 0000145D 88D8                    		mov	al, bl		; get odd years	count
  3179 0000145F 98                      		cbw
  3180 00001460 09C0                    		or	ax, ax
  3181 00001462 740B                    		jz	short leap_year
  3182 00001464 B96D01                  		mov	cx, 365		; days in year
  3183 00001467 F7E1                    		mul	cx
  3184                                  		;add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  3185                                  		; 08/08/2023
  3186 00001469 0106[BB06]              		add	[daycnt2], ax
  3187 0000146D EB07                    		jmp	short leap_adjustment ;	account	for leap year
  3188                                  					; possibly account for a leap day
  3189                                  ;-----------------------------------------------------------------------------
  3190                                  
  3191                                  leap_year:
  3192 0000146F 803E[B906]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  3193 00001474 7604                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  3194                                  leap_adjustment:
  3195                                  		;inc	word [cs:daycnt2] ; account for leap day
  3196                                  		; 08/08/2023
  3197 00001476 FF06[BB06]              		inc	word [daycnt2]
  3198                                  no_leap_adjustment:			
  3199 0000147A 8A0E[BA06]              		mov	cl, [bin_date_time+3] ; get days of month
  3200 0000147E 30ED                    		xor	ch, ch
  3201 00001480 49                      		dec	cx		; because of offset from day 1,	not day	0
  3202                                  		;add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  3203                                  		; 08/08/2023
  3204 00001481 010E[BB06]              		add	[daycnt2], cx
  3205 00001485 8A0E[B906]              		mov	cl, [bin_date_time+2] ; get month
  3206                                  		; 08/08/2023
  3207                                  		;xor	ch, ch
  3208 00001489 49                      		dec	cx		; january starts at offset 0
  3209                                  		
  3210                                  		; 08/08/2023
  3211                                  		;shl	cx, 1		; word offset
  3212                                  		;;mov	si, month_table
  3213                                  		;add	si, cx
  3214                                  		;; 16/10/2022
  3215                                  		;; ds must be same with cs here, if so..
  3216                                  		;; what for cs: prefixes are used !?)
  3217                                  		;; mov	ax, [cs:si]
  3218                                  		;; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  3219                                  		;mov	ax, [si]	; mov ax, [cs:si]
  3220                                  		;			; get #	days in	previous months
  3221                                  		;add	[cs:daycnt2], ax
  3222                                  
  3223                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3224                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:1907h
  3225 0000148A B400                    		mov	ah, 0
  3226 0000148C BE[F604]                		mov	si, month_tab
  3227                                  r_d_sum_loop:
  3228 0000148F AC                      		lodsb
  3229 00001490 0106[BB06]              		add	[daycnt2], ax
  3230 00001494 E2F9                    		loop	r_d_sum_loop
  3231                                  r_d_ret:
  3232                                  		;mov	si, [cs:daycnt2]
  3233                                  		; 08/08/2023
  3234 00001496 8B36[BB06]              		mov	si, [daycnt2]
  3235 0000149A 5A                      		pop	dx
  3236 0000149B 59                      		pop	cx
  3237 0000149C 5B                      		pop	bx
  3238 0000149D 58                      		pop	ax
  3239 0000149E C3                      		retn
  3240                                  
  3241                                  ;-----------------------------------------------------------------------------
  3242                                  
  3243                                  r_t_retj:				
  3244 0000149F 31C9                    		xor	cx, cx
  3245 000014A1 31D2                    		xor	dx, dx
  3246 000014A3 EB38                    		jmp	short r_t_ret
  3247                                  
  3248                                  ; =============== S U B	R O U T	I N E ========================================
  3249                                  
  3250                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  3251                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  3252                                  
  3253                                  read_real_time:	; proc near		
  3254 000014A5 B402                    		mov	ah, 2
  3255 000014A7 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  3256                                  					; Return: CH = hours in	BCD
  3257                                  					; CL = minutes in BCD
  3258                                  					; DH = seconds in BCD
  3259 000014A9 72F4                    		jb	short r_t_retj
  3260 000014AB 882E[B706]              		mov	[bin_date_time], ch ; hours
  3261 000014AF 880E[B806]              		mov	[bin_date_time+1], cl ; minutes
  3262 000014B3 8836[B906]              		mov	[bin_date_time+2], dh ; seconds
  3263 000014B7 C606[BA06]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  3264 000014BC E89F00                  		call	bcd_verify
  3265 000014BF 72DE                    		jb	short r_t_retj
  3266 000014C1 E88500                  		call	time_verify
  3267 000014C4 72D9                    		jb	short r_t_retj
  3268 000014C6 E81500                  		call	in_bin		; from bcd to bin
  3269 000014C9 8A2E[B706]              		mov	ch, [bin_date_time]
  3270 000014CD 8A0E[B806]              		mov	cl, [bin_date_time+1]
  3271 000014D1 8A36[B906]              		mov	dh, [bin_date_time+2]
  3272 000014D5 8A16[BA06]              		mov	dl, [bin_date_time+3]
  3273                                  		; 16/10/2022
  3274                                  		; 17/09/2022
  3275                                  		; 31/05/2019
  3276 000014D9 FF1E[C106]              		call	far [ttticks] 
  3277                                  		;call	dword ptr ttticks ; note: indirect far call
  3278                                  					; cx:dx	= number of ticks
  3279                                  					; (at 18.2 ticks per sec.)
  3280                                  r_t_ret:				
  3281 000014DD C3                      		retn
  3282                                  
  3283                                  ; =============== S U B	R O U T	I N E =======================================
  3284                                  
  3285                                  ;   in_bin converts bin_date_time values from bcd to bin
  3286                                  
  3287                                  in_bin:		; proc near
  3288 000014DE A0[B706]                		mov	al, [bin_date_time] ; century or hours
  3289 000014E1 E81F00                  		call	bcd_to_bin
  3290 000014E4 A2[B706]                		mov	[bin_date_time], al
  3291 000014E7 A0[B806]                		mov	al, [bin_date_time+1] ; years or minutes
  3292 000014EA E81600                  		call	bcd_to_bin
  3293 000014ED A2[B806]                		mov	[bin_date_time+1], al
  3294 000014F0 A0[B906]                		mov	al, [bin_date_time+2] ; months or seconds
  3295 000014F3 E80D00                  		call	bcd_to_bin
  3296 000014F6 A2[B906]                		mov	[bin_date_time+2], al
  3297 000014F9 A0[BA06]                		mov	al, [bin_date_time+3] ; days (not used for time)
  3298 000014FC E80400                  		call	bcd_to_bin
  3299 000014FF A2[BA06]                		mov	[bin_date_time+3], al
  3300 00001502 C3                      		retn
  3301                                  
  3302                                  ; =============== S U B	R O U T	I N E =======================================
  3303                                  
  3304                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  3305                                  ;   a binary representation in al
  3306                                  ;   ah is destroyed
  3307                                  
  3308                                  bcd_to_bin:	; proc near
  3309 00001503 88C4                    		mov	ah, al
  3310 00001505 240F                    		and	al, 0Fh
  3311 00001507 B104                    		mov	cl, 4
  3312 00001509 D2EC                    		shr	ah, cl
  3313 0000150B D50A                    		aad
  3314 0000150D C3                      		retn
  3315                                  
  3316                                  ; =============== S U B	R O U T	I N E ========================================
  3317                                  
  3318                                  ;   date_verify loosely checks bcd date values to be in range
  3319                                  ;   in bin_date_time
  3320                                  
  3321                                  date_verify:	; proc near
  3322 0000150E 803E[B706]20            		cmp	byte [bin_date_time], 20h ; century check
  3323 00001513 7732                    		ja	short date_error
  3324 00001515 740E                    		jz	short century_20 ; jmp in 21th century
  3325 00001517 803E[B706]19            		cmp	byte [bin_date_time], 19h ; century check
  3326                                  		;jb	short date_error
  3327                                  		; 12/12/2022
  3328 0000151C 722A                    		jb	short date_err2
  3329 0000151E 803E[B806]80            		cmp	byte [bin_date_time+1], 80h ; year check
  3330                                  		;jb	short date_error
  3331                                  		; 12/12/2022
  3332 00001523 7223                    		jb	short date_err2
  3333                                  century_20:
  3334 00001525 803E[B806]99            		cmp	byte [bin_date_time+1], 99h ; year check
  3335 0000152A 771B                    		ja	short date_error
  3336 0000152C 803E[B906]12            		cmp	byte [bin_date_time+2], 12h ; month check
  3337 00001531 7714                    		ja	short date_error
  3338 00001533 803E[B906]00            		cmp	byte [bin_date_time+2], 0
  3339                                  		;jbe	short date_error
  3340 00001538 760D                    		jna	short date_error
  3341 0000153A 803E[BA06]31            		cmp	byte [bin_date_time+3], 31h ; day check
  3342 0000153F 7706                    		ja	short date_error
  3343                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  3344                                  		;;jbe	short date_error
  3345                                  		;jna	short date_error
  3346                                  		; 12/12/2022
  3347                                  		; cf=0
  3348                                  		;clc
  3349                                  		; 12/12/2022
  3350 00001541 803E[BA06]01            		cmp	byte [bin_date_time+3], 1 ; day check
  3351 00001546 C3                      		retn
  3352                                  ;-----------------------------------------------------------------------------
  3353                                  
  3354                                  date_error:
  3355 00001547 F9                      		stc
  3356                                  date_err2:
  3357 00001548 C3                      		retn
  3358                                  
  3359                                  ; =============== S U B	R O U T	I N E ========================================
  3360                                  
  3361                                  ; time_verify very loosely checks bcd date values to be in range
  3362                                  ; in bin_date_time
  3363                                  
  3364                                  time_verify:	; proc near
  3365 00001549 803E[B706]24            		cmp	byte [bin_date_time], 24h ; hour check
  3366 0000154E 770C                    		ja	short time_error
  3367 00001550 803E[B806]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  3368 00001555 7705                    		ja	short time_error
  3369                                  		; 12/12/2022h
  3370                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  3371                                  		;ja	short time_error
  3372                                  		;clc
  3373                                  		;retn
  3374                                  		; 12/12/2022
  3375 00001557 803E[B906]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  3376                                  time_error:
  3377                                  bv_error:
  3378 0000155C F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  3379 0000155D C3                      		retn
  3380                                  
  3381                                  ; ----------------------------------------------------------------------------
  3382                                  
  3383                                  ;time_error:				
  3384                                  		;stc
  3385                                  		;retn
  3386                                  
  3387                                  ; =============== S U B	R O U T	I N E ========================================
  3388                                  
  3389                                  ;   bcd_verify checks values in bin_date_time to be valid
  3390                                  ;   bcd numerals.  carry set if any nibble out of range
  3391                                  
  3392                                  bcd_verify:	; proc near
  3393 0000155E B90400                  		mov	cx, 4		; 4 bytes to check
  3394 00001561 BB[B706]                		mov	bx, bin_date_time
  3395                                  bv_loop:
  3396 00001564 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  3397 00001566 88C4                    		mov	ah, al
  3398 00001568 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  3399                                  					; is 1's place in range?
  3400 0000156B 3C0A                    		cmp	al, 10
  3401 0000156D 77ED                    		ja	short bv_error	; jmp out of range
  3402 0000156F D0EC                    		shr	ah, 1
  3403 00001571 D0EC                    		shr	ah, 1
  3404 00001573 D0EC                    		shr	ah, 1
  3405 00001575 D0EC                    		shr	ah, 1
  3406 00001577 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  3407 0000157A 80FC0A                  		cmp	ah, 10		; is 10's place in range
  3408 0000157D 77DD                    		ja	short bv_error	; jmp out of range
  3409 0000157F 43                      		inc	bx		; next byte
  3410 00001580 49                      		dec	cx
  3411 00001581 75E1                    		jnz	short bv_loop
  3412 00001583 F8                      		clc			; set success flag
  3413 00001584 C3                      		retn
  3414                                  ; ----------------------------------------------------------------------------
  3415                                  
  3416                                  		; 12/12/2022
  3417                                  ;bv_error:
  3418                                  		;stc			; set error flag
  3419                                  		;retn
  3420                                  
  3421                                  ; ----------------------------------------------------------------------------
  3422                                  
  3423                                  endk09:
  3424                                  
  3425                                  ; ----------------------------------------------------------------------------
  3426                                  
  3427                                  ;------------------------------------------------------------------------
  3428                                  ;									:
  3429                                  ;	System initialization						:
  3430                                  ;									:
  3431                                  ;	The entry conditions are established by the bootstrap		:
  3432                                  ;	loader and are considered unknown. The following jobs		:
  3433                                  ;	will be performed by this module:				:
  3434                                  ;									:
  3435                                  ;	1.	All device initialization is performed			:
  3436                                  ;	2.	A local stack is set up and DS:SI are set		:
  3437                                  ;		to point to an initialization table. Then		:
  3438                                  ;		an inter-segment call is made to the first		:
  3439                                  ;		byte of the dos 					:
  3440                                  ;	3.	Once the dos returns from this call the ds		:
  3441                                  ;		register has been set up to point to the start		:
  3442                                  ;		of free memory. The initialization will then		:
  3443                                  ;		load the command program into this area 		:
  3444                                  ;		beginning at 100 hex and transfer control to		:
  3445                                  ;		this program.						:
  3446                                  ;									:
  3447                                  ;------------------------------------------------------------------------
  3448                                  
  3449                                  ; 01/10/2022
  3450                                  ; 08/01/2018 - Retro DOS v4.0
  3451                                  
  3452                                  ; drvfat must be the first location of freeable space!
  3453                                  
  3454 00001585 90                      align 2
  3455                                  		;db 90h
  3456                                  
  3457                                  ; 20/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  3458                                  ; ((no need to read/load 'MSDOS.SYS', it is already loaded))
  3459                                  ; (((bios_l,bios_h,doscnt,fatloc,md_sectorsize,temp_cluster,last_fat_sec_num
  3460                                  ;   would be used to read 'MSDOS.SYS' from disk, now they are not needed)))
  3461                                  	
  3462 00001586 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  3463                                  ;bios_l:	dw 0			; first	sector of data (low word)
  3464                                  ;bios_h:	dw 0			; first	sector of data (high word)
  3465                                  ;doscnt:	dw 0			; how many sectors to read
  3466 00001588 00                      fbigfat:	db 0			; flags	for drive
  3467                                  ;fatloc:	dw 0			; seg addr of fat sector
  3468 00001589 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  3469 0000158B 80                      rom_drv_num:	db 80h			; rom drive number
  3470                                  ;md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  3471                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  3472                                  ;last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  3473                                  
  3474                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  3475                                  ; call to determine drive parameters.
  3476                                  
  3477 0000158C 02                      num_heads:	db 2			; number of heads returned by rom
  3478                                  		;db 0	; 08/08/2023
  3479 0000158D 09                      sec_trk:	db 9			; sec/trk returned by rom
  3480 0000158E 28                      num_cyln:	db 40			; number of cylinders returned by rom
  3481                                  		;db 0	; 08/08/2023
  3482 0000158F 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  3483                                  
  3484                                  ; ----------------------------------------------------------------------------
  3485                                  
  3486 00001590 0002000140000000        disktable:	dw 512,	0100h, 64, 0	; warning !!! old values
  3487 00001598 0008010270000000        		dw 2048, 0201h, 112, 0
  3488 000015A0 0020020400010000        		dw 8192, 0402h, 256, 0
  3489 000015A8 A87F030800020000        		dw 32680, 0803h, 512, 0	; warning !!! old values
  3490 000015B0 FFFF041000040000        		dw 65535, 1004h, 1024, 0
  3491                                  					; default disktable under
  3492                                  					; the assumption of total fat size <= 128 kb,
  3493                                  					; and the maximum size of fat entry = 16 bit.
  3494                                  		; 08/08/2023
  3495                                  		; disktable.totalsectors: resd 1
  3496                                  		; disktable.shiftcount:   resb 1
  3497                                  		; disktable.secperclus:   resb 1
  3498                                  		; disktable.rdirentries:  resw 1
  3499                                  		; disktable.bigflag:      resw 1
  3500 000015B8 0000A87F0308000200-     disktable2:	dw 0, 32680, 0803h, 512, 0 ; for compatibility.
  3500 000015C1 00                 
  3501                                  					   ; (32680 sectors, 16340 KB)
  3502 000015C2 040000000204000240-     		dw 4, 0, 0402h, 512, 40h   ; covers upto 134 mb media.
  3502 000015CB 00                 
  3503                                  					   ; fbig = 40h  ; (40000h sectors = 128 MB)
  3504 000015CC 080000000308000240-     		dw 8, 0, 0803h, 512, 40h   ; upto 268 mb ; (80000h sectors = 256 MB)
  3504 000015D5 00                 
  3505 000015D6 100000000410000240-     		dw 16, 0, 1004h, 512, 40h  ; upto 536 mb ; (100000h sectors = 512 MB)
  3505 000015DF 00                 
  3506 000015E0 200000000520000240-     		dw 32, 0, 2005h, 512, 40h  ; upto 1072 mb ; (200000h sectors = 1024 MB)
  3506 000015E9 00                 
  3507 000015EA 400000000640000240-     		dw 64, 0, 4006h, 512, 40h  ; upto 2144 mb ; (400000h sectors = 2048 MB)
  3507 000015F3 00                 
  3508 000015F4 800000000780000240-     		dw 128,	0, 8007h, 512, 40h ; upto 4288 mb ; (800000h sectors = 4096 MB)
  3508 000015FD 00                 
  3509                                  					
  3510                                  ; ----------------------------------------------------------------------------
  3511                                  
  3512                                  ;******************************************************
  3513                                  ;variables for mini disk initialization
  3514                                  ;******************************************************
  3515                                  
  3516                                  ; 01/10/2022
  3517                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  3518                                  
  3519 000015FE 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  3520 000015FF 00                      hnum:		db 0			; real number of hardfiles
  3521 00001600 [7F06]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  3522 00001602 [B808]                  end_of_bdss:	dw bdss			; offset value of the ending address
  3523                                  					; of bds table. needed to figure out
  3524                                  					; the dosdatasg address.
  3525 00001604 0000                    mini_hdlim:	dw 0			
  3526 00001606 0000                    mini_seclim:	dw 0
  3527                                  
  3528                                  ;end of mini disk init variables **********************
  3529                                  
  3530                                  ; ----------------------------------------------------------------------------
  3531                                  			
  3532 00001608 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  3533                                  
  3534                                  ; 13/12/2022
  3535                                  %if 0
  3536                                  
  3537                                  ;align 2
  3538                                  		db  90h	
  3539                                  
  3540                                  ; the following are the recommended bpbs for the media that we know of so far.
  3541                                  
  3542                                  ;struc bpbx
  3543                                  ;   resw 1 ; 512
  3544                                  ;   resb 1
  3545                                  ;   resw 1 ; 1
  3546                                  ;   resb 1 ; 2
  3547                                  ;   resw 1
  3548                                  ;   resw 1
  3549                                  ;   resb 1
  3550                                  ;   resw 1
  3551                                  ;   resw 1
  3552                                  ;   resw 1 ; 2
  3553                                  ;   resw 1
  3554                                  ;   resw 1 ; hidden sector high
  3555                                  ;   resd 1 ; extended total sectors
  3556                                  ;.size:
  3557                                  ;endstruc
  3558                                  
  3559                                  ; 08/01/2019 - Retro DOS v4.0
  3560                                  
  3561                                  ; 20/04/2019
  3562                                  
  3563                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  3564                                  
  3565                                  ; 09/12/2022
  3566                                  BPB48T:
  3567                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  3568                                  		; 48 tpi diskettes	;
  3569                                  		dw	512		; physical sector size in bytes
  3570                                  		db	2		; sectors/allocation unit
  3571                                  		dw	1		; reserved sectors for dos
  3572                                  		db	2		; number of allocation tables
  3573                                  		dw	112		; number of directory entries
  3574                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  3575                                  		db	0FDh		; media descriptor
  3576                                  		dw	2		; number of fat sectors
  3577                                  		dw	9		; sectors per track
  3578                                  		dw	2		; heads
  3579                                  		dw	0		; hidden sector count (low word)
  3580                                  		dw	0		; hidden sector (high)
  3581                                  		dw	0		; number of sectors (low)
  3582                                  		dw	0		; number of sectors (high)					
  3583                                  
  3584                                  		db 90h
  3585                                  ;align 2
  3586                                  BPB96T:
  3587                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  3588                                  		; 96 tpi diskettes	;
  3589                                  		dw	512		; physical sector size in bytes
  3590                                  		db	1		; sectors/allocation unit
  3591                                  		dw	1		; reserved sectors for dos
  3592                                  		db	2		; number of allocation tables
  3593                                  		dw	224		; number of directory entries
  3594                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  3595                                  		db	0F9h		; media descriptor
  3596                                  		dw	7		; number of fat sectors
  3597                                  		dw	15		; sectors per track
  3598                                  		dw	2		; heads
  3599                                  		dw	0		; hidden sector count (low word)
  3600                                  		dw	0		; hidden sector (high)
  3601                                  		dw	0		; number of sectors (low)
  3602                                  		dw	0		; number of sectors (high)
  3603                                  
  3604                                  		db 90h
  3605                                  ;align 2
  3606                                  BPB35:
  3607                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  3608                                  		; 3.5" diskettes - 720 KB ;		
  3609                                  		dw	512		; physical sector size in bytes
  3610                                  		db	2		; sectors/allocation unit
  3611                                  		dw	1		; reserved sectors for dos
  3612                                  		db	2		; number of allocation tables
  3613                                  		dw	112		; number of directory entries
  3614                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  3615                                  		db	0F9h		; media descriptor
  3616                                  		dw	3		; number of fat sectors
  3617                                  		dw	9		; sectors per track
  3618                                  		dw	2		; heads
  3619                                  		dw	0		; hidden sector count (low word)
  3620                                  		dw	0		; hidden sector (high)
  3621                                  		dw	0		; number of sectors (low)
  3622                                  		dw	0		; number of sectors (high)
  3623                                  
  3624                                  		db 90h
  3625                                  ;align 2
  3626                                  
  3627                                  ;align 2
  3628                                  ;BPB144:
  3629                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  3630                                  ;
  3631                                  ;		dw	512		; physical sector size in bytes
  3632                                  ;		db	1		; sectors/allocation unit
  3633                                  ;		dw	1		; reserved sectors for dos
  3634                                  ;		db	2		; number of allocation tables
  3635                                  ;		dw	224		; number of directory entries
  3636                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  3637                                  ;		db	0F0h		; media descriptor
  3638                                  ;		dw	9		; number of fat sectors
  3639                                  ;		dw	18		; sectors per track
  3640                                  ;		dw	2		; heads
  3641                                  ;		dw	0		; hidden sector count (low word)
  3642                                  ;		dw	0		; hidden sector (high)
  3643                                  ;		dw	0		; number of sectors (low)
  3644                                  ;		dw	0		; number of sectors (high)
  3645                                  ;
  3646                                  ;		db 90h
  3647                                  ;align 2
  3648                                  
  3649                                  BPB288:
  3650                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  3651                                  		; 3.5" diskettes - 2.88 MB ;	 
  3652                                  		dw	512		; physical sector size in bytes
  3653                                  		db	2		; sectors/allocation unit
  3654                                  		dw	1		; reserved sectors for dos
  3655                                  		db	2		; number of allocation tables
  3656                                  		dw	240		; number of directory entries
  3657                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  3658                                  		db	0F0h		; media descriptor
  3659                                  		dw	3		; number of fat sectors
  3660                                  		dw	9		; sectors per track
  3661                                  		dw	2		; heads
  3662                                  		dw	0		; hidden sector count (low word)
  3663                                  		dw	0		; hidden sector (high)
  3664                                  		dw	0		; number of sectors (low)
  3665                                  		dw	0		; number of sectors (high)
  3666                                  
  3667                                  		db 90h			;
  3668                                  ;align 2
  3669                                  
  3670                                  %endif
  3671                                  
  3672                                  ; ----------------------------------------------------------------------------
  3673                                  					; align	2
  3674                                  ; 09/12/2022
  3675                                  %if 0
  3676                                  bpbtable:	dw bpb48t		; 48tpi	drives
  3677                                  		dw bpb96t		; 96tpi	drives
  3678                                  		dw bpb35		; 3.5" drives
  3679                                  		dw bpb35		; unused 8" diskette
  3680                                  		dw bpb35		; unused 8" diskette
  3681                                  		dw bpb35		; used for hard	disk
  3682                                  		dw bpb35		; used for tape	drive
  3683                                  		dw bpb35		; FFOTHER
  3684                                  		dw bpb35		; ERIMO
  3685                                  		dw bpb288		; 2.88MB drive
  3686                                  		;
  3687                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  3688                                  %endif
  3689                                  
  3690                                  ; 13/12/2022
  3691                                  %if 0
  3692                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  3693                                  		dw BPB96T		; 96tpi	drives
  3694                                  		dw BPB35		; 3.5" drives
  3695                                  		dw BPB35		; unused 8" diskette
  3696                                  		dw BPB35		; unused 8" diskette
  3697                                  		dw BPB35		; used for hard	disk
  3698                                  		dw BPB35		; used for tape	drive
  3699                                  		dw BPB35		; FFOTHER
  3700                                  		dw BPB35		; ERIMO
  3701                                  		dw BPB288		; 2.88MB drive
  3702                                  		;
  3703                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  3704                                  
  3705                                  %endif
  3706                                  
  3707                                  ; ----------------------------------------------------------------------------
  3708                                  
  3709                                  ;	entry point to call utility functions in Bios_Code. At this time,
  3710                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  3711                                  ;	  will not yet be moved to its final resting place, so we know
  3712                                  ;	  it'll be low.
  3713                                  ;
  3714                                  ;	to use this function, do a "push cs" and load bp with the offset of
  3715                                  ;	  the function you want to call in Bios_Code. This routine will
  3716                                  ;	  push the address of a retf in Bios_Code onto the stack which
  3717                                  ;	  will get executed when the utility function finishes. It will
  3718                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  3719                                  ;	  and a retf
  3720                                  
  3721                                  ; 16/10/2022
  3722                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  3723                                  ; 09/12/2022
  3724                                  BC_RETF equ bc_retf
  3725                                  
  3726                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  3727                                  					; 2C7h:0C8h = 70h:2638h
  3728 00001611 [CC00]                  		dw BC_RETF
  3729                                  
  3730                                  ; ----------------------------------------------------------------------------
  3731                                  
  3732                                  call_bios_code:	; proc far			
  3733 00001613 2EFF36[1116]            		push	word [cs:addr_of_bcretf] 
  3734                                  					; set up near return to far return
  3735 00001618 2EFF36[BF06]            		push	word [cs:cdev+2] ; push Bios_Code segment
  3736 0000161D 55                      		push	bp		; save offset of utility function
  3737 0000161E CB                      		retf			; far jump to (DOS)BIOS code
  3738                                  
  3739                                  ; ----------------------------------------------------------------------------
  3740                                  		
  3741                                  		; 20/12/2022
  3742                                  ;flp_drvs	db 0			
  3743                                  
  3744                                  ; ----------------------------------------------------------------------------
  3745                                  
  3746                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0, classic/old MICROSOFT DOS method)
  3747                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel files, original/new method) (*)
  3748                                  ;      (*) (for using Retro DOS kernel 'MSDOS.SYS' with Retro DOS boot sector)
  3749                                  
  3750                                  ;-----------------------------------------------------------------------------
  3751                                  ; entry point from boot sector
  3752                                  ;-----------------------------------------------------------------------------
  3753                                  
  3754                                  init:		; 27/12/2018
  3755                                  		; MSDOS 6.0 (MSINIT.ASM)
  3756                                  		;=============================================================
  3757                                  		;
  3758                                  		; entry from boot sector. the register contents are:
  3759                                  		;
  3760                                  		;   dl = int 13 drive number we booted from
  3761                                  		;   ch = media byte
  3762                                  		;   bx = first data sector on disk.
  3763                                  		;   ax = first data sector (high)
  3764                                  		;   di = sectors/fat for the boot media.
  3765                                  
  3766                                  		; 07/04/2018
  3767                                  		;=============================================================
  3768                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  3769                                                  ; DL = [bsDriveNumber]
  3770                                  		; DH = [bsMedia]
  3771                                  		; AX = [bsSectors] ; Total sectors
  3772                                  		; DS = 0, SS = 0
  3773                                  		; BP = 7C00h
  3774                                  	
  3775                                  ; 20/12/2022
  3776                                  ; Changing original MSDOS 5.0 IO.SYS init code with Retro DOS v4.0 init code.		
  3777                                  %if 0	
  3778                                  		cli
  3779                                  
  3780                                  		push	ax
  3781                                  		xor	ax, ax
  3782                                  		mov	ds, ax
  3783                                  		pop	ax
  3784                                  %endif
  3785                                  
  3786                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3787                                  
  3788                                  KERNEL_SEGMENT equ 70h	; (DOS BIOSDATA SEGMENT)
  3789                                  BSSECPERTRACK equ 18h	; boot sector offset 18h (for Retro DOS & MSDOS)	
  3790                                  
  3791                                  ;-----------------------------------------------------------------------------
  3792                                  ; initialization - stage 1
  3793                                  ;-----------------------------------------------------------------------------
  3794                                  ; 02/06/2018 - Retro DOS v3.0
  3795                                  		
  3796                                  		; 21/12/2022
  3797                                  		; Move Retro DOS v2.0 boot sector parameters to 0060h:0
  3798                                  		;mov	bx, 60h
  3799                                  		;mov	es, bx
  3800                                  		;mov	si, bp
  3801                                  		;sub	di, di
  3802                                  		;mov	cx, 35 ; 70 bytes, 35 words
  3803                                  		;;mov	cl, 35
  3804                                  		;rep	movsw
  3805                                  
  3806 0000161F 0E                      		push	cs
  3807 00001620 1F                      		pop	ds
  3808                                  
  3809                                  		; 20/03/2019 - Retro DOS v4.0
  3810                                  		;cli		; turn interrupts off while manupulating stack
  3811                                  		;mov	ss, cx	; set stack segment register
  3812 00001621 BC0007                  		mov	sp, 0700h ; move stack pointer to safe place
  3813                                  		;sti		; turn interrupts on
  3814                                  
  3815                                  		; 27/03/2018
  3816                                  		;mov	cx, KERNEL_SIZE	; words !
  3817                                  
  3818                                  		; 20/03/2019
  3819 00001624 B90080                  		mov	cx, 32768 ; 65536 bytes
  3820                                  
  3821                                  		; 21/12/2022
  3822                                  		; 07/04/2018
  3823 00001627 BB7000                  		mov	bx, KERNEL_SEGMENT ; 0070h
  3824                                  		;mov	bl, KERNEL_SEGMENT
  3825 0000162A 8EC3                    		mov	es, bx
  3826 0000162C 31FF                    		xor	di, di
  3827 0000162E 89FE                    		mov	si, di
  3828                                  		
  3829                                  		; Move KERNEL file from 1000h:0 to 0070h:0
  3830                                  		; (Retro DOS v2 BS loads 'MSDOS.SYS' at 1000h:0000h)
  3831 00001630 F3A5                    		rep	movsw
  3832                                  
  3833                                  		; 20/03/2019 - Retro DOS v4.0
  3834 00001632 53                      		push	bx
  3835 00001633 68[3716]                		push	init0
  3836 00001636 CB                      		retf
  3837                                  init0:	
  3838                                  		; 20/12/2022
  3839                                  		; (combined kernel file > 64KB)
  3840                                  
  3841                                  		; 20/03/2019
  3842 00001637 B520                    		mov	ch, 20h
  3843 00001639 8ED9                    		mov	ds, cx ; 2000h
  3844                                  		;mov	cx, 1070h
  3845 0000163B B97010                  		mov	cx, KERNEL_SEGMENT+1000h ; 20/12/2022
  3846 0000163E 8EC1                    		mov	es, cx
  3847                                  		
  3848                                  		; 21/12/2022
  3849                                  		KERNEL_SIZE equ END_OF_KERNEL - BData_start
  3850                                  
  3851 00001640 B9[0A5D]                		mov	cx, KERNEL_SIZE - 32768
  3852                                  		;xor	si, si
  3853                                  		;xor	di, di
  3854 00001643 F3A5                    		rep	movsw
  3855                                  
  3856                                  		; 17/06/2018 
  3857 00001645 8EDB                    		mov	ds, bx
  3858                                  		; 21/03/2019
  3859 00001647 8EC3                    		mov	es, bx
  3860                                  ;init0:
  3861                                  ;		;push	es
  3862                                  ;		push	bx ; 20/03/2019
  3863                                  ;		push	init1 ; 07/04/2018
  3864                                  ;		retf	; jump to 0070h:init1
  3865                                  ;init:
  3866                                  init1:
  3867                                  		; 20/12/2022
  3868                                  		; Change INT 1Eh diskette parameters table and INT 1Eh address
  3869                                  		; for full MSDOS compatibility.
  3870                                  
  3871 00001649 8EC1                    		mov	es, cx ; 0
  3872 0000164B 8ED9                    		mov	ds, cx ; 0
  3873                                  
  3874 0000164D B82205                  		mov	ax, SEC9
  3875                                  
  3876                                  		;mov	bx, 1Eh*4  ; [0078h] ; INT 1Eh vector/pointer
  3877 00001650 B378                    		mov	bl, 1Eh*4
  3878                                  				; INT 1Eh points to diskette parms table
  3879                                  
  3880                                  		; check if the table is already at 0:SEC9 (0:0522h)
  3881                                   		; (do not move the DPT if is not original ROMBIOS table)
  3882                                  
  3883                                  		;;or	[bx+2],cx [(1Eh*4)+2] ; [007Ah] ; segment
  3884                                  		;;jnz	short mov_dpt
  3885                                  
  3886                                  		;cmp	ax, [bx]  ; [1Eh*4] = 0522h ?
  3887                                  		;je	short dont_mov_dpt
  3888                                  
  3889                                  		;mov	si, [bx] ; [1Eh*4]		
  3890                                  ;mov_dpt:
  3891                                  		;mov	ds, [bx+2] ; [(1Eh*4)+2] ; [007Ah] ; segment
  3892 00001652 C537                    		lds	si, [bx]
  3893 00001654 89C7                    		mov	di, ax  ; SEC9
  3894 00001656 B10B                    		mov	cl, 11
  3895                                  		;cld
  3896 00001658 F3A4                    		rep	movsb
  3897                                  
  3898                                  		; Set INT 1Eh vector/pointer to the new DPT address
  3899 0000165A 8ED9                    		mov	ds, cx ; 0
  3900 0000165C 8907                    		mov	[bx], ax ; SEC9	; [007Eh] ; 1Eh*4  ; offset
  3901 0000165E 894F02                  		mov	[bx+2], cx ; 0  ; [007Ah] ; 1Eh*4+2 ; segment
  3902                                  ;dont_mov_dpt:
  3903                                  
  3904                                  ; 20/12/2022 - Retro DOS v4.0
  3905                                  %if 0
  3906                                  		; 27/12/2018 - Retro DOS v4.0
  3907                                  		; 'Starting MS-DOS...' message
  3908                                  		; (MSDOS 6.21, IO.SYS Segment: 423h, Offset: 5673h)
  3909                                  		; (0070h:96A3h)
  3910                                  
  3911                                    	    	mov     si, SYSINIT_START+StartMsg ; 18/03/2019
  3912                                  		mov     ah, 0Eh
  3913                                  		;bh = 0
  3914                                          	mov     bl, 7		; "normal" attribute and page
  3915                                  startmsg_nxt_chr:  
  3916                                  		lodsb
  3917                                  		or	al, al
  3918                                          	jz	short startmsg_ok
  3919                                         
  3920                                  		int	10h		; video write
  3921                                          	jmp	short startmsg_nxt_chr
  3922                                  
  3923                                  ;flp_drvs:	db  0 	; 27/12/2018 - Retro DOS v4.0
  3924                                  
  3925                                  startmsg_ok:
  3926                                  
  3927                                  %endif
  3928                                  
  3929                                  ;-----------------------------------------------------------------------------
  3930                                  ; initialization - stage 2
  3931                                  ;-----------------------------------------------------------------------------
  3932                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3933                                  
  3934                                  
  3935                                  ; 19/03/2018
  3936                                  ; Retro DOS v2.0 (24/02/2018)
  3937                                  ; [REF: MSDOS 3.3, MSBIO, "MSINIT.ASM"  (24/07/1987)]
  3938                                  
  3939                                  ;------------------------------------------------------------------------
  3940                                  ;									:
  3941                                  ;	System initialization						:
  3942                                  ;									:
  3943                                  ;	The entry conditions are established by the bootstrap		:
  3944                                  ;	loader and are considered unknown. The following jobs		:
  3945                                  ;	will be performed by this module:				:
  3946                                  ;									:
  3947                                  ;	1.	All device initialization is performed			:
  3948                                  ;	2.	A local stack is set up and DS:SI are set		:
  3949                                  ;		to point to an initialization table. Then		:
  3950                                  ;		an inter-segment call is made to the first		:
  3951                                  ;		byte of the dos 					:
  3952                                  ;	3.	Once the dos returns from this call the ds		:
  3953                                  ;		register has been set up to point to the start		:
  3954                                  ;		of free memory. The initialization will then		:
  3955                                  ;		load the command program into this area 		:
  3956                                  ;		beginning at 100 hex and transfer control to		:
  3957                                  ;		this program.						:
  3958                                  ;									:
  3959                                  ;------------------------------------------------------------------------
  3960                                  		
  3961                                  		; 20/12/2022
  3962                                  		; ----------------------
  3963                                  		; Registers
  3964                                  		; ----------------------
  3965                                  		; DL = [bsDriveNumber]
  3966                                  		; DH = [bsMedia]
  3967                                  		; DS = 0, ES = 0, SS = 0
  3968                                  		; BP = 7C00h
  3969                                  		; SP = 700h
  3970                                  		; ----------------------
  3971                                  		; CX = 0				
  3972                                  
  3973                                  ; 02/10/2022 - 20/12/2022
  3974                                  ; ------------------------------------------------------------------------------
  3975                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  3976                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  3977                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  3978                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  3979                                  ;	moves kernel to segment 70h at first, then sets diskette parameters
  3980                                  ;	at segment 50h (while MSDOS 5.0 boot sector and then MSLOAD sets this).
  3981                                  ; ------------------------------------------------------------------------------
  3982                                  
  3983                                  ; msload will check the extended boot record and set ax, bx accordingly.
  3984                                  ;
  3985                                  ;;	msload passes a 32 bit sector number hi word in ax and low in bx
  3986                                  ;;	save this in cs:bios_h and cs:bios_l. this is for the start of
  3987                                  ;;	data sector of the bios.
  3988                                  ;
  3989                                  ;		mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  3990                                  ;		mov	[cs:bios_l], bx
  3991                                  
  3992                                  ; with the following information from msload, we don't need the
  3993                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  3994                                  ;     limitation of msbio.com file.
  3995                                  
  3996                                  		; 21/12/2022
  3997 00001661 FA                      		cli
  3998                                  
  3999 00001662 0E                      		push	cs		; Save a peck of interrupt vectors...
  4000 00001663 07                      		pop	es
  4001                                  		;push	cx
  4002                                  		;push	di
  4003                                  		; 20/12/2022
  4004 00001664 B105                    		mov	cl, 5
  4005                                  		;mov	cx, 5		; NUMROMVECTORS
  4006                                  					; no. of rom vectors to	be saved
  4007                                  		;mov	si, offset RomVectors ; point to list of int vectors
  4008 00001666 BE[0001]                		mov	si, RomVectors
  4009                                  next_int_:		
  4010 00001669 2E                      		cs	; 16/10/2022
  4011 0000166A AC                      		lodsb		
  4012                                  		;lods	byte ptr cs:[si] ; cs lodsb
  4013 0000166B 98                      		cbw			; ax = interrupt number
  4014 0000166C D1E0                    		shl	ax, 1
  4015 0000166E D1E0                    		shl	ax, 1		; int no * 4
  4016 00001670 89C7                    		mov	di, ax		; interrupt vector address
  4017 00001672 87F7                    		xchg	si, di		; rombios interrupt vector address in si
  4018                                  					; saving address in di
  4019                                  		;lodsw			; movsw
  4020                                  		;stosw
  4021                                  		;lodsw			; movsw
  4022                                  		;stosw			; save the vector
  4023                                  		; 20/12/2022
  4024 00001674 A5                      		movsw
  4025 00001675 A5                      		movsw		
  4026                                  
  4027 00001676 87F7                    		xchg	si, di
  4028 00001678 E2EF                    		loop	next_int_
  4029                                  		
  4030                                  		;pop	di
  4031                                  		;pop	cx
  4032                                  
  4033                                  ; we need to save int13 in two places in case we are running on an at.
  4034                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  4035                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  4036                                  ; rom int13 routine, we must have that rom address also stored away.
  4037                                  
  4038                                  		; 20/12/2022
  4039                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  4040                                  		;mov	[cs:Orig13], ax
  4041                                  		;mov	ax, [cs:Old13+2]
  4042                                  		;mov	[cs:Orig13+2], ax
  4043                                  
  4044                                  		; 16/10/2022
  4045 0000167A C7064C00[4F07]          		mov	word [13h*4], block13
  4046                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  4047                                  					; set up int 13	for new	action
  4048 00001680 8C0E4E00                		mov	[13h*4+2], cs
  4049                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  4050 00001684 C7065400[FE07]          		mov	word [15h*4], Int15
  4051                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  4052                                  					; set up int 15	for new	action
  4053 0000168A 8C0E5600                		mov	[15h*4+2], cs
  4054                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  4055 0000168E C7066400[BE07]          		mov	word [19h*4], int19
  4056                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  4057                                  					; set up int 19	for new	action
  4058 00001694 8C0E6600                		mov	[19h*4+2], cs
  4059                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  4060                                  
  4061                                  		; 20/12/2022
  4062 00001698 0E                      		push	cs
  4063 00001699 1F                      		pop	ds
  4064                                  		
  4065 0000169A A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  4066 0000169D A3[B400]                		mov	[Orig13], ax
  4067 000016A0 A1[0801]                		mov	ax, [Old13+2]
  4068 000016A3 A3[B600]                		mov	[Orig13+2], ax
  4069                                  					; ;
  4070 000016A6 FB                      		sti
  4071 000016A7 CD11                    		int	11h		; EQUIPMENT DETERMINATION
  4072                                  					; Return: AX = equipment flag bits
  4073                                  
  4074                                  ; we have to support a system that does not have any diskette
  4075                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  4076                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  4077                                  ; otherwise, the system has only hardfiles.
  4078                                  ;
  4079                                  ; important thing is that still, for compatibility reason, the drive letter
  4080                                  ; for the hardfiles start from "c".  so, we still need to allocate dummy bds
  4081                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  4082                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  4083                                  ; drives will get "invalid drive letter ..." message. we are going to
  4084                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  4085                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  4086                                  
  4087                                  ; check the register returned by the equipment determination interrupt
  4088                                  ; we have to handle the case of no diskettes in the system by faking
  4089                                  ; two dummy drives.
  4090                                  ;
  4091                                  ; if the register indicates that we do have floppy drives we don't need
  4092                                  ; to do anything special.
  4093                                  ;
  4094                                  ; if the register indicates that we don't have any floppy drives then
  4095                                  ; what we need to do is set the fakefloppydrv variable, change the
  4096                                  ; register to say that we do have floppy drives and then go to execute
  4097                                  ; the code which starts at notsingle. this is because we can skip the
  4098                                  ; code given below which tries to find if there are one or two drives
  4099                                  ; since we already know about this.
  4100                                  
  4101                                  		; 06/05/2019 - Retro DOS v4.0
  4102 000016A9 88C1                    		mov	cl, al
  4103                                  
  4104                                  		; 12/12/2022
  4105 000016AB A801                    		test	al, 1
  4106                                  		;test	ax, 1		; floppy drives	present	?
  4107 000016AD 751F                    		jnz	short normalfloppydrv ;	yes.
  4108                                  
  4109                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  4110                                  ; whether it is an old ROM BIOS or a new one
  4111                                  ;
  4112                                  ; WARNING !!!
  4113                                  ;
  4114                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  4115                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  4116                                  
  4117                                  		; 20/12/2022
  4118                                  		;push	ax
  4119                                  		;push	bx
  4120                                  		;push	cx
  4121 000016AF 52                      		push	dx
  4122                                  		;push	di
  4123 000016B0 06                      		push	es
  4124 000016B1 B408                    		mov	ah, 8
  4125 000016B3 B200                    		mov	dl, 0
  4126 000016B5 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4127                                  					; DL = drive number
  4128                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4129                                  					; DL = number of consecutive drives
  4130                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4131 000016B7 7202                    		jc	short _gdskp_error
  4132                                  		;;mov	[cs:flp_drvs], dl
  4133                                  		; 20/12/2022
  4134                                  		; ds = cs
  4135                                  		;mov	[flp_drvs], dl
  4136 000016B9 88D1                    		mov	cl, dl
  4137                                  _gdskp_error:	
  4138                                  		; 20/12/2022			
  4139 000016BB 07                      		pop	es
  4140                                  		;pop	di
  4141 000016BC 5A                      		pop	dx
  4142                                  		;pop	cx
  4143                                  		;pop	bx
  4144                                  		;pop	ax
  4145                                  		
  4146 000016BD 720F                    		jc	short normalfloppydrv
  4147                                  					; if error it is an old ROM BIOS
  4148                                  					; so, lets assume that ROM BIOS lied
  4149                                  		; 20/12/2022
  4150                                  		; ds = cs
  4151                                  		;cmp	byte [flp_drvs], 0
  4152                                  		;;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  4153                                  		;jz	short _set_fake_flpdrv
  4154                                  		;;mov	al, [cs:flp_drvs]
  4155                                  		;mov	al, [flp_drvs]
  4156                                  		;;dec	al		; make it zero based
  4157                                  		;; 18/12/2022
  4158                                  		;dec	ax
  4159                                  		;jmp	short got_num_flp_drvs
  4160                                  		
  4161                                  		; 20/12/2022
  4162 000016BF 08C9                    		or	cl, cl ; [flp_drvs]
  4163 000016C1 7403                    		jz	short _set_fake_flpdrv		
  4164 000016C3 49                      		dec	cx	
  4165 000016C4 EB0C                    		jmp	short got_num_flp_drvs
  4166                                  ; ----------------------------------------------------------------------------
  4167                                  
  4168                                  _set_fake_flpdrv:
  4169                                  		;20/12/2022
  4170                                  		; ds = cs
  4171 000016C6 FEC1                    		inc	cl	; cl = 1
  4172 000016C8 880E[8F15]              		mov	[fakefloppydrv], cl ; 1
  4173                                  		;mov	byte [fakefloppydrv], 1		
  4174                                  		;;mov	byte [cs:fakefloppydrv], 1
  4175                                  					; we don't have any floppy drives.
  4176                                  		; 20/12/2022
  4177                                  		;mov	ax, 1
  4178 000016CC EB0A                    		jmp	short settwodrive ; well then set it for two drives!
  4179                                  ; ----------------------------------------------------------------------------
  4180                                  
  4181                                  normalfloppydrv:			; yes, bit 0 is 1.			
  4182                                  		; 20/12/2022
  4183                                  		;rol	al, 1		; there	exist floppy drives.
  4184                                  		;rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  4185 000016CE D0C1                    		rol	cl, 1
  4186 000016D0 D0C1                    		rol	cl, 1
  4187                                  got_num_flp_drvs:			
  4188                                  		;;and	ax, 3		; only look at bits 0 &	1
  4189                                  		; 18/12/2022
  4190                                  		;and	al, 3
  4191                                  		; 20/12/2022
  4192 000016D2 80E103                  		and	cl, 3
  4193 000016D5 7505                    		jnz	short notsingle	; zero means single drive system
  4194                                  		; 20/12/2022
  4195 000016D7 41                      		inc	cx
  4196                                  		;inc	ax		; pretend it's a two drive system
  4197                                  settwodrive:				; set this to two fakedrives
  4198                                  		; 20/12/2022
  4199                                  		; ds = cs
  4200 000016D8 FE06[7800]              		inc	byte [single]
  4201                                  		;inc	byte [cs:single] ; remember this
  4202                                  notsingle:	
  4203                                  		; 20/12/2022			
  4204                                  		;inc	ax		; ax has number	of drives, 2-4
  4205                                  		;			; is also 0 indexed boot drive if we
  4206                                  		;			; booted off hard file
  4207                                  		;mov	cl, al		; ch is	fat id,	cl # floppies
  4208                                  		; 20/12/2022
  4209 000016DC FEC1                    		inc	cl	; cl >= 2
  4210                                  
  4211                                  ; 16/10/2022
  4212                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  4213                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  4214                                  BRKADR	 EQU	1BH * 4	; 6CH, 1BH break vector address
  4215                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  4216                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  4217                                  SEC9	EQU	522h	; address of disk parameters
  4218                                  CHROUT	EQU	29h
  4219                                  LSTDRV	EQU     504h
  4220                                  
  4221                                  ; determine whether we booted from floppy or hard disk...
  4222                                  
  4223                                  		; 20/12/2022
  4224 000016DE 88C8                    		mov	al, cl	; 26/05/2019
  4225                                  
  4226 000016E0 F6C280                  		test	dl, 80h		; boot from floppy ?
  4227 000016E3 7502                    		jnz	short gothrd	; no.
  4228 000016E5 31C0                    		xor	ax, ax		; indicate boot	from drive a
  4229                                  gothrd:					
  4230                                  
  4231                                  ; MSDOS 6.0
  4232                                  ;   ax = 0-based drive we booted from
  4233                                  ;   bios_l, bios_h set.
  4234                                  ;   cl = number of floppies including fake one
  4235                                  ;   ch = media byte
  4236                                  
  4237                                  ; Retro DOS 4.0 - 27/12/2018 
  4238                                  ;  (from Retro DOS v2.0 boot sector)
  4239                                  ;   dl = int 13 drive number we booted from
  4240                                  ;   dh = media byte
  4241                                  
  4242                                  		; 20/12/2022
  4243 000016E7 88F5                    		mov	ch, dh		; 01/07/2018
  4244                                  
  4245                                  		; cl = number of floppies
  4246                                  		; ch = media byte
  4247                                  
  4248                                  		; set up local stack
  4249                                  
  4250                                  		; 20/12/2022
  4251                                  		;xor	dx, dx		; ax = 0-based drive we	booted from
  4252                                  					; bios_l, bios_h set.
  4253                                  					; cl = number of floppies including fake one
  4254                                  					; ch = media byte
  4255                                  		; 20/12/2022
  4256                                  		; es = ds = cs
  4257                                  		; ss = 0
  4258                                  		; sp = 700h
  4259                                  
  4260                                  		; 20/12/2022
  4261                                  		;cli
  4262                                  		;mov	ss, dx		; set stack segment and stack pointer
  4263                                  		;mov	sp, 700h
  4264                                  		;sti
  4265                                  
  4266 000016E9 51                      		push	cx ; (***) 	; save number of floppies and media byte
  4267                                  		
  4268 000016EA 88EC                    		mov	ah, ch		; FAT ID to AH
  4269 000016EC 50                      		push	ax ; (**)	; save boot drive number and media byte
  4270                                  		
  4271                                  ; let model_byte, secondary_model_byte be set here!!!
  4272                                  
  4273 000016ED B4C0                    		mov	ah, 0C0h
  4274 000016EF CD15                    		int	15h	; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  4275 000016F1 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  4276 000016F3 80FC00                  		cmp	ah, 0
  4277 000016F6 7510                    		jnz	short no_rom_system_conf
  4278                                  
  4279                                  ;		; 20/12/2022
  4280                                  ;		; (Programmer's Guide to the AMIBIOS, page 268)
  4281                                  ;		; (https://stanislavs.org/helppc/int_15-c0.html)
  4282                                  ;
  4283                                  ;		INT 15h, ah = C0h - Return System Configuration Parameters (PS/2 only)
  4284                                  ;
  4285                                  ;		on return:
  4286                                  ;		CF = 0 if successful
  4287                                  ;		   = 1 if error
  4288                                  ;		AH = when CF set, 80h for PC & PCjr, 86h for XT
  4289                                  ;	     	    (BIOS after 11/8/82) and AT (BIOS after 1/10/84)
  4290                                  ;
  4291                                  ;		ES:BX = pointer to system descriptor table in ROM of the format:
  4292                                  ;
  4293                                  ;		Offset Size	     Description
  4294                                  ;
  4295                                  ;		  00   word   length of descriptor (8 minimum)
  4296                                  ;		  02   byte   model byte (same as F000:FFFE, not reliable)
  4297                                  ;		  03   byte   secondary model byte
  4298                                  ;		  04   byte   BIOS revision level (zero based)
  4299                                  ;		  05   byte   feature information, see below
  4300                                  ;		  06   dword  reserved
  4301                                  
  4302                                  		; 20/12/2022
  4303                                  		; ds = cs
  4304 000016F8 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  4305 000016FC A2[3606]                		mov	[model_byte], al
  4306                                  		;mov	[cs:model_byte], al
  4307                                  					; get/save model byte
  4308 000016FF 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  4309 00001703 A2[3706]                		mov	[secondary_model_byte], al
  4310                                  		;mov	[cs:secondary_model_byte], al
  4311                                  					; get/save secondary model byte
  4312 00001706 EB0C                    		jmp	short turn_timer_on
  4313                                  ;-----------------------------------------------------------------------------
  4314                                  
  4315                                  no_rom_system_conf:			
  4316 00001708 BEFFFF                  		mov	si, 0FFFFh
  4317 0000170B 8EC6                    		mov	es, si
  4318                                  		; 20/12/2022
  4319 0000170D 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  4320 00001711 A2[3606]                		mov	[model_byte], al
  4321                                  		;mov	[cs:model_byte], al ; save model byte
  4322                                  turn_timer_on:				
  4323 00001714 B020                    		mov	al, 20h	; ' '   ; turn on the timer
  4324 00001716 E620                    		out	20h, al		; Interrupt controller,	8259A.
  4325                                  					; AKPORT
  4326                                  
  4327                                  ; some olivetti m24 machines have an 8530 serial communications
  4328                                  ; chip installed at io address 50h and 52h. if we're running
  4329                                  ; on one of those, we must inhibit the normal aux port initialization
  4330                                  
  4331                                  		; 20/12/2022
  4332                                  		; ds = cs
  4333 00001718 803E[3606]00            		cmp	byte [model_byte], 0
  4334                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  4335 0000171D 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  4336                                  					; (except olivetti m24)
  4337 0000171F E466                    		in	al, 66h		; is 8530 installed?
  4338 00001721 A820                    		test	al, 20h
  4339 00001723 740A                    		jz	short not_olivetti_m24 ; we're done if not
  4340 00001725 B00F                    		mov	al, 0Fh		; double check
  4341 00001727 E650                    		out	50h, al
  4342 00001729 E450                    		in	al, 50h
  4343 0000172B A801                    		test	al, 1		; this test was	copied from olivetti
  4344 0000172D 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  4345                                  
  4346                                  not_olivetti_m24:
  4347 0000172F B003                    		mov	al, 3		; init com4
  4348 00001731 E83108                  		call	aux_init
  4349 00001734 B002                    		mov	al, 2		; init com3
  4350 00001736 E82C08                  		call	aux_init
  4351 00001739 B001                    		mov	al, 1		; init com2
  4352 0000173B E82708                  		call	aux_init
  4353 0000173E 30C0                    		xor	al, al		; init com1
  4354 00001740 E82208                  		call	aux_init
  4355                                  
  4356                                  skip_aux_port_init:			
  4357 00001743 B002                    		mov	al, 2		; init lpt3
  4358 00001745 E81508                  		call	print_init
  4359 00001748 B001                    		mov	al, 1		; init lpt2
  4360 0000174A E81008                  		call	print_init
  4361 0000174D 30C0                    		xor	al, al		; init lpt1
  4362 0000174F E80B08                  		call	print_init
  4363                                  
  4364 00001752 31D2                    		xor	dx, dx	; 0
  4365 00001754 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  4366 00001756 8EC2                    		mov	es, dx
  4367 00001758 31C0                    		xor	ax, ax
  4368                                  		; 16/10/2022
  4369 0000175A BF3405                  		mov	di, INITSPOT	; 0534h
  4370                                  		;mov	di, 534h	; INITSPOT (0000h:0534h)
  4371                                  					; IBM wants 4 zeros here
  4372 0000175D AB                      		stosw
  4373 0000175E AB                      		stosw
  4374 0000175F 8CC8                    		mov	ax, cs		; fetch	segment
  4375 00001761 C7066C00[C906]          		mov	word [BRKADR], cbreak
  4376                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  4377                                  					; break	entry point
  4378 00001767 A36E00                  		mov	[BRKADR+2], ax		
  4379                                  		;mov	ds:6Eh,	ax	; vector for break
  4380 0000176A C706A400[3D07]          		mov	word [CHROUT*4], outchr
  4381                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  4382 00001770 A3A600                  		mov	[CHROUT*4+2], ax
  4383                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  4384                                  
  4385 00001773 BF0400                  		mov	di, 4
  4386 00001776 BB[CF06]                		mov	bx, intret ; 19/10/2022
  4387                                  		;mov	bx, offset intret ; intret (cs:intret)
  4388                                  					; will initialize rest of interrupts
  4389 00001779 93                      		xchg	ax, bx
  4390 0000177A AB                      		stosw			; location 4
  4391 0000177B 93                      		xchg	ax, bx		; cs:
  4392 0000177C AB                      		stosw			; int 1	; location 6
  4393 0000177D 83C704                  		add	di, 4
  4394 00001780 93                      		xchg	ax, bx
  4395 00001781 AB                      		stosw			; location 12
  4396 00001782 93                      		xchg	ax, bx		; cs:
  4397 00001783 AB                      		stosw			; int 3	; location 14
  4398 00001784 93                      		xchg	ax, bx
  4399 00001785 AB                      		stosw			; location 16
  4400 00001786 93                      		xchg	ax, bx		; cs:
  4401 00001787 AB                      		stosw			; int 4	; location 18
  4402                                  
  4403                                  
  4404                                  ;		; 20/12/2022
  4405                                  ;		; (https://stanislavs.org/helppc/bios_data_area.html)
  4406                                  ;		Address Size	   Description	 (BIOS/DOS Data Area)
  4407                                  ;	
  4408                                  ;		50:00	byte	Print screen status byte
  4409                                  ;				 00 = PrtSc not active,
  4410                                  ;				 01 = PrtSc in progress
  4411                                  ;				 FF = error
  4412                                  ;		50:01  3 bytes	Used by BASIC
  4413                                  ;		50:04	byte	DOS single diskette mode flag, 0=A:, 1=B:
  4414                                  ;		50:05  10bytes	POST work area
  4415                                  ;		50:0F	byte	BASIC shell flag; set to 2 if current shell
  4416                                  ;		50:10	word	BASICs default DS value (DEF SEG)
  4417                                  ;		50:12	dword	Pointer to BASIC INT 1C interrupt handler
  4418                                  ;		50:16	dword	Pointer to BASIC INT 23 interrupt handler
  4419                                  ;		50:1A	dword	Pointer to BASIC INT 24 disk error handler
  4420                                  ;		50:20	word	DOS dynamic storage
  4421                                  ;		50:22  14bytes	DOS diskette initialization table (INT 1E)
  4422                                  ;		50:30	4bytes	MODE command
  4423                                  ;		70:00		I/O drivers from IO.SYS/IBMBIO.COM
  4424                                  
  4425 00001788 89160005                		mov	[0500h], dx ; 0
  4426                                  		;mov	ds:500h, dx	; set print screen & break = 0
  4427 0000178C 89160405                		mov	[LSTDRV], dx	; [0504h]
  4428                                  		;mov	ds:504h, dx	; clean	out last drive spec
  4429                                  
  4430                                  ; we need to initialize the cs:motorstartup variable from the disk
  4431                                  ; parameter table at sec9. the offsets in this table are defined in
  4432                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  4433                                  
  4434 00001790 A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  4435                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  4436                                  					; [522h+0Ah]
  4437                                  		; 20/12/2022
  4438                                  		; ds = 0
  4439                                  
  4440 00001793 2EA2[2601]              		mov	[cs:motorstartup], al
  4441 00001797 2E803E[3606]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  4442 0000179D 720B                    		jb	short no_diddle	; no
  4443 0000179F C7062B050F02            		mov	word [SEC9+09h], 20Fh
  4444                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  4445                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  4446 000017A5 C6062205DF              		mov	byte [SEC9+0], 0DFh
  4447                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  4448                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  4449                                  no_diddle:				
  4450 000017AA CD12                    		int	12h		; MEMORY SIZE -
  4451                                  					; Return: AX = number of contiguous 1K blocks of memory
  4452 000017AC B106                    		mov	cl, 6
  4453 000017AE D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  4454                                  		
  4455                                  		; 20/12/2022
  4456                                  		; 03/07/2018 - 27/12/2018
  4457                                  		;pop	cx ; (**)
  4458                                  		;mov	[cs:drvfat], cx
  4459                                  		
  4460 000017B0 50                      		push	ax ; (*)	; save real top	of memory
  4461                                  
  4462                                  		; 27/12/2018 - (MSDOS 6.0, 6.21)
  4463                                  
  4464                                  ;M068 - BEGIN
  4465                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  4466                                  
  4467                                  		; 20/12/2022
  4468                                  		; ds = 0
  4469                                  
  4470                                  		;push	ds
  4471                                  		;push	bx		; pushes not required but since this
  4472                                  					; happens to be a last minute change
  4473                                  					; & since it is only init code.
  4474                                  		;xor	bx, bx
  4475                                  		;mov	ds, bx
  4476                                  		
  4477                                  		;mov	bx, ds:0BCh	; [2Fh*4]
  4478 000017B1 8B1EBC00                		mov	bx, [2Fh*4]
  4479                                  		;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  4480 000017B5 8E1EBE00                		mov	ds, [2Fh*4+2]
  4481 000017B9 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  4482                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  4483 000017BE 750F                    		jnz	short SkipRPL
  4484 000017C0 807F054C                		cmp	byte [bx+5], 'L'
  4485                                  		;cmp	byte ptr [bx+5], 'L'
  4486 000017C4 7509                    		jnz	short SkipRPL
  4487 000017C6 89C2                    		mov	dx, ax		; get TOM into DX
  4488 000017C8 B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  4489 000017CB CD2F                    		int	2Fh		; Get new TOM from any RPL
  4490 000017CD 89D0                    		mov	ax, dx
  4491                                  SkipRPL:	
  4492                                  		; 20/12/2022		
  4493                                  		;pop	bx
  4494                                  		;pop	ds
  4495                                  
  4496                                  ;M068 - END
  4497                                  		; 20/12/2022
  4498                                  		; 27/12/2018
  4499 000017CF 0E                      		push	cs
  4500 000017D0 1F                      		pop	ds
  4501                                  
  4502                                  		; 18/03/2019 - Retro DOS v4.0
  4503                                  		;sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  4504                                  		;mov	[cs:fatloc], ax	; location to read fat
  4505                                  
  4506                                  		; 01/07/2018
  4507                                  		; 08/04/2018
  4508                                  		; 28/03/2018
  4509                                  		; MSDOS 6.0 - MSINIT.ASM, 1991
  4510 000017D1 83E840                  		sub	ax, 64
  4511 000017D4 A3[8915]                		mov	[init_bootseg], ax ; 20/12/2022
  4512                                  		;mov	[cs:init_bootseg], ax
  4513                                  
  4514                                  		; 27/12/2018 - Retro DOS v4.0
  4515                                  		;pop	ax ; (*)	; get back real top of memory
  4516 000017D7 5A                      		pop	dx ; (*)
  4517                                  
  4518                                  		; 20/12/2022
  4519                                  		; 27/12/2018
  4520 000017D8 59                      		pop	cx ; (**)
  4521 000017D9 890E[8615]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  4522                                  
  4523                                  		; 20/12/2022
  4524                                  
  4525                                  		;mov	dx, 46Dh	; SYSINIT segment
  4526 000017DD BA3104                  		mov	dx, SYSINITSEG	; 17/10/2022
  4527 000017E0 8EDA                    		mov	ds, dx
  4528                                  
  4529                                  ; set pointer to resident device driver chain
  4530                                  
  4531                                  		; 17/10/2022
  4532 000017E2 C706[7302][2300]        		mov	word [DEVICELIST], res_dev_list
  4533                                  		;mov	word [273h], res_dev_list
  4534                                  		;;mov	word ptr ds:273h, offset res_dev_list
  4535                                  					; [SYSINIT+DEVICE_LIST]
  4536 000017E8 8C0E[7502]              		mov	[DEVICELIST+2], cs		
  4537                                  		;mov	[275h], cs
  4538                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  4539                                  
  4540 000017EC A3[9202]                		mov	[MEMORYSIZE], ax
  4541                                  		;mov	[292h], ax
  4542                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  4543                                  
  4544 000017EF FEC1                    		inc	cl
  4545 000017F1 880E[9602]              		mov	[DEFAULTDRIVE], cl
  4546                                  		;mov	[296h], cl
  4547                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  4548                                  
  4549 000017F5 C706[7102]1209          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  4550                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  4551                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  4552                                  					; dos_load_seg
  4553                                  
  4554                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  4555                                  ; printer cards. we initialize this value to point to an iret only if
  4556                                  ;
  4557                                  ; 1) the original segment points to storage inside valid ram.
  4558                                  ;
  4559                                  ; 2) the original segment is 0F000:xxxx
  4560                                  
  4561                                  		;;mov	ax, 46Dh	; SYSINIT segment
  4562                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  4563                                  		;mov	es, ax
  4564                                  		; 20/12/2022
  4565                                  		;push	ds ; SYSINITSEG
  4566                                  		;pop	es
  4567 000017FB 8EC2                    		mov	es, dx ; SYSINITSEG
  4568 000017FD 31C0                    		xor	ax, ax ; 0
  4569 000017FF 8ED8                    		mov	ds, ax		; segment 0
  4570                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  4571 00001801 A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  4572                                  		; 18/10/2022
  4573 00001804 263B06[9202]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  4574                                  		;cmp	ax, es:292h	; [ES:MEMORY_SIZE]  ; (condition 1)
  4575 00001809 7605                    		jbe	short resetintf
  4576 0000180B 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  4577 0000180E 750A                    		jnz	short keepintf
  4578                                  resetintf:	
  4579 00001810 C7063C00[CF06]          		mov	word [0Fh*4], intret			
  4580                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  4581 00001816 8C0E3E00                		mov	word [0Fh*4+2], cs
  4582                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  4583                                  keepintf:				
  4584                                  ; end important
  4585                                  
  4586                                  ; 17/10/2022
  4587                                  ; 28/12/2018 - Retro DOS v4.0
  4588                                  
  4589                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  4590                                  ;
  4591                                  ; we will check if the system has ibm extended keyboard by
  4592                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  4593                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  4594                                  ; for the extended keyboard function. use cx as the temporary register.
  4595                                  
  4596                                  		; 20/12/2022
  4597                                  		; ds = 0
  4598                                  		;xor	cx, cx
  4599                                  		;mov	ds, cx
  4600                                  
  4601 0000181A 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  4602                                  
  4603                                  		; 20/12/2022
  4604                                  		; 20/03/2019
  4605 0000181E 0E                      		push	cs
  4606 0000181F 1F                      		pop	ds
  4607                                  
  4608                                  		;test	cl, 00010000b ; 10h
  4609 00001820 F6C110                  		test	cl, 10h		; extended keyboard ?
  4610 00001823 740A                    		jz	short org_key	; no, original keyboard
  4611                                  
  4612                                  		; 20/12/2022
  4613                                  		;  ds = cs
  4614 00001825 C606[E504]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  4615 0000182A C606[E604]11            		mov	byte [keysts_func], 11h
  4616                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  4617                                  		;mov	byte [cs:keysts_func], 11h
  4618                                  					; change for extended keyboard functions
  4619                                  org_key:
  4620                                  
  4621                                  ; 02/06/2018 - Retro DOS v3.0
  4622                                  
  4623                                  ;**************************************************************
  4624                                  ;	will initialize the number of drives
  4625                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  4626                                  ;	the indications are as follows:
  4627                                  ;
  4628                                  ;	bits	7	6	drives
  4629                                  ;		0	0	1
  4630                                  ;		0	1	2
  4631                                  ;		1	0	3
  4632                                  ;		1	1	4
  4633                                  ;**************************************************************
  4634                                  		
  4635                                  		; 20/12/2022
  4636                                  		; ds = cs		
  4637                                  		;push	cs
  4638                                  		;pop	ds
  4639                                  		; 21/12/2022
  4640                                  		;push	cs
  4641                                  		;pop	es
  4642                                  
  4643 0000182F E87B08                  		call	cmos_clock_read	; If cmos clock	exists,
  4644                                  					; then set the system time according to	that.
  4645                                  					; also,	reset the cmos clock rate.
  4646                                  		; 18/10/2022
  4647                                  		;mov	word ptr BData_start, offset harddrv ;
  4648                                  					; set up pointer to hdrive
  4649                                  		; 02/10/2022
  4650 00001832 C706[0000][B708]        		mov	word [hdrv_pat], harddrv 
  4651                                  		
  4652                                  		; 20/12/2022
  4653                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)			
  4654 00001838 58                      		pop	ax ; (***)	; number of floppies and FAT ID
  4655 00001839 30E4                    		xor	ah, ah		; chuck	fat id byte
  4656 0000183B A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  4657 0000183E A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  4658 00001841 D1E0                    		shl	ax, 1
  4659 00001843 0106[0016]              		add	[last_dskdrv_table], ax
  4660                                  
  4661 00001847 B280                    		mov	dl, 80h
  4662 00001849 B408                    		mov	ah, 8
  4663 0000184B CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4664                                  					; DL = drive number
  4665                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4666                                  					; DL = number of consecutive drives
  4667                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4668 0000184D 7204                    		jc	short enddrv
  4669 0000184F 8816[FF15]              		mov	[hnum], dl	; save number of hard disk drives
  4670                                  enddrv:
  4671                                  		; 21/12/2022
  4672 00001853 0E                      		push	cs
  4673 00001854 07                      		pop	es
  4674                                  
  4675                                  ; scan the list of drives to determine their type. we have three flavors of
  4676                                  ; diskette drives:
  4677                                  ;
  4678                                  ;   48tpi drives    we do nothing special for them
  4679                                  ;   96tpi drives    mark the fact that they have changeline support.
  4680                                  ;   3.5"  drives    mark changeline support and small.
  4681                                  ;
  4682                                  ; the following code uses registers for certain values:
  4683                                  ;
  4684                                  ;   dl - physical drive
  4685                                  ;   ds:di - points to current bds
  4686                                  ;   cx - flag bits for bds
  4687                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  4688                                  					
  4689 00001855 30D2                    		xor	dl, dl
  4690                                  
  4691                                  		; 20/12/2022
  4692                                  		; ds = cs
  4693                                  		; 17/06/2018		 
  4694                                  		;push	cs
  4695                                  		;pop	ds
  4696                                  
  4697 00001857 C606[2C01]09            		mov	byte [eot], 9
  4698 0000185C BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  4699                                  					; to set aside two bdss	for the	two fake floppy	drives
  4700                                  
  4701                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  4702                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  4703                                  
  4704                                  ; check to see if we are faking floppy drives. if not we don't
  4705                                  ; do anything special. if we are faking floppy drives we need
  4706                                  ; to set aside two bdss for the two fake floppy drives. we
  4707                                  ; don't need to initalise any fields though. so starting at start_bds
  4708                                  ; use the link field in the bds structure to go to the second bds
  4709                                  ; in the list and initalise it's link field to -1 to set the end of
  4710                                  ; the list. then jump to the routine at dohard to allocate/initialise
  4711                                  ; the bds for harddrives.
  4712                                  
  4713 0000185F 803E[8F15]01            		cmp	byte [fakefloppydrv], 1
  4714 00001864 750B                    		jnz	short loop_drive
  4715 00001866 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4716                                  					; di <-	first bds link
  4717 00001868 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4718                                  					; di <-	second bds link
  4719 0000186A C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  4720 0000186E E90F01                  		jmp	dohard		; allocate/initialise bds for harddrives
  4721                                  ;-----------------------------------------------------------------------------
  4722                                  
  4723                                  loop_drive:				
  4724 00001871 3A16[7500]              		cmp	dl, [drvmax]
  4725 00001875 7203                    		jb	short got_more
  4726 00001877 E90201                  		jmp	done_drives
  4727                                  ;-----------------------------------------------------------------------------
  4728                                  
  4729                                  got_more:				
  4730 0000187A 31C9                    		xor	cx, cx		; zero all flags
  4731 0000187C 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4732                                  					; get next bds
  4733 0000187E B600                    		mov	dh, 0 ; ff48tpi
  4734                                  					; set form factor to 48	tpi
  4735 00001880 C606[8E15]28            		mov	byte [num_cyln], 40 ; 40 tracks per side
  4736                                  		
  4737                                  		; 20/12/2022
  4738                                  		;push	ds ; 11/05/2019	
  4739 00001885 57                      		push	di
  4740 00001886 52                      		push	dx
  4741 00001887 51                      		push	cx
  4742 00001888 06                      		push	es ; ((*)) ; 20/12/2022	
  4743                                  		
  4744 00001889 B408                    		mov	ah, 8
  4745 0000188B CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4746                                  					; DL = drive number
  4747                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4748                                  					; DL = number of consecutive drives
  4749                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4750 0000188D 7276                    		jc	short noparmsfromrom
  4751                                  
  4752                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  4753                                  ; in this case, we are going to put bogus informations to bds table.
  4754                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  4755                                  ; they are calculated at the later time. this is just for the diagnostic
  4756                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  4757                                  ; this should only happen with drive b.
  4758                                  
  4759 0000188F 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  4760 00001892 7505                    		jnz	short pfr_ok
  4761                                  
  4762                                  		;mov	ch, 39		; rom gave wrong info.
  4763                                  		;mov	cl, 9		; let's default to 360k.
  4764                                  		; 20/12/2022
  4765 00001894 B90927                  		mov	cx, 2709h
  4766                                  
  4767 00001897 B601                    		mov	dh, 1
  4768                                  pfr_ok:					
  4769 00001899 FEC6                    		inc	dh		; make number of heads 1-based
  4770 0000189B FEC5                    		inc	ch		; make number of cylinders 1-based
  4771 0000189D 8836[8C15]              		mov	[num_heads], dh	; save parms returned by rom
  4772 000018A1 80E13F                  		and	cl, 3Fh	; 00111111b ; extract sectors/track
  4773 000018A4 880E[8D15]              		mov	[sec_trk], cl
  4774 000018A8 882E[8E15]              		mov	[num_cyln], ch	; assume less than 256 cylinders!!
  4775                                  
  4776                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  4777                                  
  4778 000018AC 3A0E[2C01]              		cmp	cl, [eot]	; may set carry
  4779                                  		;jbe	short eot_ok
  4780                                  		; 09/12/2022
  4781                                  		;jne	short eotok  ; wrong ! 14/08/2023
  4782                                  		; 14/08/2023
  4783 000018B0 7604                    		jbe	short eotok
  4784 000018B2 880E[2C01]              		mov	[eot], cl
  4785                                  ;eot_ok:
  4786                                  eotok:
  4787                                  		; 20/12/2022
  4788 000018B6 07                      		pop	es ; ((*)) es = cs = ds		
  4789 000018B7 59                      		pop	cx
  4790 000018B8 5A                      		pop	dx
  4791 000018B9 5F                      		pop	di
  4792                                  		;pop	ds ; 20/12/2022
  4793                                  
  4794                                  ; Check	for presence of	changeline
  4795                                  
  4796 000018BA B415                    		mov	ah, 15h
  4797 000018BC CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4798                                  					; DL = drive ID
  4799                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4800                                  					; CX:DX	= number of sectors on the media
  4801 000018BE 720D                    		jc	short changeline_done
  4802 000018C0 80FC02                  		cmp	ah, 2		; check	for presence of	changeline
  4803 000018C3 7508                    		jnz	short changeline_done
  4804                                  
  4805                                  ; we have a drive with change line support.
  4806                                  
  4807 000018C5 80C902                  		or	cl, 2		; fchangeline
  4808                                  					; signal type
  4809 000018C8 C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  4810                                  
  4811                                  ; we now try to set up the form factor for the types of media that we know
  4812                                  ; and can recognise. for the rest, we set the form factor as "other".
  4813                                  
  4814                                  changeline_done:
  4815                                  
  4816                                  ; 40 cylinders and 9 or less sec/trk, treat as 48 tpi medium.
  4817                                  			
  4818 000018CD 803E[8E15]28            		cmp	byte [num_cyln], 40
  4819 000018D2 750B                    		jnz	short try_80
  4820 000018D4 803E[8D15]09            		cmp	byte [sec_trk], 9
  4821 000018D9 7653                    		jbe	short nextdrive
  4822                                  gotother:				
  4823 000018DB B607                    		mov	dh, 7 ; ffOther ; we have a "strange" medium 
  4824 000018DD EB4F                    		jmp	short nextdrive
  4825                                  ;-----------------------------------------------------------------------------
  4826                                  
  4827                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  4828                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  4829                                  
  4830                                  try_80:					
  4831 000018DF 803E[8E15]50            		cmp	byte [num_cyln], 80
  4832 000018E4 75F5                    		jnz	short gotother
  4833 000018E6 B609                    		mov	dh, 9 ; ff288	; assume 2.88 MB drive
  4834 000018E8 803E[8D15]24            		cmp	byte [sec_trk], 36 ; is it ?
  4835 000018ED 743F                    		jz	short nextdrive	; yeah,	go update
  4836                                  
  4837                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  4838                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  4839                                  		;mov	dh, ff144
  4840                                  		;cmp	byte [sec_trk], 18
  4841                                  		;je	short nextdrive
  4842                                  
  4843 000018EF 803E[8D15]0F            		cmp	byte [sec_trk], 15
  4844 000018F4 740B                    		jz	short got96
  4845                                  		
  4846 000018F6 803E[8D15]09            		cmp	byte [sec_trk], 9
  4847 000018FB 75DE                    		jnz	short gotother
  4848                                  		
  4849 000018FD B602                    		mov	dh, 2 ; ffSmall
  4850 000018FF EB2D                    		jmp	short nextdrive
  4851                                  ; ----------------------------------------------------------------------------
  4852                                  
  4853                                  got96:					
  4854 00001901 B601                    		mov	dh, 1 ; ff96tpi
  4855 00001903 EB29                    		jmp	short nextdrive
  4856                                  ; ----------------------------------------------------------------------------
  4857                                  
  4858                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  4859                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  4860                                  
  4861                                  noparmsfromrom:				
  4862                                  		; 20/12/2022
  4863 00001905 07                      		pop	es ; ((*)) 
  4864 00001906 59                      		pop	cx
  4865 00001907 5A                      		pop	dx
  4866 00001908 5F                      		pop	di
  4867                                  		;pop	ds ; 20/12/2022
  4868                                  		
  4869 00001909 B415                    		mov	ah, 15h
  4870 0000190B CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4871                                  					; DL = drive ID
  4872                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4873                                  					; CX:DX	= number of sectors on the media
  4874 0000190D 721F                    		jc	short nextdrive
  4875                                  		
  4876 0000190F 80FC02                  		cmp	ah, 2		; is there changeline?
  4877 00001912 751A                    		jnz	short nextdrive
  4878                                  
  4879 00001914 80C902                  		or	cl, 2 ; fchangeline
  4880 00001917 C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi drives
  4881 0000191C C606[8E15]50            		mov	byte [num_cyln], 80
  4882 00001921 B601                    		mov	dh, 1 ; ff96tpi 
  4883 00001923 B00F                    		mov	al, 15
  4884 00001925 3A06[2C01]              		cmp	al, [eot]
  4885 00001929 7603                    		jbe	short nextdrive ; eot_ok2
  4886 0000192B A2[2C01]                		mov	[eot], al
  4887                                  ; ----------------------------------------------------------------------------
  4888                                  
  4889                                  ;eot_ok2:
  4890                                  nextdrive:				
  4891 0000192E 80C920                  		or	cl, 20h	; fi_own_physical
  4892                                  					; set this true	for all	drives
  4893 00001931 88D7                    		mov	bh, dl		; save int13 drive number
  4894                                  
  4895                                  ; we need to do special things if we have a single drive system and are setting
  4896                                  ; up a logical drive. it needs to have the same int13 drive number as its
  4897                                  ; counterpart, but the next drive letter. also reset ownership flag.
  4898                                  ; we detect the presence of this situation by examining the flag single for the
  4899                                  ; value 2.
  4900 00001933 803E[7800]02            		cmp	byte [single], 2
  4901 00001938 7505                    		jnz	short not_special
  4902 0000193A FECF                    		dec	bh		; int13	drive number same for logical drive
  4903 0000193C 80F120                  		xor	cl, 20h	; fi_own_physical
  4904                                  					; reset	ownership flag for logical drive
  4905                                  not_special:
  4906                                  
  4907                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  4908                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  4909                                  ; form factor is of type "ffother".
  4910                                  				
  4911 0000193F 31C0                    		xor	ax, ax		; fill BDS for drive
  4912 00001941 A0[8C15]                		mov	al, [num_heads]
  4913 00001944 894536                  		mov	[di+36h], ax	; [di+BDS.rheads]
  4914 00001947 A0[8D15]                		mov	al, [sec_trk]
  4915 0000194A 894534                  		mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  4916 0000194D 894D23                  		mov	[di+23h], cx	; [di+BDS.flags]
  4917 00001950 887522                  		mov	[di+22h], dh	; [di+BDS.formfactor]
  4918 00001953 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  4919 00001956 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  4920 00001959 8A1E[8E15]              		mov	bl, [num_cyln]
  4921 0000195D 885D25                  		mov	[di+25h], bl	; [di+BDS.cylinders]
  4922 00001960 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  4923 00001965 7511                    		jnz	short no_single
  4924 00001967 C606[7800]02            		mov	byte [single], 2 ; Don't forget we have
  4925                                  					; single drive system
  4926                                  		; 18/12/2022
  4927 0000196C 80C910                  		or	cl, 10h
  4928                                  		;or	cx, 10h	; fi_am_mult
  4929                                  					; set that this	is one of several drives
  4930 0000196F 094D23                  		or	[di+23h], cx	; [di+BDS.flags]
  4931                                  					; save flags
  4932 00001972 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4933                                  					; move to next BDS in list
  4934 00001974 FEC2                    		inc	dl		; add a	number
  4935 00001976 EBB6                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  4936                                  ; ----------------------------------------------------------------------------
  4937                                  
  4938                                  no_single:				
  4939                                  		;inc	dl
  4940                                  		; 18/12/2022
  4941 00001978 42                      		inc	dx
  4942 00001979 E9F5FE                  		jmp	loop_drive
  4943                                  ; ----------------------------------------------------------------------------
  4944                                  
  4945                                  done_drives:	
  4946                                  		;mov	word [di+BDS.link], -1
  4947 0000197C C705FFFF                		mov	word [di], -1	; set link to null
  4948                                  
  4949                                  ; set up all the hard drives in	the system
  4950                                  
  4951                                  		; 20/12/2022
  4952                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  4953                                  dohard:					
  4954 00001980 8A36[FF15]              		mov	dh, [hnum]
  4955 00001984 08F6                    		or	dh, dh		; done if no hardfiles
  4956 00001986 745B                    		jz	short static_configure
  4957 00001988 B280                    		mov	dl, 80h
  4958                                  dohard1:				
  4959 0000198A 52                      		push	dx
  4960 0000198B 8B3E[0216]              		mov	di, [end_of_bdss]
  4961 0000198F 8A1E[7500]              		mov	bl, [drvmax]
  4962 00001993 B700                    		mov	bh, 0		; first	primary	partition (or active)
  4963 00001995 E8A701                  		call	sethard
  4964 00001998 7208                    		jb	short hardfile_err
  4965 0000199A E8C606                  		call	dmax_check	; error	if already 26 drives
  4966 0000199D 7303                    		jnb	short hardfile_err
  4967 0000199F E8D606                  		call	xinstall_bds	; insert new bds into linked list
  4968                                  hardfile_err:				
  4969 000019A2 5A                      		pop	dx
  4970 000019A3 FEC2                    		inc	dl		; next hard drive
  4971 000019A5 FECE                    		dec	dh
  4972 000019A7 75E1                    		jnz	short dohard1
  4973                                  
  4974                                  ; end of physical drive	initialization
  4975                                  
  4976                                  ; *** do not change the position of the following statement.
  4977                                  ; *** domini routine will use [drvmax] value for the start of the logical
  4978                                  ; *** drive number of mini disk(s).
  4979                                  					
  4980 000019A9 E8C205                  		call	domini		; for setting up mini disks, if found
  4981                                  
  4982                                  ; -- begin added section
  4983                                  
  4984 000019AC 8A36[FF15]              		mov	dh, [hnum]	; we already know this is >0
  4985 000019B0 B280                    		mov	dl, 80h
  4986                                  dohardx1:				
  4987 000019B2 B701                    		mov	bh, 1		; do all subsequent primary partitions
  4988                                  dohardx2:				
  4989 000019B4 52                      		push	dx
  4990 000019B5 53                      		push	bx
  4991 000019B6 8B3E[0216]              		mov	di, [end_of_bdss]
  4992 000019BA 8A1E[7500]              		mov	bl, [drvmax]
  4993 000019BE E87E01                  		call	sethard
  4994 000019C1 720E                    		jb	short dohardx4	; move to next hardfile if error
  4995 000019C3 E89D06                  		call	dmax_check	; make sure <=26 drives
  4996 000019C6 7309                    		jnb	short dohardx4	; skip if error
  4997 000019C8 E8AD06                  		call	xinstall_bds	; insert new bds into linked list
  4998 000019CB 5B                      		pop	bx		; get partition number
  4999 000019CC 5A                      		pop	dx		; restore physical drive counts
  5000 000019CD FEC7                    		inc	bh
  5001 000019CF EBE3                    		jmp	short dohardx2	; keep looping until we fail
  5002                                  ; ----------------------------------------------------------------------------
  5003                                  
  5004                                  dohardx4:				
  5005 000019D1 5B                      		pop	bx		; unjunk partition number from stack
  5006 000019D2 5A                      		pop	dx		; restore physical drive counts
  5007 000019D3 FEC2                    		inc	dl		; next hard drive
  5008 000019D5 FECE                    		dec	dh
  5009 000019D7 75D9                    		jnz	short dohardx1
  5010                                  
  5011                                  ; -- end changed section
  5012                                  
  5013                                  ;******************************************************************************
  5014                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  5015                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  5016                                  ; than two diskette drives
  5017                                  ;
  5018                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  5019                                  ;		as usual and then rescan the bds chain to adjust the  drive
  5020                                  ;		letters. to do this, scan for disk drives and assign logical
  5021                                  ;		drive number starting from 2 and then rescan diskette drives
  5022                                  ;		and assign next to the last logical drive number of last disk
  5023                                  ;		drive to the 3rd and 4th diskette drives.
  5024                                  ;******************************************************************************
  5025                                  
  5026 000019D9 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  5027                                  		;jbe	short static_configure ; no - no need for remapping
  5028 000019DE 7603                    		jbe	short no_remap
  5029 000019E0 E8D800                  		call	remap		; remap	bds chain to adjust driver letters
  5030                                  no_remap:
  5031                                  
  5032                                  ; End of drive initialization.
  5033                                  
  5034                                  ; ----------------------------------------------------------------------------
  5035                                  
  5036                                  ;we now decide, based on the configurations available so far, what
  5037                                  ;code or data we need to keep as a stay resident code. the following table
  5038                                  ;shows the configurations under consideration. they are listed in the order
  5039                                  ;of their current position memory.
  5040                                  ;
  5041                                  ;configuration will be done in two ways:
  5042                                  ;
  5043                                  ;first, we are going to set "static configuration". static configuration will
  5044                                  ;consider from basic configuration to endof96tpi configuration. the result
  5045                                  ;of static configuration will be the address the dynamic configuration will
  5046                                  ;use to start with.
  5047                                  ;
  5048                                  ;secondly, "dynamic configuration" will be performed. dynamic configuration
  5049                                  ;involves possible relocation of code or data. dynamic configuration routine
  5050                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  5051                                  ;code individually. after these operation, [dosdatasg] will be set.
  5052                                  ;this will be the place sysinit routine will relocate msdos module for good.
  5053                                  
  5054                                  ; -- begin changed section
  5055                                  ;
  5056                                  ;   1.	 basic configuration for msbio (endfloppy)
  5057                                  ;   2.   end96tpi	; a system that supports "change line error"
  5058                                  ;   3.	 end of bdss	; end of bdss for hard disks
  5059                                  ;   4.	 endatrom	;some of at rom fix module.
  5060                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  5061                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  5062                                  ;
  5063                                  
  5064                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  5065                                  
  5066                                  static_configure:			
  5067 000019E3 8B3E[0216]              		mov	di, [end_of_bdss]
  5068 000019E7 81FF[B808]              		cmp	di, bdss	; 19/10/2022
  5069                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  5070 000019EB 750D                    		jnz	short dynamic_configure	; that's the end, then
  5071                                  		; 18/10/2022
  5072 000019ED BF[B808]                		mov	di, end96tpi
  5073                                  		;mov	di, offset harddrv ; end96tpi
  5074                                  					; keep everything up to end96tpi
  5075 000019F0 803E[7700]00            		cmp	byte [fhave96], 0
  5076 000019F5 7503                    		jnz	short dynamic_configure
  5077                                  		
  5078 000019F7 BF[9D08]                		mov	di, endfloppy
  5079                                  dynamic_configure:
  5080                                  		; 20/12/2022
  5081                                  		;push	cs
  5082                                  		;pop	es
  5083                                  		
  5084 000019FA FC                      		cld			; clear direction
  5085                                  
  5086                                  ; -- end changed section
  5087                                  
  5088                                  		; 20/12/2022
  5089                                  		; ds = cs <> es
  5090                                  		; ss = 0
  5091                                  		; sp = 700h
  5092                                  
  5093 000019FB 803E[3606]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  5094 00001A00 7577                    		jnz	short checkcmosclock
  5095 00001A02 803E[FF15]00            		cmp	byte [hnum], 0	; No hard file?
  5096 00001A07 7470                    		jz	short checkcmosclock
  5097 00001A09 97                      		xchg	ax, di		; save allocation pointer in ax
  5098 00001A0A BE00F0                  		mov	si, 0F000h
  5099 00001A0D 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  5100 00001A0F BE[0816]                		mov	si, bios_date	; "01/10/84"
  5101 00001A12 BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  5102 00001A15 B90900                  		mov	cx, 9		; bdate_l
  5103                                  					; Only patch ROM for bios 01/10/84
  5104 00001A18 F3A6                    		repe cmpsb		; check	for date + zero	on end
  5105 00001A1A 97                      		xchg	ax, di		; restore allocation pointer
  5106                                  
  5107                                  ; M015 -- begin changes
  5108                                  
  5109                                  		;jnz	short checkcmosclock
  5110                                  		; 02/10/2022
  5111 00001A1B 7508                    		jnz	short checkcompaqbug
  5112                                  
  5113                                  ; install at rom fix
  5114                                  
  5115                                  		; 19/10/2022
  5116                                  		;mov	cx, offset endatrom
  5117 00001A1D B9[AB13]                		mov	cx, endatrom
  5118                                  		;mov	si, offset ibm_disk_io
  5119 00001A20 BE[7D12]                		mov	si, ibm_disk_io
  5120 00001A23 EB46                    		jmp	short install_int13_patch
  5121                                  ; ----------------------------------------------------------------------------
  5122                                  
  5123                                  ; M065 -- begin changes
  5124                                  ;
  5125                                  ; On certain systems with Western Digital disk controllers, the
  5126                                  ; following detection scheme caused an unpredictable and serious
  5127                                  ; failure. In particular, they've implemented a nonstandard
  5128                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  5129                                  ; what happens to be at es:[bx] and other memory locations indexed
  5130                                  ; off of it.
  5131                                  ;
  5132                                  ; Compaq was unable to tell us exactly which kind of systems have
  5133                                  ; the bug, except that they guarantee that the bug was fixed in
  5134                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  5135                                  ; string, and then look for date codes before 08/04/86 to decide
  5136                                  ; when to install the hook.
  5137                                  
  5138                                  ;checkcmosclock:
  5139                                  ; 02/10/2022				
  5140                                  checkcompaqbug:
  5141                                  		; 20/12/2022
  5142                                  		; es = 0F000h
  5143                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  5144                                  		;mov	es, ax
  5145                                  
  5146                                  		; 19/10/2022
  5147 00001A25 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  5148                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  5149 00001A2C 754B                    		jnz	short not_compaq_patch
  5150 00001A2E 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  5151                                  		;cmp	word ptr es:0FFECh, 'PM'
  5152 00001A35 7542                    		jnz	short not_compaq_patch
  5153 00001A37 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  5154                                  		;cmp	word ptr es:0FFEEh, 'QA'
  5155 00001A3E 7539                    		jnz	short not_compaq_patch
  5156                                  
  5157                                  ; We're running on a COMPAQ. Now look at the date code.
  5158                                  
  5159 00001A40 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  5160 00001A44 86E0                    		xchg	ah, al
  5161 00001A46 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  5162                                  		;cmp	ax, '86'        ; 3836h
  5163                                  					; is it	86?
  5164 00001A49 772E                    		ja	short not_compaq_patch
  5165 00001A4B 7218                    		jb	short do_compaq_patch
  5166 00001A4D 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  5167 00001A51 86E0                    		xchg	ah, al
  5168 00001A53 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  5169                                  		;cmp	ax, '08'        ; 3038h
  5170                                  					; is it	08?
  5171 00001A56 7721                    		ja	short not_compaq_patch
  5172 00001A58 720B                    		jb	short do_compaq_patch
  5173 00001A5A 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  5174 00001A5E 86E0                    		xchg	ah, al
  5175 00001A60 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  5176                                  		;cmp	ax, '04'        ; 3034h
  5177                                  					; is it	04?
  5178 00001A63 7314                    		jnb	short not_compaq_patch
  5179                                  
  5180                                  do_compaq_patch:			
  5181 00001A65 B9[C813]                		mov	cx, end_compaq_i13hook
  5182 00001A68 BE[AB13]                		mov	si, endatrom
  5183                                  
  5184                                  install_int13_patch:			
  5185 00001A6B 0E                      		push	cs
  5186 00001A6C 07                      		pop	es
  5187                                  		; 18/10/2022
  5188 00001A6D 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  5189 00001A71 8C0E[B600]              		mov	[Orig13+2], cs
  5190 00001A75 29F1                    		sub	cx, si		; size of rom fix module
  5191 00001A77 F3A4                    		rep movsb		; relocate it
  5192                                  
  5193                                  ; M065 -- end changes
  5194                                  
  5195                                  ; ----------------------------------------------------------------------------
  5196                                  not_compaq_patch:			; M065
  5197                                  		; 17/10/2022
  5198                                  checkcmosclock:	
  5199                                  		; 18/10/2022		
  5200 00001A79 0E                      		push	cs
  5201 00001A7A 07                      		pop	es
  5202                                  
  5203                                  		; 20/12/2022
  5204                                  		; ds = cs = es
  5205                                  		; ss = 0
  5206                                  		; sp = 700h
  5207                                  
  5208                                  ; 09/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  5209                                  %if 0
  5210                                  		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  5211                                  		jnz	short checkk09	; no
  5212                                  
  5213                                  		mov	word [daycnttoday], di
  5214                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  5215                                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  5216                                  		mov	si, daycnt_to_day
  5217                                  		rep movsb
  5218                                  		mov	word [bintobcd], di
  5219                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  5220                                  					; let original segment stay
  5221                                  		;mov	cx, 11	; endcmosclockset - bin_to_bcd
  5222                                  		; 08/08/2023
  5223                                  		mov	cl, 11
  5224                                  		mov	si, bin_to_bcd
  5225                                  		rep movsb
  5226                                  %endif
  5227                                  
  5228                                  ; 09/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  5229                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:22F4h
  5230                                  		;push	cs
  5231                                  		;pop	es
  5232                                  checkk09:				
  5233 00001A7B 57                      		push	di ; ? ; save ? ; 20/12/2022
  5234 00001A7C B80141                  		mov	ax, 4101h	; wait for bh=es:[di]
  5235 00001A7F B301                    		mov	bl, 1		; wait for 1 clock tick
  5236 00001A81 268A3D                  		mov	bh, [es:di]
  5237 00001A84 F9                      		stc			; Assume we will fail
  5238 00001A85 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  5239                                  					; AL = condition type, BH = condition compare or mask value
  5240                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  5241                                  					; DX = I/O port	address	if AL bit 4 set
  5242 00001A87 5F                      		pop	di ; ?
  5243 00001A88 721B                    		jc	short configdone ; 20/12/2022
  5244                                  
  5245 00001A8A C606[7900]01            		mov	byte [fhavek09], 1
  5246                                  					; remember we have a k09 type
  5247 00001A8F 1E                      		push	ds
  5248 00001A90 31C0                    		xor	ax, ax
  5249 00001A92 8ED8                    		mov	ds, ax
  5250                                  		
  5251 00001A94 893EB001                		mov	[6Ch*4], di
  5252                                  		;mov	ds:1B0h, di	; [6Ch*4]
  5253                                  					; new int 6ch handler
  5254                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  5255 00001A98 8C0EB201                		mov	word [6Ch*4+2], cs
  5256 00001A9C 1F                      		pop	ds
  5257                                  		; 20/12/2022
  5258                                  		; ds = cs = es
  5259                                  		;mov	si, int6c
  5260                                  		;mov	cx, endk09-int6c ; 459
  5261                                  		;;mov	cx, 459		; endk09 - int6c
  5262                                  					; size of k09 routine
  5263                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  5264                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2315h
  5265 00001A9D BE[C913]                		mov	si, int_6Ch
  5266 00001AA0 B9BC01                  		mov	cx, endk09-int_6Ch ; 461 in PCDOS 7.1 IBMBIO.COM
  5267 00001AA3 F3A4                    		rep movsb		;
  5268                                  					; set up config	stuff for sysinit
  5269                                  ; ----------------------------------------------------------------------------
  5270                                  ; Set up config stuff for SYSINIT
  5271                                  
  5272                                  ; 17/10/2022
  5273                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  5274                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  5275                                  ; 09/12/2022
  5276                                  SETDRIVE equ SetDrive
  5277                                  GETBP equ GetBp
  5278                                  		
  5279                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  5280                                  configdone:	
  5281                                  		; 21/12/2022			
  5282                                  		; 20/03/2019
  5283                                  		;push	cs		; di is	final ending address of	msbio.
  5284                                  		;pop	ds
  5285                                  		
  5286 00001AA5 83C70F                  		add	di, 15		; round	(up) to	paragraph
  5287                                  		; 10/12/2022
  5288                                  		;shr	di, 1
  5289                                  		;shr	di, 1
  5290                                  		;shr	di, 1
  5291                                  		;shr	di, 1
  5292 00001AA8 B104                    		mov	cl, 4
  5293 00001AAA D3EF                    		shr	di, cl		
  5294                                  		; 10/12/2022
  5295 00001AAC 83C770                  		add	di, 70h	 ; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  5296                                  		; 19/10/2022 - Temporary !
  5297                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  5298 00001AAF 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  5299                                  
  5300                                  ; 21/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  5301                                  
  5302                                  ; 19/03/2018 - No need to read remain clusters of MSDOS kernel because
  5303                                  	     ; Retro DOS v2.0 boot sector has loaded all of the kernel file before.
  5304                                  	     
  5305                                  	     ; ("MSINIT.ASM" contains kernel file reading code here, below...)
  5306                                  
  5307                                  ; ----------------------------------------------------------------------------
  5308                                  ; ----------------------------------------------------------------------------
  5309                                  %if 0
  5310                                  		mov	ax, [drvfat]	; get drive and	fat id
  5311                                  		; 22/12/2022
  5312                                  		; Note: SETDRIVES uses AL (drive number) only
  5313                                  		mov	bp, SETDRIVE
  5314                                  		;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  5315                                  					; at 2C7h:4D7h = 70h:2A47h
  5316                                  		push	cs		; simulate far call
  5317                                  		call	call_bios_code	; get bds for drive
  5318                                  		mov	bp, GETBP	; ensure valid bpb is present	
  5319                                  		;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h) 
  5320                                  		push	cs
  5321                                  		call	call_bios_code
  5322                                  
  5323                                  	; resort to funky old segment definitions for now
  5324                                  
  5325                                  		; 22/12/2022
  5326                                  		;push	es		; copy bds to ds:di
  5327                                  		;pop	ds
  5328                                  
  5329                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  5330                                  	;
  5331                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  5332                                  	;	  back. Apparently it was what actually setup es: for the following
  5333                                  	; cas----
  5334                                  
  5335                                  		; 22/12/2022
  5336                                  		;xor	di, di
  5337                                  		;mov	al, [es:di]	; get fat id byte
  5338                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  5339                                  		;mov	[es:drvfat+1], al
  5340                                  		;mov	ax, [es:drvfat]
  5341                                  		
  5342                                  		; 22/12/2022
  5343                                  		; ds = cs
  5344                                  	;;;	mov	al, [drvfat]
  5345                                  
  5346                                  	; cas -- why do a SECOND setdrive here???
  5347                                  
  5348                                  		; 22/12/2022
  5349                                  		;push	es		; save whatever's in es
  5350                                  		;push	ds		; copy bds to es:di
  5351                                  		;pop	es
  5352                                  		;push	cs		; copy Bios_Data to ds
  5353                                  		;pop	ds
  5354                                  	
  5355                                  	; 22/12/2022
  5356                                  	;;;	mov	bp, SETDRIVE
  5357                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  5358                                  	;;;	push	cs		; simulate far call
  5359                                  	;;;	call	call_bios_code	; get correct bds for this drive
  5360                                  	
  5361                                  		; 22/12/2022
  5362                                  		;push	es		; copy bds back to ds:di
  5363                                  		;pop	ds
  5364                                  		;pop	es		; pop whatever was in es
  5365                                  
  5366                                  	; Now we load in the MSDOS.SYS file
  5367                                  
  5368                                  	; 22/12/2022
  5369                                  	; -----
  5370                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5371                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  5372                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  5373                                  	;				; get size of fat on media
  5374                                  	;	;mov	es:16DEh, bl
  5375                                  	;	mov	[es:fbigfat], bl
  5376                                  	;	mov	cl, [di+8]
  5377                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5378                                  	;	;sub	es:16D8h, ax
  5379                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  5380                                  	;				; need a logical sector number that will
  5381                                  	;				; be used by getclus(diskrd procedure)
  5382                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5383                                  	;	;sbb	es:16DAh, ax
  5384                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  5385                                  	; -----
  5386                                  		
  5387                                  	; -----	; 22/12/2022
  5388                                  		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5389                                  		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  5390                                  		mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  5391                                  					; get size of fat on media
  5392                                  		mov	[fbigfat], bl
  5393                                  		mov	cl, [es:di+8]
  5394                                  		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5395                                  		sub	[bios_l], ax	; subtract hidden sectors since we
  5396                                  					; need a logical sector number that will
  5397                                  					; be used by getclus(diskrd procedure)
  5398                                  		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5399                                  		sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  5400                                  	; ------
  5401                                  
  5402                                  		xor	ch, ch	 ; cx = sectors/cluster
  5403                                  
  5404                                  	; the boot program has left the directory at 0:500h
  5405                                  
  5406                                  		push	ds
  5407                                  		xor	di, di
  5408                                  		mov	ds, di
  5409                                  		mov	bx, [53Ah]
  5410                                  		;mov	bx, ds:53Ah	; clus=*53Ah
  5411                                  					; (First cluster field of 2nd dir entry
  5412                                  					; of root directory in the buffer at 500h)
  5413                                  		pop	ds
  5414                                  loadit:
  5415                                  		mov	ax, SYSINITSEG	; 46Dh
  5416                                  		;mov	ax, 46Dh	; sysinit segment
  5417                                  		mov	es, ax
  5418                                  		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  5419                                  		;mov	es, [es:271h]
  5420                                  
  5421                                  		call	getclus		; read cluster at ES:DI (DI is updated)
  5422                                  ; ----------------------------------------------------------------------------
  5423                                  
  5424                                  		;test	byte [cs:fbigfat], fbig
  5425                                  		test	byte [cs:fbigfat], 40h ; fbig
  5426                                  		jnz	short eofbig
  5427                                  		cmp	bx, 0FF7h
  5428                                  		jmp	short iseofx
  5429                                  ; ----------------------------------------------------------------------------
  5430                                  
  5431                                  eofbig:
  5432                                  		cmp	bx, 0FFF7h
  5433                                  iseofx:
  5434                                  		jb	short loadit	; keep loading until cluster = eof
  5435                                  
  5436                                  %endif
  5437                                  ; ----------------------------------------------------------------------------
  5438                                  ; ----------------------------------------------------------------------------
  5439                                  
  5440 00001AB3 E8EE03                  		call	setdrvparms	; 
  5441                                  
  5442                                  		;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  5443                                  		;jmp	far 46Dh:267h
  5444 00001AB6 EA[6702]3104            		jmp	SYSINITSEG:SYSINITSTART
  5445                                  
  5446                                  ; =============== S U B	R O U T	I N E ========================================
  5447                                  
  5448                                  ; Following are subroutines to support resident device driver initialization
  5449                                  ;
  5450                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  5451                                  
  5452                                  ;	M035 -- begin changed section
  5453                                  
  5454                                  ;******************************************************************************
  5455                                  ; module name: remap
  5456                                  ;
  5457                                  ; descriptive name: all the code for himem that could be separated from msbio
  5458                                  ;
  5459                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  5460                                  ;	     letters) if more than two diskette drives on the system.
  5461                                  ;
  5462                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  5463                                  ;	       as usual and then rescan the bds chain to adjust the drive
  5464                                  ;	       letters. to do this, scan for disk drives and assign logical
  5465                                  ;	       drive number starting from 2 and then rescan diskette drives
  5466                                  ;	       and assign next to the last logical drive number of last disk
  5467                                  ;	       drive to the 3rd and 4th diskette drives.
  5468                                  
  5469                                  ; input:       none
  5470                                  ; exit:	drive letters have been remapped in bds chain
  5471                                  ; exit error:  none
  5472                                  ; called from: msinit
  5473                                  ;
  5474                                  ; notes:  this function  will be called only if more than 2 diskettes are
  5475                                  ;	  found in the system
  5476                                  ;	  this function assumes that there are no more than 26 drives assigned
  5477                                  ;	    this is guaranteed by the code that creates bdss for partitions
  5478                                  ;	  this function assumes that the first entries in the chain are
  5479                                  ;	   floppy drives, and all the rest are hard drives
  5480                                  ;	  will alter the boot drive if necessary to reflect remapping
  5481                                  ;
  5482                                  ;******************************************************************************
  5483                                  
  5484                                  ; 17/10/2022
  5485                                  ; 02/10/2022
  5486                                  
  5487                                  remap:		; proc near		
  5488 00001ABB 2E8B3E[1901]            		mov	di, [cs:start_bds] ; get first bds
  5489                                  
  5490                                  ; search for 1st fixed disk physical drive num
  5491                                  
  5492                                  drive_loop:				
  5493 00001AC0 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  5494                                  					; first	hard disk??
  5495 00001AC4 7409                    		jz	short fdrv_found ; yes,	continue
  5496 00001AC6 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5497                                  					; get next bds,	assume segment
  5498 00001AC8 83FFFF                  		cmp	di, -1		; last bds?
  5499 00001ACB 75F3                    		jnz	short drive_loop ; loop	if not
  5500 00001ACD EB4F                    		jmp	short rmap_exit	; yes, no hard drive on	system
  5501                                  
  5502                                  ;------------------------------------------------------------------------------
  5503                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  5504                                  ;logical drive nums to 3, 4, 5 etc.
  5505                                  ;------------------------------------------------------------------------------
  5506                                  
  5507                                  fdrv_found:				
  5508 00001ACF B002                    		mov	al, 2		; start	with logical drv num=2
  5509                                  fdrv_loop:				
  5510 00001AD1 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5511 00001AD4 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5512                                  					; ds:di--> next	bds
  5513                                  		;inc	al		; set num for next drive
  5514                                  		; 18/12/2022
  5515 00001AD6 40                      		inc	ax
  5516 00001AD7 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ?
  5517 00001ADA 75F5                    		jnz	short fdrv_loop	; no - assign more disk drives
  5518                                  
  5519                                  ;------------------------------------------------------------------------------
  5520                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  5521                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  5522                                  ; any more.
  5523                                  ;------------------------------------------------------------------------------
  5524                                  
  5525 00001ADC 2E8B3E[1901]            		mov	di, [cs:start_bds] ; [start_bds]
  5526                                  					; get first bds
  5527 00001AE1 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5528                                  					; ds:di-->bds2
  5529 00001AE3 2E8A26[2501]            		mov	ah, [cs:dsktnum] ; get number of floppies to remap
  5530 00001AE8 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  5531                                  remap_loop1:				
  5532 00001AEB 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5533                                  					; set new num to next floppy
  5534 00001AED 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5535 00001AF0 FEC0                    		inc	al		; new number for next floppy
  5536 00001AF2 FECC                    		dec	ah		; count down extra floppies
  5537 00001AF4 75F5                    		jnz	short remap_loop1
  5538                                  
  5539                                  ; now we've got to adjust the boot drive if we reassigned it
  5540                                  
  5541 00001AF6 2EA0[8615]              		mov	al, [cs:drvfat]
  5542 00001AFA 3C02                    		cmp	al, 2		; is it	a: or b: ?
  5543 00001AFC 7220                    		jb	short rmap_exit
  5544 00001AFE 2E2A06[2501]            		sub	al, [cs:dsktnum] ; is it one of the other floppies?
  5545 00001B03 7204                    		jb	short remap_boot_flop ;	brif so
  5546                                  
  5547                                  ; we've got to remap the boot hard drive
  5548                                  ; subtract the number of EXTRA floppies from it
  5549                                  
  5550 00001B05 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  5551 00001B07 EB05                    		jmp	short remap_change_boot_drv
  5552                                  ; ---------------------------------------------------------------------------
  5553                                  
  5554                                  ; we've got to remap the boot floppy.
  5555                                  ; add the number of hard drive partitions to it
  5556                                  
  5557                                  remap_boot_flop:			
  5558 00001B09 2E0206[7500]            		add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  5559                                  remap_change_boot_drv:			
  5560 00001B0E 2EA2[8615]              		mov	[cs:drvfat], al ; alter msdos.sys load drive
  5561 00001B12 FEC0                    		inc	al
  5562 00001B14 1E                      		push	ds
  5563 00001B15 BF3104                  		mov	di, SYSINITSEG	; 46Dh
  5564                                  		;mov	di, 46Dh	; SYSINIT segment
  5565 00001B18 8EDF                    		mov	ds, di
  5566 00001B1A A2[9602]                		mov	[DEFAULTDRIVE], al
  5567                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  5568                                  					; pass it to sysinit as	well
  5569 00001B1D 1F                      		pop	ds
  5570                                  rmap_exit:				
  5571 00001B1E C3                      		retn
  5572                                  
  5573                                  ; =============== S U B	R O U T	I N E =======================================
  5574                                  
  5575                                  ; 17/10/2022
  5576                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  5577                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  5578                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  5579                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  5580                                  ;**************************************************
  5581                                  ; getboot - get the boot sector for a hard disk
  5582                                  ;
  5583                                  ; Reads the boot sector from a specified drive into
  5584                                  ; a buffer at the top of memory.
  5585                                  ;
  5586                                  ; dl = int13 drive number to read boot sector for
  5587                                  ;**************************************************
  5588                                  
  5589                                  ; 17/10/2022
  5590                                  bootbias equ 200h
  5591                                  
  5592                                  getboot:	; proc near		
  5593                                  		
  5594                                  		; 08/04/2018
  5595                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  5596                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  5597                                  		; 02/10/2022 - Retro DOS v4.0
  5598                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  5599                                  
  5600 00001B1F 2EA1[8915]              		mov	ax, [cs:init_bootseg] ; 17/10/2022
  5601 00001B23 8EC0                    		mov	es, ax
  5602                                  		; 17/10/2022
  5603 00001B25 BB0002                  		mov	bx, bootbias ; 200h
  5604                                  		;mov	bx, 200h	; bootbias
  5605                                  					; load BX, ES:BX is where sector goes
  5606 00001B28 B80102                  		mov	ax, 201h
  5607 00001B2B 30F6                    		xor	dh, dh
  5608 00001B2D B90100                  		mov	cx, 1
  5609 00001B30 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5610                                  					; AL = number of sectors to read, CH = track, CL = sector
  5611                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5612                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5613 00001B32 7209                    		jb	short erret
  5614                                  		; 17/10/2022
  5615 00001B34 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  5616                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  5617                                  					; Dave Litton magic word?
  5618 00001B3B 7401                    		jz	short norm_ret	; yes
  5619                                  erret:					
  5620 00001B3D F9                      		stc
  5621                                  norm_ret:				
  5622 00001B3E C3                      		retn
  5623                                  
  5624                                  ; =============== S U B	R O U T	I N E =======================================
  5625                                  
  5626                                  ; 28/12/2018 - Retro DOS v4.0 
  5627                                  
  5628                                  ;***************************************************************************
  5629                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  5630                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  5631                                  ;   our own logical sectors start. we also read in our boot sector to
  5632                                  ;   determine version number
  5633                                  ;
  5634                                  ;   inputs:	dl is rom drive number (80...)
  5635                                  ;		bh is partition number (0....) 
  5636                                  ;		ds:di points to bds
  5637                                  ;   outputs:	carry clear -> bpb is filled in
  5638                                  ;		carry set   -> bpb is left uninitialized due to error
  5639                                  ;	trashes (at least) si, cx
  5640                                  ;	MUST PRESERVE ES:!!!!
  5641                                  ;***************************************************************************
  5642                                  
  5643                                  sethard:	; proc near
  5644                                  		; 12/08/2023
  5645                                  		; ds = cs = BIOSDATA
  5646 00001B3F 57                      		push	di
  5647 00001B40 53                      		push	bx
  5648                                  		;push	ds  ; ds = cs = BIOSDATA ; 12/08/2023
  5649 00001B41 06                      		push	es
  5650 00001B42 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  5651 00001B45 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  5652 00001B48 804D2301                		or	byte [di+23h], 1 ; [di+BDS.flags]
  5653                                  					; fnon_removable
  5654 00001B4C C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  5655                                  					; ffHardFile
  5656 00001B50 C606[8815]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  5657 00001B55 88FE                    		mov	dh, bh		; partition number
  5658 00001B57 52                      		push	dx
  5659 00001B58 B408                    		mov	ah, 8
  5660 00001B5A CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5661                                  					; DL = drive number
  5662                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5663                                  					; DL = number of consecutive drives
  5664                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5665 00001B5C FEC6                    		inc	dh
  5666 00001B5E 887515                  		mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  5667 00001B61 5A                      		pop	dx
  5668 00001B62 7263                    		jb	short setret	; error	if no hard disk
  5669 00001B64 80E13F                  		and	cl, 3Fh
  5670 00001B67 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  5671 00001B6A 52                      		push	dx		; save partition number
  5672 00001B6B E8B1FF                  		call	getboot
  5673 00001B6E 5A                      		pop	dx		; restore partition number
  5674 00001B6F 7256                    		jb	short setret
  5675 00001B71 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5676                                  
  5677                                  ; The first 'active' partition is 00, the second is 01....
  5678                                  ;   then the remainder of the 'primary' but non-active partitions
  5679                                  
  5680                                  act_part:
  5681 00001B74 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  5682 00001B79 7418                    		jz	short no_act	; no
  5683 00001B7B 26803F01                		cmp	byte [es:bx], 1 ; reject if partitiontype != 1, 4 or 6
  5684 00001B7F 740C                    		jz	short got_good_act
  5685 00001B81 26803F04                		cmp	byte [es:bx], 4
  5686 00001B85 7406                    		jz	short got_good_act
  5687 00001B87 26803F06                		cmp	byte [es:bx], 6
  5688 00001B8B 7506                    		jnz	short no_act
  5689                                  got_good_act:				; 11/08/2023
  5690 00001B8D 08F6                    		or	dh, dh		; is this our target partition #?
  5691                                  					; (0 = first primary dos or active partition)
  5692 00001B8F 743A                    		jz	short set2	; WE GOT THE ONE WANTED!!
  5693 00001B91 FECE                    		dec	dh		; count	down
  5694                                  no_act:					
  5695 00001B93 83C310                  		add	bx, 16
  5696 00001B96 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5697                                  					; last entry done?
  5698 00001B9A 75D8                    		jnz	short act_part	; no, process next entry
  5699 00001B9C BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5700                                  					; restore original value of bx
  5701                                  
  5702                                  ; Now scan the non-active partitions
  5703                                  
  5704                                  get_primary:
  5705 00001B9F 26F647FC80              		test	byte [es:bx-4], 80h
  5706 00001BA4 7518                    		jnz	short not_prim	; we've already scanned
  5707                                  					; the ACTIVE ones
  5708 00001BA6 26803F01                		cmp	byte [es:bx], 1 ; see if partitiontype == 1, 4 or 6
  5709 00001BAA 740C                    		jz	short got_prim
  5710 00001BAC 26803F04                		cmp	byte [es:bx], 4
  5711 00001BB0 7406                    		jz	short got_prim
  5712 00001BB2 26803F06                		cmp	byte [es:bx], 6
  5713 00001BB6 7506                    		jnz	short not_prim
  5714                                  got_prim:
  5715 00001BB8 08F6                    		or	dh, dh		; is this our target partition?
  5716 00001BBA 740F                    		jz	short set2
  5717 00001BBC FECE                    		dec	dh
  5718                                  not_prim:
  5719 00001BBE 83C310                  		add	bx, 16
  5720 00001BC1 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5721 00001BC5 75D8                    		jnz	short get_primary ; loop till we've gone through table
  5722                                  setret:					
  5723 00001BC7 F9                      		stc			; error	return
  5724 00001BC8 E99602                  		jmp	ret_hard_err
  5725                                  
  5726                                  ; ---------------------------------------------------------------------------
  5727                                  
  5728                                  ;  until we get the real logical boot record and get the bpb,
  5729                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  5730                                  ;  for the convenience of the computation.
  5731                                  ;
  5732                                  ;  at the end of this procedure, if a bpb information is gotten from
  5733                                  ;  the valid boot record, then we are going to use those bpb information
  5734                                  ;  without change.
  5735                                  ;
  5736                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  5737                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  5738                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  5739                                  
  5740                                  set2:		
  5741                                  		; 12/08/2023
  5742                                  		; ds = cs = BIOSDATA segment (0070h)
  5743 00001BCB 8816[8B15]              		mov	[rom_drv_num], dl
  5744                                  		;mov	[cs:rom_drv_num], dl
  5745                                  			; save the rom bios drive number we are handling now.
  5746 00001BCF 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  5747 00001BD3 268B5706                		mov	dx, [es:bx+6]
  5748                                  
  5749                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  5750                                  ; sectors should be allowed	
  5751                                  
  5752 00001BD7 83E801                  		sub	ax, 1
  5753 00001BDA 83DA00                  		sbb	dx, 0
  5754 00001BDD 26034708                		add	ax, [es:bx+8]	; sectors in partition
  5755 00001BE1 2613570A                		adc	dx, [es:bx+10]
  5756 00001BE5 7305                    		jnb	short okdrive
  5757 00001BE7 800E[8815]80            		or	byte [fbigfat], 80h ; ftoobig
  5758                                  okdrive:
  5759 00001BEC 268B4704                		mov	ax, [es:bx+4]
  5760 00001BF0 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  5761                                  					; BPB_HIDDENSECTORS = p->partitionbegin
  5762 00001BF3 268B4706                		mov	ax, [es:bx+6]
  5763 00001BF7 894519                  		mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  5764 00001BFA 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  5765 00001BFE 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  5766 00001C02 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  5767 00001C05 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  5768                                  					; bpb->maxsec =	p->partitionlength
  5769 00001C08 83FA00                  		cmp	dx, 0
  5770 00001C0B 7705                    		ja	short okdrive_1
  5771 00001C0D 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  5772 00001C10 72B5                    		jb	short setret	; return -1;
  5773                                  okdrive_1:
  5774 00001C12 8B5519                  		mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  5775 00001C15 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  5776 00001C18 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  5777                                  					; usually equal	to the # of sec/trk.
  5778 00001C1A 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  5779 00001C1D 50                      		push	ax
  5780 00001C1E 89D0                    		mov	ax, dx
  5781 00001C20 31D2                    		xor	dx, dx
  5782 00001C22 F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  5783                                  					; (track)temp_h:ax + (sector)dx
  5784                                  		; 17/10/2022
  5785                                  		;mov	[cs:temp_h], ax
  5786                                  		; 12/08/2023 (ds=cs)
  5787 00001C24 A3[2105]                		mov	[temp_h], ax
  5788 00001C27 58                      		pop	ax
  5789 00001C28 F7F3                    		div	bx
  5790 00001C2A 88D1                    		mov	cl, dl
  5791 00001C2C FEC1                    		inc	cl
  5792 00001C2E 31DB                    		xor	bx, bx
  5793 00001C30 8A5D15                  		mov	bl, [di+15h]	; [di+BDS.heads]
  5794 00001C33 50                      		push	ax
  5795 00001C34 31D2                    		xor	dx, dx
  5796                                  		;mov	ax, [cs:temp_h]
  5797 00001C36 A1[2105]                		mov	ax, [temp_h] ; 12/08/2023
  5798 00001C39 F7F3                    		div	bx
  5799                                  		;mov	[cs:temp_h], ax
  5800 00001C3B A3[2105]                		mov	[temp_h], ax ; 12/08/2023
  5801 00001C3E 58                      		pop	ax
  5802 00001C3F F7F3                    		div	bx		; dl is head, ax is cylinder
  5803                                  		; 12/08/2023 (ds=cs)
  5804 00001C41 833E[2105]00            		cmp	word [temp_h], 0
  5805                                  		;cmp	word [cs:temp_h], 0
  5806 00001C46 775F                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5807 00001C48 3D0004                  		cmp	ax, 1024
  5808 00001C4B 775A                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5809                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  5810                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  5811                                  			; ('ja' must be 'jnb')
  5812                                  okdrive_2:
  5813                                   		; 28/07/2019
  5814                                  ; dl is head.
  5815                                  ; ax is cylinder
  5816                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  5817                                  
  5818                                  ;*** for mini disks ***
  5819                                  
  5820 00001C4D 837D4701                		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  5821                                  					; check for mini disk
  5822 00001C51 7503                    		jnz	short oknotmini	; not mini disk.
  5823 00001C53 034549                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  5824                                  					; set the physical track number
  5825                                  oknotmini:
  5826                                  ;*** end of added logic for mini disk
  5827                                  				
  5828 00001C56 D0CC                    		ror	ah, 1		; move high two bits of cyl to high
  5829 00001C58 D0CC                    		ror	ah, 1		; two bits of upper byte
  5830 00001C5A 80E4C0                  		and	ah, 0C0h	; turn off remainder of bits
  5831 00001C5D 08E1                    		or	cl, ah		; move two bits to correct spot
  5832 00001C5F 88C5                    		mov	ch, al		; ch iscylinder (low 8 bits)
  5833                                  					; cl is sector + 2 high bits of cylinder
  5834 00001C61 88D6                    		mov	dh, dl		; dh is	head
  5835                                  		
  5836                                  		; 12/08/2023 (ds=cs)
  5837 00001C63 8A16[8B15]              		mov	dl, [rom_drv_num]
  5838                                  		;mov	dl, [cs:rom_drv_num] ; dl is drive number
  5839                                  
  5840                                  ; cl is sector + 2 high bits of cylinder
  5841                                  ; ch is low 8 bits of cylinder
  5842                                  ; dh is head
  5843                                  ; dl is drive
  5844                                  
  5845                                  ; for convenience, we are going to read the logical boot sector
  5846                                  ; into cs:disksector area.
  5847                                  
  5848                                  ; read in boot sector using bios disk interrupt. the buffer where it
  5849                                  ; is to be read in is cs:disksector.
  5850                                  
  5851 00001C67 0E                      		push	cs
  5852 00001C68 07                      		pop	es
  5853 00001C69 BB[4E01]                		mov	bx, disksector	; for convenience,
  5854                                  					; we are going to read the logical boot sector
  5855                                  					; into cs:disksector area.
  5856 00001C6C B80102                  		mov	ax, 201h
  5857 00001C6F CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5858                                  					; AL = number of sectors to read, CH = track, CL = sector
  5859                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5860                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5861                                  
  5862                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  5863                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  5864                                  ; media if we recognize the version number.
  5865                                  
  5866                                  		; 11/08/2023
  5867                                  		;mov	bx, disksector	; BIOSDATA:014Eh ; MSDOS 6.21 ; 11/08/2023
  5868                                  					; BIOSDATA:0152h ; PCDOS 7.1 IBMBIO.COM
  5869 00001C71 53                      		push	bx
  5870 00001C72 50                      		push	ax
  5871                                  		; 12/08/2023
  5872                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  5873 00001C73 803FE9                  		cmp	byte [bx], 0E9h
  5874                                  		;cmp	byte [cs:bx], 0E9h ; is it a near jump?
  5875 00001C76 740B                    		jz	short check_1_ok ; yes
  5876 00001C78 803FEB                  		cmp	byte [bx], 0EBh
  5877                                  		;cmp	byte [cs:bx], 0EBh ; is it a short jump?
  5878 00001C7B 7525                    		jnz	short invalid_boot_record ; no
  5879 00001C7D 807F0290                		cmp	byte [bx+2], 90h
  5880                                  		;cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  5881 00001C81 751F                    		jnz	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  5882                                  check_1_ok:
  5883                                  		; 11/08/2023
  5884 00001C83 BB[5901]                		mov	bx, disksector+EXT_BOOT.BPB ; disksector+11
  5885                                  		;mov	bx, 159h	; disksector+EXT_BOOT.BPB
  5886                                  					; point to the bpb in the boot record
  5887                                  		;mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  5888 00001C86 8A470A                  		mov	al, [bx+10] ; 12/08/2023 
  5889                                  					; get the mediadescriptor byte
  5890 00001C89 24F0                    		and	al, 0F0h	; mask off low nibble
  5891 00001C8B 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  5892 00001C8D 7513                    		jnz	short invalid_boot_record ; no, invalid boot record
  5893                                  		;cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  5894 00001C8F 813F0002                		cmp	word [bx], 512 ; 12/08/2023
  5895 00001C93 750D                    		jnz	short invalid_boot_record ; invalidate non 512 byte sectors
  5896                                  
  5897                                  check2_ok:				; yes, mediadescriptor ok.
  5898 00001C95 8A4702                  		mov	al, [bx+2] ; 12/08/2023
  5899                                  		;mov	al, [cs:bx+2]	; now make sure that
  5900                                  					; the sectorspercluster is
  5901                                  					; a power of 2
  5902                                  					;
  5903                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  5904                                  					; get the sectorspercluster
  5905 00001C98 08C0                    		or	al, al		; is it zero?
  5906 00001C9A 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  5907                                  
  5908                                  ck_power_of_two:
  5909 00001C9C D0E8                    		shr	al, 1		; shift until first bit emerges
  5910 00001C9E 73FC                    		jnb	short ck_power_of_two
  5911 00001CA0 740B                    		jz	short valid_boot_record
  5912                                  
  5913                                  invalid_boot_record:
  5914 00001CA2 58                      		pop	ax
  5915 00001CA3 5B                      		pop	bx
  5916 00001CA4 E90901                  		jmp	unknown		; jump to invalid boot record
  5917                                  					; unformatted or illegal media.
  5918                                  
  5919                                  ; ---------------------------------------------------------------------------
  5920                                  	; 12/08/2023
  5921                                  setret_brdg:
  5922 00001CA7 E91DFF                  		jmp	setret
  5923                                  ; ---------------------------------------------------------------------------
  5924                                  
  5925                                  unknown3_0_j:
  5926 00001CAA E90701                  		jmp	unknown3_0	; legally formatted media,
  5927                                  					; although, content might be bad.
  5928                                  ; ---------------------------------------------------------------------------
  5929                                  
  5930                                  valid_boot_record:
  5931 00001CAD 58                      		pop	ax
  5932 00001CAE 5B                      		pop	bx
  5933                                  
  5934                                  ; Signature found. Now check version.
  5935                                  
  5936                                  		; 14/08/2023
  5937 00001CAF 817F08322E              		cmp	word [bx+8], '2.'
  5938                                  		;cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  5939                                  		;;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  5940 00001CB4 7506                    		jnz	short try5
  5941 00001CB6 807F0A30                		cmp	byte [bx+10], '0'
  5942                                  		;cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  5943                                  		;;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  5944                                  		; 12/08/2023
  5945                                  		;jnz	short try5
  5946                                  		;jmp	short copybpb
  5947 00001CBA 7425                    		jz	short copybpb
  5948                                  
  5949                                  ; ---------------------------------------------------------------------------
  5950                                  ;	; 12/08/2023
  5951                                  ;setret_brdg:
  5952                                  ;		jmp	setret
  5953                                  ; ---------------------------------------------------------------------------
  5954                                  ;
  5955                                  ;unknown3_0_j:
  5956                                  ;		jmp	unknown3_0	; legally formatted media,
  5957                                  ;					; although, content might be bad.
  5958                                  ; ---------------------------------------------------------------------------
  5959                                  
  5960                                  try5:
  5961 00001CBC E8A601                  		call	cover_fdisk_bug
  5962                                  
  5963                                  ; see if it is an os2 signature
  5964                                  
  5965                                  		; 12/08/2023
  5966                                  		; ds = cs = BIOSDATA segment
  5967 00001CBF 817F08302E              		cmp	word [bx+8], '0.'
  5968                                  		;cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  5969                                  		;;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  5970 00001CC4 750C                    		jnz	short no_os2
  5971 00001CC6 8A4707                  		mov	al, [bx+7] ; 12/08/2023
  5972                                  		;mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  5973 00001CC9 2C31                    		sub	al, '1'
  5974                                  		;sub	al, 31h		; '1'
  5975 00001CCB 24FE                    		and	al, 0FEh
  5976 00001CCD 7412                    		jz	short copybpb	; accept either	'1' or '2'
  5977 00001CCF E9DE00                  		jmp	unknown
  5978                                  ; ---------------------------------------------------------------------------
  5979                                  
  5980                                  ; no os2 signature, this is to check for real dos versions
  5981                                  
  5982                                  no_os2:
  5983                                  		; 12/08/2023
  5984                                  		; ds = cs = BIOSDATA
  5985 00001CD2 817F08332E              		cmp	word [bx+8], '3.'			
  5986                                  		;cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  5987                                  		;;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  5988 00001CD7 72D1                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  5989                                  					; do not trust it, but still legal.
  5990 00001CD9 7506                    		jnz	short copybpb	; honor	os2 boot record
  5991                                  					; or dos 4.0 version
  5992 00001CDB 807F0A31                		cmp	byte [bx+10], '1' ; 12/08/2023
  5993                                  		;cmp	byte [cs:bx+10], '1'
  5994                                  		;;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  5995 00001CDF 72C9                    		jb	short unknown3_0_j ; if version >= 3.1, then o.k.
  5996                                  copybpb:
  5997                                  
  5998                                  ; 03/10/2022
  5999                                  
  6000                                  ; we have a valid boot sector. use the bpb in it to build the
  6001                                  ; bpb in bios. it is assumed that only
  6002                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  6003                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  6004                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  6005                                  ; need to be set (all other values in already). fbigfat is also set.
  6006                                  
  6007                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  6008                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  6009                                  ; and system id according to the boot record.
  6010                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  6011                                  
  6012                                  		; 10/12/2022
  6013                                  		; (number of FATs optimization)
  6014 00001CE1 BE[5901]                		mov	si, disksector+11 ; disksector+0Bh
  6015                                  		;;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  6016                                  		;mov	cl, [cs:si+05h]
  6017                                  		; 12/08/2023
  6018                                  		; ds = cs = BIOSDATA segment (0070h)
  6019 00001CE4 8A4C05                  		mov	cl, [si+05h] ; number of FATs
  6020                                  
  6021 00001CE7 807C1B29                		cmp	byte [si+1Bh], 29h ; 12/08/2023
  6022                                  		;cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  6023                                  		;;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  6024                                  					; [disksector+EXT_BOOT.SIG]
  6025                                  					; EXT_BOOT_SIGNATURE
  6026 00001CEB 753C                    		jnz	short copybpb_fat ; conventional fat system
  6027                                  
  6028                                  		; 03/10/2022
  6029                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  6030                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  6031                                  		;	     number of FATs must be 2 ; =*?=
  6032                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  6033                                  		;
  6034                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  6035                                  
  6036                                  		; 10/12/2022
  6037                                  		;cmp	byte [cs:disksector+10h], 0
  6038                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  6039                                  		;jnz	short copybpb_fat ; a fat system.
  6040 00001CED 08C9                    		or	cl, cl	 ; [cs:disksector+10h]
  6041 00001CEF 7538                    		jnz	short copybpb_fat ; a fat system.
  6042                                  
  6043                                  ; non fat based	media.
  6044                                  
  6045 00001CF1 57                      		push	di
  6046                                  		; 12/08/2023
  6047                                  		;push	ds  ; ds = cs = BIOSDATA segment
  6048 00001CF2 1E                      		push	ds
  6049 00001CF3 07                      		pop	es
  6050                                  		; 12/08/2023
  6051                                  		; ds = cs
  6052                                  		;push	cs
  6053                                  		;pop	ds
  6054                                  
  6055                                  		; 10/12/2022
  6056                                  		; (number of FATs optimization)
  6057                                  		; SI = disksector+11
  6058                                  		; 17/10/2022
  6059                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6060                                  		;mov	si, disksector+11
  6061 00001CF4 83C706                  		add	di, 6		; add di,BDS.BPB
  6062                                  
  6063                                  ; just for completeness, we'll make sure that total_sectors and
  6064                                  ; big_total_sectors aren't both zero. I've seen examples of
  6065                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  6066                                  ; got that way. If it occurs, then use the values from the
  6067                                  ; partition table.
  6068                                  
  6069                                  		; 18/12/2022
  6070 00001CF7 29C9                    		sub	cx, cx 
  6071                                  
  6072                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  6073                                  		;jnz	short already_nonz 
  6074                                  		;			; how about big_total?
  6075                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  6076                                  		;jnz	short already_nonz ; we're okay if any are != 0
  6077                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6078                                  		;jnz	short already_nonz
  6079                                  
  6080                                  		; 12/08/2023
  6081                                  		; ds = cs = BIOSDATA segment (0070h)
  6082                                  
  6083                                  		; 18/12/2022
  6084                                  		;cmp	[cs:si+8], cx ; 0	; [cs:si+EBPB.TOTALSECTORS]
  6085                                  		; 12/08/2023
  6086 00001CF9 394C08                  		cmp	[si+8], cx ; 0
  6087 00001CFC 751C                    		jnz	short already_nonz
  6088                                  					     	; how about big_total?
  6089                                  		;cmp	[cs:si+15h], cx ; 0 	; [cs:si+EBPB.BIGTOTALSECTORS]
  6090                                  		; 12/08/2023
  6091 00001CFE 394C15                  		cmp	[si+15h], cx ; 0
  6092 00001D01 7517                    		jnz	short already_nonz	; we're okay if any are != 0
  6093                                  		;cmp	[cs:si+17h], cx ; 0  	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6094 00001D03 394C17                  		cmp	[si+17h], cx ; 0
  6095 00001D06 7512                    		jnz	short already_nonz
  6096                                  
  6097                                  ; now let's copy the values from the partition table (now in the BDS)
  6098                                  ; into the BPB in the boot sector buffer, before they get copied back.
  6099                                  
  6100 00001D08 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  6101                                  		; 12/08/2023
  6102                                  		;mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  6103 00001D0B 894408                  		mov	[si+8], ax
  6104 00001D0E 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  6105                                  		;mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  6106 00001D11 894415                  		mov	[si+15h], ax
  6107 00001D14 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  6108                                  		;mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6109 00001D17 894417                  		mov	[si+17h], ax
  6110                                  
  6111                                  already_nonz:	
  6112                                  		; 18/12/2022
  6113                                  		; cx = 0
  6114 00001D1A B119                    		mov	cl, 25
  6115                                  		;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  6116 00001D1C F3A4                    		rep movsb
  6117                                  		;pop	ds
  6118                                  		; 12/08/2023
  6119                                  		; ds = cs
  6120                                  		;pop	bp  ; ds (on top of stack) = BIOSDATA
  6121 00001D1E 5F                      		pop	di
  6122                                  		;push	es
  6123                                  		;push	ds
  6124                                  		;pop	es
  6125                                  		;push	cs
  6126                                  		;pop	ds
  6127                                  		; 12/08/2023
  6128                                  		;mov	es, bp
  6129                                  		; ds = cs = es
  6130                                  		
  6131                                  		; 14/08/2023
  6132 00001D1F BD[D607]                		mov	bp, MOVMEDIAIDS ; mov_media_ids
  6133                                  		; 18/12/2022
  6134                                  		;mov	bp, mov_media_ids
  6135                                  		;;mov	bp, 751h	; mov_media_ids
  6136                                  					; at 2C7h:751h = 70h:2CC1h
  6137                                  					; set volume id, systemid, serial.
  6138 00001D22 0E                      		push	cs		; simulate far call
  6139 00001D23 E8EDF8                  		call	call_bios_code
  6140                                  		; 12/08/2023
  6141                                  		; ds = cs = es
  6142                                  		;push	es
  6143                                  		;pop	ds
  6144                                  		;pop	es
  6145 00001D26 E93701                  		jmp	goodret
  6146                                  
  6147                                  ; ---------------------------------------------------------------------------
  6148                                  
  6149                                  ; ****** cas ---
  6150                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  6151                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  6152                                  ; happens with some frequency -- perhaps through some OS/2 setup
  6153                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  6154                                  ; from the boot sector into the DPB anyway, we've just been using
  6155                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  6156                                  ; we'll go ahead and copy it into the DPB, except in the case
  6157                                  ; that it equals zero, in which case we just use the values in
  6158                                  ; the DPB from the partition table.
  6159                                  
  6160                                  ; 17/10/2022
  6161                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  6162                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  6163                                  ; 09/12/2022
  6164                                  MOVMEDIAIDS equ mov_media_ids
  6165                                  CLEARIDS equ clear_ids
  6166                                  
  6167                                  copybpb_fat:
  6168                                  		; 10/12/2022
  6169                                  		; (number of FATs optimization)
  6170                                  		; SI = disksector+11
  6171                                  		; 17/10/2022
  6172                                  		;mov	si, disksector+11
  6173                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6174                                  					; cs:si	-> bpb in boot
  6175 00001D29 31D2                    		xor	dx, dx
  6176                                  		; 12/08/2023
  6177                                  		; ds = cs = BIOSDATA segment (0070h)
  6178 00001D2B 8B4408                  		mov	ax, [si+8]
  6179                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6180                                  					; get totsec from boot sec
  6181 00001D2E 09C0                    		or	ax, ax
  6182 00001D30 7514                    		jnz	short copy_totsec ; if non zero, use that
  6183 00001D32 8B4415                  		mov	ax, [si+15h] ; 12/08/2023
  6184                                  		;mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  6185                                  					; get the big version
  6186                                  					; (32 bit total	sectors)
  6187 00001D35 8B5417                  		mov	dx, [si+17h] ; 12/08/2023
  6188                                  		;mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6189                                  		; 10/12/2022
  6190                                  		; (number of FATs optimization)
  6191                                  		; CL = number of FATs (2 or 1) 
  6192 00001D38 89D3                    		mov	bx, dx		; see if it is a big zero
  6193 00001D3A 09C3                    		or	bx, ax
  6194 00001D3C 7508                    		jnz	short copy_totsec
  6195                                  			; screw it. it was bogus.
  6196 00001D3E 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6197 00001D41 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6198 00001D44 EB06                    		jmp	short fat_big_small
  6199                                  
  6200                                  		;mov	cx, dx
  6201                                  		;or	cx, ax		; see if it is a big zero
  6202                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  6203                                  copy_totsec:				
  6204 00001D46 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  6205                                  					; make DPB match boot sec
  6206 00001D49 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  6207                                  
  6208                                  		; 10/12/2022
  6209                                  ;totsec_already_set:			
  6210                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6211                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6212                                  
  6213                                  ; determine fat entry size.
  6214                                  
  6215                                  fat_big_small:
  6216                                  
  6217                                  ;at this moment dx;ax = total sector number
  6218                                  
  6219                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  6220                                  ;from the BPB on the disk
  6221                                  		
  6222                                  		; 12/08/2023
  6223                                  		; ds = cs = BIOSDATA segment (0070h)
  6224                                  				
  6225 00001D4C 8B5C03                  		mov	bx, [si+3]
  6226                                  		;mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  6227                                  					; get #reserved_sectors	from BPB
  6228 00001D4F 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  6229                                  					; update BDS field
  6230 00001D52 29D8                    		sub	ax, bx
  6231 00001D54 83DA00                  		sbb	dx, 0		; update the count
  6232                                  		; 12/08/2023
  6233 00001D57 8B5C0B                  		mov	bx, [si+0Bh]
  6234                                  		;mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  6235                                  					; bx = sectors/fat
  6236 00001D5A 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  6237                                  					; set in bds bpb
  6238                                  		; 10/12/2022
  6239                                  		; (number of FATs optimization)
  6240                                  		; CL = number of FATs (2 or 1) 
  6241                                  		;dec	cl ; *
  6242                                  		; 18/12/2022
  6243 00001D5D 49                      		dec	cx ; *
  6244 00001D5E D3E3                    		shl	bx, cl
  6245                                  		;shl	bx, 1	; =*?=	; always 2 fats
  6246                                  		
  6247 00001D60 29D8                    		sub	ax, bx		; sub #	fat sectors
  6248 00001D62 83DA00                  		sbb	dx, 0
  6249 00001D65 8B5C06                  		mov	bx, [si+6] ; 12/08/2023
  6250                                  		;mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  6251                                  					; # root entries
  6252 00001D68 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  6253                                  					; set in bds bpb
  6254 00001D6B B104                    		mov	cl, 4
  6255 00001D6D D3EB                    		shr	bx, cl		; div by 16 ents/sector
  6256 00001D6F 29D8                    		sub	ax, bx		; sub #	dir sectors
  6257 00001D71 83DA00                  		sbb	dx, 0		;
  6258                                  					; dx:ax	now contains the
  6259                                  					; # of data sectors
  6260 00001D74 31C9                    		xor	cx, cx ; *
  6261 00001D76 8A4C02                  		mov	cl, [si+2] ; 12/08/2023
  6262                                  		;mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  6263                                  					; sectors per cluster
  6264 00001D79 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  6265                                  					; set in bios bpb
  6266 00001D7C 50                      		push	ax
  6267 00001D7D 89D0                    		mov	ax, dx
  6268 00001D7F 31D2                    		xor	dx, dx
  6269 00001D81 F7F1                    		div	cx		; cx = sectors per cluster
  6270                                  		; 12/08/2023 (ds=cs)
  6271 00001D83 A3[2105]                		mov	[temp_h], ax
  6272                                  		;mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  6273                                  					; # clusters.
  6274 00001D86 58                      		pop	ax
  6275 00001D87 F7F1                    		div	cx
  6276                                  		;cmp	word [cs:temp_h], 0
  6277 00001D89 833E[2105]00            		cmp	word [temp_h], 0  ; 12/08/2023
  6278 00001D8E 7718                    		ja	short toobig_ret ; too big cluster number
  6279 00001D90 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6280                                  					; is this 16-bit fat?
  6281 00001D93 7205                    		jb	short copymediaid ; no,	small fat
  6282                                  		; 17/10/2022
  6283 00001D95 800E[8815]40            		or	byte [fbigfat], 40h
  6284                                  		;or	ds:fbigfat, 40h	; fbig
  6285                                  					; 16 bit fat
  6286                                  copymediaid:
  6287 00001D9A 06                      		push	es
  6288 00001D9B 1E                      		push	ds
  6289 00001D9C 07                      		pop	es
  6290                                  		; 12/08/2023
  6291                                  		; ds = cs = BIOSDATA
  6292                                  		;push	cs
  6293                                  		;pop	ds
  6294                                  		; 17/10/2022
  6295 00001D9D BD[D607]                		mov	bp, MOVMEDIAIDS
  6296                                  		;mov	bp, 751h	; mov_media_ids
  6297                                  					; at 2C7h:751h = 70h:2CC1h
  6298                                  					; copy filesys_id, volume label
  6299 00001DA0 0E                      		push	cs		; simulate far call
  6300 00001DA1 E86FF8                  		call	call_bios_code
  6301                                  		; 12/08/2023
  6302                                  		;push	es
  6303                                  		;pop	ds
  6304 00001DA4 07                      		pop	es
  6305 00001DA5 E99A00                  		jmp	massage_bpb	; now final check for bpb info
  6306                                  					; and return.
  6307                                  ; ---------------------------------------------------------------------------
  6308                                  
  6309                                  toobig_ret:
  6310                                  		; 12/08/2023 (ds=cs=BIOSDATA)
  6311 00001DA8 800E[8815]80            		or	byte [fbigfat], 80h ; ftoobig
  6312                                  		;or	byte [cs:fbigfat], 80h ; ftoobig 
  6313                                  					; too big (32 bit clust #) for FAT16
  6314 00001DAD E9B000                  		jmp	goodret		; still	drive letter is	assigned
  6315                                  					; but useless. to big for
  6316                                  					; current pc dos fat file system
  6317                                  ; ---------------------------------------------------------------------------
  6318                                  
  6319                                  unknown:
  6320                                  		; 12/12/2022
  6321 00001DB0 804D2402                		or	byte [di+24h], 02h			
  6322                                  		;or	word [di+23h], 200h ; [di+BDS.flags]
  6323                                  					; unformatted_media
  6324                                  					; Set unformatted media	flag.
  6325                                  
  6326                                  ; the boot signature may not be	recognizable,
  6327                                  ; but we should	try and	read it	anyway.
  6328                                  
  6329                                  unknown3_0:
  6330 00001DB4 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  6331                                  					; [di+BDS.totalsecs32+2]
  6332 00001DB7 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6333 00001DBA BE[B815]                		mov	si, disktable2
  6334                                  scan:					; 08/08/2023
  6335                                  		;cmp	dx, [cs:si]	; total sectors hw
  6336                                  		; 12/08/2023 (ds=cs)
  6337 00001DBD 3B14                    		cmp	dx, [si] 
  6338 00001DBF 720C                     		jb	short gotparm
  6339 00001DC1 7705                    		ja	short scan_next
  6340                                  		;cmp	ax, [cs:si+2]	; total sectors lw
  6341 00001DC3 3B4402                  		cmp	ax, [si+2]
  6342 00001DC6 7605                    		jbe	short gotparm
  6343                                  scan_next:				
  6344 00001DC8 83C60A                  		add	si, 10		; 5*2
  6345 00001DCB EBF0                    		jmp	short scan	; covers upto 512 mb media
  6346                                  ; ---------------------------------------------------------------------------
  6347                                  
  6348                                  gotparm:
  6349 00001DCD 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  6350                                  		;or	ds:fbigfat, cl
  6351                                  		; 17/10/2022
  6352 00001DD0 080E[8815]              		or	[fbigfat], cl	; (fbig flag, 40h or 0) ; 08/08/2023
  6353                                  		; 12/08/2023
  6354                                  		; ds = cs = BIOSDATA
  6355 00001DD4 8B4C04                  		mov	cx, [si+4]
  6356                                  		;mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  6357                                  					; cl = log base 2 of ch
  6358 00001DD7 8B5406                  		mov	dx, [si+6]
  6359                                  		;mov	dx, [cs:si+6]	; dx = number of root dir entries
  6360                                  
  6361                                  ; now calculate size of fat table
  6362                                  
  6363 00001DDA 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  6364                                  					; save number of (root)	dir entries
  6365 00001DDD 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6366 00001DE0 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6367 00001DE3 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  6368                                  					; save sectors per cluster
  6369                                  		
  6370                                  		; 05/08/2023 - Retro DOS v4.2 IO:SYS (optimization)
  6371 00001DE6 8A1E[8815]              		mov	bl, [fbigfat]
  6372 00001DEA 885D1F                  		mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  6373 00001DED F6C340                  		test	bl, 40h
  6374                                  		; 17/10/2022
  6375                                  		;test	byte [fbigfat], 40h
  6376                                  		;;test	ds:fbigfat, 40h	; fbig
  6377                                  					; if (fbigfat)
  6378 00001DF0 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  6379                                  
  6380                                  ; we don't need to change "small fat" logic since it is guaranteed
  6381                                  ; that double word total sector will not use 12 bit fat (unless
  6382                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  6383                                  ; so in this case we assume dx = 0 !!
  6384                                  
  6385 00001DF2 31DB                    		xor	bx, bx		; 12 bit fat (FAT12 fs)
  6386 00001DF4 88EB                    		mov	bl, ch
  6387 00001DF6 4B                      		dec	bx
  6388 00001DF7 01C3                    		add	bx, ax		; dx=0
  6389 00001DF9 D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  6390 00001DFB 43                      		inc	bx		; BDS.secperclus
  6391 00001DFC 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  6392 00001DFF 89DE                    		mov	si, bx
  6393 00001E01 D1EB                    		shr	bx, 1
  6394 00001E03 01F3                    		add	bx, si		; number of FAT bytes ; 08/08/2023
  6395 00001E05 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  6396 00001E09 D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  6397 00001E0B 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  6398                                  					; save number of fat sectors
  6399 00001E0E EB32                    		jmp	short massage_bpb
  6400                                  ; ---------------------------------------------------------------------------
  6401                                  
  6402                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  6403                                  
  6404                                  dobig:					
  6405 00001E10 B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  6406 00001E12 52                      		push	dx		; save total sectors (high)
  6407 00001E13 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  6408 00001E16 D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  6409 00001E18 29D0                    		sub	ax, dx
  6410 00001E1A 5A                      		pop	dx
  6411 00001E1B 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  6412 00001E1E 83E801                  		sub	ax, 1
  6413 00001E21 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  6414                                  					; total	secs - reserved	secs - root dir	secs
  6415 00001E24 B302                    		mov	bl, 2
  6416 00001E26 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  6417                                  					; bx = 256 * BDS.secperclus + 2
  6418                                  
  6419                                  ; I don't understand why to add bx here!!!
  6420                                  
  6421                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  6422                                  		; 27/09/2022
  6423                                  		; (Microsoft FAT32 File	System Specification,
  6424                                  		; December 2000, Page 21)
  6425                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  6426                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  6427                                  		; 8/8/2023 (Retro DOS v5.0)
  6428                                  		; If(FATType == FAT32)
  6429                                  		;   TmpVal2 = TmpVal2 / 2;
  6430                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  6431                                  		; 8/8/2023 (Retro DOS v5.0)
  6432                                  		; If(FATType == FAT32) {
  6433                                  		;   BPB_FATSz16 = 0;
  6434                                  		;   BPB_FATSz32 = FATSz;
  6435                                  		;} else {
  6436                                  		;   BPB_FATSz16 = LOWORD(FATSz);
  6437                                  		;/* there is no BPB_FATSz32 in a FAT16 BPB */
  6438                                  		;}
  6439                                  					; dx:ax = TmpVal1, bx = TmpVal2
  6440 00001E29 01D8                    		add	ax, bx		; 
  6441 00001E2B 83D200                  		adc	dx, 0		; dx:ax = TmpVal1+TmpVal2
  6442 00001E2E 83E801                  		sub	ax, 1		
  6443 00001E31 83DA00                  		sbb	dx, 0		; dx:ax = TmpVal1+TmpVal2-1
  6444                                  
  6445                                  ; assuming dx in the table will never be bigger than bx.
  6446                                  
  6447 00001E34 F7F3                    		div	bx		; BDS.fatsecs =
  6448                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  6449 00001E36 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  6450                                  					; number of fat	sectors
  6451                                  
  6452                                  ; now, set the default filesys_id, volume label, serial number
  6453                                  
  6454                                  		; 05/08/2023
  6455                                  		; [di+1Fh] = [fbigfat]
  6456                                  		;
  6457                                  		;;mov	bl, ds:fbigfat
  6458                                  		;; 17/10/2022
  6459                                  		;mov	bl, [fbigfat]
  6460                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  6461                                  
  6462                                  		; 12/08/2023
  6463                                  		;push	ds ; ds = cs = BIOSDATA
  6464 00001E39 1E                      		push	ds
  6465 00001E3A 07                      		pop	es
  6466                                  		; 12/08/2023 
  6467                                  		; ds = cs = BIOSDATA
  6468                                  		;push	cs
  6469                                  		;pop	ds
  6470                                  		; 17/10/2022
  6471 00001E3B BD[6A06]                		mov	bp, CLEARIDS
  6472                                  		;mov	bp, 5D9h	; clear_ids
  6473                                  					; at 2C7h:5D9h = 70h:2B49h
  6474                                  					; at BIOSCODE:06ABh
  6475                                  					;	in PCDOS 7.1 IBMBIO.COM
  6476 00001E3E 0E                      		push	cs
  6477 00001E3F E8D1F7                  		call	call_bios_code
  6478                                  
  6479                                  		; 12/08/2023
  6480                                  		;pop	ds ; ds = cs = BIOSDATA
  6481                                  
  6482                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  6483                                  ; set according to the partition information. we are going to
  6484                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  6485                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  6486                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  6487                                  ; we don't do this for the bpb information from the boot record. we
  6488                                  ; are not going to change the bpb information from the boot record.
  6489                                  
  6490                                  massage_bpb:
  6491                                  		; 05/08/2023
  6492                                  		; [di+1Fh] = [fbigfat]
  6493                                  		;
  6494                                  		;; 12/12/2022
  6495                                  		;mov	bl, [fbigfat]
  6496                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6497                                  		;			; set size of fat on media
  6498                                  		;
  6499 00001E42 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6500 00001E45 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6501 00001E48 83FA00                  		cmp	dx, 0		; double word total sectors?
  6502                                  		;ja	short goodret	; don't have to change it.
  6503                                  		; 12/12/2022
  6504 00001E4B 7714                    		ja	short short goodret2
  6505                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  6506                                  		;ja	short goodret	; don't have to change it.
  6507                                  		; 12/12/2022
  6508 00001E4D 395519                  		cmp	[di+19h], dx ; 0
  6509 00001E50 770F                    		ja	short goodret2
  6510 00001E52 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  6511                                  		;jb	short goodret
  6512                                  		; 12/12/2022
  6513 00001E55 7209                    		jc	short goodret
  6514 00001E57 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6515 00001E5A 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  6516                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  6517                                  		; 12/12/2022
  6518 00001E5D 89551B                  		mov	[di+1Bh], dx ; 0 
  6519                                  goodret:
  6520                                  		;;mov	bl, ds:fbigfat
  6521                                  		; 12/12/2022
  6522                                  		;; 17/10/2022
  6523                                  		;mov	bl, [fbigfat]
  6524                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6525                                  		;			; set size of fat on media
  6526 00001E60 F8                      		clc
  6527                                  ret_hard_err:
  6528                                  		; 12/12/2022
  6529                                  goodret2:
  6530 00001E61 07                      		pop	es
  6531                                  		;pop	ds	; ds = cs = BIOSDATA ; 12/08/2023
  6532 00001E62 5B                      		pop	bx
  6533 00001E63 5F                      		pop	di
  6534 00001E64 C3                      		retn
  6535                                  
  6536                                  ; =============== S U B	R O U T	I N E =======================================
  6537                                  
  6538                                  ; 15/10/2022
  6539                                  
  6540                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  6541                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  6542                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  6543                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  6544                                  ;then subtract 1 from BPB_TOTALSECTORS.
  6545                                  
  6546                                  		; 17/10/2022
  6547                                  cover_fdisk_bug:
  6548                                  		; 12/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  6549                                  		; ds = cs
  6550 00001E65 50                      		push	ax
  6551 00001E66 52                      		push	dx
  6552 00001E67 56                      		push	si
  6553                                  		; 12/08/2023
  6554 00001E68 803E[7401]29            		cmp	byte [disksector+26h], 29h
  6555                                  		;cmp	byte [cs:disksector+26h], 29h
  6556                                  					; [disksector+EXT_BOOT.SIG],
  6557                                  					; EXT_BOOT_SIGNATURE
  6558 00001E6D 742B                    		jz	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
  6559 00001E6F 817F073130              		cmp	word [bx+7], 3031h
  6560                                  		;cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
  6561 00001E74 7506                    		jnz	short cfb_chk_totalsecs ; 11/08/2023
  6562 00001E76 807F0A30                		cmp	byte [bx+10], '0'
  6563                                  		;cmp	byte [cs:bx+10], '0'
  6564 00001E7A 751E                    		jnz	short cfb_retit
  6565                                  cfb_chk_totalsecs:	; 11/08/2023
  6566                                  		; 17/10/2022		
  6567 00001E7C BE[5901]                		mov	si, disksector+11 ; 14Eh+0Bh
  6568                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6569                                  		; 12/08/2023
  6570 00001E7F 837C0800                		cmp	word [si+8], 0
  6571                                  		;cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
  6572                                  					; just to make sure.
  6573 00001E83 7415                    		jz	short cfb_retit
  6574                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6575                                  		;add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
  6576                                  		; 12/08/2023
  6577 00001E85 8B4408                  		mov	ax, [si+8]
  6578 00001E88 034411                  		add	ax, [si+11h]
  6579                                  
  6580 00001E8B 730D                    		jnb	short cfb_retit
  6581 00001E8D 750B                    		jnz	short cfb_retit
  6582                                  					; if carry set and ax=0
  6583 00001E8F FF4C08                  		dec	word [si+8]
  6584                                  		;dec	word [cs:si+8]	; 0 -> 0FFFFh
  6585                                  					; then decrease	BPB_TOTALSECTORS by 1
  6586 00001E92 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
  6587 00001E96 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
  6588                                  cfb_retit:				
  6589 00001E9A 5E                      		pop	si
  6590 00001E9B 5A                      		pop	dx
  6591 00001E9C 58                      		pop	ax
  6592 00001E9D C3                      		retn
  6593                                  
  6594                                  ; ---------------------------------------------------------------------------
  6595                                  
  6596 00001E9E 0200                    word2:		dw 2
  6597 00001EA0 0300                    word3:		dw 3
  6598 00001EA2 0002                    word512:	dw 512
  6599                                  
  6600                                  ; =============== S U B	R O U T	I N E =======================================
  6601                                  
  6602                                  ; 15/10/2022
  6603                                  
  6604                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
  6605                                  ; the form factor. it is assumed that the bpbs for the various form factors
  6606                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
  6607                                  ; as the bpb on the drive.
  6608                                  ;
  6609                                  ; no attempt is made to preserve registers since we are going to jump to
  6610                                  ; sysinit straight after this routine.
  6611                                  
  6612                                  setdrvparms:
  6613 00001EA4 31DB                    		xor	bx, bx
  6614                                  		; 18/10/2022
  6615 00001EA6 C43E[1901]              		les	di, [start_bds] ; get first bds in list
  6616                                  _next_bds:				
  6617 00001EAA 06                      		push	es
  6618 00001EAB 57                      		push	di
  6619 00001EAC 268A5D22                		mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
  6620 00001EB0 80FB05                  		cmp	bl, 5		; ffHardFile
  6621 00001EB3 753E                    		jnz	short nothardff
  6622 00001EB5 31D2                    		xor	dx, dx
  6623 00001EB7 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  6624 00001EBB 09C0                    		or	ax, ax
  6625 00001EBD 7508                    		jnz	short get_ccyl
  6626 00001EBF 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  6627 00001EC3 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  6628                                  
  6629                                  get_ccyl:				
  6630 00001EC7 52                      		push	dx
  6631 00001EC8 50                      		push	ax
  6632 00001EC9 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
  6633 00001ECD 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
  6634                                  					; assume sectors per cyl. < 64k.
  6635 00001ED1 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
  6636 00001ED3 58                      		pop	ax
  6637 00001ED4 5A                      		pop	dx		; dx:ax = total sectors
  6638 00001ED5 50                      		push	ax
  6639 00001ED6 89D0                    		mov	ax, dx
  6640 00001ED8 31D2                    		xor	dx, dx
  6641 00001EDA F7F1                    		div	cx
  6642 00001EDC 2EA3[2105]              		mov	[cs:temp_h], ax
  6643 00001EE0 58                      		pop	ax
  6644 00001EE1 F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
  6645 00001EE3 09D2                    		or	dx, dx
  6646 00001EE5 7401                    		jz	short no_cyl_rnd ; came out even
  6647 00001EE7 40                      		inc	ax		; round up
  6648                                  
  6649                                  no_cyl_rnd:				
  6650 00001EE8 26894525                		mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
  6651 00001EEC 06                      		push	es
  6652 00001EED 1F                      		pop	ds
  6653 00001EEE 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
  6654                                  					; ds:si -> bpb for hard file
  6655 00001EF1 EB55                    		jmp	short set_recbpb
  6656                                  ; ---------------------------------------------------------------------------
  6657                                  
  6658                                  nothardff:				
  6659 00001EF3 0E                      		push	cs
  6660 00001EF4 1F                      		pop	ds
  6661                                  
  6662                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
  6663                                  ; we can just go and deal with the next bds at label go_to_next_bds.
  6664                                  
  6665                                  		; 10/12/2022
  6666                                  		; ds = cs
  6667                                  		; 17/10/2022 (ds=cs)
  6668 00001EF5 803E[8F15]01            		cmp	byte [fakefloppydrv], 1
  6669                                  		;cmp	byte [cs:fakefloppydrv], 1
  6670 00001EFA 7454                    		jz	short go_to_next_bds
  6671 00001EFC 80FB07                  		cmp	bl, 7		; ffother
  6672                                  					; special case "other" type of medium
  6673 00001EFF 753D                    		jnz	short not_process_other
  6674                                  process_other:
  6675 00001F01 31D2                    		xor	dx, dx
  6676 00001F03 8B4525                  		mov	ax, [di+25h]	; [di+BDS.cylinders]
  6677 00001F06 F76536                  		mul	word [di+36h]	; [di+BDS.rheads]
  6678 00001F09 F76534                  		mul	word [di+34h]	; [di+BDS.rsecpertrack]
  6679 00001F0C 89452F                  		mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
  6680                                  					; have the total number of sectors
  6681 00001F0F 48                      		dec	ax
  6682 00001F10 B201                    		mov	dl, 1
  6683                                  _again:					
  6684 00001F12 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6685 00001F15 7206                    		jb	short _@@
  6686 00001F17 D1E8                    		shr	ax, 1
  6687 00001F19 D0E2                    		shl	dl, 1
  6688 00001F1B EBF5                    		jmp	short _again
  6689                                  ; ---------------------------------------------------------------------------
  6690                                  
  6691                                  _@@:					
  6692 00001F1D 80FA01                  		cmp	dl, 1		; is it a small disk ?
  6693 00001F20 7405                    		jz	short __@@	; yes, 224 root entries is enuf
  6694 00001F22 C7452DF000              		mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
  6695                                  __@@:					
  6696 00001F27 885529                  		mov	[di+29h], dl	; [di+BDS.rsecperclus]
  6697                                  
  6698                                  ; logic to get the sectors/fat area.
  6699                                  ; fat entry is assumed to be 1.5 bytes!!!
  6700                                  
  6701                                  		; 10/12/2022
  6702                                  		; ds = cs
  6703                                  		; 17/10/2022 (ds=cs)
  6704 00001F2A F726[A01E]              		mul	word [word3]
  6705 00001F2E F736[9E1E]              		div	word [word2]
  6706 00001F32 31D2                    		xor	dx, dx
  6707 00001F34 F736[A21E]              		div	word [word512]
  6708                                  		;
  6709                                  		; 10/12/2022
  6710                                  		;mul	word [cs:word3]	; * 3 ; mul word [cs:word3]
  6711                                  		;div	word [cs:word2]	; / 2 ; div word [cs:word2]
  6712                                  		;xor	dx, dx
  6713                                  		;div	word [cs:word512] ; / 512 ; div word [cs:word512]
  6714                                  		;
  6715 00001F38 40                      		inc	ax		; + 1
  6716                                  no_round_up:
  6717 00001F39 894532                  		mov	[di+32h], ax	; [di+BDS.rfatsecs]
  6718 00001F3C EB12                    		jmp	short go_to_next_bds
  6719                                  ; ---------------------------------------------------------------------------
  6720                                  
  6721                                  not_process_other:			
  6722 00001F3E D1E3                    		shl	bx, 1		; bx is word index into table of bpbs
  6723                                  		;mov	si, bpbtable
  6724                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
  6725                                  		; 09/12/2022
  6726                                  		;mov	si, BPBTABLE
  6727                                  		;mov	si, [bx+si]	; get address of bpb
  6728                                  		; 10/12/2022
  6729                                  		;mov	si, [BPBTABLE+bx]
  6730                                  		; 13/12/2022
  6731                                  		;mov	si, [SYSINITOFFSET+bpbtable+bx] ; wrong ! 14/08/2023
  6732                                  		; 14/08/2023
  6733                                  		SYSINIT_OFFSET equ (SYSINITSEG-DOSBIODATASEG<<4)
  6734                                  							; correct offset
  6735 00001F40 8BB7[9286]              		mov	si, [bx+SYSINIT_OFFSET+bpbtable]
  6736                                  
  6737                                  		; 28/08/2023
  6738 00001F44 81C6103C                		add	si, SYSINIT_OFFSET
  6739                                  set_recbpb:				
  6740 00001F48 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB]
  6741                                  					; es:di -> recbpb
  6742 00001F4B B91900                  		mov	cx, 25		; bpbx.size
  6743 00001F4E F3A4                    		rep movsb		; move (size bpbx) bytes	
  6744                                  go_to_next_bds:				
  6745 00001F50 5F                      		pop	di
  6746 00001F51 07                      		pop	es		; restore pointer to bds
  6747 00001F52 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
  6748 00001F55 83FFFF                  		cmp	di, 0FFFFh	; -1
  6749 00001F58 740A                    		jz	short got_end_of_bds_chain
  6750 00001F5A E94DFF                  		jmp	_next_bds
  6751                                  ; ---------------------------------------------------------------------------
  6752                                  
  6753                                  		; 18/12/2022
  6754                                  ;got_end_of_bds_chain:			
  6755                                  		;retn
  6756                                  
  6757                                  ; =============== S U B	R O U T	I N E =======================================
  6758                                  
  6759                                  ; 15/10/2022
  6760                                  ; 30/12/2018 - Retro DOS v4.0
  6761                                  
  6762                                  ; al = device number
  6763                                  
  6764                                  print_init:	
  6765 00001F5D 98                      		cbw
  6766 00001F5E 89C2                    		mov	dx, ax
  6767 00001F60 B401                    		mov	ah, 1
  6768 00001F62 CD17                    		int	17h		; PRINTER - INITIALIZE
  6769                                  					; DX = printer port (0-3)
  6770                                  					; Return: AH = status
  6771                                  got_end_of_bds_chain:	; 18/12/2022
  6772 00001F64 C3                      		retn
  6773                                  
  6774                                  ; =============== S U B	R O U T	I N E =======================================
  6775                                  
  6776                                  ; al = device number
  6777                                  
  6778                                  aux_init:
  6779 00001F65 98                      		cbw
  6780 00001F66 89C2                    		mov	dx, ax
  6781                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
  6782                                  					; 2400,n,1,8 (msequ.inc)
  6783                                  		;mov	ah, 0
  6784                                  		; 10/12/2022
  6785 00001F68 B8A300                  		mov	ax, 00A3h
  6786 00001F6B CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
  6787                                  					; 	AL = initializing parameters,
  6788                                  					;	DX = port number (0-3)
  6789                                  					; Return: AH = RS-232 status code bits,
  6790                                  					;	  AL = modem status bits
  6791 00001F6D C3                      		retn
  6792                                  
  6793                                  ; =============== S U B	R O U T	I N E =======================================
  6794                                  
  6795                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6796                                  ; 30/12/2018 - Retro DOS v4.0
  6797                                  ; 03/06/2018 - Retro DOS v3.0
  6798                                  ; (19/03/2018 - Retro DOS v2.0)
  6799                                  
  6800                                  ; domini **********************************************************************
  6801                                  ;
  6802                                  ;mini disk initialization routine. called right after dohard
  6803                                  ;modified for >2 hardfile support
  6804                                  ;
  6805                                  ; **cs=ds=es=datagrp
  6806                                  ;
  6807                                  ; **domini will search for every extended partition in the system, and
  6808                                  ;   initialize it.
  6809                                  ;
  6810                                  ; **bdsm stands for bds table for mini disk and located right after the label
  6811                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
  6812                                  ;   address of bdsm table.
  6813                                  ;
  6814                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
  6815                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
  6816                                  ;   right now, they are called as ismini, hidden_trks respectively.
  6817                                  ;
  6818                                  ; **domini will use the same routine in sethard routine after label set2 to
  6819                                  ;   save coding.
  6820                                  ;
  6821                                  ; **drvmax determined in dohard routine will be used for the next
  6822                                  ;   available logical mini disk drive number.
  6823                                  ;
  6824                                  ; input: drvmax, dskdrvs
  6825                                  ;
  6826                                  ; output: minidisk installed. bdsm table established and installed to bds.
  6827                                  ;	  end_of_bdsm - ending offset address of bdsm.
  6828                                  ;
  6829                                  ; called modules:
  6830                                  ;		  getboot
  6831                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
  6832                                  ;
  6833                                  ;		  setmini (new, it will use set2 routine)
  6834                                  ;
  6835                                  ; variables used: end_of_bdsm
  6836                                  ;		  rom_minidisk_num
  6837                                  ;		  mini_hdlim, mini_seclim
  6838                                  ;		  BDS_STRUC, start_bds
  6839                                  ;
  6840                                  ;******************************************************************************
  6841                                  
  6842                                  		; 19/10/2022
  6843                                  domini:	
  6844 00001F6E 8A36[FF15]              		mov	dh, [hnum]	; get number of hardfiles
  6845                                  		; 10/12/2022
  6846 00001F72 20F6                    		and	dh, dh
  6847                                  		;cmp	dh, 0
  6848 00001F74 7430                    		jz	short dominiret	; no hard file?	then exit.
  6849 00001F76 B280                    		mov	dl, 80h		; start	with hardfile 80h
  6850                                  domini_loop:				
  6851 00001F78 52                      		push	dx
  6852 00001F79 8816[FE15]              		mov	[rom_minidisk_num], dl
  6853 00001F7D B408                    		mov	ah, 8
  6854 00001F7F CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6855                                  					; DL = drive number
  6856                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6857                                  					; DL = number of consecutive drives
  6858                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6859                                  		
  6860                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  6861                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2B36h
  6862                                  		;inc	dh
  6863                                  		;xor	ax, ax
  6864                                  		;mov	al, dh
  6865 00001F81 31C0                    		xor	ax, ax
  6866 00001F83 88F0                    		mov	al, dh	; <= 255
  6867 00001F85 40                      		inc	ax	; (0FFh -> 100h)
  6868 00001F86 A3[0416]                		mov	[mini_hdlim], ax ; # of heads
  6869                                  		;and	cl, 3Fh
  6870                                  		;mov	al, cl
  6871                                  		; 08/08/2023
  6872 00001F89 88C8                    		mov	al, cl
  6873 00001F8B 83E03F                  		and	ax, 3Fh
  6874 00001F8E A3[0616]                		mov	[mini_seclim], ax ; # of sectors/track
  6875 00001F91 06                      		push	es
  6876 00001F92 8A16[FE15]              		mov	dl, [rom_minidisk_num]
  6877 00001F96 E886FB                  		call	getboot		; read master boot record into
  6878                                  					; initbootsegment:bootbias
  6879 00001F99 7203                    		jb	short domininext
  6880 00001F9B E80900                  		call	find_mini_partition
  6881                                  domininext:				
  6882 00001F9E 07                      		pop	es
  6883 00001F9F 5A                      		pop	dx
  6884 00001FA0 FEC2                    		inc	dl		; next hard file
  6885 00001FA2 FECE                    		dec	dh
  6886 00001FA4 75D2                    		jnz	short domini_loop
  6887                                  dominiret:				
  6888 00001FA6 C3                      		retn
  6889                                  
  6890                                  ; =============== S U B	R O U T	I N E =======================================
  6891                                  
  6892                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6893                                  ; 30/12/2018 - Retro DOS v4.0
  6894                                  
  6895                                  ;find_mini_partition tries to find every extended partition on a disk.
  6896                                  ;at entry:	di -> bdsm entry
  6897                                  ;		es:bx -> 07c0:bootbias - master boot record
  6898                                  ;		rom_minidisk_num - rom drive number
  6899                                  ;		drvmax - logical drive number
  6900                                  ;		mini_hdlim, mini_seclim
  6901                                  ;
  6902                                  ;called routine: setmini which uses set2 (in sethard routine)
  6903                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
  6904                                  
  6905                                  find_mini_partition:	
  6906 00001FA7 81C3C201                		add	bx, 1C2h	; bx ->	file system id
  6907                                  fmpnext:				
  6908 00001FAB 26803F05                		cmp	byte [es:bx], 5 ; 5 = extended partition id.
  6909 00001FAF 740A                    		jz	short fmpgot
  6910 00001FB1 83C310                  		add	bx, 16
  6911 00001FB4 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6912 00001FB8 75F1                    		jnz	short fmpnext
  6913                                  		;jmp	short fmpnextfound ; extended partition	not found
  6914                                  		; 18/12/2022
  6915                                  fmpnextfound:
  6916 00001FBA C3                      		retn
  6917                                  
  6918                                  ;		; 30/07/2019 - Retro DOS v3.2
  6919                                  ;		jb	short fmpnext
  6920                                  ;fmpret:
  6921                                  ;		retn	; 29/05/2019
  6922                                  
  6923                                  ; ---------------------------------------------------------------------------
  6924                                  
  6925                                  		; 19/10/2022
  6926                                  fmpgot:					; found my partition.				
  6927 00001FBB E8A500                  		call	dmax_check	; check	for drvmax already 26
  6928 00001FBE 73FA                    		jnb	short fmpnextfound ; done if too many
  6929 00001FC0 8B3E[0216]              		mov	di, [end_of_bdss] ; get next free bds
  6930 00001FC4 C745470100              		mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  6931                                  		; 10/12/2022
  6932 00001FC9 804D2301                		or	byte [di+23h], 1
  6933                                  		;or	word [di+23h], 1 ; [di+BDS.flags]
  6934                                  					; fNon_Removable
  6935 00001FCD C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  6936                                  					; ffHardFile
  6937 00001FD1 C606[8815]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
  6938 00001FD6 A1[0416]                		mov	ax, [mini_hdlim]
  6939 00001FD9 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
  6940 00001FDC A1[0616]                		mov	ax, [mini_seclim]
  6941 00001FDF 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
  6942 00001FE2 A0[FE15]                		mov	al, [rom_minidisk_num]
  6943 00001FE5 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
  6944                                  					; set physical number
  6945 00001FE8 A0[7500]                		mov	al, [drvmax]
  6946 00001FEB 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  6947                                  					; set logical number
  6948 00001FEE 26837F0A00              		cmp	word [es:bx+10], 0
  6949 00001FF3 7707                    		ja	short fmpgot_cont
  6950 00001FF5 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
  6951                                  					; only lower word is meaningful.
  6952 00001FFA 72BE                    		jb	short fmpnextfound
  6953                                  					; should be bigger than 64 sectors at least
  6954                                  fmpgot_cont:				
  6955 00001FFC 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
  6956 00001FFF 268A7702                		mov	dh, [es:bx+2]	; cylinder
  6957 00002003 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
  6958 00002006 D0C6                    		rol	dh, 1
  6959 00002008 D0C6                    		rol	dh, 1
  6960 0000200A 268A5703                		mov	dl, [es:bx+3]	; cyl byte
  6961 0000200E 895549                  		mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
  6962                                  					; set hidden trks
  6963 00002011 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
  6964 00002015 268A7701                		mov	dh, [es:bx+1]	; head
  6965 00002019 8A16[FE15]              		mov	dl, [rom_minidisk_num]
  6966 0000201D BB0002                  		mov	bx, 200h	; bootbias
  6967 00002020 B80102                  		mov	ax, 201h
  6968 00002023 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  6969                                  					; AL = number of sectors to read, CH = track, CL = sector
  6970                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  6971                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  6972 00002025 7293                    		jc	short fmpnextfound
  6973 00002027 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  6974                                  
  6975                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  6976                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2C7Ch
  6977 0000202A 26817F3C55AA            		cmp	word [es:bx+3Ch], 0AA55h ; 03C2h+03Ch = 3FEh
  6978 00002030 7588                    		jne	short fmpnextfound ; not a valid boot sector !
  6979                                  
  6980                                  		; 13/08/2023
  6981                                  		;push	es
  6982 00002032 E80800                  		call	setmini		; install a mini disk.
  6983                                  					; bx value saved.
  6984                                  		;pop	es  ; 13/08/2023
  6985 00002035 7203                    		jc	short fmpnextchain
  6986 00002037 E83E00                  		call	xinstall_bds	; -- install the bdsm into table
  6987                                  fmpnextchain:
  6988 0000203A E96EFF                  		jmp	fmpnext		; let's find out
  6989                                  					; if we	have any chained partition
  6990                                  ; ---------------------------------------------------------------------------
  6991                                  
  6992                                  		; 18/12/2022
  6993                                  ;fmpnextfound:				
  6994                                  		;retn
  6995                                  
  6996                                  ; =============== S U B	R O U T	I N E =======================================
  6997                                  
  6998                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  6999                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  7000                                  
  7001                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
  7002                                  	
  7003 0000203D 57                      		push	di
  7004 0000203E 53                      		push	bx
  7005                                  		; 12/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  7006                                  		; ds = cs = BIOSDATA segment
  7007                                  		;push	ds
  7008 0000203F 06                      		push	es
  7009                                  setmini_1:				
  7010 00002040 26803F01                		cmp	byte [es:bx], 1 ; FAT12 partition
  7011 00002044 741A                    		jz	short setmini_2
  7012 00002046 26803F04                		cmp	byte [es:bx], 4 ; FAT16 partition
  7013 0000204A 7414                    		jz	short setmini_2
  7014 0000204C 26803F06                		cmp	byte [es:bx], 6 ; FAT16 BIG partition
  7015 00002050 740E                    		jz	short setmini_2
  7016 00002052 83C310                  		add	bx, 16
  7017 00002055 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  7018 00002059 75E5                    		jnz	short setmini_1
  7019 0000205B F9                      		stc
  7020 0000205C 07                      		pop	es
  7021                                  		; 12/08/2023
  7022                                  		;pop	ds
  7023 0000205D 5B                      		pop	bx
  7024 0000205E 5F                      		pop	di
  7025 0000205F C3                      		retn
  7026                                  
  7027                                  ; ---------------------------------------------------------------------------
  7028                                  setmini_2:
  7029 00002060 E968FB                  		jmp	set2		; branch into middle of sethard
  7030                                  
  7031                                  ; =============== S U B	R O U T	I N E =======================================
  7032                                  
  7033                                  ; 15/10/2022
  7034                                  ; 28/12/2018 - Retro DOS v4.0
  7035                                  ;
  7036                                  ; dmax_check --- call this when we want to install a new drive.
  7037                                  ;		it checks for drvmax < 26 to see if there is
  7038                                  ;		a drive letter left.
  7039                                  ;
  7040                                  ;	drvmax < 26 : carry SET!
  7041                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
  7042                                  ;			trash ax
  7043                                  
  7044                                  dmax_check:
  7045 00002063 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
  7046 00002068 720D                    		jb	short dmax_ok	; return with carry if okay
  7047 0000206A 06                      		push	es
  7048                                  		;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
  7049 0000206B B83104                  		mov	ax, SYSINITSEG	; 17/10/2022	
  7050 0000206E 8EC0                    		mov	es, ax
  7051                                  		; 18/10/2022
  7052 00002070 26C606[8103]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
  7053                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
  7054                                  					; set message flag
  7055                                  					; [SYSINIT+toomanydrivesflag]
  7056 00002076 07                      		pop	es
  7057                                  
  7058                                  		;;push	es
  7059                                  		;;mov	ax,SYSINIT_SEG
  7060                                  		;;mov	es,ax
  7061                                  		;;mov	byte [es:toomanydrivesflag],1
  7062                                  					; set message flag
  7063                                  		;;pop	es
  7064                                  		;
  7065                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
  7066                                  dmax_ok:
  7067 00002077 C3                      		retn
  7068                                  
  7069                                  ; =============== S U B	R O U T	I N E =======================================
  7070                                  
  7071                                  ; 18/10/2022
  7072                                  ; 15/10/2022
  7073                                  ; 28/12/2018 - Retro DOS v4.0						
  7074                                  ;								 
  7075                                  ;	link next bds (at ds:di) into the chain. assume that the
  7076                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
  7077                                  ;	  dskdrv_table, and end_of_bdss.	
  7078                                  
  7079                                  xinstall_bds:		
  7080 00002078 56                      		push	si
  7081 00002079 53                      		push	bx
  7082 0000207A 8B36[1901]              		mov	si, [start_bds]	; get first bds
  7083                                  xinstall_bds_1:				
  7084 0000207E 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
  7085 00002081 7404                    		jz	short xinstall_bds_2 ; skip ahead if so
  7086                                  		;mov	si, [si+BDS.link]
  7087 00002083 8B34                    		mov	si, [si]	; chain	through	list
  7088 00002085 EBF7                    		jmp	short xinstall_bds_1
  7089                                  ; ---------------------------------------------------------------------------
  7090                                  
  7091                                  xinstall_bds_2:				
  7092                                  		;mov	[si+BDS.link], di
  7093 00002087 893C                    		mov	[si], di
  7094                                  		;mov	[si+BDS.link+2], ds
  7095 00002089 8C5C02                  		mov	[si+2], ds
  7096                                  		;mov	word [di+BDS.link], -1
  7097 0000208C C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
  7098                                  		;mov	[di+BDS.link+2], ds
  7099 00002090 8C5D02                  		mov	[di+2], ds ; might as well plug segment
  7100                                  		; 20/03/2019 - Retro DOS v4.0
  7101                                  		;lea	bx, [di+BDS.BPB]
  7102 00002093 8D5D06                  		lea	bx, [di+6]
  7103 00002096 8B36[0016]              		mov	si, [last_dskdrv_table]
  7104 0000209A 891C                    		mov	[si], bx
  7105 0000209C 8306[0016]02            		add	word [last_dskdrv_table], 2
  7106 000020A1 FE06[7500]              		inc	byte [drvmax]
  7107 000020A5 8306[0216]64            		add	word [end_of_bdss], 100 ; BDS.size = 100
  7108 000020AA 5B                      		pop	bx
  7109 000020AB 5E                      		pop	si
  7110 000020AC C3                      		retn
  7111                                  
  7112                                  ; =============== S U B	R O U T	I N E =======================================
  7113                                  
  7114                                  ; 17/10/2022
  7115                                  ; 15/10/2022
  7116                                  ; 28/12/2018 - Retro DOS v4.0
  7117                                  ; 03/06/2018 - Retro DOS v3.0
  7118                                  
  7119                                  cmos_clock_read:	
  7120 000020AD 50                      		push	ax
  7121 000020AE 51                      		push	cx
  7122 000020AF 52                      		push	dx
  7123 000020B0 55                      		push	bp
  7124 000020B1 31ED                    		xor	bp, bp
  7125                                  loop_clock:				
  7126 000020B3 31C9                    		xor	cx, cx
  7127 000020B5 31D2                    		xor	dx, dx
  7128 000020B7 B402                    		mov	ah, 2
  7129 000020B9 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  7130                                  					; Return: CH = hours in	BCD
  7131                                  					; CL = minutes in BCD
  7132                                  					; DH = seconds in BCD
  7133 000020BB 83F900                  		cmp	cx, 0
  7134 000020BE 7512                    		jnz	short clock_present
  7135 000020C0 83FA00                  		cmp	dx, 0
  7136 000020C3 750D                    		jnz	short clock_present
  7137 000020C5 83FD01                  		cmp	bp, 1		; read again after a slight delay, in case clock
  7138 000020C8 741C                    		jz	short no_readdate ; was at zero setting.
  7139 000020CA 45                      		inc	bp		; only perform delay once.
  7140 000020CB B90040                  		mov	cx, 4000h	; 16384
  7141                                  delay:					
  7142 000020CE E2FE                    		loop	delay
  7143 000020D0 EBE1                    		jmp	short loop_clock
  7144                                  ; ---------------------------------------------------------------------------
  7145                                  
  7146                                  clock_present:				
  7147 000020D2 2EC606[F304]01          		mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
  7148 000020D8 E81000                  		call	cmosck		; reset	cmos clock rate	that may be
  7149                                  					; possibly destroyed by	cp dos and
  7150                                  					; post routine did not restore that.
  7151 000020DB 56                      		push	si
  7152 000020DC E817F3                  		call	read_real_date	; read real-time clock for date
  7153 000020DF FA                      		cli
  7154                                  		;mov	ds:daycnt, si	; set system date
  7155 000020E0 8936[F004]              		mov	[daycnt], si
  7156 000020E4 FB                      		sti
  7157 000020E5 5E                      		pop	si
  7158                                  
  7159                                  no_readdate:				
  7160 000020E6 5D                      		pop	bp
  7161 000020E7 5A                      		pop	dx
  7162 000020E8 59                      		pop	cx
  7163 000020E9 58                      		pop	ax
  7164 000020EA C3                      		retn
  7165                                  
  7166                                  ; ---------------------------------------------------------------------------
  7167                                  
  7168                                  ; the following code is written by jack gulley in engineering group.
  7169                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
  7170                                  ; and if the use cold boot the system to use pc dos while running cp dos,
  7171                                  ; the cmos clock rate are still slow which slow down disk operations
  7172                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
  7173                                  ; to fix this problem at the request of cp dos.
  7174                                  ;
  7175                                  ; the program is modified to be run on msinit. equates are defined
  7176                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
  7177                                  ;
  7178                                  ;  the following code cmosck is used to insure that the cmos has not
  7179                                  ;	had its rate controls left in an invalid state on older at's.
  7180                                  ;
  7181                                  ;	it checks for an at model byte "fc" with a submodel type of
  7182                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
  7183                                  ;	bits in case post has not done it. this initilization routine
  7184                                  ;	is only needed once when dos loads. it should be run as soon
  7185                                  ;	as possible to prevent slow diskette access.
  7186                                  ;
  7187                                  ;	this code exposes one to dos clearing cmos setup done by a
  7188                                  ;	resident program that hides and re-boots the system.
  7189                                  
  7190                                  cmosck:					; check and reset rtc rate bits
  7191                                  
  7192                                  ;model byte and submodel byte were already determined in msinit.
  7193                                  
  7194                                  	; 16/06/2018 - Retro DOS v3.0
  7195                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
  7196                                  			
  7197 000020EB 50                      		push	ax
  7198 000020EC 2E803E[3606]FC          		cmp	byte [cs:model_byte], 0FCh
  7199 000020F2 7525                    		jnz	short cmosck9	; Exit if not an AT model
  7200 000020F4 2E803E[3706]06          		cmp	byte [cs:secondary_model_byte], 6
  7201                                  					; Is it 06 for the industral AT ?
  7202 000020FA 7408                    		jz	short cmosck4	; Go reset CMOS periodic rate if 06
  7203 000020FC 2E803E[3706]04          		cmp	byte [cs:secondary_model_byte], 4
  7204                                  					; Is it 00, 01, 02, or 03 ?
  7205 00002102 7315                    		jnb	short cmosck9	; EXIT if problem fixed by POST
  7206                                  					; Also,Secondary_model_byte = 0
  7207                                  					;   when AH=0C0h, int 15h failed.
  7208                                  					;	RESET THE CMOS PERIODIC RATE
  7209                                  					;  Model=FC submodel=00,01,02,03 or 06
  7210                                  cmosck4:				
  7211 00002104 B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
  7212                                  					; NMI disabled on return
  7213 00002106 B426                    		mov	ah, 26h		; 00100110b
  7214                                  					; Set divider & rate selection
  7215 00002108 E83000                  		call	cmos_write
  7216 0000210B B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
  7217                                  					; NMI disabled on return
  7218 0000210D E80B00                  		call	cmos_read
  7219 00002110 2407                    		and	al, 7		; 00000111b
  7220                                  					; clear SET,PIE,AIE,UIE,SQWE
  7221 00002112 88C4                    		mov	ah, al
  7222 00002114 B00B                    		mov	al, 0Bh		; cmos_reg_b
  7223                                  					; NMI enabled on return
  7224 00002116 E82200                  		call	cmos_write
  7225                                  cmosck9:				
  7226 00002119 58                      		pop	ax
  7227 0000211A C3                      		retn
  7228                                  
  7229                                  ; =============== S U B	R O U T	I N E =======================================
  7230                                  
  7231                                  ;--- CMOS_READ -----------------------------------------------------------------
  7232                                  ;		read byte from cmos system clock configuration table	       :
  7233                                  ;									       :
  7234                                  ; input: (al)=	cmos table address to be read				       :
  7235                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7236                                  ;		bits 6-0 = address of table location to read		       :
  7237                                  ;									       :
  7238                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
  7239                                  ;		on then nmi left disabled.  during the cmos read both nmi and  :
  7240                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7241                                  ;		the cmos address register is pointed to a default value and    :
  7242                                  ;		the interrupt flag restored to the entry state on return.      :
  7243                                  ;		only the (al) register and the nmi state is changed.	       :
  7244                                  ;-------------------------------------------------------------------------------
  7245                                  
  7246                                  cmos_read:				; read location (al) into (al)	
  7247 0000211B 9C                      		pushf
  7248 0000211C FA                      		cli
  7249 0000211D 53                      		push	bx
  7250 0000211E 50                      		push	ax		; AL = cmos table address to be read
  7251 0000211F 0C80                    		or	al, 80h
  7252 00002121 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7253                                  					; RTC Seconds
  7254 00002123 90                      		nop			; (undocumented delay needed)
  7255 00002124 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7256 00002126 89C3                    		mov	bx, ax
  7257 00002128 58                      		pop	ax
  7258 00002129 2480                    		and	al, 80h
  7259 0000212B 0C0F                    		or	al, 0Fh
  7260 0000212D E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7261                                  					; RTC Seconds
  7262 0000212F 90                      		nop
  7263 00002130 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7264 00002132 89D8                    		mov	ax, bx
  7265 00002134 5B                      		pop	bx
  7266 00002135 0E                      		push	cs		; *place code segment in stack and
  7267 00002136 E80100                  		call	cmos_popf	; *handle popf for b- level 80286
  7268 00002139 C3                      		retn			; return with flags restored
  7269                                  
  7270                                  ; ---------------------------------------------------------------------------
  7271                                  
  7272                                  cmos_popf:				
  7273 0000213A CF                      		iret			; popf for level b- parts
  7274                                  					; return far and restore flags
  7275                                  
  7276                                  ; =============== S U B	R O U T	I N E =======================================
  7277                                  
  7278                                  ;--- cmos_write ----------------------------------------------------------------
  7279                                  ;		write byte to cmos system clock configuration table	       :
  7280                                  ;									       :
  7281                                  ; input: (al)=	cmos table address to be written to			       :
  7282                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7283                                  ;		bits 6-0 = address of table location to write		       :
  7284                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
  7285                                  ;									       :
  7286                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
  7287                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
  7288                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7289                                  ;		the cmos address register is pointed to a default value and    :
  7290                                  ;		the interrupt flag restored to the entry state on return.      :
  7291                                  ;		only the cmos location and the nmi state is changed.	       :
  7292                                  ;-------------------------------------------------------------------------------
  7293                                  
  7294                                  cmos_write:				; write (ah) to location (al)
  7295 0000213B 9C                      		pushf			;
  7296 0000213C 50                      		push	ax		; save work register values
  7297 0000213D FA                      		cli
  7298 0000213E 50                      		push	ax		; save user nmi	state
  7299 0000213F 0C80                    		or	al, 80h		; disable nmi for us
  7300 00002141 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7301                                  					; RTC Seconds
  7302 00002143 90                      		nop
  7303 00002144 88E0                    		mov	al, ah
  7304 00002146 E671                    		out	71h, al		; CMOS Memory/RTC Data Register
  7305 00002148 58                      		pop	ax		; get user nmi
  7306 00002149 2480                    		and	al, 80h
  7307 0000214B 0C0F                    		or	al, 0Fh
  7308 0000214D E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7309                                  					; RTC Seconds
  7310 0000214F 90                      		nop
  7311 00002150 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7312 00002152 58                      		pop	ax		; restore work registers
  7313 00002153 0E                      		push	cs		; *place code segment in stack and
  7314 00002154 E8E3FF                  		call	cmos_popf	; *handle popf for b- level 80286
  7315 00002157 C3                      		retn
  7316                                  
  7317                                  ; 21/12/2022
  7318                                  ; ---------------------------------------------------------------------------
  7319                                  ; ---------------------------------------------------------------------------
  7320                                  %if 0
  7321                                  
  7322                                  ; ---------------------------------------------------------------------------
  7323                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
  7324                                  ; ---------------------------------------------------------------------------
  7325                                  ; The following routines provide support for reading in the file MSDOS.SYS.
  7326                                  ; ---------------------------------------------------------------------------
  7327                                  
  7328                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7329                                  ;
  7330                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
  7331                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
  7332                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
  7333                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.) 
  7334                                  
  7335                                  ; =============== S U B	R O U T	I N E =======================================
  7336                                  
  7337                                  ; GetClus, read in a cluster at a specified address
  7338                                  ;
  7339                                  ;  bx = cluster to read
  7340                                  ;  cx = sectors per cluster
  7341                                  ;  es:di = load location
  7342                                  
  7343                                  ; 17/10/2022
  7344                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
  7345                                  ; 09/12/2022
  7346                                  DISKRD equ diskrd
  7347                                  
  7348                                  		; 17/10/2022
  7349                                  getclus:				
  7350                                  		push	cx
  7351                                  		push	di
  7352                                  		mov	[cs:doscnt], cx
  7353                                  		mov	ax, bx
  7354                                  		dec	ax
  7355                                  		dec	ax
  7356                                  		mul	cx		; convert to logical sector
  7357                                  					; dx:ax	= matching logical sector number
  7358                                  					;	  starting from the data sector
  7359                                  		add	ax, [cs:bios_l]
  7360                                  		adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
  7361                                  unpack:					
  7362                                  		push	ds
  7363                                  		push	ax
  7364                                  		push	bx
  7365                                  		mov	si, [cs:fatloc]
  7366                                  		mov	ds, si
  7367                                  		mov	si, bx		; next cluster
  7368                                  		test	byte [cs:fbigfat], 40h	; fbig
  7369                                  					; 16 bit fat?
  7370                                  		jnz	short unpack16	; yes
  7371                                  		shr	si, 1		; 12 bit fat. si=si/2
  7372                                  					; si = clus + clus/2
  7373                                  		add	si, bx		;
  7374                                  					; (si =	byte offset of the cluster in the FAT)
  7375                                  		push	dx
  7376                                  		xor	dx, dx
  7377                                  		call	get_fat_sector
  7378                                  		pop	dx
  7379                                  		mov	ax, [bx]	; save it into ax
  7380                                  		jnz	short even_odd	; if not a splitted fat, check even-odd.
  7381                                  		; 25/06/2023	
  7382                                  		;mov	al, [bx]	; splitted fat
  7383                                  		mov	[cs:temp_cluster], al
  7384                                  		inc	si		; (next	byte)
  7385                                  		push	dx
  7386                                  		xor	dx, dx
  7387                                  		call	get_fat_sector
  7388                                  		pop	dx
  7389                                  		;mov	al, ds:0
  7390                                  		mov	al, [0] ; 19/10/2022
  7391                                  		mov	[cs:temp_cluster+1], al
  7392                                  		mov	ax, [cs:temp_cluster]
  7393                                  even_odd:				
  7394                                  		pop	bx		; restore old fat entry	value
  7395                                  		push	bx		; save it right	away.
  7396                                  		shr	bx, 1		; was it even or odd?
  7397                                  		jnb	short havclus	; it was even.
  7398                                  		shr	ax, 1		; odd. massage fat value and keep
  7399                                  					; the highest 12 bits.
  7400                                  		shr	ax, 1
  7401                                  		shr	ax, 1
  7402                                  		shr	ax, 1
  7403                                  havclus:				
  7404                                  		mov	bx, ax		; now bx = new fat entry.
  7405                                  		and	bx, 0FFFh	; keep low 12 bits.
  7406                                  		jmp	short unpackx
  7407                                  ; ---------------------------------------------------------------------------
  7408                                  
  7409                                  unpack16:				
  7410                                  		push	dx
  7411                                  		xor	dx, dx
  7412                                  		shl	si, 1		; extend to 32 bit offset
  7413                                  		adc	dx, 0
  7414                                  		call	get_fat_sector
  7415                                  		pop	dx
  7416                                  		mov	bx, [bx]	;
  7417                                  					; bx = new fat entry.
  7418                                  unpackx:				
  7419                                  		pop	si		; restore old bx value into si
  7420                                  		pop	ax		; restore logical sector (low)
  7421                                  		pop	ds
  7422                                  		sub	si, bx
  7423                                  		cmp	si, -1		; one apart?
  7424                                  		jnz	short getcl2
  7425                                  		add	[cs:doscnt], cx
  7426                                  		jmp	short unpack
  7427                                  ; ---------------------------------------------------------------------------
  7428                                  
  7429                                  getcl2:					
  7430                                  		push	bx
  7431                                  		push	dx		; sector to read (high)
  7432                                  		push	ax		; sector to read (low)
  7433                                  		mov	ax, [cs:drvfat]	; get drive and	fat spec
  7434                                  		mov	cx, [cs:doscnt]
  7435                                  		pop	dx		; sector to read for diskrd (low)
  7436                                  		pop	word [cs:start_sec_h]
  7437                                  					; sector to read for diskrd (high)
  7438                                  		push	ds
  7439                                  		push	cs
  7440                                  		pop	ds
  7441                                  		push	cs		; simulate far call
  7442                                  		; 17/10/2022
  7443                                  		mov	bp, DISKRD	; 8E5h
  7444                                  		;mov	bp, 8E5h	; offset diskrd
  7445                                  					; 2C7h:8E5h = 70h:2E55h
  7446                                  		call	call_bios_code	; read the clusters
  7447                                  		pop	ds
  7448                                  		pop	bx
  7449                                  		pop	di
  7450                                  		mov	ax, [cs:doscnt]	; get number of	sectors	read
  7451                                  		xchg	ah, al		; multiply by 256
  7452                                  		shl	ax, 1		; times	2 equal	512
  7453                                  		add	di, ax		; update load location
  7454                                  		pop	cx		; restore sectors/cluster
  7455                                  		retn
  7456                                  
  7457                                  ; =============== S U B	R O U T	I N E =======================================
  7458                                  
  7459                                  
  7460                                  ;function: find and read the corresponding fat sector into ds:0
  7461                                  ;
  7462                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
  7463                                  ;     ds - fatloc segment
  7464                                  ;     cs:drvfat - logical drive number, fat id
  7465                                  ;     cs:md_sectorsize
  7466                                  ;     cs:last_fat_secnum - last fat sector number read in.
  7467                                  ;
  7468                                  ;out). corresponding fat sector read in.
  7469                                  ;      bx = offset value from fatlog segment.
  7470                                  ;      other registera saved.
  7471                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
  7472                                  ;      starts at the last byte of the fat sector. in this case, the caller
  7473                                  ;      should save this byte, and read the next fat sector to get the rest
  7474                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
  7475                                  
  7476                                  		; 17/10/2022
  7477                                  get_fat_sector:	
  7478                                  		push	ax
  7479                                  		push	cx
  7480                                  		push	di
  7481                                  		push	si
  7482                                  		push	es
  7483                                  		push	ds
  7484                                  		mov	ax, si
  7485                                  		mov	cx, [cs:md_sectorsize] ; 512
  7486                                  		div	cx		; ax = sector number, dx = offset
  7487                                  		nop
  7488                                  
  7489                                  		; Get rid of the assumption that
  7490                                  		; there	is only	one reserved sector
  7491                                  
  7492                                  		push	es
  7493                                  		push	ds
  7494                                  		push	di
  7495                                  		push	ax
  7496                                  		push	cs
  7497                                  		pop	ds
  7498                                  
  7499                                  		mov	ax, [cs:drvfat]	; get drive # and FAT id
  7500                                  		mov	bp, SETDRIVE
  7501                                  		;mov	bp, 4D7h	; setdrive
  7502                                  					; at 2C7h:4D7h = 70h:2A47h
  7503                                  		push	cs		; simulate far call
  7504                                  		call	call_bios_code	; get bds for drive
  7505                                  		pop	ax		; (sector number -without reserved and hidden sectors-)
  7506                                  		add	ax, [es:di+9]	; [es:di+BDS.resectors]
  7507                                  					; add #reserved_sectors
  7508                                  		pop	di
  7509                                  		pop	ds
  7510                                  		pop	es
  7511                                  		cmp	ax, [cs:last_fat_sec_num]
  7512                                  		jz	short gfs_split_chk ; don't need to read it again.
  7513                                  		mov	[cs:last_fat_sec_num], ax 
  7514                                  					; sector number
  7515                                  					; (in the partition, without hidden sectors)
  7516                                  		push	dx
  7517                                  		mov	word [cs:start_sec_h], 0 
  7518                                  					; prepare to read the fat sector
  7519                                  					; start_sec_h is always	0 for fat sector.
  7520                                  		mov	dx, ax
  7521                                  		mov	cx, 1		; 1 sector read
  7522                                  		mov	ax, [cs:drvfat]
  7523                                  		push	ds
  7524                                  		pop	es
  7525                                  		xor	di, di		; es:di	-> fatloc segment:0
  7526                                  		push	ds
  7527                                  		push	cs
  7528                                  		pop	ds
  7529                                  		push	cs		; simulate far call
  7530                                  		mov	bp, DISKRD	; 8E5h
  7531                                  		;mov	bp, 8E5h	; offset diskrd
  7532                                  					; 2C7h:8E5h = 70h:2E55h
  7533                                  		call	call_bios_code
  7534                                  		pop	ds
  7535                                  		pop	dx
  7536                                  		mov	cx, [cs:md_sectorsize] ; 512
  7537                                  
  7538                                  gfs_split_chk:				
  7539                                  		dec	cx		; 511
  7540                                  		cmp	dx, cx		; if offset points to the
  7541                                  					; last byte of this sector,
  7542                                  					; then splitted	entry.
  7543                                  		mov	bx, dx		; set bx to dx
  7544                                  		pop	ds
  7545                                  		pop	es
  7546                                  		pop	si
  7547                                  		pop	di
  7548                                  		pop	cx
  7549                                  		pop	ax
  7550                                  		retn
  7551                                  
  7552                                  ; 15/10/2022
  7553                                  ;Bios_Data_Init	ends
  7554                                  
  7555                                  %endif
  7556                                  ; ---------------------------------------------------------------------------
  7557                                  ; ---------------------------------------------------------------------------
  7558                                  
  7559                                  		; 09/12/2022
  7560                                  		;db 0
  7561                                  
  7562                                  numbertodiv	equ ($-BData_start)
  7563                                  numbertomod	equ (numbertodiv % 16)
  7564                                  
  7565                                  %if numbertomod>0 & numbertomod<16
  7566 00002158 00<rep 8h>              		times (16-numbertomod) db 0
  7567                                  %endif
  7568                                  
  7569                                  ;align 16
  7570                                  
  7571                                  ; 09/12/2022
  7572                                  IOSYSCODESEGOFF	equ $ - BData_start
  7573                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
  7574                                  
  7575                                  ;--- End of DOSBIOS data segment --------------------------------------------
  7576                                  ; ---------------------------------------------------------------------------
  7577                                  		;db 4 dup(0)
  7578                                  ; 09/12/2022		
  7579                                  ;		times 4 db 0	; 19/10/2022
  7580                                  ; ---------------------------------------------------------------------------
  7581                                  
  7582                                  ;============================================================================
  7583                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
  7584                                  ;============================================================================
  7585                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7586                                  
  7587                                  section .BIOSCODE vstart=0  
  7588                                  
  7589                                  BCode_start:	 ; 09/12/2022
  7590                                   
  7591                                  ; 02/10/2022
  7592                                  
  7593                                  ;--- DOSBIOS code segment ---------------------------------------------------
  7594                                  ;----------------------------------------------------------------------------
  7595                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
  7596                                  ;----------------------------------------------------------------------------
  7597                                  
  7598                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
  7599 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
  7600 00000030 7000                    BiosDataWord:	dw 70h
  7601                                  
  7602                                  ; 15/10/2022
  7603                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
  7604                                  ; 09/12/2022
  7605                                  BIOSDATAWORD	equ BiosDataWord
  7606                                  
  7607                                  ; ---------------------------------------------------------------------------
  7608                                  
  7609                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS) 
  7610                                  
  7611                                  ;************************************************************************
  7612                                  ;*									*
  7613                                  ;*	seg_reinit is called with ax = our new code segment value,	*
  7614                                  ;*	  trashes di, cx, es						*
  7615                                  ;*									*
  7616                                  ;*	cas -- should be made disposable!				*
  7617                                  ;*									*
  7618                                  ;************************************************************************
  7619                                  
  7620                                  	; 10/08/2023 - Retro DOS v4.2 IO:SYS (optimization)
  7621                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0032h 
  7622                                  
  7623                                  _seg_reinit:
  7624 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
  7625                                  					; at 2C7h:30h or 70h:25A0h
  7626                                  		;mov	di, (offset cdev+2)
  7627 00000037 BF[BF06]                		mov	di, cdev+2	; 19/10/2022
  7628                                  		;mov	cx, 4		; (end_BC_entries - cdev)/4
  7629                                  		; 10/08/2023
  7630 0000003A B90300                  		mov	cx, 3 ; (PCDOS 7.1)
  7631                                  _seg_reinit_1:
  7632 0000003D AB                      		stosw			; modify Bios_Code entry points
  7633 0000003E 47                      		inc	di
  7634 0000003F 47                      		inc	di
  7635 00000040 E2FB                    		loop	_seg_reinit_1
  7636                                  		; 10/08/2023 (PCDOS 7.1)
  7637                                  		; (direct jump to i2f_handler from BIOSDATA:bios_i2f)
  7638                                  		; (instead of 'bcode_i2f: dw i2f_handler, IOSYSCODESEG')
  7639 00000042 26A3[0800]              		mov     [es:bios_i2f_seg], ax ; actual BIOSCODE segment
  7640 00000046 CB                      		retf
  7641                                  
  7642                                  ; ---------------------------------------------------------------------------
  7643                                  
  7644                                  ; 15/10/2022
  7645                                  
  7646                                  ;************************************************************************
  7647                                  ;*									*
  7648                                  ;*	chardev_entry - main device driver dispatch routine		*
  7649                                  ;*	   called with a dummy parameter block on the stack		*
  7650                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
  7651                                  ;*									*
  7652                                  ;*	will eventually take care of doing the transitions in		*
  7653                                  ;*	   out of Bios_Code						*
  7654                                  ;*									*
  7655                                  ;************************************************************************
  7656                                  
  7657                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
  7658 00000047 56                      		push	si
  7659 00000048 50                      		push	ax
  7660 00000049 51                      		push	cx
  7661 0000004A 52                      		push	dx
  7662 0000004B 57                      		push	di
  7663 0000004C 55                      		push	bp
  7664 0000004D 1E                      		push	ds
  7665 0000004E 06                      		push	es
  7666 0000004F 53                      		push	bx
  7667 00000050 89E5                    		mov	bp, sp
  7668 00000052 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
  7669                                  		;;mov	ds, word [cs:0030h]
  7670                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7671 00000055 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7672 0000005A 8B4402                  		mov	ax, [si+2]	; get the device number	if present
  7673 0000005D A2[2100]                		mov	[auxnum], al
  7674 00000060 8826[E704]              		mov	[printdev], ah
  7675 00000064 8B34                    		mov	si, [si]	; point	to the device dispatch table
  7676 00000066 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
  7677 0000006A 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
  7678 0000006E 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
  7679 00000072 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
  7680 00000076 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
  7681                                  		; 17/10/2022
  7682 0000007A 81FE[3B05]              		cmp	si, DSKTBL
  7683                                  		;cmp	si, 4A2h	; dsktbl
  7684                                  					; at 2C7h:4A2h = 70h:2A12h
  7685 0000007E 7517                    		jnz	short no_sector32_mapping
  7686                                  
  7687                                  ; Special case for 32-bit start sector number:
  7688                                  ;   if (si==dsktbl) /* if this is a disk device call */
  7689                                  ;      set high 16 bits of secnum to 0
  7690                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
  7691                                  ;
  7692                                  ; pass high word of sector number in start_sec_h, low word in dx
  7693                                  ;
  7694                                  ; note: start_l and start_h are the offsets within the io_request packet
  7695                                  ;	  which contain the low and hi words of the 32 bit start sector if
  7696                                  ;	  it has been used.
  7697                                  ;
  7698                                  ; note: remember not to destroy the registers which have been set up before
  7699                                  
  7700                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
  7701 00000080 C706[2305]0000          		mov	word [start_sec_h], 0
  7702 00000086 83FAFF                  		cmp	dx, 0FFFFh
  7703 00000089 750C                    		jnz	short no_sector32_mapping
  7704 0000008B 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
  7705                                  					; 32 bits dsk req
  7706                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
  7707 0000008F 8916[2305]              		mov	[start_sec_h], dx
  7708 00000093 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
  7709                                  					; dx = packet.start_l
  7710                                  no_sector32_mapping:			
  7711 00000097 97                      		xchg	ax, di
  7712 00000098 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
  7713 0000009C 2E3A04                  		cmp	al, cs:[si]
  7714 0000009F 732C                    		jnb	short command_error
  7715 000000A1 98                      		cbw			; note that al <= 15 means ok
  7716 000000A2 D1E0                    		shl	ax, 1
  7717 000000A4 01C6                    		add	si, ax
  7718 000000A6 97                      		xchg	ax, di
  7719 000000A7 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
  7720 000000AB FC                      		cld
  7721                                  		; 17/10/2022
  7722 000000AC 2EFF5401                		call	near [cs:si+1]
  7723                                  		;call	word ptr cs:si+1
  7724 000000B0 7202                    		jb	short already_got_ah_status
  7725 000000B2 B401                    		mov	ah, 1
  7726                                  already_got_ah_status:
  7727                                  		;;mov	ds, [cs:0030h]	; 15/10/2022			
  7728                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7729                                  					; cas note: shouldn't be needed!
  7730 000000B4 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7731                                  		;lds	bx, ds:ptrsav
  7732 000000B9 C51E[1200]              		lds	bx, [ptrsav]
  7733 000000BD 894703                  		mov	[bx+3],	ax	; [bx+status]
  7734                                  					; mark operation complete
  7735 000000C0 5B                      		pop	bx
  7736 000000C1 07                      		pop	es
  7737 000000C2 1F                      		pop	ds
  7738 000000C3 5D                      		pop	bp
  7739 000000C4 5F                      		pop	di
  7740 000000C5 5A                      		pop	dx
  7741 000000C6 59                      		pop	cx
  7742 000000C7 58                      		pop	ax
  7743 000000C8 5E                      		pop	si
  7744 000000C9 83C402                  		add	sp, 2		; get rid of fake return address
  7745                                  	
  7746                                  		; fall through into bc_retf
  7747                                  ; ---------------------------------------------------------------------------	
  7748                                  bc_retf:
  7749 000000CC CB                      		retf
  7750                                  ; ---------------------------------------------------------------------------
  7751                                  
  7752                                  command_error:				
  7753 000000CD E80900                  		call	bc_cmderr
  7754 000000D0 EBE2                    		jmp	short already_got_ah_status
  7755                                  ; 15/10/2022
  7756                                  ; 01/05/2019
  7757                                  
  7758                                  ;----------------------------------------------------------------------------
  7759                                  ; The following piece of hack is for supporting CP/M compatibility
  7760                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
  7761                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
  7762                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
  7763                                  ; high.
  7764                                  ;----------------------------------------------------------------------------
  7765                                  
  7766                                  		;db 7 dup(0)
  7767                                  
  7768                                  		; 15/10/2022
  7769                                  
  7770 000000D2 0000                    		dw 0		; pad to bring offset to 0D0h
  7771                                  
  7772 000000D4 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
  7773                                  				;  which is the CP/M call 5 entry point
  7774                                  		
  7775                                  
  7776                                  ; ---------------------------------------------------------------------------
  7777                                  
  7778                                  ;	exit - all routines return through this path
  7779                                  
  7780                                  bc_cmderr:				
  7781 000000D9 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
  7782                                  					; unknown command error
  7783                                  
  7784                                  ; =============== S U B	R O U T	I N E =======================================
  7785                                  
  7786                                  ;	now zero the count field by subtracting its current value,
  7787                                  ;	  which is still in cx, from itself.
  7788                                  
  7789                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
  7790                                  ;	  in order to return the number actually complete
  7791                                  
  7792                                  bc_err_cnt:	
  7793                                  		;les	bx, ds:ptrsav
  7794                                  		; 19/10/2022
  7795 000000DB C41E[1200]              		les	bx, [ptrsav]
  7796 000000DF 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
  7797                                  					; # of successful i/o's
  7798 000000E3 B481                    		mov	ah, 81h		; mark error return
  7799 000000E5 F9                      		stc			; indicate abnormal end
  7800 000000E6 C3                      		retn
  7801                                  
  7802                                  ; 15/10/2022
  7803                                  
  7804                                  ;Bios_Code ends
  7805                                  
  7806                                  ;----------------------------------------------------------------------------
  7807                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
  7808                                  ;----------------------------------------------------------------------------
  7809                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7810                                  ; 10/01/2019 - Retro DOS v4.0
  7811                                  
  7812                                  ; 30/04/2019
  7813                                  
  7814                                  ;title	mschar - character and clock devices
  7815                                  
  7816                                  ;MODE_CTRLBRK	equ	0FFh
  7817                                  
  7818                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
  7819                                  
  7820                                  ;************************************************************************
  7821                                  ;*									*
  7822                                  ;*	device driver dispatch tables					*
  7823                                  ;*									*
  7824                                  ;*	each table starts with a byte which lists the number of		*
  7825                                  ;*	legal functions, followed by that number of words. Each		*
  7826                                  ;*	word represents an offset of a routine in Bios_Code which	*
  7827                                  ;*	handles the function. The functions are terminated with		*
  7828                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
  7829                                  ;*	to the caller. If carry is set, the ah/al registers are		*
  7830                                  ;*	returned as abnormal completion status. Notice that ds		*
  7831                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
  7832                                  ;*									*
  7833                                  ;************************************************************************
  7834                                  
  7835                                  		; 13/12/2022
  7836                                  		;db 0
  7837                                  
  7838                                  		; 13/12/202
  7839 000000E7 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
  7840                                  					; 2C7h:0E4h = 70h:2654h
  7841 000000E8 [FD01]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7842                                  					; 00 init
  7843 000000EA [FD01]                  		dw bc_exvec  ; 1FBh	; 01
  7844 000000EC [FD01]                  		dw bc_exvec  ; 1FBh	; 02
  7845 000000EE [D900]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
  7846                                  					; 03
  7847 000000F0 [5F01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
  7848                                  					; 04
  7849 000000F2 [A201]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
  7850                                  					; 05
  7851 000000F4 [FD01]                  		dw bc_exvec  ; 1FBh	; 06
  7852 000000F6 [0B02]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
  7853                                  					; 07
  7854 000000F8 [FF01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
  7855                                  					; 08
  7856 000000FA [FF01]                  		dw con_writ  ; 1FDh	; 09
  7857 000000FC [FD01]                  		dw bc_exvec  ; 1FBh	; 0A
  7858                                  con_table_end:
  7859 000000FE 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
  7860                                  					; 2C7h:0FBh = 70h:266Bh
  7861 000000FF [FD01]                  		dw bc_exvec   ; 1FBh	; bc_exvec
  7862 00000101 [FD01]                  		dw bc_exvec   ; 1FBh	; 01
  7863 00000103 [FD01]                  		dw bc_exvec   ; 1FBh	; 02
  7864 00000105 [D900]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
  7865 00000107 [1C02]                  		dw prn_input  ;	21Ah	; prn_input
  7866                                  					; 04 indicate zero chars read
  7867 00000109 [CA01]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7868                                  					; 05 read non-destructive
  7869 0000010B [FD01]                  		dw bc_exvec   ; 1FBh	; 06
  7870 0000010D [FD01]                  		dw bc_exvec   ; 1FBh	; 07
  7871 0000010F [2102]                  		dw prn_writ   ;	21Fh	; prn_writ
  7872 00000111 [2102]                  		dw prn_writ   ; 21Fh	; 09
  7873 00000113 [5202]                  		dw prn_stat   ; 251h	; prn_stat
  7874 00000115 [FD01]                  		dw bc_exvec   ; 1FBh	; 0B
  7875 00000117 [FD01]                  		dw bc_exvec   ; 1FBh	; 0C
  7876 00000119 [FD01]                  		dw bc_exvec   ; 1FBh	; 0D
  7877 0000011B [FD01]                  		dw bc_exvec   ; 1FBh	; 0E
  7878 0000011D [FD01]                  		dw bc_exvec   ; 1FBh	; 0F
  7879 0000011F [8C02]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
  7880 00000121 [FD01]                  		dw bc_exvec   ; 1FBh	; 11
  7881 00000123 [FD01]                  		dw bc_exvec   ; 1FBh	; 12
  7882 00000125 [BA02]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
  7883 00000127 [FD01]                  		dw bc_exvec   ; 1FBh	; 14
  7884 00000129 [FD01]                  		dw bc_exvec   ; 1FBh	; 15
  7885 0000012B [FD01]                  		dw bc_exvec   ; 1FBh	; 16
  7886 0000012D [FD01]                  		dw bc_exvec   ; 1FBh	; 17
  7887 0000012F [FD01]                  		dw bc_exvec   ; 1FBh	; 18
  7888 00000131 [EF02]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
  7889                                  prn_table_end:
  7890 00000133 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
  7891                                  					; 2C7h:130h = 70h:26A0h
  7892 00000134 [FD01]                  		dw bc_exvec   ; 1FBh	; 00 - init
  7893 00000136 [FD01]                  		dw bc_exvec   ; 1FBh	; 01
  7894 00000138 [FD01]                  		dw bc_exvec   ; 1FBh	; 02
  7895 0000013A [D900]                  		dw bc_cmderr  ;	0D5h	; 03
  7896 0000013C [0A03]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
  7897 0000013E [2F03]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
  7898 00000140 [FD01]                  		dw bc_exvec   ; 1FBh	; 06
  7899 00000142 [6503]                  		dw aux_flsh   ;	36Ch	; aux_flsh
  7900 00000144 [6C03]                  		dw aux_writ   ;	374h	; aux_writ
  7901 00000146 [6C03]                  		dw aux_writ   ;	374h	; 09
  7902 00000148 [4F03]                  		dw aux_wrst   ;	355h	; aux_wrst
  7903                                  aux_table_end:
  7904 0000014A 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
  7905                                  					; 2C7h:147h = 70h:26B7h
  7906 0000014B [FD01]                  		dw bc_exvec   ; 1FBh	; 00
  7907 0000014D [FD01]                  		dw bc_exvec   ; 1FBh	; 01
  7908 0000014F [FD01]                  		dw bc_exvec   ; 1FBh	; 02
  7909 00000151 [D900]                  		dw bc_cmderr  ;	0D5h	; 03
  7910 00000153 [D104]                  		dw tim_read   ;	435h	; tim_read
  7911 00000155 [CA01]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7912 00000157 [FD01]                  		dw bc_exvec   ; 1FBh	; 06
  7913 00000159 [FD01]                  		dw bc_exvec   ; 1FBh	; 07
  7914 0000015B [D203]                  		dw tim_writ   ; 3DBh	; tim_writ
  7915 0000015D [D203]                  		dw tim_writ   ; 3DBh	; 09
  7916                                  tim_table_end:
  7917                                  
  7918                                  ; ---------------------------------------------------------------------------
  7919                                  
  7920                                  ;************************************************************************
  7921                                  ;*									*
  7922                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
  7923                                  ;*									*
  7924                                  ;************************************************************************
  7925                                  
  7926                                  con_read:				; 2C7h:15Ch = 70h:26CCh
  7927                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
  7928 0000015F E306                    		jcxz	con_exit	; 19/10/2022
  7929                                  con_loop:				
  7930 00000161 E80500                  		call	chrin		; get char in al
  7931 00000164 AA                      		stosb			; store	char at	es:di
  7932 00000165 E2FA                    		loop	con_loop
  7933                                  con_exit:				
  7934 00000167 F8                      		clc
  7935 00000168 C3                      		retn
  7936                                  
  7937                                  ; =============== S U B	R O U T	I N E =======================================
  7938                                  
  7939                                  ;************************************************************************
  7940                                  ;*									*
  7941                                  ;*	chrin - input single char from keyboard into al			*
  7942                                  ;*									*
  7943                                  ;*	  we are going to issue extended keyboard function, if		*
  7944                                  ;*	  supported. the returning value of the extended keystroke	*
  7945                                  ;*	  of the extended keyboard function uses 0E0h in al		*
  7946                                  ;*	  instead of 00h as in the conventional keyboard function.	*
  7947                                  ;*	  this creates a conflict when the user entered real		*
  7948                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
  7949                                  ;*	  keystroke and the greek alpha. this case will be handled	*
  7950                                  ;*	  in the following manner:					*
  7951                                  ;*									*
  7952                                  ;*	      ah = 16h							*
  7953                                  ;*	      int 16h							*
  7954                                  ;*	      if al == 0, then extended code (in ah)			*
  7955                                  ;*	      else if al == 0E0h, then					*
  7956                                  ;*	      if ah <> 0, then extended code (in ah)			*
  7957                                  ;*		else greek_alpha character.				*
  7958                                  ;*									*
  7959                                  ;*	also, for compatibility reason, if an extended code is		*
  7960                                  ;*	  detected, then we are going to change the value in al		*
  7961                                  ;*	  from 0E0h to 00h.						*
  7962                                  ;*									*
  7963                                  ;************************************************************************
  7964                                  
  7965                                  		; 19/10/2022
  7966                                  chrin:		
  7967 00000169 8A26[E504]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
  7968 0000016D 30C0                    		xor	al, al
  7969 0000016F 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
  7970 00000173 08C0                    		or	al, al
  7971 00000175 752A                    		jnz	short keyret
  7972 00000177 CD16                    		int	16h		; KEYBOARD -
  7973 00000179 09C0                    		or	ax, ax
  7974 0000017B 74EC                    		jz	short chrin
  7975 0000017D 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7976 00000180 7504                    		jnz	short alt_ext_chk
  7977 00000182 B010                    		mov	al, 10h
  7978 00000184 EB1B                    		jmp	short keyret
  7979                                  ; ---------------------------------------------------------------------------
  7980                                  
  7981                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
  7982                                  ;    if character read was 0E0h then
  7983                                  ;      if extended byte was zero (i.e. ah == 0) then
  7984                                  ;	 goto keyret
  7985                                  ;      else
  7986                                  ;	 set al to zero
  7987                                  ;	 goto alt_save
  7988                                  ;      endif
  7989                                  ;    endif
  7990                                  ;  endif
  7991                                  
  7992                                  alt_ext_chk:
  7993 00000186 803E[E504]00            		cmp	byte [keyrd_func], 0
  7994 0000018B 740C                    		jz	short not_ext
  7995 0000018D 3CE0                    		cmp	al, 0E0h
  7996 0000018F 7508                    		jnz	short not_ext
  7997 00000191 08E4                    		or	ah, ah
  7998 00000193 740C                    		jz	short keyret
  7999 00000195 30C0                    		xor	al, al
  8000 00000197 EB04                    		jmp	short alt_save
  8001                                  ; ---------------------------------------------------------------------------
  8002                                  
  8003                                  not_ext:				
  8004 00000199 08C0                    		or	al, al		; special case?
  8005 0000019B 7504                    		jnz	short keyret
  8006                                  alt_save:				
  8007 0000019D 8826[0C00]              		mov	[altah], ah	; store	special	key
  8008                                  keyret:					
  8009 000001A1 C3                      		retn
  8010                                  
  8011                                  ; ---------------------------------------------------------------------------
  8012                                  
  8013                                  ;************************************************************************
  8014                                  ;*									*
  8015                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
  8016                                  ;*									*
  8017                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
  8018                                  ;*	in the status word of the request packet, and there is no	*
  8019                                  ;*	character in the input buffer, the driver issues a system	*
  8020                                  ;*	wait request to the rom. on return from the rom, it returns	*
  8021                                  ;*	a 'char-not-found' to the dos.					*
  8022                                  ;*									*
  8023                                  ;************************************************************************
  8024                                  
  8025                                  		; 19/10/2022
  8026                                  con_rdnd:				
  8027 000001A2 A0[0C00]                		mov	al, [altah]
  8028 000001A5 08C0                    		or	al, al
  8029 000001A7 754C                    		jnz	short rdexit
  8030 000001A9 8A26[E604]              		mov	ah, [keysts_func]
  8031 000001AD CD16                    		int	16h		; KEYBOARD -
  8032 000001AF 751D                    		jnz	short gotchr
  8033 000001B1 803E[7900]00            		cmp	byte [fhavek09], 0
  8034 000001B6 7412                    		jz	short z_bus_exit
  8035 000001B8 C41E[1200]              		les	bx, [ptrsav]
  8036                                  		; 12/12/2022
  8037 000001BC 26F6470404              		test	byte [es:bx+4], 04h
  8038                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
  8039 000001C1 7407                    		jz	short z_bus_exit
  8040 000001C3 B80041                  		mov	ax, 4100h
  8041 000001C6 30DB                    		xor	bl, bl
  8042 000001C8 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  8043                                  					; AL = condition type, BH = condition compare or mask value
  8044                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  8045                                  					; DX = I/O port	address	if AL bit 4 set
  8046                                  z_bus_exit:				
  8047 000001CA F9                      		stc			; 2C7h:1C8h = 70h:2738h
  8048 000001CB B403                    		mov	ah, 3		; indicate busy	status
  8049 000001CD C3                      		retn
  8050                                  ; ---------------------------------------------------------------------------
  8051                                  
  8052                                  gotchr:					
  8053 000001CE 09C0                    		or	ax, ax
  8054 000001D0 7508                    		jnz	short notbrk	; check	for null after break
  8055 000001D2 8A26[E504]              		mov	ah, [keyrd_func] ; issue keyboard read function
  8056 000001D6 CD16                    		int	16h		; KEYBOARD -
  8057 000001D8 EBC8                    		jmp	short con_rdnd	; get a	real status
  8058                                  ; ---------------------------------------------------------------------------
  8059                                  
  8060                                  notbrk:					
  8061 000001DA 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  8062 000001DD 7504                    		jnz	short rd_ext_chk
  8063 000001DF B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
  8064 000001E1 EB12                    		jmp	short rdexit
  8065                                  ; ---------------------------------------------------------------------------
  8066                                  
  8067                                  rd_ext_chk:				
  8068 000001E3 803E[E504]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
  8069 000001E8 740B                    		jz	short rdexit
  8070 000001EA 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
  8071 000001EC 7507                    		jnz	short rdexit
  8072 000001EE 80FC00                  		cmp	ah, 0		; scan code exist?
  8073 000001F1 7402                    		jz	short rdexit	; yes. greek alpha char.
  8074 000001F3 B000                    		mov	al, 0		; no. extended key stroke.
  8075                                  					; change it for	compatibility
  8076                                  rdexit:					
  8077 000001F5 C41E[1200]              		les	bx, [ptrsav]
  8078 000001F9 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
  8079                                  					; return keyboard character here
  8080                                  bc_exvec:				
  8081 000001FD F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  8082                                  					; indicate normal termination
  8083 000001FE C3                      		retn
  8084                                  ; ---------------------------------------------------------------------------
  8085                                  
  8086                                  ;************************************************************************
  8087                                  ;*									*
  8088                                  ;*	con_write - console write routine				*
  8089                                  ;*									*
  8090                                  ;*	entry:	es:di -> buffer						*
  8091                                  ;*		cx    =  count						*
  8092                                  ;*									*
  8093                                  ;************************************************************************
  8094                                  
  8095                                  con_writ:
  8096                                  		;jcxz	short bc_exvec
  8097 000001FF E3FC                    		jcxz	bc_exvec	; 19/10/2022
  8098                                  		; 12/12/2022
  8099                                  		;jcxz	cc_ret
  8100                                  con_lp:					
  8101 00000201 268A05                  		mov	al, [es:di]
  8102 00000204 47                      		inc	di
  8103 00000205 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
  8104                                  					; AL = character to display
  8105 00000207 E2F8                    		loop	con_lp
  8106                                  cc_ret:					
  8107 00000209 F8                      		clc
  8108 0000020A C3                      		retn
  8109                                  
  8110                                  ; =============== S U B	R O U T	I N E =======================================
  8111                                  
  8112                                  ;************************************************************************
  8113                                  ;*									*
  8114                                  ;*	con_flush - flush out keyboard queue				*
  8115                                  ;*									*
  8116                                  ;************************************************************************
  8117                                  
  8118                                  con_flush:
  8119 0000020B C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
  8120                                  flloop:					; while	(charavail()) charread();	
  8121 00000210 B401                    		mov	ah, 1
  8122 00000212 CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
  8123                                  					; Return: ZF clear if character	in buffer
  8124                                  					; AH = scan code, AL = character
  8125                                  					; ZF set if no character in buffer
  8126 00000214 74F3                    		jz	short cc_ret
  8127 00000216 30E4                    		xor	ah, ah
  8128 00000218 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  8129                                  					; Return: AH = scan code, AL = character
  8130 0000021A EBF4                    		jmp	short flloop
  8131                                  
  8132                                  ; ---------------------------------------------------------------------------
  8133                                  
  8134                                  ; 15/10/2022
  8135                                  
  8136                                  ;************************************************************************
  8137                                  ;*									*
  8138                                  ;*	some equates for rom bios printer i/o				*
  8139                                  ;*									*
  8140                                  ;************************************************************************
  8141                                  
  8142                                  ; ibm rom status bits (i don't trust them, neither should you)
  8143                                  ; warning!!! the ibm rom does not return just one bit. it returns a
  8144                                  ; whole slew of bits, only one of which is correct.
  8145                                  
  8146                                  ;notbusystatus	equ 10000000b		; not busy
  8147                                  ;nopaperstatus	equ 00100000b		; no more paper
  8148                                  ;prnselected	equ 00010000b		; printer selected
  8149                                  ;ioerrstatus	equ 00001000b		; some kinda error
  8150                                  ;timeoutstatus	equ 00000001b		; time out.
  8151                                  ;
  8152                                  ;noprinter	equ 00110000b		; no printer attached
  8153                                  
  8154                                  ; 18/03/2019 - Retro DOS v4.0
  8155                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
  8156                                  
  8157                                  ; ---------------------------------------------------------------------------
  8158                                  
  8159                                  ;************************************************************************
  8160                                  ;*									*
  8161                                  ;*	prn_input - return with no error but zero chars read		*
  8162                                  ;*									*
  8163                                  ;*	enter with cx = number of characters requested			*
  8164                                  ;*									*
  8165                                  ;************************************************************************
  8166                                  
  8167                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
  8168 0000021C E8BCFE                  		call	bc_err_cnt	; reset	count to zero
  8169                                  					; (sub reqpkt.count,cx)
  8170                                  		; 12/12/2022
  8171                                  prn_done:
  8172 0000021F F8                      		clc			; but return with carry	reset for no error
  8173 00000220 C3                      		retn
  8174                                  ; ---------------------------------------------------------------------------
  8175                                  
  8176                                  ;************************************************************************
  8177                                  ;*									*
  8178                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
  8179                                  ;*									*
  8180                                  ;*	auxnum has printer number					*
  8181                                  ;*									*
  8182                                  ;************************************************************************
  8183                                  
  8184                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
  8185                                  		;jcxz	short prn_done	; no chars to output
  8186 00000221 E3FC                    		jcxz	prn_done	; 19/10/2022
  8187                                  prn_loop:				
  8188 00000223 BB0200                  		mov	bx, 2		; retry	count
  8189                                  prn_out:				
  8190 00000226 E83600                  		call	prnstat		; get status
  8191 00000229 751D                    		jnz	short TestPrnError
  8192 0000022B 268A05                  		mov	al, [es:di]	; get character	to print
  8193 0000022E 30E4                    		xor	ah, ah
  8194 00000230 E82E00                  		call	prnop		; print	to printer
  8195 00000233 7419                    		jz	short prn_con	; no error - continue
  8196 00000235 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
  8197 00000238 7509                    		jnz	short _prnwf
  8198 0000023A B00C                    		mov	al, 0Ch		; error_I24_gen_failure
  8199 0000023C C606[0C00]00            		mov	byte [altah], 0
  8200 00000241 EB08                    		jmp	short pmessg
  8201                                  ; ---------------------------------------------------------------------------
  8202                                  
  8203                                  _prnwf:					
  8204 00000243 F6C401                  		test	ah, 1		; timeoutstatus
  8205 00000246 7406                    		jz	short prn_con
  8206                                  TestPrnError:				
  8207 00000248 4B                      		dec	bx		; retry	until count is exhausted.
  8208 00000249 75DB                    		jnz	short prn_out
  8209                                  pmessg:					
  8210 0000024B E98DFE                  		jmp	bc_err_cnt
  8211                                  ; ---------------------------------------------------------------------------
  8212                                  
  8213                                  prn_con:				
  8214 0000024E 47                      		inc	di		; point	to next	char and continue
  8215 0000024F E2D2                    		loop	prn_loop
  8216                                  ;prn_done:				
  8217                                  		; 12/12/2022
  8218                                  prn_done2:
  8219                                  		;clc
  8220                                  		; cf=0
  8221 00000251 C3                      		retn
  8222                                  ; ---------------------------------------------------------------------------
  8223                                  
  8224                                  ;************************************************************************
  8225                                  ;*									*
  8226                                  ;*	prn_stat - device driver entry to return printer status		*
  8227                                  ;*									*
  8228                                  ;************************************************************************
  8229                                  
  8230                                  prn_stat:				; 2C7h:251h = 70h:27C1h
  8231 00000252 E80A00                  		call	prnstat		; device in dx
  8232 00000255 75F4                    		jnz	short pmessg
  8233 00000257 F6C480                  		test	ah, 80h		; notbusystatus
  8234                                  		;jnz	short prn_done
  8235                                  		; 12/12/2022
  8236 0000025A 75F5                    		jnz	short prn_done2 ; cf=0
  8237 0000025C E96BFF                  		jmp	z_bus_exit
  8238                                  ; ---------------------------------------------------------------------------
  8239                                  
  8240                                  ;************************************************************************
  8241                                  ;*									*
  8242                                  ;*	prnstat - utility function to call ROM BIOS to check		*
  8243                                  ;*		 printer status. Return meaningful error code		*
  8244                                  ;*									*
  8245                                  ;************************************************************************
  8246                                  
  8247                                  prnstat:				
  8248 0000025F B402                    		mov	ah, 2		; set command for get status
  8249                                  					; PRINTER - GET	STATUS
  8250                                  					; DX = printer port (0-3)
  8251                                  					; Return: AH = status
  8252                                  
  8253                                  ; =============== S U B	R O U T	I N E =======================================
  8254                                  
  8255                                  ;************************************************************************
  8256                                  ;*									*
  8257                                  ;*	prnop - call ROM BIOS printer function in ah			*
  8258                                  ;*		return zero true if no error				*
  8259                                  ;*		return zero false if error, al = error code		*
  8260                                  ;*									*
  8261                                  ;************************************************************************
  8262                                  
  8263                                  prnop:	
  8264 00000261 8B16[2100]              		mov	dx, [auxnum]	; get printer number
  8265 00000265 CD17                    		int	17h		
  8266                                  
  8267                                  	; This check was added to see if this is a case of no
  8268                                  	; printer being installed. This tests checks to be sure
  8269                                  	; the error is noprinter (30h)
  8270                                  
  8271 00000267 50                      		push	ax
  8272 00000268 80E430                  		and	ah, 30h
  8273 0000026B 80FC30                  		cmp	ah, 30h		; noprinter
  8274 0000026E 58                      		pop	ax
  8275 0000026F 7506                    		jnz	short NextTest
  8276 00000271 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
  8277 00000274 80CC08                  		or	ah, 8		; ioerrstatus
  8278                                  
  8279                                  ; examine the status bits to see if an error occurred. unfortunately, several
  8280                                  ; of the bits are set so we have to pick and choose. we must be extremely
  8281                                  ; careful about breaking basic.
  8282                                  
  8283                                  NextTest:				
  8284 00000277 F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
  8285                                  					; i/o error?
  8286 0000027A 740A                    		jz	short checknotready ; no, try not ready
  8287                                  
  8288                                  ; at this point, we know we have an error. the converse is not true
  8289                                  
  8290 0000027C B009                    		mov	al, 9		; error_I24_out_of_paper
  8291                                  					; first, assume	out of paper
  8292 0000027E F6C420                  		test	ah, 20h		; out of paper set?
  8293 00000281 7502                    		jnz	short ret1	; yes, error is	set
  8294 00000283 FEC0                    		inc	al		; return al=10 (i/o error)
  8295                                  ret1:					
  8296 00000285 C3                      		retn
  8297                                  ; ---------------------------------------------------------------------------
  8298                                  
  8299                                  checknotready:				
  8300 00000286 B002                    		mov	al, 2		; assume not-ready
  8301 00000288 F6C401                  		test	ah, 1
  8302 0000028B C3                      		retn
  8303                                  
  8304                                  ; ---------------------------------------------------------------------------
  8305                                  
  8306                                  ;************************************************************************
  8307                                  ;*									*
  8308                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
  8309                                  ;*		     this entry point should never block waiting for	*
  8310                                  ;*		     device to come ready.				*
  8311                                  ;*									*
  8312                                  ;*	inputs:	cx = count, es:di -> buffer				*
  8313                                  ;*	outputs: set the number of bytes transferred in the		*
  8314                                  ;*		 device driver request packet				*
  8315                                  ;*									*
  8316                                  ;************************************************************************
  8317                                  
  8318                                  		; 19/10/2022
  8319                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
  8320 0000028C 89FE                    		mov	si, di		; everything is	set for	lodsb
  8321                                  prn_tilbloop:				
  8322 0000028E 51                      		push	cx
  8323 0000028F 53                      		push	bx
  8324 00000290 30FF                    		xor	bh, bh
  8325 00000292 8A1E[E704]              		mov	bl, [printdev]
  8326 00000296 D1E3                    		shl	bx, 1
  8327                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
  8328 00000298 8B8F[E804]              		mov	cx, [wait_count+bx]
  8329 0000029C 5B                      		pop	bx
  8330                                  prn_getstat:				
  8331 0000029D E8BFFF                  		call	prnstat		; get status
  8332 000002A0 7514                    		jnz	short prn_bperr	; error
  8333 000002A2 F6C480                  		test	ah, 80h		; ready	yet?
  8334 000002A5 E1F6                    		loope	prn_getstat	; no, go for more
  8335 000002A7 59                      		pop	cx		; get original count
  8336 000002A8 740D                    		jz	short prn_berr	; still	not ready => done
  8337 000002AA 26                      		es
  8338 000002AB AC                      		lodsb
  8339                                  		;lods	byte ptr es:[si] ; es
  8340                                  					; lodsb
  8341 000002AC 30E4                    		xor	ah, ah
  8342 000002AE E8B0FF                  		call	prnop
  8343 000002B1 7504                    		jnz	short prn_berr	; error
  8344 000002B3 E2D9                    		loop	prn_tilbloop
  8345                                  		; 12/12/2022
  8346                                  		; cf=0 (prnop)
  8347                                  		;clc			; normal no-error return
  8348 000002B5 C3                      		retn			;   from device driver
  8349                                  
  8350                                  ; ---------------------------------------------------------------------------
  8351                                  
  8352                                  prn_bperr:				
  8353 000002B6 59                      		pop	cx		; restore transfer count from stack
  8354                                  prn_berr:				
  8355 000002B7 E921FE                  		jmp	bc_err_cnt
  8356                                  ; ---------------------------------------------------------------------------
  8357                                  
  8358                                  ; 15/10/2022
  8359                                  
  8360                                  ;************************************************************************
  8361                                  ;*									*
  8362                                  ;*	prn_genioctl - get/set printer retry count			*
  8363                                  ;*									*
  8364                                  ;************************************************************************
  8365                                  
  8366                                  ; IOCTL.INC (MSDOS 6.0, 1991)
  8367                                  ; 11/01/2019
  8368                                  
  8369                                  ;********************************;*
  8370                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
  8371                                  ;********************************;*
  8372                                  
  8373                                  ;;RAWIO SUB-FUNCTIONS
  8374                                  ;;get_retry_count equ 65h
  8375                                  ;;set_retry_count equ 45h
  8376                                  
  8377                                  ;;struc A_RETRYCOUNT
  8378                                  ;;.rc_count: resw 1
  8379                                  ;;endstruc
  8380                                  
  8381                                  ;ioc_pc equ 5
  8382                                  
  8383                                  ; ---------------------------------------------------------------------------
  8384                                  
  8385                                  		; 19/10/2022
  8386                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
  8387 000002BA C43E[1200]              		les	di, [ptrsav]
  8388 000002BE 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8389                                  					; ioc_pc
  8390 000002C3 7403                    		jz	short prnfunc_ok
  8391                                  
  8392                                  prnfuncerr:				
  8393 000002C5 E911FE                  		jmp	bc_cmderr
  8394                                  ; ---------------------------------------------------------------------------
  8395                                  
  8396                                  prnfunc_ok:				
  8397 000002C8 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8398 000002CC 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
  8399 000002D0 30FF                    		xor	bh, bh
  8400                                  		;mov	bl, ds:printdev	; get index into retry counts
  8401 000002D2 8A1E[E704]              		mov	bl, [printdev]
  8402 000002D6 D1E3                    		shl	bx, 1
  8403                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
  8404 000002D8 8B8F[E804]              		mov	cx, [wait_count+bx]
  8405 000002DC 3C65                    		cmp	al, 65h		; get_retry_count
  8406 000002DE 7407                    		jz	short prngetcount
  8407 000002E0 3C45                    		cmp	al, 45h		; set_retry_count
  8408 000002E2 75E1                    		jnz	short prnfuncerr
  8409 000002E4 268B0D                  		mov	cx, [es:di]
  8410                                  prngetcount:				
  8411                                  		;mov	ds:wait_count[bx], cx
  8412 000002E7 898F[E804]              		mov	[wait_count+bx], cx
  8413 000002EB 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
  8414                                  					; return current retry count
  8415                                  		; 12/12/2022
  8416                                  		; cf=0
  8417                                  		;clc
  8418 000002EE C3                      		retn
  8419                                  ; ---------------------------------------------------------------------------
  8420                                  
  8421                                  ;************************************************************************
  8422                                  ;*									*
  8423                                  ;*  prn_ioctl_query							*
  8424                                  ;*									*
  8425                                  ;*  Added for 5.00							*
  8426                                  ;************************************************************************
  8427                                  
  8428                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
  8429 000002EF C43E[1200]              		les	di, [ptrsav]
  8430 000002F3 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8431                                  					; ioc_pc
  8432 000002F8 750D                    		jnz	short prn_query_err
  8433 000002FA 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8434 000002FE 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
  8435 00000300 7404                    		jz	short IOCtlSupported
  8436 00000302 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
  8437 00000304 7501                    		jnz	short prn_query_err
  8438                                  IOCtlSupported:	
  8439                                  		; 12/12/2022
  8440                                  		; cf=0		
  8441                                  		;clc
  8442 00000306 C3                      		retn
  8443                                  ; ---------------------------------------------------------------------------
  8444                                  
  8445                                  prn_query_err:
  8446                                  		; 12/12/2022				
  8447                                  		;stc
  8448 00000307 E9CFFD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
  8449                                  ; ---------------------------------------------------------------------------
  8450                                  
  8451                                  ;************************************************************************
  8452                                  ;*									*
  8453                                  ;*	aux port driver code -- "aux" == "com1"				*
  8454                                  ;*									*
  8455                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
  8456                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
  8457                                  ;*									*
  8458                                  ;************************************************************************
  8459                                  
  8460                                  ;	values in ah, requesting function of int 14h in rom bios
  8461                                  
  8462                                  ;auxfunc_send	 equ	1	;transmit
  8463                                  ;auxfunc_receive equ	2	;read
  8464                                  ;auxfunc_status	 equ	3	;request status
  8465                                  
  8466                                  ;	error flags, reported by int 14h, reported in ah:
  8467                                  
  8468                                  ;flag_data_ready equ	01h	;data ready
  8469                                  ;flag_overrun	 equ	02h	;overrun error
  8470                                  ;flag_parity	 equ	04h	;parity error
  8471                                  ;flag_frame	 equ	08h	;framing error
  8472                                  ;flag_break	 equ	10h	;break detect
  8473                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
  8474                                  ;flag_timeout	 equ	80h	;timeout
  8475                                  
  8476                                  ;	these flags reported in al:
  8477                                  
  8478                                  ;flag_cts	 equ	10h	;clear to send
  8479                                  ;flag_dsr	 equ	20h	;data set ready
  8480                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
  8481                                  
  8482                                  ; ---------------------------------------------------------------------------
  8483                                  
  8484                                  ;************************************************************************
  8485                                  ;*									*
  8486                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
  8487                                  ;*		   at es:di						*
  8488                                  ;*									*
  8489                                  ;************************************************************************
  8490                                  
  8491                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
  8492                                  		;jcxz	short exvec2
  8493 0000030A E311                    		jcxz	exvec2		; 19/10/2022
  8494 0000030C E87500                  		call	getbx		; put address of auxbuf	in bx
  8495 0000030F 30C0                    		xor	al, al
  8496 00000311 8607                    		xchg	al, [bx]
  8497 00000313 08C0                    		or	al, al
  8498 00000315 7503                    		jnz	short aux2
  8499                                  aux1:					
  8500 00000317 E80500                  		call	auxin		; get character	from port
  8501                                  					; won't return if error
  8502                                  aux2:					
  8503 0000031A AA                      		stosb
  8504 0000031B E2FA                    		loop	aux1		; if more characters, go around	again
  8505                                  exvec2:					
  8506 0000031D F8                      		clc			; all done, successful exit
  8507                                  auxin_retn:	; 18/12/2022
  8508 0000031E C3                      		retn
  8509                                  ; ---------------------------------------------------------------------------
  8510                                  
  8511                                  ;************************************************************************
  8512                                  ;*									*
  8513                                  ;*	auxin - call rom bios to read character from aux port		*
  8514                                  ;*		if error occurs, map the error and return one		*
  8515                                  ;*		level up to device driver exit code, setting		*
  8516                                  ;*		the number of bytes transferred appropriately		*
  8517                                  ;*									*
  8518                                  ;************************************************************************
  8519                                  
  8520                                  auxin:					
  8521 0000031F B402                    		mov	ah, 2		; auxfunc_receive
  8522 00000321 E83A00                  		call	auxop
  8523 00000324 F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
  8524                                  		;jnz	short arbad	; skip if any error bits set
  8525                                  		;retn
  8526                                  		; 25/06/2023 (BugFix)
  8527 00000327 74F5                    		jz	short auxin_retn
  8528                                  ; ---------------------------------------------------------------------------
  8529                                  
  8530                                  arbad:					
  8531 00000329 58                      		pop	ax		; remove return	address	(near call)
  8532                                  		;xor	al, al
  8533                                  		;or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
  8534                                  		; 11/08/2023
  8535 0000032A B0B0                    		mov	al, 0B0h	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0334h
  8536 0000032C E9ACFD                  		jmp	bc_err_cnt
  8537                                  
  8538                                  ; ---------------------------------------------------------------------------
  8539                                  
  8540                                  ;************************************************************************
  8541                                  ;*									*
  8542                                  ;*	aux_rdnd - non-destructive aux port read			*
  8543                                  ;*									*
  8544                                  ;************************************************************************
  8545                                  
  8546                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
  8547 0000032F E85200                  		call	getbx
  8548 00000332 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
  8549 00000334 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
  8550 00000336 7511                    		jnz	short auxdrx	; then return character
  8551 00000338 E82100                  		call	auxstat		; if not, get status of	aux device
  8552 0000033B F6C401                  		test	ah, 1		; flag_data_ready - test data ready
  8553 0000033E 740C                    		jz	short auxbus	; then device is busy (not ready)
  8554 00000340 A820                    		test	al, 20h		; flag_dsr - test data set ready
  8555 00000342 7408                    		jz	short auxbus	; then device is busy (not ready)
  8556 00000344 E8D8FF                  		call	auxin		; else aux is ready, get character
  8557 00000347 8807                    		mov	[bx], al
  8558                                  auxdrx:					
  8559 00000349 E9A9FE                  		jmp	rdexit		; return busy status
  8560                                  ; ---------------------------------------------------------------------------
  8561                                  
  8562                                  auxbus:					
  8563 0000034C E97BFE                  		jmp	z_bus_exit
  8564                                  ; ---------------------------------------------------------------------------
  8565                                  
  8566                                  ;************************************************************************
  8567                                  ;*									*
  8568                                  ;*	aux_wrst - return aux port write status				*
  8569                                  ;*									*
  8570                                  ;************************************************************************
  8571                                  
  8572                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
  8573 0000034F E80A00                  		call	auxstat		; get status of	aux in ax
  8574 00000352 A820                    		test	al, 20h		; test data set	ready
  8575 00000354 74F6                    		jz	short auxbus	; then device is busy (not ready)
  8576 00000356 F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
  8577 00000359 74F1                    		jz	short auxbus	; then device is busy (not ready)
  8578                                  		; 12/12/2022
  8579                                  		; cf=0	; (test instruction resets cf)
  8580                                  		;clc
  8581 0000035B C3                      		retn
  8582                                  ; ---------------------------------------------------------------------------
  8583                                  
  8584                                  ;************************************************************************
  8585                                  ;*									*
  8586                                  ;*	auxstat - call rom bios to determine aux port status		*
  8587                                  ;*									*
  8588                                  ;*	exit:	ax = status						*
  8589                                  ;*		dx = [auxnum]						*
  8590                                  ;*									*
  8591                                  ;************************************************************************
  8592                                  
  8593                                  auxstat:				
  8594 0000035C B403                    		mov	ah, 3		; auxfunc_status
  8595                                  
  8596                                  		; fall into auxop
  8597                                  
  8598                                  ; =============== S U B	R O U T	I N E =======================================
  8599                                  
  8600                                  ;************************************************************************
  8601                                  ;*									*
  8602                                  ;*	auxop - perform rom-biox aux port interrupt			*
  8603                                  ;*									*
  8604                                  ;*	entry:	ah = int 14h function number				*
  8605                                  ;*	exit:	ax = results						*
  8606                                  ;*		dx = [auxnum]						*
  8607                                  ;*									*
  8608                                  ;************************************************************************
  8609                                  
  8610                                  auxop:		; proc near		
  8611 0000035E 8B16[2100]              		mov	dx, [auxnum]	; ah=function code
  8612                                  					; 0=init, 1=send, 2=receive, 3=status
  8613                                  					; get port number
  8614 00000362 CD14                    		int	14h		; SERIAL I/O - GET USART STATUS
  8615                                  					; DX = port number (0-3)
  8616                                  					; Return: AX = port status code
  8617 00000364 C3                      		retn
  8618                                  
  8619                                  ; ---------------------------------------------------------------------------
  8620                                  
  8621                                  ;************************************************************************
  8622                                  ;*									*
  8623                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
  8624                                  ;*		   auxbuf [auxnum] to zero				*
  8625                                  ;*									*
  8626                                  ;*	cas - shouldn't this code call the rom bios input function	*
  8627                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
  8628                                  ;*	      pending serial input queue if there's a tsr like MODE	*
  8629                                  ;*	      which is providing interrupt-buffering of aux port?	*
  8630                                  ;*									*
  8631                                  ;************************************************************************
  8632                                  
  8633                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
  8634 00000365 E81C00                  		call	getbx		; flush	aux input buffer
  8635 00000368 C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
  8636                                  					; zero out buffer
  8637                                  		;clc			; all done, successful return
  8638                                  		; 12/12/2022
  8639                                  		; cf=0 ('add' instruction in 'getbx')
  8640 0000036B C3                      		retn
  8641                                  ; ---------------------------------------------------------------------------
  8642                                  
  8643                                  ;************************************************************************
  8644                                  ;*									*
  8645                                  ;*	aux_writ - write to aux device					*
  8646                                  ;*									*
  8647                                  ;************************************************************************
  8648                                  
  8649                                  aux_writ:				; 2C7h:374h = 70h:28E4h
  8650                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
  8651 0000036C E3AF                    		jcxz	exvec2		; 19/10/2022
  8652                                  aux_loop:				
  8653 0000036E 268A05                  		mov	al, [es:di]	; get character	to be written
  8654                                  					; move di pointer to next character
  8655 00000371 47                      		inc	di
  8656 00000372 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
  8657 00000374 E8E7FF                  		call	auxop		; send character over aux port
  8658 00000377 F6C480                  		test	ah, 80h		; check	for error
  8659 0000037A 7405                    		jz	short awok	; then no error
  8660 0000037C B00A                    		mov	al, 10		; else indicate	write fault
  8661 0000037E E95AFD                  		jmp	bc_err_cnt	; call error routines
  8662                                  ; ---------------------------------------------------------------------------
  8663                                  
  8664                                  awok:					
  8665 00000381 E2EB                    		loop	aux_loop	; if cx	is non-zero,
  8666                                  					; still	more character to print
  8667                                  		;clc			; all done, successful return
  8668                                  		; 12/12/2022
  8669                                  		; cf=0 (test instruction above)	
  8670 00000383 C3                      		retn
  8671                                  
  8672                                  ; =============== S U B	R O U T	I N E =======================================
  8673                                  
  8674                                  ;************************************************************************
  8675                                  ;*									*
  8676                                  ;*	getbx - return bx -> single byte input buffer for		*
  8677                                  ;*		selected aux port ([auxnum])				*
  8678                                  ;*									*
  8679                                  ;************************************************************************
  8680                                  
  8681                                  getbx:	
  8682 00000384 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
  8683                                  					; for selected aux port	([auxnum])
  8684                                  		;add	bx, offset auxbuf
  8685 00000388 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
  8686                                  		; 12/12/2022
  8687                                  		; cf=0 (if [uaxnum] is valid number) 
  8688 0000038C C3                      		retn
  8689                                  
  8690                                  ; ---------------------------------------------------------------------------
  8691                                  
  8692                                  ; 15/10/2022
  8693                                  
  8694                                  ;----------------------------------------------------------------
  8695                                  ;								:
  8696                                  ;		    clock device driver 			:
  8697                                  ;								:
  8698                                  ;								:
  8699                                  ;   this file contains the clock device driver. 		:
  8700                                  ;								:
  8701                                  ;   the routines in this files are:				:
  8702                                  ;								:
  8703                                  ;	routine 		function			:
  8704                                  ;	------- 		--------			:
  8705                                  ;	tim_writ		set the current time		:
  8706                                  ;	tim_read		read the current time		:
  8707                                  ;	time_to_ticks		convert time to corresponding	:
  8708                                  ;				  number of clock ticks 	:
  8709                                  ;								:
  8710                                  ; the clock ticks at the rate of:				:
  8711                                  ;								:
  8712                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
  8713                                  ; see each routine for information on the use.			:
  8714                                  ;								:
  8715                                  ;----------------------------------------------------------------
  8716                                  
  8717                                  ; convert time to ticks
  8718                                  ; input : time in cx and dx
  8719                                  ; ticks returned in cx:dx
  8720                                  
  8721                                  ;19/07/2019
  8722                                  ;09/03/2019
  8723                                  
  8724                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
  8725                                  
  8726                                  ; first convert from hour,min,sec,hund. to
  8727                                  ; total number of 100th of seconds
  8728                                  
  8729 0000038D B03C                    		mov	al, 60
  8730 0000038F F6E5                    		mul	ch		; hours	to minutes
  8731 00000391 B500                    		mov	ch, 0
  8732 00000393 01C8                    		add	ax, cx		; total	minutes
  8733 00000395 B97017                  		mov	cx, 6000	; 60*100
  8734 00000398 89D3                    		mov	bx, dx		; get out of the way of	the multiply
  8735 0000039A F7E1                    		mul	cx		; convert to 1/100 sec
  8736 0000039C 89C1                    		mov	cx, ax
  8737 0000039E B064                    		mov	al, 100
  8738 000003A0 F6E7                    		mul	bh		; convert seconds to 1/100 sec
  8739 000003A2 01C1                    		add	cx, ax		; combine seconds with hours and min
  8740 000003A4 83D200                  		adc	dx, 0		; ripple carry
  8741 000003A7 B700                    		mov	bh, 0
  8742 000003A9 01D9                    		add	cx, bx		; combine 1/100	sec
  8743 000003AB 83D200                  		adc	dx, 0
  8744                                  
  8745                                  	; dx:cx is time in 1/100 sec
  8746                                  
  8747 000003AE 92                      		xchg	ax, dx
  8748 000003AF 91                      		xchg	ax, cx		; now time is in cx:ax
  8749 000003B0 BB0BE9                  		mov	bx, 59659
  8750 000003B3 F7E3                    		mul	bx		; multiply low half
  8751 000003B5 87D1                    		xchg	dx, cx
  8752 000003B7 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
  8753 000003B8 F7E3                    		mul	bx		; multiply high	half
  8754 000003BA 01C8                    		add	ax, cx		; combine overlapping products
  8755 000003BC 83D200                  		adc	dx, 0
  8756 000003BF 92                      		xchg	ax, dx		; ax:dx=time*59659
  8757 000003C0 BB0500                  		mov	bx, 5
  8758 000003C3 F6F3                    		div	bl		; divide high half by 5
  8759 000003C5 88C1                    		mov	cl, al
  8760 000003C7 B500                    		mov	ch, 0
  8761 000003C9 88E0                    		mov	al, ah		; remainder of divide-by-5
  8762 000003CB 98                      		cbw
  8763 000003CC 92                      		xchg	ax, dx		; use it to extend low half
  8764 000003CD F7F3                    		div	bx		; divide low half by 5
  8765 000003CF 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
  8766 000003D1 CB                      		retf			; far return
  8767                                  
  8768                                  ; ---------------------------------------------------------------------------
  8769                                  
  8770                                  ; 17/10/2022
  8771                                  ; 15/10/2022
  8772                                  
  8773                                  ;--------------------------------------------------------------------
  8774                                  ;
  8775                                  ; tim_writ sets the current time
  8776                                  ;
  8777                                  ; on entry es:[di] has the current time:
  8778                                  ;
  8779                                  ;	number of days since 1-1-80	(word)
  8780                                  ;	minutes (0-59)			(byte)
  8781                                  ;	hours (0-23)			(byte)
  8782                                  ;	hundredths of seconds (0-99)	(byte)
  8783                                  ;	seconds (0-59)			(byte)
  8784                                  ;
  8785                                  ; each number has been checked for the correct range.
  8786                                  ;
  8787                                  ;	NOTE: Any changes in this routine probably require corresponding
  8788                                  ;	changes in the version that is built with the power manager driver.
  8789                                  ;	See ptime.asm.
  8790                                  ;
  8791                                  ;--------------------------------------------------------------------
  8792                                  
  8793                                  	; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  8794                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:03EAh
  8795                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
  8796 000003D2 268B05                  		mov	ax, [es:di]
  8797 000003D5 50                      		push	ax		; daycnt. we need to set this at the very
  8798                                  					; end to avoid tick windows.
  8799 000003D6 803E[F304]00            		cmp	byte [havecmosclock], 0
  8800                                  		;cmp	ds:havecmosclock, 0
  8801 000003DB 7423                    		jz	short no_cmos_1
  8802 000003DD 268A4503                		mov	al, [es:di+3]	; near indirect	calls
  8803                                  					; get binary hours
  8804                                  					; convert to bcd
  8805                                  		;call	far [bintobcd]
  8806                                  		;;call	ds:bintobcd	; call far [bintobcd]
  8807                                  		; 08/08/2023
  8808 000003E1 E8E800                  		call	bintobcd
  8809 000003E4 88C5                    		mov	ch, al		; ch = bcd hours
  8810 000003E6 268A4502                		mov	al, [es:di+2]	; get binary minutes
  8811                                  		;call	far [bintobcd]
  8812                                  		;;call	ds:bintobcd	; convert to bcd
  8813 000003EA E8DF00                  		call	bintobcd
  8814 000003ED 88C1                    		mov	cl, al		; cl = bcd minutes
  8815 000003EF 268A4505                		mov	al, [es:di+5]	; get binary seconds
  8816                                  		;call	far [bintobcd]
  8817                                  		;;call	ds:bintobcd
  8818 000003F3 E8D600                  		call	bintobcd
  8819                                  
  8820 000003F6 88C6                    		mov	dh, al		; dh = bcd seconds
  8821 000003F8 B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
  8822 000003FA FA                      		cli
  8823 000003FB B403                    		mov	ah, 3
  8824 000003FD CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8825                                  					; CH = hours in	BCD, CL	= minutes in BCD
  8826                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
  8827                                  					; Return: CMOS clock set
  8828 000003FF FB                      		sti
  8829                                  no_cmos_1:				
  8830 00000400 268B4D02                		mov	cx, [es:di+2]
  8831 00000404 268B5504                		mov	dx, [es:di+4]
  8832                                  		; 17/10/2022
  8833 00000408 FF1E[C106]              		call	far [ttticks]
  8834                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
  8835                                  					; convert time to ticks
  8836                                  					; cx:dx	now has	time in	ticks
  8837 0000040C FA                      		cli			; turn off timer
  8838 0000040D B401                    		mov	ah, 1
  8839 0000040F CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  8840                                  					; CX:DX	= clock	count
  8841                                  					; Return: time of day set
  8842                                  		;pop	ds:daycnt
  8843 00000411 8F06[F004]              		pop	word [daycnt]
  8844 00000415 FB                      		sti
  8845                                  		;cmp	ds:havecmosclock, 0
  8846 00000416 803E[F304]00            		cmp	byte [havecmosclock], 0
  8847 0000041B 7409                    		jz	short no_cmos_2
  8848                                  
  8849                                  		; 08/08/2023
  8850                                  		;call	far [daycnttoday]
  8851                                  		;;call	ds:daycnttoday	; call far [daycnttoday]
  8852                                  					; convert to bcd format
  8853 0000041D E80700                  		call	daycnttoday
  8854                                  
  8855 00000420 FA                      		cli
  8856 00000421 B405                    		mov	ah, 5
  8857 00000423 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8858                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
  8859                                  					; CH = century (19h or 20h)
  8860                                  					; Return: CMOS clock set
  8861 00000425 FB                      		sti
  8862                                  no_cmos_2:
  8863                                  		; 12/12/2022
  8864                                  		; cf=0
  8865                                  		;clc
  8866 00000426 C3                      		retn
  8867                                  
  8868                                  ; ---------------------------------------------------------------------------
  8869                                  
  8870                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  8871                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0440h
  8872                                  %if 1 
  8873                                  
  8874                                  ; CMOS Clock setting support routines used by MSCLOCK.
  8875                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  8876                                  
  8877                                  daycnttoday:	; proc near
  8878                                  
  8879                                  ; entry: [daycnt] = number of days since 1-1-80
  8880                                  ;
  8881                                  ; return: ch - century in bcd
  8882                                  ;	  cl - year in bcd
  8883                                  ;	  dh - month in bcd
  8884                                  ;	  dl - day in bcd
  8885                                  
  8886                                  		; 08/08/2023 (ds:) (near proc)
  8887                                  		; 16/10/2022 (cs:) (far proc)		
  8888 00000427 FF36[F004]              		push	word [daycnt] ; save daycnt
  8889 0000042B 813E[F004]891C          		cmp	word [daycnt], 7305 ; (365*20+(20/4))
  8890                                  					; # days from 1-1-1980 to 1-1-2000
  8891 00000431 7308                    		jnb	short century20
  8892                                  		;mov	byte [base_century], 19
  8893                                  		;mov	byte [base_year], 80
  8894                                  		; 08/08/2023
  8895 00000433 C706[F404]1350          		mov	word [base_century], 5013h
  8896 00000439 EB0C                    		jmp	short years
  8897                                  ; ----------------------------------------------------------------------------
  8898                                  		
  8899                                  century20:				
  8900                                  		;mov	byte [base_century], 20
  8901                                  		;mov	byte [base_year], 0
  8902                                  		; 08/08/2023
  8903 0000043B C706[F404]1400          		mov	word [base_century], 20
  8904 00000441 812E[F004]891C          		sub	word [daycnt], 7305 ; (365*20+(20/4))
  8905                                  					; adjust daycnt
  8906                                  years:					
  8907 00000447 31D2                    		xor	dx, dx
  8908 00000449 A1[F004]                		mov	ax, [daycnt]
  8909 0000044C BBB505                  		mov	bx, 1461	; (366+365*3)
  8910                                  					; # of days in a Leap year block
  8911 0000044F F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
  8912 00000451 8916[F004]              		mov	[daycnt], dx	; save daycnt left
  8913 00000455 B304                    		mov	bl, 4
  8914 00000457 F6E3                    		mul	bl		; AX = # of years. Less	than 100
  8915 00000459 0006[F504]              		add	[base_year], al ; So, ah = 0. Adjust year
  8916 0000045D FF06[F004]              		inc	word [daycnt]	; set daycnt to	1 base
  8917                                  		; 08/08/2023
  8918 00000461 BB6E01                  		mov	bx, 366
  8919 00000464 B90300                  		mov	cx, 3
  8920                                  		;cmp	word [daycnt], 366 ; daycnt=remainder of leap year
  8921 00000467 391E[F004]              		cmp	[daycnt], bx ; 366
  8922 0000046B 7619                    		jbe	short leapyear	; within 366+355+355+355 days.
  8923 0000046D FE06[F504]              		inc	byte [base_year] ; if daycnt <= 366, then leap year
  8924                                  		;sub	word [daycnt], 366 ; else daycnt--, base_year++ ;
  8925 00000471 291E[F004]              		sub	[daycnt], bx ; 366 ; 08/08/2023
  8926                                  		;mov	cx, 3		; And next three years are normal
  8927                                  regularyear:	
  8928                                  		; 08/08/2023
  8929 00000475 4B                      		dec	bx ; 365			
  8930                                  		;cmp	word [daycnt], 365 ; for(i=1; i>3 or daycnt <=365; i++)
  8931 00000476 391E[F004]              		cmp	[daycnt], bx ; 365 ; 08/08/2023
  8932 0000047A 760F                    		jbe	short yeardone	; {if (daycnt >	365)
  8933 0000047C FE06[F504]              		inc	byte [base_year] ; { daycnt -=	365
  8934                                  		;sub	word [daycnt], 365 ; }
  8935 00000480 291E[F004]              		sub	[daycnt], bx ; 365 ; 08/08/2023 
  8936 00000484 E2EF                    		loop	regularyear	; }
  8937                                  					;
  8938                                  					; should never fall through loop
  8939                                  leapyear:	
  8940 00000486 C606[F704]1D            		mov	byte [february], 29 ; 08/08/2023			
  8941                                  		;mov	byte [month_tab+1], 29 ; leap year.
  8942                                  					; change month table.
  8943                                  yeardone:				
  8944 0000048B 31DB                    		xor	bx, bx
  8945 0000048D 31D2                    		xor	dx, dx
  8946 0000048F A1[F004]                		mov	ax, [daycnt]
  8947                                  		;mov	si, offset month_tab
  8948 00000492 BE[F604]                		mov	si, month_tab	; 19/10/2022
  8949                                  		;mov	cx, 12
  8950                                  		; 08/08/2023
  8951 00000495 B10C                    		mov	cl, 12
  8952                                  months:					
  8953 00000497 FEC3                    		inc	bl
  8954                                  		; 08/08/2023
  8955 00000499 8A14                    		mov	dl, [si]	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:04B7h
  8956 0000049B 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
  8957                                  					; dh=0
  8958 0000049D 7605                    		jbe	short month_done
  8959 0000049F 46                      		inc	si		; next month
  8960 000004A0 29D0                    		sub	ax, dx		; adjust daycnt
  8961 000004A2 E2F3                    		loop	months		;
  8962                                  					; should never fall through loop
  8963                                  month_done:	
  8964 000004A4 C606[F704]1C            		mov	byte [february], 28 ; 08/08/2023
  8965                                  		;mov	byte [month_tab+1], 28
  8966                                  					; restore month table value
  8967 000004A9 88DA                    		mov	dl, bl
  8968 000004AB 8A36[F504]              		mov	dh, [base_year]
  8969 000004AF 8A0E[F404]              		mov	cl, [base_century] ; al=day,dl=month,dh=year,cl=cntry
  8970 000004B3 E81600                  		call	bintobcd	; convert "day"	to bcd
  8971                                  					; dl = bcd day,	al = month
  8972 000004B6 86D0                    		xchg	dl, al
  8973 000004B8 E81100                  		call	bintobcd	; dh = bcd month, al = year
  8974 000004BB 86F0                    		xchg	dh, al
  8975 000004BD E80C00                  		call	bintobcd	; cl = bcd year, al = century
  8976 000004C0 86C8                    		xchg	cl, al
  8977 000004C2 E80700                  		call	bintobcd	; ch = bcd century
  8978 000004C5 88C5                    		mov	ch, al
  8979 000004C7 8F06[F004]              		pop	word [daycnt] ; restore original value
  8980 000004CB C3                      		retn
  8981                                  
  8982                                  ;----------------------------------------------------------------------------
  8983                                  
  8984                                  bintobcd:	; proc near		; real time clock support
  8985                                  
  8986                                  ;convert a binary input in al (less than 63h or 99 decimal)
  8987                                  ;into a bcd value in al. ah destroyed.	
  8988                                  		
  8989 000004CC D40A                    		aam			; AH = AL/10, AL = AL MOD 10
  8990 000004CE D510                    		aad     10h             ; db 0D5h,10h
  8991                                  					; AL = (AH*10H)+AL, AH = 0
  8992 000004D0 C3                      		retn
  8993                                  %endif
  8994                                  
  8995                                  ;----------------------------------------------------------------------------
  8996                                  
  8997                                  ; 15/10/2022
  8998                                  
  8999                                  ;----------------------------------------------------------------------------
  9000                                  ; gettime reads date and time
  9001                                  ; and returns the following information:
  9002                                  ;
  9003                                  ;	es:[di]  =count of days since 1-1-80
  9004                                  ;	es:[di+2]=hours
  9005                                  ;	es:[di+3]=minutes
  9006                                  ;	es:[di+4]=seconds
  9007                                  ;	es:[di+5]=hundredths of seconds
  9008                                  ;
  9009                                  ;	NOTE:  Any changes in this routine probably require corresponding
  9010                                  ;	changes in the version that is built with the power manager driver.
  9011                                  ;	See ptime.asm.
  9012                                  ;----------------------------------------------------------------------------
  9013                                  
  9014                                  tim_read:				; 2C7h:435h = 70h:29A5h
  9015 000004D1 E84B00                  		call	GetTickCnt
  9016 000004D4 8B36[F004]              		mov	si, [daycnt]
  9017                                  
  9018                                  ; we now need to convert the time in tick to the time in 100th of
  9019                                  ; seconds. the relation between tick and seconds is:
  9020                                  ;
  9021                                  ;		 65,536 seconds
  9022                                  ;	       ----------------
  9023                                  ;		1,193,180 tick
  9024                                  ;
  9025                                  ; to get to 100th of second we need to multiply by 100. the equation is:
  9026                                  ;
  9027                                  ;	ticks from clock  * 65,536 * 100
  9028                                  ;      --------------------------------- = time in 100th of seconds
  9029                                  ;		1,193,180
  9030                                  ;
  9031                                  ; fortunately this formula simplifies to:
  9032                                  ;
  9033                                  ;	ticks from clock * 5 * 65,536
  9034                                  ;      --------------------------------- = time in 100th of seconds
  9035                                  ;		59,659
  9036                                  ;
  9037                                  ; the calculation is done by first multipling tick by 5. next we divide by
  9038                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
  9039                                  ; my 16 bits to the left.
  9040                                  ;
  9041                                  ; start with ticks in cx:dx
  9042                                  ; multiply by 5
  9043                                  
  9044 000004D8 89C8                    		mov	ax, cx
  9045 000004DA 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
  9046                                  					; multiply by 5
  9047 000004DC D1E2                    		shl	dx, 1
  9048 000004DE D1D1                    		rcl	cx, 1		; times	2
  9049 000004E0 D1E2                    		shl	dx, 1
  9050 000004E2 D1D1                    		rcl	cx, 1		; times	4
  9051 000004E4 01DA                    		add	dx, bx
  9052 000004E6 11C8                    		adc	ax, cx		; times	5
  9053 000004E8 92                      		xchg	ax, dx
  9054                                  
  9055                                  ; now have ticks * 5 in	dx:ax
  9056                                  ; we now need to multiply by 65536 and divide by 59659 d.
  9057                                  
  9058 000004E9 B90BE9                  		mov	cx, 59659	; get divisor
  9059 000004EC F7F1                    		div	cx		; dx now has remainder
  9060                                  					; ax has high word of final quotient
  9061                                  
  9062                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  9063                                  		;mov	bx, ax		; put high word	in safe	place
  9064 000004EE 93                      		xchg	bx, ax
  9065 000004EF 31C0                    		xor	ax, ax		; this is the multiply by 65536
  9066 000004F1 F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
  9067                                  
  9068                                  ; rounding based on the	remainder may be added here
  9069                                  ; the result in	bx:ax is time in 1/100 second.
  9070                                  
  9071 000004F3 89DA                    		mov	dx, bx		
  9072 000004F5 B9C800                  		mov	cx, 200		; extract 1/100's
  9073                                  
  9074                                  ; division by 200 is necessary to ensure no overflow--max result
  9075                                  ; is number of seconds in a day/2 = 43200.
  9076                                  
  9077 000004F8 F7F1                    		div	cx
  9078 000004FA 80FA64                  		cmp	dl, 100		; remainder over 100?
  9079 000004FD 7203                    		jb	short noadj
  9080 000004FF 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
  9081                                  noadj:					
  9082 00000502 F5                      		cmc			; if we	subtracted 100,	carry is now set
  9083 00000503 88D3                    		mov	bl, dl		; save 1/100's
  9084                                  
  9085                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
  9086                                  ; by two, shifting a one in if the remainder had exceeded 100.
  9087                                  
  9088 00000505 D1D0                    		rcl	ax, 1		
  9089 00000507 B200                    		mov	dl, 0
  9090 00000509 D1D2                    		rcl	dx, 1
  9091 0000050B B93C00                  		mov	cx, 60		; divide out seconds
  9092 0000050E F7F1                    		div	cx
  9093 00000510 88D7                    		mov	bh, dl		; save the seconds
  9094 00000512 F6F1                    		div	cl		; break	into hours and minutes
  9095 00000514 86C4                    		xchg	al, ah
  9096                                  
  9097                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
  9098                                  
  9099                                  		; 08/08/2023
  9100                                  		;push	ax
  9101                                  		;mov	ax, si		; daycnt
  9102 00000516 96                      		xchg	ax, si
  9103 00000517 AB                      		stosw
  9104                                  		;pop	ax
  9105 00000518 96                      		xchg	ax, si		; al = hours, ah = minutes
  9106 00000519 AB                      		stosw
  9107 0000051A 89D8                    		mov	ax, bx
  9108 0000051C AB                      		stosw
  9109 0000051D F8                      		clc			; [es:di] = count of days since 1-1-80
  9110                                  					;   [es:di+2] = hours
  9111                                  					;   [es:di+3] = minutes
  9112                                  					;   [es:di+4] = seconds
  9113                                  					;   [es:di+5] = hundredths of seconds
  9114 0000051E C3                      		retn
  9115                                  
  9116                                  ; =============== S U B	R O U T	I N E =======================================
  9117                                  
  9118                                  ; 15/10/2022
  9119                                  
  9120                                  ;----------------------------------------------------------------------------
  9121                                  ;
  9122                                  ; procedure : GetTickCnt
  9123                                  ;
  9124                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
  9125                                  ;		of rollover [except when power management driver is in use]. 
  9126                                  ;		Uses the following logic for updating Daycnt
  9127                                  ;
  9128                                  ;		if ( rollover ) {
  9129                                  ;			if ( t_switch )
  9130                                  ;				daycnt++ ;
  9131                                  ;			else
  9132                                  ;				daycnt += rollover ;
  9133                                  ;		}
  9134                                  ;
  9135                                  ; USES : AX
  9136                                  ;
  9137                                  ; RETURNS : CX:DX - tick count
  9138                                  ; MODIFIES : daycnt
  9139                                  ;
  9140                                  ;----------------------------------------------------------------------------
  9141                                  
  9142                                  		; 17/10/2022
  9143                                  GetTickCnt:	
  9144 0000051F 30E4                    		xor	ah, ah
  9145 00000521 CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  9146                                  					; Return: CX:DX	= clock	count
  9147                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  9148                                  					; midnight
  9149                                  					; Otherwise, AL	> 0
  9150 00000523 803E[F204]00            		cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
  9151 00000528 7507                    		jnz	short inc_case	; old method assumes  that Int 1Ah returns rollover flag
  9152 0000052A 30E4                    		xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
  9153                                  					; and not flag
  9154 0000052C 0106[F004]              		add	[daycnt], ax
  9155 00000530 C3                      		retn
  9156                                  ; ---------------------------------------------------------------------------
  9157                                  
  9158                                  inc_case:				
  9159 00000531 08C0                    		or	al, al
  9160 00000533 7404                    		jz	short no_rollover
  9161 00000535 FF06[F004]              		inc	word [daycnt]
  9162                                  no_rollover:				
  9163 00000539 C3                      		retn
  9164                                  
  9165                                  ;----------------------------------------------------------------------------
  9166                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
  9167                                  ;----------------------------------------------------------------------------
  9168                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9169                                  ; 09/03/2019 - Retro DOS v4.0
  9170                                  
  9171                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
  9172                                  ; 26/05/2018 - Retro DOS v3.0
  9173                                  ; 23/03/2018 - Retro DOS v2.0
  9174                                  
  9175                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
  9176                                  
  9177                                  ;struc BPB_TYPE
  9178                                  ;.SECSIZE:	resw 1
  9179                                  ;.SECALL:	resb 1
  9180                                  ;.RESNUM:	resw 1
  9181                                  ;.FATNUM:	resb 1
  9182                                  ;.DIRNUM:	resw 1
  9183                                  ;.SECNUM:	resw 1
  9184                                  ;.FATID:	resb 1
  9185                                  ;.FATSIZE:	resw 1
  9186                                  ;.SLIM:		resw 1
  9187                                  ;.HLIM:		resw 1
  9188                                  ;.HIDDEN:	resw 1
  9189                                  ;.size:
  9190                                  ;endstruc
  9191                                  
  9192                                  ;-----------------------------------------------------------------
  9193                                  ;	disk interface routines
  9194                                  ;-----------------------------------------------------------------
  9195                                  
  9196                                  ; device attribute bits:
  9197                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
  9198                                  
  9199                                  ;MAXERR		equ	5
  9200                                  ;MAX_HD_FMT_ERR	equ	2
  9201                                  
  9202                                  ;LSTDRV	equ 504h
  9203                                  
  9204                                  ; some floppies do not have changeline. as a result, media-check would
  9205                                  ; normally return i-don't-know, the dos would continually reread the fat and
  9206                                  ; discard cached data. we optimize this by implementing a logical door-latch:
  9207                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
  9208                                  ; the time of the last successful disk operation and compare it with the current
  9209                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
  9210                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
  9211                                  ; since we cannot trust the timer to be always available, we record the number 
  9212                                  ; of media checks that have occurred when no apparent time has elapsed. while
  9213                                  ; this number is < a given threshold, we say no change. when it exceeds that
  9214                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
  9215                                  ; the time of last successful access, if we see that time has passed too,
  9216                                  ; we reset the counter.
  9217                                  
  9218                                  accessmax	equ	5
  9219                                  
  9220                                  ; due to various bogosities, we need to continually adjust what the head
  9221                                  ; settle time is.  the following algorithm is used:
  9222                                  ;
  9223                                  ;   get the current head settle value.
  9224                                  ;   if it is 0, then
  9225                                  ;	set slow = 15
  9226                                  ;   else
  9227                                  ;	set slow = value
  9228                                  ;   ...
  9229                                  ;*********************************************
  9230                                  ;************ old algorithm ******************
  9231                                  ;*   if we are seeking and writing then
  9232                                  ;*	 use slow
  9233                                  ;*   else
  9234                                  ;*	 use fast
  9235                                  ;*********************************************
  9236                                  ;*********** ibm's requested logic ***********
  9237                                  ;   if we are seeking and writing and not on an at then
  9238                                  ;	use slow
  9239                                  ;   else
  9240                                  ;	use fast
  9241                                  ;   ...
  9242                                  ;   restore current head settle value
  9243                                  ;
  9244                                  ;
  9245                                  ;---------------------------------------
  9246                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
  9247                                  					; it on after handling config.sys file as a
  9248                                  					; default value, if multrk_flag = multrk_off1.
  9249                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
  9250                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
  9251                                  
  9252                                  ; close data segment, open Bios_Code segment
  9253                                  
  9254                                  ; 15/10/2022
  9255                                  
  9256                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
  9257                                  
  9258                                  ;-----------------------------------------------------------------
  9259                                  ;	command jump table
  9260                                  ;-----------------------------------------------------------------
  9261                                  
  9262 0000053A 00                      		db 0
  9263                                  ; 11/12/2022
  9264                                  %if 0
  9265                                  
  9266                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
  9267                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
  9268                                  		dw 1742h		; dsk_init
  9269                                  		dw 4EBh			; media_chk
  9270                                  		dw 592h			; get_bpb
  9271                                  		dw 0D5h			; bc_cmderr
  9272                                  		dw 857h			; dsk_read
  9273                                  		dw 83Dh			; x_bus_exit
  9274                                  		dw 558h			; ret_carry_clear
  9275                                  		dw 558h			; ret_carry_clear
  9276                                  		dw 849h			; dsk_writ
  9277                                  		dw 841h			; dsk_writv
  9278                                  		dw 558h			; ret_carry_clear
  9279                                  		dw 558h			; ret_carry_clear
  9280                                  		dw 0D5h			; bc_cmderr
  9281                                  		dw 80Ah			; dsk_open
  9282                                  		dw 81Ah			; dsk_close
  9283                                  		dw 831h			; dsk_rem
  9284                                  		dw 558h			; ret_carry_clear
  9285                                  		dw 558h			; ret_carry_clear
  9286                                  		dw 558h			; ret_carry_clear
  9287                                  		dw 0C6Bh		; do_generic_ioctl
  9288                                  		dw 558h			; ret_carry_clear
  9289                                  		dw 558h			; ret_carry_clear
  9290                                  		dw 558h			; ret_carry_clear
  9291                                  		dw 1124h		; ioctl_getown
  9292                                  		dw 1142h		; ioctl_setown
  9293                                  		dw 129Ah		; ioctl_support_query
  9294                                  
  9295                                  ;dtbl_siz equ $-dsktbl
  9296                                  
  9297                                  %endif
  9298                                  		; 11/12/2022
  9299 0000053B 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
  9300 0000053C [8717]                  		dw dsk_init
  9301 0000053E [8405]                  		dw media_chk
  9302 00000540 [2306]                  		dw get_bpb
  9303 00000542 [D900]                  		dw bc_cmderr
  9304 00000544 [D508]                  		dw dsk_read
  9305 00000546 [BB08]                  		dw x_bus_exit
  9306 00000548 [EE05]                  		dw ret_carry_clear
  9307 0000054A [EE05]                  		dw ret_carry_clear
  9308 0000054C [C708]                  		dw dsk_writ
  9309 0000054E [BF08]                  		dw dsk_writv
  9310 00000550 [EE05]                  		dw ret_carry_clear
  9311 00000552 [EE05]                  		dw ret_carry_clear
  9312 00000554 [D900]                  		dw bc_cmderr
  9313 00000556 [8B08]                  		dw dsk_open
  9314 00000558 [9A08]                  		dw dsk_close
  9315 0000055A [B008]                  		dw dsk_rem
  9316 0000055C [EE05]                  		dw ret_carry_clear
  9317 0000055E [EE05]                  		dw ret_carry_clear
  9318 00000560 [EE05]                  		dw ret_carry_clear
  9319 00000562 [E40C]                  		dw do_generic_ioctl
  9320 00000564 [EE05]                  		dw ret_carry_clear
  9321 00000566 [EE05]                  		dw ret_carry_clear
  9322 00000568 [EE05]                  		dw ret_carry_clear
  9323 0000056A [8A11]                  		dw ioctl_getown
  9324 0000056C [A711]                  		dw ioctl_setown
  9325 0000056E [F612]                  		dw ioctl_support_query
  9326                                  
  9327                                  dtbl_siz equ $-dsktbl
  9328                                  
  9329                                  ; =============== S U B	R O U T	I N E =======================================
  9330                                  
  9331                                  ; ---------------------------------------------------------------------------
  9332                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
  9333                                  ; the one that belongs to the drive specified. carry is set if none exists
  9334                                  ; for the drive. Pointer is returned in es:[di]
  9335                                  ;
  9336                                  ;  AL contains the logical drive number.
  9337                                  ; ---------------------------------------------------------------------------
  9338                                  
  9339                                  SetDrive:	
  9340                                  		;les	di, ds:start_bds ; Point es:di to first bds	
  9341 00000570 C43E[1901]              		les	di, [start_bds] ; 19/10/2022
  9342                                  X_Scan_Loop:				
  9343 00000574 26384505                		cmp	[es:di+5], al	
  9344 00000578 7409                    		jz	short X_SetDrv
  9345 0000057A 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
  9346 0000057D 83FFFF                  		cmp	di, 0FFFFh
  9347 00000580 75F2                    		jnz	short X_Scan_Loop
  9348 00000582 F9                      		stc
  9349                                  X_SetDrv:				
  9350 00000583 C3                      		retn
  9351                                  
  9352                                  ; ---------------------------------------------------------------------------
  9353                                  
  9354                                  ; 15/10/2022
  9355                                  
  9356                                  ; ---------------------------------------------------------------------
  9357                                  ; if id is f9, have a 96tpi disk else
  9358                                  ; if bit 2 is 0 then media is not removable and could not have changed
  9359                                  ;  otherwise if within 2 secs of last disk operation media could not
  9360                                  ;    have changed, otherwise dont know if media has changed
  9361                                  ; ---------------------------------------------------------------------
  9362                                  
  9363                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
  9364 00000584 E8E9FF                  		call	SetDrive
  9365 00000587 BE0100                  		mov	si, 1
  9366 0000058A 26F6452401              		test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
  9367                                  					; fchanged_by_format
  9368 0000058F 7415                    		jz	short WeAreNotFakingIt
  9369                                  		; 12/12/2022
  9370 00000591 26806524FE              		and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
  9371                                  		;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
  9372                                  					; ~fchanged_by_format ;	reset flag
  9373 00000596 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9374                                  					; Ensure that we ask the rom if media has changed
  9375 0000059B 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9376                                  					; fnon_removable
  9377 000005A0 740B                    		jz	short wehaveafloppy
  9378                                  		;mov	si, 0FFFFh	; Indicate media changed
  9379                                  		; 11/08/2023
  9380 000005A2 F7DE                    		neg	si		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05E0h
  9381 000005A4 EB2B                    		jmp	short Media_Done ; Media_Done
  9382                                  ; ---------------------------------------------------------------------------
  9383                                  
  9384                                  WeAreNotFakingIt:
  9385                                  		;test	byte [es:di+BDS.flags], fnon_removable			
  9386 000005A6 26F6452301              		test	byte [es:di+23h], 1
  9387 000005AB 7524                    		jnz	short Media_Done
  9388                                  wehaveafloppy:				
  9389                                  		;xor	si, si ; 0	; Presume "I don't know"
  9390                                  		; 11/08/2023
  9391 000005AD 4E                      		dec	si ; 0 		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05EBh
  9392                                  
  9393                                  		; If we have a floppy with changeline support, we ask the ROM
  9394                                  		; to determine if media has changed. We do not perform the
  9395                                  		; 2 second check for these drives.
  9396                                  
  9397 000005AE 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
  9398 000005B3 740A                    		jz	short mChk_NoChangeLine	; Brif not
  9399 000005B5 E8A712                  		call	mediacheck	;  Call	into removable routine
  9400 000005B8 7236                    		jb	short err_exitj
  9401 000005BA E8FF13                  		call	haschange
  9402 000005BD 7512                    		jnz	short Media_Done
  9403                                  mChk_NoChangeLine:
  9404                                  		; If we come here, we have a floppy with no changeline support
  9405                                  			
  9406 000005BF BE0100                  		mov	si, 1		; Presume no change
  9407 000005C2 A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
  9408 000005C5 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
  9409                                  					; Is drive of last access the same?
  9410 000005C9 7505                    		jnz	short Media_Unk	; No, then "i don't know"
  9411 000005CB E82800                  		call	Check_Time_Of_Access
  9412 000005CE EB01                    		jmp	short Media_Done
  9413                                  ; ---------------------------------------------------------------------------
  9414                                  
  9415                                  Media_Unk:				
  9416 000005D0 4E                      		dec	si		; ; Return "I don't know"
  9417                                  
  9418                                  		; SI now contains the correct value for media change.
  9419                                  		; Clean up the left overs
  9420                                  Media_Done:	
  9421                                  		; 19/10/2022			
  9422 000005D1 06                      		push	es
  9423 000005D2 C41E[1200]              		les	bx, [ptrsav]
  9424 000005D6 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
  9425 000005DA 07                      		pop	es
  9426 000005DB 09F6                    		or	si, si
  9427 000005DD 790F                    		jns	short ret_carry_clear ;	volidok
  9428 000005DF 803E[7700]00            		cmp	byte [fhave96], 0
  9429 000005E4 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
  9430 000005E6 E85F13                  		call	media_set_vid
  9431                                  mChk1_NoChangeLine:			
  9432 000005E9 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9433                                  					; Make sure we ask rom for media check
  9434                                  ret_carry_clear:			
  9435 000005EE F8                      		clc			; volidok
  9436 000005EF C3                      		retn
  9437                                  ; ---------------------------------------------------------------------------
  9438                                  
  9439                                  err_exitj:				
  9440 000005F0 E87C06                  		call	maperror	; guaranteed to	set carry
  9441                                  ret81:					
  9442 000005F3 B481                    		mov	ah, 81h		; return error status
  9443 000005F5 C3                      		retn			; return with carry set
  9444                                  
  9445                                  ; =============== S U B	R O U T	I N E =======================================
  9446                                  
  9447                                  ; ---------------------------------------------------------------------------
  9448                                  ; perform a check on the time passed since the last access for this physical
  9449                                  ; drive.
  9450                                  ; we are accessing the same drive. if the time of last successful access was
  9451                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
  9452                                  ; returns in si:
  9453                                  ;	0 - if time of last access was >= 2 seconds
  9454                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
  9455                                  ; registers affected ax,cx,dx, flags.
  9456                                  ;
  9457                                  ;	assume es:di -> bds, ds->Bios_Data
  9458                                  ; ---------------------------------------------------------------------------
  9459                                  
  9460                                  		; 19/10/2022
  9461                                  Check_Time_Of_Access:
  9462 000005F6 BE0100                  		mov	si, 1		; presume no change.
  9463 000005F9 E823FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
  9464 000005FC 268B4547                		mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
  9465                                  					; get stored time
  9466 00000600 29C2                    		sub	dx, ax
  9467 00000602 268B4549                		mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
  9468 00000606 19C1                    		sbb	cx, ax
  9469                                  		; 11/08/2023
  9470                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0646h
  9471                                  		;mov	al, [accesscount]
  9472 00000608 7515                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
  9473 0000060A 09D2                    		or	dx, dx		; time must pass
  9474 0000060C 750C                    		jnz	short timepassed ; yes, examine max value
  9475                                  		; 11/08/2023
  9476                                  		;inc	al
  9477                                  		;cmp	al, 5
  9478                                  		;;inc	byte [accesscount]
  9479                                  		;;cmp	byte [accesscount], 5 
  9480                                  		;			; if count is less than threshold, ok
  9481                                  		;jb	short timecheck_ret
  9482                                  		;;dec	byte [accesscount] ; don't let the count wrap
  9483                                  		; 11/08/2023
  9484                                  		;dec	al
  9485                                  		;jmp	short timecheck_unk ; "i don't know" if media changed
  9486                                  		; 11/08/2023
  9487 0000060E 803E[1D01]04            		cmp	byte [accesscount], 4
  9488 00000613 730A                    		jnb	short timecheck_unk
  9489 00000615 FE06[1D01]              		inc	byte [accesscount]
  9490 00000619 C3                      		retn
  9491                                  
  9492                                  ; ---------------------------------------------------------------------------
  9493                                  
  9494                                  timepassed:
  9495 0000061A 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
  9496                                  					; min elapsed time? (2 seconds)
  9497 0000061D 7601                    		jbe	short timecheck_ret ; yes, presume no change
  9498                                  
  9499                                  		; everything indicates that we do not know what has happened.
  9500                                  timecheck_unk:				
  9501 0000061F 4E                      		dec	si		; presume i don't know
  9502                                  timecheck_ret:
  9503                                  		; 11/08/2023
  9504                                  		;mov	[accesscount], al
  9505 00000620 C3                      		retn
  9506                                  
  9507                                  ; ---------------------------------------------------------------------------
  9508                                  ; 15/10/2022
  9509                                  Err_Exitj2:
  9510 00000621 EBCD                    		jmp	short err_exitj
  9511                                  
  9512                                  ; ---------------------------------------------------------------------------
  9513                                  
  9514                                  ; 15/10/2022
  9515                                  
  9516                                  ; ==========================================================================
  9517                                  ; Build a valid bpb for the disk in the drive.
  9518                                  ; ==========================================================================
  9519                                  
  9520                                  		; 19/10/2022
  9521                                  get_bpb:				; 2C7h:592h = 70h:2B02h
  9522 00000623 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
  9523 00000626 E847FF                  		call	SetDrive	; get the correct bds for the drive
  9524 00000629 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9525                                  					; fnon_removable
  9526 0000062E 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
  9527                                  
  9528                                  		; let's set the default value for volid,vol_serial,
  9529                                  		; filesys_id in bds table
  9530                                  
  9531 00000630 E83700                  		call	clear_ids
  9532                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
  9533 00000633 C606[0205]01            		mov	byte [set_id_flag], 1
  9534 00000638 E85B00                  		call	GetBp		; build	a bpb if necessary
  9535 0000063B 72B6                    		jb	short ret81
  9536                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
  9537 0000063D 803E[0205]02            		cmp	byte [set_id_flag], 2
  9538                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
  9539 00000642 C606[0205]00            		mov	byte [set_id_flag], 0
  9540 00000647 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
  9541                                  					; otherwise, conventional boot record
  9542                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
  9543 00000649 803E[7700]00            		cmp	byte [fhave96], 0
  9544 0000064E 7403                    		jz	short already_gotbpb ; brif not
  9545 00000650 E86F13                  		call	set_volume_id
  9546                                  already_gotbpb:				
  9547 00000653 83C706                  		add	di, 6		; BDS.BPB
  9548                                  					; return the bpb from the current bds
  9549                                  
  9550                                  ;		 fall into setptrsav, es:di -> result
  9551                                  
  9552                                  ; ---------------------------------------------------------------------------
  9553                                  
  9554                                  ; 15/10/2022
  9555                                  
  9556                                  ; ==========================================================================
  9557                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
  9558                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
  9559                                  ;Note that this works in most cases because most pointers are in Bios_Data.
  9560                                  ;It fails, for instance, when we install an external drive using driver.sys
  9561                                  ;because then the BDS segment is no longer Bios_Data. 
  9562                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
  9563                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
  9564                                  ;restored before returning to the caller.
  9565                                  ; ==========================================================================
  9566                                  
  9567                                  		; 19/10/2022
  9568                                  SetPtrSav:	; return point for dsk_init				
  9569 00000656 8CC1                    		mov	cx, es		; save es
  9570                                  		;les	bx, ds:ptrsav
  9571 00000658 C41E[1200]              		les	bx, [ptrsav]
  9572 0000065C 2688670D                		mov	[es:bx+0Dh], ah	; [es:bx+media]
  9573 00000660 26897F12                		mov	[es:bx+12h], di	; [es:bx+count]
  9574 00000664 26894F14                		mov	[es:bx+14h], cx	; [es:bx+count+2]
  9575 00000668 F8                      		clc
  9576 00000669 C3                      		retn
  9577                                  
  9578                                  ; =============== S U B	R O U T	I N E =======================================
  9579                                  
  9580                                  ; 15/10/2022
  9581                                  
  9582                                  ; -----------------------------------------------------
  9583                                  ; clear ids in bds table. only applied for floppies.
  9584                                  ;input:  es:di -> bds table
  9585                                  ;	assumes ds: -> Bios_Data
  9586                                  ;output: volid set to "NO NAME    "
  9587                                  ;	 vol_serial set to 0.
  9588                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
  9589                                  ;	   depending on the flag fatsize in bds.
  9590                                  ;
  9591                                  ;	trashes si, cx
  9592                                  ; -----------------------------------------------------
  9593                                  
  9594                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
  9595                                  ;size_of_EXT_SYSTEM_ID equ 8
  9596                                  
  9597                                  clear_ids:
  9598 0000066A 57                      		push	di
  9599 0000066B 31C9                    		xor	cx, cx		; no serial number
  9600 0000066D 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9601 00000671 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9602                                  
  9603                                  		; BUGBUG - there's a lot in common here and with
  9604                                  		; mov_media_ids.. see if we can save some space by
  9605                                  		; merging them... jgl
  9606                                  
  9607                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9608                                  		; 10/12/2022
  9609 00000675 B10B                    		mov	cl, 11 ; cx = 11		
  9610                                  
  9611                                  		;mov	si, offset vol_no_name ; "NO NAME    "
  9612 00000677 BE[1505]                		mov	si, vol_no_name	; 19/10/2022
  9613 0000067A 83C74B                  		add	di, 75		; BDS.volid
  9614 0000067D F3A4                    		rep movsb
  9615                                  		;;test	byte [es:di+BDS.fatsiz], fbig
  9616                                  		;test	byte [es:di+1Fh], 40h
  9617                                  		; 11/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  9618 0000067F 26F6061F0040            		test	byte [es:BDS.fatsiz], fbig
  9619                                  			; ! NOTE - 11/08/2023 - Erdogan Tan
  9620                                  			; Microsoft/IBM code has a bug here because the BDS's
  9621                                  			; .volid and .filesys_id fields will be reset
  9622                                  			; (to their default text) according to 'BDS.fatsiz' flags
  9623                                  			; at the BDS offset 31 but current (this) code checks flags
  9624                                  			; at ES:DI+31 while DI points the BDS offset 86!?
  9625                                  			;
  9626                                  			; Correct Code:
  9627                                  			; test byte [ES:31],40h or [ES:BDS.fatsiz],fbig
  9628                                  			;
  9629                                  			; Same BUG is existing in PCDOS 7.1 IBMBIO.COM - BIOSCODE:06C3h
  9630                                  			; and in Windows ME IO.SYS - BIOSCODE:0E1Ah as 'test byte [es:di+59],20h'
  9631                                  			; (PCDOS 7.1 BUG note: 26/06/2023)
  9632                                  			;
  9633                                  			; (Why this bug did not affect MSDOS and PCDOS 7.x applications:
  9634                                  			; 'clear_ids' is used for floppy disks only and the default
  9635                                  			; option of 'clear_ids' is FAT12 volid and filesys_id text
  9636                                  			; when the flag bit has wrong value for FAT16/40h or FAT32/20h.)
  9637                                  
  9638                                  		;mov	si, offset fat_16_id ; "FAT16	"
  9639 00000685 BE[0C05]                		mov	si, fat_16_id	; 19/10/2022
  9640 00000688 7503                    		jnz	short ci_bigfat
  9641                                  		;mov	si, offset fat_12_id ; "FAT12	"
  9642 0000068A BE[0305]                		mov	si, fat_12_id	 ; 19/10/2022
  9643                                  ci_bigfat:				
  9644                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9645                                  		; 10/12/2022
  9646 0000068D B108                    		mov	cl, 8 ; cx = 8 
  9647 0000068F 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9648                                  					; 11/08/2023
  9649                                  					; di points to filesys_id field (BDS offset 91)
  9650 00000692 F3A4                    		rep movsb
  9651 00000694 5F                      		pop	di		; restore bds pointer
  9652 00000695 C3                      		retn
  9653                                  
  9654                                  ; =============== S U B	R O U T	I N E =======================================
  9655                                  
  9656                                  ; 15/10/2022
  9657                                  
  9658                                  ; ---------------------------------------------------------------------------
  9659                                  ;	getbp - return bpb from the drive specified by the bds.
  9660                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
  9661                                  ;	    note that we never come here for fixed disks.
  9662                                  ;	    for all other cases,
  9663                                  ;	      - it reads boot sector to pull out the bpb
  9664                                  ;	      - if no valid bpb is found, it then reads the fat sector,
  9665                                  ;		to get the fat id byte to build the bpb from there.
  9666                                  ;
  9667                                  ;   inputs:	es:di point to correct bds.
  9668                                  ;
  9669                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
  9670                                  ;		carry set, and al=7 if invalid disk.
  9671                                  ;		carry set and error code in al if other error.
  9672                                  ;		if failed to recognize the boot record, then will set the
  9673                                  ;		set_id_flag to 0.
  9674                                  ;		this routine will only work for a floppy diskette.
  9675                                  ;		     for a fixed disk, it will just return.
  9676                                  ;
  9677                                  ;	****** Note: getbp is a clone of getbp which uses the newer
  9678                                  ;	  segment definitions. It should be migrated towards.
  9679                                  ;	   now es:di has the bds, ds: has Bios_Data
  9680                                  ; ---------------------------------------------------------------------------
  9681                                  
  9682                                  GetBp:		; if returning fake bpb then return bpb as is.
  9683                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable		
  9684 00000696 26F6452305              		test	byte [es:di+23h], 5
  9685 0000069B 7403                    		jz	short getbp1	; getbp1
  9686 0000069D E99500                  		jmp	getret_exit
  9687                                  ; ---------------------------------------------------------------------------
  9688                                  
  9689                                  getbp1:					
  9690 000006A0 51                      		push	cx
  9691 000006A1 52                      		push	dx
  9692 000006A2 53                      		push	bx
  9693                                  
  9694                                  		; attempt to read in boot sector and determine bpb.
  9695                                  		; we assume that the 2.x and greater dos disks all
  9696                                  		; have a valid boot sector.
  9697                                  
  9698 000006A3 E8A400                  		call	readbootsec
  9699 000006A6 7209                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
  9700 000006A8 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
  9701 000006AA 7508                    		jnz	short dofatbpb
  9702 000006AC E8F000                  		call	movbpb		; move bpb into	registers
  9703 000006AF EB57                    		jmp	short Has1
  9704                                  ; ---------------------------------------------------------------------------
  9705                                  
  9706                                  getbp_err_ret_brdg:			
  9707 000006B1 E98200                  		jmp	getbp_err_ret
  9708                                  ; ---------------------------------------------------------------------------
  9709                                  
  9710                                  		; we have a 1.x diskette. In this case read in the fat ID byte
  9711                                  		; and fill in bpb from there.
  9712                                  dofatbpb:				
  9713 000006B4 E85401                  		call	readfat		; puts media descriptor	byte in	ah
  9714 000006B7 72F8                    		jb	short getbp_err_ret_brdg
  9715                                  		;cmp	ds:fhave96, 0	;  changeline support available?
  9716 000006B9 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
  9717 000006BE 7403                    		jz	short bpb_nochangeline ; brif not
  9718 000006C0 E89A12                  		call	hidensity	; may not return! May add sp, 2	and
  9719                                  					; jump to has1!!!!!! or	has720K
  9720                                  bpb_nochangeline:		; test for a valid 3.5" medium			
  9721 000006C3 26807D2202              		cmp	byte [es:di+22h], 2	; [es:di+BDS.formfactor]
  9722                                  					; ffSmall
  9723 000006C8 7515                    		jnz	short is_floppy
  9724 000006CA 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
  9725 000006CD 7571                    		jnz	short got_unknown_medium
  9726                                  Has720K:				
  9727                                  		;mov	bx, offset sm92 ; pointer to correct bpb
  9728 000006CF BB[DE04]                		mov	bx, sm92	; 19/10/2022
  9729                                  
  9730                                  		; es points to segment of bds. the following should be modified
  9731                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
  9732                                  		; driver.sys is loaded since the bds is inside the driver.sys.
  9733                                  
  9734                                  		; 10/12/2022
  9735                                  		;mov	al, [bx+0]	; [bx+bpbtype.spf]
  9736                                  		; 21/12/2022
  9737 000006D2 8A07                    		mov	al, [bx]
  9738 000006D4 8B4F03                  		mov	cx, [bx+3]	; [bx+bpbtype.csec]
  9739 000006D7 8B5705                  		mov	dx, [bx+5]	; [bx+bpbtype.spau]
  9740 000006DA 8B5F01                  		mov	bx, [bx+1]	; [bx+bpbtype.spt]
  9741                                  		; 19/10/2022 - Temporary !
  9742                                  		;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
  9743                                  		;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
  9744                                  		;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
  9745                                  		;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]	
  9746                                  
  9747 000006DD EB29                    		jmp	short Has1
  9748                                  ; ---------------------------------------------------------------------------
  9749                                  
  9750                                  is_floppy:			; must be a 5.25" floppy if we come here
  9751 000006DF 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
  9752 000006E2 725C                    		jb	short got_unknown_medium
  9753 000006E4 B001                    		mov	al, 1		; set number of	fat sectors
  9754 000006E6 BB0840                  		mov	bx, 16392	; 64*256+8
  9755                                  					; set dir entries and sector max
  9756 000006E9 B94001                  		mov	cx, 320		; 40*8
  9757                                  					; set size of drive
  9758 000006EC BA0101                  		mov	dx, 257		; 01*256+1
  9759                                  					; set head limit and sec/all unit
  9760 000006EF F6C402                  		test	ah, 2		; test for 8 or	9 sector
  9761 000006F2 7507                    		jnz	short has8	; nz = has 8 sectors
  9762 000006F4 FEC0                    		inc	al		; inc number of	fat sectors
  9763 000006F6 FEC3                    		inc	bl		; inc sector max
  9764                                  		;add	cx, 40		; increase size	(to 360)
  9765                                  		; 18/12/2022
  9766 000006F8 80C128                  		add	cl, 40
  9767                                  has8:					
  9768 000006FB F6C401                  		test	ah, 1		; test for 1 or	2 heads
  9769 000006FE 7408                    		jz	short Has1	; jz = 1 head
  9770 00000700 01C9                    		add	cx, cx		; double size of disk
  9771 00000702 B770                    		mov	bh, 112		; increase number of directory entries
  9772 00000704 FEC6                    		inc	dh		; inc sec/all unit
  9773 00000706 FEC2                    		inc	dl		; inc head limit
  9774                                  Has1:					
  9775 00000708 26887508                		mov	[es:di+8], dh	; [es:di+BDS.secperclus]
  9776 0000070C 26887D0C                		mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
  9777 00000710 26894D0E                		mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
  9778 00000714 26886510                		mov	[es:di+10h], ah	; [es:di+BDS.media]
  9779 00000718 26884511                		mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
  9780 0000071C 26885D13                		mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
  9781 00000720 26885515                		mov	[es:di+15h], dl	; [es:di+BDS.heads]
  9782                                  
  9783                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
  9784                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
  9785                                  		; to 0 since this code is for floppies
  9786                                  
  9787                                  		; 18/12/2022
  9788                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
  9789                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
  9790                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
  9791                                  		; 18/12/2022
  9792 00000724 29C9                    		sub	cx, cx
  9793 00000726 26894D19                		mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
  9794 0000072A 26894D17                		mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
  9795 0000072E 26894D1D                		mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
  9796                                  getret:					
  9797 00000732 5B                      		pop	bx
  9798 00000733 5A                      		pop	dx
  9799 00000734 59                      		pop	cx
  9800                                  getret_exit:				
  9801 00000735 C3                      		retn
  9802                                  ; ---------------------------------------------------------------------------
  9803                                  
  9804                                  getbp_err_ret:	; before doing anything else, set set_id_flag	to 0.			
  9805                                  		;mov	ds:set_id_flag,	0
  9806                                  		; 19/10/2022
  9807 00000736 C606[0205]00            		mov	byte [set_id_flag], 0
  9808 0000073B E83105                  		call	maperror
  9809 0000073E EBF2                    		jmp	short getret
  9810                                  ; ---------------------------------------------------------------------------
  9811                                  
  9812                                  		; we have a 3.5" diskette for	which we cannot	build a	bpb.
  9813                                  		; we do	not assume any type of bpb for this medium.
  9814                                  
  9815                                  got_unknown_medium:			
  9816                                  		;mov	ds:set_id_flag,	0 
  9817 00000740 C606[0205]00            		mov	byte [set_id_flag], 0
  9818 00000745 B007                    		mov	al, 7
  9819 00000747 F9                      		stc
  9820 00000748 EBE8                    		jmp	short getret
  9821                                  
  9822                                  ; =============== S U B	R O U T	I N E =======================================
  9823                                  
  9824                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
  9825                                  
  9826                                  ; ----------------------------------------------------------------
  9827                                  ; read in the boot sector. set carry if error in reading sector.
  9828                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
  9829                                  ;
  9830                                  ;	assumes es:di -> bds, ds-> Bios_Data
  9831                                  ; ----------------------------------------------------------------
  9832                                  
  9833                                  ; 10/03/2019 - Retro DOS v4.0
  9834                                  
  9835                                  readbootsec:	
  9836 0000074A B600                    		mov	dh, 0		; head 0
  9837 0000074C B90100                  		mov	cx, 1		; cylinder 0, sector 1
  9838 0000074F E8C600                  		call	read_sector
  9839 00000752 724A                    		jb	short err_ret
  9840 00000754 31DB                    		xor	bx, bx		; assume valid boot sector
  9841                                  
  9842                                  		; put a sanity check for the boot sector in here to detect
  9843                                  		; boot sectors that do not have valid bpbs. we examine the
  9844                                  		; first two bytes - they must contain a long jump (69h) or a
  9845                                  		; short jump (EBh) followed by a nop (90h), or a short jump
  9846                                  		; (E9h). if this test is passed, we further check by examining
  9847                                  		; the signature at the end of the boot sector for the word
  9848                                  		; AA55h. if the signature is not present, we examine the media
  9849                                  		; descriptor byte to see if it is valid. for dos 3.3, this
  9850                                  		; logic is modified a little bit. we are not going to check
  9851                                  		; signature. instead we are going to sanity check the media
  9852                                  		; byte in bpb regardless of the validity of signature. this is
  9853                                  		; to save the already developed commercial products that have
  9854                                  		; good jump instruction and signature but with the false bpb
  9855                                  		; informations
  9856                                  
  9857                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
  9858                                  
  9859                                  		; 19/10/2022
  9860 00000756 803E[4E01]69            		cmp	byte [disksector], 69h ; is it a direct jump?
  9861 0000075B 7415                    		jz	short check_bpb_mediabyte ; don't need to find a nop
  9862 0000075D 803E[4E01]E9            		cmp	byte [disksector], 0E9h ; dos 2.0 jump?
  9863 00000762 740E                    		jz	short check_bpb_mediabyte ; no need for	nop
  9864 00000764 803E[4E01]EB            		cmp	byte [disksector], 0EBh ; how about a short jump?
  9865 00000769 7531                    		jnz	short invalidbootsec
  9866 0000076B 803E[5001]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
  9867 00000770 752A                    		jnz	short invalidbootsec
  9868                                  
  9869                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9870                                  ;
  9871                                  ;; 10/03/2019
  9872                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
  9873                                  ;;
  9874                                  ;; Don't have to perform the following signature check since
  9875                                  ;; we need to check the media byte even with the good signatured diskette.
  9876                                  ;;
  9877                                  ;;check_signature:
  9878                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
  9879                                  ;;							 ; disk or 1.x media.
  9880                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
  9881                                  ;;					       ; may need some special handling
  9882                                  
  9883                                  ; check for non-ibm disks which do not have the signature AA55h at the
  9884                                  ; end of the boot sector, but still have a valid boot sector. this is done
  9885                                  ; by examining the media descriptor in the boot sector.
  9886                                  
  9887                                  		; 19/10/2022
  9888                                  check_bpb_mediabyte:			
  9889 00000772 A0[6301]                		mov	al, [disksector+15h]
  9890                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9891 00000775 24F0                    		and	al, 0F0h
  9892 00000777 3CF0                    		cmp	al, 0F0h	; allow	for strange media
  9893 00000779 7521                    		jnz	short invalidbootsec
  9894                                  
  9895                                  ; there were some (apparently a lot of them) diskettes that had been formatted
  9896                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
  9897                                  ; sectors. these are specifically diskettes that were formatted in drives
  9898                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
  9899                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
  9900                                  ; in dos. in order to support them, we have to introduce a "hack" that will
  9901                                  ; help our build bpb routine to recognise these specific cases, and to
  9902                                  ; set up out copy of the bpb accordingly.
  9903                                  ; we do this by checking to see if the boot sector is off a diskette that
  9904                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
  9905                                  ; sec/clus field to 1. if not, we carry on as normal.
  9906                                  
  9907                                  checksinglesided:
  9908 0000077B A0[6301]                		mov	al, [disksector+15h]
  9909 0000077E 3CF0                    		cmp	al, 0F0h
  9910 00000780 741B                    		jz	short gooddsk
  9911 00000782 A801                    		test	al, 1
  9912 00000784 7517                    		jnz	short gooddsk
  9913 00000786 813E[5601]332E          		cmp	word [disksector+8], 2E33h ; "3."
  9914 0000078C 7507                    		jnz	short mustbeearlier
  9915 0000078E 803E[5801]32            		cmp	byte [disksector+0Ah], 32h ; "2"
  9916 00000793 7308                    		jnb	short gooddsk
  9917                                  
  9918                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
  9919                                  
  9920                                  mustbeearlier:				
  9921 00000795 C606[5B01]01            		mov	byte [disksector+0Dh], 1
  9922                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9923 0000079A EB01                    		jmp	short gooddsk
  9924                                  ; ---------------------------------------------------------------------------
  9925                                  
  9926                                  invalidbootsec:				
  9927 0000079C 43                      		inc	bx		; indicate that boot sector invalid
  9928                                  		; 10/12/2022
  9929                                  movbpb_ret:
  9930                                  gooddsk:				
  9931 0000079D F8                      		clc
  9932                                  err_ret:
  9933 0000079E C3                      		retn
  9934                                  ; ---------------------------------------------------------------------------
  9935                                  
  9936                                  		; 10/12/2022
  9937                                  ;err_ret:				
  9938                                  		;retn
  9939                                  
  9940                                  ; =============== S U B	R O U T	I N E =======================================
  9941                                  
  9942                                  ; 15/10/2022
  9943                                  ; ---------------------------------------------------------------------------
  9944                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
  9945                                  ; getbp routine at has1
  9946                                  ;
  9947                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
  9948                                  ; serial number, volume label, file system id in bds according to
  9949                                  ; the boot record.  after that, this routine will set the set_id_flag to 2
  9950                                  ; to signal that volume label is set already from the extended boot record
  9951                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
  9952                                  ; the volume label in the root directory.)
  9953                                  ; ---------------------------------------------------------------------------
  9954                                  
  9955                                  ; 10/03/2019 - Retro DOS v4.0
  9956                                  
  9957                                  		; 19/10/2022
  9958                                  movbpb:	
  9959 0000079F 8A36[5B01]              		mov	dh, [disksector+0Dh]
  9960                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9961                                  					; sectors per unit
  9962 000007A3 8A3E[5F01]              		mov	bh, [disksector+11h]
  9963                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
  9964                                  					; number of directory entries
  9965 000007A7 8B0E[6101]              		mov	cx, [disksector+13h]
  9966                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
  9967                                  					; size of drive
  9968 000007AB 8A26[6301]              		mov	ah, [disksector+15h]
  9969                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9970                                  					; media	descriptor
  9971 000007AF A0[6401]                		mov	al, [disksector+16h];
  9972                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
  9973                                  					; number of fat	sectors
  9974 000007B2 8A1E[6601]              		mov	bl, [disksector+18h]
  9975                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
  9976                                  					; sectors per track
  9977 000007B6 8A16[6801]              		mov	dl, [disksector+1Ah]
  9978                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
  9979                                  					; number of heads
  9980 000007BA 803E[0205]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
  9981 000007BF 75DC                    		jnz	short movbpb_ret
  9982 000007C1 E81200                  		call	mov_media_ids
  9983 000007C4 7205                    		jb	short movbpb_conv ; conventional boot record?
  9984 000007C6 C606[0205]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
  9985                                  movbpb_conv:				
  9986 000007CB 803E[7700]01            		cmp	byte [fhave96], 1
  9987 000007D0 75CB                    		jnz	short movbpb_ret
  9988 000007D2 E8E111                  		call	resetchanged	; reset	flags in bds to	not fchanged.
  9989                                  		; 10/12/2022
  9990                                  		; cf = 0
  9991                                  ;movbpb_ret:				
  9992                                  		;clc
  9993 000007D5 C3                      		retn
  9994                                  
  9995                                  ; =============== S U B	R O U T	I N E =======================================
  9996                                  
  9997                                  ;copy the boot_serial number, volume id, and filesystem id from the
  9998                                  ;***extended boot record*** in ds:disksector to the bds table pointed
  9999                                  ;by es:di.
 10000                                  
 10001                                  ;in.) es:di -> bds
 10002                                  ;     ds:disksector = valid extended boot record.
 10003                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
 10004                                  ;      the boot record information.
 10005                                  ;     carry flag set if not an extended bpb.
 10006                                  ;     all registers saved except the flag.
 10007                                  
 10008                                  		; 19/10/2022
 10009                                  mov_media_ids:		
 10010 000007D6 803E[7401]29            		cmp	byte [disksector+26h], 29h
 10011                                  					; [disksector+EXT_BOOT.SIG],
 10012                                  					; EXT_BOOT_SIGNATURE
 10013 000007DB 752C                    		jnz	short mmi_not_ext
 10014 000007DD 51                      		push	cx
 10015 000007DE 8B0E[7501]              		mov	cx, [disksector+27h]
 10016                                  					; [disksector+EXT_BOOT.SERIAL]
 10017 000007E2 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
 10018 000007E6 8B0E[7701]              		mov	cx, [disksector+29h]
 10019                                  					; [disksector+EXT_BOOT.SERIAL+2]
 10020 000007EA 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
 10021 000007EE 57                      		push	di
 10022 000007EF 56                      		push	si
 10023 000007F0 B90B00                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
 10024 000007F3 BE[7901]                		mov	si, disksector+2Bh
 10025                                  		;mov	si, (offset disksector+2Bh) ;
 10026                                  					; disksector+EXT_BOOT.VOL_LABEL
 10027 000007F6 83C74B                  		add	di, 75		; BDS.volid
 10028 000007F9 F3A4                    		rep movsb
 10029                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
 10030                                  		; 10/12/2022
 10031 000007FB B108                    		mov	cl, 8 ; cx = 8
 10032 000007FD BE[8401]                		mov	si, disksector+36h
 10033                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
 10034 00000800 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
 10035 00000803 F3A4                    		rep movsb
 10036 00000805 5E                      		pop	si
 10037 00000806 5F                      		pop	di
 10038 00000807 59                      		pop	cx
 10039                                  		; 10/12/2022
 10040                                  		; cf = 0
 10041                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
 10042                                  				; (20/09/2022)
 10043 00000808 C3                      		retn
 10044                                  ; ---------------------------------------------------------------------------
 10045                                  
 10046                                  mmi_not_ext:				
 10047 00000809 F9                      		stc
 10048 0000080A C3                      		retn
 10049                                  
 10050                                  ; =============== S U B	R O U T	I N E =======================================
 10051                                  
 10052                                  ; 15/10/2022
 10053                                  ; --------------------------------------------------------------
 10054                                  ; read in the fat sector and get the media byte from it.
 10055                                  ; input : es:di -> bds
 10056                                  ; output:
 10057                                  ;	  carry set if an error occurs, ax contains error code.
 10058                                  ;	  otherwise, ah contains media byte on exit
 10059                                  ; --------------------------------------------------------------
 10060                                  
 10061                                  readfat:	
 10062                                  		;mov	dh, 0
 10063                                  		; 10/12/2022
 10064 0000080B 30F6                    		xor	dh, dh
 10065 0000080D B90200                  		mov	cx, 2		; head 0
 10066                                  					; cylinder 0, sector 2
 10067 00000810 E80500                  		call	read_sector
 10068 00000813 7202                    		jb	short bad_fat_ret
 10069 00000815 8A27                    		mov	ah, [bx]	; media	byte
 10070                                  bad_fat_ret:				
 10071 00000817 C3                      		retn
 10072                                  
 10073                                  ; =============== S U B	R O U T	I N E =======================================
 10074                                  
 10075                                  ; 15/10/2022
 10076                                  
 10077                                  ; ---------------------------------------------------------------------------
 10078                                  ; read a single sector into the temp buffer.
 10079                                  ; perform three retries in case of error.
 10080                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
 10081                                  ;		cx has sector and cylinder
 10082                                  ;		dh has head
 10083                                  ;		es:di has bds
 10084                                  ;		ds has Bios_Data
 10085                                  ;
 10086                                  ;   outputs:	carry clear
 10087                                  ;		    Bios_Data:bx point to sector
 10088                                  ;		       (note: some callers assume location of buffer)
 10089                                  ;
 10090                                  ;		carry set
 10091                                  ;		    ax has rom error code
 10092                                  ;
 10093                                  ; register bp is preserved.
 10094                                  ; ---------------------------------------------------------------------------
 10095                                  
 10096                                  ; 10/03/2019 - Retro DOS v4.0
 10097                                  
 10098                                  		; 19/10/2022
 10099                                  read_sector:	
 10100 00000818 55                      		push	bp
 10101 00000819 BD0300                  		mov	bp, 3		; make 3 attempts
 10102 0000081C 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 10103 00000820 BB[4E01]                		mov	bx, disksector	; get es:bx to point to	buffer
 10104                                  rd_ret:					
 10105 00000823 06                      		push	es
 10106 00000824 1E                      		push	ds
 10107 00000825 07                      		pop	es
 10108 00000826 B80102                  		mov	ax, 201h
 10109 00000829 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 10110                                  					; AL = number of sectors to read, CH = track, CL = sector
 10111                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 10112                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 10113 0000082B 07                      		pop	es
 10114 0000082C 734A                    		jnb	short okret2
 10115                                  rd_rty:					
 10116 0000082E E87604                  		call	again		; reset	disk, decrement	bp, preserve ax
 10117 00000831 7442                    		jz	short err_rd_ret
 10118 00000833 26F6452301              		test	byte [es:di+23h], 1
 10119                                  		;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
 10120                                  					; fnon_removable
 10121 00000838 75E9                    		jnz	short rd_ret
 10122 0000083A 803E[3006]00            		cmp	byte [media_set_for_format], 0
 10123 0000083F 7510                    		jnz	short rd_skip1_dpt
 10124 00000841 50                      		push	ax
 10125 00000842 1E                      		push	ds		; for retry, set the head settle time to 0Fh
 10126 00000843 C536[2D01]              		lds	si, [dpt]
 10127                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10128                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
 10129                                  		;			; NORMSETTLE
 10130                                  		; 12/12/2022
 10131 00000847 B00F                    		mov	al, 15
 10132 00000849 864409                  		xchg	al, [si+9]
 10133                                  		; 
 10134 0000084C 1F                      		pop	ds
 10135 0000084D A2[2A01]                		mov	[save_head_sttl], al
 10136 00000850 58                      		pop	ax
 10137                                  rd_skip1_dpt:				
 10138 00000851 06                      		push	es
 10139 00000852 1E                      		push	ds
 10140 00000853 07                      		pop	es
 10141 00000854 B80102                  		mov	ax, 201h
 10142 00000857 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 10143                                  					; AL = number of sectors to read, CH = track, CL = sector
 10144                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 10145                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 10146 00000859 07                      		pop	es
 10147 0000085A 9C                      		pushf
 10148 0000085B 803E[3006]00            		cmp	byte [media_set_for_format], 0
 10149 00000860 750E                    		jnz	short rd_skip2_dpt
 10150 00000862 50                      		push	ax
 10151 00000863 A0[2A01]                		mov	al, [save_head_sttl]
 10152 00000866 1E                      		push	ds
 10153 00000867 C536[2D01]              		lds	si, [dpt]
 10154 0000086B 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10155 0000086E 1F                      		pop	ds
 10156 0000086F 58                      		pop	ax
 10157                                  rd_skip2_dpt:				
 10158 00000870 9D                      		popf
 10159 00000871 7305                    		jnb	short okret2
 10160 00000873 EBB9                    		jmp	short rd_rty
 10161                                  ; ---------------------------------------------------------------------------
 10162                                  
 10163                                  err_rd_ret:				
 10164 00000875 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
 10165                                  					; return error
 10166 00000877 F9                      		stc
 10167                                  
 10168                                  ; update information pertaining to last drive accessed, time of access, last
 10169                                  ; track accessed in that drive.
 10170                                  
 10171                                  okret2:					
 10172 00000878 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
 10173 0000087C 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
 10174 00000880 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 10175                                  					; save last track accessed on this drive
 10176                                  					; preserve flags in case error occurred
 10177 00000884 9C                      		pushf
 10178 00000885 E8FF03                  		call	set_tim
 10179 00000888 9D                      		popf			; restore flags
 10180 00000889 5D                      		pop	bp
 10181 0000088A C3                      		retn
 10182                                  
 10183                                  ;----------------------------------------------------------------------------
 10184                                  ;	disk open/close routines
 10185                                  ;----------------------------------------------------------------------------
 10186                                  
 10187                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
 10188 0000088B 803E[7700]00            		cmp	byte [fhave96], 0
 10189 00000890 7407                    		jz	short dsk_open_exit ; done if no changeline support
 10190 00000892 E8DBFC                  		call	SetDrive	; get bds for drive
 10191 00000895 26FF4520                		inc	word [es:di+20h] ; [es:di+BDS.opcnt]
 10192                                  dsk_open_exit:	
 10193                                  		; 10/12/2022
 10194                                  		; cf = 0			
 10195                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 10196                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 10197 00000899 C3                      		retn
 10198                                  ; ---------------------------------------------------------------------------
 10199                                  
 10200                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
 10201 0000089A 803E[7700]00            		cmp	byte [fhave96], 0
 10202 0000089F 740E                    		jz	short exitjx	; done if no changeline	support
 10203 000008A1 E8CCFC                  		call	SetDrive	; get bds for drive
 10204 000008A4 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 10205 000008A9 7404                    		jz	short exitjx	; watch	out for	wrap
 10206 000008AB 26FF4D20                		dec	word [es:di+20h]
 10207                                  exitjx:					
 10208                                  		; 10/12/2022
 10209                                  		; cf = 0
 10210                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 10211                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 10212 000008AF C3                      		retn
 10213                                  
 10214                                  ;----------------------------------------------------------------------------
 10215                                  ;		disk removable routine
 10216                                  ;----------------------------------------------------------------------------
 10217                                  
 10218                                  		; al is	unit #
 10219                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
 10220 000008B0 E8BDFC                  		call	SetDrive	; get bds for this drive
 10221                                  		;test	byte [es:di+BDS.flags], fnon_removable
 10222 000008B3 26F6452301              		test	byte [es:di+23h], 1
 10223                                  		;jnz	short x_bus_exit ; non_rem
 10224 000008B8 7501                    		jnz	short non_rem	; 15/10/2022
 10225                                  		; 10/12/2022
 10226                                  		; cf = 0
 10227                                  		;clc			; CF is already ZERO here
 10228                                  					; 15/10/2022
 10229 000008BA C3                      		retn
 10230                                  ; ---------------------------------------------------------------------------
 10231                                  
 10232                                  non_rem:
 10233                                  x_bus_exit:				
 10234 000008BB B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
 10235                                  					; return busy status
 10236 000008BD F9                      		stc
 10237                                  dsk_ret:				
 10238 000008BE C3                      		retn
 10239                                  
 10240                                  ;----------------------------------------------------------------------------
 10241                                  ;		disk i/o routines
 10242                                  ;----------------------------------------------------------------------------
 10243                                  
 10244                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
 10245                                  		;mov	word [wrtverify], 103h
 10246                                  		; 19/10/2022
 10247 000008BF C706[2001]0301          		mov	word [rflag], 103h
 10248                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
 10249 000008C5 EB06                    		jmp	short dsk_cl
 10250                                  ; ---------------------------------------------------------------------------
 10251                                  
 10252                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
 10253                                  		;mov	word [wrtverify], 3
 10254                                  		; 19/10/2022
 10255 000008C7 C706[2001]0300          		mov	word [rflag], 3
 10256                                  		;mov	word ptr ds:rflag, 3 ; romwrite
 10257                                  
 10258                                  dsk_cl:					
 10259 000008CD E89800                  		call	diskio		; romwrite
 10260                                  ; ---------------------------------------------------------------------------
 10261                                  
 10262                                  dsk_io:					
 10263 000008D0 73EC                    		jnb	short dsk_ret
 10264 000008D2 E906F8                  		jmp	bc_err_cnt
 10265                                  ; ---------------------------------------------------------------------------
 10266                                  
 10267                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
 10268 000008D5 E88B00                  		call	diskrd
 10269 000008D8 EBF6                    		jmp	short dsk_io
 10270                                  
 10271                                  ; =============== S U B	R O U T	I N E =======================================
 10272                                  
 10273                                  ; 15/10/2022
 10274                                  ; 10/03/2019 - Retro DOS v4.0
 10275                                  
 10276                                  ;-----------------------------------------------------------
 10277                                  ; miscellaneous odd jump routines. 
 10278                                  ; moved out of mainline for speed.
 10279                                  
 10280                                  ; if we have a system where we have virtual drives, we need 
 10281                                  ; to prompt the user to place the correct disk in the drive.
 10282                                  ;
 10283                                  ;	assume es:di -> bds, ds:->Bios_Data
 10284                                  ;-----------------------------------------------------------
 10285                                  
 10286                                  		; 19/10/2022
 10287                                  checksingle:		
 10288 000008DA 50                      		push	ax
 10289 000008DB 53                      		push	bx
 10290 000008DC 268B5D23                		mov	bx, [es:di+23h]	; [es:di+BDS.flags]
 10291                                  
 10292                                  ; if hard drive, cannot change disk.
 10293                                  ; if current owner of physical drive, no need to change diskette.
 10294                                  
 10295 000008E0 F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
 10296 000008E3 7573                    		jnz	short singleret
 10297 000008E5 F6C310                  		test	bl, 10h		; fi_am_mult
 10298                                  					; is there a drive sharing this	physical drive?
 10299 000008E8 746E                    		jz	short singleret
 10300                                  
 10301                                  
 10302                                  ; look for the previous owner of this physical drive
 10303                                  ; and reset its ownership flag.
 10304                                  
 10305 000008EA 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10306                                  					; get physical drive number
 10307 000008EE 06                      		push	es		; preserve pointer to current bds
 10308 000008EF 57                      		push	di
 10309 000008F0 C43E[1901]              		les	di, [start_bds] ; get first bds
 10310                                  scan_list:				
 10311 000008F4 26384504                		cmp	[es:di+4], al
 10312 000008F8 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
 10313 000008FA B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
 10314 000008FC 26845D23                		test	[es:di+23h], bl
 10315 00000900 744B                    		jz	short scan_skip	; he doesn't own it either. continue
 10316 00000902 26305D23                		xor	[es:di+23h], bl	; reset	ownership flag
 10317 00000906 5F                      		pop	di		; restore pointer to current bds
 10318 00000907 07                      		pop	es
 10319 00000908 26085D23                		or	[es:di+23h], bl	; ; set	ownership flag
 10320                                  
 10321                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
 10322                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
 10323                                  ; in this case.
 10324 0000090C 803E[7A00]01            		cmp	byte [fsetowner], 1
 10325 00000911 7517                    		jnz	short not_fsetowner
 10326                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
 10327 00000913 26807D0400              		cmp	byte [es:di+4], 0
 10328 00000918 753E                    		jnz	short singleret
 10329 0000091A 268A4505                		mov	al, [es:di+5]
 10330                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
 10331                                  					; get the DOS drive letter
 10332 0000091E 06                      		push	es
 10333 0000091F 8E06[1A00]              		mov	es, [zeroseg]
 10334 00000923 26A20405                		mov	[es:LSTDRV], al
 10335                                  		;mov	es:504h, al	; [es:LSTDRV]
 10336                                  					; set up sdsb
 10337 00000927 07                      		pop	es		; restore bds pointer
 10338 00000928 EB2E                    		jmp	short singleret
 10339                                  ; ---------------------------------------------------------------------------
 10340                                  
 10341                                  ; to support "backward" compatibility with ibm's "single drive status byte"
 10342                                  ; we now check to see if we are in a single drive system and the application
 10343                                  ; has "cleverly" diddled the sdsb
 10344                                  
 10345                                  not_fsetowner:				
 10346 0000092A 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
 10347 0000092F 7517                    		jnz	short ignore_sdsb
 10348 00000931 50                      		push	ax
 10349 00000932 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
 10350 00000936 88C4                    		mov	ah, al
 10351 00000938 06                      		push	es
 10352 00000939 8E06[1A00]              		mov	es, [zeroseg]
 10353 0000093D 2686060405              		xchg	al, [es:LSTDRV]
 10354                                  		;xchg	al, es:504h	; [es:LSTDRV]
 10355                                  					; then swap(curr_drv,req_drv)
 10356 00000942 07                      		pop	es
 10357 00000943 38C4                    		cmp	ah, al		; else
 10358 00000945 58                      		pop	ax		; swap(curr_drv,req_drv)
 10359 00000946 7410                    		jz	short singleret	; issue	swap_dsk_msg
 10360                                  ignore_sdsb:				
 10361 00000948 E88D0E                  		call	swpdsk
 10362 0000094B EB0B                    		jmp	short singleret
 10363                                  ; ---------------------------------------------------------------------------
 10364                                  
 10365                                  scan_skip:	
 10366 0000094D 26C43D                  		les	di, [es:di]			
 10367                                  		;les	di, es:[di]	; [es:di+BDS.link]
 10368                                  					; go to	next bds
 10369 00000950 83FFFF                  		cmp	di, 0FFFFh	; end of list?
 10370 00000953 759F                    		jnz	short scan_list	; ontinue until	hit end	of list
 10371 00000955 F9                      		stc
 10372 00000956 5F                      		pop	di		; restore current bds
 10373 00000957 07                      		pop	es
 10374                                  
 10375                                  singleret:				
 10376 00000958 5B                      		pop	bx
 10377 00000959 58                      		pop	ax
 10378 0000095A C3                      		retn
 10379                                  
 10380                                  ; ---------------------------------------------------------------------------
 10381                                  
 10382                                  baddrive:				
 10383 0000095B B008                    		mov	al, 8		; sector not found
 10384 0000095D EB02                    		jmp	short baddrive_ret
 10385                                  ; ---------------------------------------------------------------------------
 10386                                  
 10387                                  unformatteddrive:				
 10388 0000095F B007                    		mov	al, 7		; unknown media
 10389                                  baddrive_ret:				
 10390 00000961 F9                      		stc
 10391                                  ; ---------------------------------------------------------------------------
 10392                                  
 10393                                  ioret:		
 10394 00000962 C3                      		retn
 10395                                  
 10396                                  ; ---------------------------------------------------------------------------
 10397                                  
 10398                                  ; 15/10/52022
 10399                                  
 10400                                  ; ---------------------------------------------------------------------------
 10401                                  ;	disk i/o handler
 10402                                  ;
 10403                                  ;	al = drive number (0-6)
 10404                                  ;	ah = media descriptor
 10405                                  ;	cx = sector count
 10406                                  ;	dx = first sector (low)
 10407                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
 10408                                  ;	ds = cs
 10409                                  ;	es:di = transfer address
 10410                                  ;	[rflag]=operation (2=read, 3=write)
 10411                                  ;	[verify]=1 for verify after write
 10412                                  ;
 10413                                  ;	if successful carry flag = 0
 10414                                  ;	  else cf=1 and al contains error code
 10415                                  ; ---------------------------------------------------------------------------
 10416                                  
 10417                                  diskrd:	
 10418                                  		;mov	ds:rflag, 2	; romread
 10419                                  		; 19/10/2022
 10420 00000963 C606[2001]02            		mov	byte [rflag], 2 ; romread
 10421                                  
 10422                                  ; =============== S U B	R O U T	I N E =======================================
 10423                                  
 10424                                  		; 19/10/2022
 10425                                  diskio:
 10426 00000968 89FB                    		mov	bx, di		; es:bx	= transfer address
 10427 0000096A 8C06[2F05]              		mov	[xfer_seg], es	; save transfer	segment
 10428 0000096E E8FFFB                  		call	SetDrive
 10429 00000971 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
 10430 00000975 A2[1F01]                		mov	[medbyt], al
 10431                                  		;jcxz	short ioret
 10432 00000978 E3E8                    		jcxz	ioret
 10433                                  
 10434                                  ; see if the media is formatted or not by checking the flags field in
 10435                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 10436                                  ; go to the error exit at label unformatteddrive.
 10437                                  
 10438 0000097A 26F6452402              		test	byte [es:di+24h], 2
 10439                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
 10440                                  					; unformatted_media
 10441 0000097F 75DE                    		jnz	short unformatteddrive
 10442 00000981 890E[2201]              		mov	[seccnt], cx	; save sector count
 10443 00000985 8926[3501]              		mov	[spsav], sp	; save sp
 10444                                  
 10445                                  ; ensure that we are trying to access valid sectors on the drive
 10446                                  
 10447 00000989 89D0                    		mov	ax, dx
 10448 0000098B 31F6                    		xor	si, si
 10449 0000098D 01CA                    		add	dx, cx
 10450 0000098F 83D600                  		adc	si, 0
 10451 00000992 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 10452                                  					; > 32 bit sector ?
 10453 00000997 740D                    		jz	short sanity32
 10454 00000999 83FE00                  		cmp	si, 0
 10455 0000099C 75BD                    		jnz	short baddrive
 10456 0000099E 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 10457 000009A2 77B7                    		ja	short baddrive
 10458 000009A4 EB12                    		jmp	short sanityok
 10459                                  ; ---------------------------------------------------------------------------
 10460                                  
 10461                                  sanity32:				
 10462 000009A6 0336[2305]              		add	si, [start_sec_h]
 10463 000009AA 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 10464 000009AE 7208                    		jb	short sanityok
 10465 000009B0 77A9                    		ja	short baddrive
 10466 000009B2 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 10467 000009B6 77A3                    		ja	short baddrive
 10468                                  
 10469                                  sanityok:				
 10470 000009B8 8B16[2305]              		mov	dx, [start_sec_h]
 10471 000009BC 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 10472 000009C0 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 10473                                  
 10474                                  ; now dx;ax have the physical first sector.
 10475                                  ; since the following procedures is going to destroy ax, let's
 10476                                  ; save it temporarily to saved_word.
 10477                                  
 10478 000009C4 A3[2505]                		mov	[saved_word], ax ; save the sector number (low)
 10479                                  
 10480                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 10481                                  ; will do it because we will skip the set up stuff with hard disks.
 10482                                  
 10483 000009C7 06                      		push	es
 10484 000009C8 8E06[1A00]              		mov	es, [zeroseg]
 10485 000009CC 26C4367800              		les	si, [es:DSKADR]
 10486                                  		;les	si, es:78h	; [es:DSKADR]
 10487                                  					; current disk parm table
 10488 000009D1 8936[2D01]              		mov	[dpt], si
 10489 000009D5 8C06[2F01]              		mov	[dpt+2], es
 10490 000009D9 07                      		pop	es
 10491 000009DA 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10492                                  					; fnon_removable
 10493 000009DF 7510                    		jnz	short skip_setup
 10494 000009E1 E8F6FE                  		call	checksingle
 10495                                  
 10496                                  ; check to see if we have previously noted a change line. the routine
 10497                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 10498                                  ; the proper error code.
 10499                                  
 10500 000009E4 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 10501 000009E9 7403                    		jz	short diskio_nochangeline ; brif not
 10502 000009EB E8B80E                  		call	checklatchio	; will do a sneaky pop stack return
 10503                                  					; if a disk error occurs
 10504                                  diskio_nochangeline:			
 10505 000009EE E84700                  		call	iosetup		; set up tables	and variables for i/o
 10506                                  
 10507                                  ; now the settle values are correct for the following code
 10508                                  
 10509                                  skip_setup:
 10510                                  
 10511                                  ; 32 bit sector calculation.
 10512                                  ; dx:[saved_word] = starting sector number.
 10513                                  				
 10514 000009F1 89D0                    		mov	ax, dx
 10515 000009F3 31D2                    		xor	dx, dx
 10516 000009F5 26F77513                		div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10517                                  					 ; divide by sec per track
 10518 000009F9 A3[2105]                		mov	[temp_h], ax
 10519 000009FC A1[2505]                		mov	ax, [saved_word]
 10520 000009FF 26F77513                		div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10521                                  					; now, [temp_h]:ax = track #, dx = sector
 10522                                  		;inc	dl		; sector number	is 1 based.
 10523                                  		; 18/12/2022
 10524 00000A03 42                      		inc	dx
 10525 00000A04 8816[3101]              		mov	[cursec], dl	; save current sector
 10526 00000A08 268B4D15                		mov	cx, [es:di+15h]	; es:di+BDS.heads]
 10527                                  					; get number of	heads
 10528 00000A0C 50                      		push	ax
 10529 00000A0D 31D2                    		xor	dx, dx
 10530 00000A0F A1[2105]                		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
 10531 00000A12 F7F1                    		div	cx
 10532 00000A14 A3[2105]                		mov	[temp_h], ax
 10533 00000A17 58                      		pop	ax
 10534 00000A18 F7F1                    		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 10535 00000A1A 833E[2105]00            		cmp	word [temp_h], 0
 10536 00000A1F 7714                    		ja	short baddrive_brdg
 10537 00000A21 3D0004                  		cmp	ax, 1024	; 2^10 currently maxium	for track #.
 10538 00000A24 770F                    		ja	short baddrive_brdg
 10539 00000A26 8816[3201]              		mov	[curhd], dl	; save current head
 10540 00000A2A A3[3301]                		mov	[curtrk], ax	; save current track
 10541                                  
 10542                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 10543                                  ; violations here. not true. we perform the operation as if everything is
 10544                                  ; symmetric; let the int 13 handler worry about the dma violations.
 10545                                  
 10546 00000A2D A1[2201]                		mov	ax, [seccnt]
 10547 00000A30 E88400                  		call	block		; (cas - call/ret)
 10548                                  		;call	done
 10549                                  		;retn
 10550                                  		; 18/12/2022
 10551 00000A33 EB4B                    		jmp	done
 10552                                  
 10553                                  ; ---------------------------------------------------------------------------
 10554                                  
 10555                                  baddrive_brdg:				
 10556 00000A35 E923FF                  		jmp	baddrive
 10557                                  
 10558                                  ; =============== S U B	R O U T	I N E =======================================
 10559                                  
 10560                                  ;--------------------------------------------------------------
 10561                                  ; set the drive-last-accessed flag for diskette only. 
 10562                                  ; we know that the hard disk will not be removed.
 10563                                  ; es:di -> current bds.
 10564                                  ; ds -> Bios_Data
 10565                                  ; ax,cx,si are destroyed.
 10566                                  ;--------------------------------------------------------------
 10567                                  
 10568                                  		; 19/10/2022
 10569                                  iosetup:	
 10570 00000A38 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10571 00000A3C A2[1E01]                		mov	[tim_drv], al	; save drive letter
 10572                                  
 10573                                  ; determine proper head settle values
 10574                                  
 10575 00000A3F 803E[3006]00            		cmp	byte [media_set_for_format], 0
 10576 00000A44 7539                    		jnz	short skip_dpt_setting
 10577 00000A46 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 10578 00000A49 1E                      		push	ds
 10579 00000A4A C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10580 00000A4E 884404                  		mov	[si+4],	al
 10581 00000A51 8A440A                  		mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10582 00000A54 8A6404                  		mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 10583 00000A57 1F                      		pop	ds
 10584 00000A58 A2[2601]                		mov	[motorstartup], al
 10585 00000A5B 8826[2B01]              		mov	[save_eot], ah
 10586                                  
 10587                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 10588                                  ; motor start time to 4. this checking for every i/o is going to affect
 10589                                  ; performance across the board, but is necessary!!
 10590                                  
 10591 00000A5F 1E                      		push	ds
 10592 00000A60 C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10593 00000A64 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 10594                                  					; ffSmall
 10595 00000A69 7505                    		jnz	short motor_start_ok
 10596 00000A6B B004                    		mov	al, 4
 10597 00000A6D 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10598                                  motor_start_ok:
 10599                                  
 10600                                  ; ds:si now points to disk parameter table.
 10601                                  ; get current settle and set fast settle
 10602                                  				
 10603                                  		;xor	al, al
 10604                                  		;inc	al		; ibm wants fast settle	to be 1
 10605                                  		; 18/12/2022
 10606 00000A70 31C0                    		xor	ax, ax
 10607 00000A72 40                      		inc	ax
 10608 00000A73 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10609                                  					; get settle and set up	for fast
 10610 00000A76 1F                      		pop	ds
 10611 00000A77 A2[2701]                		mov	[settlecurrent], al
 10612 00000A7A B00F                    		mov	al, 15		; NORMSETTLE
 10613                                  					; someone has diddled the settle
 10614 00000A7C A2[2801]                		mov	[settleslow], al
 10615                                  skip_dpt_setting:			
 10616 00000A7F C3                      		retn
 10617                                  
 10618                                  ; =============== S U B	R O U T	I N E =======================================
 10619                                  
 10620                                  ;--------------------------------------------------------------
 10621                                  ; set time of last access, and reset default values in the dpt.
 10622                                  ;
 10623                                  ;	  note: trashes (at least) si
 10624                                  ;--------------------------------------------------------------
 10625                                  
 10626                                  		; 19/10/2022
 10627                                  done:
 10628 00000A80 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10629                                  					; fnon_removable
 10630 00000A85 752F                    		jnz	short ddbx	; do not set for non-removable media
 10631 00000A87 E8FD01                  		call	set_tim
 10632                                  ;diddleback:
 10633                                  ; 09/12/2022
 10634                                  diddle_back:				
 10635 00000A8A 9C                      		pushf
 10636 00000A8B 803E[3006]00            		cmp	byte [media_set_for_format], 0
 10637 00000A90 7523                    		jnz	short nodiddleback
 10638 00000A92 50                      		push	ax
 10639 00000A93 06                      		push	es
 10640 00000A94 C436[2D01]              		les	si, [dpt]
 10641 00000A98 A0[2B01]                		mov	al, [save_eot]
 10642 00000A9B 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 10643 00000A9F A0[2701]                		mov	al, [settlecurrent]
 10644 00000AA2 8A26[2601]              		mov	ah, [motorstartup]
 10645 00000AA6 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10646 00000AAA 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 10647 00000AAF 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 10648 00000AB3 07                      		pop	es
 10649 00000AB4 58                      		pop	ax
 10650                                  nodiddleback:				
 10651 00000AB5 9D                      		popf
 10652                                  ddbx:					
 10653 00000AB6 C3                      		retn
 10654                                  
 10655                                  ; =============== S U B	R O U T	I N E =======================================
 10656                                  
 10657                                  ;--------------------------------------------------------------
 10658                                  ;read the number of sectors specified in ax, 
 10659                                  ;handling track boundaries
 10660                                  ;es:di -> bds for this drive
 10661                                  ;--------------------------------------------------------------
 10662                                  
 10663                                  		 ; 19/10/2022
 10664                                  block:	
 10665 00000AB7 09C0                    		or	ax, ax
 10666 00000AB9 74FB                    		jz	short ddbx
 10667 00000ABB 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10668                                  					; fnon_removable
 10669 00000AC0 740D                    		jz	short block_floppy ;
 10670                                  
 10671                                  ; check	to see if multi	track operation	is allowed. if not
 10672                                  ; we have to go	to the block_floppy below to break up the operation.
 10673                                  
 10674 00000AC2 F606[2705]80            		test	byte [multrk_flag], 80h
 10675                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 10676 00000AC7 7406                    		jz	short block_floppy
 10677 00000AC9 E82900                  		call	Disk
 10678 00000ACC 31C0                    		xor	ax, ax
 10679 00000ACE C3                      		retn
 10680                                  ; ---------------------------------------------------------------------------
 10681                                  
 10682                                  block_floppy:
 10683                                  
 10684                                  ; read at most 1 track worth. perform minimization at sector / track
 10685                                  				
 10686 00000ACF 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 10687 00000AD3 FEC1                    		inc	cl
 10688 00000AD5 2A0E[3101]              		sub	cl, [cursec]
 10689 00000AD9 30ED                    		xor	ch, ch
 10690 00000ADB 39C8                    		cmp	ax, cx
 10691 00000ADD 7302                    		jnb	short gotmin
 10692 00000ADF 89C1                    		mov	cx, ax
 10693                                  
 10694                                  gotmin:
 10695                                  
 10696                                  ; ax is the requested number of sectors to read
 10697                                  ; cx is the number that we can do on this track
 10698                                  					
 10699 00000AE1 50                      		push	ax
 10700 00000AE2 51                      		push	cx
 10701 00000AE3 89C8                    		mov	ax, cx
 10702 00000AE5 E80D00                  		call	Disk
 10703 00000AE8 59                      		pop	cx
 10704 00000AE9 58                      		pop	ax
 10705                                  
 10706                                  ; cx is the number of sectors just transferred
 10707                                  
 10708 00000AEA 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 10709 00000AEC D0E1                    		shl	cl, 1
 10710 00000AEE 00CF                    		add	bh, cl		; adjust transfer address
 10711 00000AF0 EBC5                    		jmp	short block
 10712                                  dskerr_brdg:				
 10713 00000AF2 E9EC00                  		jmp	dskerr
 10714                                  
 10715                                  ; =============== S U B	R O U T	I N E =======================================
 10716                                  
 10717                                  ; 15/10/2022
 10718                                  
 10719                                  ;--------------------------------------------------------------
 10720                                  ;perform disk i/o with retries
 10721                                  ; al = number of sectors (1-8, all on one track)
 10722                                  ; es:di point to drive parameters
 10723                                  ; xfer_seg:bx = transfer address 
 10724                                  ;		(must not cross a 64k physical boundary)
 10725                                  ; [rflag] = 2 if read, 3 if write
 10726                                  ; [verify] = 0 for normal, 1 for verify after write
 10727                                  ;--------------------------------------------------------------
 10728                                  
 10729                                  		 ; 19/10/2022
 10730                                  Disk:
 10731                                  
 10732                                  ; Check for hard disk format and
 10733                                  ; if TRUE then set max error count to 2
 10734                                  
 10735 00000AF5 BD0500                  		mov	bp, 5		; MAXERR
 10736                                  					; set up retry count
 10737 00000AF8 26F6452301              		test	byte [es:di+23h], 1	;
 10738                                  					; [es:di+BDS.flags], fnon_removable
 10739 00000AFD 7408                    		jz	short GetRdWrInd
 10740 00000AFF 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 10741 00000B02 7403                    		jz	short GetRdWrInd
 10742 00000B04 BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 10743                                  GetRdWrInd:				
 10744 00000B07 892E[2A05]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 10745 00000B0B 892E[2C05]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 10746 00000B0F 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 10747                                  ;retry:
 10748                                  ; 09/12/2022
 10749                                  _retry:					
 10750 00000B13 50                      		push	ax
 10751 00000B14 8B16[3301]              		mov	dx, [curtrk]
 10752 00000B18 26F6452301              		test	byte [es:di+23h], 1
 10753 00000B1D 740B                    		jz	short disk_not_mini
 10754 00000B1F 26837D4701              		cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 10755                                  					; is this a mini disk? ((logical dos partition))
 10756 00000B24 7504                    		jnz	short disk_not_mini ; no. continue to next.
 10757 00000B26 26035549                		add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 10758                                  					; add hidden trks.
 10759                                  disk_not_mini:				
 10760 00000B2A D0CE                    		ror	dh, 1
 10761 00000B2C D0CE                    		ror	dh, 1
 10762 00000B2E 0A36[3101]              		or	dh, [cursec]
 10763 00000B32 89D1                    		mov	cx, dx
 10764 00000B34 86E9                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 10765 00000B36 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 10766 00000B3A 268A5504                		mov	dl, [es:di+4]	; physical drive number
 10767                                  					; [es:di+BDS.drivenum]
 10768 00000B3E 26807D2205              		cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 10769 00000B43 7413                    		jz	short do_fast	; hard files use fast speed
 10770                                  
 10771                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 10772                                  ; this helps when we have just done a reset disk operation and the head has
 10773                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 10774                                  
 10775 00000B45 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 10776 00000B4A 740A                    		jz	short do_writej
 10777 00000B4C 80FC02                  		cmp	ah, 2		; romread
 10778 00000B4F 7407                    		jz	short do_fast
 10779 00000B51 80FC04                  		cmp	ah, 4		; romverify
 10780 00000B54 7402                    		jz	short do_fast
 10781                                  do_writej:	
 10782                                  
 10783                                  ; reads always fast, unless we have just done a disk reset operation
 10784                                  			
 10785 00000B56 EB56                    		jmp	short do_write	; reads	always fast
 10786                                  ; ---------------------------------------------------------------------------
 10787                                  
 10788                                  do_fast:				
 10789 00000B58 E8FC00                  		call	fastspeed	; change settle	mode
 10790                                  
 10791                                  testerr:				
 10792 00000B5B 7295                    		jb	short dskerr_brdg
 10793                                  
 10794                                  ; set drive and track of last access
 10795                                  
 10796 00000B5D 8816[7600]              		mov	[step_drv], dl
 10797 00000B61 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 10798                                  no_set:
 10799                                  		;cmp	word [wrtverify], 103h
 10800 00000B65 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 10801 00000B6B 7452                    		jz	short doverify
 10802                                  noverify:				
 10803 00000B6D 58                      		pop	ax
 10804                                  
 10805                                  ; check the flags word in the bds to see if the drive is non removable
 10806                                  ; if not we needn't do anything special
 10807                                  ; if it is a hard disk then check to see if multi-track operation
 10808                                  ; is specified. if specified we don't have to calculate for the next
 10809                                  ; track since we are already done. so we can go to the exit of this routine.
 10810                                  
 10811 00000B6E 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10812                                  					; fnon_removable
 10813 00000B73 7407                    		jz	short its_removable
 10814 00000B75 F606[2705]80            		test	byte [multrk_flag], 80h ; multrk_on
 10815 00000B7A 7530                    		jnz	short disk_ret
 10816                                  its_removable:				
 10817 00000B7C 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 10818 00000B7F 30E4                    		xor	ah, ah
 10819 00000B81 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 10820 00000B85 00C1                    		add	cl, al
 10821 00000B87 880E[3101]              		mov	[cursec], cl
 10822 00000B8B 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 10823                                  					; see if sector/track limit reached
 10824 00000B8F 761B                    		jbe	short disk_ret
 10825 00000B91 C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 10826 00000B96 8A36[3201]              		mov	dh, [curhd]
 10827 00000B9A FEC6                    		inc	dh
 10828 00000B9C 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 10829 00000BA0 7206                    		jb	short noxor
 10830 00000BA2 30F6                    		xor	dh, dh
 10831 00000BA4 FF06[3301]              		inc	word [curtrk]
 10832                                  noxor:					
 10833 00000BA8 8836[3201]              		mov	[curhd], dh
 10834                                  disk_ret:				
 10835 00000BAC F8                      		clc
 10836 00000BAD C3                      		retn
 10837                                  ; ---------------------------------------------------------------------------
 10838                                  
 10839                                  ; 15/10/2022
 10840                                  
 10841                                  ;--------------------------------------------------------------
 10842                                  ; the request is for write. determine if we are talking about
 10843                                  ; the same track and drive. if so, use the fast speed.
 10844                                  ;--------------------------------------------------------------
 10845                                  
 10846                                  do_write:				
 10847 00000BAE 3A16[7600]              		cmp	dl, [step_drv]
 10848 00000BB2 7506                    		jnz	short do_norm	; we have changed drives
 10849 00000BB4 263A6D46                		cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 10850 00000BB8 749E                    		jz	short do_fast	; we are still on the same track
 10851                                  
 10852                                  do_norm:				
 10853 00000BBA E87500                  		call	normspeed
 10854 00000BBD EB9C                    		jmp	short testerr
 10855                                  ; ---------------------------------------------------------------------------
 10856                                  
 10857                                  ;--------------------------------------------------------------
 10858                                  ; we have a verify request also. get state info and go verify
 10859                                  ;--------------------------------------------------------------
 10860                                  
 10861                                  doverify:				
 10862 00000BBF 58                      		pop	ax
 10863 00000BC0 50                      		push	ax
 10864 00000BC1 B404                    		mov	ah, 4
 10865 00000BC3 E89100                  		call	fastspeed
 10866 00000BC6 73A5                    		jnb	short noverify
 10867                                  
 10868                                  ; check the error returned in ah to see if it is a soft ecc error.
 10869                                  ; if it is not we needn't do anything special. if it is a soft
 10870                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 10871                                  ; this retry count becomes 0 then we just ignore the error and go to
 10872                                  ; no_verify but if we can still try then we call the routine to reset
 10873                                  ; the disk and go to dskerr1 to retry the operation.
 10874                                  
 10875 00000BC8 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 10876 00000BCB 750B                    		jnz	short not_softecc_err
 10877 00000BCD FF0E[2C05]              		dec	word [soft_ecc_cnt]
 10878 00000BD1 749A                    		jz	short noverify	; no more retry
 10879 00000BD3 E84405                  		call	ResetDisk	; reset	disk
 10880 00000BD6 EB3E                    		jmp	short dskerr1	; retry
 10881                                  ; ---------------------------------------------------------------------------
 10882                                  
 10883                                  not_softecc_err:			; other error.			
 10884 00000BD8 E83F05                  		call	ResetDisk
 10885 00000BDB FF0E[2A05]              		dec	word [vretry_cnt]
 10886 00000BDF EB1C                    		jmp	short dskerr0
 10887                                  ; ---------------------------------------------------------------------------
 10888                                  
 10889                                  ;--------------------------------------------------------------
 10890                                  ; need to special case the change-line error ah=06h.
 10891                                  ; if we get this, we need to return it.
 10892                                  ;--------------------------------------------------------------
 10893                                  
 10894                                  dskerr:					
 10895 00000BE1 803E[7700]00            		cmp	byte [fhave96], 0	; do we	have changeline	support?
 10896 00000BE6 7403                    		jz	short dskerr_nochangeline ; brif not
 10897 00000BE8 E82F0D                  		call	checkio
 10898                                  dskerr_nochangeline:			
 10899 00000BEB 803E[2E05]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 10900 00000BF0 7508                    		jnz	short dochkagain ; no more retry.
 10901 00000BF2 BD0100                  		mov	bp, 1
 10902 00000BF5 C606[2E05]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 10903                                  dochkagain:				
 10904 00000BFA E8AA00                  		call	again
 10905                                  dskerr0:				
 10906 00000BFD 7420                    		jz	short harderr
 10907 00000BFF 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10908                                  					; fnon_removable
 10909 00000C04 7505                    		jnz	short skip_timeout_chk
 10910 00000C06 80FC80                  		cmp	ah, 80h		; timeout?
 10911 00000C09 7414                    		jz	short harderr
 10912                                  skip_timeout_chk:			
 10913 00000C0B 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 10914 00000C0E 740A                    		jz	short write_fault_err ;	then, don't retry.
 10915 00000C10 C706[2C05]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 10916                                  					; set soft_ecc_cnt back	to maxerr
 10917                                  dskerr1:				
 10918 00000C16 58                      		pop	ax		; restore sector count
 10919                                  		;jmp	retry
 10920                                  		; 09/12/2022
 10921 00000C17 E9F9FE                  		jmp	_retry
 10922                                  ; ---------------------------------------------------------------------------
 10923                                  
 10924                                  write_fault_err:			
 10925 00000C1A BD0100                  		mov	bp, 1		; just retry only once
 10926                                  					; for write fault error.
 10927 00000C1D EBF7                    		jmp	short dskerr1
 10928                                  
 10929                                  		; fall into harderr
 10930                                  ; ---------------------------------------------------------------------------
 10931                                  
 10932                                  ; entry point for routines that call maperror themselves
 10933                                  
 10934                                  harderr:				
 10935 00000C1F E84D00                  		call	maperror
 10936                                  harderr2:				
 10937 00000C22 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 10938                                  					; force a media check through rom
 10939 00000C27 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 10940 00000C2B 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 10941                                  
 10942                                  ; since we are performing a non-local goto, restore the disk parameters
 10943                                  
 10944                                  		;jmp	diddleback
 10945                                  		; 09/12/2022
 10946 00000C2F E958FE                  		jmp	diddle_back
 10947                                  
 10948                                  ; =============== S U B	R O U T	I N E =======================================
 10949                                  
 10950                                  ; change settle value from settlecurrent to whatever is appropriate
 10951                                  ; note that this routine is never called for a fixed disk.
 10952                                  
 10953                                  		; 19/10/2022
 10954                                  normspeed:
 10955 00000C32 803E[3006]00            		cmp	byte [media_set_for_format], 0
 10956 00000C37 751E                    		jnz	short fastspeed
 10957 00000C39 06                      		push	es
 10958 00000C3A 50                      		push	ax
 10959 00000C3B A0[2801]                		mov	al, [settleslow]
 10960 00000C3E C436[2D01]              		les	si, [dpt]	; current disk parm table
 10961 00000C42 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10962 00000C46 58                      		pop	ax
 10963 00000C47 07                      		pop	es
 10964 00000C48 E80C00                  		call	fastspeed
 10965 00000C4B 06                      		push	es
 10966 00000C4C C436[2D01]              		les	si, [dpt]
 10967 00000C50 26C6440901              		mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10968                                  					; 1 is fast settle value
 10969 00000C55 07                      		pop	es
 10970 00000C56 C3                      		retn
 10971                                  
 10972                                  ; =============== S U B	R O U T	I N E =======================================
 10973                                  
 10974                                  ; if the drive has been marked as too big (i.e. starting sector of the
 10975                                  ; partition is > 16 bits, then always return drive not ready.
 10976                                  
 10977                                  fastspeed:		
 10978 00000C57 26F6451F80              		test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 10979                                  					; ftoobig
 10980 00000C5C 750D                    		jnz	short notready
 10981 00000C5E 06                      		push	es
 10982 00000C5F 8E06[2F05]              		mov	es, [xfer_seg]
 10983 00000C63 CD13                    		int	13h		; DISK -
 10984 00000C65 8C06[2F05]              		mov	[xfer_seg], es
 10985 00000C69 07                      		pop	es
 10986 00000C6A C3                      		retn
 10987                                  ; ---------------------------------------------------------------------------
 10988                                  
 10989                                  notready:				
 10990 00000C6B F9                      		stc
 10991 00000C6C B480                    		mov	ah, 80h
 10992 00000C6E C3                      		retn
 10993                                  
 10994                                  ; =============== S U B	R O U T	I N E =======================================
 10995                                  
 10996                                  ; map error returned by rom in ah into corresponding code to be returned to
 10997                                  ; dos in al. trashes di. guaranteed to set carry.
 10998                                  
 10999                                  maperror:	
 11000 00000C6F 51                      		push	cx
 11001 00000C70 06                      		push	es
 11002 00000C71 1E                      		push	ds		; set es=Bios_Data
 11003 00000C72 07                      		pop	es
 11004 00000C73 88E0                    		mov	al, ah		; put error code in al
 11005 00000C75 A2[4401]                		mov	[lsterr], al	; terminate list with error code
 11006 00000C78 B90900                  		mov	cx, 9		; numerr (= errout-errin)
 11007                                  					; number of possible error conditions
 11008 00000C7B BF[3C01]                		mov	di, errin	; point to error conditions
 11009 00000C7E F2AE                    		repne scasb
 11010                                  		; 10/12/2022
 11011 00000C80 8A4508                  		mov	al, [di+8]	; [di+numerr-1]
 11012                                  					; get translation
 11013                                  		; 19/10/2022 - Temporary ! 
 11014                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 11015 00000C83 07                      		pop	es
 11016 00000C84 59                      		pop	cx
 11017 00000C85 F9                      		stc			; flag error condition
 11018 00000C86 C3                      		retn
 11019                                  
 11020                                  ; =============== S U B	R O U T	I N E =======================================
 11021                                  
 11022                                  ; set the time of last access for this drive.
 11023                                  ; this is done only for removable media. es:di -> bds
 11024                                  
 11025                                  set_tim:		
 11026 00000C87 50                      		push	ax
 11027 00000C88 E894F8                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 11028                                  
 11029                                  ; we have the new time. if we see that the time has passed,
 11030                                  ; then we reset the threshold counter...
 11031                                  
 11032 00000C8B 263B5547                		cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 11033 00000C8F 7506                    		jnz	short setaccess
 11034 00000C91 263B4D49                		cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 11035                                  		;jz	short done_set
 11036                                  		; 12/12/2022
 11037 00000C95 740E                    		je	short done_set2
 11038                                  setaccess:				
 11039 00000C97 C606[1D01]00            		mov	byte [accesscount], 0
 11040 00000C9C 26895547                		mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 11041 00000CA0 26894D49                		mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 11042                                  done_set:				
 11043 00000CA4 F8                      		clc
 11044                                  done_set2:		; 12/12/2022
 11045 00000CA5 58                      		pop	ax
 11046 00000CA6 C3                      		retn
 11047                                  
 11048                                  ; =============== S U B	R O U T	I N E =======================================
 11049                                  
 11050                                  ; this routine is called if an error occurs while formatting or verifying.
 11051                                  ; it resets the drive,and decrements the retry count.
 11052                                  ; on entry - ds:di - points to bds for the drive
 11053                                  ;	     bp    - contains retry count
 11054                                  ; on exit    flags indicate result of decrementing retry count
 11055                                  
 11056                                  again:	
 11057 00000CA7 E87004                  		call	ResetDisk
 11058 00000CAA 80FC06                  		cmp	ah, 6
 11059 00000CAD 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 11060                                  					; do not decrement retry count.
 11061 00000CAF 4D                      		dec	bp		; decrement retry count
 11062 00000CB0 C3                      		retn
 11063                                  ; ---------------------------------------------------------------------------
 11064                                  
 11065                                  dont_dec_retry_count:			
 11066 00000CB1 08E4                    		or	ah, ah
 11067 00000CB3 C3                      		retn
 11068                                  
 11069                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 11070                                  
 11071                                  ;----------------------------------------------------------------------------
 11072                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 11073                                  ;----------------------------------------------------------------------------
 11074                                  ; 11/03/2019 - Retro DOS v4.0
 11075                                  
 11076                                  ; 18/03/2019
 11077                                  
 11078                                  ; ==========================================================================
 11079                                  ;
 11080                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 11081                                  ;
 11082                                  ;      This function is intended to give the user to control the
 11083                                  ;      bds table flags of unformatted_media bit.
 11084                                  ;      GetAccessFlag will show the status -
 11085                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 11086                                  ;						1 disk i/o allowed
 11087                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 11088                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 11089                                  ;						1 disallow disk i/o
 11090                                  ; ==========================================================================
 11091                                  
 11092                                  		; generic ioctl dispatch tables
 11093                                  
 11094                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 11095                                  
 11096                                  ; ---------------------------------------------------------------------------
 11097 00000CB4 00                      		db 0
 11098                                  
 11099                                  ; 09/12/2022 
 11100                                  %if 0
 11101                                  
 11102                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 11103                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 11104                                  		dw 0EE8h	; 61h	; ReadTrack
 11105                                  		dw 0E86h	; 62h	; VerifyTrack
 11106                                  		dw 0CA3h	 	; Cmd_Error_Proc
 11107                                  		dw 0CA3h		; Cmd_Error_Proc
 11108                                  		dw 0CA3h		; Cmd_Error_Proc
 11109                                  		dw 119Ah	; 66h	; GetMediaId
 11110                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 11111                                  		dw 12C1h	; 68h	; SenseMediaType
 11112                                  
 11113                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 11114                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 11115                                  		dw 0EEFh	; 41h	; WriteTrack
 11116                                  		dw 0DC1h	; 42h	; FormatTrack
 11117                                  		dw 0CA3h		; Cmd_Error_Proc
 11118                                  		dw 0CA3h		; Cmd_Error_Proc
 11119                                  		dw 0CA3h		; Cmd_Error_Proc
 11120                                  		dw 11D2h	; 46h	; SetMediaId
 11121                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 11122                                  
 11123                                  %endif
 11124                                  
 11125                                  		; 09/12/2022
 11126 00000CB5 09                      IoReadJumpTable: db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 8
 11127 00000CB6 [200D]                  		dw GetDeviceParameters	; 60h
 11128 00000CB8 [5B0F]                  		dw ReadTrack		; 61h
 11129 00000CBA [FB0E]                  		dw VerifyTrack		; 62h
 11130 00000CBC [1C0D]                  		dw Cmd_Error_Proc
 11131 00000CBE [1C0D]                  		dw Cmd_Error_Proc
 11132 00000CC0 [1C0D]                  		dw Cmd_Error_Proc
 11133 00000CC2 [FC11]                  		dw GetMediaId		; 66h
 11134 00000CC4 [C812]                  		dw GetAccessFlag	; 67h ; unpublished function
 11135 00000CC6 [1A13]                  		dw SenseMediaType	; 68h
 11136                                  
 11137 00000CC8 08                      IoWriteJumpTable: db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 7
 11138 00000CC9 [6B0D]                  		dw SetDeviceParameters	; 40h
 11139 00000CCB [620F]                  		dw WriteTrack		; 41h
 11140 00000CCD [360E]                  		dw FormatTrack		; 42h
 11141 00000CCF [1C0D]                  		dw Cmd_Error_Proc
 11142 00000CD1 [1C0D]                  		dw Cmd_Error_Proc
 11143 00000CD3 [1C0D]                  		dw Cmd_Error_Proc
 11144 00000CD5 [3212]                  		dw SetMediaId		; 46h
 11145 00000CD7 [DE12]                  		dw SetAccessFlag	; 47h ; unpublished function
 11146                                  
 11147                                  ; ==========================================================================
 11148                                  ; IOC_DC_Table
 11149                                  ;
 11150                                  ; This table contains all of the valid generic IOCtl Minor codes for
 11151                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 11152                                  ; Added for 5.00
 11153                                  ; ==========================================================================
 11154                                  
 11155 00000CD9 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 11156 00000CDA 40                      		db 40h			; SET_DEVICE_PARAMETERS
 11157 00000CDB 61                      		db 61h			; READ_TRACK
 11158 00000CDC 41                      		db 41h			; WRITE_TRACK
 11159 00000CDD 62                      		db 62h			; VERIFY_TRACK
 11160 00000CDE 42                      		db 42h			; FORMAT_TRACK
 11161 00000CDF 66                      		db 66h			; GET_MEDIA_ID
 11162 00000CE0 46                      		db 46h			; SET_MEDIA_ID
 11163 00000CE1 67                      		db 67h			; GET_ACCESS_FLAG
 11164 00000CE2 47                      		db 47h			; SET_ACCESS_FLAG
 11165 00000CE3 68                      		db 68h			; SENSE_MEDIA_TYPE
 11166                                  
 11167                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 11168                                  
 11169                                  ; ---------------------------------------------------------------------------
 11170                                  
 11171                                  ; 16/10/2022
 11172                                  
 11173                                  ; ==========================================================================
 11174                                  ; Do_Generic_IOCtl: perform generic ioctl request
 11175                                  ;
 11176                                  ;    input: AL contains logical drive
 11177                                  ;
 11178                                  ;	functions are dispatched through a call. On return, carry indicates
 11179                                  ;	error code in al. Note::bES:b& ds undefined on return from
 11180                                  ;	subfunctions.
 11181                                  ;
 11182                                  ; ==========================================================================
 11183                                  
 11184                                  ; 11/03/2019
 11185                                  		; 19/10/2022
 11186                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 11187 00000CE4 E889F8                  		call	SetDrive	; ES:DI	Points to bds for drive
 11188 00000CE7 06                      		push	es
 11189 00000CE8 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 11190 00000CEC 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 11191                                  					; RAWIO
 11192 00000CF1 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 11193 00000CF5 07                      		pop	es
 11194 00000CF6 7525                    		jnz	short IoctlFuncErr
 11195                                  
 11196                                  		; cas note: Could do the above two blocks in reverse order.
 11197                                  		; Would have to preserve al for SetDrive
 11198                                  
 11199                                  		; 10/12/2022
 11200 00000CF8 BE[B50C]                		mov	si, IoReadJumpTable
 11201                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 11202                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 11203 00000CFB A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 11204 00000CFD 7503                    		jnz	short NotGenericWrite ; function is a read.
 11205                                  		; 10/12/2022
 11206 00000CFF BE[C80C]                		mov	si, IoWriteJumpTable
 11207                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 11208                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 11209                                  NotGenericWrite:			
 11210 00000D02 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 11211 00000D04 2C40                    		sub	al, 40h		; offset for base function
 11212 00000D06 2E3A04                  		cmp	al, [cs:si]
 11213 00000D09 7712                    		ja	short IoctlFuncErr
 11214 00000D0B 98                      		cbw
 11215 00000D0C D1E0                    		shl	ax, 1
 11216 00000D0E 46                      		inc	si
 11217 00000D0F 01C6                    		add	si, ax
 11218 00000D11 2EFF14                  		call	near [cs:si]
 11219                                  		;call	word ptr cs:[si]
 11220 00000D14 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11221                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11222                                  					; 2C7h:30h = 70h:25A0h
 11223 00000D19 B481                    		mov	ah, 81h		; Return this status in	case of	carry
 11224 00000D1B C3                      		retn			; Pass carry flag through to exit code
 11225                                  ; ---------------------------------------------------------------------------
 11226                                  
 11227                                  		; Cmd_Error_Proc is called as a procedure and also use
 11228                                  		; as a fall through from above
 11229                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 11230 00000D1C 5A                      		pop	dx
 11231                                  
 11232                                  IoctlFuncErr:				
 11233 00000D1D E9B9F3                  		jmp	bc_cmderr
 11234                                  ; ---------------------------------------------------------------------------
 11235                                  
 11236                                  ; 16/10/2022
 11237                                  
 11238                                  ; ==========================================================================
 11239                                  ;**	GetDeviceParameters:
 11240                                  ;
 11241                                  ;	GetDeviceParameters implements the generic ioctl function:
 11242                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 11243                                  ;
 11244                                  ;	ENTRY	(ES:di) = BDS for drive
 11245                                  ;		PtrSav = long pointer to request header
 11246                                  ;	EXIT	??? BUGBUG
 11247                                  ;	USES	??? BUGBUG
 11248                                  ; ==========================================================================
 11249                                  
 11250                                  		; 19/10/2022
 11251                                  GetDeviceParameters:
 11252                                  		; Copy info from bds to the device parameters packet
 11253                                  
 11254 00000D20 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 11255 00000D24 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11256                                  					; (DS:BX) = return buffer
 11257 00000D27 268A4522                		mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 11258 00000D2B 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 11259 00000D2E 268B4523                		mov	ax, [es:di+35]	; [es:di+BDS.flags]
 11260 00000D32 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 11261                                  					; Mask off other bits
 11262 00000D35 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 11263 00000D38 268B4525                		mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 11264 00000D3C 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 11265 00000D3F 30C0                    		xor	al, al		; Set media type to default
 11266 00000D41 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 11267                                  					
 11268                                  		; copy recommended bpb
 11269 00000D44 8D7527                  		lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 11270 00000D47 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11271                                  					; BUILD_DEVICE_BPB
 11272 00000D4A 7412                    		jz	short UseBpbPresent
 11273 00000D4C 1E                      		push	ds		; Save request packet segment
 11274 00000D4D 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11275                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11276                                  					; 2C7h:30h = 70h:25A0h
 11277                                  					; Point back to Bios_Data
 11278 00000D52 E885FB                  		call	checksingle
 11279 00000D55 E83EF9                  		call	GetBp		; Build	the bpb	from scratch
 11280 00000D58 1F                      		pop	ds		; Restore request packet segment
 11281 00000D59 720F                    		jb	short GetParmRet
 11282 00000D5B 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 11283                                  					; Use this subfield of bds instead
 11284                                  UseBpbPresent:				
 11285 00000D5E 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 11286                                  					; This is where	the result goes
 11287 00000D61 B91900                  		mov	cx, 25		; A_BPB.size - 6
 11288                                  					; For now use 'small' bpb
 11289 00000D64 1E                      		push	ds		; reverse segments for copy
 11290 00000D65 06                      		push	es
 11291 00000D66 1F                      		pop	ds
 11292 00000D67 07                      		pop	es
 11293 00000D68 F3A4                    		rep movsb
 11294                                  		
 11295                                  		; 12/12/2022
 11296                                  		; cf=0 (test instruction -above- resets cf) 	
 11297                                  		;clc
 11298                                  GetParmRet:				
 11299 00000D6A C3                      		retn
 11300                                  ; ---------------------------------------------------------------------------
 11301                                  
 11302                                  ; 17/10/2022
 11303                                  ; 16/10/2022
 11304                                  
 11305                                  ; ==========================================================================
 11306                                  ; SetDeviceParameters:
 11307                                  ;
 11308                                  ; input: ES:di points to bds for drive
 11309                                  ; ==========================================================================
 11310                                  
 11311                                  		; 19/10/2022
 11312                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 11313 00000D6B C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 11314 00000D6F C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11315 00000D72 26814D234001            		or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 11316                                  					; fchanged_by_format|fchanged
 11317 00000D78 F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11318                                  					; ONLY_SET_TRACKLAYOUT
 11319 00000D7B 7579                    		jnz	short setTrackTable
 11320 00000D7D 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 11321 00000D80 26884522                		mov	[es:di+34], al	; [es:di+BDS.formfactor]
 11322 00000D84 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 11323 00000D87 26894525                		mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 11324 00000D8B 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 11325 00000D8E 1E                      		push	ds
 11326                                  		; 17/10/2022
 11327 00000D8F 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11328                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11329                                  					; 2C7h:30h = 70h:25A0h
 11330                                  		;cmp	byte [fhave96], 0
 11331 00000D94 803E[7700]00            		cmp	byte [fhave96], 0
 11332 00000D99 1F                      		pop	ds
 11333 00000D9A 7502                    		jnz	short HaveChange ; we have changeline support
 11334                                  		; 10/12/2022
 11335 00000D9C 24FD                    		and	al, 0FDh
 11336                                  		;and	ax, 0FFFDh	; ~fchangeline
 11337                                  
 11338                                  		; Ignore all bits except non_removable and changeline
 11339                                  HaveChange:				
 11340 00000D9E 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 11341 00000DA1 268B4D23                		mov	cx, [es:di+35]	; [es:di+BDS.flags]
 11342 00000DA5 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 11343 00000DA9 09C8                    		or	ax, cx
 11344 00000DAB 26894523                		mov	[es:di+35], ax	; [es:di+BDS.flags]
 11345 00000DAF 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 11346                                  					; Set media type
 11347 00000DB2 1E                      		push	ds
 11348 00000DB3 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11349                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11350 00000DB8 A2[2F06]                		mov	[mediatype], al
 11351                                  		;mov	ds:mediatype, al
 11352 00000DBB 1F                      		pop	ds
 11353                                  
 11354                                  		; The media changed (maybe) so we will have to do a set dasd
 11355                                  		; the next time we format a track
 11356                                  
 11357                                  		; 10/12/2022
 11358 00000DBC 26804D2380              		or	byte [es:di+35], 80h
 11359                                  		;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 11360                                  					; set_dasd_true
 11361 00000DC1 57                      		push	di		; Save bds pointer
 11362                                  
 11363                                  		; Figure out what we are supposed to do with the bpb
 11364                                  		; were we asked to install a fake bpb?
 11365                                  
 11366 00000DC2 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11367                                  					; INSTALL_FAKE_BPB
 11368 00000DC5 7514                    		jnz	short InstallFakeBpb
 11369                                  
 11370                                  		; were we returning a fake bpb when asked to build a bpb?
 11371                                  
 11372                                  		; 10/12/2022
 11373 00000DC7 26F6452304              		test	byte [es:di+35], 4
 11374                                  		;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 11375                                  					; return_fake_bpb
 11376 00000DCC 7405                    		jz	short InstallRecommendedBpb
 11377                                  
 11378                                  		; we were returning a fake bpb but we can stop now
 11379                                  
 11380                                  		; 10/12/2022
 11381 00000DCE 26806523FB              		and	byte [es:di+35], 0FBh
 11382                                  		;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 11383                                  					; ~return_fake_bpb
 11384                                  InstallRecommendedBpb:			
 11385 00000DD3 B91F00                  		mov	cx, 31		; A_BPB.size
 11386 00000DD6 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 11387 00000DD9 EB0B                    		jmp	short CopyTheBpb
 11388                                  ; ---------------------------------------------------------------------------
 11389                                  
 11390                                  InstallFakeBpb:
 11391                                  		; 10/12/2022
 11392 00000DDB 26804D2304              		or	byte [es:di+35], 4				
 11393                                  		;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 11394                                  					; return_fake_bpb
 11395 00000DE0 B91900                  		mov	cx, 25		; A_BPB.size - 6
 11396                                  					; move 'smaller' bpb
 11397 00000DE3 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 11398                                  
 11399                                  CopyTheBpb:				
 11400 00000DE6 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 11401 00000DE9 F3A4                    		rep movsb
 11402 00000DEB 1E                      		push	ds		; Save packet segment
 11403                                  		; 17/10/2022
 11404 00000DEC 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11405                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11406                                  					; Setup	for ds -> Bios_Data
 11407 00000DF1 E8DA03                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 11408 00000DF4 1F                      		pop	ds		; Restore packet segment
 11409 00000DF5 5F                      		pop	di		; Restore bds pointer
 11410                                  setTrackTable:				
 11411 00000DF6 8B4F26                  		mov	cx, [bx+38]
 11412 00000DF9 1E                      		push	ds
 11413 00000DFA 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11414 00000DFF 890E[3105]              		mov	[sectorspertrack], cx
 11415 00000E03 1F                      		pop	ds
 11416                                  		; 10/12/2022
 11417 00000E04 26806523F7              		and	byte [es:di+35], 0F7h
 11418                                  		;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 11419                                  					; ~good_tracklayout
 11420 00000E09 F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11421                                  					; TRACKLAYOUT_IS_GOOD
 11422 00000E0C 7405                    		jz	short UglyTrackLayOut
 11423                                  		; 10/12/2022
 11424 00000E0E 26804D2308              		or	byte [es:di+35], 8
 11425                                  		;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 11426                                  					; good_tracklayout
 11427                                  UglyTrackLayOut:			
 11428 00000E13 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 11429 00000E16 771A                    		ja	short TooManyPerTrack
 11430                                  		;jcxz	short SectorInfoSaved
 11431 00000E18 E316                    		jcxz	SectorInfoSaved	; 19/10/2022
 11432 00000E1A BF[3305]                		mov	di, tracktable
 11433 00000E1D 8D7728                  		lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 11434                                  		; 17/10/2022
 11435 00000E20 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 11436                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11437                                  					; Trash	our bds	pointer
 11438                                  StoreSectorInfo:			
 11439 00000E25 47                      		inc	di
 11440 00000E26 47                      		inc	di		; Skip over cylinder and head
 11441 00000E27 AD                      		lodsw			; Get sector id
 11442 00000E28 AA                      		stosb			; Copy it
 11443 00000E29 AD                      		lodsw			; Get sector size
 11444 00000E2A E8E301                  		call	SectSizeToSectIndex
 11445 00000E2D AA                      		stosb			; Store	sector SIZE index
 11446 00000E2E E2F5                    		loop	StoreSectorInfo
 11447                                  SectorInfoSaved:			
 11448 00000E30 F8                      		clc
 11449 00000E31 C3                      		retn
 11450                                  ; ---------------------------------------------------------------------------
 11451                                  
 11452                                  TooManyPerTrack:			
 11453 00000E32 B00C                    		mov	al, 0Ch
 11454 00000E34 F9                      		stc
 11455 00000E35 C3                      		retn
 11456                                  ; ---------------------------------------------------------------------------
 11457                                  
 11458                                  ; 16/10/2022
 11459                                  
 11460                                  ; ==========================================================================
 11461                                  ; FormatTrack:
 11462                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 11463                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 11464                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 11465                                  ;
 11466                                  ; input: ES:di points to bds for drive
 11467                                  ;
 11468                                  ; output:
 11469                                  ;	for status call:
 11470                                  ;	specialfunction byte set to:
 11471                                  ;		0 - rom support + legal combination
 11472                                  ;		1 - no rom support
 11473                                  ;		2 - illegal combination
 11474                                  ;		3 - no media present
 11475                                  ;	carry cleared.
 11476                                  ;
 11477                                  ;	for format track:
 11478                                  ;		carry set if error
 11479                                  ;
 11480                                  ; ==========================================================================
 11481                                  
 11482                                  ; 16/03/2019
 11483                                  
 11484                                  		; 19/10/2022
 11485                                  FormatTrack:
 11486 00000E36 C51E[1200]              		lds	bx, [ptrsav]
 11487 00000E3A C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 11488 00000E3D F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11489                                  					; STATUS_FOR_FORMAT
 11490 00000E40 740E                    		jz	short DoFormatTrack
 11491 00000E42 1E                      		push	ds
 11492                                  		; 17/10/2022
 11493 00000E43 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11494                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11495 00000E48 E83902                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11496 00000E4B 1F                      		pop	ds
 11497 00000E4C 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11498 00000E4E F8                      		clc
 11499 00000E4F C3                      		retn
 11500                                  ; ---------------------------------------------------------------------------
 11501                                  
 11502                                  DoFormatTrack:				
 11503 00000E50 26807D2205              		cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 11504                                  					; DEV_HARDDISK
 11505 00000E55 7508                    		jnz	short DoFormatDiskette
 11506                                  		; 17/10/2022
 11507 00000E57 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11508                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11509                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 11510 00000E5C E99C00                  		jmp	VerifyTrack
 11511                                  ; ---------------------------------------------------------------------------
 11512                                  
 11513                                  DoFormatDiskette:			
 11514 00000E5F 8B4F01                  		mov	cx, [bx+1]
 11515 00000E62 8B5703                  		mov	dx, [bx+3]
 11516 00000E65 F60702                  		test	byte [bx], 2
 11517                                  		; 17/10/2022
 11518 00000E68 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11519                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11520                                  					; Setup	ds-> Bios_Data for verify
 11521 00000E6D 7403                    		jz	short DoFormatDiskette_1
 11522 00000E6F E9E400                  		jmp	VerifyTrack_Err
 11523                                  ; ---------------------------------------------------------------------------
 11524                                  
 11525                                  DoFormatDiskette_1:			
 11526 00000E72 E80F02                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11527 00000E75 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 11528 00000E77 7406                    		jz	short NeedToSetDasd ; Old rom
 11529 00000E79 3C03                    		cmp	al, 3		; Time out error?
 11530 00000E7B 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 11531                                  					; about	the illegal combination)
 11532 00000E7D EB67                    		jmp	short FormatFailed
 11533                                  ; ---------------------------------------------------------------------------
 11534                                  
 11535                                  NeedToSetDasd:				
 11536 00000E7F 52                      		push	dx
 11537 00000E80 E8A001                  		call	SetDasd		; INT 13h, AH=17h
 11538 00000E83 5A                      		pop	dx
 11539                                  NoSetDasd:				
 11540 00000E84 E853FA                  		call	checksingle	; Do any needed	diskette swapping
 11541 00000E87 89D0                    		mov	ax, dx		; Get track from packet
 11542 00000E89 A3[3901]                		mov	[trknum], ax
 11543 00000E8C 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 11544 00000E90 88CC                    		mov	ah, cl
 11545 00000E92 BB[3305]                		mov	bx, tracktable
 11546 00000E95 8B0E[3105]              		mov	cx, [sectorspertrack]
 11547                                  
 11548                                  StoreCylinderHead:			
 11549 00000E99 8907                    		mov	[bx], ax	; Store	into TrackTable
 11550 00000E9B 83C304                  		add	bx, 4		; Skip to next sector field
 11551 00000E9E E2F9                    		loop	StoreCylinderHead
 11552 00000EA0 B90500                  		mov	cx, 5		; MAXERR - Set up retry	count
 11553                                  FormatRetry:				
 11554 00000EA3 51                      		push	cx
 11555 00000EA4 BB[3305]                		mov	bx, tracktable
 11556 00000EA7 A0[3105]                		mov	al, [sectorspertrack]
 11557 00000EAA B405                    		mov	ah, 5		; romformat
 11558 00000EAC 8C1E[2F05]              		mov	[xfer_seg], ds
 11559 00000EB0 E87F02                  		call	ToRom
 11560 00000EB3 59                      		pop	cx
 11561 00000EB4 7216                    		jb	short FormatError
 11562 00000EB6 51                      		push	cx		; Now verify the sectors just formatted.
 11563                                  					; NOTE:	because	of bug in some BIOSes we have to
 11564                                  					;	set ES:BX to 00:00
 11565 00000EB7 53                      		push	bx
 11566 00000EB8 31DB                    		xor	bx, bx
 11567 00000EBA 891E[2F05]              		mov	[xfer_seg], bx
 11568 00000EBE A0[3105]                		mov	al, [sectorspertrack]
 11569 00000EC1 B404                    		mov	ah, 4		; romverify
 11570 00000EC3 B101                    		mov	cl, 1
 11571 00000EC5 E86A02                  		call	ToRom
 11572 00000EC8 5B                      		pop	bx
 11573 00000EC9 59                      		pop	cx
 11574 00000ECA 7329                    		jnb	short FormatOk
 11575                                  FormatError:				
 11576 00000ECC E84B02                  		call	ResetDisk
 11577 00000ECF C606[3106]01            		mov	byte [had_format_error], 1
 11578 00000ED4 50                      		push	ax
 11579 00000ED5 51                      		push	cx
 11580 00000ED6 52                      		push	dx
 11581 00000ED7 E8AA01                  		call	SetMediaForFormat
 11582 00000EDA 3C01                    		cmp	al, 1
 11583 00000EDC 7503                    		jnz	short WhileErr
 11584 00000EDE E84201                  		call	SetDasd
 11585                                  WhileErr:				
 11586 00000EE1 5A                      		pop	dx
 11587 00000EE2 59                      		pop	cx
 11588 00000EE3 58                      		pop	ax
 11589 00000EE4 E2BD                    		loop	FormatRetry
 11590                                  FormatFailed:				
 11591 00000EE6 C606[3106]01            		mov	byte [had_format_error], 1
 11592                                  					; Set the format error flag
 11593 00000EEB 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 11594 00000EEE 7502                    		jnz	short DoMapIt	; Error	to time	out error
 11595 00000EF0 B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 11596                                  DoMapIt:				
 11597 00000EF2 E97AFD                  		jmp	maperror
 11598                                  ; ---------------------------------------------------------------------------
 11599                                  
 11600                                  FormatOk:				
 11601 00000EF5 C606[3106]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 11602 00000EFA C3                      		retn
 11603                                  ; ---------------------------------------------------------------------------
 11604                                  
 11605                                  ; 16/10/2022
 11606                                  
 11607                                  ; ==========================================================================
 11608                                  ;
 11609                                  ; VerifyTrack:
 11610                                  ;
 11611                                  ; input: ES:di points to bds for drive
 11612                                  ; ==========================================================================
 11613                                  
 11614                                  VerifyTrack:				
 11615 00000EFB 1E                      		push	ds
 11616 00000EFC C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 11617 00000F00 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11618                                  
 11619                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 11620                                  
 11621 00000F03 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 11622 00000F06 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 11623 00000F09 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 11624 00000F0C 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 11625                                  					; Get option flag word
 11626 00000F0E 1F                      		pop	ds
 11627 00000F0F C606[2001]04            		mov	byte [rflag], 4	; romverify
 11628 00000F14 890E[3301]              		mov	[curtrk], cx
 11629 00000F18 A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 11630 00000F1B 8B0E[3105]              		mov	cx, [sectorspertrack]
 11631                                  
 11632                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 11633                                  		; specified if not we should go to the normal track verification
 11634                                  		; routine. If fast format has been specified we should get the
 11635                                  		; number of tracks to be verified and check it to see if it is
 11636                                  		; > 255. If it is then it is an error and we should go to
 11637                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 11638                                  		; sectors per track to get the total number of sectors to be
 11639                                  		; verified. This should also be less than equal to 255
 11640                                  		; otherwise we go to same error exit. If everything is okay
 11641                                  		; we initalise cx to the total sectors. use ax as a temporary
 11642                                  		; register.
 11643                                  
 11644                                  					; Special function requested?	
 11645 00000F1F F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 11646 00000F22 7421                    		jz	short NormVerifyTrack
 11647 00000F24 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 11648 00000F26 08E4                    		or	ah, ah
 11649 00000F28 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 11650 00000F2A F6E1                    		mul	cl
 11651 00000F2C 08E4                    		or	ah, ah
 11652 00000F2E 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 11653 00000F30 89C1                    		mov	cx, ax
 11654                                  		; 10/12/2022
 11655 00000F32 26F6452301              		test	byte [es:di+35], 1
 11656                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11657                                  					; fnon_removable
 11658 00000F37 740C                    		jz	short NormVerifyTrack
 11659                                  					; Multitrack operation = on?
 11660                                  		; 10/12/2022
 11661                                  		; 19/10/2022
 11662 00000F39 F606[2705]80            		test	byte [multrk_flag], 80h
 11663                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11664                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 11665 00000F3E 7405                    		jz	short NormVerifyTrack
 11666 00000F40 C606[2E05]01            		mov	byte [multitrk_format_flag], 1
 11667                                  NormVerifyTrack:			
 11668 00000F45 31C0                    		xor	ax, ax		; 1st sector
 11669 00000F47 31DB                    		xor	bx, bx
 11670 00000F49 891E[2F05]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 11671 00000F4D E83F00                  		call	TrackIo
 11672 00000F50 C606[2E05]00            		mov	byte [multitrk_format_flag], 0
 11673 00000F55 C3                      		retn
 11674                                  ; ---------------------------------------------------------------------------
 11675                                  
 11676                                  VerifyTrack_Err:			
 11677 00000F56 B401                    		mov	ah, 1
 11678 00000F58 E914FD                  		jmp	maperror
 11679                                  ; ---------------------------------------------------------------------------
 11680                                  
 11681                                  ; 16/10/2022
 11682                                  
 11683                                  ; ==========================================================================
 11684                                  ;
 11685                                  ; ReadTrack:
 11686                                  ;
 11687                                  ; input: ES:di points to bds for drive
 11688                                  ;
 11689                                  ; ==========================================================================
 11690                                  
 11691                                  ReadTrack:				
 11692 00000F5B C606[2001]02            		mov	byte [rflag], 2	; romread
 11693 00000F60 EB05                    		jmp	short ReadWriteTrack
 11694                                  ; ---------------------------------------------------------------------------
 11695                                  
 11696                                  WriteTrack:
 11697                                  
 11698                                  ; ==========================================================================
 11699                                  ;
 11700                                  ; WriteTrack:
 11701                                  ;
 11702                                  ; input: ES:di points to bds for drive
 11703                                  ;
 11704                                  ; ==========================================================================
 11705                                  				
 11706 00000F62 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 11707                                  
 11708                                  		; Fall into ReadWriteTrack
 11709                                  
 11710                                  ; ==========================================================================
 11711                                  ;
 11712                                  ; readWriteTrack:
 11713                                  ;
 11714                                  ; input:
 11715                                  ;    ES:di points to bds for drive
 11716                                  ;    rFlag - 2 for read,3 for write
 11717                                  ;
 11718                                  ; ==========================================================================
 11719                                  
 11720                                  ReadWriteTrack:	
 11721                                  		; save bds pointer segment so we can use it to access
 11722                                  		; our packet. Notice that this is not the standard register
 11723                                  		; assignment for accessing packets
 11724                                  		
 11725                                  		; 19/10/2022	
 11726 00000F67 06                      		push	es
 11727 00000F68 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 11728 00000F6C 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11729 00000F70 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 11730 00000F74 A3[3301]                		mov	[curtrk], ax
 11731 00000F77 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 11732 00000F7B A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 11733 00000F7E 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 11734 00000F82 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 11735 00000F86 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 11736                                  					; Get transfer address
 11737                                  
 11738                                  		; we just trashed our packet address, but we no longer care
 11739                                  
 11740 00000F8A 8C06[2F05]              		mov	[xfer_seg], es	; Pass transfer	segment
 11741 00000F8E 07                      		pop	es
 11742                                  
 11743                                  		; Fall into TrackIo
 11744                                  
 11745                                  ; =============== S U B	R O U T	I N E =======================================
 11746                                  
 11747                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11748                                  
 11749                                  ; ==========================================================================
 11750                                  ;
 11751                                  ; TrackIo:
 11752                                  ;    performs track read/write/verify
 11753                                  ;
 11754                                  ;   input:
 11755                                  ;      rFlag	- 2 = read
 11756                                  ;		  3 = write
 11757                                  ;		  4 = verify
 11758                                  ;      AX	- Index into track table of first sector to io
 11759                                  ;      CX	- Number of sectors to io
 11760                                  ;      Xfer_Seg:BX - Transfer address
 11761                                  ;      ES:DI	- Pointer to bds
 11762                                  ;      CurTrk	- Current cylinder
 11763                                  ;      CurHd	- Current head
 11764                                  ;
 11765                                  ; ==========================================================================
 11766                                  
 11767                                  ; 16/03/2019 - Retro DOS v4.0
 11768                                  		
 11769                                  		; 19/10/2022
 11770                                  TrackIo:	
 11771                                  					; Procedure `disk' will pop stack to
 11772 00000F8F 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 11773 00000F93 E844F9                  		call	checksingle	; Ensure correct disk is in drv
 11774 00000F96 803E[3006]01            		cmp	byte [media_set_for_format], 1
 11775                                  					; See if we have already set	disk
 11776 00000F9B 7407                    		jz	short Dptalreadyset ; base table
 11777 00000F9D 50                      		push	ax		; set up tables	and variables for i/o
 11778 00000F9E 51                      		push	cx
 11779 00000F9F E896FA                  		call	iosetup
 11780 00000FA2 59                      		pop	cx
 11781 00000FA3 58                      		pop	ax
 11782                                  Dptalreadyset:				; Point si at the table entry of the			
 11783 00000FA4 BE[3305]                		mov	si, tracktable	; first sector to be io'd
 11784 00000FA7 D1E0                    		shl	ax, 1
 11785 00000FA9 D1E0                    		shl	ax, 1
 11786 00000FAB 01C6                    		add	si, ax
 11787                                  
 11788                                  		; WE WANT:
 11789                                  		; CX to	be the number of times we have to loop
 11790                                  		; DX to	be the number of sectors we read on each iteration
 11791                                  		
 11792 00000FAD BA0100                  		mov	dx, 1
 11793                                  		; 12/12/2022
 11794 00000FB0 26F6452308              		test	byte [es:di+23h], 8
 11795                                  		;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 11796                                  					; good_tracklayout
 11797 00000FB5 7402                    		jz	short ionextsector
 11798                                  		
 11799 00000FB7 87D1                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 11800                                  ionextsector:				
 11801 00000FB9 51                      		push	cx
 11802 00000FBA 52                      		push	dx
 11803 00000FBB 46                      		inc	si
 11804 00000FBC 46                      		inc	si		; Skip over the	cylinder and head in
 11805                                  					; the track table
 11806 00000FBD AC                      		lodsb			; Get sector ID	from track table
 11807 00000FBE A2[3101]                		mov	[cursec], al
 11808                                  
 11809                                  		; assumptions for a fixed disk multi-track disk	i/o
 11810                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 11811                                  		;     only CL is valid.
 11812                                  		; 2). Sector size should be set	to 512 bytes.
 11813                                  		; 3). Good track layout
 11814                                  		
 11815                                  		; 12/12/2022
 11816 00000FC1 26F6452301              		test	byte [es:di+23h], 1
 11817                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11818                                  					; fnon_removable ; Fixed disk?
 11819 00000FC6 7414                    		jz	short IoRemovable ; No
 11820                                  		; 12/12/2022
 11821 00000FC8 F606[2705]80            		test	byte [multrk_flag], 80h
 11822                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11823                                  						; Allow multi-track operation?
 11824 00000FCD 740D                    		jz	short IoRemovable ; No,don't do that.
 11825 00000FCF 8916[2201]              		mov	[seccnt], dx
 11826 00000FD3 89D0                    		mov	ax, dx
 11827 00000FD5 E81DFB                  		call	Disk
 11828 00000FD8 5A                      		pop	dx
 11829 00000FD9 59                      		pop	cx
 11830 00000FDA F8                      		clc
 11831 00000FDB C3                      		retn
 11832                                  ; ---------------------------------------------------------------------------
 11833                                  
 11834                                  IoRemovable:				
 11835 00000FDC AC                      		lodsb			; Get sector size index	from track
 11836                                  					; table	and save it
 11837 00000FDD 50                      		push	ax
 11838 00000FDE 56                      		push	si
 11839 00000FDF 1E                      		push	ds		; Save Bios_Data
 11840 00000FE0 50                      		push	ax
 11841 00000FE1 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 11842                                  					; Fetch	EOT while ds-> Bios_Data
 11843 00000FE5 C536[2D01]              		lds	si, [dpt]
 11844 00000FE9 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 11845 00000FEC 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 11846 00000FEF 58                      		pop	ax
 11847 00000FF0 1F                      		pop	ds
 11848 00000FF1 88D0                    		mov	al, dl
 11849 00000FF3 A3[2201]                		mov	[seccnt], ax
 11850 00000FF6 E8FCFA                  		call	Disk
 11851 00000FF9 5E                      		pop	si		; Advance buffer pointer by adding
 11852                                  					; sector size
 11853 00000FFA 58                      		pop	ax
 11854 00000FFB E81D00                  		call	SectorSizeIndexToSectorSize
 11855 00000FFE 01C3                    		add	bx, ax
 11856 00001000 5A                      		pop	dx
 11857 00001001 59                      		pop	cx
 11858 00001002 E2B5                    		loop	ionextsector
 11859 00001004 803E[3006]01            		cmp	byte [media_set_for_format], 1
 11860                                  		;jz	short NoNeedDone
 11861                                  		; 12/12/2022
 11862 00001009 7404                    		je	short NoNeedDone2
 11863 0000100B E872FA                  		call	done		; set time of last access, and reset
 11864                                  					; entries in Dpt.
 11865                                  NoNeedDone:				
 11866 0000100E F8                      		clc
 11867                                  NoNeedDone2:
 11868 0000100F C3                      		retn
 11869                                  
 11870                                  ; =============== S U B	R O U T	I N E =======================================
 11871                                  
 11872                                  ; ---------------------------------------------------------------------------
 11873                                  ;
 11874                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 11875                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 11876                                  ; are permissible.
 11877                                  ;
 11878                                  ; On Input   AX contains sector size in bytes
 11879                                  ; On Output  AL Contains index
 11880                                  ; All other registers preserved
 11881                                  ;
 11882                                  ; ---------------------------------------------------------------------------
 11883                                  
 11884                                  SectSizeToSectIndex:	
 11885 00001010 80FC02                  		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 11886                                  					; examine upper	byte only
 11887 00001013 7703                    		ja	short OneK
 11888 00001015 88E0                    		mov	al, ah		; value	in AH is the index!
 11889 00001017 C3                      		retn
 11890                                  ; ---------------------------------------------------------------------------
 11891                                  
 11892                                  OneK:					
 11893 00001018 B003                    		mov	al, 3
 11894 0000101A C3                      		retn
 11895                                  
 11896                                  ; =============== S U B	R O U T	I N E =======================================
 11897                                  
 11898                                  
 11899                                  SectorSizeIndexToSectorSize:
 11900 0000101B 88C1                    		mov	cl, al
 11901 0000101D B88000                  		mov	ax, 128
 11902 00001020 D3E0                    		shl	ax, cl
 11903 00001022 C3                      		retn
 11904                                  
 11905                                  ; =============== S U B	R O U T	I N E =======================================
 11906                                  
 11907                                  ; 16/10/2022
 11908                                  
 11909                                  ; ---------------------------------------------------------------------------
 11910                                  ;
 11911                                  ; SetDASD
 11912                                  ;
 11913                                  ; Set up the rom for formatting.
 11914                                  ; we have to tell the rom bios what type of disk is in the drive.
 11915                                  ;
 11916                                  ; On Input   - ES:di - Points to bds
 11917                                  ;
 11918                                  ; ---------------------------------------------------------------------------
 11919                                  
 11920                                  		; 19/10/2022
 11921                                  SetDasd:	
 11922 00001023 803E[3106]01            		cmp	byte [had_format_error], 1 ;
 11923                                  					; See if we've previously set dasd type
 11924 00001028 740C                    		jz	short DoSetDasd
 11925                                  		; 10/12/2022
 11926 0000102A 26F6452380              		test	byte [es:di+23h], 80h
 11927                                  		;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 11928                                  					; set_dasd_true
 11929 0000102F 744A                    		jz	short DasdHasBeenSet
 11930                                  		; 10/12/2022
 11931 00001031 268065237F              		and	byte [es:di+23h], 7Fh
 11932                                  		;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 11933                                  					; ~set_dasd_true
 11934                                  DoSetDasd:				
 11935 00001036 C606[3106]00            		mov	byte [had_format_error], 0 ; Reset it
 11936 0000103B C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 11937 00001040 B004                    		mov	al, 4
 11938 00001042 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11939                                  					; DEV_3INCH720KB
 11940 00001047 741A                    		jz	short DoSet
 11941 00001049 26807D2201              		cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 11942                                  					; DEV_5INCH96TPI
 11943 0000104E 7404                    		jz	short GotBig
 11944 00001050 B001                    		mov	al, 1
 11945 00001052 EB0F                    		jmp	short DoSet
 11946                                  ; ---------------------------------------------------------------------------
 11947                                  
 11948                                  GotBig:					
 11949 00001054 B002                    		mov	al, 2		; 160/320k in a	1.2 meg	drive
 11950 00001056 803E[2F06]00            		cmp	byte [mediatype], 0
 11951 0000105B 7506                    		jnz	short DoSet
 11952                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 11953                                  		; 10/12/2022
 11954                                  		;inc	al  ; al = 3
 11955                                  		; 18/12/2022
 11956 0000105D 40                      		inc	ax  ; al = 3
 11957 0000105E C606[3B01]54            		mov	byte [gap_patch], 54h
 11958                                  DoSet:					
 11959 00001063 1E                      		push	ds
 11960 00001064 56                      		push	si
 11961 00001065 8E1E[1A00]              		mov	ds, [zeroseg]	; Point	to interrupt vectors
 11962                                  
 11963 00001069 C5367800                		lds	si, [DSKADR]
 11964                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 11965                                  		;;lds	si, ds:78h		
 11966                                  
 11967 0000106D C644090F                		mov	byte [si+9], 0Fh ;
 11968                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 11969 00001071 5E                      		pop	si
 11970 00001072 1F                      		pop	ds
 11971 00001073 B417                    		mov	ah, 17h
 11972 00001075 268A5504                		mov	dl, [es:di+4]
 11973 00001079 CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 11974                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 11975                                  DasdHasBeenSet:				
 11976 0000107B 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 11977 0000107F 8826[3701]              		mov	[formt_eot], ah
 11978 00001083 C3                      		retn
 11979                                  
 11980                                  ; =============== S U B	R O U T	I N E =======================================
 11981                                  
 11982                                  ; 16/10/2022
 11983                                  
 11984                                  ; ---------------------------------------------------------------------------
 11985                                  ;
 11986                                  ; Set Media Type for Format
 11987                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 11988                                  ; BPB area in the BDS can be handled by the rom.
 11989                                  ; On Input, ES:DI -> current BDS.
 11990                                  ; The status of the operation is returned in AL
 11991                                  ;
 11992                                  ;	- 0 - if the support is available,and the combination is valid.
 11993                                  ;	- 1 - no rom support
 11994                                  ;	- 2 - illegal combination
 11995                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 11996                                  ;
 11997                                  ; Flags also may be altered. All other registers preserved.
 11998                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 11999                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 12000                                  ; to the one returned. the original pointer to the disk base table is stored
 12001                                  ; in TempDpt, until it is restored.
 12002                                  ;
 12003                                  ; ---------------------------------------------------------------------------
 12004                                  
 12005                                  		; 19/10/2022
 12006                                  SetMediaForFormat:	
 12007 00001084 51                      		push	cx
 12008 00001085 52                      		push	dx
 12009                                  
 12010                                  		; If we have a format error, then do not change Dpt, TempDpt.
 12011                                  		; but we need to call int 13h, ah=18h again.
 12012                                  
 12013 00001086 803E[3106]01            		cmp	byte [had_format_error], 1
 12014 0000108B 7425                    		jz	short SkipSaveDskAdr
 12015 0000108D 30C0                    		xor	al, al		; If already done return 0
 12016 0000108F 803E[3006]01            		cmp	byte [media_set_for_format], 1
 12017 00001094 7502                    		jnz	short DoSetMediaForFormat
 12018 00001096 EB7F                    		jmp	SetMediaRet	; Media	already	set
 12019                                  ; ---------------------------------------------------------------------------
 12020                                  
 12021                                  DoSetMediaForFormat:			
 12022 00001098 06                      		push	es
 12023 00001099 56                      		push	si
 12024 0000109A 8E06[1A00]              		mov	es, [zeroseg]	; Point to interrupt vectors
 12025 0000109E 26C4367800              		les	si, [es:DSKADR]
 12026                                  		;les	si, es:78h	; [es:DSKADR]
 12027                                  					; Get pointer to disk base table
 12028 000010A3 8936[2D01]              		mov	[dpt], si
 12029 000010A7 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 12030                                  
 12031                                  		; Initialize the head settle time to 0Fh. See the offsets
 12032                                  		; given in dskprm.inc.
 12033                                  
 12034 000010AB 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 12035 000010B0 5E                      		pop	si
 12036 000010B1 07                      		pop	es
 12037                                  
 12038                                  SkipSaveDskAdr:				
 12039 000010B2 268B4D25                		mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 12040 000010B6 49                      		dec	cx
 12041 000010B7 80E503                  		and	ch, 3
 12042 000010BA D0CD                    		ror	ch, 1
 12043 000010BC D0CD                    		ror	ch, 1
 12044 000010BE 86E9                    		xchg	ch, cl
 12045 000010C0 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 12046 000010C4 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12047 000010C8 06                      		push	es
 12048 000010C9 1E                      		push	ds
 12049 000010CA 56                      		push	si
 12050 000010CB 57                      		push	di
 12051 000010CC B418                    		mov	ah, 18h
 12052 000010CE CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 12053                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 12054 000010D0 7233                    		jb	short FormaStatErr
 12055 000010D2 803E[3106]01            		cmp	byte [had_format_error], 1
 12056 000010D7 7425                    		jz	short skip_disk_base_setting
 12057 000010D9 06                      		push	es		; Save segment returned	by the rom
 12058 000010DA 8E06[1A00]              		mov	es, [zeroseg]	; Point	to interrupt vector segment
 12059 000010DE 26C4367800              		les	si, [es:DSKADR]
 12060                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 12061                                  					; Get current disk base	table
 12062 000010E3 8936[3206]              		mov	[tempdpt], si
 12063 000010E7 8C06[3406]              		mov	[tempdpt+2], es ; Save it
 12064 000010EB 8E06[1A00]              		mov	es, [zeroseg]
 12065                                  		;mov	es:78h,	di
 12066 000010EF 26893E7800              		mov	[es:DSKADR], di
 12067                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 12068 000010F4 268F067A00              		pop	word [es:DSKADR+2]
 12069 000010F9 C606[3006]01            		mov	byte [media_set_for_format], 1
 12070                                  skip_disk_base_setting:			
 12071 000010FE 30C0                    		xor	al, al		; Legal	combination + rom support code
 12072                                  		;mov	ds:had_format_error, al	; Reset	the flag
 12073 00001100 A2[3106]                		mov	[had_format_error], al
 12074 00001103 EB0E                    		jmp	short PopStatRet
 12075                                  ; ---------------------------------------------------------------------------
 12076                                  
 12077                                  FormaStatErr:
 12078                                  		; 10/12/2022
 12079 00001105 B003                    		mov	al, 3
 12080                                  				
 12081 00001107 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 12082                                  					; Illegal combination =	0Ch
 12083 0000110A 7406                    		jz	short FormatStatIllegalComb
 12084 0000110C 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 12085 0000110F 7402                    		jz	short FormatStatTimeOut
 12086                                  		; 10/12/2022
 12087                                  		;dec	al
 12088                                  		; 18/12/2022
 12089 00001111 48                      		dec	ax
 12090                                  		; al = 2
 12091                                  		;mov	al, 1		; Function not supported.
 12092                                  		;jmp	short PopStatRet
 12093                                  ; ---------------------------------------------------------------------------
 12094                                  
 12095                                  FormatStatIllegalComb:
 12096                                  		; 10/12/2022
 12097                                  		;dec	al	; 3 -> 2 or 2 -> 1
 12098                                  		; 18/12/2022
 12099 00001112 48                      		dec	ax
 12100                                  		; al = 2				
 12101                                  		;mov	al, 2		; Function supported, but
 12102                                  					; Illegal sect/trk,trk combination.
 12103                                  		; 10/12/2022
 12104                                  		;jmp	short PopStatRet
 12105                                  ; ---------------------------------------------------------------------------
 12106                                  
 12107                                  FormatStatTimeOut:			
 12108                                  		; 10/12/2022
 12109                                  		; al = 3
 12110                                  		;mov	al, 3		; Function supported, but
 12111                                  					; Media	not present.
 12112                                  PopStatRet:				
 12113 00001113 5F                      		pop	di
 12114 00001114 5E                      		pop	si
 12115 00001115 1F                      		pop	ds
 12116 00001116 07                      		pop	es
 12117                                  SetMediaRet:				
 12118 00001117 5A                      		pop	dx
 12119 00001118 59                      		pop	cx
 12120 00001119 C3                      		retn
 12121                                  
 12122                                  ; =============== S U B	R O U T	I N E =======================================
 12123                                  
 12124                                  ; 16/10/2022
 12125                                  
 12126                                  ; ---------------------------------------------------------------------------
 12127                                  ;
 12128                                  ; RESET THE DRIVE
 12129                                  ;
 12130                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 12131                                  ; slow head settle time for the next operation. this is because the reset
 12132                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 12133                                  ; time around - there is a problem with 3.5" drives in that the head does
 12134                                  ; not settle down in time,even for read operations!!
 12135                                  ;
 12136                                  ; ---------------------------------------------------------------------------
 12137                                  
 12138                                  ResetDisk:	
 12139 0000111A 50                      		push	ax
 12140 0000111B 803E[3006]01            		cmp	byte [media_set_for_format], 1
 12141                                  					; Reset while formatting?
 12142 00001120 7505                    		jnz	short ResetDisk_cont
 12143                                  					; Then verify operation in "fmt & vrfy"
 12144 00001122 C606[3106]01            		mov	byte [had_format_error], 1 ; Might have failed.
 12145                                  ResetDisk_cont:				
 12146 00001127 30E4                    		xor	ah, ah		; So signals that we had a format error
 12147 00001129 CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 12148                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 12149 0000112B C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 12150                                  					; Zap up the speed
 12151 00001130 58                      		pop	ax
 12152 00001131 C3                      		retn
 12153                                  
 12154                                  ; =============== S U B	R O U T	I N E =======================================
 12155                                  
 12156                                  ; 16/10/2022
 12157                                  
 12158                                  ; ---------------------------------------------------------------------------
 12159                                  ;
 12160                                  ; This routine sets up the drive parameter table with the values needed for
 12161                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 12162                                  ;
 12163                                  ; on entry  -	ES:DI - points to bds for the drive
 12164                                  ;		Xfer_Seg:BX - points to trkbuf
 12165                                  ;		AL    - number of sectors
 12166                                  ;		AH    - int 13 function code
 12167                                  ;		CL    - sector number for verify
 12168                                  ;		DS    - Bios_Data
 12169                                  ;
 12170                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 12171                                  ;		AX and flags are the results of the int 13
 12172                                  ;
 12173                                  ; ---------------------------------------------------------------------------
 12174                                  
 12175                                  		; 19/10/2022
 12176                                  ToRom:	
 12177 00001132 53                      		push	bx
 12178 00001133 56                      		push	si
 12179                                  
 12180                                  		; Compaq bug fix - check whether we are using new ROM
 12181                                  		; functionality to set up format, not merely if it exists.
 12182                                  		; This was formerly a check against [new_rom]
 12183                                  
 12184 00001134 F606[3006]01            		test	byte [media_set_for_format], 1
 12185 00001139 7536                    		jnz	short GotValidDpt
 12186 0000113B 50                      		push	ax
 12187 0000113C 06                      		push	es		; Save bds segment
 12188 0000113D 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 12189                                  					; ffSmall ; is it a 3.5" drive?
 12190 00001142 9C                      		pushf			; (Save	the cmp	result)
 12191 00001143 8E06[1A00]              		mov	es, [zeroseg]
 12192                                  		;les	si, es:78h	; Get pointer to disk base table
 12193 00001147 26C4367800              		les	si, [es:DSKADR]
 12194                                  		;mov	word ptr ds:dpt, si
 12195                                  		;mov	word ptr ds:dpt+2, es ;	 Save pointer to table
 12196 0000114C 8936[2D01]              		mov	[dpt], si
 12197 00001150 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 12198                                  		
 12199 00001154 A0[3701]                		mov	al, [formt_eot]
 12200 00001157 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 12201 0000115B A0[3B01]                		mov	al, [gap_patch]
 12202 0000115E 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 12203                                  					; Important for	format
 12204 00001162 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 12205                                  					; Assume we are	doing a	seek operation
 12206                                  					; Setup	motor start correctly for 3.5" drives
 12207 00001167 9D                      		popf			; Get result of	earlier	cmp
 12208 00001168 7505                    		jnz	short MotorStrtOK
 12209 0000116A 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 12210                                  MotorStrtOK:				
 12211 0000116F 07                      		pop	es		; Restore bds segment
 12212 00001170 58                      		pop	ax
 12213                                  GotValidDpt:				
 12214 00001171 8B16[3901]              		mov	dx, [trknum]	; Set track number
 12215 00001175 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 12216 00001177 268A5504                		mov	dl, [es:di+4]	; Set drive number
 12217 0000117B 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 12218 0000117F 06                      		push	es		; Save bds segment
 12219 00001180 8E06[2F05]              		mov	es, [xfer_seg]
 12220 00001184 CD13                    		int	13h		; DISK -
 12221 00001186 07                      		pop	es		; Restore bds segment
 12222 00001187 5E                      		pop	si
 12223 00001188 5B                      		pop	bx
 12224 00001189 C3                      		retn
 12225                                  
 12226                                  ; ---------------------------------------------------------------------------
 12227                                  
 12228                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12229                                  
 12230                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 12231                                  
 12232                                  ; ==========================================================================
 12233                                  ;
 12234                                  ; get the owner of the physical drive represented by the logical drive in al.
 12235                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 12236                                  ; if this is not the case, the system may hang, just following the linked list.
 12237                                  ;
 12238                                  ; ==========================================================================
 12239                                  
 12240                                  		; 19/10/2022
 12241                                  ioctl_getown:
 12242 0000118A E8E3F3                  		call	SetDrive
 12243 0000118D 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 12244                                  					; Get physical drive number
 12245 00001191 C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 12246                                  ownloop:				
 12247 00001195 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 12248 00001199 7507                    		jnz	short getnextBDS
 12249                                  		; 10/12/2022
 12250 0000119B 26F6452320              		test	byte [es:di+23h], 20h
 12251                                  		;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 12252                                  					; fi_own_physical
 12253 000011A0 7515                    		jnz	short exitown
 12254                                  getnextBDS:				
 12255 000011A2 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 12256 000011A5 EBEE                    		jmp	short ownloop
 12257                                  ; ---------------------------------------------------------------------------
 12258                                  
 12259                                  ; ==========================================================================
 12260                                  ;
 12261                                  ; set the ownership of the physical drive represented by the logical drive
 12262                                  ; in al to al.
 12263                                  ;
 12264                                  ; ==========================================================================
 12265                                  
 12266                                  		; 19/10/2022
 12267                                  ioctl_setown:
 12268 000011A7 E8C6F3                  		call	SetDrive
 12269 000011AA C606[7A00]01            		mov	byte [fsetowner], 1
 12270                                  					; set flag for CheckSingle to look at.
 12271 000011AF E828F7                  		call	checksingle
 12272 000011B2 C606[7A00]00            		mov	byte [fsetowner], 0
 12273                                  					; set ownership	of drive reset flag
 12274                                  		; Fall into ExitOwn
 12275                                  
 12276                                  ; ==========================================================================
 12277                                  ;
 12278                                  ; if there is only one logical drive assigned to this physical drive, return
 12279                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 12280                                  ;
 12281                                  ; ==========================================================================
 12282                                  
 12283                                  exitown:				
 12284 000011B7 30C9                    		xor	cl, cl
 12285                                  		; 12/12/2022
 12286 000011B9 26F6452310              		test	byte [es:di+23h], 10h
 12287                                  		;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 12288                                  					; fi_am_mult
 12289 000011BE 7406                    		jz	short exitnomult
 12290 000011C0 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 12291                                  					; Get logical drive number
 12292                                  					; Get it 1-based
 12293 000011C4 FEC1                    		inc	cl
 12294                                  exitnomult:				
 12295 000011C6 C51E[1200]              		lds	bx, [ptrsav]
 12296 000011CA 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 12297                                  					; Exit normal termination
 12298                                  		; 12/12/2022
 12299                                  		; cf=0
 12300                                  		;clc
 12301 000011CD C3                      		retn
 12302                                  
 12303                                  ; =============== S U B	R O U T	I N E =======================================
 12304                                  
 12305                                  ; 16/10/2022
 12306                                  
 12307                                  ; ---------------------------------------------------------------------------
 12308                                  ;
 12309                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 12310                                  ; only if the first byte of TempDpt is not -1.
 12311                                  ; all registers (including flags) are preserved.
 12312                                  ;
 12313                                  ; ---------------------------------------------------------------------------
 12314                                  
 12315                                  		; 19/10/2022
 12316                                  RestoreOldDpt:
 12317                                  		; if we have already restored the disk base table earlier,
 12318                                  		; do not do it again.
 12319                                  	
 12320 000011CE 50                      		push	ax
 12321 000011CF 30C0                    		xor	al, al
 12322 000011D1 A2[3106]                		mov	[had_format_error], al	; Reset flag and 
 12323 000011D4 8606[3006]              		xchg	al, [media_set_for_format] ; get current flag setting
 12324 000011D8 08C0                    		or	al, al
 12325 000011DA 741E                    		jz	short DontRestore
 12326 000011DC 56                      		push	si
 12327 000011DD 1E                      		push	ds
 12328 000011DE 06                      		push	es
 12329 000011DF C536[3206]              		lds	si, [tempdpt]
 12330                                  
 12331                                  		; 17/10/2022
 12332 000011E3 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 12333                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12334 000011E8 268E06[1A00]            		mov	es, [es:zeroseg]
 12335                                  		;mov	es, es:zeroseg	; CAS -- bleeeech!
 12336                                  
 12337                                  		;mov	es:78h,	si	; [es:DSKADR]
 12338 000011ED 2689367800              		mov	[es:DSKADR], si
 12339                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 12340 000011F2 268C1E7A00              		mov	[es:DSKADR+2], ds
 12341 000011F7 07                      		pop	es
 12342 000011F8 1F                      		pop	ds
 12343 000011F9 5E                      		pop	si
 12344                                  DontRestore:				
 12345 000011FA 58                      		pop	ax
 12346                                  		; 12/12/2022
 12347                                  		; cf=0
 12348                                  		;clc			;  Clear carry
 12349 000011FB C3                      		retn
 12350                                  
 12351                                  ; ---------------------------------------------------------------------------
 12352                                  
 12353                                  ; 16/10/2022
 12354                                  
 12355                                  ; ==========================================================================
 12356                                  ;	get media id
 12357                                  ; ==========================================================================
 12358                                  ;
 12359                                  ; FUNCTION: get the volume label,the system id and the serial number from
 12360                                  ;	    the media that has the extended boot record.
 12361                                  ;	    for the conventional media,this routine will return "unknown
 12362                                  ;	    media type" error to dos.
 12363                                  ;
 12364                                  ; INPUT :   ES:di -> bds table for this drive.
 12365                                  ;
 12366                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 12367                                  ;	    if carry set,then al contains the device driver error number
 12368                                  ;	    that will be returned to dos.
 12369                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 12370                                  ;
 12371                                  ; SUBROUTINES TO BE CALLED:
 12372                                  ;	BootIo:NEAR
 12373                                  ;
 12374                                  ; LOGIC:
 12375                                  ;	to recognize the extended boot record,this logic will actually
 12376                                  ;	access the boot sector even if it is a hard disk.
 12377                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 12378                                  ;	field of bpb and the extended boot signature.
 12379                                  ;
 12380                                  ; {
 12381                                  ;	get logical drive number from bds table;
 12382                                  ;	rFlag = read operation;
 12383                                  ;	BootIo;		 /*get the media boot record into the buffer
 12384                                  ;	if (no error) then
 12385                                  ;	     if (extended boot record) then
 12386                                  ;		{ set volume label,volume serial number and system id
 12387                                  ;		  of the request packet to those of the boot record;
 12388                                  ;		};
 12389                                  ;	     else		  /*not an extended bpb */
 12390                                  ;		{ set register al to "unknown media.." error code;
 12391                                  ;		  set carry bit;
 12392                                  ;		};
 12393                                  ;	else
 12394                                  ;	     ret;	/*already error code is set in the register al
 12395                                  ;
 12396                                  ; ==========================================================================
 12397                                  
 12398                                  ;size_of_EXT_BOOT_SERIAL equ 4
 12399                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 12400                                  ;;size_of_EXT_SYSTEM_ID equ 8
 12401                                  
 12402                                  		; 19/10/2022
 12403                                  GetMediaId:
 12404 000011FC E89F00                  		call	ChangeLineChk
 12405 000011FF 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 12406 00001203 C606[2001]02            		mov	byte [rflag], 2	; Read operation
 12407 00001208 E87B00                  		call	BootIo		; Read boot sector into	DiskSector
 12408 0000120B 7224                    		jb	short IOCtl_If1
 12409                                  					; Valid? (0F0h-0FFh?)
 12410 0000120D 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12411                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12412 00001212 721A                    		jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 12413                                  		; 10/12/2022
 12414 00001214 BE[7401]                		mov	si, disksector+26h
 12415 00001217 803C29                  		cmp	byte [si], 29h
 12416                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12417                                  					; EXT_BOOT_SIGNATURE
 12418 0000121A 7512                    		jnz	short IOCtl_If2	; not extended boot record
 12419 0000121C C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 12420 00001220 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12421                                  		; 10/12/2022
 12422 00001224 46                      		inc	si
 12423                                  		; si = disksector+27h 
 12424                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12425 00001225 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12426 00001228 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12427                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 12428                                  					; +size_of_EXT_SYSTEM_ID
 12429 0000122B F3A4                    		rep movsb		; Move from Bios_Data into request packet
 12430                                  	
 12431                                  		; 10/12/2022
 12432                                  		; cf = 0
 12433                                  		;clc
 12434                                  
 12435 0000122D C3                      		retn
 12436                                  ; ---------------------------------------------------------------------------
 12437                                  
 12438                                  IOCtl_If2:				
 12439 0000122E B007                    		mov	al, 7		; error_unknown_media
 12440 00001230 F9                      		stc
 12441                                  IOCtl_If1:				
 12442 00001231 C3                      		retn
 12443                                  ; ---------------------------------------------------------------------------
 12444                                  
 12445                                  ; 16/10/2022
 12446                                  
 12447                                  ; ==========================================================================
 12448                                  ;  set media id
 12449                                  ; ==========================================================================
 12450                                  
 12451                                  ; function: set the volume label, the system id and the serial number of
 12452                                  ;	    the media that has the extended boot record.
 12453                                  ;	    for the conventional media, this routine will return "unknown
 12454                                  ;	    media.." error to dos.
 12455                                  ;	    this routine will also set the corresponding informations in
 12456                                  ;	    the bds table.
 12457                                  ;
 12458                                  ; input :   ES:di -> bds table for this drive.
 12459                                  ;
 12460                                  ; output:   the extended boot record in the media will be set according to
 12461                                  ;	    the request packet.
 12462                                  ;	    if carry set, then al contains the device driver error number
 12463                                  ;	    that will be returned to dos.
 12464                                  ;
 12465                                  ; subroutines to be called:
 12466                                  ;	BootIo:NEAR
 12467                                  ;
 12468                                  ; logic:
 12469                                  ;
 12470                                  ; {
 12471                                  ;	get drive_number from bds;
 12472                                  ;	rFlag = "read operation";
 12473                                  ;	BootIo;
 12474                                  ;	if (no error) then
 12475                                  ;	     if (extended boot record) then
 12476                                  ;		{ set volume label,volume serial number and system id
 12477                                  ;		  of the boot record to those of the request packet;
 12478                                  ;		  rFlag = "write operation";
 12479                                  ;		  get drive number from bds;
 12480                                  ;		  BootIo;	  /*write it back*/
 12481                                  ;		};
 12482                                  ;	     else		  /*not an extended bpb */
 12483                                  ;		{ set register al to "unknown media.." error code;
 12484                                  ;		  set carry bit;
 12485                                  ;		  ret;	 /*return back to caller */
 12486                                  ;		};
 12487                                  ;	else
 12488                                  ;	     ret;		 /*already error code is set */
 12489                                  ;
 12490                                  ; ==========================================================================
 12491                                  
 12492                                  		; 19/10/2022
 12493                                  SetMediaId:
 12494 00001232 E86900                  		call	ChangeLineChk
 12495 00001235 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 12496                                  					; Logical drive	number
 12497 00001239 88C2                    		mov	dl, al
 12498 0000123B C606[2001]02            		mov	byte [rflag], 2	; romread
 12499 00001240 52                      		push	dx
 12500 00001241 E84200                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 12501 00001244 5A                      		pop	dx
 12502 00001245 723E                    		jb	short IOCtl_If6
 12503                                  					; Valid? (0F0h-0FFh?)
 12504 00001247 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12505                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12506 0000124C 7234                    		jb	short IOCtl_If7	; Brif not
 12507 0000124E 803E[7401]29            		cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12508                                  					; EXT_BOOT_SIGNATURE
 12509 00001253 752D                    		jnz	short IOCtl_If7	; not extended boot record
 12510 00001255 06                      		push	es		; Save BDS pointer
 12511 00001256 57                      		push	di
 12512 00001257 1E                      		push	ds		; Point	ES To boot record
 12513 00001258 07                      		pop	es
 12514 00001259 BF[7501]                		mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12515 0000125C C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 12516 00001260 C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 12517 00001263 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12518 00001266 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12519                                  					; +size_of_EXT_BOOT_VOL_LABEL
 12520                                  					; +size_of_EXT_SYSTEM_ID
 12521 00001269 F3A4                    		rep movsb
 12522 0000126B 06                      		push	es		; point	ds back	to Bios_Data
 12523 0000126C 1F                      		pop	ds
 12524 0000126D 5F                      		pop	di		; restore bds pointer
 12525 0000126E 07                      		pop	es
 12526 0000126F E864F5                  		call	mov_media_ids	; update the bds media id info.
 12527 00001272 88D0                    		mov	al, dl
 12528 00001274 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 12529 00001279 E80A00                  		call	BootIo		; write	it back.
 12530 0000127C C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 12531                                  					; make sure chk_media check the driver
 12532                                  					; return with error code from BootIo
 12533 00001281 C3                      		retn
 12534                                  ; ---------------------------------------------------------------------------
 12535                                  
 12536                                  IOCtl_If7:				
 12537 00001282 B007                    		mov	al, 7		; error_unknown_media
 12538 00001284 F9                      		stc
 12539                                  IOCtl_If6:				
 12540 00001285 C3                      		retn
 12541                                  
 12542                                  ; =============== S U B	R O U T	I N E =======================================
 12543                                  
 12544                                  ; 16/10/2022
 12545                                  
 12546                                  ; ---------------------------------------------------------------------------
 12547                                  ;	BootIo
 12548                                  ; ---------------------------------------------------------------------------
 12549                                  ;
 12550                                  ; function: read/write the boot record into boot sector.
 12551                                  ;
 12552                                  ; input :
 12553                                  ;	    al=logical drive number
 12554                                  ;	    rFlag = operation (read/write)
 12555                                  ;
 12556                                  ; output:   for read operation,the boot record of the drive specified in bds
 12557                                  ;	    be read into the DiskSector buffer.
 12558                                  ;	    for write operation,the DiskSector buffer image will be written
 12559                                  ;	    to the drive specified in bds.
 12560                                  ;	    if carry set,then al contains the device driver error number
 12561                                  ;	    that will be returned to dos.
 12562                                  ;	    AX,CX,DX register destroyed.
 12563                                  ;	    if carry set,then al will contain the error code from DiskIO.
 12564                                  ;
 12565                                  ; subroutines to be called:
 12566                                  ;	DiskIO:NEAR
 12567                                  ;
 12568                                  ; logic:
 12569                                  ;
 12570                                  ; {
 12571                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 12572                                  ;	sectorcount = 1;	 /*read 1 sector only */
 12573                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 12574                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 12575                                  ; }
 12576                                  ; ==========================================================================
 12577                                  
 12578                                  		; 19/10/2022
 12579                                  BootIo:	
 12580 00001286 06                      		push	es
 12581 00001287 57                      		push	di
 12582 00001288 53                      		push	bx
 12583 00001289 1E                      		push	ds
 12584 0000128A 07                      		pop	es		; Point ES: to Bios_Data
 12585                                  
 12586                                  		; Call DiskIO to read/write the boot sec. The parameters which
 12587                                  		; need to be initialized for this subroutine out here are
 12588                                  		; - Transfer address to Bios_Data:DiskSector
 12589                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 12590                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 12591                                  		; - Number of sectors <-- 1
 12592                                  
 12593 0000128B BF[4E01]                		mov	di, disksector	; es:di -> transfer address
 12594 0000128E 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 12595 00001290 8916[2305]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 12596 00001294 B90100                  		mov	cx, 1
 12597 00001297 E8CEF6                  		call	diskio
 12598 0000129A 5B                      		pop	bx
 12599 0000129B 5F                      		pop	di
 12600 0000129C 07                      		pop	es
 12601 0000129D C3                      		retn
 12602                                  
 12603                                  ; =============== S U B	R O U T	I N E =======================================
 12604                                  
 12605                                  ; 16/10/2022
 12606                                  
 12607                                  ; ---------------------------------------------------------------------------
 12608                                  ;	ChangeLineChk
 12609                                  ; ---------------------------------------------------------------------------
 12610                                  ;
 12611                                  ; when the user calls get/set media id call before dos establishes the media
 12612                                  ; by calling "media_chk",the change line activity of the drive is going to be
 12613                                  ; lost.	this routine will check the change line activity and will save the
 12614                                  ; history in the flags.
 12615                                  ;
 12616                                  ; FUNCTION: check the change line error activity
 12617                                  ;
 12618                                  ; INPUT :  ES:di -> bds table.
 12619                                  ;
 12620                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 12621                                  ;
 12622                                  ; SUBROUTINES TO BE CALLED:
 12623                                  ;	Set_Changed_DL
 12624                                  ;
 12625                                  ; ---------------------------------------------------------------------------
 12626                                  
 12627                                  ChangeLineChk:	
 12628 0000129E 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12629 000012A2 08D2                    		or	dl, dl		; Fixed	disk?
 12630 000012A4 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 12631                                  		; 12/12/2022
 12632 000012A6 26F6452304              		test	byte [es:di+23h], 4
 12633                                  		;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 12634                                  					; return_fake_bpb
 12635 000012AB 751A                    		jnz	short ChangeLnChkRet
 12636 000012AD 803E[7700]01            		cmp	byte [fhave96], 1	; This rom support change line?
 12637 000012B2 7513                    		jnz	short ChangeLnChkRet
 12638 000012B4 E80507                  		call	haschange	; This drive support change line?
 12639 000012B7 740E                    		jz	short ChangeLnChkRet ; Do nothing
 12640                                  
 12641                                  		; Execute the rom disk interrupt to check changeline activity.
 12642                                  
 12643 000012B9 B416                    		mov	ah, 16h
 12644 000012BB CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 12645                                  					; DL = drive to	check
 12646                                  					; Return: AH = disk change status
 12647 000012BD 7308                    		jnb	short ChangeLnChkRet
 12648 000012BF 53                      		push	bx
 12649 000012C0 BB4000                  		mov	bx, 40h		; fchanged
 12650                                  					; Update flag in BDS for this
 12651                                  					; physical drive
 12652 000012C3 E8CF06                  		call	set_changed_dl
 12653 000012C6 5B                      		pop	bx
 12654                                  ChangeLnChkRet:				
 12655 000012C7 C3                      		retn
 12656                                  
 12657                                  ; ---------------------------------------------------------------------------
 12658                                  
 12659                                  ; 16/10/2022
 12660                                  
 12661                                  ; ==========================================================================
 12662                                  ;	GetAccessFlag
 12663                                  ; ==========================================================================
 12664                                  ;
 12665                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 12666                                  ;
 12667                                  ; INPUT :
 12668                                  ;	    ES:di -> bds table
 12669                                  ;
 12670                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 12671                                  ;						 = 1 if disk i/o allowed.
 12672                                  ; ==========================================================================
 12673                                  
 12674                                  		; 19/10/2022
 12675                                  GetAccessFlag:				
 12676 000012C8 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 12677 000012CC C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12678                                  		;mov	al, 0		; Assume result	is unformatted
 12679                                  		; 10/12/2022
 12680 000012CF 28C0                    		sub	al, al
 12681                                  		; 10/12/2022
 12682 000012D1 26F6452402              		test	byte [es:di+36], 02h
 12683                                  		;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 12684                                  					; unformatted_media
 12685 000012D6 7502                    		jnz	short GafDone	; Done if unformatted
 12686 000012D8 FEC0                    		inc	al		; Return true for formatted
 12687                                  
 12688                                  GafDone:				
 12689 000012DA 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12690 000012DD C3                      		retn
 12691                                  ; ---------------------------------------------------------------------------
 12692                                  
 12693                                  ; 16/10/2022
 12694                                  
 12695                                  ; ==========================================================================
 12696                                  ;	SetAccessFlag
 12697                                  ; ==========================================================================
 12698                                  ;
 12699                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 12700                                  ;
 12701                                  ; input :
 12702                                  ;	    ES:di -> bds table
 12703                                  ;
 12704                                  ; output:   unformtted_media bit modified according to the user request
 12705                                  ; ==========================================================================
 12706                                  
 12707                                  		; 19/10/2022
 12708                                  SetAccessFlag:				
 12709 000012DE C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 12710 000012E2 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12711                                  		; 10/12/2022
 12712 000012E5 26806524FD              		and	byte [es:di+36], 0FDh
 12713                                  		;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 12714                                  					; ~unformatted_media
 12715 000012EA 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12716 000012EE 7505                    		jnz	short saf_Done
 12717                                  		; 10/12/2022
 12718 000012F0 26804D2402              		or	byte [es:di+36], 02h
 12719                                  		;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 12720                                  					; unformatted_media
 12721                                  saf_Done:				
 12722 000012F5 C3                      		retn
 12723                                  ; ---------------------------------------------------------------------------
 12724                                  
 12725                                  ; 16/10/2022
 12726                                  
 12727                                  ; ==========================================================================
 12728                                  ; Ioctl_Support_Query
 12729                                  ; ==========================================================================
 12730                                  ;
 12731                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 12732                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 12733                                  ; device attributes specifies if this function is supported.
 12734                                  ;
 12735                                  ; ==========================================================================
 12736                                  
 12737                                  		; 19/10/2022
 12738                                  ioctl_support_query:
 12739 000012F6 06                      		push	es
 12740 000012F7 C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 12741 000012FB 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 12742                                  					; AL ==	Major, AH == Minor
 12743 000012FF 3C08                    		cmp	al, 8		; IOC_DC
 12744                                  					; See if major code is 8
 12745 00001301 7513                    		jnz	short nosupport
 12746 00001303 0E                      		push	cs
 12747 00001304 07                      		pop	es
 12748 00001305 B90B00                  		mov	cx, 11		; IOC_DC_TABLE_LEN
 12749                                  		; 10/12/2022
 12750 00001308 BF[D90C]                		mov	di, IOC_DC_Table
 12751                                  		;mov	di, 0C60h	; IOC_DC_Table
 12752                                  					; at 2C7h:0C60h	= 70h:31D0h
 12753 0000130B 86C4                    		xchg	al, ah		; Put minor code in AL
 12754 0000130D F2AE                    		repne scasb		; Scan for minor code in AL
 12755 0000130F 7505                    		jnz	short nosupport	; it was not found
 12756 00001311 B80001                  		mov	ax, 100h
 12757                                  		; 10/12/2022
 12758                                  		; (jump to ioctlsupexit is not required)
 12759                                  		;jmp	short $+2	; ioctlsupexit
 12760                                  					; Signal ioctl is supported
 12761                                  		;;jmp	short ioctlsupexit
 12762                                  ; ---------------------------------------------------------------------------
 12763                                  ioctlsupexit:				
 12764 00001314 07                      		pop	es
 12765                                  		; 10/12/2022
 12766                                  		; cf = 0
 12767                                  		;clc
 12768 00001315 C3                      		retn
 12769                                  ; ---------------------------------------------------------------------------
 12770                                  nosupport:				
 12771 00001316 07                      		pop	es
 12772 00001317 E9BFED                  		jmp	bc_cmderr
 12773                                  ; ---------------------------------------------------------------------------
 12774                                  
 12775                                  ; 16/10/2022
 12776                                  
 12777                                  ; ==========================================================================
 12778                                  ;	GetMediaSenseStatus
 12779                                  ; ==========================================================================
 12780                                  ;
 12781                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 12782                                  ;	    diskette drive and whether the media is the default type
 12783                                  ;	    for that drive. (default type means the max size for that
 12784                                  ;	    drive)
 12785                                  ;
 12786                                  ; INPUT :   ES:DI -> BDS table
 12787                                  ; OUTPUT:   If carry clear
 12788                                  ;	    DS:BX -> Updated IOCtlPacket
 12789                                  ;
 12790                                  ;			 Special Function at offset 0:
 12791                                  ;				0	- Media detected is not default type
 12792                                  ;				1	- Media detected is default type
 12793                                  ;
 12794                                  ;			 Device Type at offset 1:
 12795                                  ;				2       - 720K 3.5" 80 tracks
 12796                                  ;				7	- 1.44M 3.5" 80 tracks
 12797                                  ;				9	- 2.88M 3.5" 80 tracks
 12798                                  ;
 12799                                  ; Error Codes returned in AX if carry set:
 12800                                  ;
 12801                                  ; 8102 - Drive not ready	- No disk is in the drive.
 12802                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 12803                                  ;				  the media is really unkown, any error
 12804                                  ;				  other than "media not present"
 12805                                  ; 
 12806                                  ; ==========================================================================
 12807                                  
 12808                                  		; 19/10/2022
 12809                                  SenseMediaType:				
 12810 0000131A C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 12811 0000131E C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12812                                  		; 10/10/2022
 12813                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 12814 00001321 31D2                    		xor	dx, dx
 12815 00001323 8917                    		mov	[bx], dx ; 0
 12816                                  		;
 12817 00001325 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12818                                  					; Get int 13h drive number from	BDS
 12819                                  		; 10/12/2022
 12820                                  		;xor	dh, dh		; DX = physical	drive number
 12821 00001329 B420                    		mov	ah, 20h		; Get Media Type function
 12822                                  					; If no	carry media type in AL
 12823 0000132B CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 12824 0000132D 7216                    		jb	short MediaSenseEr ; error code	in AH
 12825 0000132F FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 12826                                  DetermineMediaType:			
 12827 00001331 FEC8                    		dec	al
 12828 00001333 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 12829 00001335 740A                    		jz	short GotMediaType
 12830 00001337 0404                    		add	al, 4
 12831 00001339 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 12832 0000133B 7404                    		jz	short GotMediaType
 12833 0000133D 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 12834 0000133F 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 12835                                  GotMediaType:				
 12836 00001341 884701                  		mov	[bx+1],	al	; Save the return value
 12837                                  		; 10/12/2022
 12838                                  		; cf = 0
 12839                                  		;clc			; Signal success
 12840 00001344 C3                      		retn
 12841                                  ; ---------------------------------------------------------------------------
 12842                                  
 12843                                  MediaSenseEr:				
 12844 00001345 80FC32                  		cmp	ah, 32h		; See if not default media error
 12845 00001348 74E7                    		jz	short DetermineMediaType ; Not really an error
 12846 0000134A B002                    		mov	al, 2		; Now assume drive not ready
 12847 0000134C 80FC31                  		cmp	ah, 31h		; See if media was present
 12848 0000134F 7402                    		jz	short SenseErrExit ; Return drive not ready
 12849                                  UnknownMediaType:			
 12850 00001351 B007                    		mov	al, 7		; Just don't know the media type
 12851                                  SenseErrExit:				
 12852 00001353 B481                    		mov	ah, 81h		; Signal error return
 12853 00001355 F9                      		stc
 12854 00001356 C3                      		retn
 12855                                  
 12856                                  ; ---------------------------------------------------------------------------
 12857                                  		; 10/12/2022
 12858                                  		;db    0
 12859                                  ; ---------------------------------------------------------------------------
 12860                                  
 12861                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12862                                  
 12863                                  ;-----------------------------------------------------------------------------
 12864                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 12865                                  ;-----------------------------------------------------------------------------
 12866                                  ; 16/03/2019 - Retro DOS v4.0
 12867                                  
 12868                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 12869                                  ;	after booting. this allows testing and implementation of custom int_13
 12870                                  ;	handlers, without giving up ms-dos error recovery
 12871                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 12872                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 12873                                  ;	exit:	orig13	== address of new int_13 handler
 12874                                  ;		ds:dx	== old orig13 value
 12875                                  ;		es:bx	== old old13  value
 12876                                  ;
 12877                                  ; int 2f handler for external block drivers to communicate with the internal
 12878                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 12879                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 12880                                  ; dsk_entry, the entry point for all disk requests.
 12881                                  ;
 12882                                  ; on exit from this driver, we will return to the external driver
 12883                                  ; that issued this int 2f, and can then remove the flags from the stack.
 12884                                  ; this scheme allows us to have a small external device driver, and makes
 12885                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 12886                                  ; since we only need to make changes in one place (most of the time).
 12887                                  ;
 12888                                  ;   ax=800h - check for installed handler - reserved
 12889                                  ;   ax=801h - install the bds into the linked list
 12890                                  ;   ax=802h - dos request
 12891                                  ;   ax=803h - return bds table starting pointer in ds:di
 12892                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 12893                                  ;	    problem. bds table is going to be used to get head/sector
 12894                                  ;	    informations without calling generic ioctl get device parm call.)
 12895                                  
 12896                                  ;BIOSSEGMENT equ 70h
 12897                                  DOSBIOSSEG equ 0070h ; 17/10/2022	
 12898                                  
 12899                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 12900                                  
 12901                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 12902 00001357 80FC13                  		cmp	ah, 13h
 12903 0000135A 7413                    		jz	short int2f_replace_int13
 12904 0000135C 80FC08                  		cmp	ah, 8
 12905 0000135F 743B                    		jz	short mine
 12906                                  
 12907                                  ; Check for WIN386 startup and return the BIOS instance data
 12908                                  
 12909 00001361 80FC16                  		cmp	ah, 16h		; MultWin386
 12910 00001364 7479                    		jz	short win386call
 12911 00001366 80FC4A                  		cmp	ah, 4Ah		; multMULT
 12912 00001369 7503                    		jnz	short i2f_handler_iret
 12913 0000136B E9A500                  		jmp	handle_multmult
 12914                                  ; ---------------------------------------------------------------------------
 12915                                  
 12916                                  i2f_handler_iret:			
 12917 0000136E CF                      		iret
 12918                                  ; ---------------------------------------------------------------------------
 12919                                  
 12920                                  int2f_replace_int13:			
 12921 0000136F 50                      		push	ax	; free up a register for caller's ds
 12922 00001370 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 12923                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 12924                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 12925                                  					; = [02C7h:0030h] = [0070h:25A0h]
 12926 00001372 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 12927                                  		; 19/10/2022
 12928                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 12929                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 12930                                  		;push	word ptr ds:Old13	; return them to caller
 12931                                  		;push	word ptr ds:Old13+2
 12932 00001377 FF36[B400]              		push	word [Orig13]
 12933 0000137B FF36[B600]              		push	word [Orig13+2]
 12934 0000137F FF36[0601]              		push	word [Old13]
 12935 00001383 FF36[0801]              		push	word [Old13+2]
 12936                                  
 12937                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 12938                                  		;mov	word ptr ds:Orig13+2, ax
 12939                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 12940                                  		;mov	word ptr ds:Old13+2, es
 12941 00001387 8916[B400]              		mov	[Orig13], dx
 12942 0000138B A3[B600]                		mov	[Orig13+2], ax
 12943 0000138E 891E[0601]              		mov	[Old13], bx
 12944 00001392 8C06[0801]              		mov	[Old13+2], es
 12945                                  
 12946 00001396 07                      		pop	es			; es:bx := old old13 vector
 12947 00001397 5B                      		pop	bx
 12948 00001398 1F                      		pop	ds			; ds:dx := old orig13 vector
 12949 00001399 5A                      		pop	dx
 12950 0000139A 58                      		pop	ax
 12951                                  i2f_iret:				
 12952 0000139B CF                      		iret
 12953                                  ; ---------------------------------------------------------------------------
 12954                                  
 12955                                  mine:
 12956 0000139C 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 12957 0000139E 73FB                    		jnb	short i2f_iret
 12958 000013A0 08C0                    		or	al, al			; a get installed state request?
 12959 000013A2 7504                    		jnz	short disp_func
 12960 000013A4 B0FF                    		mov	al, 0FFh
 12961 000013A6 EBF3                    		jmp	short i2f_iret
 12962                                  ; ---------------------------------------------------------------------------
 12963                                  
 12964                                  disp_func:
 12965 000013A8 3C01                    		cmp	al, 1			; request for installing bds?
 12966 000013AA 7418                    		jz	short do_subfun_01
 12967 000013AC 3C03                    		cmp	al, 3			; get bds vector?
 12968 000013AE 7424                    		jz	short do_get_bds_vector
 12969                                  
 12970                                  ; set up pointer to request packet
 12971                                  
 12972 000013B0 1E                      		push	ds
 12973 000013B1 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022	
 12974                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12975                                  					; = [0070h:25A0h] = [02C7h:0030h]
 12976                                  		; 19/10/2022
 12977                                  		;mov	word ptr ds:ptrsav, bx
 12978                                  		;mov	word ptr ds:ptrsav+2, es
 12979 000013B6 891E[1200]              		mov	[ptrsav], bx
 12980 000013BA 8C06[1400]              		mov	[ptrsav+2], es
 12981 000013BE 1F                      		pop	ds
 12982                                  		;jmp	far ptr	i2f_dskentry
 12983                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 12984                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1708h
 12985 000013BF EA[1907]7000            		jmp	DOSBIOSSEG:dsk_entry ; BIOSDATA:dsk_entry
 12986                                  		;; 17/10/2022
 12987                                  		;;jmp	far DOSBIOSSEG:dsk_entry		
 12988                                  		;jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 12989                                  					; NOTE: jump to a FAR function, not an
 12990                                  					;  IRET type function. Callers of
 12991                                  					;  this int2f subfunction will have
 12992                                  					;  to be careful to do a popf
 12993                                  
 12994                                  ; ---------------------------------------------------------------------------
 12995                                  
 12996                                  do_subfun_01:				
 12997 000013C4 06                      		push	es
 12998 000013C5 1E                      		push	ds
 12999 000013C6 1E                      		push	ds
 13000 000013C7 07                      		pop	es
 13001                                  		; 17/10/2022
 13002 000013C8 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]	
 13003                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13004                                  					; point	ds: -> Bios_Data
 13005 000013CD E8C303                  		call	install_bds
 13006 000013D0 1F                      		pop	ds
 13007 000013D1 07                      		pop	es
 13008 000013D2 EBC7                    		jmp	short i2f_iret
 13009                                  ; ---------------------------------------------------------------------------
 13010                                  
 13011                                  do_get_bds_vector:
 13012                                  		; 17/10/2022
 13013 000013D4 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]			
 13014                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13015 000013D9 C53E[1901]              		lds	di, [start_bds]
 13016                                  		;lds	di, ds:start_bds
 13017                                  ;ii2f_iret:	; 10/12/2022				
 13018 000013DD EBBC                    		jmp	short i2f_iret
 13019                                  ; ---------------------------------------------------------------------------
 13020                                  
 13021                                  ; 17/10/2022
 13022                                  ; 16/10/2022
 13023                                  
 13024                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 13025                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 13026                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 13027                                  
 13028                                  win386call:				
 13029 000013DF 1E                      		push	ds
 13030 000013E0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13031                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13032                                  					; at 2C7h:30h =	70h:25A0h
 13033 000013E5 3C05                    		cmp	al, 5		; Win386_Init
 13034                                  					; is it	win386 initializing?
 13035 000013E7 7410                    		jz	short Win386Init
 13036 000013E9 3C06                    		cmp	al, 6		; Win386_Exit
 13037                                  					; is it	win386 exiting?
 13038 000013EB 7523                    		jnz	short win_iret	; if not, continue int2f chain
 13039                                  		; 12/12/2022
 13040 000013ED F6C201                  		test	dl, 1
 13041                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 13042 000013F0 751E                    		jnz	short win_iret	; if not win386, then continue
 13043                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 13044 000013F2 8026[6F08]00            		and	byte [IsWin386], 0 
 13045 000013F7 EB17                    		jmp	short win_iret
 13046                                  ; ---------------------------------------------------------------------------
 13047                                  
 13048                                  Win386Init:	
 13049                                  		; 12/12/2022
 13050 000013F9 F6C201                  		test	dl, 1			
 13051                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 13052 000013FC 7512                    		jnz	short win_iret	; if not win386, then continue
 13053                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 13054 000013FE 800E[6F08]01            		or	byte [IsWin386], 1
 13055                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 13056                                  		;mov	word ptr ds:SI_Next+2, es
 13057 00001403 891E[3D08]              		mov	[SI_Next], bx
 13058 00001407 8C06[3F08]              		mov	[SI_Next+2], es
 13059                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 13060 0000140B BB[3B08]                		mov	bx, Win386_SI	; 19/10/2022
 13061 0000140E 1E                      		push	ds
 13062 0000140F 07                      		pop	es
 13063                                  win_iret:				
 13064 00001410 1F                      		pop	ds
 13065                                  ii2f_iret:	; 10/12/2022	
 13066 00001411 EB88                    		jmp	short i2f_iret	; return back up the chain
 13067                                  ; ---------------------------------------------------------------------------
 13068                                  
 13069                                  handle_multmult:			
 13070 00001413 3C01                    		cmp	al, 1
 13071 00001415 7515                    		jnz	short try_2
 13072 00001417 1E                      		push	ds
 13073 00001418 E84700                  		call	HMAPtr		; get offset of free HMA
 13074                                  		; 10/12/2022
 13075                                  		;xor	bx, bx
 13076                                  		;dec	bx
 13077 0000141B BBFFFF                  		mov	bx, 0FFFFh
 13078 0000141E 8EC3                    		mov	es, bx		; seg of HMA
 13079 00001420 89FB                    		mov	bx, di
 13080 00001422 F7D3                    		not	bx
 13081 00001424 09DB                    		or	bx, bx
 13082 00001426 7401                    		jz	short try_1
 13083 00001428 43                      		inc	bx
 13084                                  try_1:					
 13085 00001429 1F                      		pop	ds
 13086 0000142A EBE5                    		jmp	short ii2f_iret
 13087                                  ; ---------------------------------------------------------------------------
 13088                                  
 13089                                  try_2:					
 13090 0000142C 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 13091 0000142E 7530                    		jnz	short try_3
 13092 00001430 1E                      		push	ds
 13093                                  		; 10/12/2022
 13094                                  		;xor	di, di
 13095                                  		;dec	di
 13096 00001431 BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 13097 00001434 8EC7                    		mov	es, di
 13098 00001436 E82900                  		call	HMAPtr		; get offset of free HMA
 13099 00001439 83FFFF                  		cmp	di, 0FFFFh
 13100 0000143C 7421                    		jz	short InsuffHMA
 13101 0000143E F7DF                    		neg	di		; free space in HMA
 13102 00001440 39FB                    		cmp	bx, di
 13103 00001442 7605                    		jbe	short try_4
 13104                                  		; 10/12/2022
 13105                                  		;sub	di, di
 13106                                  		;dec	di
 13107 00001444 BFFFFF                  		mov	di, 0FFFFh
 13108 00001447 EB16                    		jmp	short InsuffHMA
 13109                                  ; ---------------------------------------------------------------------------
 13110                                  
 13111                                  try_4:					
 13112                                  		;mov	di, ds:FreeHMAPtr
 13113 00001449 8B3E[9608]              		mov	di, [FreeHMAPtr]
 13114 0000144D 83C30F                  		add	bx, 15
 13115                                  		;and	bx, 0FFF0h
 13116                                  		; 10/12/2022
 13117 00001450 80E3F0                  		and	bl, 0F0h
 13118                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer	
 13119 00001453 011E[9608]              		add	[FreeHMAPtr], bx
 13120 00001457 7506                    		jnz	short InsuffHMA
 13121 00001459 C706[9608]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 13122                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 13123                                  					; no more HMA if we have wrapped
 13124                                  InsuffHMA:				
 13125 0000145F 1F                      		pop	ds
 13126                                  		; 10/12/2022
 13127                                  try_3:		
 13128 00001460 EBAF                    		jmp	short ii2f_iret
 13129                                  ; ---------------------------------------------------------------------------
 13130                                  
 13131                                  		; 10/12/2022
 13132                                  ;try_3:					
 13133                                  		;jmp	ii2f_iret
 13134                                  
 13135                                  ; =============== S U B	R O U T	I N E =======================================
 13136                                  
 13137                                  ; 16/10/2022
 13138                                  
 13139                                  ;--------------------------------------------------------------------------
 13140                                  ;
 13141                                  ; procedure : HMAPtr
 13142                                  ;
 13143                                  ;		Gets the offset of the free HMA area ( with respect to
 13144                                  ;							seg ffff )
 13145                                  ;		If DOS has not moved high, tries to move DOS high.
 13146                                  ;		In the course of doing this, it will allocate all the HMA
 13147                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 13148                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 13149                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 13150                                  ;
 13151                                  ;	RETURNS : offset of free HMA in DI
 13152                                  ;		  BIOS_DATA, seg in DS
 13153                                  ;
 13154                                  ;--------------------------------------------------------------------------
 13155                                  
 13156                                  		; 17/10/2022
 13157                                  HMAPtr:
 13158 00001462 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13159                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13160 00001467 8B3E[9608]              		mov	di, [FreeHMAPtr]
 13161                                  		;mov	di, ds:FreeHMAPtr
 13162 0000146B 83FFFF                  		cmp	di, 0FFFFh
 13163 0000146E 750F                    		jnz	short HMAPtr_retn
 13164 00001470 803E[9C08]00            		cmp	byte [SysinitPresent], 0
 13165                                  		;cmp	ds:SysinitPresent, 0
 13166 00001475 7408                    		jz	short HMAPtr_retn
 13167 00001477 FF1E[9808]              		call	far [MoveDOSIntoHMA]
 13168                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 13169 0000147B 8B3E[9608]              		mov	di, [FreeHMAPtr]
 13170                                  		;mov	di, ds:FreeHMAPtr
 13171                                  HMAPtr_retn:				
 13172 0000147F C3                      		retn
 13173                                  
 13174                                  ; =============== S U B	R O U T	I N E =======================================
 13175                                  
 13176                                  ; 16/10/2022
 13177                                  
 13178                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 13179                                  ; but go ahead and update direction flag, si, & di
 13180                                  
 13181                                  move_sector:
 13182                                  
 13183                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 13184                                  ; any segment to be a fault. Theoretically, this could be handled
 13185                                  ; by the fault handler and the behavior of an 8086 could be emulated
 13186                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 13187                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 13188                                  ; also handles the fault incorrectly in their ROM BIOS for real
 13189                                  ; mode. Their fault handler was only designed to deal with one
 13190                                  ; special case which occurred in a magazine benchmark, but didn't
 13191                                  ; handle the general case worth beans.
 13192                                  ;
 13193                                  ; Simply changing this code to do a byte loop would work okay but
 13194                                  ; would involve a general case performance hit. Therefore, we'll
 13195                                  ; check for either source or destination offsets being within one
 13196                                  ; sector of the end of their segments and only in that case fall
 13197                                  ; back to a byte move.
 13198                                  
 13199 00001480 FC                      		cld
 13200 00001481 51                      		push	cx
 13201 00001482 B90001                  		mov	cx, 256
 13202 00001485 81FE00FE                		cmp	si, 0FE00h
 13203 00001489 770A                    		ja	short movsec_bytes
 13204 0000148B 81FF00FE                		cmp	di, 0FE00h
 13205 0000148F 7704                    		ja	short movsec_bytes
 13206 00001491 F3A5                    		rep movsw
 13207 00001493 59                      		pop	cx
 13208 00001494 C3                      		retn
 13209                                  ; ---------------------------------------------------------------------------
 13210                                  
 13211                                  movsec_bytes:				
 13212 00001495 D1E1                    		shl	cx, 1
 13213 00001497 F3A4                    		rep movsb
 13214 00001499 59                      		pop	cx
 13215 0000149A C3                      		retn
 13216                                  
 13217                                  ; =============== S U B	R O U T	I N E =======================================
 13218                                  
 13219                                  ; 16/10/2022
 13220                                  
 13221                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 13222                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 13223                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 13224                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 13225                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 13226                                  ; but we break down a request when we get an ecc or dma error into several
 13227                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 13228                                  ; number of sectors on a track on the medium, and the request would fail.
 13229                                  ;
 13230                                  ; input conditions:
 13231                                  ;	all registers set up for an int 13 request.
 13232                                  ;
 13233                                  ; output:
 13234                                  ;	dh - contains starting head number for request
 13235                                  ;	cx - contains starting sector and cylinder numbers
 13236                                  ;	(the above may or may not have been changed, and are 0-based)
 13237                                  ;	all other registers preserved.
 13238                                  
 13239                                  check_wrap:	
 13240 0000149B 50                      		push	ax
 13241 0000149C 53                      		push	bx
 13242 0000149D 06                      		push	es
 13243 0000149E 57                      		push	di
 13244 0000149F E86E00                  		call	find_bds	; get pointer to bds for drive in dl
 13245 000014A2 7260                    		jb	short no_wrap	; finished if DOS doesn't use it
 13246                                  		; 12/12/2022
 13247 000014A4 26F6452301              		test	byte [es:di+23h], 1
 13248                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13249 000014A9 7459                    		jz	short no_wrap	; no wrapping for removable media
 13250 000014AB 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13251 000014AF 89C8                    		mov	ax, cx
 13252 000014B1 83E03F                  		and	ax, 3Fh		; extract sector number
 13253 000014B4 39D8                    		cmp	ax, bx		; are we going to wrap?
 13254 000014B6 764C                    		jbe	short no_wrap
 13255 000014B8 F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 13256                                  
 13257                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 13258                                  ; last sector on that track.
 13259                                  
 13260 000014BA 08E4                    		or	ah, ah
 13261 000014BC 7503                    		jnz	short not_on_bound
 13262                                  		; 18/12/2022
 13263 000014BE 48                      		dec	ax ; *
 13264 000014BF 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 13265                                  					; if on	boundary
 13266                                  		;dec	al ; *		; also decrement # of head wraps
 13267                                  not_on_bound:				
 13268 000014C1 80E1C0                  		and	cl, 0C0h	; zero out sector #
 13269 000014C4 08E1                    		or	cl, ah		; or in	new sector #
 13270 000014C6 30E4                    		xor	ah, ah		; ax = # of head wraps
 13271 000014C8 40                      		inc	ax
 13272 000014C9 00F0                    		add	al, dh		; add in starting head #
 13273 000014CB 80D400                  		adc	ah, 0		; catch	any carry
 13274 000014CE 263B4515                		cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 13275                                  					; are we going to wrap around a	head?
 13276 000014D2 7636                    		jbe	short no_wrap_head ; do	not lose new head number!!
 13277 000014D4 52                      		push	dx		; preserve drive number and head number
 13278 000014D5 31D2                    		xor	dx, dx
 13279 000014D7 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 13280 000014DB F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 13281                                  
 13282                                  ; careful here! if new head # is 0, then we are on the last head.
 13283                                  
 13284 000014DD 09D2                    		or	dx, dx
 13285 000014DF 7507                    		jnz	short no_head_bound
 13286 000014E1 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 13287                                  
 13288                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 13289                                  
 13290 000014E3 09C0                    		or	ax, ax
 13291 000014E5 7401                    		jz	short no_head_bound
 13292 000014E7 48                      		dec	ax		; reduce number	of cylinder wraps
 13293                                  no_head_bound:				
 13294 000014E8 88D7                    		mov	bh, dl		; bh has new head number
 13295 000014EA 5A                      		pop	dx		; restore drive number and head number
 13296 000014EB FECF                    		dec	bh		; get it 0-based
 13297 000014ED 88FE                    		mov	dh, bh		; set up new head number in dh
 13298 000014EF 88CF                    		mov	bh, cl
 13299 000014F1 80E73F                  		and	bh, 3Fh		; preserve sector number
 13300 000014F4 B306                    		mov	bl, 6
 13301 000014F6 86CB                    		xchg	cl, bl
 13302 000014F8 D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 13303 000014FA 00C5                    		add	ch, al		; add in cylinder wrap
 13304 000014FC 10E3                    		adc	bl, ah		; add in high byte
 13305 000014FE D2E3                    		shl	bl, cl		; move up to ms	end
 13306 00001500 86D9                    		xchg	bl, cl		; restore cylinder bits	into cl
 13307 00001502 08F9                    		or	cl, bh		; or in	sector number
 13308                                  no_wrap:				
 13309 00001504 F8                      		clc
 13310 00001505 5F                      		pop	di
 13311 00001506 07                      		pop	es
 13312 00001507 5B                      		pop	bx
 13313 00001508 58                      		pop	ax
 13314 00001509 C3                      		retn
 13315                                  ; ---------------------------------------------------------------------------
 13316                                  
 13317                                  no_wrap_head:				
 13318 0000150A 88C6                    		mov	dh, al		; do not lose new head number
 13319 0000150C FECE                    		dec	dh		; get it 0-based
 13320 0000150E EBF4                    		jmp	short no_wrap
 13321                                  
 13322                                  ; =============== S U B	R O U T	I N E =======================================
 13323                                  
 13324                                  ; 16/10/2022
 13325                                  
 13326                                  ; this is a special version of the bds lookup code which is
 13327                                  ; based on physical drives rather than the usual logical drives
 13328                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 13329                                  ; otherwise carry is clear
 13330                                  ;
 13331                                  ; guaranteed to trash no registers except es:di
 13332                                  
 13333                                  		; 19/10/2022
 13334                                  find_bds:	
 13335 00001510 C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 13336                                  fbds_1:					
 13337 00001514 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 13338 00001518 7409                    		jz	short fdbs_2
 13339 0000151A 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 13340                                  					; go to next bds
 13341 0000151D 83FFFF                  		cmp	di, 0FFFFh
 13342 00001520 75F2                    		jnz	short fbds_1
 13343 00001522 F9                      		stc
 13344                                  fdbs_2:					
 13345 00001523 C3                      		retn
 13346                                  
 13347                                  ; =============== S U B	R O U T	I N E =======================================
 13348                                  
 13349                                  ; 16/10/2022
 13350                                  		; 17/10/2022
 13351                                  doint:
 13352                                  		; 10/12/2022
 13353 00001524 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13354                                  					; get physical drive number
 13355                                  		; 19/10/2022 - Temporary !
 13356                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 13357                                  		
 13358 00001527 30E4                    		xor	ah, ah
 13359 00001529 08C0                    		or	al, al
 13360 0000152B 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 13361                                  		; 10/12/2022
 13362 0000152D 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13363                                  					; get request code
 13364                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 13365 00001530 FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 13366                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 13367 00001533 9D                      		popf
 13368                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 13369                                  		; 17/10/2022
 13370 00001534 9A[7207]7000            		call	DOSBIOSSEG:call_orig13
 13371                                  		;;call	call_orig13	; call far 70h:797h
 13372                                  					; call far KERNEL_SEGMENT:call_orig13
 13373 00001539 9C                      		pushf
 13374                                  		; 10/12/2022
 13375 0000153A 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 13376                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 13377                                  dointdone:				
 13378 0000153D C3                      		retn
 13379                                  
 13380                                  ;----------------------------------------------------------------------------
 13381                                  
 13382                                  ; 16/10/2022
 13383                                  
 13384                                  ; this is the true int 13 handler. we parse the request to see if there is
 13385                                  ; a dma violation. if so, depending on the function, we:
 13386                                  ;   read/write break the request into three pieces and move the middle one
 13387                                  ;	       into our internal buffer.
 13388                                  ;
 13389                                  ;   format     copy the format table into the buffer
 13390                                  ;   verify     point the transfer address into the buffer
 13391                                  ;
 13392                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 13393                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 13394                                  ; the offending sector into the buffer below and do the i/o from there.
 13395                                  
 13396                                  ;struc INT13FRAME
 13397                                  ;.oldbp: resw
 13398                                  ;.oldax: resw 
 13399                                  ;.oldbx: resw
 13400                                  ;.oldcx: resw
 13401                                  ;.olddx: resw
 13402                                  ;.oldds: resw	; now we save caller's ds, too
 13403                                  ;.olddd: resd
 13404                                  ;.oldf:	resw
 13405                                  ;end struc
 13406                                  
 13407                                  ;----------------------------------------------------------------------------
 13408                                  
 13409                                  ;   entry conditions:
 13410                                  ;	ah = function
 13411                                  ;	al = number of sectors
 13412                                  ;	es:bx = dma address
 13413                                  ;	cx = packed track and sector
 13414                                  ;	dx = head and drive
 13415                                  ;   output conditions:
 13416                                  ;	no dma violation.
 13417                                  
 13418                                  ;	use extreme caution when working with this code. In general,
 13419                                  ;	  all registers are hot at all times.
 13420                                  ;
 13421                                  ;	question:  does this code handle cases where dma errors
 13422                                  ;	  occur during ecc retries, and where ecc errors occur during
 13423                                  ;	  dma breakdowns???? Hmmmmm.
 13424                                  
 13425                                  ;----------------------------------------------------------------------------
 13426                                  
 13427                                  ; ---------------------------------------------------------------------------
 13428                                  
 13429 0000153E 90004000                dtype_array:	dd 400090h		; 40:90	is drive type array
 13430                                  
 13431                                  ; 17/10/2022
 13432                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 13433                                  ; 09/12/2022
 13434                                  DTYPEARRAY equ dtype_array
 13435                                  
 13436                                  ; ---------------------------------------------------------------------------
 13437                                  
 13438                                  ; stick some special stuff out of mainline
 13439                                  
 13440                                  ; we know we're doing a format command. if we have changeline
 13441                                  ; support, then flag some special changed stuff and set changed
 13442                                  ; by format bit for all logical drives using this physical drive
 13443                                  
 13444                                  format_special_stuff:			
 13445 00001542 803E[7700]00            		cmp	byte [fhave96], 0	; do we have changeline support?
 13446 00001547 7459                    		jz	short format_special_stuff_done ; brif not
 13447 00001549 53                      		push	bx
 13448 0000154A BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 13449 0000154D E84504                  		call	set_changed_dl	; indicate that media changed by format
 13450 00001550 5B                      		pop	bx
 13451 00001551 EB4F                    		jmp	short format_special_stuff_done
 13452                                  ; ---------------------------------------------------------------------------
 13453                                  
 13454                                  ; 16/10/2022
 13455                                  
 13456                                  ; we know we've got ec35's on the system. Now see if we're doing
 13457                                  ; a floppy. If so, create a mask and see if this particular
 13458                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 13459                                  
 13460                                  		; 19/10/2022
 13461                                  ec35_special_stuff:			
 13462 00001553 84D2                    		test	dl, dl		; floppy or hard disk?
 13463 00001555 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 13464 00001557 50                      		push	ax		; see if this PARTICULAR drive is ec35
 13465 00001558 51                      		push	cx
 13466 00001559 88D1                    		mov	cl, dl		; turn drive number into bit map
 13467 0000155B B001                    		mov	al, 1		; assume drive 0
 13468 0000155D D2E0                    		shl	al, cl		; shift	over correct number of times
 13469 0000155F 8406[2905]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 13470 00001563 59                      		pop	cx
 13471 00001564 58                      		pop	ax
 13472 00001565 7442                    		jz	short ec35_special_stuff_done
 13473                                  					; done if this floppy is not an	ec35
 13474 00001567 53                      		push	bx		; free up a far	pointer	(es:bx)
 13475 00001568 06                      		push	es
 13476                                  		; 17/10/2022
 13477 00001569 2EC41E[3E15]            		les	bx, [cs:DTYPEARRAY]
 13478                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 13479                                  					; 0070h:3A65h =	2C7h:14F5h
 13480 0000156E 00D3                    		add	bl, dl
 13481 00001570 80D700                  		adc	bh, 0		; find entry for this drive
 13482 00001573 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 13483                                  					; (360k	disk in	360k drive,
 13484                                  					; no double-stepping, 250 kbs transfer rate)
 13485 00001577 07                      		pop	es
 13486 00001578 5B                      		pop	bx
 13487 00001579 EB2E                    		jmp	short ec35_special_stuff_done
 13488                                  ; ---------------------------------------------------------------------------
 13489                                  
 13490                                  ; 16/10/2022
 13491                                  
 13492                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 13493                                  ; this function does not reset the common buses after the execution.
 13494                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 13495                                  ; will issue ah=1 (read status) call to reset the buses.
 13496                                  
 13497                                  ps2_special_stuff:			
 13498 0000157B 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 13499                                  					; read driver parm ?
 13500 00001580 7407                    		jz	short ps2_30_problem
 13501 00001582 803E[1E00]15            		cmp	byte [prevoper], 15h
 13502                                  					; apparently function 15h fails, too
 13503 00001587 752D                    		jnz	short ps2_special_stuff_done
 13504                                  ps2_30_problem:				
 13505 00001589 50                      		push	ax
 13506 0000158A B401                    		mov	ah, 1
 13507                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 13508                                  		; 17/10/2022
 13509 0000158C 9A[7207]7000            		call	DOSBIOSSEG:call_orig13
 13510                                  		;call	call_orig13	; call far 70:797h
 13511                                  					; call far KERNEL_SEGMENT:call_orig13
 13512 00001591 58                      		pop	ax
 13513 00001592 EB22                    		jmp	short ps2_special_stuff_done
 13514                                  ; ---------------------------------------------------------------------------
 13515                                  
 13516                                  ; 17/10/2022
 13517                                  ; 16/10/2022
 13518                                  
 13519                                  ; here is the actual int13 handler
 13520                                  
 13521                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 13522                                  
 13523                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 13524                                  ; vectoring up here from Bios_Data
 13525                                  
 13526                                  		; 19/10/2022
 13527 00001594 1E                      		push	ds		; save caller's ds register first thing
 13528                                  		;;mov	ds, word [cs:0030h]
 13529                                  					; and set up our own ds -> Bios_Data
 13530 00001595 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13531                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 13532                                  					; = [02C7h:0030h] = [0070h:25A0h]
 13533                                  
 13534                                  ; let the operation proceed. if there is a dma violation, then we do things
 13535                                  
 13536 0000159A A3[1E00]                		mov	[prevoper], ax	; save request
 13537 0000159D 80FC05                  		cmp	ah, 5		; romformat
 13538 000015A0 74A0                    		jz	short format_special_stuff
 13539                                  					; go do special stuff for format
 13540                                   format_special_stuff_done:		
 13541 000015A2 803E[2905]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 13542 000015A7 75AA                    		jnz	short ec35_special_stuff
 13543                                  					; go handle it out of line if so
 13544                                  ec35_special_stuff_done:
 13545                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h		
 13546 000015A9 9A[7207]7000            		call	DOSBIOSSEG:call_orig13
 13547                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13548                                  		
 13549 000015AE 9C                      		pushf			; save result flags
 13550                                  		
 13551 000015AF 803E[3606]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 13552                                  					; mdl_ps2_30
 13553 000015B4 74C5                    		jz	short ps2_special_stuff
 13554                                  					; exit mainline to address special
 13555                                  ps2_special_stuff_done:			; ps2/30 problem if so		
 13556 000015B6 9D                      		popf
 13557 000015B7 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 13558                                  ret_from_i13:				
 13559 000015B9 1F                      		pop	ds
 13560 000015BA CA0200                  		retf	2		; restore ds &	iret w/flags
 13561                                  ; ---------------------------------------------------------------------------
 13562                                  
 13563                                  ; most of our code exits through here. If carry isn't set, then
 13564                                  ; just do a simple exit. Else doublecheck that we aren't getting
 13565                                  ; a changeline error.
 13566                                  
 13567                                  i13ret_ck_chglinerr:			
 13568 000015BD 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 13569                                  i13_ret_error:				
 13570 000015BF 80FC06                  		cmp	ah, 6		; did i	see a change event?
 13571 000015C2 7513                    		jnz	short int13b	; skip if wrong	error
 13572 000015C4 08D2                    		or	dl, dl		; is this for the hard disk?
 13573 000015C6 780F                    		js	short int13b	; yes, ignore
 13574 000015C8 803E[7700]00            		cmp	byte [fhave96], 0
 13575 000015CD 7408                    		jz	short int13b	; just in case ROM returned this
 13576                                  					; error	even though it told us it
 13577                                  					; never	would
 13578 000015CF 53                      		push	bx
 13579 000015D0 BB4000                  		mov	bx, 40h		; fchanged
 13580 000015D3 E8BF03                  		call	set_changed_dl
 13581 000015D6 5B                      		pop	bx
 13582                                  int13b:					
 13583 000015D7 F9                      		stc			; now return the error
 13584 000015D8 EBDF                    		jmp	short ret_from_i13
 13585                                  ; ---------------------------------------------------------------------------
 13586                                  
 13587                                  ; some kind of error occurred. see if it is dma violation
 13588                                  
 13589                                  goterr13:				
 13590 000015DA 80FC09                  		cmp	ah, 9		; dma error?
 13591 000015DD 747C                    		jz	short gotdmaerr
 13592                                  goterr13_xxxx:				
 13593 000015DF 80FC11                  		cmp	ah, 11h		; ecc error?
 13594 000015E2 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 13595 000015E4 803E[3006]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 13596 000015E9 74D4                    		jz	short i13_ret_error
 13597                                  
 13598 000015EB 803E[1F00]02            		cmp	byte [prevoper+1], 2
 13599                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 13600                                  					; (2 = romread)
 13601                                  					; ECC correction only applies to reads
 13602 000015F0 75CD                    		jnz	short i13_ret_error
 13603                                  
 13604 000015F2 30E4                    		xor	ah, ah
 13605                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 13606                                  		; 17/10/2022
 13607 000015F4 9A[7207]7000            		call	DOSBIOSSEG:call_orig13
 13608                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13609                                  					; call far 70:797h
 13610 000015F9 A1[1E00]                		mov	ax, [prevoper]
 13611 000015FC 30E4                    		xor	ah, ah		; return code =	no error
 13612 000015FE 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 13613 00001600 74B7                    		jz	short ret_from_i13 ; return with carry clear
 13614 00001602 53                      		push	bx
 13615 00001603 51                      		push	cx
 13616 00001604 52                      		push	dx
 13617 00001605 A2[2000]                		mov	[number_of_sec], al
 13618                                  loop_ecc:				
 13619 00001608 B80102                  		mov	ax, 201h	; read one sector
 13620                                  
 13621                                  ; we do reads one sector at a time. this ensures that we will eventually
 13622                                  ; finish the request since ecc errors on one sector do read in that sector.
 13623                                  ;
 13624                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 13625                                  ; that attempt to read more sectors than are available on a particular
 13626                                  ; track.
 13627                                  ;
 13628                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 13629                                  ; this request.
 13630                                  ;
 13631                                  ; at this point, all registers are set up for the call to orig13, except
 13632                                  ; that there may be a starting sector number that is bigger than the number
 13633                                  ; of sectors on a track.
 13634                                  ;
 13635 0000160B E88DFE                  		call	check_wrap	; get correct parameters for int 13
 13636                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 13637                                  		; 17/10/2022
 13638 0000160E 9A[7207]7000            		call	DOSBIOSSEG:call_orig13
 13639                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13640 00001613 730C                    		jnb	short ok11_op
 13641 00001615 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 13642 00001618 741B                    		jz	short handle_dma_during_ecc
 13643 0000161A 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 13644 0000161D 7510                    		jnz	short ok11_exit_err
 13645                                  		; 10/12/2022
 13646                                  		; xor ax ax -> ah = 0
 13647                                  		;mov	ah, 0		; ecc error. reset the system again.
 13648 0000161F 31C0                    		xor	ax, ax		; clear	the error code so that if this
 13649                                  					; was the last sector, no error	code
 13650                                  					; will be returned for the corrected
 13651                                  					; read.	(clear carry too.)
 13652                                  ok11_op:				
 13653 00001621 FE0E[2000]              		dec	byte [number_of_sec]
 13654 00001625 7409                    		jz	short ok11_exit	; all done?
 13655 00001627 FEC1                    		inc	cl		; advance sector number
 13656                                  					; add 200h to address
 13657 00001629 FEC7                    		inc	bh
 13658 0000162B FEC7                    		inc	bh
 13659 0000162D EBD9                    		jmp	short loop_ecc
 13660                                  ; ---------------------------------------------------------------------------
 13661                                  
 13662                                  ; locate error returns centrally
 13663                                  
 13664                                  ok11_exit_err:				
 13665 0000162F F9                      		stc			; set carry bit again.
 13666                                  ok11_exit:				
 13667 00001630 5A                      		pop	dx
 13668 00001631 59                      		pop	cx
 13669 00001632 5B                      		pop	bx
 13670 00001633 EB88                    		jmp	short i13ret_ck_chglinerr
 13671                                  ; ---------------------------------------------------------------------------
 13672                                  
 13673                                  ; do the single sector read again, this time into our temporary
 13674                                  ; buffer, which is guaranteed not to have a DMA error, then
 13675                                  ; move the data to its proper location and proceed
 13676                                  
 13677                                  handle_dma_during_ecc:			
 13678 00001635 06                      		push	es
 13679 00001636 53                      		push	bx
 13680 00001637 BB[4E01]                		mov	bx, disksector
 13681 0000163A 1E                      		push	ds
 13682 0000163B 07                      		pop	es		; point es:bx to buffer
 13683 0000163C B80102                  		mov	ax, 201h	; read one sector
 13684                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 13685                                  		; 17/10/2022
 13686 0000163F 9A[7207]7000            		call	DOSBIOSSEG:call_orig13
 13687                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13688 00001644 5B                      		pop	bx
 13689 00001645 07                      		pop	es
 13690 00001646 7305                    		jnb	short handle_dma_during_ecc_noerr
 13691 00001648 80FC11                  		cmp	ah, 11h
 13692 0000164B 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 13693                                  
 13694                                  ; now we're kosher. Copy the data to where it belongs and resume
 13695                                  ; the ECC looping code.
 13696                                  
 13697                                  handle_dma_during_ecc_noerr:		
 13698 0000164D 56                      		push	si
 13699 0000164E 57                      		push	di
 13700 0000164F 89DF                    		mov	di, bx
 13701 00001651 BE[4E01]                		mov	si, disksector
 13702 00001654 E829FE                  		call	move_sector
 13703 00001657 5F                      		pop	di
 13704 00001658 5E                      		pop	si
 13705 00001659 EBC6                    		jmp	short ok11_op
 13706                                  ; ---------------------------------------------------------------------------
 13707                                  
 13708                                  ; we truly have a dma violation. restore register ax and retry the
 13709                                  ; operation as best we can.
 13710                                  
 13711                                  gotdmaerr:				
 13712 0000165B A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 13713 0000165E FB                      		sti
 13714 0000165F 80FC02                  		cmp	ah, 2		; romread
 13715 00001662 723B                    		jb	short i13_done_dmaerr
 13716                                  					; just pass dma error thru for
 13717                                  					; functions we don't handle
 13718 00001664 80FC04                  		cmp	ah, 4		; romverify
 13719 00001667 743C                    		jz	short intverify
 13720 00001669 80FC05                  		cmp	ah, 5		; romformat
 13721 0000166C 7448                    		jz	short intformat
 13722 0000166E 772F                    		ja	short i13_done_dmaerr
 13723                                  
 13724                                  ; we are doing a read/write call. check for dma problems
 13725                                  
 13726                                  ;	******** set up stack frame here!!! ********
 13727                                  
 13728 00001670 52                      		push	dx
 13729 00001671 51                      		push	cx
 13730 00001672 53                      		push	bx
 13731 00001673 50                      		push	ax
 13732 00001674 55                      		push	bp
 13733 00001675 89E5                    		mov	bp, sp
 13734 00001677 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 13735 00001679 D1E2                    		shl	dx, 1
 13736 0000167B D1E2                    		shl	dx, 1
 13737 0000167D D1E2                    		shl	dx, 1
 13738 0000167F D1E2                    		shl	dx, 1		; segment converted to absolute	address
 13739 00001681 01DA                    		add	dx, bx		; combine with offset
 13740 00001683 81C2FF01                		add	dx, 511		; simulate a transfer
 13741                                  
 13742                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 13743                                  ; we skip the first transfer and perform the remaining buffering and transfer
 13744                                  
 13745 00001687 7303                    		jnb	short no_skip_first
 13746 00001689 E98300                  		jmp	bufferx		; restore dh=head & do buffer
 13747                                  ; ---------------------------------------------------------------------------
 13748                                  
 13749                                  no_skip_first:				
 13750 0000168C D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 13751 0000168E B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 13752 00001690 28F4                    		sub	ah, dh
 13753                                  
 13754                                  ; ah is now the number of sectors that we can successfully write in this
 13755                                  ; segment. if this number is above or equal to the requested number, then we
 13756                                  ; continue the operation as normal. otherwise, we break it into pieces.
 13757                                  ;
 13758                                  ; wait a sec. this is goofy. the whole reason we got here in the
 13759                                  ; first place is because we got a dma error. so it's impossible
 13760                                  ; for the whole block to fit, unless the dma error was returned
 13761                                  ; in error.
 13762                                  
 13763 00001692 38C4                    		cmp	ah, al		; can we fit it	in?
 13764 00001694 7236                    		jb	short doblock	; no, perform blocking.
 13765                                  
 13766                                  ; yes, the request fits. let it happen.
 13767                                  
 13768 00001696 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13769                                  					; set up head number
 13770 00001699 E888FE                  		call	doint
 13771 0000169C E9D900                  		jmp	bad13		; and return from this place
 13772                                  ; ---------------------------------------------------------------------------
 13773                                  
 13774                                  i13_done_dmaerr:			
 13775 0000169F B409                    		mov	ah, 9		; pass dma error thru to caller
 13776 000016A1 F9                      		stc
 13777 000016A2 E914FF                  		jmp	ret_from_i13	; return with error,
 13778                                  					; we know it's not a changeline error
 13779                                  ; ---------------------------------------------------------------------------
 13780                                  
 13781                                  ; verify the given sectors. place the buffer pointer into our space.
 13782                                  
 13783                                  intverify:				
 13784 000016A5 06                      		push	es		; save caller's dma address
 13785 000016A6 53                      		push	bx
 13786 000016A7 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 13787 000016A8 07                      		pop	es
 13788                                  dosimple:				
 13789 000016A9 BB[4E01]                		mov	bx, disksector
 13790                                  					; do the i/o from Bios_Data:disksector
 13791                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 13792                                  		; 17/10/2022
 13793 000016AC 9A[7207]7000            		call	DOSBIOSSEG:call_orig13
 13794                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13795 000016B1 5B                      		pop	bx
 13796 000016B2 07                      		pop	es
 13797 000016B3 E907FF                  		jmp	i13ret_ck_chglinerr
 13798                                  ; ---------------------------------------------------------------------------
 13799                                  
 13800                                  ; format operation. copy the parameter table into Bios_Data:disksector
 13801                                  
 13802                                  intformat:				
 13803 000016B6 06                      		push	es
 13804 000016B7 53                      		push	bx
 13805 000016B8 56                      		push	si
 13806 000016B9 57                      		push	di
 13807 000016BA 1E                      		push	ds
 13808                                  
 13809                                  ; point ds to the caller's dma buffer, es to Bios_Data
 13810                                  ; in other words, swap (ds, es)
 13811                                  
 13812 000016BB 06                      		push	es
 13813 000016BC 1E                      		push	ds
 13814 000016BD 07                      		pop	es
 13815 000016BE 1F                      		pop	ds
 13816 000016BF 89DE                    		mov	si, bx
 13817 000016C1 BF[4E01]                		mov	di, disksector
 13818 000016C4 E8B9FD                  		call	move_sector	; user's data into Bios_Data:disksector
 13819 000016C7 1F                      		pop	ds
 13820 000016C8 5F                      		pop	di
 13821 000016C9 5E                      		pop	si		; do the i/o from
 13822 000016CA EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 13823                                  ; ---------------------------------------------------------------------------
 13824                                  
 13825                                  ; we can't fit the request into the entire block. perform the operation on
 13826                                  ; the first block.
 13827                                  ;
 13828                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 13829                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 13830                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 13831                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 13832                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 13833                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 13834                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 13835                                  ; doblock will handle the first block of requested sectors within the
 13836                                  ; boundary of this safe value.
 13837                                  
 13838                                  doblock:
 13839                                  
 13840                                  ; try to get the # of sectors/track from bds via rom drive number.
 13841                                  ; for any mini disks installed, here we have to pray that they have the
 13842                                  ; same # of sector/track as the main dos partition disk drive.
 13843                                  				
 13844 000016CC 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 13845                                  					; get head #, drive #
 13846 000016CF 51                      		push	cx
 13847 000016D0 06                      		push	es
 13848 000016D1 57                      		push	di		; ah - # of sectors before dma boundary
 13849                                  					; al - requested # of sectors for i/o.
 13850 000016D2 E83BFE                  		call	find_bds
 13851 000016D5 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13852                                  		; 12/12/2022
 13853 000016D9 26F6452301              		test	byte [es:di+23h], 1
 13854                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13855 000016DE 5F                      		pop	di
 13856 000016DF 07                      		pop	es
 13857 000016E0 88E0                    		mov	al, ah		; set al=ah for	floppies
 13858 000016E2 7404                    		jz	short doblockflop ; they are track by track operation
 13859 000016E4 B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 13860 000016E6 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 13861                                  doblockflop:				
 13862 000016E8 59                      		pop	cx
 13863                                  doblockcontinue:			
 13864 000016E9 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 13865 000016EB 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 13866 000016ED 50                      		push	ax
 13867 000016EE 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 13868 000016F0 EB03                    		jmp	short doblockdoint
 13869                                  ; ---------------------------------------------------------------------------
 13870                                  
 13871                                  doblocklast:				
 13872 000016F2 88C4                    		mov	ah, al
 13873 000016F4 50                      		push	ax
 13874                                  doblockdoint:				; let ah = al =	# of sectors for this shot	
 13875 000016F5 E82CFE                  		call	doint
 13876 000016F8 727E                    		jb	short bad13	; something happened, bye!
 13877 000016FA 58                      		pop	ax
 13878 000016FB 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 13879                                  					; decrement by the successful operation
 13880 000016FE 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 13881 00001700 00E7                    		add	bh, ah		; advance dma addres
 13882 00001702 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 13883 00001704 38C4                    		cmp	ah, al		; check	the previous value
 13884 00001706 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 13885                                  					; then we are done already.
 13886 00001708 28E0                    		sub	al, ah		; otherwise,
 13887                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 13888 0000170A E88EFD                  		call	check_wrap	; get new cx, dh for the next operation.
 13889 0000170D EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 13890                                  ; ---------------------------------------------------------------------------
 13891                                  
 13892                                  bufferx:				
 13893 0000170F 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13894                                  					; set up head number
 13895                                  buffer:					
 13896 00001712 53                      		push	bx
 13897 00001713 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13898 00001716 80FC03                  		cmp	ah, 3		; romwrite
 13899 00001719 7525                    		jnz	short doread	;
 13900                                  					
 13901                                  ; copy the offending sector into local buffer
 13902                                  
 13903 0000171B 06                      		push	es
 13904 0000171C 1E                      		push	ds
 13905 0000171D 56                      		push	si
 13906 0000171E 57                      		push	di
 13907 0000171F 1E                      		push	ds		; exchange segment registers
 13908 00001720 06                      		push	es
 13909 00001721 1F                      		pop	ds
 13910 00001722 07                      		pop	es
 13911 00001723 BF[4E01]                		mov	di, disksector	; where to move
 13912 00001726 57                      		push	di		; save it
 13913 00001727 89DE                    		mov	si, bx		; source
 13914 00001729 E854FD                  		call	move_sector	; move sector into local buffer
 13915 0000172C 5B                      		pop	bx		; new transfer address
 13916                                  					; (es:bx = Bios_Data:diskbuffer)
 13917 0000172D 5F                      		pop	di		; restore caller's di & si
 13918 0000172E 5E                      		pop	si
 13919 0000172F 1F                      		pop	ds		; restore Bios_Data
 13920                                  
 13921                                  ; see if we are wrapping around a track or head
 13922                                  
 13923 00001730 B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 13924                                  					; get drive number
 13925 00001732 8A5608                  		mov	dl, [bp+8]
 13926 00001735 E863FD                  		call	check_wrap	; sets up registers if wrap-around
 13927                                  					;
 13928                                  					; ah is	function
 13929                                  					; al is	1 for single sector transfer
 13930                                  					; es:bx	is local transfer addres
 13931                                  					; cx is	track/sector number
 13932                                  					; dx is	head/drive number
 13933                                  					; si,di	unchanged
 13934 00001738 E8E9FD                  		call	doint
 13935 0000173B 07                      		pop	es		; restore caller's dma segment
 13936 0000173C 723A                    		jb	short bad13	; go clean up
 13937 0000173E EB22                    		jmp	short dotail
 13938                                  ; ---------------------------------------------------------------------------
 13939                                  
 13940                                  ; reading a sector. do int first, then move things around
 13941                                  
 13942                                  doread:					
 13943 00001740 06                      		push	es
 13944 00001741 53                      		push	bx
 13945 00001742 1E                      		push	ds		; es = Bios_Code
 13946 00001743 07                      		pop	es
 13947 00001744 BB[4E01]                		mov	bx, disksector
 13948 00001747 B001                    		mov	al, 1
 13949 00001749 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13950                                  					; get drive number
 13951 0000174C E84CFD                  		call	check_wrap	;
 13952                                  					; ah = function
 13953                                  					; al = 1 for single sector
 13954                                  					; es:bx	points to local	buffer
 13955                                  					; cx, dx are track/sector, head/drive
 13956 0000174F E8D2FD                  		call	doint
 13957 00001752 5B                      		pop	bx
 13958 00001753 07                      		pop	es
 13959 00001754 7222                    		jb	short bad13
 13960 00001756 56                      		push	si
 13961 00001757 57                      		push	di
 13962 00001758 89DF                    		mov	di, bx
 13963 0000175A BE[4E01]                		mov	si, disksector
 13964 0000175D E820FD                  		call	move_sector
 13965 00001760 5F                      		pop	di
 13966 00001761 5E                      		pop	si
 13967                                  
 13968                                  ; note the fact that we've done 1 more sector
 13969                                  
 13970                                  dotail:					
 13971 00001762 5B                      		pop	bx		; retrieve new dma area
 13972 00001763 80C702                  		add	bh, 2		; advance over sector
 13973 00001766 41                      		inc	cx
 13974 00001767 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 13975 0000176A F8                      		clc
 13976 0000176B FEC8                    		dec	al
 13977 0000176D 7409                    		jz	short bad13	; no more i/o
 13978                                  
 13979                                  ; see if we wrap around a track or head boundary with starting sector
 13980                                  ; we already have the correct head number to pass to check_wrap
 13981                                  
 13982 0000176F 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13983 00001772 E826FD                  		call	check_wrap
 13984 00001775 E8ACFD                  		call	doint
 13985                                  
 13986                                  ; we are done. ax has the final code; we throw away what we got before
 13987                                  
 13988                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 13989                                  ;	   or we've finished. If carry is set now, our only
 13990                                  ;	   hope for salvation is that it was a read operation
 13991                                  ;	   and the error code is ECC error. In that case, we'll
 13992                                  ;	   just pop the registers and go do the old ECC thing.
 13993                                  ;	   When the DMA error that got us here in the first
 13994                                  ;	   place occurs, it'll handle it.
 13995                                  
 13996                                  bad13:					
 13997 00001778 89EC                    		mov	sp, bp
 13998 0000177A 5D                      		pop	bp
 13999 0000177B 5B                      		pop	bx
 14000 0000177C 5B                      		pop	bx
 14001 0000177D 59                      		pop	cx
 14002 0000177E 5A                      		pop	dx
 14003 0000177F 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 14004 00001781 E935FE                  		jmp	ret_from_i13	; non-error exit
 14005                                  ; ---------------------------------------------------------------------------
 14006                                  
 14007                                  xgoterr13_xxxx:				
 14008 00001784 E958FE                  		jmp	goterr13_xxxx
 14009                                  
 14010                                  ; ---------------------------------------------------------------------------
 14011                                  		; 10/12/2022
 14012                                  		;db 	0
 14013                                  ; ---------------------------------------------------------------------------
 14014                                  
 14015                                  ;Bios_Code ends
 14016                                  
 14017                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14018                                  
 14019                                  ;-----------------------------------------------------------------------------
 14020                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 14021                                  ;-----------------------------------------------------------------------------
 14022                                  ; 17/03/2019 - Retro DOS v4.0
 14023                                  
 14024                                  		; 19/10/2022
 14025                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 14026 00001787 8A26[7500]              		mov	ah, [drvmax]
 14027 0000178B BF[7F06]                		mov	di, dskdrvs
 14028 0000178E 1E                      		push	ds		; pass result in es:di
 14029 0000178F 07                      		pop	es
 14030 00001790 E9C3EE                  		jmp	SetPtrSav
 14031                                  
 14032                                  ; =============== S U B	R O U T	I N E =======================================
 14033                                  
 14034                                  ;---------------------------------------------------------------------------
 14035                                  ; install_bds installs a bds at location es:di into the current linked list of
 14036                                  ; bds maintained by this device driver. it places the bds at the end of the
 14037                                  ; list. Trashes (at least) ax, bx, di, si
 14038                                  ;---------------------------------------------------------------------------
 14039                                  
 14040                                  install_bds:		
 14041 00001793 1E                      		push	ds		; save Bios_Data segment
 14042 00001794 BE[1901]                		mov	si, start_bds	; beginning of chain
 14043                                  
 14044                                  		; ds:si now points to link to first bds
 14045                                  		; assume bds list is non-empty
 14046                                  loop_next_bds:				
 14047 00001797 C534                    		lds	si, [si]	; [si+BDS.link]
 14048                                  					; fetch	next bds
 14049 00001799 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 14050 0000179D 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 14051                                  					; drive	with new one?
 14052 000017A0 7518                    		jnz	short next_bds
 14053 000017A2 B310                    		mov	bl, 10h		; fi_am_mult
 14054 000017A4 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 14055                                  					; set both of them to i_am_mult	if so
 14056 000017A8 085C23                  		or	[si+23h], bl	; [si+BDS.flags]
 14057 000017AB 26806523DF              		and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 14058                                  					; we don't own it
 14059 000017B0 8A5C23                  		mov	bl, [si+23h]	; [si+BDS.flags]
 14060                                  					; determine if changeline available
 14061 000017B3 80E302                  		and	bl, 2		; fchangeline
 14062 000017B6 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 14063                                  next_bds:				
 14064 000017BA 833CFF                  		cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 14065                                  					; are we at end	of list?
 14066 000017BD 75D8                    		jnz	short loop_next_bds
 14067 000017BF 8C4402                  		mov	word [si+2], es ; [si+BDS.link+2],es
 14068                                  					; install bds
 14069 000017C2 893C                    		mov	[si], di
 14070 000017C4 26C705FFFF              		mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 14071                                  					; set next pointer to null
 14072 000017C9 1F                      		pop	ds
 14073                                  
 14074                                  ; 01/07/2023 - Retro DOS v4.2 (MSDOS 6.22 IO.SYS - BIOSCODE:1785h)
 14075                                  ; 16/10/2022 (MSDOS 6.0 Code)
 14076                                  
 14077                                  ; **** If the new drive has a higher EOT value, we must alter the
 14078                                  ;      'eot' variable appropriately.
 14079                                  
 14080                                  		; 01/06/2019
 14081                                  		;mov	al,[es:di+52]
 14082 000017CA 268A4534                		mov	al,[es:di+BDS.rsecpertrack]
 14083 000017CE 3A06[2C01]              		cmp	al,[eot]
 14084 000017D2 7603                    		jbe	short _eot_ok
 14085 000017D4 A2[2C01]                		mov	[eot],al
 14086                                  _eot_ok:
 14087 000017D7 C3                      		retn
 14088                                  
 14089                                  ; ---------------------------------------------------------------------------
 14090                                  
 14091                                  ; 17/10/2022
 14092                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 14093                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h	
 14094                                  ; 09/12/2022
 14095                                  DRVLET equ drvlet
 14096                                  SNGMSG equ sngmsg
 14097                                  
 14098                                  ; 16/10/2022
 14099                                  
 14100                                  ;---------------------------------------------------------------------------
 14101                                  ;  ask to swap the disk in drive a:
 14102                                  ;	es:di -> bds
 14103                                  ;	ds -> Bios_Data
 14104                                  ;---------------------------------------------------------------------------
 14105                                  
 14106                                  		; 19/10/2022
 14107 000017D8 F606[6F08]01            swpdsk:		test	byte [IsWin386], 1			
 14108                                  		;test	ds:IsWin386, 1	; Is win386 present?
 14109 000017DD 7405                    		jz	short no_win386	; no, skip SetFocus
 14110                                  		
 14111                                  		; set focus to the correct VM
 14112                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 14113                                  		; 17/10/2022
 14114 000017DF 9A[7008]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus
 14115                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 14116                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 14117                                  no_win386:				
 14118 000017E4 51                      		push	cx
 14119 000017E5 52                      		push	dx
 14120 000017E6 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 14121                                  					; get the drive	letter
 14122                                  
 14123                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 14124                                  ;           then existing dsk is drive A & vice versa
 14125                                  
 14126 000017EA 88D6                    		mov	dh, dl
 14127 000017EC 80F601                  		xor	dh, 1
 14128 000017EF 29C9                    		sub	cx, cx		; nobody has handled swap disk
 14129 000017F1 B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 14130                                  					; broad	cast code for swap disk
 14131                                  					; Broadcast it
 14132 000017F4 CD2F                    		int	2Fh	
 14133 000017F6 41                      		inc	cx		; cx == -1 ?
 14134 000017F7 741E                    		jz	short swpdsk9	; somebody has handled it
 14135                                  
 14136                                  ; using a different drive in a one drive system so request the user change disks
 14137                                  
 14138 000017F9 80C241                  		add	dl, 'A'
 14139                                  		; 17/10/2022
 14140 000017FC 2E8816[3618]            		mov	[cs:DRVLET], dl
 14141                                  		; 16/10/2022
 14142                                  		;;mov	byte [cs:drvlet], dl
 14143                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 14144                                  					; 0070h:3D54h =	2C7h:17E4h
 14145 00001801 BE[1A18]                		mov	si, SNGMSG
 14146                                  		;mov	si, 17C8h	; sngmsg
 14147                                  					; 0070h:3D38h =	2C7h:17C8h
 14148 00001804 53                      		push	bx
 14149 00001805 2E                      		cs
 14150 00001806 AC                      		lodsb			; get the next character of the message
 14151                                  		;lods	byte ptr cs:[si]
 14152                                  wrmsg_loop:				
 14153 00001807 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 14154                                  					; AL = character to display
 14155 00001809 2E                      		cs
 14156 0000180A AC                      		lodsb
 14157                                  		;lods	byte ptr cs:[si] ; cs lodsb
 14158                                  					; get the next character of the	message
 14159 0000180B 08C0                    		or	al, al
 14160 0000180D 75F8                    		jnz	short wrmsg_loop
 14161 0000180F E8F9E9                  		call	con_flush	; flush out keyboard queue
 14162                                  					; call rom-bios
 14163 00001812 30E4                    		xor	ah, ah
 14164 00001814 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 14165                                  					; Return: AH = scan code, AL = character
 14166 00001816 5B                      		pop	bx
 14167                                  swpdsk9:				
 14168 00001817 5A                      		pop	dx
 14169 00001818 59                      		pop	cx
 14170 00001819 C3                      		retn
 14171                                  
 14172                                  ; ---------------------------------------------------------------------------
 14173                                  
 14174                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14175                                  
 14176                                  ;--------------------------------------------------------
 14177                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 14178                                  ;--------------------------------------------------------
 14179                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 14180                                  ;--------------------------------------------------------
 14181                                  ; 17/03/2019 - Retro DOS v4.0
 14182                                  
 14183                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 14184 0000181A 0D0A                    sngmsg:		db 0Dh,0Ah
 14185 0000181C 496E73657274206469-     		db 'Insert diskette for drive '
 14185 00001825 736B6574746520666F-
 14185 0000182E 7220647269766520   
 14186                                  
 14187                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 14188 00001836 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 14188 0000183F 65737320616E79206B-
 14188 00001848 6579207768656E2072-
 14188 00001851 656164790D0A       
 14189 00001857 0A00                    		db 0Ah,0
 14190                                  
 14191                                  ; =============== S U B	R O U T	I N E =======================================
 14192                                  
 14193                                  ;---------------------------------------------------------------------------
 14194                                  ; input : es:di points to current bds for drive.
 14195                                  ; return : zero set if no open files
 14196                                  ;	   zero reset if open files
 14197                                  ;---------------------------------------------------------------------------
 14198                                  
 14199                                  chkopcnt:		
 14200 00001859 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 14201 0000185E C3                      		retn
 14202                                  
 14203                                  ; =============== S U B	R O U T	I N E =======================================
 14204                                  
 14205                                  ;---------------------------------------------------------------------------
 14206                                  ; at media check time, we need to really get down and check what the change is.
 14207                                  ; this is guaranteed to be expensive.
 14208                                  ;
 14209                                  ;	es:di -> bds, ds -> Bios_Data
 14210                                  ;---------------------------------------------------------------------------
 14211                                  
 14212                                  mediacheck:	
 14213 0000185F E878F0                  		call	checksingle	; make sure correct disk is in place
 14214 00001862 31F6                    		xor	si, si
 14215 00001864 E85501                  		call	haschange
 14216 00001867 742F                    		jz	short mediaret
 14217 00001869 E84401                  		call	checkromchange
 14218 0000186C 752B                    		jnz	short mediadovolid
 14219 0000186E 50                      		push	ax
 14220 0000186F 52                      		push	dx
 14221 00001870 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 14222                                  					; set logical drive number
 14223 00001874 B416                    		mov	ah, 16h
 14224 00001876 CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 14225                                  					; DL = drive to	check
 14226                                  					; Return: AH = disk change status
 14227 00001878 5A                      		pop	dx
 14228 00001879 58                      		pop	ax
 14229 0000187A 721D                    		jb	short mediadovolid
 14230 0000187C BE0100                  		mov	si, 1		; signal no change
 14231                                  
 14232                                  ; there are some drives with changeline that "lose" the changeline indication
 14233                                  ; if a different drive is accessed after the current one. in order to avoid
 14234                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 14235                                  ; is not active and we are accessing a different drive from the last one.
 14236                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 14237                                  ; status.
 14238                                  		; 19/10/2022
 14239 0000187F 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 14240 00001883 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 14241                                  					; (If the last drive accessed is not current drive
 14242                                  					; media	change status may be incorrect.	So,
 14243                                  					; "I don't now" will be returned even if it is indicated
 14244                                  					; as media is not changed.)
 14245 00001887 740F                    		jz	short mediaret	; (same	drive,
 14246                                  					; media	changeline indication is reliable)
 14247                                  
 14248                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 14249                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 14250                                  ; "not changed" here since the 2 second test said no change.)
 14251                                  
 14252 00001889 50                      		push	ax
 14253 0000188A 51                      		push	cx
 14254 0000188B 52                      		push	dx
 14255 0000188C E867ED                  		call	Check_Time_Of_Access
 14256 0000188F 5A                      		pop	dx
 14257 00001890 59                      		pop	cx
 14258 00001891 58                      		pop	ax
 14259 00001892 09F6                    		or	si, si
 14260 00001894 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 14261                                  					; (volume id will be checked)
 14262 00001896 31F6                    		xor	si, si		; return "i don't know"
 14263                                  mediaret:				
 14264 00001898 C3                      		retn
 14265                                  ; ---------------------------------------------------------------------------
 14266                                  
 14267                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 14268                                  ; because this may be different since we only set medbyt when doing a read
 14269                                  ; or write.
 14270                                  
 14271                                  mediadovolid:				
 14272 00001899 E8FAED                  		call	GetBp		; build	a new bpb in current bds
 14273 0000189C 72FA                    		jb	short mediaret
 14274 0000189E E82D00                  		call	check_vid
 14275 000018A1 73F5                    		jnb	short mediaret
 14276 000018A3 E9C9F3                  		jmp	maperror	; fix up al for	return to dos
 14277                                  ; ---------------------------------------------------------------------------
 14278                                  
 14279                                  ; simple, quick check of latched change. if no indication, then return
 14280                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 14281                                  ; return and set al = 15 (for invalid media change) which will be returned to
 14282                                  ; dos.
 14283                                  ;
 14284                                  ; for dos 3.3, this will work only for the drive that has changeline.
 14285                                  
 14286                                  ;	call with es:di -> bds, ds -> Bios_Data
 14287                                  ;	***** warning:  this routine will return one level up on the stack
 14288                                  ;			if an error occurs!
 14289                                  
 14290                                  checklatchio:	
 14291                                  
 14292                                  ; if returning fake bpb then assume the disk has not changed
 14293                                  			
 14294 000018A6 E8B0FF                  		call	chkopcnt
 14295 000018A9 741B                    		jz	short checkret	; done if zero
 14296                                  
 14297                                  ; check for past rom indications. if no rom change indicated, then return ok.
 14298                                  
 14299 000018AB E80201                  		call	checkromchange
 14300 000018AE 7416                    		jz	short checkret
 14301                                  
 14302                                  ; we now see that a change line has been seen in the past. let's do the
 14303                                  ; expensive verification.
 14304                                  
 14305 000018B0 E8E3ED                  		call	GetBp		; build	bpb in current bds
 14306 000018B3 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 14307 000018B5 E81600                  		call	check_vid
 14308 000018B8 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 14309 000018BA 09F6                    		or	si, si		; is changed for sure?
 14310 000018BC 7908                    		jns	short checkret
 14311 000018BE E87D00                  		call	returnvid
 14312                                  checklatchret:				
 14313 000018C1 E8ABF3                  		call	maperror	; fix up al for	return to dos
 14314                                  ret_no_error_map:			
 14315 000018C4 F9                      		stc
 14316 000018C5 5E                      		pop	si		; pop off return address
 14317                                  checkret:				
 14318 000018C6 C3                      		retn
 14319                                  ; ---------------------------------------------------------------------------
 14320                                  
 14321                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 14322                                  ; only if there was a disk error. return that error code in ax.
 14323                                  ;
 14324                                  ;	called with es:di -> bds, ds -> Bios_Data
 14325                                  
 14326                                  checkfatvid:				
 14327 000018C7 E8CD01                  		call	fat_check	; check	the fat	and the	vid
 14328 000018CA 09F6                    		or	si, si
 14329 000018CC 7827                    		js	short changed_drv ;
 14330                                  
 14331                                  ; the fat was the same. fall into check_vid and check volume id.
 14332                                  
 14333                                  		; fall into check_vid
 14334                                  
 14335                                  ; =============== S U B	R O U T	I N E =======================================
 14336                                  
 14337                                  ; now with the extended boot record, the logic should be enhanced.
 14338                                  ;
 14339                                  ; if it is the extended boot record, then we check the volume serial
 14340                                  ; number instead of volume id. if it is different, then set si to -1.
 14341                                  ;
 14342                                  ; if it is same, then si= 1 (no change).
 14343                                  ;
 14344                                  ; if it is not the extended boot record, then just follows the old
 14345                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 14346                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 14347                                  ; should have already covered by extended boot structure checking.
 14348                                  ; so, we will return "i don't know" by setting si to 0.
 14349                                  ;
 14350                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 14351                                  ; (this will be gauranteed by a successful getbp call right before this
 14352                                  ; routine.)
 14353                                  ;
 14354                                  ;	called with es:di -> bds, ds -> bds
 14355                                  
 14356                                  		; 19/10/2022
 14357                                  check_vid:
 14358                                  
 14359                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 14360                                  ; boot signature. if it is set then go to do the extended
 14361                                  ; id check otherwise continue with code below
 14362                                  
 14363 000018CE 803E[7401]29            		cmp	byte [disksector+26h], 29h
 14364                                  					; [disksector+EXT_BOOT.SIG],
 14365                                  					; EXT_BOOT_SIGNATURE
 14366 000018D3 7427                    		jz	short do_ext_check_id
 14367 000018D5 E8E400                  		call	haschange
 14368 000018D8 74EC                    		jz	short checkret
 14369 000018DA 31F6                    		xor	si, si
 14370 000018DC 803E[5E01]00            		cmp	byte [disksector+10h], 0 
 14371                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 14372 000018E1 7411                    		jz	short checkfatret ; don't read vol id
 14373                                  					; if not fat system
 14374 000018E3 E8F600                  		call	read_volume_id
 14375 000018E6 720C                    		jb	short checkfatret
 14376 000018E8 E89B01                  		call	check_volume_id
 14377 000018EB BEFFFF                  		mov	si, 0FFFFh	; -1
 14378                                  					; definitely changed
 14379 000018EE 7505                    		jnz	short changed_drv
 14380                                  
 14381 000018F0 46                      		inc	si		; not changed
 14382                                  vid_no_changed:				
 14383 000018F1 E8C200                  		call	resetchanged
 14384                                  		; 12/12/2022
 14385                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 14386                                  		;clc
 14387                                  checkfatret:				
 14388 000018F4 C3                      		retn
 14389                                  ; ---------------------------------------------------------------------------
 14390                                  
 14391                                  		; 12/12/2022
 14392                                  changed_drv:
 14393 000018F5 F8                      		clc			; cas -- return	no error
 14394 000018F6 C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 14395                                  					; ensure that we ask rom for media
 14396 000018FB C3                      		retn			; check	next time round
 14397                                  ; ---------------------------------------------------------------------------
 14398                                  
 14399                                  ; extended id check
 14400                                  
 14401                                  ; 16/10/2022
 14402                                  
 14403                                  ; the code to check extended id is basically a check to see if the
 14404                                  ; volume serial number is still the same. the volume serial number
 14405                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 14406                                  ; ds:di points to the bds of the drive under consideration.
 14407                                  ; the bds has fields containing the high and low words 
 14408                                  ; of the volume serial number of the media in the drive.
 14409                                  ; compare these fields to the fields mentioned above. if these fields
 14410                                  ; do not match the media has changed and so we should jump to the code
 14411                                  ; starting at ext_changed else return "i don't know" status
 14412                                  ; in the register used for the changeline status and continue executing
 14413                                  ; the code given below. for temporary storage use the register which
 14414                                  ; has been saved and restored around this block.
 14415                                  ;
 14416                                  ; bds fields in inc\msbds.inc
 14417                                  
 14418                                  		; 19/10/2022
 14419                                  do_ext_check_id:			
 14420 000018FC 50                      		push	ax
 14421                                  		;mov	ax, word ptr ds:disksector+27h
 14422                                  					; [DiskSector+EXT_BOOT.SERIAL]
 14423 000018FD A1[7501]                		mov	ax, [disksector+27h]
 14424 00001900 263B4557                		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 14425 00001904 750E                    		jnz	short ext_changed
 14426 00001906 A1[7701]                		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 14427 00001909 263B4559                		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 14428 0000190D 7505                    		jnz	short ext_changed
 14429 0000190F 31F6                    		xor	si, si		; 0
 14430                                  					; don't know
 14431 00001911 58                      		pop	ax
 14432 00001912 EBDD                    		jmp	short vid_no_changed
 14433                                  					; reset the flag
 14434                                  ; ---------------------------------------------------------------------------
 14435                                  
 14436                                  ext_changed:				
 14437 00001914 58                      		pop	ax
 14438 00001915 BEFFFF                  		mov	si, 0FFFFh	; -1
 14439                                  					; disk changed!
 14440                                  		; 12/12/2022
 14441                                  		; ('changed_drv' clears cf)
 14442                                  		;clc
 14443 00001918 EBDB                    		jmp	short changed_drv
 14444                                  
 14445                                  ; ---------------------------------------------------------------------------
 14446                                  
 14447                                  ; at i/o time, we detected the error. now we need to determine whether the
 14448                                  ; media was truly changed or not. we return normally if media change unknown.
 14449                                  ; and we pop off the call and jmp to harderr if we see an error.
 14450                                  ;
 14451                                  ; es:di -> bds
 14452                                  
 14453                                  checkio:				
 14454 0000191A 80FC06                  		cmp	ah, 6
 14455 0000191D 75D5                    		jnz	short checkfatret
 14456 0000191F E837FF                  		call	chkopcnt
 14457 00001922 74D0                    		jz	short checkfatret
 14458 00001924 E86FED                  		call	GetBp
 14459 00001927 7212                    		jb	short no_error_map
 14460 00001929 E89BFF                  		call	checkfatvid
 14461 0000192C 7209                    		jb	short checkioret ; disk	error trying to	read in.
 14462 0000192E 09F6                    		or	si, si		; is changed for sure?
 14463 00001930 7802                    		js	short checkioerr ; yes changed
 14464 00001932 45                      		inc	bp		; allow	a retry
 14465 00001933 C3                      		retn
 14466                                  ; ---------------------------------------------------------------------------
 14467                                  
 14468                                  checkioerr:				
 14469 00001934 E80700                  		call	returnvid
 14470                                  
 14471                                  checkioret:				
 14472 00001937 F9                      		stc			; make sure carry gets passed through
 14473 00001938 E9E4F2                  		jmp	harderr
 14474                                  ; ---------------------------------------------------------------------------
 14475                                  
 14476                                  no_error_map:				
 14477 0000193B E9E4F2                  		jmp	harderr2
 14478                                  
 14479                                  ; =============== S U B	R O U T	I N E =======================================
 14480                                  
 14481                                  ; return vid sets up the vid for a return to dos.
 14482                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 14483                                  ;  **** trashes si! ****
 14484                                  
 14485                                  returnvid:		
 14486 0000193E BE1600                  		mov	si, 22		; extra
 14487                                  					; offset into pointer to return	value
 14488 00001941 E80700                  		call	vid_into_packet
 14489 00001944 B406                    		mov	ah, 6
 14490 00001946 F9                      		stc
 14491 00001947 C3                      		retn
 14492                                  
 14493                                  ; ---------------------------------------------------------------------------
 14494                                  
 14495                                  ; moves the pointer to the volid for the drive into the original request packet
 14496                                  ; no attempt is made to preserve registers.
 14497                                  ;
 14498                                  ; assumes es:di -> bds
 14499                                  ; **trashes si**
 14500                                  
 14501                                  media_set_vid:				
 14502 00001948 BE0F00                  		mov	si, 15		; trans+1
 14503                                  					; return the value here	in packet
 14504                                  
 14505                                  		; fall into vid_into_packet
 14506                                  
 14507                                  ; =============== S U B	R O U T	I N E =======================================
 14508                                  
 14509                                  ; return pointer to vid in bds at es:di in packet[si]
 14510                                  
 14511                                  		; 19/10/2022
 14512                                  vid_into_packet:
 14513 0000194B 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 14514 0000194C C51E[1200]              		lds	bx, [ptrsav]
 14515 00001950 83C74B                  		add	di, 75		; BDS.volid
 14516 00001953 8938                    		mov	[bx+si], di
 14517 00001955 83EF4B                  		sub	di, 75		; BDS.volid
 14518 00001958 8C4002                  		mov	[bx+si+2], es
 14519 0000195B 1F                      		pop	ds
 14520                                  dofloppy:	; 18/12/2022
 14521 0000195C C3                      		retn
 14522                                  
 14523                                  ; ---------------------------------------------------------------------------
 14524                                  
 14525                                  ;----------------------------------------------------------------------------
 14526                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 14527                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 14528                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 14529                                  ;   of getbp. for 3.5" media, we just return.
 14530                                  ;
 14531                                  ;   inputs:	es:di point to correct bds for this drive
 14532                                  ;		ah has media byte
 14533                                  ;
 14534                                  ;   outputs:	carry clear
 14535                                  ;		    no registers modified
 14536                                  ;		carry set
 14537                                  ;		    al = sectors/fat
 14538                                  ;		    bh = number of root directory entries
 14539                                  ;		    bl = sectors per track
 14540                                  ;		    cx = number of sectors
 14541                                  ;		    dh = sectors per allocation unit
 14542                                  ;		    dl = number of heads
 14543                                  ;
 14544                                  ;----------------------------------------------------------------------------
 14545                                  
 14546                                  hidensity:
 14547                                  
 14548                                  ; check for correct drive
 14549                                  		
 14550                                  		; 12/12/2022
 14551 0000195D 26F6452302              		test	byte [es:di+23h], 2		
 14552                                  		;test	word [es:di+23h], 2 ; is it special?	
 14553                                  					; [es:di+BDS.flags], fchangeline
 14554 00001962 74F8                    		jz	short dofloppy	; no, do normal floppy test
 14555                                  
 14556                                  ; we have a media byte that is pretty complex. examine drive information
 14557                                  ; table to see what kind it is.
 14558                                  
 14559 00001964 26807D2202              		cmp	byte [es:di+22h], 2 ; is it single-media?
 14560 00001969 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 14561                                  					; yes, use fatid...
 14562                                  ; 96 tpi drive?
 14563 0000196B 80FCF9                  		cmp	ah, 0F9h
 14564 0000196E 75EC                    		jnz	short dofloppy
 14565                                  
 14566                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 14567                                  ;------ a 720K diskette
 14568                                  
 14569 00001970 26807D2207              		cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 14570                                  					; ffOther
 14571 00001975 7418                    		jz	short Is720K
 14572 00001977 26807D2209              		cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 14573                                  					; ff288
 14574 0000197C 7411                    		jz	short Is720K
 14575 0000197E B007                    		mov	al, 7		; seven	sectors	/ fat
 14576 00001980 BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 14577                                  					; 224 root dir entries
 14578                                  					; & 0Fh sector max
 14579 00001983 B96009                  		mov	cx, 2400	; 80*15*2
 14580                                  					; 80 tracks, 15 sectors/track,
 14581                                  					; 2 sides
 14582 00001986 BA0201                  		mov	dx, 258		; 1*256+2
 14583                                  					; sectors/allocation unit
 14584                                  					; & head max
 14585 00001989 83C402                  		add	sp, 2		; pop off return address
 14586 0000198C E979ED                  		jmp	Has1		; return to tail of getbp
 14587                                  ; ---------------------------------------------------------------------------
 14588                                  
 14589                                  Is720K:					
 14590 0000198F 83C402                  		add	sp, 2		; pop off return address
 14591 00001992 E93AED                  		jmp	Has720K		; return to 720K code
 14592                                  ; ---------------------------------------------------------------------------
 14593                                  
 14594                                  		; 18/12/2022
 14595                                  ;dofloppy:				
 14596                                  		;retn
 14597                                  
 14598                                  ; =============== S U B	R O U T	I N E =======================================
 14599                                  
 14600                                  ; 16/10/2022
 14601                                  
 14602                                  ;---------------------------------------------------------------------------
 14603                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 14604                                  ;		   essentially used to indicate changeline, or format.
 14605                                  ;
 14606                                  ;   inputs:	dl contains physical drive number
 14607                                  ;		bx contains bits to set in the flag field in the bdss
 14608                                  ;   outputs:	none
 14609                                  ;   registers modified: flags
 14610                                  ;
 14611                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 14612                                  ;
 14613                                  ; in the virtual drive system we *must* flag the other drives as being changed
 14614                                  ;---------------------------------------------------------------------------
 14615                                  
 14616                                  set_changed_dl:	
 14617 00001995 06                      		push	es
 14618 00001996 57                      		push	di
 14619                                  		;les	di, ds:start_bds
 14620                                  		; 19/10/2022
 14621 00001997 C43E[1901]              		les	di, [start_bds]
 14622                                  
 14623                                  ; note: we assume that the list is non-empty
 14624                                  
 14625                                  scan_bds:				
 14626 0000199B 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 14627 0000199F 7504                    		jnz	short get_next_bds
 14628                                  
 14629                                  ; someone may complain, but this *always* must be done when a disk change is
 14630                                  ; noted. there are *no* other compromising circumstances.
 14631                                  
 14632 000019A1 26095D23                		or	[es:di+23h], bx	; [es:di+BDS.flags]
 14633                                  					; signal change	on other drive
 14634                                  get_next_bds:				
 14635 000019A5 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 14636                                  					; go to	next bds
 14637 000019A8 83FFFF                  		cmp	di, 0FFFFh
 14638 000019AB 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 14639 000019AD 5F                      		pop	di
 14640 000019AE 07                      		pop	es
 14641 000019AF C3                      		retn
 14642                                  
 14643                                  ; =============== S U B	R O U T	I N E =======================================
 14644                                  
 14645                                  ;---------------------------------------------------------------------------
 14646                                  ; checkromchange - see if external program has diddled rom change line.
 14647                                  ;
 14648                                  ;   inputs:	es:di points to current bds.
 14649                                  ;   outputs:	zero set - no change
 14650                                  ;		zero reset - change
 14651                                  ;   registers modified: none
 14652                                  ;---------------------------------------------------------------------------
 14653                                  
 14654                                  checkromchange:	
 14655                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 14656                                  		; 10/12/2022
 14657 000019B0 26F6452340              		test	byte [es:di+23h], 40h
 14658                                  		;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 14659                                  					; fchanged
 14660 000019B5 C3                      		retn
 14661                                  
 14662                                  ; =============== S U B	R O U T	I N E =======================================
 14663                                  
 14664                                  ;---------------------------------------------------------------------------
 14665                                  ; resetchanged - restore value of change line
 14666                                  ;
 14667                                  ;   inputs:	es:di points to current bds
 14668                                  ;   outputs:	none
 14669                                  ;   registers modified: none
 14670                                  ;---------------------------------------------------------------------------
 14671                                  
 14672                                  resetchanged:	
 14673                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh	
 14674                                  		; 10/12/2022
 14675 000019B6 26806523BF              		and	byte [es:di+23h], 0BFh
 14676                                  		;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 14677                                  					; ~fchanged
 14678 000019BB C3                      		retn
 14679                                  
 14680                                  ; =============== S U B	R O U T	I N E =======================================
 14681                                  
 14682                                  ;---------------------------------------------------------------------------
 14683                                  ; haschange - see if drive can supply change line
 14684                                  ;
 14685                                  ;   inputs:	es:di points to current bds
 14686                                  ;   outputs:	zero set - no change line available
 14687                                  ;		zero reset - change line available
 14688                                  ;   registers modified: none
 14689                                  ;---------------------------------------------------------------------------
 14690                                  
 14691                                  haschange:
 14692                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 14693                                  		; 10/12/2022
 14694 000019BC 26F6452302              		test	byte [es:di+23h], 2		
 14695                                  		;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 14696                                  					; fchangeline
 14697 000019C1 C3                      		retn
 14698                                  
 14699                                  ; ---------------------------------------------------------------------------
 14700                                  
 14701                                  ; 16/10/2022
 14702                                  
 14703                                  ;-------------------------------------------------------------------------
 14704                                  ; set_volume_id      -	main routine, calls other routines.
 14705                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 14706                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 14707                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 14708                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 14709                                  ;-------------------------------------------------------------------------
 14710                                  
 14711                                  ; set_volume_id
 14712                                  ;   if drive has changeline support, read in and set the volume_id
 14713                                  ; and the last fat_id byte. if no change line support then do nothing.
 14714                                  ;
 14715                                  ;   on entry:
 14716                                  ;	es:di points to the bds for this disk.
 14717                                  ;	ah contains media byte
 14718                                  ;
 14719                                  ;   on exit:
 14720                                  ;	carry clear:
 14721                                  ;	   successful call
 14722                                  ;	carry set
 14723                                  ;	   error and ax has error code
 14724                                  
 14725                                  set_volume_id:				
 14726 000019C2 52                      		push	dx		; save registers
 14727 000019C3 50                      		push	ax
 14728 000019C4 E8F5FF                  		call	haschange	; does drive have changeline support?
 14729 000019C7 740B                    		jz	short setvret	; no, get out
 14730 000019C9 E81000                  		call	read_volume_id
 14731 000019CC 7209                    		jb	short seterr
 14732 000019CE E8A200                  		call	transfer_volume_id ; copy the volume id	to special drive
 14733 000019D1 E8E2FF                  		call	resetchanged	; restore value	of change line
 14734                                  setvret:				
 14735                                  		; 10/12/2022
 14736                                  		; cf = 0
 14737                                  		;clc			; no error, clear carry flag
 14738 000019D4 58                      		pop	ax		; restore registers
 14739 000019D5 5A                      		pop	dx
 14740 000019D6 C3                      		retn
 14741                                  ; ---------------------------------------------------------------------------
 14742                                  
 14743                                  seterr:					
 14744 000019D7 5A                      		pop	dx		; pop stack but don't overwrite ax
 14745 000019D8 5A                      		pop	dx		; restore dx
 14746 000019D9 C3                      		retn
 14747                                  ; ---------------------------------------------------------------------------
 14748 000019DA 0000                    root_sec:	dw 0			; root sector #
 14749                                  
 14750                                  ; 16/10/2022
 14751                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 14752                                  ; 09/12/2022
 14753                                  ROOTSEC equ root_sec
 14754                                  
 14755                                  ; =============== S U B	R O U T	I N E =======================================
 14756                                  
 14757                                  ; 16/10/2022
 14758                                  
 14759                                  ; read_volume_id read the volume id and tells if it has been changed.
 14760                                  ;
 14761                                  ;   on entry:
 14762                                  ;	es:di points to current bds for drive.
 14763                                  ;
 14764                                  ;   on exit:
 14765                                  ;	carry clear
 14766                                  ;	    si = 1  no change
 14767                                  ;	    si = 0  ?
 14768                                  ;	    si = -1 change
 14769                                  ;
 14770                                  ;	carry set:
 14771                                  ;	    error and ax has error code.
 14772                                  
 14773                                  read_volume_id:
 14774 000019DC 52                      		push	dx		; preserve registers
 14775 000019DD 51                      		push	cx
 14776 000019DE 53                      		push	bx
 14777 000019DF 50                      		push	ax
 14778 000019E0 06                      		push	es		; stack the bds last
 14779 000019E1 57                      		push	di
 14780 000019E2 1E                      		push	ds		; point es to Bios_Data
 14781 000019E3 07                      		pop	es
 14782 000019E4 BF[AB08]                		mov	di, tmp_vid	; "NO NAME	 "
 14783 000019E7 BE[9F08]                		mov	si, nul_vid	; "NO NAME	 "
 14784 000019EA B90C00                  		mov	cx, 12		; initialize tmp_vid to	null vi_id
 14785 000019ED F3A4                    		rep movsb
 14786 000019EF 5F                      		pop	di
 14787 000019F0 07                      		pop	es
 14788 000019F1 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 14789                                  					; # of fats
 14790 000019F5 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 14791                                  					; sectors / fat
 14792 000019F9 F6E1                    		mul	cl		; size taken by	fats
 14793 000019FB 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 14794                                  					; add on reserved sectors
 14795                                  					;
 14796                                  					; ax is	now sector # (0	based)
 14797                                  		; 17/10/2022
 14798 000019FF 2EA3[DA19]              		mov	[cs:ROOTSEC], ax
 14799                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 14800                                  					; 0070h:3EFFh =	2C7h:198Fh
 14801 00001A03 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 14802                                  					; # root dir entries
 14803 00001A07 B104                    		mov	cl, 4		; 16 entries/sector
 14804 00001A09 D3E8                    		shr	ax, cl		; divide by 16
 14805 00001A0B 89C1                    		mov	cx, ax		; cx is	# of sectors to	scan
 14806                                  next_sec:				
 14807 00001A0D 51                      		push	cx		; save outer loop counter
 14808 00001A0E 2EA1[DA19]              		mov	ax, [cs:ROOTSEC]
 14809                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 14810                                  					; get sector #
 14811 00001A12 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 14812                                  					; sectors / track
 14813 00001A16 31D2                    		xor	dx, dx
 14814 00001A18 F7F1                    		div	cx
 14815                                  
 14816                                  ; set up registers for call to read_sector
 14817                                  
 14818 00001A1A 42                      		inc	dx		; dx= sectors into track
 14819                                  					; ax= track count from 0
 14820 00001A1B 88D1                    		mov	cl, dl		; sector to read
 14821 00001A1D 31D2                    		xor	dx, dx
 14822 00001A1F 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 14823                                  					; # heads on this disc
 14824 00001A23 88D6                    		mov	dh, dl		; head number
 14825 00001A25 88C5                    		mov	ch, al		; track	#
 14826 00001A27 E8EEED                  		call	read_sector	; get first sector of the root directory,
 14827                                  					; ds:bx	-> directory sector
 14828 00001A2A 7243                    		jb	short readviderr
 14829 00001A2C B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 14830 00001A2F B008                    		mov	al, 8		; volume label bit
 14831                                  fvid_loop:				
 14832 00001A31 803F00                  		cmp	byte [bx], 0 ; end of dir?
 14833 00001A34 7436                    		jz	short no_vid	; yes, no vol id
 14834 00001A36 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 14835 00001A39 7405                    		jz	short ent_loop	; yes, skip
 14836 00001A3B 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 14837 00001A3E 7511                    		jnz	short found_vid	; jmp yes
 14838                                  ent_loop:				
 14839 00001A40 83C320                  		add	bx, 32		; add length of	directory entry
 14840 00001A43 E2EC                    		loop	fvid_loop
 14841 00001A45 59                      		pop	cx		; outer loop
 14842 00001A46 2EFF06[DA19]            		inc	word [cs:ROOTSEC]
 14843                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 14844                                  					; next sector
 14845 00001A4B E2C0                    		loop	next_sec	; continue
 14846                                  notfound:				
 14847 00001A4D 31F6                    		xor	si, si
 14848 00001A4F EB16                    		jmp	short fvid_ret
 14849                                  ; ---------------------------------------------------------------------------
 14850                                  
 14851                                  found_vid:				
 14852 00001A51 59                      		pop	cx		; clean stack of outer loop counter
 14853 00001A52 89DE                    		mov	si, bx		; point	to volume_id
 14854 00001A54 06                      		push	es		; preserve current bds
 14855 00001A55 57                      		push	di
 14856 00001A56 1E                      		push	ds
 14857 00001A57 07                      		pop	es		; point es to Bios_Data
 14858 00001A58 BF[AB08]                		mov	di, tmp_vid	; "NO NAME	 "
 14859 00001A5B B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 14860                                  					; length of string minus nul
 14861 00001A5E F3A4                    		rep movsb		; mov volume label to tmp_vid
 14862 00001A60 30C0                    		xor	al, al
 14863 00001A62 AA                      		stosb			; null terminate
 14864 00001A63 31F6                    		xor	si, si
 14865 00001A65 5F                      		pop	di		; restore current bds
 14866 00001A66 07                      		pop	es
 14867                                  fvid_ret:				
 14868 00001A67 58                      		pop	ax
 14869                                  		; 10/12/2022
 14870                                  		; cf = 0
 14871                                  		;clc
 14872                                  rvidret:				
 14873 00001A68 5B                      		pop	bx		; restore registers
 14874 00001A69 59                      		pop	cx
 14875 00001A6A 5A                      		pop	dx
 14876 00001A6B C3                      		retn
 14877                                  ; ---------------------------------------------------------------------------
 14878                                  
 14879                                  no_vid:					
 14880 00001A6C 59                      		pop	cx		; clean stack of outer loop counter
 14881 00001A6D EBDE                    		jmp	short notfound	; not found
 14882                                  ; ---------------------------------------------------------------------------
 14883                                  
 14884                                  readviderr:				
 14885 00001A6F 5E                      		pop	si		; trash the outer loop counter
 14886 00001A70 5E                      		pop	si		; caller's ax, return error code instead 
 14887 00001A71 EBF5                    		jmp	short rvidret
 14888                                  
 14889                                  ; =============== S U B	R O U T	I N E =======================================
 14890                                  
 14891                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 14892                                  ;
 14893                                  ; inputs:	es:di has current bds
 14894                                  ; outputs:	bds for drive has volume id from tmp
 14895                                  
 14896                                  transfer_volume_id:	
 14897 00001A73 57                      		push	di		; copy the volume id from tmp to special drive
 14898 00001A74 56                      		push	si
 14899 00001A75 51                      		push	cx
 14900 00001A76 BE[AB08]                		mov	si, tmp_vid	; "NO NAME	 "
 14901                                  		;add	di, BDS.volid
 14902 00001A79 83C74B                  		add	di, 75		; BDS.volid
 14903                                  		;mov	cx, VOLID_SIZ
 14904 00001A7C B90C00                  		mov	cx, 12		; VOLID_SIZ
 14905 00001A7F FC                      		cld
 14906 00001A80 F3A4                    		rep movsb
 14907 00001A82 59                      		pop	cx
 14908 00001A83 5E                      		pop	si
 14909 00001A84 5F                      		pop	di
 14910 00001A85 C3                      		retn
 14911                                  
 14912                                  ; =============== S U B	R O U T	I N E =======================================
 14913                                  
 14914                                  ;  check_volume_id - compare volume id in tmp area with
 14915                                  ;		     one expected for drive
 14916                                  ;
 14917                                  ;   inputs:	es:di has current bds for drive
 14918                                  ;   outputs:	zero true means it matched
 14919                                  
 14920                                  check_volume_id:	
 14921 00001A86 57                      		push	di
 14922 00001A87 51                      		push	cx
 14923 00001A88 BE[AB08]                		mov	si, tmp_vid	; "NO NAME	 "
 14924                                  		;add	di, BDS.volid
 14925 00001A8B 83C74B                  		add	di, 75		; BDS.volid
 14926                                  		;mov	cx, VOLID_SIZ
 14927 00001A8E B90C00                  		mov	cx, 12		; VOLID_SIZ
 14928 00001A91 FC                      		cld
 14929 00001A92 F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 14930 00001A94 59                      		pop	cx
 14931 00001A95 5F                      		pop	di
 14932 00001A96 C3                      		retn
 14933                                  
 14934                                  ; =============== S U B	R O U T	I N E =======================================
 14935                                  
 14936                                  ;   fat_check - see of the fatid has changed in the specified drive.
 14937                                  ;	      - uses the fat id obtained from the boot sector.
 14938                                  ;
 14939                                  ;   inputs:	medbyt is expected fat id
 14940                                  ;		es:di points to current bds
 14941                                  ;
 14942                                  ;   output:	si = -1 if fat id different,
 14943                                  ;		si = 0 otherwise
 14944                                  ;
 14945                                  ;   no other registers changed.
 14946                                  
 14947                                  fat_check:		
 14948 00001A97 50                      		push	ax
 14949 00001A98 31F6                    		xor	si, si		; say fat id's are same.
 14950 00001A9A A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 14951 00001A9D 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 14952                                  					; compare it with the bds medbyte
 14953 00001AA1 7401                    		jz	short okret1	; carry	clear
 14954 00001AA3 4E                      		dec	si
 14955                                  okret1:					
 14956 00001AA4 58                      		pop	ax
 14957 00001AA5 C3                      		retn
 14958                                  
 14959                                  ; ---------------------------------------------------------------------------
 14960                                  
 14961                                  ; BIOSCODE:1A69h (MSDOS 6.21, IO.SYS)
 14962                                  		;times 7 db 0
 14963                                  
 14964                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)	
 14965                                  
 14966                                  		; 09/12/2022
 14967                                  		;times 4 db 0	; 17/10/2022
 14968                                  		;db 4 dup(0)	; times 4 db 0
 14969                                  
 14970                                  ; ---------------------------------------------------------------------------
 14971                                  
 14972                                  		; 09/12/2022
 14973                                  		;db 0
 14974                                  
 14975                                  number2div	equ ($-BCode_start)
 14976                                  number2mod	equ (number2div % 16)
 14977                                  
 14978                                  %if number2mod>0 & number2mod<16
 14979 00001AA6 00<rep Ah>              		times (16-number2mod) db 0
 14980                                  %endif
 14981                                  
 14982                                  ;align 16
 14983                                  
 14984                                  ; 09/12/2022
 14985                                  BCODE_END	equ $ - BCode_start
 14986                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 14987                                  ; 13/12/2022
 14988                                  SYSINITOFFSET	equ BCODE_END
 14989                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 14990                                  
 14991                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 14992                                  
 14993                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14994                                  ; 01/05/2019 - Retro DOS v4.0 
 14995                                  ; ============================================================================
 14996                                  ; end of BIOSCODE
 14997                                  
 14998                                  ; ----------------------------------------------------------------------------
 14999                                  ; %include sysinit5.s	; 09/12/2022
 15000                                  ; ----------------------------------------------------------------------------
 15001                                  
 15002                                  ;=============================================================================
 15003                                  ; (IO.SYS) SYSINIT SEGMENT 
 15004                                  ;=============================================================================
 15005                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 15006                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 15007                                  
 15008                                  section .SYSINIT vstart=0
 15009                                  
 15010                                  ; ****************************************************************************
 15011                                  ; SYSINIT.BIN (MSDOS 6.21 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 15012                                  ; ----------------------------------------------------------------------------
 15013                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 30/12/2022))
 15014                                  ; ----------------------------------------------------------------------------
 15015                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 15016                                  ; ----------------------------------------------------------------------------
 15017                                  ; Assembler: NASM version 2.15
 15018                                  ; ----------------------------------------------------------------------------
 15019                                  ;	   ((nasm sysinit6.s -l sysinit6.lst -o SYSINIT6.BIN -Z error.txt)) 	
 15020                                  ; ----------------------------------------------------------------------------
 15021                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 15022                                  ; ----------------------------------------------------------------------------
 15023                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 15024                                  ; source code by Microsoft, 1991 
 15025                                  ; ----------------------------------------------------------------------------
 15026                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 15027                                  ; by Microsoft, 12/10/1983
 15028                                  ; ****************************************************************************
 15029                                  ; main file: 'retrodos4.s'
 15030                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 15031                                  
 15032                                  ; 30/12/2022 - Retro DOS v4.2 
 15033                                  ; Retro DOS v4.0 - 2019
 15034                                  ; SYSINIT (MSDOS 6.21 IO.SYS) draft: 'sysinit3.s' (01/07/2019)
 15035                                   
 15036                                  ; 21/10/2022
 15037                                  ; ----------------------------------------------------------------------------
 15038                                  ; This source code (version) is based on SYSINIT source code of disassembled
 15039                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 15040                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 15041                                  ; ----------------------------------------------------------------------------
 15042                                  ; Binary file splitter & joiner: FFSJ v3.3
 15043                                  
 15044                                  ;--------------------------------------------------------------
 15045                                  ; SYSINIT.TXT (27/01/1983)
 15046                                  ;--------------------------------------------------------------
 15047                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 15048                                  ;over  the  system  initialization  after  the  OEM  bios   has
 15049                                  ;performed any  initialization  it  needs  to  do.   Control is
 15050                                  ;transfered with a long jump to the external  variable  SYSINIT
 15051                                  ;
 15052                                  ;
 15053                                  ;   The OEM  has  the  following  variables declared external:
 15054                                  ;
 15055                                  ;   CURRENT_DOS_LOCATION    WORD
 15056                                  ;
 15057                                  ;This word  contains  the  segment  number of the DOS before it
 15058                                  ;is relocated.  The OEM bios must set this value.
 15059                                  ;
 15060                                  ;   FINAL_DOS_LOCATION      WORD
 15061                                  ;
 15062                                  ;This word contains the segment number of the DOS after SYSINIT
 15063                                  ;moves it.  The OEM bios must set this value.
 15064                                  ;
 15065                                  ;   DEVICE_LIST             DWORD
 15066                                  ;
 15067                                  ;This  double  word  pointer  points  to  the  linked  list  of
 15068                                  ;character and block device drivers.  The  OEM  must  set  this
 15069                                  ;value.
 15070                                  ;
 15071                                  ;   MEMORY_SIZE             WORD
 15072                                  ;
 15073                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 15074                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 15075                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 15076                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 15077                                  ;and read it back until it gets a mismatch.
 15078                                  ;
 15079                                  ;   DEFAULT_DRIVE           BYTE
 15080                                  ;
 15081                                  ;This is  the initial default drive when the system first comes
 15082                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 15083                                  ;it then drive a is assumed.
 15084                                  ;
 15085                                  ;   BUFFERS                 BYTE
 15086                                  ;
 15087                                  ;This is  the  default  number of buffers for the system.  This
 15088                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 15089                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 15090                                  ;
 15091                                  ;   FILES                   BYTE
 15092                                  ;
 15093                                  ;This is  the  default  number  of  files for the system.  This
 15094                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 15095                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 15096                                  ;
 15097                                  ;   SYSINIT                 FAR
 15098                                  ;
 15099                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 15100                                  ;this label at the end of its INIT code.
 15101                                  ;
 15102                                  ;   The OEM  has  the  following  variables declared public:
 15103                                  ;
 15104                                  ;   RE_INIT                 FAR
 15105                                  ;
 15106                                  ;This is an entry point which allows the BIOS to do some INIT
 15107                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 15108                                  ;PRESERVED.  On entry DS points to the first available memory
 15109                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 15110                                  ;prefix which represents  the  "program"  currently  running.
 15111                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 15112                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 15113                                  ;that  no  memory  is  allocated to it, it is running in free
 15114                                  ;memory.
 15115                                  ;NOTES:
 15116                                  ;     At the time this routine is called SYSINIT occupies the
 15117                                  ;highest 10K of memory ("highest" is determined by the  value
 15118                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 15119                                  ;     Since this is called AFTER DOS is initialized, you can
 15120                                  ;make system calls.  This also implies that the code for this
 15121                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 15122                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 15123                                  ;     If you don't want  anything done just set this to point
 15124                                  ;at a FAR RET instruction.
 15125                                  
 15126                                  ; ----------------------------------------------------------------------
 15127                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 15128                                  ; ----------------------------------------------------------------------
 15129                                  
 15130                                  ;include version.inc
 15131                                  ; ----------------------------------------------------------------------
 15132                                  
 15133                                  ;FALSE   EQU     0
 15134                                  ;TRUE    EQU     0FFFFh
 15135                                  
 15136                                  ;IBMVER	    EQU     TRUE
 15137                                  ;IBMCOPYRIGHT EQU   FALSE
 15138                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 15139                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 15140                                  ;MSVER      EQU     FALSE
 15141                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 15142                                  ;KANJI      EQU     FALSE
 15143                                  
 15144                                  ;(MSDOS 6.0, versiona.inc, 1991)
 15145                                  ; ----------------------------------------------------------------------
 15146                                  ;MAJOR_VERSION  EQU	6
 15147                                  ;;MINOR_VERSION	EQU	0	;6.00
 15148                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 15149                                  
 15150                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 15151                                  ; ----------------------------------------------------------------------
 15152                                  ;MAJOR_VERSION   EQU	5
 15153                                  ;MINOR_VERSION   EQU	0
 15154                                  
 15155                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21)
 15156                                  MAJOR_VERSION   EQU	6
 15157                                  MINOR_VERSION   EQU	22
 15158                                  
 15159                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 15160                                  
 15161                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 15162                                  				; currently 0.
 15163                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 15164                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 15165                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 15166                                  
 15167                                  ;      if1
 15168                                  ;      %OUT  ... for DOS Version 5.00 ...
 15169                                  ;      endif
 15170                                  
 15171                                         ;******************************
 15172                                         ;Each assembler program should:
 15173                                         ;  mov ah,030h                   ;DOS Get Version function
 15174                                         ;  int 021h                      ;Version ret. in AX,minor version first
 15175                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 15176                                         ;  jne error_handler             ; EXACT version match.
 15177                                         ;******************************
 15178                                  
 15179                                  ; ----------------------------------------------------------------------
 15180                                  ; device definitions
 15181                                  
 15182                                  ;Attribute bit masks
 15183                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 15184                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 15185                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 15186                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 15187                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 15188                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 15189                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 15190                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 15191                                  
 15192                                  ; The device table list has the form:
 15193                                  struc	SYSDEV
 15194 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 15195 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 15196 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 15197 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 15198 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 15199                                  .size:
 15200                                  endstruc
 15201                                  
 15202                                  ;Static Reguest Header
 15203                                  struc	SRHEAD
 15204 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 15205 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 15206 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 15207 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 15208 00000005 ????????????????                	resb 8		;Reserved for queue links
 15209                                  .size:
 15210                                  endstruc
 15211                                  
 15212                                  ;Status word masks
 15213                                  STERR   EQU     8000H           ;Bit 15 - Error
 15214                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 15215                                  STDON   EQU     0100H           ;Bit 8 - Done
 15216                                  STECODE EQU     00FFH           ;Error code
 15217                                  WRECODE EQU     0
 15218                                  
 15219                                  ;Function codes
 15220                                  DEVINIT EQU     0               ;Initialization
 15221                                  DINITHL EQU     26              ;Size of init header
 15222                                  DEVMDCH EQU     1               ;Media check
 15223                                  DMEDHL  EQU     15              ;Size of media check header
 15224                                  DEVBPB  EQU     2               ;Get BPB
 15225                                  DEVRDIOCTL EQU  3               ;IOCTL read
 15226                                  DBPBHL  EQU     22              ;Size of Get BPB header
 15227                                  DEVRD   EQU     4               ;Read
 15228                                  DRDWRHL EQU     22              ;Size of RD/WR header
 15229                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 15230                                  DRDNDHL EQU     14              ;Size of non destructive read header
 15231                                  DEVIST  EQU     6               ;Input status
 15232                                  DSTATHL EQU     13              ;Size of status header
 15233                                  DEVIFL  EQU     7               ;Input flush
 15234                                  DFLSHL  EQU     15              ;Size of flush header
 15235                                  DEVWRT  EQU     8               ;Write
 15236                                  DEVWRTV EQU     9               ;Write with verify
 15237                                  DEVOST  EQU     10              ;Output status
 15238                                  DEVOFL  EQU     11              ;Output flush
 15239                                  DEVWRIOCTL EQU  12              ;IOCTL write
 15240                                  
 15241                                  ; ----------------------------------------------------------------------
 15242                                  struc	SYS_FCB
 15243 00000000 ??                      .fcb_drive:	resb 1
 15244 00000001 ????????????????        .fcb_name:	resb 8
 15245 00000009 ??????                  .fcb_ext:	resb 3
 15246 0000000C ????                    .fcb_EXTENT:	resw 1
 15247 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 15248 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 15249                                                          ; word
 15250 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 15251 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 15252 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 15253 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 15254                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 15255                                                          ; If file, bit 6=0 if dirty
 15256                                                          ; If I/O device, bit 6=0 if EOF (input)
 15257                                                          ;               Bit 5=1 if Raw mode
 15258                                                          ;               Bit 0=1 if console input device
 15259                                                          ;               Bit 1=1 if console output device
 15260                                                          ;               Bit 2=1 if null device
 15261                                                          ;               Bit 3=1 if clock device
 15262 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 15263 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 15264 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 15265 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 15266 00000020 ??                      .fcb_NR:	resb 1	; Next record
 15267 00000021 ????????                .fcb_RR:	resb 4	; Random record
 15268                                  .size:
 15269                                  endstruc
 15270                                  
 15271                                  ; ----------------------------------------------------------------------
 15272                                  ; Field definition for I/O buffer information
 15273                                  
 15274                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 15275                                  
 15276                                  struc buffinfo
 15277 00000000 ????                    .buf_next:	resw 1	; Pointer to next buffer in list
 15278 00000002 ????                    .buf_prev:	resw 1	; Pointer to previous buffer in list
 15279 00000004 ??                      .buf_ID:	resb 1	; Drive of buffer (bit 7 = 0)
 15280                                  			; SFT table index (bit 7 = 1)
 15281                                  			; = FFh if buffer free
 15282 00000005 ??                      .buf_flags:	resb 1	; Bit 7 = 1 if Remote file buffer
 15283                                  			;	= 0 if Local device buffer
 15284                                  			; Bit 6 = 1 if buffer dirty
 15285                                  			; Bit 5 = Reserved
 15286                                  			; Bit 4 = Search bit (bit 7 = 1)
 15287                                  			; Bit 3 = 1 if buffer is DATA
 15288                                  			; Bit 2 = 1 if buffer is DIR
 15289                                  			; Bit 1 = 1 if buffer is FAT
 15290                                  			; Bit 0 = Reserved
 15291 00000006 ????????                .buf_sector:	resd 1	; Sector number of buffer (bit 7 = 0)
 15292                                  ; The next two items are often refed as a word (bit 7 = 0)
 15293 0000000A ??                      .buf_wrtcnt:	resb 1	; For FAT sectors, # times sector written out
 15294 0000000B ????                    .buf_wrtcntinc:	resw 1	; "   "     "   , # sectors between each write
 15295 0000000D ????????                .buf_DPB :	resd 1	; Pointer to drive parameters
 15296 00000011 ????                    .buf_fill:	resw 1	; How full buffer is (bit 7 = 1)
 15297 00000013 ??                      .buf_reserved:	resb 1	; make DWORD boundary for 386
 15298                                  .size:
 15299                                  endstruc
 15300                                  
 15301                                  %define buf_offset	dword [buf_sector]
 15302                                  			;For bit 7 = 1, this is the byte
 15303                                  			;offset of the start of the buffer in
 15304                                  			;the file pointed to by buf_ID.  Thus
 15305                                  			;the buffer starts at location
 15306                                  			;buf_offset in the file and contains
 15307                                  			;buf_fill bytes.
 15308                                  
 15309                                  bufinsiz	equ	buffinfo.size ; ; Size of structure in bytes
 15310                                  
 15311                                  
 15312                                  buf_Free	equ	0FFh		; buf_id of free buffer
 15313                                  
 15314                                  ;Flag byte masks
 15315                                  buf_isnet	EQU	10000000B
 15316                                  buf_dirty	EQU	01000000B
 15317                                  ;***
 15318                                  buf_visit	EQU	00100000B
 15319                                  ;***
 15320                                  buf_snbuf	EQU	00010000B
 15321                                  
 15322                                  buf_isDATA	EQU	00001000B
 15323                                  buf_isDIR	EQU	00000100B
 15324                                  buf_isFAT	EQU	00000010B
 15325                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 15326                                  
 15327                                  buf_NetID	EQU	bufinsiz
 15328                                  
 15329                                  ; ----------------------------------------------------------------------
 15330                                  
 15331                                  ; ----------------------------------------------------------------------
 15332                                  ;**	DPB - Drive Parameter Block
 15333                                  
 15334                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 15335                                  
 15336                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 15337                                  ;	possibly inaccurate deductions from code study... - jgl
 15338                                  ;
 15339                                  ;	The DPB is DOS's main structure for describing block devices.
 15340                                  ;	It contains info about the "Drive" intermingled with info about
 15341                                  ;	the FAT file system which is presumably on the drive.  I don't know
 15342                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 15343                                  ;
 15344                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 15345                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 15346                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 15347                                  
 15348                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 15349                                  
 15350                                  ; 12/05/2019 - Retro DOS v4.0
 15351                                  
 15352                                  struc	DPB
 15353 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 15354 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
 15355 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 15356 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 15357 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 15358 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
 15359 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
 15360 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
 15361 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
 15362 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 15363                                  ;.FAT_SIZE:	resb 1  ; MSDOS 3.3
 15364 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 15365 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
 15366 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
 15367 00000017 ??                      .MEDIA:		resb 1		; Media byte
 15368 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 15369                                  				; check the first time this DPB is used
 15370 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 15371 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 15372 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 15373                                  .size:
 15374                                  endstruc
 15375                                  
 15376                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 15377                                  
 15378                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 15379                                  
 15380                                  ; ----------------------------------------------------------------------
 15381                                  ; 26/03/2018
 15382                                  
 15383                                  ; IOCTL SUB-FUNCTIONS
 15384                                  IOCTL_GET_DEVICE_INFO	EQU	0
 15385                                  IOCTL_SET_DEVICE_INFO	EQU	1
 15386                                  IOCTL_READ_HANDLE	EQU	2
 15387                                  IOCTL_WRITE_HANDLE	EQU	3
 15388                                  IOCTL_READ_DRIVE	EQU	4
 15389                                  IOCTL_WRITE_DRIVE	EQU	5
 15390                                  IOCTL_GET_INPUT_STATUS	EQU	6
 15391                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 15392                                  IOCTL_CHANGEABLE?	EQU	8
 15393                                  IOCTL_SHARING_RETRY	EQU	11
 15394                                  GENERIC_IOCTL_HANDLE	EQU	12
 15395                                  GENERIC_IOCTL		EQU	13
 15396                                  
 15397                                  ; GENERIC IOCTL SUB-FUNCTIONS
 15398                                  RAWIO			EQU	8
 15399                                  
 15400                                  ; RAWIO SUB-FUNCTIONS
 15401                                  GET_DEVICE_PARAMETERS	EQU	60H
 15402                                  SET_DEVICE_PARAMETERS	EQU	40H
 15403                                  READ_TRACK		EQU	61H
 15404                                  WRITE_TRACK		EQU	41H
 15405                                  VERIFY_TRACK		EQU	62H
 15406                                  FORMAT_TRACK		EQU	42H
 15407                                  
 15408                                  ; DEVICETYPE VALUES
 15409                                  MAX_SECTORS_IN_TRACK	EQU	63
 15410                                  DEV_5INCH		EQU	0
 15411                                  DEV_5INCH96TPI		EQU	1
 15412                                  DEV_3INCH720KB		EQU	2
 15413                                  DEV_8INCHSS		EQU	3
 15414                                  DEV_8INCHDS		EQU	4
 15415                                  DEV_HARDDISK		EQU	5
 15416                                  DEV_OTHER		EQU	7
 15417                                  ;DEV_3INCH1440KB	EQU	7
 15418                                  DEV_3INCH2880KB		EQU	9
 15419                                  ; Retro DOS v2.0 - 26/03/2018
 15420                                  ;;DEV_TAPE		EQU	6
 15421                                  ;;DEV_ERIMO		EQU	8
 15422                                  ;DEV_3INCH2880KB	EQU	9
 15423                                  DEV_3INCH1440KB		EQU	10
 15424                                  
 15425                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 15426                                  					; CURRENTLY SUPPORT.
 15427                                  MAX_DEV_TYPE		EQU	10
 15428                                  
 15429                                  struc A_SECTORTABLE
 15430 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 15431 00000002 ????                    .ST_SECTORSIZE:		resw	1
 15432                                  .size:
 15433                                  endstruc
 15434                                  
 15435                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
 15436                                  
 15437                                  ;**	BIOS PARAMETER BLOCK DEFINITION
 15438                                  ;
 15439                                  ;	The BPB contains information about the disk structure.  It dates
 15440                                  ;	back to the earliest FAT systems and so FAT information is
 15441                                  ;	intermingled with physical driver information.
 15442                                  ;
 15443                                  ;	A boot sector contains a BPB for its device; for other disks
 15444                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
 15445                                  ;	information in the DPB.
 15446                                  ;
 15447                                  ;	The BDS structure contains a BPB within it.
 15448                                  
 15449                                  struc A_BPB
 15450 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
 15451 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
 15452 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
 15453 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
 15454 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
 15455 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
 15456 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
 15457 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
 15458 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
 15459 0000000F ????                    .BPB_HEADS:		resw	1
 15460 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
 15461 00000013 ????                    			resw	1
 15462 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
 15463 00000017 ????                    			resw	1
 15464 00000019 ????????????            			resb	6	; NOTE:  many times these
 15465                                  ;					; 	 6 bytes are omitted
 15466                                  ;					;	 when BPB manipulations
 15467                                  ;					;	 are performed!
 15468                                  .size:
 15469                                  endstruc
 15470                                  
 15471                                  struc A_DEVICEPARAMETERS
 15472 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
 15473 00000001 ??                      .DP_DEVICETYPE:		resb	1
 15474 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
 15475 00000004 ????                    .DP_CYLINDERS:		resw	1
 15476 00000006 ??                      .DP_MEDIATYPE:		resb	1
 15477 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
 15478 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
 15479 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 15480                                  endstruc
 15481                                  
 15482                                  ; ----------------------------------------------------------------------
 15483                                  ; structure, equates for devmark for mem command.
 15484                                  
 15485                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 15486                                  
 15487                                  struc devmark
 15488 00000000 ??                       .id:	    resb 1
 15489 00000001 ????                     .seg:	    resw 1
 15490 00000003 ????                     .size:	    resw 1
 15491 00000005 ??????                   .dum:	    resb 3
 15492 00000008 ????????????????         .filename: resb 8
 15493                                  endstruc
 15494                                  
 15495                                  devmark_stk	equ	'S'
 15496                                  devmark_device	equ	'D'
 15497                                  devmark_ifs	equ	'I'
 15498                                  devmark_buf	equ	'B'
 15499                                  devmark_cds	equ	'L' ; lastdrive
 15500                                  devmark_files	equ	'F'
 15501                                  devmark_fcbs	equ	'X'
 15502                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 15503                                  devmark_ems_stub equ	'E'
 15504                                  
 15505                                  setbrkdone	equ	00000001b
 15506                                  for_devmark	equ	00000010b
 15507                                  not_for_devmark equ	11111101b
 15508                                  
 15509                                  ; ----------------------------------------------------------------------
 15510                                  ; Memory arena structure
 15511                                  
 15512                                  ; 24/03/2019 - Retro DOS v4.0 
 15513                                  ; (MSDOS 6.0, ARENA.INC)
 15514                                  
 15515                                  ;** Arena Header
 15516                                  
 15517                                  struc ARENA
 15518 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 15519 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 15520 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 15521 00000005 ??????                  .RESERVED	resb 3		; reserved
 15522 00000008 ????????????????        .NAME:		resb 8		; owner file name
 15523                                  endstruc
 15524                                  
 15525                                  ; 12/04/2019
 15526                                  
 15527                                  arena_owner_system	EQU 0	; free block indication
 15528                                  
 15529                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 15530                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 15531                                  
 15532                                  ; ----------------------------------------------------------------------
 15533                                  ; Process data block (otherwise known as program header)
 15534                                  
 15535                                  ; 23/03/2019 - Retro DOS v4.0
 15536                                  
 15537                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 15538                                  
 15539                                  FILPERPROC	EQU     20
 15540                                  
 15541                                  struc PDB	; Process_data_block
 15542 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 15543 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 15544 00000004 ??                                      resb 1
 15545 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 15546 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 15547 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 15548 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 15549 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 15550 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 15551 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 15552 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 15553 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 15554 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 15555 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 15556 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 15557 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 15558 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 15559 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 15560 00000042 <res Eh>                .PAD1:		resb 14		; 	
 15561 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 15562 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 15563 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 15564 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 15565 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 15566 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 15567                                  ;.size:
 15568                                  endstruc
 15569                                  
 15570                                  ; ----------------------------------------------------------------------
 15571                                  ; <system call definitions>
 15572                                  
 15573                                  ; 23/03/2019 - Retro DOS v4.0
 15574                                  
 15575                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 15576                                  
 15577                                  ABORT                           EQU 0   ;  0      0
 15578                                  STD_CON_INPUT                   EQU 1   ;  1      1
 15579                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 15580                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 15581                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 15582                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 15583                                  RAW_CON_IO                      EQU 6   ;  6      6
 15584                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 15585                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 15586                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 15587                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 15588                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 15589                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 15590                                  DISK_RESET                      EQU 13  ; 13      D
 15591                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 15592                                  FCB_OPEN                        EQU 15  ; 15      F
 15593                                  FCB_CLOSE                       EQU 16  ; 16     10
 15594                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 15595                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 15596                                  FCB_DELETE                      EQU 19  ; 19     13
 15597                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 15598                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 15599                                  FCB_CREATE                      EQU 22  ; 22     16
 15600                                  FCB_RENAME                      EQU 23  ; 23     17
 15601                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 15602                                  SET_DMA                         EQU 26  ; 26     1A
 15603                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 15604                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 15605                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 15606                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 15607                                  GET_FCB_POSITION                EQU 36  ; 36     24
 15608                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 15609                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 15610                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 15611                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 15612                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 15613                                  GET_DATE                        EQU 42  ; 42     2A
 15614                                  SET_DATE                        EQU 43  ; 43     2B
 15615                                  GET_TIME                        EQU 44  ; 44     2C
 15616                                  SET_TIME                        EQU 45  ; 45     2D
 15617                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 15618                                  ; Extended functionality group
 15619                                  GET_DMA                         EQU 47  ; 47     2F
 15620                                  GET_VERSION                     EQU 48  ; 48     30
 15621                                  KEEP_PROCESS                    EQU 49  ; 49     31
 15622                                  GET_DPB                         EQU 50  ; 50     32
 15623                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 15624                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 15625                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 15626                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 15627                                  CHAR_OPER                       EQU 55  ; 55     37
 15628                                  INTERNATIONAL                   EQU 56  ; 56     38
 15629                                  ;   Directory Group
 15630                                  MKDIR                           EQU 57  ; 57     39
 15631                                  RMDIR                           EQU 58  ; 58     3A
 15632                                  CHDIR                           EQU 59  ; 59     3B
 15633                                  ;   File Group
 15634                                  CREAT                           EQU 60  ; 60     3C
 15635                                  OPEN                            EQU 61  ; 61     3D
 15636                                  CLOSE                           EQU 62  ; 62     3E
 15637                                  READ                            EQU 63  ; 63     3F
 15638                                  WRITE                           EQU 64  ; 64     40
 15639                                  UNLINK                          EQU 65  ; 65     41
 15640                                  LSEEK                           EQU 66  ; 66     42
 15641                                  CHMOD                           EQU 67  ; 67     43
 15642                                  IOCTL                           EQU 68  ; 68     44
 15643                                  XDUP                            EQU 69  ; 69     45
 15644                                  XDUP2                           EQU 70  ; 70     46
 15645                                  CURRENT_DIR                     EQU 71  ; 71     47
 15646                                  ;    Memory Group
 15647                                  ALLOC                           EQU 72  ; 72     48
 15648                                  DEALLOC                         EQU 73  ; 73     49
 15649                                  SETBLOCK                        EQU 74  ; 74     4A
 15650                                  ;    Process Group
 15651                                  EXEC                            EQU 75  ; 75     4B
 15652                                  EXIT                            EQU 76  ; 76     4C
 15653                                  WAITPROCESS			EQU 77  ; 77     4D
 15654                                  FIND_FIRST                      EQU 78  ; 78     4E
 15655                                  ;   Special Group
 15656                                  FIND_NEXT                       EQU 79  ; 79     4F
 15657                                  ; SPECIAL SYSTEM GROUP
 15658                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 15659                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 15660                                  GET_IN_VARS                     EQU 82  ; 82     52
 15661                                  SETDPB                          EQU 83  ; 83     53
 15662                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 15663                                  DUP_PDB                         EQU 85  ; 85     55
 15664                                  RENAME                          EQU 86  ; 86     56
 15665                                  FILE_TIMES                      EQU 87  ; 87     57
 15666                                  ;
 15667                                  ALLOCOPER			EQU 88	; 88     58	
 15668                                  ; Network extention system calls
 15669                                  GetExtendedError		EQU 89	; 89	 59
 15670                                  CreateTempFile			EQU 90	; 90	 5A
 15671                                  CreateNewFile			EQU 91	; 91	 5B
 15672                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 15673                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 15674                                  					;	    CloseByName, CloseUser,
 15675                                  					;	    CloseUserProcess,
 15676                                  					;	    GetOpenFileList
 15677                                  UserOper			EQU 94	; 94	 5E Get and Set
 15678                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 15679                                  xNameTrans			EQU 96	; 96	 60
 15680                                  PathParse			EQU 97	; 97	 61
 15681                                  GetCurrentPSP			EQU 98	; 98	 62
 15682                                  Hongeul 			EQU 99	; 99	 63
 15683                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 15684                                  Set_Printer_Flag		EQU 100 ; 100	 64
 15685                                  GetExtCntry			EQU 101 ; 101	 65
 15686                                  GetSetCdPg			EQU 102 ; 102	 66
 15687                                  ExtHandle			EQU 103 ; 103	 67
 15688                                  Commit				EQU 104 ; 104	 68
 15689                                  GetSetMediaID			EQU 105 ; 105	 69
 15690                                  IFS_IOCTL			EQU 107 ; 107	 6B
 15691                                  ExtOpen 			EQU 108 ; 108	 6C
 15692                                  ;
 15693                                  ;ifdef ROMEXEC
 15694                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 15695                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 15696                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 15697                                  ;endif
 15698                                  ;
 15699                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 15700                                  OEM_C1				EQU 249 ; 249	 F9
 15701                                  OEM_C2				EQU 250 ; 250	 FA
 15702                                  OEM_C3				EQU 251 ; 251	 FB
 15703                                  OEM_C4				EQU 252 ; 252	 FC
 15704                                  OEM_C5				EQU 253 ; 253	 FD
 15705                                  OEM_C6				EQU 254 ; 254	 FE
 15706                                  OEM_C7				EQU 255 ; 255	 FF
 15707                                  
 15708                                  ; ----------------------------------------------------------------------
 15709                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 15710                                  ; ----------------------------------------------------------------------
 15711                                  
 15712                                  ;;	IF	STACKSW
 15713                                  
 15714                                  ;;
 15715                                  ;; Internal Stack Parameters
 15716                                  ;EntrySize		equ	8
 15717                                  ;
 15718                                  ;MinCount		equ	8
 15719                                  ;DefaultCount		equ	9
 15720                                  ;MaxCount		equ	64
 15721                                  ;
 15722                                  ;MinSize 		equ	32
 15723                                  ;DefaultSize		equ	128
 15724                                  ;MaxSize 		equ	512
 15725                                  
 15726                                  ;;	ENDIF
 15727                                  
 15728                                  ; ----------------------------------------------------------------------
 15729                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 15730                                  ; ----------------------------------------------------------------------
 15731                                  					  ;;Rev 3.30 Modification
 15732                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 15733                                  									  
 15734                                  ;*******************************					  
 15735                                  ;System Service call ( Int 15h )					  
 15736                                  ;*******************************					  
 15737                                  ;Function AH = 0C0h, Return system configuration			  
 15738                                  ;For PC and PCJR on return:						  
 15739                                  ;	(AH)	= 80h							  
 15740                                  ;	(CY)	= 1							  
 15741                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 15742                                  ;	(AH)	= 86h							  
 15743                                  ;	(CY)	= 1							  
 15744                                  ;For all others:							  
 15745                                  ;	(AH)	= 0							  
 15746                                  ;	(CY)	= 0							  
 15747                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 15748                                  ; System descriptor :							  
 15749                                  ;	DW	xxxx		length of descriptor in bytes,		  
 15750                                  ;				minimum length = 8			  
 15751                                  ;	DB	xx		model byte				  
 15752                                  ;				0FFh	= PC				  
 15753                                  ;				0FEh	= PC/XT, Portable		  
 15754                                  ;				0FDh	= PC/JR 			  
 15755                                  ;				0FCh	= PC/AT				  
 15756                                  ;				0F9h	= Convertable			  
 15757                                  ;				0F8h	= Model 80			  
 15758                                  ;				0E0 thru 0EFh = reserved		  
 15759                                  ;									  
 15760                                  ;	DB	xx		secondary model byte			  
 15761                                  ;				000h	= PC1				  
 15762                                  ;				000h	= PC/XT, Portable		  
 15763                                  ;				000h	= PC/JR 			  
 15764                                  ;				000h	= PC/AT 			  
 15765                                  ;				001h	= PC/AT Model 339		  
 15766                                  ;				003h	= PC/RT				  
 15767                                  ;				000h	= Convertable			  
 15768                                  ;									  
 15769                                  ;	DB	xx		bios revision level			  
 15770                                  ;				00 for first release, subsequent release  
 15771                                  ;				of code with same model byte and	  
 15772                                  ;				secondary model byte require revison level
 15773                                  ;				to increase by one.			  
 15774                                  ;									  
 15775                                  ;	DB	xx		feature information byte 1		  
 15776                                  ;				X0000000 = 1, bios use DMA channel 3	  
 15777                                  ;					 = 0, DMA channel 3 not used	  
 15778                                  ;									  
 15779                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 15780                                  ;					 = 0, 2nd Interrupt chip not present
 15781                                  ;									  
 15782                                  ;				00X00000 = 1, Real Time Clock present	  
 15783                                  ;					 = 0, Real Time Clock not present 
 15784                                  ;									  
 15785                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 15786                                  ;						called in keyboard interrupt
 15787                                  ;						(Int 09h).		  
 15788                                  ;					 = 0, Keyboard escape sequence not
 15789                                  ;						called. 		  
 15790                                  ;				0000XXXX reserved			  
 15791                                  ;									  
 15792                                  ;	DB	xx		feature information byte 2 - reserved	  
 15793                                  ;									  
 15794                                  ;	DB	xx		feature information byte 2 - reserved	  
 15795                                  ;									  
 15796                                  ;	DB	xx		feature information byte 2 - reserved	  
 15797                                  ;									  
 15798                                  ;	DB	xx		feature information byte 2 - reserved	  
 15799                                  ;									  
 15800                                  
 15801                                  ; 22/03/2019									  
 15802                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
 15803 00000000 ????                    .bios_sd_leng:		resw 1				  
 15804 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
 15805                                  .bios_sd_scnd_modelbyte: 
 15806 00000003 ??                      			resb 1					  
 15807 00000004 ??                      			resb 1					  
 15808 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
 15809 00000006 ????????                			resb 4					  
 15810                                  endstruc					  
 15811                                  									  
 15812                                  ;FeatureByte1	bit map equates 					  
 15813                                  DMAchannel3		equ 10000000b					  
 15814                                  ScndIntController	equ 01000000b					  
 15815                                  RealTimeClock		equ 00100000b					  
 15816                                  KeyEscapeSeq		equ 00010000b					  
 15817                                  					;;End of Modification
 15818                                  
 15819                                  ; ----------------------------------------------------------------------
 15820                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 15821                                  ; ----------------------------------------------------------------------
 15822                                  ; 22/03/2019 - Retro DOS v4.0
 15823                                  
 15824                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 15825                                  
 15826                                  struc SysInitVars
 15827                                  ; MSDOS 3.3
 15828 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 15829 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 15830 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 15831 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 15832 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 15833 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 15834 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 15835 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 15836 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 15837 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 15838 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 15839 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 15840                                  ; MSDOS 6.0
 15841 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 15842 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 15843 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 15844 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 15845                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 15846 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 15847 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 15848 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 15849 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 15850 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 15851 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 15852 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 15853                                  .size:
 15854                                  endstruc
 15855                                  
 15856                                  ;This is added for more information exchage between DOS, BIOS.
 15857                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 15858                                  
 15859                                  ; 22/03/2019
 15860                                  struc SysInitVars_Ext
 15861 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 15862 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 15863                                  endstruc
 15864                                  
 15865                                  ; 09/06/2018
 15866                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 15867                                  SYSI_DPB    equ	0
 15868                                  SYSI_SFT    equ 4
 15869                                  SYSI_CLOCK  equ 8
 15870                                  SYSI_CON    equ 12
 15871                                  SYSI_MAXSEC equ 16
 15872                                  SYSI_BUF    equ 18 		
 15873                                  SYSI_CDS    equ 22
 15874                                  SYSI_FCB    equ 26
 15875                                  SYSI_KEEP   equ 30
 15876                                  SYSI_NUMIO  equ	32
 15877                                  SYSI_NCDS   equ	33
 15878                                  SYSI_DEV    equ 34
 15879                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 15880                                  SYSI_ATTR	  equ 38
 15881                                  SYSI_STRAT	  equ 40
 15882                                  SYSI_INTER	  equ 42
 15883                                  SYSI_NAME	  equ 44
 15884                                  SYSI_SPLICE	  equ 52
 15885                                  SYSI_IBMDOS_SIZE  equ 53
 15886                                  SYSI_IFS_DOSCALL@ equ 55
 15887                                  SYSI_IFS	  equ 59
 15888                                  SYSI_BUFFERS	  equ 63
 15889                                  SYSI_BOOT_DRIVE   equ 67
 15890                                  SYSI_DWMOVE	  equ 68
 15891                                  SYSI_EXT_MEM	  equ 69
 15892                                  
 15893                                  ;The SYSI_BUF of SysInitVars points to the following structure
 15894                                  
 15895                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 15896                                  
 15897                                  struc BUFFINF 	; BUFFINFO
 15898 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 15899 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 15900 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 15901 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 15902                                  
 15903 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 15904                                  				; are in HMA
 15905 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 15906                                  				;  used to read/write on disks
 15907 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 15908 00000015 ????                    .UU_EMS_NPA640:		resw 1
 15909 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 15910 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 15911 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 15912 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 15913 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 15914 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 15915 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 15916                                  .size:
 15917                                  endstruc
 15918                                  
 15919                                  ; ----------------------------------------------------------------------
 15920                                  ; CURDIR.INC (MSDOS 6.0 - 1991) 	
 15921                                  ; ----------------------------------------------------------------------
 15922                                  ; 22/03/2019 - Retro DOS v4.0
 15923                                  
 15924                                  ;**	CDS - Current Directory Structure
 15925                                  ;
 15926                                  ; CDS items are used bu the internal routines to store cluster numbers and
 15927                                  ; network identifiers for each logical name.  The ID field is used dually,
 15928                                  ; both as net ID and for a cluster number for local devices. In the case
 15929                                  ; of local devices, the cluster number will be -1 if there is a potential
 15930                                  ; of the disk being changed or if the path must be recracked.
 15931                                  ;
 15932                                  ;	Some pathnames have special preambles, such as
 15933                                  ;
 15934                                  ;		\\machine\sharename\...
 15935                                  ;	For these pathnames we can't allow ".." processing to back us
 15936                                  ;	up into the special front part of the name.  The CURDIR_END field
 15937                                  ;	holds the address of the seperator character which marks
 15938                                  ;	the split between the special preamble and the regular
 15939                                  ;	path list; ".." processing isn't allowed to back us up past
 15940                                  ;	(i.e., before) CURDIR_END
 15941                                  ;	For the root, it points at the leading /. For net
 15942                                  ;	assignments it points at the end (nul) of the initial assignment:
 15943                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 15944                                  ;	  ^		 ^		     ^
 15945                                  
 15946                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 15947                                  TEMPLEN 	EQU	DIRSTRLEN*2
 15948                                  
 15949                                  struc 		curdir_list
 15950                                  ; MSDOS 3.3
 15951 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 15952 00000043 ????                    .cdir_flags	resw	1		; various flags
 15953 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 15954 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 15955 0000004D ????                    .cdir_usr_word	resw	1
 15956 0000004F ????                    .cdir_end	resw	1		; end of assignment
 15957                                  ; MSDOS 6.0
 15958 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 15959 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 15960 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 15961                                  .size:
 15962                                  endstruc
 15963                                  
 15964                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 15965                                  						; ASM87 which doesn't allow
 15966                                  						; Size directive as a macro
 15967                                  						; argument
 15968                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 15969                                  
 15970                                  ;**	Flag values for CURDIR_FLAGS
 15971                                  
 15972                                  ;Flag word masks
 15973                                  curdir_isnet	EQU	1000000000000000B
 15974                                  curdir_isifs	EQU	1000000000000000B
 15975                                  curdir_inuse	EQU	0100000000000000B
 15976                                  curdir_splice	EQU	0010000000000000B
 15977                                  curdir_local	EQU	0001000000000000B
 15978                                  
 15979                                  ; ----------------------------------------------------------------------
 15980                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 15981                                  ; ----------------------------------------------------------------------
 15982                                  ; 25/03/2019 - Retro DOS v4.0
 15983                                  
 15984                                  ; system file table
 15985                                  
 15986                                  ;**	System File Table SuperStructure
 15987                                  ;
 15988                                  ;	The system file table entries are allocated in contiguous groups.
 15989                                  ;	There may be more than one such groups; the SF "superstructure"
 15990                                  ;	tracks the groups.
 15991                                  
 15992                                  struc	SF
 15993 00000000 ????????                .SFLink:	resd	1
 15994 00000004 ????                    .SFCount:	resw	1		; number of entries
 15995 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 15996                                  .size:
 15997                                  endstruc
 15998                                  
 15999                                  ;**	System file table entry
 16000                                  ;
 16001                                  ;	These are the structures which are at SFTABLE in the SF structure.
 16002                                  
 16003                                  struc	SF_ENTRY
 16004 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 16005                                  					;   if FCB then ref count
 16006 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 16007 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 16008 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 16009                                  					; Bit 15 = 1 if remote file
 16010                                  					;	 = 0 if local file or device
 16011                                  					; Bit 14 = 1 if date/time is not to be
 16012                                  					;   set from clock at CLOSE.  Set by
 16013                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 16014                                  					;   other reseters of the dirty bit
 16015                                  					;   (WRITE)
 16016                                  					; Bit 13 = Pipe bit (reserved)
 16017                                  					;
 16018                                  					; Bits 0-7 (old FCB_devid bits)
 16019                                  					; If remote file or local file, bit
 16020                                  					; 6=0 if dirty Device ID number, bits
 16021                                  					; 0-5 if local file.
 16022                                  					; bit 7=0 for local file, bit 7
 16023                                  					;      =1 for local I/O device
 16024                                  					; If local I/O device, bit 6=0 if EOF (input)
 16025                                  					;		Bit 5=1 if Raw mode
 16026                                  					;		Bit 0=1 if console input device
 16027                                  					;		Bit 1=1 if console output device
 16028                                  					;		Bit 2=1 if null device
 16029                                  					;		Bit 3=1 if clock device
 16030 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 16031                                  					; to device header if local device,
 16032                                  					; points to net device header if
 16033                                  					; remote
 16034 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 16035                                  ;.sf_lstclus:	resw	1 ; *	
 16036 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 16037 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 16038 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 16039 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 16040                                  ;
 16041                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 16042                                  ; ID
 16043                                  ;
 16044 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 16045 0000001B ????                    .sf_dirsec:	resw	1		; Sector number of directory sector for this file
 16046 0000001D ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 16047                                  ;
 16048                                  ; End of 7 bytes of file-system specific info.
 16049                                  ;
 16050 0000001E <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 16051                                  					; directory entry.  This is used by
 16052                                  					; close to detect file deleted and
 16053                                  					; disk changed errors.
 16054                                  ; SHARING INFO
 16055 00000029 ????????                .sf_chain:	resd	1		; link to next SF
 16056 0000002D ????                    .sf_UID:	resw	1
 16057 0000002F ????                    .sf_PID:	resw	1
 16058 00000031 ????                    .sf_MFT:	resw	1
 16059 00000033 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 16060 00000035 ????????                .sf_IFS_HDR:	resd 	1 ; **
 16061                                  .size:
 16062                                  endstruc
 16063                                  
 16064                                  ; ----------------------------------------------------------------------
 16065                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987) 	
 16066                                  ; ----------------------------------------------------------------------
 16067                                  ; 11/06/2018 - Retro DOS v3.0
 16068                                  
 16069                                  ;Equates for COUNTRY INFORMATION.
 16070                                  SetCountryInfo		EQU	1	;country info
 16071                                  SetUcase		EQU	2	;uppercase table
 16072                                  SetLcase		EQU	3	;lowercase table (Reserved)
 16073                                  SetUcaseFile		EQU	4	;uppercase file spec table
 16074                                  SetFileList		EQU	5	;valid file character list
 16075                                  SetCollate		EQU	6	;collating sequence
 16076                                  SetDBCS 		EQU	7	;double byte character set
 16077                                  SetALL			EQU	-1	;all the entries
 16078                                  
 16079                                  ;DOS country and code page information table structure.
 16080                                  ;Internally, IBMDOS gives a pointer to this table.
 16081                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 16082                                  ;this structure.
 16083                                  
 16084                                  struc country_cdpg_info ; DOS_country_cdpg_info
 16085 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 16086 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 16087 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 16088 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 16089 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 16090 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 16091                                  
 16092 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 16093 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 16094                                  
 16095 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 16096 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 16097                                  
 16098 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 16099 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 16100                                  
 16101 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 16102 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 16103 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 16104 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 16105 00000067 ????                    .ccDFormat:		resw	1	;date format
 16106 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 16107                                  					;5 byte of (currency symbol+0)
 16108 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 16109 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 16110 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 16111 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 16112 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 16113 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 16114 00000078 ??                      .ccTFormat:		resb	1	;time format
 16115 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 16116 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 16117 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 16118                                  .size:
 16119                                  endstruc
 16120                                  
 16121                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 16122                                  
 16123                                  ; ======================================================================
 16124                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 16125                                  ; ======================================================================
 16126                                  ; 21/03/2019 - Retro DOS v4.0
 16127                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 16128                                  
 16129                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 16130                                  ; 21/10/2022
 16131                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 16132                                  ; 22/10/2022
 16133                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 16134                                  ; 09/12/2022
 16135                                  DOSBIOCODESEG equ IOSYSCODESEG
 16136                                  
 16137                                  ; Note: These offset addresses must be chanqed when the code 
 16138                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 16139                                  
 16140                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 16141                                  
 16142                                  ; 09/12/2022
 16143                                  %if 0
 16144                                  
 16145                                  ; 13/05/2019
 16146                                  
 16147                                  ;IsWin386         equ 08CFh
 16148                                  ;V86_Crit_SetFocus equ 08D0h
 16149                                  ; 21/10/2022
 16150                                  IsWin386          equ 08D0h
 16151                                  V86_Crit_SetFocus equ 08D1h 
 16152                                  
 16153                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 16154                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 16155                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 16156                                  
 16157                                  ;SysinitPresent	  equ 08FCh
 16158                                  ; 21/10/2022
 16159                                  SysinitPresent	  equ 08FDh
 16160                                  
 16161                                  inHMA		  equ 000Dh
 16162                                  xms		  equ 000Eh
 16163                                  ;FreeHMAPtr	  equ 08F6h
 16164                                  ;multrk_flag	  equ 0533h
 16165                                  ;ec35_flag	  equ 0535h
 16166                                  ;EOT		  equ 012Eh
 16167                                  ; 21/10/2022
 16168                                  FreeHMAPtr	  equ 08F7h
 16169                                  multrk_flag	  equ 052Fh
 16170                                  ec35_flag	  equ 0531h
 16171                                  EOT		  equ 012Ch
 16172                                  
 16173                                  ;NextStack	  equ 08BFh
 16174                                  ;IT_StackLoc	  equ 08C5h
 16175                                  ;IT_StackSize	  equ 08C9h
 16176                                  ; 21/10/2022
 16177                                  NextStack	  equ 08C0h
 16178                                  IT_StackLoc	  equ 08C6h
 16179                                  IT_StackSize	  equ 08CAh
 16180                                  
 16181                                  ;MoveDOSIntoHMA	  equ 08F8h
 16182                                  ; 21/10/2022
 16183                                  MoveDOSIntoHMA	  equ 08F9h
 16184                                  
 16185                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 16186                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 16187                                  ; 21/10/2022
 16188                                  INT19SEM equ 0640h ; (iosys5.txt)
 16189                                  I19_LST  equ 0641h ; (iosys5.txt)
 16190                                  
 16191                                  %endif
 16192                                  
 16193                                  ; 09/12/2022
 16194                                  seg_reinit equ _seg_reinit
 16195                                  ec35_flag  equ ec35flag		
 16196                                  INT19SEM   equ int19sem
 16197                                  I19_LST    equ i19_lst
 16198                                  
 16199                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 16200                                  INT19OLD08 equ I19_LST+6
 16201                                  INT19OLD09 equ I19_LST+11
 16202                                  INT19OLD0A equ I19_LST+16
 16203                                  INT19OLD0B equ I19_LST+21
 16204                                  INT19OLD0C equ I19_LST+26
 16205                                  INT19OLD0D equ I19_LST+31
 16206                                  INT19OLD0E equ I19_LST+36
 16207                                  INT19OLD70 equ I19_LST+41
 16208                                  INT19OLD72 equ I19_LST+46
 16209                                  INT19OLD73 equ I19_LST+51
 16210                                  INT19OLD74 equ I19_LST+56
 16211                                  INT19OLD76 equ I19_LST+61
 16212                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 16213                                  
 16214                                  ; 09/12/2022
 16215                                  %if 0
 16216                                  
 16217                                  ;keyrd_func	equ 04E9h
 16218                                  ;keysts_func	equ 04EAh
 16219                                  ;t_switch	equ 04F6h
 16220                                  ; 21/10/2022
 16221                                  keyrd_func	equ 04E5h
 16222                                  keysts_func	equ 04E6h
 16223                                  t_switch	equ 04F2h
 16224                                  
 16225                                  ; 22/10/2022
 16226                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 16227                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 16228                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 16229                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 16230                                  
 16231                                  %endif
 16232                                  
 16233                                  ; 09/12/2022
 16234                                  BCODESTART	equ BIOSDATAWORD
 16235                                  RE_INIT		equ re_init
 16236                                  
 16237                                  ; ----------------------------------------------------------------------
 16238                                  ; CONFIG.INC (MSDOS 6.0 - 1991) 	
 16239                                  ; ----------------------------------------------------------------------
 16240                                  ; 15/04/2019 - Retro DOS v4.0
 16241                                  
 16242                                  CONFIG_BEGIN        equ  '['
 16243                                  CONFIG_BREAK        equ  'C'
 16244                                  CONFIG_BUFFERS      equ  'B'
 16245                                  CONFIG_COMMENT      equ  'Y'
 16246                                  CONFIG_COUNTRY      equ  'Q'
 16247                                  CONFIG_DEVICE       equ  'D'
 16248                                  CONFIG_DEVICEHIGH   equ  'U'
 16249                                  CONFIG_DOS          equ  'H'
 16250                                  CONFIG_DRIVPARM     equ  'P'
 16251                                  CONFIG_FCBS         equ  'X'
 16252                                  CONFIG_FILES        equ  'F'
 16253                                  CONFIG_INCLUDE      equ  'J'
 16254                                  CONFIG_INSTALL      equ  'I'
 16255                                  CONFIG_INSTALLHIGH  equ  'W'
 16256                                  CONFIG_LASTDRIVE    equ  'L'
 16257                                  CONFIG_MENUCOLOR    equ  'R'
 16258                                  CONFIG_MENUDEFAULT  equ  'A'
 16259                                  CONFIG_MENUITEM     equ  'E'
 16260                                  CONFIG_MULTITRACK   equ  'M'
 16261                                  CONFIG_NUMLOCK      equ  'N'
 16262                                  CONFIG_REM          equ  '0'
 16263                                  CONFIG_SEMICOLON    equ  ';'
 16264                                  CONFIG_SET          equ  'V'
 16265                                  CONFIG_SHELL        equ  'S'
 16266                                  CONFIG_STACKS       equ  'K'
 16267                                  CONFIG_SUBMENU      equ  'O'
 16268                                  CONFIG_SWITCHES     equ  '1'
 16269                                  
 16270                                  CONFIG_UNKNOWN      equ  'Z'
 16271                                  
 16272                                  CONFIG_OPTION_QUERY equ 80h
 16273                                  
 16274                                  ; ----------------------------------------------------------------------
 16275                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991) 	
 16276                                  ; ----------------------------------------------------------------------
 16277                                  ; 21/03/2019 - Retro DOS v4.0
 16278                                  
 16279                                  true	equ	0FFFFh
 16280                                  false	equ	0
 16281                                  cr	equ	13
 16282                                  lf	equ	10
 16283                                  tab	equ	9
 16284                                  
 16285                                  multMULT	   equ	4Ah
 16286                                  multMULTGETHMAPTR  equ	1
 16287                                  multMULTALLOCHMA   equ	2
 16288                                  
 16289                                  ;NOEXEC    equ	FALSE
 16290                                  
 16291                                  stacksw    equ	true	;include switchable hardware stacks
 16292                                  mycds_size equ	88	;size of curdir_list. if it is not
 16293                                  			;the same, then will generate compile error.
 16294                                  
 16295                                  entrysize   equ     8
 16296                                  
 16297                                  mincount    equ     8
 16298                                  defaultcount equ    9
 16299                                  maxcount    equ     64
 16300                                  
 16301                                  minsize     equ     32
 16302                                  defaultsize equ     128
 16303                                  maxsize     equ     512
 16304                                  
 16305                                  ;%define allocbyte  byte [es:bp+0]
 16306                                  ;%define intlevel   byte [es:bp+1]
 16307                                  ;%define savedsp    word [es:bp+2]
 16308                                  ;%define savedss    word [es:bp+4]
 16309                                  ;%define newsp	    word [es:bp+6]
 16310                                  
 16311                                  allocbyte   equ     0
 16312                                  intlevel    equ     1
 16313                                  savedsp     equ     2
 16314                                  savedss     equ     4
 16315                                  newsp       equ     6
 16316                                  
 16317                                  free	    equ     0
 16318                                  allocated   equ     1
 16319                                  overflowed  equ     2
 16320                                  clobbered   equ     3
 16321                                  
 16322                                  ;---------------------------------------
 16323                                  ; external variable defined in ibmbio module for multi-track
 16324                                  
 16325                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 16326                                  			  ; it on after handling config.sys file as a
 16327                                  			  ; default value,if multrk_flag = multrk_off1.
 16328                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 16329                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 16330                                  
 16331                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 16332                                  
 16333                                  SYSINIT$:
 16334                                  	;IF	STACKSW 
 16335                                  	; include MSSTACK.INC	;Main stack program and data definitions
 16336                                  	; include STKMES.INC	;Fatal stack error message
 16337                                  	;   public Endstackcode
 16338                                  ;Endstackcode	label byte
 16339                                  	;ENDIF
 16340                                  
 16341                                  ; 05/07/2018
 16342                                  ; ----------------------------------------------------------------------
 16343                                  ; 04/06/2018 - Retro DOS v3.0
 16344                                  
 16345                                  ; ----------------------------------------------------------------------
 16346                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 16347                                  ; ----------------------------------------------------------------------
 16348                                  
 16349                                  ;	MSStack.inc
 16350                                  ;
 16351                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 16352                                  ;	should follow the standard Interrupt Sharing Scheme which has
 16353                                  ;	a standard header structure.
 16354                                  ;	Fyi, the following shows the relations between
 16355                                  ;	the interrupt vector and interrupt level.
 16356                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 16357                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 16358                                  ;	MSSTACK module modifies the following interrupt vectors
 16359                                  ;	to meet the standard Interrupt Sharing standard;
 16360                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 16361                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 16362                                  ;	should be initialized to indicat whether this interrupt handler is
 16363                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 16364                                  ;	program header is initialized in STKINIT.INC module.
 16365                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 16366                                  ;
 16367                                  
 16368                                  ;  User specifies the number of stack elements - default = 9
 16369                                  ;						 minimum = 8
 16370                                  ;						 maximum = 64
 16371                                  ;
 16372                                  ;  Intercepts Asynchronous Hardware Interrupts only
 16373                                  ;
 16374                                  ;  Picks a stack from pool of stacks and switches to it
 16375                                  ;
 16376                                  ;  Calls the previously saved interrupt vector after pushing flags
 16377                                  ;
 16378                                  ;  On return, returns the stack to the stack pool
 16379                                  ;
 16380                                  
 16381                                  ; This is a modification of STACKS:
 16382                                  ; 1. To fix a bug which was causing the program to take up too much space.
 16383                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 16384                                  ;    . Clobbers the stack that got too big instead of innocent stack
 16385                                  ;    . Allows system to work if the only stack that got too big was the most
 16386                                  ;      deeply nested one
 16387                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 16388                                  ; 4. Does not intercept any interupts on a PCjr.
 16389                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 16390                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 16391                                  
 16392                                  		;EVEN
 16393                                  ;align 2
 16394                                  		; 21/10/2022
 16395                                  
 16396 00000000 0000                    		dw	0	; spare field but leave these in order
 16397 00000002 0000                    stackcount:	dw	0
 16398 00000004 0000                    stackat: 	dw	0
 16399 00000006 0000                    stacksize:	dw	0
 16400 00000008 0000                    stacks:		dw	0
 16401 0000000A 0000                    		dw	0
 16402                                  
 16403 0000000C [0800]                  firstentry:	dw	stacks
 16404 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16405 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16406                                  
 16407                                  ;***********************************************************************
 16408                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 16409                                  
 16410                                  ; ----------------------------------------------------------------------
 16411                                  
 16412 00000012 00000000                old02:	dd	0
 16413                                  
 16414                                  int02:
 16415                                  
 16416                                  ; *********************************************************************
 16417                                  ;
 16418                                  ; this is special support for the pc convertible / nmi handler
 16419                                  ;
 16420                                  ;	on the pc convertible, there is a situation where an nmi can be 
 16421                                  ;	caused by using the "out" instructions to certain ports. when this
 16422                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 16423                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 16424                                  ;	includes other type of interrupts (hardware and software), and
 16425                                  ;	also includes other type of nmi's. when any nmi has occured,
 16426                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 16427                                  ;	the software takes specific steps to allow further interrupting.
 16428                                  ;
 16429                                  ;	for pc convertible, the situation where the nmi is generated by the
 16430                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 16431                                  ;	otherwords, it is actually a "restartable exception". in this
 16432                                  ;	case, the software handler must be able to get to the stack in
 16433                                  ;	order to figure out what instruction caused the problem, where
 16434                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 16435                                  ;	we will not switch stacks in this situation. this situation is
 16436                                  ;	detected by interrogating port 62h, and checking for a bit value
 16437                                  ;	of 80h. if set, *****do not switch stacks*****.
 16438                                  ;
 16439                                  ; *********************************************************************
 16440                                  
 16441 00000016 50                      	push	ax
 16442 00000017 06                      	push	es
 16443 00000018 B800F0                  	mov	ax,0F000h
 16444 0000001B 8EC0                    	mov	es,ax
 16445                                  	; 02/11/2022
 16446 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 16447 00000023 07                      	pop	es
 16448 00000024 750C                    	jne	short normal02
 16449                                  
 16450 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 16451                                  				; 0-3: values of DIP switches
 16452                                  				; 5: 1=Timer 2 channel out
 16453                                  				; 6: 1=I/O channel check
 16454                                  				; 7: 1=RAM parity check error occurred.
 16455 00000028 A880                    	test	al,80h
 16456 0000002A 7406                    	jz	short normal02
 16457                                  special02:
 16458 0000002C 58                      	pop	ax
 16459 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 16460                                  normal02:
 16461 00000032 58                      	pop	ax
 16462 00000033 E81101                  	call	do_int_stacks
 16463 00000036 [1200]                  	dw	old02
 16464                                  
 16465                                  ; ----------------------------------------------------------------------
 16466                                  
 16467 00000038 00000000                old08:	dd	0
 16468                                  
 16469                                  int08:
 16470 0000003C E80801                  	call	do_int_stacks
 16471 0000003F [3800]                  	dw	old08
 16472                                  
 16473                                  ; ----------------------------------------------------------------------
 16474                                  
 16475 00000041 00000000                old09:	dd	0
 16476                                  
 16477                                  int09:
 16478                                  
 16479                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 16480                                  ; as its first instruction for compatibility reasons
 16481                                  
 16482 00000045 EB02                    	jmp	short keyboard_lbl
 16483 00000047 90                      	nop
 16484 00000048 00                      	db	0
 16485                                  
 16486                                  keyboard_lbl:
 16487 00000049 E8FB00                  	call	do_int_stacks
 16488 0000004C [4100]                  	dw	old09
 16489                                  
 16490                                  ; ----------------------------------------------------------------------
 16491                                  
 16492 0000004E 00000000                old70:	dd	0
 16493                                  
 16494                                  int70:
 16495 00000052 E8F200                  	call	do_int_stacks
 16496 00000055 [4E00]                  	dw	old70
 16497                                  
 16498                                  ; ----------------------------------------------------------------------
 16499                                  
 16500                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 16501                                  ;public	int&a
 16502                                  ;public	old&a
 16503                                  ;public	firstflag&a
 16504                                  ;int&a	proc	far
 16505                                  ;	jmp	short entry_int&a&_stk
 16506                                  ;old&a	dd	  0		;forward pointer
 16507                                  ;	dw	  424bh 	;compatible signature for int. sharing
 16508                                  ;firstflag&a db   0		;the firstly hooked.
 16509                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 16510                                  ;	db	7 dup (0)	;reserved for future.
 16511                                  ;entry_int&a&_stk:
 16512                                  ;	call	do_int_stacks
 16513                                  ;	dw	old&a
 16514                                  ;intret_&a:
 16515                                  ;	iret
 16516                                  ;int&a	endp
 16517                                  ;	endm
 16518                                  
 16519                                  ; ----------------------------------------------------------------------
 16520                                  
 16521                                  int0A:
 16522 00000057 EB10                    	jmp	short entry_int0A_stk
 16523 00000059 00000000                old0A:	dd	0	
 16524 0000005D 4B42                    	dw	424Bh
 16525                                  firstflag0A:
 16526 0000005F 00                      	db	0
 16527 00000060 EB0C                    	jmp	short intret_0A
 16528 00000062 00<rep 7h>              	times	7 db 0
 16529                                  
 16530                                  entry_int0A_stk:
 16531 00000069 E8DB00                  	call	do_int_stacks
 16532 0000006C [5900]                  	dw	old0A
 16533                                  intret_0A:
 16534 0000006E CF                      	iret
 16535                                  
 16536                                  ; ----------------------------------------------------------------------
 16537                                  
 16538                                  int0B:
 16539 0000006F EB10                    	jmp	short entry_int0B_stk
 16540 00000071 00000000                old0B:	dd	0	
 16541 00000075 4B42                    	dw	424Bh
 16542                                  firstflag0B:
 16543 00000077 00                      	db	0
 16544 00000078 EB0C                    	jmp	short intret_0B
 16545 0000007A 00<rep 7h>              	times	7 db 0
 16546                                  
 16547                                  entry_int0B_stk:
 16548 00000081 E8C300                  	call	do_int_stacks
 16549 00000084 [7100]                  	dw	old0B
 16550                                  intret_0B:
 16551 00000086 CF                      	iret
 16552                                  
 16553                                  ; ----------------------------------------------------------------------
 16554                                  
 16555                                  int0C:
 16556 00000087 EB10                    	jmp	short entry_int0C_stk
 16557 00000089 00000000                old0C:	dd	0	
 16558 0000008D 4B42                    	dw	424Bh
 16559                                  firstflag0C:
 16560 0000008F 00                      	db	0
 16561 00000090 EB0C                    	jmp	short intret_0C
 16562 00000092 00<rep 7h>              	times	7 db 0
 16563                                  
 16564                                  entry_int0C_stk:
 16565 00000099 E8AB00                  	call	do_int_stacks
 16566 0000009C [8900]                  	dw	old0C
 16567                                  intret_0C:
 16568 0000009E CF                      	iret
 16569                                  
 16570                                  ; ----------------------------------------------------------------------
 16571                                  
 16572                                  int0D:
 16573 0000009F EB10                    	jmp	short entry_int0D_stk
 16574 000000A1 00000000                old0D:	dd	0	
 16575 000000A5 4B42                    	dw	424Bh
 16576                                  firstflag0D:
 16577 000000A7 00                      	db	0
 16578 000000A8 EB0C                    	jmp	short intret_0D
 16579 000000AA 00<rep 7h>              	times	7 db 0
 16580                                  
 16581                                  entry_int0D_stk:
 16582 000000B1 E89300                  	call	do_int_stacks
 16583 000000B4 [A100]                  	dw	old0D
 16584                                  intret_0D:
 16585 000000B6 CF                      	iret
 16586                                  
 16587                                  ; ----------------------------------------------------------------------
 16588                                  
 16589                                  int0E:
 16590 000000B7 EB10                    	jmp	short entry_int0E_stk
 16591 000000B9 00000000                old0E:	dd	0	
 16592 000000BD 4B42                    	dw	424Bh
 16593                                  firstflag0E:
 16594 000000BF 00                      	db	0
 16595 000000C0 EB0C                    	jmp	short intret_0E
 16596 000000C2 00<rep 7h>              	times	7 db 0
 16597                                  
 16598                                  entry_int0E_stk:
 16599 000000C9 E87B00                  	call	do_int_stacks
 16600 000000CC [B900]                  	dw	old0E
 16601                                  intret_0E:
 16602 000000CE CF                      	iret
 16603                                  
 16604                                  ; ----------------------------------------------------------------------
 16605                                  
 16606                                  int72:
 16607 000000CF EB10                    	jmp	short entry_int72_stk
 16608 000000D1 00000000                old72:	dd	0	
 16609 000000D5 4B42                    	dw	424Bh
 16610                                  firstflag72:
 16611 000000D7 00                      	db	0
 16612 000000D8 EB0C                    	jmp	short intret_72
 16613 000000DA 00<rep 7h>              	times	7 db 0
 16614                                  
 16615                                  entry_int72_stk:
 16616 000000E1 E86300                  	call	do_int_stacks
 16617 000000E4 [D100]                  	dw	old72
 16618                                  intret_72:
 16619 000000E6 CF                      	iret
 16620                                  
 16621                                  ; ----------------------------------------------------------------------
 16622                                  
 16623                                  int73:
 16624 000000E7 EB10                    	jmp	short entry_int73_stk
 16625 000000E9 00000000                old73:	dd	0	
 16626 000000ED 4B42                    	dw	424Bh
 16627                                  firstflag73:
 16628 000000EF 00                      	db	0
 16629 000000F0 EB0C                    	jmp	short intret_73
 16630 000000F2 00<rep 7h>              	times	7 db 0
 16631                                  
 16632                                  entry_int73_stk:
 16633 000000F9 E84B00                  	call	do_int_stacks
 16634 000000FC [E900]                  	dw	old73
 16635                                  intret_73:
 16636 000000FE CF                      	iret
 16637                                  
 16638                                  ; ----------------------------------------------------------------------
 16639                                  
 16640                                  int74:
 16641 000000FF EB10                    	jmp	short entry_int74_stk
 16642 00000101 00000000                old74:	dd	0	
 16643 00000105 4B42                    	dw	424Bh
 16644                                  firstflag74:
 16645 00000107 00                      	db	0
 16646 00000108 EB0C                    	jmp	short intret_74
 16647 0000010A 00<rep 7h>              	times	7 db 0
 16648                                  
 16649                                  entry_int74_stk:
 16650 00000111 E83300                  	call	do_int_stacks
 16651 00000114 [0101]                  	dw	old74
 16652                                  intret_74:
 16653 00000116 CF                      	iret
 16654                                  
 16655                                  ; ----------------------------------------------------------------------
 16656                                  
 16657                                  int76:
 16658 00000117 EB10                    	jmp	short entry_int76_stk
 16659 00000119 00000000                old76:	dd	0	
 16660 0000011D 4B42                    	dw	424Bh
 16661                                  firstflag76:
 16662 0000011F 00                      	db	0
 16663 00000120 EB0C                    	jmp	short intret_76
 16664 00000122 00<rep 7h>              	times	7 db 0
 16665                                  
 16666                                  entry_int76_stk:
 16667 00000129 E81B00                  	call	do_int_stacks
 16668 0000012C [1901]                  	dw	old76
 16669                                  intret_76:
 16670 0000012E CF                      	iret
 16671                                  
 16672                                  ; ----------------------------------------------------------------------
 16673                                  
 16674                                  int77:
 16675 0000012F EB10                    	jmp	short entry_int77_stk
 16676 00000131 00000000                old77:	dd	0	
 16677 00000135 4B42                    	dw	424Bh
 16678                                  firstflag77:
 16679 00000137 00                      	db	0
 16680 00000138 EB0C                    	jmp	short intret_77
 16681 0000013A 00<rep 7h>              	times	7 db 0
 16682                                  
 16683                                  entry_int77_stk:
 16684 00000141 E80300                  	call	do_int_stacks
 16685 00000144 [3101]                  	dw	old77
 16686                                  intret_77:
 16687 00000146 CF                      	iret
 16688                                  
 16689                                  ; ----------------------------------------------------------------------
 16690                                  
 16691                                  ;********************************************************************
 16692                                  ;common routines
 16693                                  ;********************************************************************
 16694                                  
 16695                                  ; do interrupt stack switching. the fake return address holds
 16696                                  ; a pointer to the far-pointer of the actual interrupt
 16697                                  ; service routine
 16698                                  
 16699                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 16700                                  ; 21/03/2019 - Retro DOS v4.0
 16701                                  
 16702                                  ;allocbyte   equ 0
 16703                                  ;intlevel    equ 1
 16704                                  ;savedsp     equ 2
 16705                                  ;savedss     equ 4
 16706                                  ;newsp       equ 6
 16707                                  
 16708                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 SYSINIT)
 16709                                  ; (MSDOS 6.21 IO:SYS, SYSINIT:0147h)
 16710                                  
 16711                                  do_int_stacks:
 16712 00000147 50                      	push	ax
 16713 00000148 55                      	push	bp
 16714 00000149 06                      	push	es
 16715 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 16716 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 16717 00000154 B001                    	mov	al,allocated ; 1
 16718                                  	; 21/10/2022
 16719                                  	;xchg	[es:bp+allocbyte],al 
 16720                                  	; 11/12/2022
 16721 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 16722 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 16723 0000015C 7551                    	jne	short notfree02
 16724                                  
 16725 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 16726                                  found02:
 16727 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 16728 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 16729                                  
 16730 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 16731                                  
 16732 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 16733                                  	; 21/10/2022
 16734                                  	;mov	bp,[es:bp+6]
 16735                                  	; 11/12/2022
 16736                                  	;cmp	[es:bp+0],ax	
 16737 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 16738 00000176 7544                    	jne	short foundbad02
 16739                                  
 16740                                  	; 02/07/2023 (MSDOS 6.21 SYSINIT code)
 16741 00000178 8CC0                    	mov	ax,es			; point ss,sp to the new stack
 16742 0000017A 8EC5                    	mov	es,bp
 16743 0000017C 89E5                    	mov	bp,sp
 16744 0000017E 8B6E06                  	mov	bp,[bp+6]
 16745 00000181 8ED0                    	mov	ss,ax
 16746 00000183 8CC4                    	mov	sp,es
 16747 00000185 8EC0                    	mov	es,ax
 16748 00000187 2E8B6E00                	mov	bp,[cs:bp]
 16749                                  
 16750                                  	; 21/10/2022 (MSDOS 5.0 SYSINIT code)
 16751                                  	;push    bp
 16752                                  	;mov     bp,sp
 16753                                  	;mov     ax,[bp+8]
 16754                                  	;pop     bp
 16755                                  	;push    es
 16756                                  	;pop     ss
 16757                                  	;mov     sp,bp
 16758                                  	;mov     bp,ax
 16759                                  	; 11/12/2022
 16760                                  	;;mov	bp,[cs:bp+0]	
 16761                                  	;mov	bp,[cs:bp]	
 16762                                  
 16763 0000018B 9C                      	pushf				; go execute the real interrupt handler
 16764                                  	; 11/12/2022
 16765 0000018C 2EFF5E00                	call	far [cs:bp]		; which will iret back to here
 16766                                  	; 21/10/2022
 16767                                  	;call	far [cs:bp+0]
 16768                                  
 16769 00000190 89E5                    	mov	bp,sp			; retrieve the table offset for us
 16770                                  	; 11/12/2022
 16771 00000192 268B6E00                	mov	bp,[es:bp]		; but leave it on the stack
 16772                                  	; 21/10/2022
 16773                                  	;mov	bp,[es:bp+0]
 16774 00000196 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 16775 0000019A 268B6602                	mov	sp,[es:bp+savedsp]
 16776                                  
 16777                                  	; 11/12/2022
 16778                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 16779                                  	; 21/10/2022
 16780 0000019E 26C6460000              	mov	byte [es:bp],free ; 0
 16781 000001A3 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 16782                                  
 16783 000001A8 07                      	pop	es			; saved on entry
 16784 000001A9 5D                      	pop	bp			; saved on entry
 16785 000001AA 58                      	pop	ax			; saved on entry
 16786 000001AB 83C402                  	add	sp,2			; (skip near call return addr) 
 16787 000001AE CF                      	iret				; done with this interrupt
 16788                                  
 16789                                  notfree02:
 16790 000001AF 3C01                    	cmp	al,allocated		; error flag
 16791 000001B1 7404                    	je	short findnext02	; no, continue
 16792                                  	; 11/12/2022
 16793                                  	;xchg	[es:bp+allocbyte],al	; yes, restore error value
 16794                                  	; 21/10/2022
 16795 000001B3 26864600                	xchg	[es:bp],al
 16796                                  
 16797                                  findnext02:
 16798 000001B7 E81200                  	call	longpath
 16799 000001BA EBA8                    	jmp	short found02
 16800                                  
 16801                                  foundbad02:
 16802 000001BC 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16803 000001C1 72F4                    	jc	short findnext02
 16804 000001C3 89C5                    	mov	bp,ax			; flag this entry
 16805                                  	; 11/12/2022
 16806                                  	;mov	byte [es:bp+allocbyte],clobbered
 16807                                  	; 21/10/2022
 16808 000001C5 26C6460003              	mov	byte [es:bp],clobbered ; 3
 16809 000001CA EBEB                    	jmp	short findnext02	; keep looking
 16810                                  
 16811                                  ; ----------------------------------------------------------------------
 16812                                  
 16813                                  ; Common routines
 16814                                  
 16815                                  longpath:
 16816                                  	; 21/03/2019
 16817 000001CC 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 16818                                  lploopp:
 16819                                  	; 11/12/2022
 16820                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 16821                                  	; 21/10/2022
 16822 000001D1 26807E0000              	cmp	byte [es:bp],free
 16823 000001D6 7512                    	jne	short inuse		;  no, try next one
 16824                                  
 16825 000001D8 B001                    	mov	al,allocated
 16826                                  	; 11/12/2022
 16827                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 16828                                  	; 21/10/2022
 16829 000001DA 26864600                	xchg	[es:bp],al
 16830 000001DE 3C00                    	cmp	al,free 		; is it still free?
 16831 000001E0 7414                    	je	short found		;  yes, go use it
 16832                                  
 16833 000001E2 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 16834 000001E4 7404                    	je	short inuse		;  no, check the next one
 16835                                  
 16836                                  	; 11/12/2022
 16837                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 16838                                  	; 21/10/2022
 16839 000001E6 26884600                	mov	[es:bp],al
 16840                                  inuse:
 16841 000001EA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16842 000001EF 7406                    	je	short fatal
 16843 000001F1 83ED08                  	sub	bp,entrysize
 16844 000001F4 EBDB                    	jmp	short lploopp
 16845                                  found:
 16846 000001F6 C3                      	retn
 16847                                  fatal:
 16848 000001F7 1E                      	push	ds
 16849 000001F8 B800F0                  	mov	ax,0F000h		;look at the model byte
 16850 000001FB 8ED8                    	mov	ds,ax
 16851 000001FD 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 16852 00000202 1F                      	pop	ds
 16853 00000203 7504                    	jne	short skip_nmis
 16854                                  
 16855 00000205 B007                    	mov	al,07h			; disable pc convertible nmis
 16856 00000207 E672                    	out	72h,al
 16857                                  
 16858                                  skip_nmis:
 16859 00000209 FA                      	cli				; disable and mask
 16860 0000020A B0FF                    	mov	al,0FFh			;   all other ints
 16861 0000020C E621                    	out	021h,al
 16862 0000020E E6A1                    	out	0A1h,al
 16863                                  
 16864 00000210 8CCE                    	mov	si,cs
 16865 00000212 8EDE                    	mov	ds,si
 16866 00000214 BE[3902]                	mov	si,fatal_msg
 16867                                  ;SR;
 16868                                  ;   We set all foci to this VM to issue the stack failure message
 16869                                  ;
 16870 00000217 50                      	push	ax
 16871 00000218 1E                      	push	ds
 16872                                  	;;mov	ax,Bios_Data ; 0070h
 16873                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 16874                                  	; 21/10/2022
 16875 00000219 B87000                  	mov	ax,DOSBIODATASEG
 16876 0000021C 8ED8                    	mov	ds,ax
 16877                                  
 16878                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 16879 0000021E F606[6F08]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 16880 00000223 1F                      	pop	ds
 16881 00000224 58                      	pop	ax
 16882 00000225 7405                    	jz	short fatal_loop	; win386 not present, continue
 16883                                  
 16884                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 16885                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 16886                                  	; 21/10/2022
 16887 00000227 9A[7008]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 16888                                  ;
 16889                                  ;SR; We do not bother about the returned status of this call. 
 16890                                  ;
 16891                                  fatal_loop:
 16892 0000022C AC                      	lodsb
 16893 0000022D 3C24                    	cmp	al,'$' ; 24h
 16894 0000022F 7406                    	je	short fatal_done
 16895                                  
 16896 00000231 B307                    	mov	bl,7
 16897                                  	;mov	ah,14
 16898                                  	;mov	ah,0Eh
 16899 00000233 CD10                    	int	10h			; whoops, this enables ints
 16900                                  			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
 16901                                  			; AL = character, BH = display page (alpha modes)
 16902                                  			; BL = foreground color (graphics modes)
 16903 00000235 EBF5                    	jmp	short fatal_loop
 16904                                  
 16905                                  fatal_done:
 16906 00000237 EBFE                    	jmp	short fatal_done
 16907                                  
 16908                                  
 16909                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 16910                                  ; ----------------------------------------------------------------------
 16911                                  ;	include msbio.cl5		; fatal stack error message
 16912                                  
 16913                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 16914                                  
 16915                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 16916                                  ; ----------------------------------------------------------------------
 16917                                  ; 04/06/2018 - Retro DOS v3.0
 16918                                  
 16919                                  fatal_msg:
 16920 00000239 0D0A                    	db	0Dh,0Ah
 16921 0000023B 070D0A                  	db	7,0Dh,0Ah
 16922 0000023E 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 16922 00000247 737461636B206F7665-
 16922 00000250 72666C6F770D0A     
 16923 00000257 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 16923 00000260 6C7465640D0A24     
 16924                                  
 16925                                  endstackcode:
 16926                                  
 16927                                  ; ----------------------------------------------------------------------
 16928                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 16929                                  ; ----------------------------------------------------------------------
 16930                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 16931                                  
 16932                                  ; 22/03/2019 - Retro DOS v4.0
 16933                                  
 16934                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 16935                                  
 16936                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 16937                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 16938                                  
 16939                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16940                                  ; ----------------------------------------------------------------------
 16941                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 16942                                  
 16943                                  SYSINIT:	
 16944 00000267 E9A001                          JMP	GOINIT
 16945                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 16946                                  
 16947                                  ; ----------------------------------------------------------------------
 16948                                  
 16949                                  struc DDHighInfo
 16950 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 16951 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 16952 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 16953                                  endstruc
 16954                                  
 16955                                  ; 22/03/2019 - Retro DOS v4.0
 16956                                  
 16957 0000026A 00                      runhigh: db	0
 16958                                  
 16959                                  ; 02/11/2022
 16960                                  ;align 4
 16961                                  
 16962                                  DOSINFO: 
 16963 0000026B 00000000                	dd	0	; address of the DOS Sysini Variables
 16964                                  ;MSDOS:
 16965                                  dos_temp_location: ; dword ; MSDOS 6.0
 16966                                  dosinit:		; MSDOS 6.0
 16967 0000026F 0000                    	dw	0
 16968                                  
 16969                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16970                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 16971                                  ;	dw	0
 16972                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 16973                                  
 16974                                  CURRENT_DOS_LOCATION:
 16975 00000271 0000                    	dw	0
 16976                                  
 16977                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 16978                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 16979                                  
 16980                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16981                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 16982                                  DOSSIZE	equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 16983                                  
 16984                                  DEVICE_LIST:
 16985 00000273 00000000                	dd	0
 16986                                  
 16987                                  ; 04/06/2018 - Retro DOS v3.0
 16988                                  ; 28/03/2018
 16989                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 16990                                  ;
 16991                                  sysi_country:	
 16992 00000277 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 16993                                  
 16994                                  ; MSDOS 6.0
 16995 0000027B 00000000                dos_segreinit:	dw	0,0	; room for dword
 16996                                  
 16997 0000027F 0000                    lo_doscod_size:	dw	0	; dos code size when in low mem
 16998 00000281 0000                    hi_doscod_size:	dw	0	; dos code size when in HMA
 16999                                  
 17000 00000283 0000                    def_php:	dw	0
 17001                                  
 17002                                  ; M022--
 17003                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 17004                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 17005                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 17006                                  ;  the new home.
 17007                                  
 17008                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 17009                                  ; 21/10/2022
 17010                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 17011                                  
 17012                                  ; 22/10/2022
 17013                                  seg_reinit_ptr:	; label dword
 17014 00000285 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 17015                                  temp_bcode_seg:
 17016                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 17017                                  		; 22/10/2022
 17018 00000287 8602                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS 		
 17019                                  
 17020                                  fake_floppy_drv:
 17021 00000289 00                      		db	0	; set to 1 if this machine
 17022                                  				; does not have any floppies!!!
 17023                                  
 17024                                  ; Internal Stack Parameters
 17025                                  
 17026 0000028A 0900                    stack_count:	dW	defaultcount ; 9
 17027 0000028C 8000                    stack_size:	dw	defaultsize  ; 128
 17028 0000028E 00000000                stack_addr:	dd	0	
 17029                                  
 17030                                  ; 05/06/2018 - Retro DOS v3.0
 17031                                  
 17032                                  ; various default values
 17033                                  
 17034 00000292 0100                    MEMORY_SIZE:	dw	1
 17035                                  
 17036                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 17037                                  
 17038 00000294 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)	
 17039 00000296 00                      DEFAULT_DRIVE:	db	0	; initialized by ibminit.
 17040 00000297 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 17041 00000299 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 17042 0000029B 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 17043                                  
 17044 0000029D 08                      FILES:	db	8	; enough files for pipe
 17045 0000029E 04                      FCBS:	db	4	; performance for recycling
 17046 0000029F 00                      KEEP:	db	0	; keep original set
 17047 000002A0 05                      NUM_CDS: db	5	; 5 net drives
 17048                                  
 17049                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 17050                                  ;;CONFBOT: dw	0
 17051                                  ;;ALLOCLIM: dw	0
 17052                                  ;CONFBOT: ; 02/11/2022
 17053                                  ;top_of_cdss: dw 0
 17054                                  
 17055                                  ; 30/12/2022 - Retrodos v4.2 (MSDOS 6.21 SYSINIT)
 17056                                  ; (SYSINITSEG:02A3h)
 17057 000002A1 0000                    CONFBOT: dw	0
 17058 000002A3 0000                    ALLOCLIM: dw	0
 17059 000002A5 0000                    top_of_cdss: dw 0
 17060                                  
 17061                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 17062                                  ; 30/12/2022 (MSDOS 6.21 SYSINIT)
 17063                                  ;ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 17064                                  
 17065 000002A7 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 17066                                  
 17067                                  ; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 SYSINIT)
 17068                                  %if 0
 17069                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17070                                  ; (SYSINIT:02A9h)
 17071                                  
 17072                                  command_line:
 17073                                  	db	2,0
 17074                                  	db	'P'
 17075                                  	db	0
 17076                                  	times	124 db 0 ; db 124 dup(0)
 17077                                  
 17078                                  %endif
 17079                                  
 17080                                  	
 17081                                  ; (SYSINIT:0329h)
 17082 000002AB 00                      ZERO:	db	0
 17083 000002AC 00                      sepchr:	db	0
 17084 000002AD 0000                    linecount: dw	0			; line count in config.sys
 17085 000002AF 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 17086 000002B7 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 17087                                  
 17088 000002B9 FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 17089 000002BA 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 17090                                  
 17091 000002BB 0000                    buf_prev_off:	dw	0
 17092                                  
 17093                                          ;IF      NOT NOEXEC
 17094                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 17095                                          ;ENDIF
 17096                                  
 17097                                  ; 01/05/2018
 17098                                  COMEXE:
 17099 000002BD 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 17100 000002BF [E046]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 17101 000002C1 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17102 000002C3 [9602]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 17103 000002C5 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17104 000002C7 [AB02]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 17105 000002C9 0000                    		dw	0
 17106                                  
 17107                                  ; variables for install= command.
 17108                                  
 17109 000002CB 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 17110                                  					;  indicating the pass number
 17111                                  					; 0 - do scan for DOS=HIGH/LOW
 17112                                  					; 1 - load device drivers
 17113                                  					; 2 - was to load IFS
 17114                                  					;      now it is unused
 17115                                  					; 3 - do install=
 17116                                  					; >3 - nop
 17117 000002CC 0000                    install_flag:	dw	0
 17118                                  
 17119                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 17120                                  has_installed	equ	00000010b	; sysinit_base installed.
 17121                                  
 17122 000002CE 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 17123 000002D0 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 17124 000002D4 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 17125 000002D8 0000                    checksum:	dw	0		; used by sum_up
 17126                                  
 17127 000002DA 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 17128 000002EE 00                      ldexec_line:	db	0		; # of parm characters
 17129 000002EF 20                      ldexec_start:	db	' '
 17130 000002F0 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 17131                                  
 17132                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 17133                                  
 17134                                  instexe:
 17135 00000340 0000                    iexec.environ:	dw	0		; seg addr of environment
 17136 00000342 [EE02]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 17137 00000344 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17138 00000346 [DA02]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 17139 00000348 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17140 0000034A [DA02]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 17141 0000034C 0000                    		dw	0
 17142                                  
 17143                                  ; variables for comment=
 17144                                  
 17145 0000034E 00                      com_level:	db	0		; level of " " in command line
 17146 0000034F 00                      cmmt:		db	0		; length of comment string token
 17147 00000350 00                      cmmt1:		db	0		; token
 17148 00000351 00                      cmmt2:		db	0		; token
 17149 00000352 00                      cmd_indicator:	db	0
 17150 00000353 00                      donotshownum:	db	0
 17151                                  
 17152 00000354 0000                    count:		dw	0
 17153 00000356 0000                    org_count:	dw	0
 17154 00000358 0000                    chrptr:		dw	0
 17155 0000035A 0000                    cntryfilehandle: dw	0
 17156 0000035C 0000                    old_area:	dw	0
 17157 0000035E 0000                    impossible_owner_size: dw 0		; paragraph
 17158                                  
 17159                                  bucketptr: ; label dword
 17160                                  bufptr:	   ; label dword		; leave this stuff in order!
 17161 00000360 0000                    memlo:	dw	0
 17162                                  prmblk:	   ; label word
 17163 00000362 0000                    memhi:	dw	0
 17164 00000364 0000                    ldoff:	dw	0
 17165 00000366 0000                    area:	dw	0
 17166                                  
 17167                                  ; Following is the request packet used to call INIT routines for 
 17168                                  ; all device drivers. Some fields may be accessed individually in
 17169                                  ; the code, and hence have individual labels, but they should not
 17170                                  ; be separated.
 17171                                  
 17172 00000368 18                      packet:	db	24			; was 22
 17173 00000369 00                      	db	0
 17174 0000036A 00                      	db	0			; initialize code
 17175 0000036B 0000                    	dw	0
 17176 0000036D 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 17177                                  
 17178 00000375 00                      unitcount:	db	0
 17179 00000376 00000000                break_addr:	dd	0
 17180 0000037A 00000000                bpb_addr:	dd	0
 17181                                  drivenumber:	; 22/10/2022
 17182 0000037E 00                      devdrivenum:	db	0 
 17183 0000037F 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 17184                                  
 17185                                  ; end of request packet
 17186                                  
 17187                                  ;drivenumber:	db	0  ; 22/03/2019
 17188                                  
 17189                                  toomanydrivesflag:
 17190 00000381 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 17191                                  align 2
 17192                                  
 17193                                  BCodeSeg:	; 21/10/2022
 17194 00000382 8602                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 17195                                  	;dw	Bios_Code  ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 17196                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 17197                                  
 17198                                  ; 30/12/2022
 17199                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0387h
 17200                                  ;
 17201                                  ; MagicBackdoor: dd 0
 17202                                  ; NullBackdoor: 
 17203                                  ;		retf
 17204                                  
 17205                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17206                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 17207                                  ; 19/04/2019
 17208                                  _timer_lw_:
 17209 00000384 0000                    	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 17210                                  
 17211                                  ;SR;
 17212                                  ; This is the communication block between the DOS and the BIOS. It starts at
 17213                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 17214                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 17215                                  ;is passed to DOS as part of the DOSINIT call.
 17216                                  ;
 17217                                  
 17218                                  BiosComBlock:
 17219                                  	;dd	Bios_Data:SysinitPresent 
 17220                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 17221 00000386 [9C08]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 17222                                  	;dw	KERNEL_SEGMENT ; 0070h
 17223                                  	; 21/10/2022
 17224 00000388 7000                    	dw	DOSBIODATASEG ; 0070h
 17225                                  
 17226                                  ;align 2
 17227                                  
 17228                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 17229                                  	; 30/12/2022 - (MSDOS 6.21 IO.SYS, SYSINIT:0392h)
 17230                                  tempstack:	
 17231 0000038A 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 17232                                  
 17233                                  ; ----------------------------------------------------------------------------
 17234                                  
 17235                                  	; 22/10/2022 - Retro DOS v4.0
 17236                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 17237                                  GOINIT:		; (MSDOS 6.21 IO.SYS, SYSINIT:0412h)
 17238                                  	; 12/12/2022
 17239                                  	; 22/03/2019 - Retro DOS v4.0
 17240                                  	; 06/07/2018
 17241                                  	; 04/06/2018 - Retro DOS v3.0
 17242                                  ; before doing anything else, let's set the model byte
 17243 0000040A B4C0                    	mov	ah,0C0h 		; get system configuration
 17244 0000040C CD15                    	int	15h			; *
 17245 0000040E 7217                    	jc	short no_rom_config
 17246                                  
 17247 00000410 80FC00                  	cmp	ah,0			; double check
 17248 00000413 7512                    	jne	short no_rom_config
 17249 00000415 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 17250 00000419 2EA2[B902]              	mov	[cs:sys_model_byte],al 
 17251 0000041D 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 17252 00000421 2EA2[BA02]              	mov	[cs:sys_scnd_model_byte],al
 17253                                  	;jmp	short SYSIN
 17254                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17255 00000425 EB2D                    	jmp	short move_myself
 17256                                  
 17257                                  no_rom_config:				; Old ROM
 17258 00000427 B800F0                  	mov	ax,0F000h
 17259 0000042A 8ED8                    	mov	ds,ax
 17260 0000042C A0FEFF                  	mov	al,[0FFFEh]
 17261 0000042F 2EA2[B902]              	mov	[cs:sys_model_byte],al	; set the model byte.
 17262                                  
 17263                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 17264                                  ; execute the equipment determination interrupt and then
 17265                                  ; check the returned value to see if we have any floppy drives
 17266                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 17267                                  ; see the at tech ref bios listings for help on the equipment
 17268                                  ; flag interrupt (11h)	
 17269                                  
 17270                                  	; 22/10/2022
 17271                                  check_for_fake_floppy:			; entry point for rom_config above
 17272 00000433 CD11                    	int	11h			; check equipment flag
 17273                                  
 17274                                  	; 12/12/2022
 17275 00000435 A801                    	test	al,1		
 17276                                  	;test	ax,1			; have any floppies?
 17277 00000437 751B                    	jnz	short move_myself	; yes,normal system
 17278                                  
 17279                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 17280                                  ; whether it is an old ROM BIOS or a new one
 17281                                  ;
 17282                                  ; WARNING !!!
 17283                                  ;
 17284                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 17285                                  ; here will require an equivalent modification in MSINIT.ASM also
 17286                                  
 17287 00000439 06                      	push	es
 17288                                  
 17289 0000043A 30C9                    	xor	cl,cl	
 17290 0000043C B408                    	mov	ah,8			; get disk parameters
 17291 0000043E B200                    	mov	dl,0			; of drive 0
 17292 00000440 CD13                    	int	13h
 17293                                  
 17294 00000442 07                      	pop	es
 17295                                  
 17296 00000443 720F                    	jc	short move_myself	; if error lets assume that the
 17297                                  					;  ROM BIOS lied
 17298 00000445 80F900                  	cmp	cl,0			; double check (max sec no cannot be 0)
 17299 00000448 740A                    	je	short move_myself
 17300                                  
 17301 0000044A 08D2                    	or	dl,dl			; number of flp drvs == 0?
 17302 0000044C 7506                    	jnz	short move_myself
 17303                                  
 17304 0000044E 2EC606[8902]01          	mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 17305                                  
 17306                                  move_myself:
 17307 00000454 FC                      	cld				; set up move
 17308 00000455 31F6                    	xor	si,si
 17309 00000457 89F7                    	mov	di,si
 17310                                  
 17311                                  	; 12/12/2022
 17312 00000459 0E                      	push	cs
 17313 0000045A 1F                      	pop	ds
 17314                                  
 17315                                  	;mov	cx,[cs:MEMORY_SIZE]
 17316 0000045B 8B0E[9202]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 17317                                  
 17318                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 17319                                  ;;;	if	msver
 17320                                  ;	cmp	cx,1		; 1 means do scan
 17321                                  ;	jnz	short noscan
 17322                                  ;	mov	cx,2048		; start scanning at 32k boundary
 17323                                  ;	xor	bx,bx
 17324                                  ;
 17325                                  ;memscan:inc	cx
 17326                                  ;	jz	setend
 17327                                  ;	mov	ds,cx
 17328                                  ;	mov	al,[bx]
 17329                                  ;	not	al
 17330                                  ;	mov	[bx],al
 17331                                  ;	cmp	al,[bx]
 17332                                  ;	not	al
 17333                                  ;	mov	[bx],al
 17334                                  ;	jz	short memscan
 17335                                  ;setend:
 17336                                  ;	mov	cs:[memory_size],cx
 17337                                  ;;;	endif
 17338                                  
 17339                                  ;noscan: 				; cx is mem size in para
 17340                                  ;;
 17341                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 17342                                  ;;		  before we try to run.
 17343                                  ;;	       b) in any case, we should check for sufficient memory and give
 17344                                  ;;		  an appropriate error diagnostic if there isn't enough
 17345                                  ;
 17346                                  ;	push	cs
 17347                                  ;	pop	ds
 17348                                  ;
 17349                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 17350                                  ;;	  that way it would be easier to slide them down home in a minimal
 17351                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 17352                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 17353                                  ;;	  temporary home and the final one.  the problem with doing that
 17354                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 17355                                  ;
 17356                                  ;	dec	cx			; one para for an arena at end of mem
 17357                                  ;					; in case of UMBs
 17358                                  
 17359                                  	; 22/10/2022
 17360                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 17361                                  
 17362                                  	; 12/12/2022
 17363                                  	;push	cs
 17364                                  	;pop	ds
 17365                                  
 17366 0000045F 49                      	dec	cx
 17367                                  
 17368                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 17369                                  
 17370 00000460 31DB                    	xor	bx,bx
 17371 00000462 8EC3                    	mov	es,bx
 17372 00000464 268B1EBC00              	mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 17373 00000469 268E06BE00              	mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 17374 0000046E 26817F035250            	cmp	word [es:bx+3],'RP'
 17375 00000474 751B                    	jne	short NoRPL
 17376 00000476 26807F054C              	cmp	byte [es:bx+5],'L'
 17377 0000047B 7514                    	jne	short NoRPL
 17378                                  
 17379 0000047D 89CA                    	mov	dx,cx			; get TOM into DX
 17380 0000047F 52                      	push	dx
 17381 00000480 B8064A                  	mov	ax,4A06h
 17382                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 17383 00000483 CD2F                    	int	2Fh			; Get new TOM from any RPL
 17384 00000485 58                      	pop	ax
 17385 00000486 89D1                    	mov	cx,dx
 17386 00000488 39C2                    	cmp	dx,ax
 17387 0000048A 7405                    	je	short NoRPL
 17388                                  	
 17389                                  	; 11/12/2022
 17390                                  	; ds = cs
 17391 0000048C 8916[9402]              	mov	[RPLMemTop],dx
 17392                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17393                                  	;mov	[cs:RPLMemTop],dx
 17394                                  	
 17395 00000490 49                      	dec	cx
 17396                                  NoRPL:
 17397 00000491 B8[104E]                	mov	ax,SI_end		; need this much room for sysinit
 17398                                  					; (SI_end == sysinit code size)
 17399 00000494 E8CB07                  	call	off_to_para
 17400 00000497 29C1                    	sub	cx,ax
 17401                                  
 17402                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 17403                                  ; code above sysinit in memory
 17404                                  ;
 17405 00000499 81E9000A                	sub	cx,DOSSIZE/16 ; (0A00h)	; leave this much room for DOS
 17406                                  
 17407 0000049D B8B01A                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 17408                                  					; (1A70h for MSDOS 6.21 IO.SYS
 17409 000004A0 E8BF07                  	call	off_to_para		; leave this much room for BIOS code
 17410 000004A3 29C1                    	sub	cx,ax
 17411 000004A5 8EC1                    	mov	es,cx			; segment where sysinit will be located
 17412                                  
 17413 000004A7 B9[104E]                	mov	cx,SI_end		; (sysinit code size)
 17414 000004AA D1E9                    	shr	cx,1			; divide by 2 to get words
 17415 000004AC F3A5                    	rep	movsw			; relocate sysinit
 17416                                  
 17417 000004AE 06                      	push	es			; push relocated segment
 17418 000004AF B8[B404]                	mov	ax,SYSIN
 17419 000004B2 50                      	push	ax			; push relocated entry point
 17420                                  
 17421 000004B3 CB                      	retf				; far jump to relocated sysinit
 17422                                  
 17423                                  ; ----------------------------------------------------------------------------
 17424                                  
 17425                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 17426                                  
 17427                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 17428                                  	; (SYSINIT:0533h)
 17429                                  	; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 17430                                  	; (SYSINIT:04BFh)	
 17431                                  SYSIN:
 17432                                  	; Retro DOS 4.0 - 22/03/2019
 17433                                  	; Retro DOS 2.0 - 25/02/2018
 17434                                  
 17435                                  	; 23/04/2019
 17436                                  	;;mov	ax,Bios_Data
 17437                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 17438                                  	; 21/10/2022
 17439 000004B4 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 17440 000004B7 8ED8                    	mov	ds,ax
 17441 000004B9 8C0E[9A08]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 17442 000004BD C606[9C08]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 17443                                  
 17444                                  ; first move the MSDOS.SYS image up to a harmless place 
 17445                                  ; on top of our new sysinitseg
 17446                                  
 17447                                  	; 22/10/2022
 17448 000004C2 B8[104E]                	mov	ax,SI_end		; how big is sysinitseg?
 17449 000004C5 E89A07                  	call	off_to_para
 17450 000004C8 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 17451 000004CA 01C8                    	add	ax,cx
 17452 000004CC 8EC0                    	mov	es,ax
 17453                                  	
 17454 000004CE 31F6                    	xor	si,si
 17455 000004D0 89F7                    	mov	di,si
 17456                                  
 17457 000004D2 2E8E1E[7102]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 17458                                  
 17459                                  	;mov	ax,cs	
 17460                                  	;mov	ds,ax
 17461                                  
 17462                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 17463                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 17464                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 17465                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 17466                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 17467                                  
 17468                                  	; 22/10/2022
 17469 000004D7 B90050                  	mov	cx,DOSSIZE/2 ; 5000h
 17470 000004DA F3A5                    	rep     movsw
 17471 000004DC 2E8C06[7102]            	mov	[cs:CURRENT_DOS_LOCATION],es
 17472                                  
 17473                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 17474                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 17475                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 17476                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 17477                                  
 17478                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 17479                                  	;mov	ax,cs
 17480                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17481                                  	;mov	ds,ax
 17482                                  
 17483                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17484                                  
 17485                                  ;	; 24/04/2019 
 17486                                  ;;ifndef ROMDOS
 17487                                  ;	mov	ax,[es:3] 		; get offset of dos
 17488                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 17489                                  ;	mov	[dosinit],ax		; that's the entry point offset
 17490                                  ;	call	off_to_para		; subtract this much from segment
 17491                                  ;	; 23/04/2019
 17492                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 17493                                  ;	sub	[FINAL_DOS_LOCATION],ax
 17494                                  ;;else
 17495                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 17496                                  ;;
 17497                                  ;;endif ; ROMDOS
 17498                                  
 17499                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17500                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 17501                                  
 17502                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 17503                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 17504                                  
 17505                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17506                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 17507 000004E1 A10300                  	mov	ax, [3]		; mov ax, word ptr ds:3
 17508                                  
 17509 000004E4 2EA3[6F02]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 17510                                  	; 02/11/2022
 17511 000004E8 E87707                  	call	off_to_para		; subtract this much from segment
 17512 000004EB 2E2906[7102]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 17513                                  
 17514                                  	; Current DOSCODE start address = dword [dosinit]
 17515                                  
 17516                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 17517                                  ;; until it is determined whether it will be running in HIMEM or not.
 17518                                  
 17519                                  ;ifndef ROMDOS
 17520                                  
 17521                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 17522                                  
 17523                                  	; 22/10/2022
 17524 000004F0 8CC0                    	mov	ax,es
 17525 000004F2 05000A                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 17526 000004F5 8EC0                    	mov	es,ax
 17527 000004F7 2E8706[8702]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 17528 000004FC 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 17529                                  
 17530                                  	;mov	si,BCODE_START ; mov si,30h
 17531                                  	; 09/12/2022
 17532 000004FE BE[3000]                	mov	si,BCODESTART
 17533                                  	; 02/11/2022
 17534 00000501 89F7                    	mov	di,si
 17535 00000503 B9B01A                  	mov	cx,BCODE_END   ; mov cx,1A60h ; mov cx,1A70h ; 30/12/2022
 17536 00000506 29F1                    	sub	cx,si
 17537 00000508 D1E9                    	shr	cx,1
 17538 0000050A F3A5                    	rep	movsw			; move Bios_Code into place
 17539                                  
 17540 0000050C 8CC0                    	mov	ax,es			; tell it what segment it's in
 17541 0000050E 2EFF1E[8502]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 17542                                  
 17543                                  ;endif	; not ROMDOS
 17544                                  
 17545                                  ; now call dosinit while it's in its temporary home
 17546                                  
 17547                                  	;mov	ax,cs
 17548                                  	;mov	ds,ax	 
 17549                                  
 17550                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 17551                                  
 17552                                  	; 22/10/2022
 17553                                  
 17554 00000513 2EC43E[8603]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 17555                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 17556 00000518 2EC536[7302]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 17557                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 17558                                  
 17559 0000051D 2E8B16[9202]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 17560                                  
 17561 00000522 FA                      	cli
 17562 00000523 8CC8                    	mov	ax,cs
 17563 00000525 8ED0                    	mov	ss,ax
 17564                                  
 17565                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 17566                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 17567                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 17568                                  ;SYSINIT:0532h: 
 17569                                  
 17570                                  ; 22/10/2022
 17571                                  ; ----------------------------------------------------------------------------
 17572                                  ;SYSINIT:05A6h:
 17573                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 17574                                  
 17575                                  	;mov	sp, 05A6h
 17576 00000527 BC2605                  	mov     sp,locstack		; set stack
 17577                                  
 17578 0000052A FB                      	sti
 17579                                  
 17580                                  ;align 2
 17581                                  	; 30/03/2018
 17582                                  ;LOCSTACK:
 17583                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 17584                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 17585                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 17586                                  
 17587                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17588                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 17589                                  
 17590                                  ; This call to DOSINIT will relocate the DOS data from its present location
 17591                                  ; at the top of memory, to its final location in low memory just above the
 17592                                  ; BIOS data. It will then build important DOS data structures in low 
 17593                                  ; memory following the DOS data. It returns (among many other things) the
 17594                                  ; new starting address of free memory.
 17595                                  
 17596 0000052B 2EFF1E[6F02]            	call	far [cs:dosinit]	; call dosinit	
 17597                                  			 ; es:di -> sysinitvars_ext
 17598                                  
 17599 00000530 2E8C1E[8302]            	mov	[cs:def_php],ds		; save pointer to PSP
 17600                                  	
 17601                                  	; 11/12/2022
 17602                                  	; 22/03/2019
 17603 00000535 0E                      	push	cs
 17604 00000536 1F                      	pop	ds
 17605                                  	; 22/10/2022
 17606 00000537 A3[8102]                	mov	[hi_doscod_size],ax
 17607 0000053A 890E[7F02]              	mov	[lo_doscod_size],cx
 17608 0000053E 8916[7B02]              	mov	[dos_segreinit],dx
 17609                                  	
 17610                                  	; 11/12/2022
 17611                                  	; ds = cs
 17612                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 17613                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 17614                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 17615                                  
 17616                                  	; 05/06/2018 - Retro DOS v3.0
 17617                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 17618                                  
 17619                                  	; 11/12/2022
 17620                                  	; ds = cs
 17621                                  	; 22/10/2022
 17622                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 17623 00000542 268B05                  	mov	ax,[es:di] ; 22/03/2019
 17624                                  	;mov	[cs:DOSINFO],ax
 17625 00000545 A3[6B02]                	mov	[DOSINFO],ax
 17626                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 17627 00000548 268B4502                	mov	ax,[es:di+2]
 17628                                  	;mov	[cs:DOSINFO+2],ax
 17629 0000054C A3[6D02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 17630                                  
 17631                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 17632 0000054F 268B4504                	mov	ax,[es:di+4]
 17633                                  	;mov	[cs:sysi_country],ax
 17634 00000553 A3[7702]                	mov	[sysi_country],ax
 17635                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 17636 00000556 268B4506                	mov	ax,[es:di+6]
 17637                                  	;mov	[cs:sysi_country+2],ax
 17638 0000055A A3[7902]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 17639                                  
 17640                                  	; 20/04/2019
 17641                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 17642                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 17643                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 17644                                  	; 22/10/2022
 17645                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 17646                                  	;;;mov	[dos_segreinit+2],es
 17647                                  	;;mov	[dos_segreinit+2],ax
 17648                                  	;mov	[cs:dos_segreinit+2],ax
 17649                                  	; 11/12/2022
 17650                                  	; ds = cs
 17651 0000055D 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17652 00000561 8C06[7D02]              	mov	[dos_segreinit+2],es
 17653                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17654                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 17655                                  	;mov	[cs:dos_segreinit+2],es
 17656                                  
 17657                                  ; ----------------------------------------------------------------------------
 17658                                  
 17659                                  ;SYSINIT:0577h:
 17660                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 17661                                  ;SYSINIT:05D1h:	; NoRPLArena 
 17662                                  
 17663                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 17664                                  ;------ Cover up RPL code with an arena
 17665                                  ;SYSINIT:05EBh:
 17666                                  	; 11/12/2022
 17667                                  	; ds = cs
 17668 00000565 31DB                    	xor	bx,bx
 17669 00000567 391E[9402]              	cmp	[RPLMemTop],bx ; 0
 17670                                  	;cmp	word [RPLMemTop],0
 17671                                  	;;cmp	word [cs:RPLMemTop],0
 17672 0000056B 7450                    	je	short NoRPLArena
 17673                                  
 17674                                  ;------ alloc all memory
 17675                                  
 17676                                  	; 11/12/2022
 17677                                  	;mov	bx,0FFFFh
 17678 0000056D 4B                      	dec	bx
 17679                                  	; bx = 0FFFFh
 17680 0000056E B448                    	mov	ah,48h
 17681 00000570 CD21                    	int	21h
 17682                                  			; DOS - 2+ - ALLOCATE MEMORY
 17683                                  			; BX = number of 16-byte paragraphs desired
 17684 00000572 B448                    	mov	ah,48h
 17685 00000574 CD21                    	int	21h
 17686                                  
 17687 00000576 8EC0                    	mov	es,ax			; get it into ES and save it
 17688 00000578 06                      	push	es
 17689                                  
 17690                                  ;------ resize upto RPL mem
 17691                                  
 17692                                  	; 11/12/2022
 17693                                  	; ds = cs
 17694                                  	;sub	ax,[cs:RPLMemTop]
 17695 00000579 2B06[9402]              	sub	ax,[RPLMemTop]
 17696 0000057D F7D8                    	neg	ax
 17697 0000057F 48                      	dec	ax
 17698 00000580 89C3                    	mov	bx,ax
 17699 00000582 B44A                    	mov	ah,4Ah
 17700 00000584 CD21                    	int	21h
 17701                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 17702                                  			; ES = segment address of block to change
 17703                                  			; BX = new size in paragraphs
 17704                                  
 17705                                  ;------ allocate the free (RPL MEM)
 17706                                  
 17707 00000586 BBFFFF                  	mov	bx,0FFFFh
 17708 00000589 B448                    	mov	ah,48h
 17709 0000058B CD21                    	int	21h
 17710 0000058D B448                    	mov	ah,48h
 17711 0000058F CD21                    	int	21h
 17712                                  
 17713                                  ;----- mark that it belongs to RPL
 17714                                  
 17715 00000591 48                      	dec	ax
 17716 00000592 8EC0                    	mov	es,ax
 17717                                  	;mov	word [es:arena_owner],8
 17718 00000594 26C70601000800          	mov	word [es:1],8
 17719                                  	;mov	word [es:arena_name],'RP'
 17720 0000059B 26C70608005250          	mov	word [es:8],'RP'
 17721                                  	;mov	word [es:arena_name+2],'L'
 17722 000005A2 26C7060A004C00          	mov	word [es:10],'L'
 17723                                  	;mov	word [es:arena_name+4],0
 17724 000005A9 26C7060C000000          	mov	word [es:12],0
 17725                                  	;mov	word [es:arena_name+6],0
 17726 000005B0 26C7060E000000          	mov	word [es:14],0	
 17727                                  
 17728 000005B7 07                              pop     es                      ; get back ptr to first block
 17729 000005B8 B449                            mov     ah,49h	; Dealloc	; and free it
 17730 000005BA CD21                    	int	21h		
 17731                                  					; DOS - 2+ - FREE MEMORY
 17732                                  					; ES = segment address of area to be freed
 17733                                  	; 11/12/2022
 17734 000005BC F8                      	clc
 17735                                  
 17736                                  ; ----------------------------------------------------------------------------
 17737                                  
 17738                                  NoRPLArena:
 17739                                  	; 11/12/2022
 17740                                  	; ds = cs
 17741                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 17742 000005BD C43E[6B02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 17743                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17744                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 17745                                  
 17746                                  	; 11/12/2022
 17747                                  	;clc				; get the extended memory size
 17748                                  
 17749                                  ;	execute the get extended memory size subfunction in the bios int 15h
 17750                                  ;	if the function reports an error do nothing else store the extended
 17751                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 17752                                  ;	currently pointed to by es:di. use the offsets specified in the
 17753                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 17754                                  
 17755 000005C1 B488                    	mov	ah,88h
 17756 000005C3 CD15                    	int	15h			; check extended memory size
 17757 000005C5 720B                    	jc	short no_ext_memory
 17758                                  			; Get Extended Memory Size
 17759                                  			; Return: CF clear on success
 17760                                  			; AX = size of memory above 1M in K	
 17761                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 17762                                  	; 22/10/2022
 17763 000005C7 26894545                	mov	[es:di+45h],ax ; save extended memory size
 17764 000005CB 09C0                    	or	ax,ax
 17765 000005CD 7403                    	jz	short no_ext_memory
 17766 000005CF E80606                  	call	ClrVDISKHeader
 17767                                  no_ext_memory:
 17768                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 17769 000005D2 268B4510                	mov	ax,[es:di+10h]
 17770                                  	;add	ax,bufinsiz
 17771 000005D6 83C014                  	add	ax,20			; size of buffer header
 17772                                  	; 11/12/2022
 17773                                  	; ds = cs
 17774 000005D9 A3[9B02]                	mov	[singlebuffersize],ax	; total size for a buffer
 17775                                  	;mov	[cs:singlebuffersize],ax	
 17776                                  	; 11/12/2022
 17777 000005DC A0[9602]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 17778                                  	;mov	al,[cs:DEFAULT_DRIVE]
 17779                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 17780 000005DF 26884543                	mov	[es:di+43h],al
 17781                                  
 17782                                  ; determine if 386 system...
 17783                                  
 17784                                  	;get_cpu_type			; macro to determine cpu type
 17785                                  
 17786                                  get_cpu_type:
 17787                                  	; 11/12/2022
 17788 000005E3 9C                      	pushf
 17789                                  	;push	bx
 17790                                  	;xor	bx,bx
 17791                                  	; 11/12/2022
 17792                                  	;xor	cx,cx
 17793                                  	;
 17794 000005E4 31C0                    	xor	ax,ax
 17795                                  	; ax = 0
 17796 000005E6 50                      	push    ax
 17797 000005E7 9D                      	popf
 17798 000005E8 9C                      	pushf
 17799 000005E9 58                      	pop	ax
 17800 000005EA 2500F0                  	and	ax,0F000h
 17801                                  	;cmp	ax,0F000h
 17802 000005ED 80FCF0                  	cmp	ah,0F0h 
 17803 000005F0 7410                    	je	short cpu_8086
 17804                                  	;mov	ax,0F000h
 17805 000005F2 B4F0                    	mov	ah,0F0h
 17806                                  	; ax = 0F000h
 17807 000005F4 50                      	push	ax
 17808 000005F5 9D                      	popf
 17809 000005F6 9C                      	pushf
 17810 000005F7 58                      	pop	ax
 17811                                  	;and	ax,0F000h
 17812 000005F8 80E4F0                  	and	ah,0F0h
 17813 000005FB 7405                    	jz	short cpu_286
 17814                                  cpu_386:
 17815                                  	; 11/12/2022
 17816                                  	;;inc	bx
 17817                                  	;inc	cx
 17818                                  	; 11/12/2022
 17819                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 17820 000005FD 26C6454401              	mov	byte [es:di+44h],1
 17821                                  cpu_286:
 17822                                  	;;;inc	bx
 17823                                  	;;inc	cx
 17824                                  cpu_8086:
 17825                                  	; 11/12/2022
 17826                                  	;;mov	ax,bx	
 17827                                  	;pop	bx
 17828 00000602 9D                      	popf
 17829                                  
 17830                                  	;...
 17831                                  
 17832                                  	; 11/12/2022
 17833                                  	;or	cl,cl
 17834                                  	;jz	short not_386_system
 17835                                  	; 11/12/202
 17836                                  	;cmp	cl,2
 17837                                  	;;cmp	ax,2			; is it a 386?
 17838                                  	;jne	short not_386_system	; no: don't mess with flag
 17839                                  	;;mov	byte [es:di+SYSI_DWMOVE],1
 17840                                  	; 11/12/2022
 17841                                  	; 22/10/2022
 17842                                  	;mov	byte [es:di+44h],1
 17843                                  not_386_system:
 17844                                  	;mov	al,[es:di+SYSI_NUMIO]
 17845 00000603 268A4520                	mov	al,[es:di+20h]
 17846                                  	; 11/12/2022
 17847                                  	; ds = cs
 17848 00000607 A2[7E03]                	mov	[drivenumber],al	; save start of installable block drvs
 17849                                  	;mov	[cs:drivenumber],al
 17850                                  
 17851 0000060A 8CC8                    	mov	ax,cs
 17852 0000060C 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 17853                                  	; 11/12/2022
 17854                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 17855                                  	;;mov	cx,[cs:singlebuffersize]
 17856                                  	;shr	cx,1			
 17857                                  	;shr	cx,1			; divide size by 16...
 17858                                  	;shr	cx,1
 17859                                  	;shr	cx,1			; ...to get paragraphs...
 17860                                  	;inc	cx			; ... and round up
 17861                                  	; 11/12/2022
 17862 0000060F 8B1E[9B02]              	mov	bx,[singlebuffersize]
 17863 00000613 B104                    	mov	cl,4
 17864 00000615 D3EB                    	shr	bx,cl
 17865 00000617 43                      	inc	bx
 17866                                  
 17867                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 17868                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 17869                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 17870                                  ;	  it is probably safe to assume that the sector size always will be.
 17871                                  ;
 17872                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 17873                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 17874                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 17875                                  ;	  other code from ever causing a problem???
 17876                                  
 17877                                  	; 11/12/2022
 17878 00000618 29D8                    	sub	ax,bx
 17879                                  	;sub	ax,cx
 17880 0000061A A3[A502]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 17881                                  	; 22/10/2022
 17882                                  	;mov	[cs:top_of_cdss],ax
 17883                                  
 17884                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 17885                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 17886                                  ;	for allocating memory for MagicDrv.
 17887                                  
 17888 0000061D 06                      	push	es			; preserve pointer to dosinfo
 17889 0000061E 57                      	push	di
 17890                                  
 17891                                  	; 22/10/2022
 17892                                  ;	mov	cx,ax			; save pointer for buffer
 17893                                  ;
 17894                                  ;;	now allocate space for 26 CDSs
 17895                                  ;
 17896                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 17897                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 17898                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 17899                                  
 17900                                  	; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS)
 17901                                  	; (SYSINIT:064Ch)
 17902 0000061F 89C1                    	mov	cx,ax ; (*)
 17903 00000621 2D8F00                  	sub	ax,((26 *(curdirlen))+15)/16 ; sub ax,143
 17904 00000624 A3[A302]                	mov	[ALLOCLIM],ax		; init top of free memory pointer
 17905 00000627 A3[A102]                	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 17906                                  	 	
 17907                                  ; setup and initialize the temporary buffer at cx
 17908                                  
 17909                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 17910 0000062A 26C47D12                	les	di,[es:di+12h]
 17911                                  	; 11/12/2022
 17912 0000062E 31DB                    	xor	bx,bx
 17913                                  	;xor	ax,ax
 17914                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 17915                                  	;mov	word [es:di+4],0
 17916 00000630 26895D04                	mov	[es:di+4],bx ; 0
 17917                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 17918                                  	;mov	word [es:di],0
 17919 00000634 26891D                  	mov	[es:di],bx ; 0
 17920                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss] ; 6.21
 17921                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss] ; 5.0
 17922                                  	;mov	[es:di+2],ax
 17923                                  	;mov	es,ax	; [top_of_cdss] = [CONFBOT]
 17924                                  	; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS, SYSINIT)
 17925 00000637 26894D02                	mov	[es:di+2],cx ; [top_of_cdss] ; (*)	
 17926 0000063B 8EC1                    	mov	es,cx
 17927                                  
 17928                                  	; 11/12/2022
 17929                                  	;xor	ax,ax
 17930                                  	;mov	di,ax			; es:di -> single buffer
 17931 0000063D 89DF                    	mov	di,bx
 17932                                  	; di = 0
 17933                                  
 17934                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 17935                                  	; 11/12/2022
 17936                                  	;mov	[es:di],ax ; 0
 17937 0000063F 26891D                  	mov	[es:di],bx ; 0
 17938                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 17939                                  	; 11/12/2022
 17940                                  	;mov	[es:di+2],ax ; 0
 17941 00000642 26895D02                	mov	[es:di+2],bx ; 0 
 17942                                  
 17943                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 17944                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 17945                                  
 17946                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 17947 00000646 26C74504FF00            	mov	word [es:di+4],00FFh
 17948                                  ;SYSINIT:06E6h
 17949                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 17950                                  	;mov	word [es:di+6],0
 17951                                  	; 11/12/2022
 17952                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 17953 0000064C 26895D06                	mov	[es:di+6],bx ; 0
 17954                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 17955                                  	;mov	word [es:di+8],0
 17956                                  	; 11/12/2022
 17957                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 17958 00000650 26895D08                	mov	[es:di+8],bx ; 0
 17959                                  
 17960 00000654 5F                      	pop	di			; restore pointer to DOSINFO data
 17961 00000655 07                      	pop	es
 17962                                  
 17963                                  	; 11/12/2022
 17964                                  	; ds = cs
 17965                                  	; 22/10/2022
 17966                                  	;push	cs
 17967                                  	;pop	ds
 17968                                  
 17969 00000656 E81206                  	call	TempCDS			; set up cdss so re_init and sysinit
 17970                                  					;  can make disk system calls
 17971                                  					; tempcds trashes ds
 17972                                  	; 10/05/2019
 17973 00000659 2E8E1E[8302]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 17974                                  
 17975                                  	;if not ibmjapver
 17976                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 17977                                  	;endif
 17978                                  
 17979                                  	; 22/10/2022
 17980                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 17981                                  	; 30/12/2022
 17982                                  ;SYSINIT:0697h:	; (MSDOS 6.21 IO.SYS, SYSINIT)
 17983                                  	;call	far ptr 70h:89Bh
 17984 0000065E 9A[8F07]7000            	call	DOSBIODATASEG:RE_INIT
 17985                                  
 17986 00000663 FB                      	sti				; ints ok
 17987 00000664 FC                      	cld				; make sure
 17988                                  
 17989                                  ; 23/03/2019
 17990                                  
 17991                                  ;SYSINIT:069Eh	; 30/12/2022
 17992                                  
 17993                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 17994                                  ; of the way by putting it just below sysinit at end of memory.
 17995                                  
 17996 00000665 8CCB                    	mov	bx,cs
 17997 00000667 83EB10                  	sub	bx,10h
 17998 0000066A 8EC3                    	mov	es,bx
 17999 0000066C 31F6                    	xor	si,si
 18000 0000066E 89F7                    	mov	di,si
 18001 00000670 B98000                  	mov	cx,128
 18002 00000673 F3A5                    	rep	movsw
 18003                                  
 18004                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 18005                                  	; 22/10/2022
 18006 00000675 268C063600              	mov	[es:36h],es
 18007                                  
 18008                                   	; Set Process Data Block - Program Segment Prefix address
 18009                                  	; BX = PDB/PSP segment
 18010 0000067A B450                            mov	ah,50h	; SET_CURRENT_PDB
 18011 0000067C CD21                    	int	21h			; tell DOS we moved it
 18012                                  			; DOS - 2+ internal - SET PSP SEGMENT
 18013                                  			; BX = segment address of new PSP
 18014                                  	; 22/10/2022
 18015                                  	; 27/03/2019
 18016 0000067E 1E                      	push	ds ; */			; preserve DS returned by DOSINIT
 18017                                  
 18018 0000067F 0E                      	push	cs	
 18019 00000680 1F                      	pop	ds
 18020                                  
 18021                                  	; set up temp. critical error handler
 18022 00000681 BA[9D45]                	mov	dx,int24		; set up int 24 handler
 18023                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 18024                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 18025 00000684 B82425                  	mov	ax,2524h
 18026 00000687 CD21                    	int	21h
 18027                                  
 18028 00000689 803E[8103]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 18029 0000068E 7405                            je      short no_err		   ;  N: continue            M029
 18030 00000690 BA[D24D]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 18031                                          ; 22/10/2022
 18032                                  	;call	print 			   ;		             M029
 18033                                  	; 12/12/2022
 18034 00000693 EB03                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0                    
 18035                                  no_err:
 18036                                  	; 12/05/2019
 18037                                  	;----------------------------------------------
 18038                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 18039                                  	; 22/10/2022 - Retro DOS v4.0
 18040                                  	; 12/12/2022
 18041 00000695 BA[A145]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 18042                                  p_dosinit_msg:
 18043 00000698 E8DD3E                  	call	print			; Print message
 18044                                  	;----------------------------------------------
 18045                                  	
 18046                                  	; 11/12/2022
 18047                                  	; 22/10/2022
 18048                                  	; 23/03/2019 - Retro DOS v4.0
 18049                                  	;pop	ds			; start of free memory
 18050                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 18051                                  	
 18052                                  	; 11/12/2022
 18053                                  	; 27/03/2019
 18054 0000069B 8A16[9602]              	mov	dl,[DEFAULT_DRIVE]	
 18055 0000069F 1F                      	pop	ds ; */
 18056                                  
 18057 000006A0 08D2                    	or	dl,dl
 18058                                  	;jz	short nodrvset		; bios didn't say
 18059 000006A2 7410                    	jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 18060                                  	;dec	dl			; A = 0
 18061                                  	; 18/12/2022
 18062 000006A4 4A                      	dec	dx
 18063 000006A5 B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 18064 000006A7 CD21                    	int	21h			; select the disk
 18065                                  			; DOS - SELECT DISK
 18066                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 18067                                  			; Return: AL = number of logical drives
 18068                                  nodrvset:
 18069                                  	; 04/01/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS SYINIT)
 18070                                  	; (SYSINIT:06DFh)
 18071                                  	;push	ds
 18072 000006A9 29C0                    	sub	ax,ax
 18073 000006AB 8ED8                    	mov	ds,ax ; 0 ; ROM BIOS Data Area
 18074 000006AD A16C04                  	mov	ax,[46Ch] ; timer tick count (18.2 ticks per second)
 18075 000006B0 2EA3[8403]              	mov	[cs:_timer_lw_],ax
 18076                                  	;pop	ds
 18077                                  	; ds <> cs
 18078                                  
 18079                                  	; ---------------------
 18080                                  
 18081                                  	;ifdef	dblspace_hooks
 18082                                  	;	....
 18083                                  	;	....
 18084                                  	;endif	
 18085                                  
 18086                                  	; ---------------------
 18087                                  
 18088                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 18089                                  
 18090                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 18091                                  ; ----------------------------------------------------------------------------
 18092                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 18093                                  ; ----------------------------------------------------------------------------
 18094                                  ; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS SYSINIT)
 18095                                  
 18096                                  ProcessConfig:
 18097                                  	;; ds = cs ; 27/03/2019
 18098                                  	; 11/12/2022
 18099                                  	; ds <> cs	
 18100                                  
 18101                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 18102                                  
 18103 000006B4 E82619                  	call	doconf			; do pre-scan for dos=high/low
 18104                                  
 18105                                  	; 11/12/2022
 18106                                  	; 27/03/2019
 18107                                  	; ds = cs (at return from doconf)
 18108                                  
 18109                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 18110                                  ; It will either be relocated to low memory, above the DOS data structures,
 18111                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 18112                                  ; code entry points will be located in low memory. Dos_segreinit is used
 18113                                  ; to tell the DOS data where the code has been placed, and to install the
 18114                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 18115                                  ; must first initialize it in its present location and load the installable
 18116                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 18117                                  ; relocate the DOS code into HiMem.
 18118                                  ;
 18119                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 18120                                  ; to install the low memory stub (this must be done before allowing any
 18121                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 18122                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 18123                                  ; been patched.
 18124                                  
 18125                                  	; 22/10/2022 - Retro DOS v4.0
 18126                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 18127                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 18128                                  	; 11/12/2022
 18129 000006B7 803E[6A02]00            	cmp	byte [runhigh],0
 18130 000006BC 740C                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 18131                                  
 18132                                  ;------ user chose to load high
 18133                                  
 18134                                  	; 22/10/2022
 18135                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 18136                                  	; 11/12/2022
 18137                                  	; ds = cs
 18138 000006BE 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18139                                  
 18140                                  	;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 18141                                  	; 27/03/2019
 18142                                  	;;mov	es,[FINAL_DOS_LOCATION]
 18143                                  
 18144 000006C2 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 18145                                  	; 11/12/2022
 18146                                  	; ds = cs
 18147                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 18148 000006C4 FF1E[7B02]              	call	far [dos_segreinit]
 18149                                  
 18150 000006C8 EB10                    	jmp	short do_multi_pass
 18151                                  
 18152                                  ;------ User chose to load dos low
 18153                                  
 18154                                  dont_install_stub:
 18155                                  	; 22/10/2022
 18156 000006CA 31DB                    	xor	bx,bx			; M012
 18157                                  					; don't use int 21 call to alloc mem
 18158 000006CC E8D002                  	call	MovDOSLo		; move it !
 18159                                  
 18160 000006CF B80100                  	mov	ax,1			; dont install stub
 18161                                  	; 11/12/2022
 18162                                  	; ds = cs
 18163 000006D2 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18164                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 18165                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 18166                                  	; 27/03/2019
 18167                                  ;do_multi_pass:
 18168                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 18169                                  
 18170                                  	; 11/12/2022
 18171                                  	; ds = cs
 18172                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 18173 000006D6 FF1E[7B02]              	call	far [dos_segreinit]
 18174                                  do_multi_pass:
 18175 000006DA E80C02                  	call	AllocFreeMem		; allocate all the free mem
 18176                                  					; & update [memhi] & [area]
 18177                                  					; start of free memory.
 18178                                  	;ifdef	dblspace_hooks
 18179                                  	;mov	bx,0			; magic backdoor to place int hooks
 18180                                  	;call	cs:MagicBackdoor
 18181                                  	;endif
 18182                                  
 18183                                  ; Now, process config.sys some more.  
 18184                                  ; Load the device drivers and install programs
 18185                                  
 18186                                  	; 22/10/2022
 18187                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 18188                                  	; 11/12/2022
 18189                                  	; ds = cs
 18190 000006DD FE06[CB02]              	inc	byte [multi_pass_id]
 18191 000006E1 E89619                  	call	multi_pass		; load device drivers
 18192 000006E4 E8ED2D                  	call	ShrinkUMB
 18193 000006E7 E8112E                  	call	UnlinkUMB		; unlink all UMBs	;M002
 18194                                  	; 02/11/2022
 18195                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 18196                                  	; 11/12/2022
 18197                                  	; ds = cs
 18198 000006EA FE06[CB02]              	inc	byte [multi_pass_id]
 18199 000006EE E88919                  	call	multi_pass		; was load ifs (now does nothing)
 18200                                  
 18201                                  	;ifdef	dblspace_hooks
 18202                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 18203                                  	;endif
 18204                                  
 18205                                  	; ds = cs
 18206                                  	
 18207 000006F1 E82106                  	call	endfile			; setup fcbs, files, buffers etc
 18208                                  
 18209                                  	;ifdef	dblspace_hooks
 18210                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 18211                                  	;endif
 18212                                  
 18213                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 18214                                  ;to device drivers. This has been moved up to this point to avoid problems 
 18215                                  ;with overlays called from installed programs
 18216                                  
 18217                                  	; 11/12/2022
 18218                                  	; ds = cs
 18219                                  
 18220                                  	;;mov	ax,Bios_Data ; 0070h
 18221                                  	;mov	ax,KERNEL_SEGMENT
 18222                                  	; 21/10/2022
 18223 000006F4 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 18224 000006F7 8EC0                    	mov	es,ax			; point ES to bios data
 18225                                  
 18226 000006F9 26C606[9C08]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 18227                                  
 18228                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 18229                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 18230                                  	;test	byte [cs:install_flag],1
 18231                                  	; 11/12/2022
 18232                                  	; ds = cs
 18233 000006FF F606[CC02]01            	test	byte [install_flag],1
 18234                                  	;test	byte [cs:install_flag],have_install_cmd
 18235                                  					; are there install commands?
 18236 00000704 7407                    	jz	short dolast		; no, no need for further processing
 18237                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 18238                                  	; 11/12/2022
 18239                                  	; ds =cs
 18240 00000706 FE06[CB02]              	inc	byte [multi_pass_id]
 18241 0000070A E86D19                  	call	multi_pass		; execute install= commands
 18242                                  
 18243                                  dolast:
 18244                                  	
 18245                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 18246                                  ;  free the confbot area used for config.sys and sysinit itself.
 18247                                  
 18248                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 18249                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 18250                                  ; anything, but just set up the ROM area for suballocation (or print
 18251                                  ; a message if HiMem is not available).
 18252                                  ;
 18253                                  ; There is also this little hack for CPM style DOS calls that needs to
 18254                                  ; be done when A20 is set...
 18255                                  
 18256                                  	; 11/12/2022
 18257                                  	; ds = cs
 18258                                  
 18259                                  	; 22/10/2022
 18260                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 18261                                  	; 11/12/2022
 18262 0000070D 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 18263 00000712 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 18264 00000714 E83702                  	call	LoadDOSHiOrLo
 18265                                  _@@_:
 18266                                  	;cmp	byte [cs:runhigh],0	; are we running low
 18267                                  	; 11/12/2022
 18268                                  	; ds = cs
 18269 00000717 803E[6A02]00            	cmp	byte [runhigh],0
 18270                                  	;je	short _@@@
 18271 0000071C 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 18272 0000071E E82B05                  	call	CPMHack			; make ffff:d0 same as 0:c0
 18273                                  ;_@@@:
 18274                                  
 18275                                  ; We are now done with CONFIG.SYS processing
 18276                                  
 18277                                  ConfigDone:
 18278                                  	; 12/12/2022
 18279                                  	; 22/10/2022
 18280                                  	;mov	byte [cs:donotshownum],1 
 18281                                  					; done with config.sys.
 18282                                  					; do not show line number message.
 18283                                  	;mov	es,[cs:area]
 18284                                  	; 12/12/2022
 18285                                  	; ds = cs
 18286                                  	; 27/03/2019
 18287 00000721 C606[5303]01            	mov	byte [donotshownum],1
 18288 00000726 8E06[6603]              	mov	es,[area]
 18289                                  
 18290 0000072A B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 18291 0000072C CD21                    	int	21h
 18292                                  			; DOS - 2+ - FREE MEMORY
 18293                                  			; ES = segment address of area to be freed
 18294                                  
 18295                                  	; 22/10/2022
 18296                                  	;test	word [cs:install_flag],2
 18297                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 18298                                  	;test	byte [cs:install_flag],has_installed
 18299                                  	; 11/12/2022
 18300                                  	; ds = cs
 18301 0000072E F606[CC02]02            	test	byte [install_flag],2 ; has_installed
 18302                                  	;test	byte [install_flag],has_installed
 18303 00000733 741F                    	jz	short skip_free_sysinitbase ; no.
 18304                                  
 18305                                  ; set block from the old_area with impossible_owner_size.
 18306                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 18307                                  ; handle install= command.
 18308                                  
 18309                                  	; 12/12/2022
 18310                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 18311                                  	;push	bx
 18312                                  	
 18313                                  	; 22/10/2022
 18314                                  	;mov	es,[cs:old_area]
 18315                                  	;mov	bx,[cs:impossible_owner_size]
 18316                                  	; 12/12/2022
 18317                                  	; ds = cs
 18318 00000735 8E06[5C03]              	mov	es,[old_area]
 18319 00000739 8B1E[5E03]              	mov	bx,[impossible_owner_size]
 18320                                  	
 18321 0000073D B44A                    	mov	ah,4Ah ; SETBLOCK
 18322 0000073F CD21                    	int	21h
 18323                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 18324                                  			; ES = segment address of block to change
 18325                                  			; BX = new size in paragraphs
 18326 00000741 8CC0                    	mov	ax,es
 18327 00000743 48                      	dec	ax
 18328 00000744 8EC0                    	mov	es,ax			; point to arena
 18329                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 18330 00000746 26C70601000800          	mov	word [es:1],8
 18331                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 18332 0000074D 26C70608005344          	mov	word [es:8],'SD'
 18333                                  	
 18334                                  	; 12/12/2022
 18335                                  	;pop	bx
 18336                                          ;pop	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 18337                                  
 18338                                  skip_free_sysinitbase:
 18339                                  	; 22/10/2022
 18340                                  	;cmp	byte [cs:runhigh],0
 18341                                  	; 12/12/2022
 18342                                  	; ds = cs
 18343 00000754 803E[6A02]00            	cmp	byte [runhigh],0	
 18344 00000759 7403                    	je	short _@@@_ ; 04/07/2023
 18345                                  
 18346 0000075B E8D003                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 18347                                  
 18348                                  ; ----------------------------------------------------------------------------
 18349                                  
 18350                                  _@@@_:
 18351                                  	; 12/12/2022
 18352                                  	; ds = cs
 18353                                  	; 22/10/2022
 18354                                  	; 27/03/2019
 18355                                  	;push	cs
 18356                                  	;pop	ds			; point DS to sysinitseg
 18357                                  
 18358                                  ; set up the parameters for command
 18359                                  
 18360                                  ;	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 18361                                  ;;ifdef	MULTI_CONFIG
 18362                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 18363                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 18364                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 18365                                  ;	; !!!
 18366                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 18367                                  ;       ; !!!
 18368                                  ;	call    disable_autoexec        ; no, we should disable it
 18369                                  ;process_autoexec:
 18370                                  ;;endif	; !!!
 18371                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 18372                                  ;	; !!!
 18373                                  
 18374                                  	; 22/10/2022 
 18375                                  	;mov     cl,[command_line]
 18376                                          ;mov     ch,0
 18377                                          ;inc     cx
 18378                                          ;mov     si,command_line	
 18379                                  	;add     si,cx
 18380                                          ;mov     byte [si],cr	; cr-terminate command line
 18381                                  
 18382                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 18383                                  	; (SYSINIT:0809h)
 18384                                  
 18385                                  	;;;;
 18386                                  
 18387                                  	; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 18388                                  	; (SYSINIT:0813h)
 18389                                  	; ds = cs
 18390                                  	; push	cs
 18391                                  	; pop	ds
 18392                                  
 18393 0000075E C606[DD14]00            	mov	byte [config_cmd],0	; set special code for query_user
 18394 00000763 E8DB39                  	call    query_user		; to issue the AUTOEXEC prompt
 18395 00000766 7308                    	jnc	short process_autoexec	; we should process autoexec normally
 18396                                  	; !!!
 18397 00000768 800E[AA47]04            	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 18398                                  	; !!!
 18399 0000076D E8CD3A                  	call    disable_autoexec        ; no, we should disable it
 18400                                  process_autoexec:
 18401                                  	; !!!
 18402 00000770 E8153B                  	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 18403                                  
 18404                                  	;mov     cl,[command_line]
 18405                                  	; 30/12/2022
 18406 00000773 BE[E046]                	mov	si,command_line
 18407 00000776 8A0C                    	mov	cl,[si]
 18408 00000778 B500                    	mov     ch,0
 18409 0000077A 41                      	inc     cx
 18410                                  	;mov	si,command_line
 18411 0000077B 01CE                    	add     si,cx
 18412 0000077D C6040D                  	mov     byte [si],cr	; cr-terminate command line
 18413                                  	
 18414                                  	;;;;		
 18415                                  
 18416                                  ; 30/12/2022 - Retro DOS v4.2
 18417                                  %if 0
 18418                                  	;mov	si,(offset command_line+1)
 18419                                  	mov	si,command_line+1
 18420                                  	push    ds
 18421                                  	pop     es
 18422                                  	mov     di,si
 18423                                  	mov     cl,0FFh ; -1
 18424                                  _@_loop:
 18425                                  	inc     cl ; +1
 18426                                  	lodsb
 18427                                  	stosb
 18428                                  	or      al,al
 18429                                  	jnz     short _@_loop
 18430                                  	dec     di
 18431                                  	mov     al,0Dh
 18432                                  	stosb			; cr-terminate command line
 18433                                  	mov     [command_line],cl ; command line length (except CR)
 18434                                  
 18435                                  %endif
 18436                                  
 18437                                  ; ----------------------------------------------------------------------------
 18438                                  
 18439                                  ;   Once we get to this point, the above code, which is below "retry"
 18440                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 18441                                  ;   which follow....)
 18442                                  
 18443                                  retry:
 18444 00000780 BA[5246]                	mov	dx,commnd	; now pointing to file description
 18445                                  
 18446                                  ; we are going to open the command interpreter and size it as is done in
 18447                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 18448                                  ; there is not enough room for the command interpreter,exec will probably
 18449                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 18450                                  ; here to catch it. this code is not perfect (for instance .exe command
 18451                                  ; interpreters are possible) because it does its sizing based on the
 18452                                  ; assumption that the file being loaded is a .com file. it is close enough to
 18453                                  ; correctness to be usable.
 18454                                  
 18455                                  ; first, find out where the command interpreter is going to go.
 18456                                  
 18457 00000783 52                      	push	dx		; save pointer to name
 18458 00000784 BBFFFF                  	mov	bx,0FFFFh
 18459 00000787 B448                    	mov	ah,48h	; ALLOC
 18460 00000789 CD21                            int     21h             ; get biggest piece
 18461 0000078B B448                    	mov	ah,48h	; ALLOC
 18462 0000078D CD21                    	int	21h		; second time gets it
 18463 0000078F 726B                    	jc	short memerrjx	; oooops
 18464                                  
 18465 00000791 8EC0                    	mov	es,ax
 18466 00000793 B449                    	mov	ah,49h	; DEALLOC
 18467 00000795 CD21                    	int	21h		; give it right back
 18468 00000797 89DD                    	mov	bp,bx
 18469                                  
 18470                                  ; es:0 points to block,and bp is the size of the block in para.
 18471                                  
 18472                                  ; we will now adjust the size in bp down by the size of sysinit.
 18473                                  ; we need to do this because exec might get upset if some of the exec
 18474                                  ; data in sysinit is overlayed during the exec.
 18475                                  
 18476                                  	; 22/10/2022
 18477                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 18478 00000799 8B1E[9202]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 18479 0000079D 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 18480                                  
 18481                                  ; Note that the "config_wrkseg" environment data is a segment in
 18482                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 18483                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 18484                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 18485                                  ; we need to make sure that there's no way Exec will stomp on that data
 18486                                  ; before it can copy it, and one way to do that is to make the available
 18487                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 18488                                  ; from the "memory_size" segment value (which is typically A000h) instead
 18489                                  ; of the current sysinit CS....
 18490                                  ;
 18491                                  ; The reason I use the term "paranoid" is because this code should have
 18492                                  ; slid the data required by Exec up to the very top of memory, because as
 18493                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 18494                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 18495                                  ; consumes). Now it's just a little worse (65K or more, depending on
 18496                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 18497                                  ; is determined by the size of CONFIG.SYS.... -JTP
 18498                                  
 18499                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21, IO.SYS)
 18500                                  	; (SYSINIT:0858h)
 18501 0000079F 8B0E[D914]              	mov	cx,[config_envlen]
 18502 000007A3 E303                            jcxz	no_env		; use config_wrkseg only if there's env data
 18503 000007A5 A1[DB14]                        mov	ax,[config_wrkseg]	
 18504                                  
 18505                                  	; 22/10/2022
 18506                                  	;mov	cx,[config_envlen]
 18507                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 18508                                          ;mov	ax,[config_wrkseg]
 18509                                  ;no_env:
 18510                                  	; 22/10/2022
 18511                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 18512                                  no_env:
 18513                                  	; 30/12/2022
 18514                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0861h)
 18515 000007A8 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 18516 000007AA 83C311                  	add	bx,11h		; add the sysinit php
 18517 000007AD 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 18518 000007AF 724B                    	jc	short memerrjx	; if there isn't even this much memory, give up
 18519                                  
 18520                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 18521 000007B1 B8003D                          mov	ax,3D00h
 18522 000007B4 F9                      	stc                     ; in case of int 24
 18523 000007B5 CD21                    	int	21h
 18524 000007B7 7270                    	jc	short comerr	; ooops
 18525                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 18526                                  			; DS:DX -> ASCIZ filename
 18527                                  			; AL = access mode
 18528                                  			; 0 - read
 18529                                  	; 22/10/2022
 18530                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 18531 000007B9 89C3                            mov     bx,ax           ; handle in bx
 18532                                  
 18533                                  ;   If the standard command interpreter is being used, verify it is correct
 18534                                  
 18535                                  	; 30/12/2022 - Retro DOS v4.2
 18536                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:0874h)
 18537 000007BB 803E[4F46]00            	cmp	byte [newcmd],0	; was a new shell selected?
 18538 000007C0 7518                    	jne	short skip_validation ; yes
 18539 000007C2 BA[7C07]                	mov	dx,retry-4
 18540 000007C5 B90400                  	mov	cx,4		;
 18541 000007C8 B43F                    	mov	ah,READ		;
 18542 000007CA CD21                    	int	21h		;
 18543 000007CC 803E[7C07]E9            	cmp	byte [retry-4],0E9h
 18544 000007D1 7556                    	jne	short comerr
 18545                                  	; 20/04/2019 - Retro DOS v4.0
 18546                                  	; 30/12/2022 
 18547                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 18548                                  				; .. COMMAND.COM Version 6.20 (14h&0Fh)	
 18549 000007D3 803E[7F07]66            	cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 18550 000007D8 754F                    	jne	short comerr	;
 18551                                  
 18552                                  	; 22/10/2022
 18553                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 18554                                  	;jne	short skip_validation ; yes
 18555                                  	;mov	dx,retry-4
 18556                                  	;mov	cx,4		;
 18557                                  	;mov	ah,READ		;
 18558                                  	;int	21h		;
 18559                                  	;cmp	byte [retry-4],0E9h
 18560                                  	;jne	short comerr
 18561                                  	;; 20/04/2019 - Retro DOS v4.0
 18562                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 18563                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 18564                                  	;jne	short comerr	;
 18565                                  
 18566                                  ;skip_validation:
 18567                                  	; 22/10/2022
 18568                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 18569                                  skip_validation:
 18570                                  	; 30/12/2022
 18571                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0893h)
 18572 000007DA 31C9                    	xor	cx,cx
 18573 000007DC 31D2                    	xor	dx,dx
 18574                                  	;mov	ax,(LSEEK<<8)|2
 18575 000007DE B80242                  	mov	ax,4202h
 18576 000007E1 F9                      	stc			;in case of int 24
 18577 000007E2 CD21                    	int	21h		; get file size in dx:ax
 18578 000007E4 7243                    	jc	short comerr
 18579                                  				; convert size in dx:ax to para in ax
 18580 000007E6 83C00F                  	add	ax,15		; round up size for conversion to para
 18581 000007E9 83D200                  	adc	dx,0
 18582 000007EC E87304                  	call	off_to_para
 18583 000007EF B10C                    	mov	cl,12
 18584 000007F1 D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 18585 000007F3 09D0                    	or	ax,dx		; ax is now # of para for file
 18586 000007F5 83C010                  	add	ax,10h		; 100h byte php
 18587 000007F8 39E8                    	cmp	ax,bp		; will command fit in available mem?
 18588 000007FA 7208                    	jb	short okld	; jump if yes.
 18589                                  
 18590                                  ; 30/12/2022
 18591                                  %if 0
 18592                                  	; 22/10/2022
 18593                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 18594                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 18595                                  	; 02/11/2022
 18596                                  	;jmp	mem_err
 18597                                  	; 11/12/2022
 18598                                  	; ds = cs
 18599                                  	jmp	mem_err2
 18600                                  %endif
 18601                                  	; 30/12/2022
 18602                                  	; (MSDOS 6.21, IO.SYS, SYSINIT:08B5h)
 18603                                  memerrjx:
 18604 000007FC BA[9D4B]                	mov	dx,badmem 	; "Configuration too large for memory"
 18605 000007FF E8763D                  	call	print
 18606 00000802 EB3D                    	jmp     short continue
 18607                                  
 18608                                  okld:
 18609 00000804 B43E                    	mov	ah,3Eh ; CLOSE
 18610 00000806 CD21                    	int	21h		; close file
 18611                                  
 18612                                  	; 22/10/2022
 18613 00000808 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 18614                                  
 18615                                  	; 24/03/2019
 18616                                  
 18617 00000809 0E                      	push	cs		; point es to sysinitseg
 18618 0000080A 07                      	pop	es
 18619 0000080B BB[BD02]                        mov     bx,COMEXE	; point to exec block
 18620                                  	; 22/10/2022
 18621                                  	;pop	dx              ; recover pointer to name
 18622                                  
 18623                                  ;;ifdef	MULTI_CONFIG
 18624                                  
 18625                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 18626                                  ;   there will be data if there were any valid SET commands and/or if a menu
 18627                                  ;   selection was made (in which case the CONFIG environment variable will be
 18628                                  ;   set to that selection).
 18629                                  
 18630                                  	; 23/10/2022
 18631                                  	;mov	cx,[config_envlen]
 18632                                  	;jcxz	no_envdata
 18633                                          ;mov	cx,[config_wrkseg]
 18634                                  ;no_envdata:
 18635                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 18636                                  	;mov	[bx],cx
 18637                                  
 18638                                  ;;endif	;MULTI_CONFIG
 18639                                  
 18640                                  	; 30/12/2022 - Retro DOS v4.2
 18641                                  	; (MSDOS 6.21 IO.SYS SYSINIT:08C7h)
 18642 0000080E 8B0E[D914]              	mov	cx,[config_envlen]
 18643 00000812 E304                    	jcxz	no_envdata
 18644 00000814 8B0E[DB14]                      mov	cx,[config_wrkseg]
 18645                                  no_envdata:
 18646                                  	;mov	[bx+EXEC0.ENVIRON],cx
 18647 00000818 890F                    	mov	[bx],cx	
 18648                                  	
 18649                                  	; 23/10/2022
 18650                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 18651                                  
 18652                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 18653 0000081A 8C4F04                  	mov	[bx+4],cs
 18654                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 18655 0000081D 8C4F08                  	mov	[bx+8],cs
 18656                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 18657 00000820 8C4F0C                  	mov	[bx+12],cs
 18658                                  
 18659                                  	;mov	ax,(EXEC<<8) + 0
 18660                                  	; 23/10/2022
 18661                                  	;xor	ax,ax
 18662                                  	;mov	ah,4Bh
 18663                                  	; 04/07/2023
 18664                                  	;mov	ax,4B00h
 18665 00000823 B8004B                  	mov	ax,(EXEC<<8)
 18666                                  
 18667 00000826 F9                      	stc                     ; in case of int 24
 18668 00000827 CD21                            int     21h             ; go start up command
 18669                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 18670                                  			; DS:DX -> ASCIZ filename
 18671                                  			; ES:BX -> parameter block
 18672                                  			; AL = subfunc: load & execute program
 18673                                  	;push	cs
 18674                                  	;pop	ds
 18675                                  
 18676                                  	; 23/10/2022
 18677                                  	;push	dx		; push to balance fall-through pop
 18678                                  
 18679                                  ; note fall through if exec returns (an error)
 18680                                  comerr:
 18681                                  	; 23/10/2022
 18682                                  ;;ifdef	MULTI_CONFIG
 18683                                  	;cmp	byte [commnd4],0
 18684                                  	;je	short comerr2	; all defaults exhausted, print err msg
 18685                                  	;cmp	byte [newcmd],0
 18686                                  	;je	short continue	; don't print err msg for defaults just yet
 18687                                  ;comerr2:
 18688                                  ;;endif
 18689                                  
 18690                                  	; 30/12/2022 - Retro DOS v4.2
 18691 00000829 0E                      	push	cs
 18692 0000082A 1F                      	pop	ds
 18693 0000082B 803E[C346]00            	cmp	byte [commnd4],0
 18694 00000830 7407                    	je	short comerr2	; all defaults exhausted, print err msg
 18695 00000832 803E[4F46]00            	cmp	byte [newcmd],0
 18696 00000837 7408                    	je	short continue	; don't print err msg for defaults just yet
 18697                                  comerr2:
 18698 00000839 52                      	push	dx ; 30/12/2022
 18699                                  
 18700                                  	; 23/10/2022
 18701 0000083A BA[194B]                        mov     dx,badcom	; want to print command error
 18702 0000083D E80C3D                  	call	badfil
 18703                                  	
 18704 00000840 5A                      	pop	dx  ; 30/12/2022
 18705                                  continue:
 18706                                  	; 23/10/2022
 18707                                  	;pop	dx
 18708                                  
 18709                                  ; 30/12/2022
 18710                                  %if 0
 18711                                  
 18712                                  ;;ifndef MULTI_CONFIG
 18713                                  	;jmp	stall
 18714                                  	; 24/10/2022
 18715                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 18716                                  	jmp	short stall
 18717                                  ;;else
 18718                                  
 18719                                  %endif
 18720                                  	
 18721                                  ; 30/12/2022 (MSDOS 6.21 SYSINIT, Retro DOS v4.2)
 18722                                  ;%if 1
 18723                                  ; 23/10/2022 (MSDOS 5.0 SYSINIT, Retrodos v4.0)
 18724                                  ;%if 0	
 18725 00000841 B419                    	mov	ah,GET_DEFAULT_DRIVE ; 19h
 18726 00000843 CD21                    	int	21h             ;
 18727 00000845 0441                    	add	al,'A'          ;
 18728 00000847 88C2                    	mov	dl,al           ; DL == default drive letter
 18729 00000849 BE[9246]                	mov	si,commnd2
 18730 0000084C 803E[4F46]00            	cmp	byte [newcmd],0 ; if a SHELL= was given
 18731 00000851 7505                    	jne	short do_def2	; then try the 2nd alternate;
 18732 00000853 C60400                  	mov	byte [si],0	; otherwise, the default SHELL= was tried,
 18733 00000856 EB05                    	jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 18734                                  do_def2:			
 18735 00000858 803C00                  	cmp	byte [si],0	; has 2nd alternate been tried?
 18736 0000085B 7554                            jne	short do_alt    ; no
 18737                                  do_def3:
 18738 0000085D BE[A346]                	mov	si,commnd3
 18739 00000860 803C00                  	cmp	byte [si],0	; has 3rd alternate been tried?
 18740 00000863 754C                    	jne	short do_alt	; no
 18741 00000865 BE[C346]                	mov	si,commnd4
 18742 00000868 803C00                  	cmp	byte [si],0	; has 4th alternate been tried?
 18743 0000086B 7544                    	jne	short do_alt	; no
 18744 0000086D 52                      	push	dx              ;
 18745 0000086E BA[754D]                	mov	dx,badcomprmpt
 18746 00000871 E8043D                  	call	print		;
 18747 00000874 5A                      	pop	dx              ; recover default drive letter in DL
 18748                                  request_input:			;
 18749 00000875 B402                    	mov	ah,STD_CON_OUTPUT
 18750 00000877 CD21                    	int	21h             ;
 18751 00000879 52                      	push	dx              ;
 18752 0000087A B23E                    	mov	dl,'>'          ;
 18753 0000087C CD21                    	int	21h             ;
 18754 0000087E 8A1E[5146]              	mov	bl,[tmplate+1]	;
 18755 00000882 B700                    	mov	bh,0            ;
 18756 00000884 C687[5246]0D            	mov	byte [commnd+bx],0Dh
 18757 00000889 BA[5046]                	mov	dx,tmplate
 18758 0000088C B40A                    	mov	ah,STD_CON_STRING_INPUT
 18759 0000088E CD21                    	int	21h             ; read a line of input
 18760 00000890 BA[C44A]                	mov	dx,crlfm	;
 18761 00000893 E8E23C                  	call	print           ;
 18762 00000896 5A                      	pop	dx              ;
 18763 00000897 8A1E[5146]              	mov	bl,[tmplate+1]	;
 18764 0000089B 08DB                    	or	bl,bl           ; was anything typed?
 18765 0000089D 74D6                    	jz	short request_input ;
 18766 0000089F C606[4F46]01            	mov	byte [newcmd],1 ; disable validation for user-specified binaries
 18767 000008A4 C687[5246]00            	mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 18768 000008A9 C706[E046]000D          	mov	word [command_line],0D00h
 18769 000008AF EB35                    	jmp	short do_exec   ;
 18770                                  do_alt:
 18771 000008B1 1E                      	push	ds
 18772 000008B2 07                      	pop	es
 18773 000008B3 C606[4F46]00            	mov	byte [newcmd],0 ; force validation for alternate binaries
 18774 000008B8 BF[5246]                	mov	di,commnd	;
 18775                                  do_alt1:
 18776 000008BB AC                      	lodsb			; copy the alternate, zapping it as we go,
 18777 000008BC C644FF00                	mov	byte [si-1],0	; so that we know it's been tried
 18778 000008C0 AA                      	stosb 			;
 18779 000008C1 08C0                    	or	al,al		;
 18780 000008C3 75F6                    	jnz	short do_alt1	;
 18781 000008C5 BF[E046]                	mov	di,command_line
 18782 000008C8 807C023A                	cmp	byte [si+2],':'
 18783 000008CC 7503                    	jne	short do_alt2	;
 18784 000008CE 885401                  	mov	[si+1],dl	; stuff default drive into alt. command line
 18785                                  do_alt2:			;
 18786 000008D1 AC                      	lodsb			;
 18787 000008D2 AA                      	stosb			;
 18788 000008D3 08C0                    	or	al,al           ;
 18789 000008D5 75FA                    	jnz	short do_alt2   ;
 18790 000008D7 C645FF0D                	mov	byte [di-1],cr  ; ODh
 18791                                  
 18792                                  ;;   Last but not least, see if we need to call disable_autoexec
 18793                                  
 18794                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 18795                                  	;cmp	[command_line-1],0
 18796                                          ;jne	short do_exec   ;
 18797                                          ;mov	[command_line-1],'/'
 18798                                  	;call	disable_autoexec ;
 18799                                  
 18800                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 18801 000008DB C606[A047]00            	mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 18802 000008E0 E85A39                  	call	disable_autoexec
 18803 000008E3 E8A239                  	call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 18804                                  do_exec:
 18805 000008E6 E997FE                  	jmp	retry		;
 18806                                  
 18807                                  ;;endif	;MULTI_CONFIG
 18808                                  
 18809                                  ;%endif ; 23/10/2022 (MSDOS 5.0 SYSINIT)
 18810                                  ;%endif ; 30/12/2022 (MSDOS 6.21 SYSINIT)
 18811                                  
 18812                                  ; 24/03/2019 - Retro DOS v4.0
 18813                                  
 18814                                  ; ----------------------------------------------------------------------
 18815                                  ; procedure : AllocFreeMem
 18816                                  ;
 18817                                  ; Allocate Max memory from DOS to find out where to load DOS.
 18818                                  ; DOS is at temporary location when this call is being made
 18819                                  ;
 18820                                  ; Inputs : None
 18821                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 18822                                  ;	   [area] & [memhi] set to the para value of the start of the
 18823                                  ;	   free memory.
 18824                                  ;
 18825                                  ; Uses   : AX, BX
 18826                                  ;
 18827                                  ; ----------------------------------------------------------------------
 18828                                  	
 18829                                  	; 30/12/2022 - Retro DOS v4.2
 18830                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:09A2h)
 18831                                  
 18832                                  	; 23/10/2022
 18833                                  AllocFreeMem:
 18834 000008E9 BBFFFF                  	mov	bx,0FFFFh
 18835 000008EC B448                    	mov	ah,48h ; ALLOC
 18836 000008EE CD21                    	int	21h			; first time fails
 18837 000008F0 B448                    	mov	ah,48h ; ALLOC
 18838 000008F2 CD21                    	int	21h			; second time gets it
 18839                                  	; 11/12/2022
 18840                                  	; ds = cs
 18841                                  	;mov	[cs:area],ax
 18842                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 18843 000008F4 A3[6603]                	mov	[area],ax
 18844 000008F7 A3[6203]                	mov	[memhi],ax		; memhi:memlo now points to			
 18845 000008FA C3                      	retn				; start of free memory
 18846                                  				
 18847                                  	; include msbio.cl6
 18848                                  ; ----------------------------------------------------------------------
 18849                                  DOSLOMSG:
 18850 000008FB 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 18850 00000904 7661696C61626C653A-
 18850 0000090D 204C6F6164696E6720-
 18850 00000916 444F53206C6F770D0A-
 18850 0000091F 24                 
 18851                                  FEmsg:
 18852 00000920 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 18852 00000929 6F723A2043616E6E6F-
 18852 00000932 7420616C6C6F636174-
 18852 0000093B 65204D656D6F727920-
 18852 00000944 666F7220444F530D0A-
 18852 0000094D 24                 
 18853                                  
 18854                                  ; ----------------------------------------------------------------------
 18855                                  ;
 18856                                  ; procedure : LoadDOSHiOrLo
 18857                                  ;
 18858                                  ;		Tries to move DOS into HMA. If it fails then loads
 18859                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 18860                                  ;		moved; this just tries to allocate the HMA, and prints
 18861                                  ;		a message if this is not possible.
 18862                                  ;
 18863                                  ; ----------------------------------------------------------------------
 18864                                  
 18865                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18866                                  LoadDOSHiOrLo:
 18867                                  	; 27/03/2019 - Retro DOS v4.0
 18868                                  	; ds = cs
 18869 0000094E E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 18870                                  	;jc	short LdngLo		; If that don't work...
 18871                                  	;retn
 18872                                  	; 18/12/2022
 18873 00000951 731C                    	jnc	short LoadDosHi_ok
 18874                                  LdngLo:
 18875                                  	; 23/10/2022
 18876                                  	;push	cs
 18877                                  	;pop	ds
 18878                                  	; 11/12/2022
 18879                                  	; ds = cs
 18880 00000953 B409                    	mov	ah,9
 18881 00000955 BA[FB08]                	mov	dx,DOSLOMSG		; inform user that we are
 18882 00000958 CD21                    	int	21h			; loading low
 18883                                  
 18884                                  ;ifndef ROMDOS
 18885                                  	; actually move the dos, and reinitialize it.
 18886                                  
 18887 0000095A BB0100                  	mov	bx,1				; M012
 18888                                  						;  use int 21 alloc for mem
 18889 0000095D E83F00                  	call	MovDOSLo
 18890                                  	; 11/12/2022
 18891                                  	; ds = cs
 18892                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 18893                                  	; 23/10/2022
 18894 00000960 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18895                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 18896                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 18897 00000964 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 18898                                  	; 11/12/2022
 18899                                  	; ds = cs
 18900                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 18901 00000966 FF1E[7B02]              	call	far [dos_segreinit] ; 27/03/2019
 18902                                  	
 18903                                  ;endif ; ROMDOS
 18904                                  	; 23/10/2022
 18905                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 18906                                  	; 11/12/2022
 18907                                  	; ds = cs
 18908 0000096A C606[6A02]00            	mov	byte [runhigh],0 ; 27/03/2019
 18909                                  LoadDosHi_ok:	; 18/12/2022
 18910 0000096F C3                      	retn
 18911                                  
 18912                                  ; ----------------------------------------------------------------------
 18913                                  ;
 18914                                  ; procedure : TryToMovDOSHi
 18915                                  ;
 18916                                  ;		This tries to move DOS into HMA.
 18917                                  ;		Returns CY if it failed.
 18918                                  ;		If it succeeds returns with carry cleared.
 18919                                  ;
 18920                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 18921                                  ;		the A20 switching code in the low mem stub to be installed.
 18922                                  ; 
 18923                                  ; ----------------------------------------------------------------------
 18924                                  
 18925                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18926                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 18927                                  TryToMovDOSHi:
 18928                                  	; 11/12/2022
 18929                                  	; 27/03/2019 - Retro DOS v4.0
 18930                                  	; ds = cs
 18931 00000970 E81300                  	call	MovDOSHi
 18932 00000973 7210                    	jc	short ttldhx
 18933                                  
 18934                                  ;ifndef ROMDOS
 18935                                  	; 23/10/2022
 18936                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 18937                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 18938                                  	; 11/12/2022
 18939                                  	; ds = cs
 18940 00000975 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18941                                  ;else
 18942                                  ;	..
 18943                                  ;endif ; ROMDOS
 18944                                  
 18945                                  	; 11/12/2022
 18946                                  	; ds = cs
 18947 00000979 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 18948                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 18949 0000097B FF1E[7B02]              	call	far [dos_segreinit]
 18950                                  	;mov	byte [cs:runhigh],1
 18951 0000097F C606[6A02]01            	mov	byte [runhigh],1
 18952 00000984 F8                      	clc
 18953                                  ttldhx:
 18954 00000985 C3                      	retn
 18955                                  
 18956                                  ; ----------------------------------------------------------------------
 18957                                  ;
 18958                                  ; procedure : MovDOSHi
 18959                                  ;
 18960                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 18961                                  ;		For ROMDOS, the code is not actually moved, but the
 18962                                  ;		HMA is allocated and prepared for sub-allocation.
 18963                                  ;
 18964                                  ;		Returns : CY if it failed
 18965                                  ;
 18966                                  ; ----------------------------------------------------------------------
 18967                                  
 18968                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18969                                  MovDOSHi:
 18970                                  	; 14/05/2019
 18971                                  	; 27/03/2019 - Retro DOS v4.0
 18972                                  	; ds = cs
 18973 00000986 E8D900                  	call	AllocHMA			; did we get HMA?
 18974 00000989 7213                    	jc	short mdhx			; no
 18975 0000098B B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 18976 0000098E 8EC0                    	mov	es,ax
 18977                                  
 18978                                  ;ifndef ROMDOS
 18979                                  	; actually move the BIOS and DOS
 18980                                  
 18981                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18982                                  	; 24/03/2019
 18983                                  	
 18984                                  	; 23/10/2022
 18985 00000990 E83400                  	call	MovBIOS				; First move BIOS into HMA
 18986                                  
 18987                                  	; ES:DI points to free HMA after BIOS
 18988                                  	
 18989                                  	; 14/05/2019
 18990                                  	; 24/03/2019 - Retro DOS v4.0
 18991                                  	;xor	di,di
 18992                                  	
 18993                                  	; 23/10/2022
 18994                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 18995                                  	; 11/12/2022
 18996                                  	; ds = cs
 18997 00000993 8B0E[8102]              	mov	cx,[hi_doscod_size]		; when it is in HMA
 18998 00000997 E81100                  	call	MovDOS				; and move it
 18999                                  
 19000                                  	; ES:DI points to free HMA after DOS
 19001                                  ;else
 19002                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 19003                                  ;
 19004                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 19005                                  ;
 19006                                  ;endif ; ROMDOS
 19007                                  
 19008 0000099A E86302                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 19009 0000099D F8                      	clc
 19010                                  mdhx:
 19011 0000099E C3                      	retn
 19012                                  
 19013                                  ; ----------------------------------------------------------------------
 19014                                  ;
 19015                                  ; procedure : MovDOSLo
 19016                                  ;
 19017                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 19018                                  ;
 19019                                  ; ----------------------------------------------------------------------
 19020                                  
 19021                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19022                                  
 19023                                  ;ifndef ROMDOS
 19024                                  
 19025                                  MovDOSLo:
 19026                                  	; 14/05/2019
 19027                                  	; 27/03/2019 - Retro DOS v4.0
 19028                                  	; ds = cs
 19029 0000099F E84800                  	call	AllocMemForDOS			; incestuosly!!!
 19030                                  	
 19031                                  	; 23/10/2022
 19032                                  	; 14/05/2019
 19033                                  	;inc	ax  ; skip MCB
 19034                                  	
 19035 000009A2 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 19036                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 19037                                  	; 24/03/2019
 19038                                  	
 19039                                  	; 23/10/2022
 19040 000009A4 E82000                  	call	MovBIOS
 19041                                  
 19042                                  ;------ ES:DI points memory immediately after BIOS
 19043                                  
 19044                                  	; 14/05/2019
 19045                                  	; NOTE: 
 19046                                  	;     Order of (RETRO) DOS kernel sections at memory:
 19047                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 19048                                  
 19049                                  	; 24/03/2019 - Retro DOS v4.0
 19050                                  	;xor	di,di	
 19051                                  
 19052                                  	; 23/10/2022
 19053                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 19054                                  	; 11/12/2022
 19055                                  	; ds = cs
 19056 000009A7 8B0E[7F02]              	mov	cx,[lo_doscod_size]		; low
 19057                                  	;call	MovDOS
 19058                                  	;retn
 19059                                  	; 11/12/2022
 19060                                  	;jmp	short MovDOS
 19061                                  
 19062                                  ;endif ; ROMDOS
 19063                                  
 19064                                  ; 11/12/2022
 19065                                  
 19066                                  ; ----------------------------------------------------------------------
 19067                                  ;
 19068                                  ; procedure : MovDOS
 19069                                  ;
 19070                                  ;		Moves DOS code into requested area
 19071                                  ;
 19072                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 19073                                  ;	     CX    - size of DOS code to be moved
 19074                                  ;
 19075                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 19076                                  ;
 19077                                  ; ----------------------------------------------------------------------
 19078                                  
 19079                                  	; 11/12/2022
 19080                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19081                                  
 19082                                  ;ifndef ROMDOS
 19083                                  
 19084                                  MovDOS:
 19085                                  	; 14/05/2019
 19086                                  	; 27/03/2019 - Retro DOS v4.0
 19087                                  
 19088                                  	; 11/12/2022
 19089                                  	; ds = cs
 19090                                  
 19091                                  	; 23/10/2022
 19092                                  	;push	ds ; *//
 19093                                  	
 19094 000009AB 06                      	push	es
 19095 000009AC 57                      	push	di
 19096                                  
 19097                                  	; 11/12/2022
 19098 000009AD 1E                      	push	ds ; *// ; 11/12/202
 19099                                  
 19100                                  	; 29/04/2019
 19101 000009AE C536[6F02]              	lds	si,[dosinit] ; 11/12/2022
 19102                                  	; 23/10/2022
 19103                                  	;lds	si,[cs:dosinit]
 19104                                  	;;mov	ax,si
 19105                                  
 19106 000009B2 F3A4                    	rep	movsb
 19107                                  
 19108 000009B4 1F                      	pop	ds ; *// ; 11/12/2022
 19109                                  
 19110 000009B5 5B                      	pop	bx				; get back offset into which
 19111                                  						;  DOS was moved
 19112                                  
 19113 000009B6 2EA1[6F02]              	mov	ax,[cs:dosinit]			; get the offset at which DOS
 19114                                  						;  wants to run
 19115 000009BA 29D8                    	sub	ax,bx
 19116 000009BC E8A302                  	call	off_to_para
 19117 000009BF 5B                      	pop	bx				; get the segment at which
 19118                                  						;  we moved DOS into
 19119 000009C0 29C3                    	sub	bx,ax				; Adjust segment
 19120                                  	
 19121                                  	; 11/12/2022
 19122                                  	; 23/10/2022
 19123                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 19124                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 19125                                  	; 11/12/2022
 19126 000009C2 891E[7102]              	mov	[CURRENT_DOS_LOCATION],bx
 19127                                  		
 19128                                  	; 27/03/2019
 19129                                  	;pop	ds ; *//
 19130                                  	; ds = cs
 19131                                  	;mov	[FINAL_DOS_LOCATION],bx
 19132                                  
 19133 000009C6 C3                      	retn
 19134                                  
 19135                                  ;endif ;ROMDOS
 19136                                  
 19137                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 19138                                  ; 24/03/2019
 19139                                  ; ----------------------------------------------------------------------
 19140                                  ;
 19141                                  ; procedure : MovBIOS
 19142                                  ;
 19143                                  ;		Moves BIOS code into requested segment
 19144                                  ;
 19145                                  ;	In : ES - segment to which BIOS is to be moved
 19146                                  ;		  ( it moves always into offset BCode_Start)
 19147                                  ;
 19148                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 19149                                  ;
 19150                                  ; ----------------------------------------------------------------------
 19151                                  
 19152                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19153                                  
 19154                                  ;ifndef ROMDOS
 19155                                  
 19156                                  MovBIOS: ; proc	near
 19157                                  	; 11/12/2022
 19158 000009C7 1E                      	push	ds ; ds = cs	
 19159                                  	;
 19160                                  	; 23/10/2022
 19161 000009C8 2E8E1E[8702]            	mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 19162                                  	;mov	si,BCODE_START ; mov si,30h
 19163                                  	; 09/12/2022
 19164 000009CD BE[3000]                	mov	si,BCODESTART
 19165 000009D0 89F7                    	mov	di,si
 19166 000009D2 B9B01A                  	mov	cx,BCODE_END ; mov cx,1A60h
 19167 000009D5 29F1                    	sub	cx,si				; size of BIOS
 19168 000009D7 D1E9                    	shr	cx,1				; Both the labels are para
 19169                                  						;  aligned
 19170 000009D9 F3A5                    	rep	movsw
 19171                                  	
 19172                                  	; 11/12/2022
 19173 000009DB 1F                      	pop	ds ; ds = cs
 19174                                  	;
 19175 000009DC 06                      	push	es
 19176 000009DD 57                      	push	di				; save end of BIOS
 19177 000009DE 8CC0                    	mov	ax,es
 19178                                  	;
 19179                                  	; 11/12/2022
 19180                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 19181                                  	;;call	dword ptr cs:_seg_reinit_ptr
 19182                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 19183                                  	; ds = cs
 19184 000009E0 A3[8203]                	mov	[BCodeSeg],ax
 19185 000009E3 FF1E[8502]              	call	far [seg_reinit_ptr]
 19186                                  	;
 19187 000009E7 5F                      	pop	di
 19188 000009E8 07                      	pop	es				; get back end of BIOS
 19189 000009E9 C3                      	retn
 19190                                  
 19191                                  ;MovBIOS endp
 19192                                  
 19193                                  ;endif ; ROMDOS
 19194                                  
 19195                                  ; 11/12/2022
 19196                                  %if 0
 19197                                  
 19198                                  ; 24/03/2019
 19199                                  
 19200                                  ; ----------------------------------------------------------------------
 19201                                  ;
 19202                                  ; procedure : MovDOS
 19203                                  ;
 19204                                  ;		Moves DOS code into requested area
 19205                                  ;
 19206                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 19207                                  ;	     CX    - size of DOS code to be moved
 19208                                  ;
 19209                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 19210                                  ;
 19211                                  ; ----------------------------------------------------------------------
 19212                                  
 19213                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19214                                  
 19215                                  ;ifndef ROMDOS
 19216                                  
 19217                                  MovDOS:
 19218                                  	; 14/05/2019
 19219                                  	; 27/03/2019 - Retro DOS v4.0
 19220                                  
 19221                                  	; 11/12/2022
 19222                                  	; ds = cs
 19223                                  
 19224                                  	; 23/10/2022
 19225                                  	;push	ds ; *//
 19226                                  	
 19227                                  	push	es
 19228                                  	push	di
 19229                                  
 19230                                  	; 11/12/2022
 19231                                  	push	ds ; *// ; 11/12/202
 19232                                  
 19233                                  	; 29/04/2019
 19234                                  	lds	si,[dosinit] ; 11/12/2022
 19235                                  	; 23/10/2022
 19236                                  	;lds	si,[cs:dosinit]
 19237                                  	;;mov	ax,si
 19238                                  
 19239                                  	rep	movsb
 19240                                  
 19241                                  	pop	ds ; *// ; 11/12/2022
 19242                                  
 19243                                  	pop	bx				; get back offset into which
 19244                                  						;  DOS was moved
 19245                                  
 19246                                  	mov	ax,[cs:dosinit]			; get the offset at which DOS
 19247                                  						;  wants to run
 19248                                  	sub	ax,bx
 19249                                  	call	off_to_para
 19250                                  	pop	bx				; get the segment at which
 19251                                  						;  we moved DOS into
 19252                                  	sub	bx,ax				; Adjust segment
 19253                                  	
 19254                                  	; 11/12/2022
 19255                                  	; 23/10/2022
 19256                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 19257                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 19258                                  	; 11/12/2022
 19259                                  	mov	[CURRENT_DOS_LOCATION],bx
 19260                                  		
 19261                                  	; 27/03/2019
 19262                                  	;pop	ds ; *//
 19263                                  	; ds = cs
 19264                                  	;mov	[FINAL_DOS_LOCATION],bx
 19265                                  
 19266                                  	retn
 19267                                  
 19268                                  ;endif ;ROMDOS
 19269                                  
 19270                                  %endif
 19271                                  
 19272                                  ; ----------------------------------------------------------------------
 19273                                  ;
 19274                                  ; procedure : AllocMemForDOS
 19275                                  ;
 19276                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 19277                                  ;
 19278                                  ;	Out : AX - seg of allocated memoryblock
 19279                                  ;
 19280                                  ; ----------------------------------------------------------------------
 19281                                  
 19282                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19283                                  
 19284                                  ;ifndef ROMDOS
 19285                                  
 19286                                  AllocMemForDOS:
 19287                                  	; 11/12/2022
 19288                                  	; 14/05/2019
 19289                                  	; 27/03/2019 - Retro DOS v4.0
 19290                                  	; ds = cs
 19291                                  	;mov	ax,BCode_end
 19292                                  	;sub	ax,BCode_start		; BIOS code size
 19293                                  	; 23/10/2022
 19294 000009EA B8B01A                  	mov	ax,BCODE_END ; 1A60h	; 1A70h for MSDOS 6.21
 19295                                  					; 30/12/2022
 19296                                  	;sub	ax,BCODE_START ; 30h
 19297                                  	; 09/12/2022
 19298 000009ED 2D[3000]                	sub	ax,BCODESTART 
 19299                                  	; 24/03/2019 - Retro DOS v4.0 
 19300                                  	; 02/11/2022
 19301                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 19302                                  	; 11/12/2022
 19303                                  	; ds = cs
 19304 000009F0 0306[7F02]              	add	ax,[lo_doscod_size]
 19305 000009F4 83C00F                  	add	ax,15
 19306 000009F7 E86802                  	call	off_to_para			; convert to para
 19307                                  	; 23/10/2022
 19308                                  	; 14/05/2019
 19309                                  	;inc	ax ; + 1 paragraph for MCB
 19310 000009FA 09DB                    	or	bx,bx				; M012
 19311 000009FC 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 19312 000009FE 741A                    	jz	short update_arena		; M012
 19313 00000A00 B448                    	mov	ah,48h				; request DOS
 19314 00000A02 CD21                    	int	21h
 19315 00000A04 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 19316                                   	; 23/10/2022
 19317                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 19318 00000A06 83E803                  	sub	ax,3				; Take care ORG 30h of
 19319                                  						;  BIOS code
 19320 00000A09 8EC0                    	mov	es,ax
 19321                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 19322                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 19323                                  	; 14/05/2019
 19324                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 19325                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 19326                                  	; 23/10/2022
 19327 00000A0B 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 19328 00000A12 26C70628005343          	mov	word [es:20h+8],'SC'		;  code area
 19329                                  
 19330 00000A19 C3                      	retn
 19331                                  
 19332                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 19333                                  ;	  using DOS itself causes an arena to be generated.
 19334                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 19335                                  ;	  assume that the device drivers are loaded into
 19336                                  ;	  the first arena. For this reason, MagicDrv's
 19337                                  ;	  main device driver header arena is manually
 19338                                  ;	  truncated from the arena chain, and the space
 19339                                  ;	  for DOS is allocated using the following
 19340                                  ;	  simple code, which also assumes that the
 19341                                  ;	  first arena is the free one where DOS's low
 19342                                  ;	  stub will go.
 19343                                  ;
 19344                                  ; M012 : BEGIN
 19345                                  
 19346                                  	; 23/10/2022
 19347                                  update_arena:
 19348 00000A1A 1E                      	push	ds ; ds = cs
 19349 00000A1B 57                      	push	di
 19350 00000A1C 51                      	push	cx
 19351 00000A1D 52                      	push	dx
 19352                                  	; 23/10/2022
 19353                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 19354                                  	; 11/12/2022
 19355                                  	; ds = cs 
 19356 00000A1E C53E[6B02]              	lds	di,[DOSINFO] ; 27/03/2019	
 19357 00000A22 4F                      	dec	di
 19358 00000A23 4F                      	dec	di				; Arena head is immediately
 19359                                  						;  before sysvar
 19360 00000A24 8E05                    	mov	es,[di]				; es = arena head
 19361                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 19362 00000A26 268B0E0300              	mov	cx,[es:3]
 19363 00000A2B 39D9                    	cmp	cx,bx				; is it sufficient ?
 19364 00000A2D 7227                    	jb	short FatalErr			; no, fatal error
 19365                                  
 19366                                  	;mov	dl,[es:ARENA.SIGNATURE]
 19367 00000A2F 268A160000              	mov	dl,[es:0]
 19368 00000A34 8CC0                    	mov	ax,es
 19369 00000A36 01D8                    	add	ax,bx				; ax = new arena head
 19370 00000A38 8905                    	mov	[di],ax				; store it in DOS data area
 19371 00000A3A 8ED8                    	mov	ds,ax
 19372                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 19373 00000A3C 88160000                	mov	[0],dl
 19374                                  	;mov	word [ARENA.OWNER],0		; free
 19375 00000A40 C70601000000            	mov	word [1],0
 19376 00000A46 29D9                    	sub	cx,bx				; size of the new block
 19377                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 19378 00000A48 890E0300                	mov	[3],cx
 19379 00000A4C 8CC0                    	mov	ax,es				; return seg to the caller
 19380                                  	; 23/10/2022
 19381                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 19382 00000A4E 83E803                  	sub	ax,3				;  BIOS code
 19383 00000A51 5A                      	pop	dx
 19384 00000A52 59                      	pop	cx
 19385 00000A53 5F                      	pop	di
 19386 00000A54 1F                      	pop	ds ; ds = cs
 19387 00000A55 C3                      	retn
 19388                                  ;
 19389                                  ; M012 : END
 19390                                  ;
 19391                                  FatalErr:
 19392 00000A56 0E                      	push	cs
 19393 00000A57 1F                      	pop	ds
 19394 00000A58 BA[2009]                	mov	dx,FEmsg
 19395 00000A5B B409                    	mov	ah,9
 19396 00000A5D CD21                    	int	21h 		; DOS - PRINT STRING
 19397                                  				; DS:DX -> string terminated by "$"
 19398                                  	; 30/12/2022 (MSDOS 6.21 SYSINIT)
 19399 00000A5F E93F07                  	jmp	stall
 19400                                  	; 23/10/2022 (MSDOS 5.0 SYSINIT)
 19401                                  	;cli
 19402                                  	;hlt
 19403                                  
 19404                                  ;endif ;ROMDOS
 19405                                  
 19406                                  ; 25/03/2019 - Retro DOS v4.0
 19407                                  
 19408                                  ; ----------------------------------------------------------------------
 19409                                  ;
 19410                                  ; procedure : AllocHMA
 19411                                  ;
 19412                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 19413                                  ;	  up there. If it gets any sort of error, it will return with
 19414                                  ;	  carry set so that we can resort to running low.
 19415                                  ;
 19416                                  ;	It also returns ES: -> 0ffffh if it returns success
 19417                                  ;
 19418                                  ; ----------------------------------------------------------------------
 19419                                  
 19420                                  AllocHMA:
 19421                                  ;	cas note:  The pre-286 check is no longer needed here since the
 19422                                  ;		   presence of XMS is sufficient. However, this code hasn't
 19423                                  ;		   been deleted because it can be recycled for skipping the
 19424                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 19425                                  ;		   in the case of a pre-286.
 19426                                  
 19427                                  ;;	see if we're running on a pre-286. If not, force low.
 19428                                  ;
 19429                                  ;	xor	ax,ax
 19430                                  ;	pushf			; save flags (like int)
 19431                                  ;	push	ax
 19432                                  ;	popf
 19433                                  ;	pushf
 19434                                  ;	pop	ax
 19435                                  ;	popf			; restore original flags (like int)
 19436                                  ;	and	ax,0F000h
 19437                                  ;	cmp	ax,0F000h	; 8088/8086?
 19438                                  ;	jz	short grab_hma_error
 19439                                  
 19440                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19441                                  	; (SYSINIT:0A26h)
 19442                                  
 19443 00000A62 1E                      	push	ds
 19444                                  	;;mov	ax,Bios_Data
 19445                                  	;mov	ax,KERNEL_SEGMENT
 19446                                  	; 21/10/2022
 19447 00000A63 B87000                  	mov	ax,DOSBIODATASEG
 19448 00000A66 8ED8                    	mov	ds,ax
 19449                                  
 19450 00000A68 E84A00                  	call	IsXMSLoaded
 19451 00000A6B 7545                    	jnz	short grabhma_error
 19452                                  
 19453 00000A6D B81043                  	mov	ax,4310h
 19454 00000A70 CD2F                    	int	2Fh		; get the vector into es:bx
 19455                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 19456                                  		; Return: ES:BX -> driver entry point
 19457                                  
 19458 00000A72 891E[0E00]              	mov	[xms],bx
 19459                                  	;mov	[0Eh], bx
 19460 00000A76 8C06[1000]              	mov	[xms+2],es
 19461                                  	;mov	[10h],es
 19462                                  
 19463 00000A7A B401                    	mov	ah,1		; request HMA
 19464 00000A7C BAFFFF                  	mov	dx,0FFFFh
 19465                                  	;call	dword ptr ds:0Eh
 19466 00000A7F FF1E[0E00]              	call	far [xms]
 19467 00000A83 48                      	dec	ax
 19468 00000A84 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 19469                                  
 19470                                  ;------ Himem may be lying because it has allocated mem for int 15
 19471                                  
 19472 00000A86 B488                    	mov	ah,88h
 19473 00000A88 CD15                    	int	15h
 19474                                  		; Get Extended Memory Size
 19475                                  		; Return: CF clear on success
 19476                                  		; AX = size of memory above 1M in K
 19477 00000A8A 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 19478                                  	;jb	short grabhma_error
 19479                                  	; 11/12/2022
 19480 00000A8D 7224                    	jb	short grabhma_err ; cf=1
 19481                                  allocHMA_1:
 19482 00000A8F B405                    	mov	ah,5		; localenableA20
 19483                                  	;call	dword ptr ds:0Eh
 19484 00000A91 FF1E[0E00]              	call	far [xms]
 19485 00000A95 48                      	dec	ax
 19486 00000A96 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 19487                                  
 19488 00000A98 E88901                  	call	IsVDiskInstalled
 19489 00000A9B 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 19490                                  
 19491 00000A9D B8FFFF                  	mov	ax,0FFFFh
 19492 00000AA0 8EC0                    	mov	es,ax
 19493 00000AA2 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 19494 00000AA9 26813E10003412          	cmp	word [es:10h],1234h
 19495                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 19496                                  	; 11/12/2022
 19497 00000AB0 7401                    	je	short allocHMA_ok	
 19498                                  
 19499                                  ; 11/12/2022
 19500                                  ;	; 11/12/2022
 19501                                  ;	; cf=0
 19502                                  ;	;clc
 19503                                  ;	pop	ds
 19504                                  ;	retn
 19505                                  
 19506                                  grabhma_error:
 19507 00000AB2 F9                      	stc
 19508                                  	; 11/12/022
 19509                                  grabhma_err:	; cf=1
 19510                                  allocHMA_ok:	; cf=0
 19511 00000AB3 1F                      	pop	ds
 19512 00000AB4 C3                      	retn
 19513                                  
 19514                                  ; ----------------------------------------------------------------------
 19515                                  ;
 19516                                  ; procedure : IsXMSLoaded
 19517                                  ;
 19518                                  ;             Checks whether a XMS driver is loaded
 19519                                  ;
 19520                                  ; Returns : Z flag set if XMS driver loaded
 19521                                  ;           Z flag reset if no XMS drivers are present
 19522                                  ;
 19523                                  ; ----------------------------------------------------------------------
 19524                                  
 19525                                  IsXMSLoaded:
 19526 00000AB5 B80043                  	mov	ax,4300h
 19527 00000AB8 CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 19528                                  				; Return: AL = 80h XMS driver installed
 19529                                  				; AL <> 80h no driver
 19530 00000ABA 3C80                    	cmp	al,80h		; XMS installed?
 19531 00000ABC C3                      	retn
 19532                                  
 19533                                  ; ----------------------------------------------------------------------
 19534                                  ; procedure : FTryToMovDOSHi
 19535                                  ;
 19536                                  ;		Called from HMA suballoc calls
 19537                                  ;	
 19538                                  ; ----------------------------------------------------------------------
 19539                                  
 19540                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19541                                  	; (SYSINIT:0A84h)
 19542                                  
 19543                                  FTryToMovDOSHi:	; proc	far
 19544                                  
 19545 00000ABD 50                      	push	ax
 19546 00000ABE 53                      	push	bx
 19547 00000ABF 51                      	push	cx
 19548 00000AC0 52                      	push	dx
 19549 00000AC1 56                      	push	si
 19550 00000AC2 57                      	push	di
 19551 00000AC3 1E                      	push	ds
 19552 00000AC4 06                      	push	es
 19553                                  
 19554                                  	; 23/10/2022
 19555                                  	; 27/03/2019 - Retro DOS v4.0
 19556                                  	; 11/12/2022
 19557 00000AC5 0E                      	push	cs
 19558 00000AC6 1F                      	pop	ds
 19559                                  
 19560                                  	;cmp	byte [cs:runhigh],0FFh
 19561                                  	; 11/12/2022
 19562 00000AC7 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 19563 00000ACC 7503                    	jne	short _ftymdh_1
 19564                                  
 19565                                  	; ds = cs
 19566 00000ACE E89FFE                  	call	TryToMovDOSHi
 19567                                  _ftymdh_1:
 19568 00000AD1 07                      	pop	es
 19569 00000AD2 1F                      	pop	ds
 19570 00000AD3 5F                      	pop	di
 19571 00000AD4 5E                      	pop	si
 19572 00000AD5 5A                      	pop	dx
 19573 00000AD6 59                      	pop	cx
 19574 00000AD7 5B                      	pop	bx
 19575 00000AD8 58                      	pop	ax
 19576                                  
 19577 00000AD9 CB                      	retf
 19578                                  
 19579                                  ; ----------------------------------------------------------------------
 19580                                  ;
 19581                                  ; following piece of code will be moved into a para boundary. And the para
 19582                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 19583                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 19584                                  ; to determine free extended memory.
 19585                                  ;
 19586                                  ; For more details read "power programming" column by Ray Duncan in the
 19587                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 19588                                  ;
 19589                                  ; ----------------------------------------------------------------------
 19590                                  
 19591                                  StartVDHead:
 19592                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 19593                                  
 19594 00000ADA 00000000                	dd	0		; link to next device driver
 19595 00000ADE 0080                    	dw	8000h		; device attribute
 19596 00000AE0 0000                    	dw	0		; strategy routine offset
 19597 00000AE2 0000                    	dw	0		; interrupt routine offset
 19598 00000AE4 01                      	db	1		; number of units
 19599                                  	;db	7 dup(0) 
 19600 00000AE5 00<rep 7h>              	times	7 db 0 		; reserved area
 19601                                  VDiskSig1:
 19602 00000AEC 564449534B              	db	'VDISK'
 19603                                  
 19604                                  VLEN1	equ	($-VDiskSig1)
 19605                                  
 19606 00000AF1 202056332E33            	db	'  V3.3'	; vdisk label
 19607                                  	;db	15 dup (0)	; pad
 19608 00000AF7 00<rep Fh>              	times	15 db 0
 19609 00000B06 0000                    	dw	0		; bits 0-15 of free HMA
 19610 00000B08 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 19611                                  VDInt19:
 19612 00000B09 EA                      	db	0EAh		; jmp to old vector
 19613                                  OldVDInt19:
 19614 00000B0A 00000000                	dd	0		; Saved int 19 vector
 19615                                  
 19616                                  EndVDHead: ; label byte
 19617                                  
 19618                                  VDiskHMAHead:	
 19619 00000B0E 000000                  	db	0,0,0		; non-bootable disk
 19620                                  VDiskSig2:
 19621 00000B11 564449534B              	db	'VDISK'
 19622                                  
 19623                                  VLEN2	equ	($-VDiskSig2)
 19624                                  
 19625 00000B16 332E33                  	db	'3.3'		; OEM - signature
 19626 00000B19 8000                    	dw	128		; number of bytes/sector
 19627 00000B1B 01                      	db	1		; sectors/cluster
 19628 00000B1C 0100                    	dw	1		; reserved sectors
 19629 00000B1E 01                      	db	1		; number of FAT copies
 19630 00000B1F 4000                    	dw	64		; number of root dir entries
 19631 00000B21 0002                    	dw	512		; number of sectors
 19632 00000B23 FE                      	db	0FEh		; media descriptor
 19633 00000B24 0600                    	dw	6		; number of sectors/FAT
 19634 00000B26 0800                    	dw	8		; sectors per track
 19635 00000B28 0100                    	dw	1		; number of heads
 19636 00000B2A 0000                    	dw	0		; number of hidden sectors
 19637 00000B2C 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 19638                                  
 19639                                  EndVDiskHMAHead: ; label byte
 19640                                  
 19641                                  ; ----------------------------------------------------------------------
 19642                                  ;
 19643                                  ; procedure : InstVDiskHeader
 19644                                  ;
 19645                                  ;             Installs the VDISK header to reserve the 64k of HMA
 19646                                  ;	      It puts a 32 byte header at 10000:0 and
 19647                                  ;	      another header at (seg of int19):0
 19648                                  ;
 19649                                  ; Inputs : None
 19650                                  ;
 19651                                  ; Outputs : None
 19652                                  ;
 19653                                  ; USES : DS,SI,AX,CX,DX
 19654                                  ;
 19655                                  ; ----------------------------------------------------------------------
 19656                                  
 19657                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19658                                  
 19659                                  InstVDiskHeader:
 19660 00000B2E 31C0                    	xor	ax,ax
 19661 00000B30 8ED8                    	mov	ds,ax			; seg of int vect table
 19662                                  
 19663                                  ;-------------- save old int 19 vector
 19664                                  
 19665                                  	; 23/10/2022
 19666 00000B32 A16400                  	mov	ax,[19h*4]
 19667                                  	;mov	[OldVDInt19],ax
 19668 00000B35 2EA3[0A0B]              	mov	[cs:OldVDInt19],ax
 19669 00000B39 A16600                  	mov	ax,[19h*4+2]
 19670                                  	;mov	[OldVDInt19+2],ax
 19671 00000B3C 2EA3[0C0B]              	mov	[cs:OldVDInt19+2],ax
 19672                                  
 19673                                  ;-------------- calculate seg of new int 19 handler
 19674                                  
 19675 00000B40 B448                    	mov	ah,48h			; allocate memory
 19676                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 19677                                  	; 23/10/2022
 19678 00000B42 BB0400                  	mov	bx,4
 19679 00000B45 CD21                    	int	21h
 19680                                  
 19681                                  ;	if carry, fatal hanging error!!!!!
 19682                                  
 19683 00000B47 48                      	dec	ax			; point to arena
 19684 00000B48 8EC0                    	mov	es,ax
 19685                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 19686 00000B4A 26C70601000800          	mov	word [es:1],8
 19687                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 19688 00000B51 26C70608005343          	mov	word [es:8],'SC'
 19689 00000B58 40                      	inc	ax
 19690 00000B59 8EC0                    	mov	es,ax			; get back to allocated memory
 19691                                  
 19692                                  ;-------------- install new int 19 vector
 19693                                  
 19694 00000B5B FA                      	cli				; no reboots at this time
 19695                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 19696 00000B5C C70664002F00            	mov	word [19h*4],47
 19697 00000B62 A36600                  	mov	[19h*4+2],ax
 19698                                  
 19699                                  ;-------------- move the code into proper place
 19700                                  
 19701                                  	;mov	cx,(EndVDHead-StartVDHead)
 19702 00000B65 B93400                  	mov	cx,52
 19703 00000B68 BE[DA0A]                	mov	si,StartVDHead
 19704 00000B6B 31FF                    	xor	di,di
 19705 00000B6D 0E                      	push	cs
 19706 00000B6E 1F                      	pop	ds
 19707 00000B6F FC                      	cld
 19708 00000B70 F3A4                    	rep	movsb
 19709 00000B72 FB                      	sti				; BUGBUG is sti OK now?
 19710                                  
 19711                                  ;-------------- mov the HMA VDisk head into HMA
 19712                                  
 19713                                  	; 23/10/2022
 19714 00000B73 57                      	push	di
 19715 00000B74 06                      	push	es
 19716                                  
 19717 00000B75 B8FFFF                  	mov	ax,0FFFFh
 19718 00000B78 8EC0                    	mov	es,ax
 19719 00000B7A BF1000                  	mov	di,10h
 19720                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 19721 00000B7D B92000                  	mov	cx,32
 19722 00000B80 BE[0E0B]                	mov	si,VDiskHMAHead
 19723 00000B83 F3A4                    	rep	movsb			; ds already set to cs
 19724                                  
 19725 00000B85 5F                      	pop	di
 19726 00000B86 07                      	pop	es
 19727                                  
 19728 00000B87 C3                      	retn
 19729                                  
 19730                                  ; ----------------------------------------------------------------------
 19731                                  ; procedure : ClrVDISKHeader
 19732                                  ;
 19733                                  ;		Clears the first 32 bytes at 1MB boundary
 19734                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 19735                                  ;		left by previous DOS=HIGH session
 19736                                  ;
 19737                                  ; ----------------------------------------------------------------------
 19738                                  
 19739                                  struc desc
 19740 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 19741 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 19742 00000004 ??                       .hi_byte:	resb 	1		; address
 19743 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 19744 00000006 ????                     .reserved:	resw	1		;
 19745                                   .size:
 19746                                  endstruc
 19747                                  
 19748                                  		; 23/10/2022
 19749                                  bmove:		;label byte
 19750                                  
 19751                                  dummy:		;times desc.size db 0	; desc	<>
 19752 00000B88 00<rep 8h>              		times 8 db 0		 
 19753                                  gdt:		;times desc.size db 0	; desc	<>
 19754 00000B90 00<rep 8h>              		times 8 db 0
 19755 00000B98 FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 19756 00000B9A 0000                    		dw	0
 19757 00000B9C 00                      		db	0
 19758 00000B9D 93                      		db	93h
 19759 00000B9E 0000                    		dw	0
 19760 00000BA0 FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 19761 00000BA2 0000                    		dw	0
 19762 00000BA4 10                      		db	10h
 19763 00000BA5 93                      		db	93h
 19764 00000BA6 0000                    		dw	0
 19765                                  
 19766                                  rombios_code:	;times desc.size db 0	; desc	<>
 19767 00000BA8 00<rep 8h>              		times 8 db 0
 19768                                  temp_stack:	;times desc.size db 0	; desc	<>
 19769 00000BB0 00<rep 8h>              		times 8 db 0
 19770                                  
 19771 00000BB8 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 19772                                  
 19773                                  
 19774                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIT1.ASM)
 19775                                  
 19776                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 19777                                  ; (SYSINIT:0CA6h)
 19778                                  
 19779                                  ClrVDISKHeader:	; proc	near
 19780                                  
 19781                                  ;; 04/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 19782                                  ;;-----------------------------------------------------------	     ;I070
 19783                                  ;; The following workaround get around a problem with the	     ;I070
 19784                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	     ;I070
 19785                                  ;; is set. On those machines the INT 15h block move code	     ;I070
 19786                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	     ;I070
 19787                                  ;; In password server mode the 8042 is disabled so the block	     ;I070
 19788                                  ;; move crashes the system. We can do this because these	     ;I070
 19789                                  ;; systems clear all of memory on a cold boot.			     ;I070
 19790                                  ;								     ;I070
 19791                                  ;	in      al,64h         		; Test for passwd servr mode ;I070
 19792                                  ;	test    al,10h			; Is keyboard inhibited?     ;I070
 19793                                  ;	jnz     short ClrVDISKok	; No, go do block move.      ;I070
 19794                                  ;					; Check for Tortugas...	     ;I070
 19795                                  ;	;;cmp	word [cs:sys_model_byte],19F8h                	     ;I070
 19796                                  ;	;cmp	word [sys_model_byte],19F8h  ; ds = cs       
 19797                                  ;	mov	ax,[sys_model_byte]
 19798                                  ;	cmp	ax,19F8h
 19799                                  ;	je      short ClrVDISKno                            	     ;I070
 19800                                  ;					; Check for mod 30-286	     ;I070
 19801                                  ;	;;cmp	word [cs:sys_model_byte],09FCh			     ;I070
 19802                                  ;	;cmp	word [sys_model_byte],09FCh	
 19803                                  ;	cmp	ax,09FCh
 19804                                  ;	jne     short ClrVDISKok			      	     ;I070
 19805                                  ;ClrVDISKno:							     ;I070	
 19806                                  ;	retn	               		; Return w/o block move.     ;I070
 19807                                  ;ClrVDISKok:							     ;I070
 19808                                  ;-----------------------------------------------------------	     ;I070
 19809                                  
 19810                                  	; 12/12/2022
 19811                                  	; ds = cs
 19812                                  
 19813                                  	; 30/12/2022 - Retro DOS v4.2
 19814                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0CBFh)
 19815                                  
 19816 00000BD8 06                      	push	es
 19817 00000BD9 8CC8                    	mov	ax,cs
 19818 00000BDB 89C2                    	mov	dx,ax
 19819 00000BDD B10C                    	mov	cl,12
 19820 00000BDF D3EA                    	shr	dx,cl
 19821 00000BE1 B104                    	mov	cl,4
 19822 00000BE3 D3E0                    	shl	ax,cl
 19823 00000BE5 05[B80B]                	add	ax,ClrdVDISKHead
 19824 00000BE8 80D200                  	adc	dl,0
 19825                                  
 19826                                  	;; 23/10/2022
 19827                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 19828                                  	;mov	[cs:src_desc+2],ax
 19829                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 19830                                  	;mov	[cs:src_desc+4],dl
 19831                                  	; 12/12/2022
 19832                                  	;mov	[src_desc+desc.lo_word],ax
 19833 00000BEB A3[9A0B]                	mov	[src_desc+2],ax
 19834                                  	;mov	[src_desc+desc.hi_byte],dl
 19835 00000BEE 8816[9C0B]              	mov	[src_desc+4],dl
 19836                                  
 19837 00000BF2 B91000                  	mov	cx,16	; 16 words
 19838 00000BF5 0E                      	push	cs
 19839 00000BF6 07                      	pop	es
 19840 00000BF7 BE[880B]                	mov	si,bmove
 19841 00000BFA B487                    	mov	ah,87h
 19842 00000BFC CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 19843                                  			; CX = number of words to move 
 19844                                  			; ES:SI -> global descriptor table
 19845                                  			; Return: CF set on error, AH = status
 19846 00000BFE 07                      	pop	es
 19847 00000BFF C3                      	retn
 19848                                  
 19849                                  ; ----------------------------------------------------------------------
 19850                                  ;
 19851                                  ; procedure : SaveFreeHMAPtr
 19852                                  ;
 19853                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 19854                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 19855                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 19856                                  ;		the offset.
 19857                                  ;
 19858                                  ; Inputs : ES:DI - pointer to free HMA
 19859                                  ; Output : FreeHMAPtr in BIOS data segment updated
 19860                                  ;
 19861                                  ; ----------------------------------------------------------------------
 19862                                  
 19863                                  SaveFreeHMAPtr:
 19864 00000C00 8CC3                    	mov	bx,es
 19865 00000C02 B8FFFF                  	mov	ax,0FFFFh		; HMA segment
 19866 00000C05 29D8                    	sub	ax,bx
 19867 00000C07 83C70F                  	add	di,15			; para round
 19868 00000C0A 83E7F0                  	and	di,0FFF0h
 19869 00000C0D B104                    	mov	cl,4
 19870 00000C0F D3E0                    	shl	ax,cl
 19871 00000C11 29C7                    	sub	di,ax
 19872 00000C13 1E                      	push	ds
 19873                                  	;;mov	ax,Bios_Data ; 0070h
 19874                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19875                                  	; 21/10/2022
 19876 00000C14 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19877 00000C17 8ED8                    	mov	ds,ax
 19878 00000C19 893E[9608]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 19879 00000C1D C606[0D00]FF            	mov	byte [inHMA],0FFh  ; (ds:0Dh)
 19880 00000C22 1F                      	pop	ds
 19881 00000C23 C3                      	retn
 19882                                  
 19883                                  ; ----------------------------------------------------------------------
 19884                                  ;
 19885                                  ; procedure : IsVDiskInstalled
 19886                                  ;
 19887                                  ;		Checks for the presence of VDISK header at 1MB boundary
 19888                                  ;		& INT 19 vector
 19889                                  ;
 19890                                  ; Inputs  : A20 flag should be ON
 19891                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 19892                                  ;
 19893                                  ; ----------------------------------------------------------------------
 19894                                  
 19895                                  IsVDiskInstalled:
 19896 00000C24 31C0                    	xor	ax,ax
 19897 00000C26 8ED8                    	mov	ds,ax
 19898 00000C28 8E1E4E00                	mov	ds,[19*4+2]
 19899                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 19900                                  	; 23/10/2022
 19901 00000C2C BE1200                  	mov	si,12h ; 18
 19902                                  	;mov	cx,VLEN1 ; 5
 19903 00000C2F B90500                  	mov	cx,5
 19904 00000C32 0E                      	push	cs
 19905 00000C33 07                      	pop	es
 19906 00000C34 BF[EC0A]                	mov	di,VDiskSig1
 19907 00000C37 F3A6                    	rep	cmpsb
 19908 00000C39 7410                    	je	short ivdins_retn
 19909 00000C3B B8FFFF                  	mov	ax,0FFFFh
 19910 00000C3E 8ED8                    	mov	ds,ax
 19911                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 19912 00000C40 BE1300                  	mov	si,13h
 19913 00000C43 BF[110B]                	mov	di,VDiskSig2
 19914                                  	;mov	cx,VLEN2  ; 5
 19915 00000C46 B90500                  	mov	cx,5
 19916 00000C49 F3A6                    	rep	cmpsb
 19917                                  ivdins_retn: 
 19918 00000C4B C3                      	retn			; returns the Zero flag
 19919                                  
 19920                                  ; ----------------------------------------------------------------------
 19921                                  ;
 19922                                  ; procedure : CPMHack
 19923                                  ;
 19924                                  ;		Copies the code from 0:c0 into ffff:0d0h
 19925                                  ;		for CPM compatibility
 19926                                  ;
 19927                                  ; ----------------------------------------------------------------------
 19928                                  
 19929                                  	; 11/12/2022
 19930                                  CPMHack:
 19931 00000C4C 1E                      	push	ds
 19932 00000C4D B9FFFF                  	mov	cx,0FFFFh
 19933 00000C50 8EC1                    	mov	es,cx		; ES = 0FFFFh
 19934                                  	;xor	cx,cx
 19935                                  	; 11/12/2022
 19936 00000C52 41                      	inc	cx  ; cx = 0
 19937 00000C53 8ED9                    	mov	ds,cx		; DS = 0
 19938 00000C55 BEC000                  	mov	si,0C0h
 19939 00000C58 BFD000                  	mov	di,0D0h
 19940                                  	;mov	cx,5
 19941 00000C5B B105                    	mov	cl,5
 19942 00000C5D FC                      	cld
 19943 00000C5E F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 19944 00000C60 1F                      	pop	ds
 19945 00000C61 C3                      	retn
 19946                                  
 19947                                  ; ----------------------------------------------------------------------
 19948                                  ;
 19949                                  ; procedure : off_to_para
 19950                                  ;
 19951                                  ; ----------------------------------------------------------------------
 19952                                  off_to_para:
 19953 00000C62 D1E8                    	shr	ax,1
 19954 00000C64 D1E8                    	shr	ax,1
 19955 00000C66 D1E8                    	shr	ax,1
 19956 00000C68 D1E8                    	shr	ax,1
 19957 00000C6A C3                      	retn
 19958                                  
 19959                                  ; ----------------------------------------------------------------------
 19960                                  ;**	TempCDS - Create (Temporary?) CDS
 19961                                  ;
 19962                                  ;	ENTRY	?? BUGBUG
 19963                                  ;		(DS) = SysInitSeg
 19964                                  ;	EXIT	?? BUGBUG
 19965                                  ;	USES	?? BUGBUG
 19966                                  ; ----------------------------------------------------------------------
 19967                                  
 19968                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19969                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 19970                                  TempCDS:
 19971 00000C6B C43E[6B02]              	les	di,[DOSINFO]
 19972 00000C6F 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 19973                                  	;mov	cl,[es:di+20h]
 19974 00000C73 30ED                    	xor	ch,ch			; (cx) = # of block devices
 19975                                  
 19976 00000C75 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 19977                                  	;mov	[es:di+21h],cl	
 19978                                  
 19979 00000C79 88C8                    	mov	al,cl
 19980 00000C7B B458                    	mov	ah,curdirlen ; curdir_list.size ; 88
 19981                                  	;mov	ah,88
 19982 00000C7D F6E4                    	mul	ah			; (ax) = byte size for those CDSs
 19983 00000C7F E8E604                  	call	ParaRound		; (ax) = paragraph size for CDSs
 19984 00000C82 8B36[A502]              	mov	si,[top_of_cdss] ; 31/12/2022
 19985                                  
 19986                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 19987                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 19988                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 19989                                  ;		   variable which has the top of free memory for
 19990                                  ;		   device driver loads, etc.
 19991                                  
 19992 00000C86 29C6                    	sub	si,ax
 19993                                  
 19994                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 19995                                  ;		that automatically updates alloclim every time we
 19996                                  ;		set up some new CDSs. Instead, I've added code
 19997                                  ;		which pre-allocates space for 26 CDSs. This
 19998                                  ;	        way we've got room for worst case CDSs before
 19999                                  ;		we place MagicDrv.sys
 20000                                  ;
 20001                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 20002                                  
 20003                                  	; 30/12/2022
 20004                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20005                                  	; (SYSINIT:0C52h)
 20006                                  	;mov	[ALLOCLIM],si ; (MSDOS 5.0 SYSINIT)
 20007                                  
 20008 00000C88 26897518                	mov	[es:di+SYSI_CDS+2],si
 20009                                  	;mov	[es:di+18h],si
 20010 00000C8C 89F0                    	mov	ax,si
 20011 00000C8E 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 20012                                  	;mov	[word es:di+16h],0
 20013                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 20014 00000C94 26C535                  	lds	si,[es:di]
 20015 00000C97 8EC0                    	mov	es,ax
 20016 00000C99 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 20017                                  
 20018                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 20019                                  ;	info from the corresponding DPB.
 20020                                  ;
 20021                                  ;	(cx) = count of CDSs left to process
 20022                                  ;	(es:di) = address of next CDS
 20023                                  
 20024                                  fooset:
 20025                                  	; 23/10/2022
 20026 00000C9B 2EA1[A702]              	mov	ax,[cs:DirStrng] ; "A:"
 20027 00000C9F AB                      	stosw				; setup the root as the curdir
 20028                                  	
 20029                                  	; 23/10/2022 (MSDOS 5.0 SYSINIT)
 20030                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 20031                                  
 20032                                  	; 30/12/2022
 20033                                  	; (MSDOS 6.21 SYSINIT:0D8Bh)
 20034 00000CA0 E85C00                  	call	get_dpb_for_drive_al	; get dpb for drive in dpb
 20035                                  
 20036                                  ;	(ds:si) = address of DPB
 20037                                  ;		 (si) = -1 if no drive
 20038                                  
 20039 00000CA3 2EA1[A902]              	mov	ax,[cs:DirStrng+2] ; "\",0
 20040 00000CA7 AB                      	stosw
 20041 00000CA8 2EFE06[A702]            	inc	byte [cs:DirStrng]
 20042 00000CAD 31C0                    	xor	ax,ax
 20043 00000CAF 51                      	push	cx
 20044                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 20045 00000CB0 B93F00                  	mov	cx,63	; 23/10/2022
 20046 00000CB3 F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 20047                                  
 20048                                  ;	should handle the system that does not have any floppies.
 20049                                  ;	in this case,we are going to pretended there are two dummy floppies
 20050                                  ;	in the system. still they have dpb and cds,but we are going to
 20051                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 20052                                  ;	"invalid drive specification" message when the user try to
 20053                                  ;	access them.
 20054                                  ;
 20055                                  ;	(ax) = 0
 20056                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 20057                                  ;	(ds:si) = Next DPB (-1 if none)
 20058                                  
 20059 00000CB5 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 20060 00000CB8 7414                    	je	short fooset_zero	; don't have any physical drive.
 20061                                  
 20062                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 20063                                  ;	if we are faking floppy drives then see if this cds being initialised
 20064                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 20065                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 20066                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 20067                                  ;	for dpb offsets look at inc\dpb.inc.
 20068                                  
 20069 00000CBA 2E803E[8902]01          	cmp	byte [cs:fake_floppy_drv],1
 20070 00000CC0 7513                    	jne	short normcds 		; machine has floppy drives
 20071                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 20072 00000CC2 803C01                  	cmp	byte [si],1
 20073 00000CC5 770E                    	ja	short normcds
 20074 00000CC7 B103                    	mov	cl,3			; the next dbp pointer
 20075                                  					; AX should be zero here
 20076 00000CC9 F3AB                    	rep	stosw
 20077 00000CCB 59                      	pop	cx
 20078 00000CCC EB18                    	jmp	short get_next_dpb
 20079                                  
 20080                                  ;	(ax) = 0
 20081                                  
 20082                                  fooset_zero:
 20083 00000CCE B103                    	mov	cl,3
 20084 00000CD0 F3AB                    	rep	stosw
 20085 00000CD2 59                      	pop	cx
 20086 00000CD3 EB11                    	jmp	short fincds
 20087                                  
 20088                                  ;*	We have a "normal" DPB and thus a normal CDS.
 20089                                  ;
 20090                                  ;	(ax) = 0
 20091                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 20092                                  ;	(ds:si) = Next DPB (-1 if none)
 20093                                  
 20094                                  normcds:
 20095 00000CD5 59                      	pop	cx
 20096                                  
 20097                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 20098                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 20099                                  ;	this media is a non-fat based one.
 20100                                  
 20101                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 20102                                  	; 23/10/2022
 20103 00000CD6 807C0800                	cmp	byte [si+8],0
 20104 00000CDA 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 20105 00000CDC B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 20106                                  	;mov	ax,4000h
 20107                                  setnormcds:
 20108 00000CDF AB                      	stosw				; curdir_flags
 20109 00000CE0 89F0                    	mov	ax,si
 20110 00000CE2 AB                      	stosw				; curdir_devptr
 20111 00000CE3 8CD8                    	mov	ax,ds
 20112 00000CE5 AB                      	stosw
 20113                                  
 20114                                  get_next_dpb:				; entry point for fake_fooset_zero
 20115                                  	; 30/12/2022
 20116                                  	; (MSDOS 6.21 SYSINIT:0DD1h)
 20117                                  	; 23/10/2022
 20118                                  	;lds	si,[si+19h] ; (MSDOS 5.0 SYSINIT)
 20119                                  	;;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 20120                                  fincds:	; get_next_dpb
 20121                                  	; 30/12/2022
 20122                                  	; (MSDOS 6.21 SYSINIT:0DD1h)
 20123 00000CE6 B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 20124 00000CE9 AB                      	stosw				; curdir_id
 20125 00000CEA AB                      	stosw				; curdir_id
 20126 00000CEB AB                      	stosw				; curdir_user_word
 20127 00000CEC B80200                  	mov	ax,2
 20128 00000CEF AB                      	stosw				; curdir_end
 20129 00000CF0 B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 20130 00000CF2 AA                      	stosb
 20131 00000CF3 AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 20132 00000CF4 AB                      	stosw
 20133 00000CF5 AB                      	stosw
 20134                                  
 20135 00000CF6 E2A3                    	loop	fooset
 20136                                  	
 20137 00000CF8 2EC606[A702]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 20138                                  	
 20139 00000CFE C3                      	retn
 20140                                  
 20141                                  ; ----------------------------------------------------------------------
 20142                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 20143                                  ;
 20144                                  ;	entry:
 20145                                  ;	   al == ASCII CAPS drive letter
 20146                                  ;
 20147                                  ;	exit:
 20148                                  ;	   ds:si -> DPB, or si = -1 if not found
 20149                                  ; ----------------------------------------------------------------------
 20150                                  
 20151                                  ; 30/12/2022
 20152                                  ; (MSDOS 6.21 SYSINIT:0DEAh)
 20153                                  ; 23/10/2022
 20154                                  ;%if 0
 20155                                  get_dpb_for_drive_al:
 20156 00000CFF 2EC536[6B02]            	lds	si,[cs:DOSINFO]		; point to first DPB
 20157                                  	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 20158 00000D04 C534                    	lds	si,[si]
 20159 00000D06 2C41                    	sub	al,'A'
 20160                                  
 20161                                  get_dpb_for_drive_1:
 20162                                  	;cmp	al,[si+DPB.DRIVE]	; match?
 20163 00000D08 3A04                    	cmp	al,[si]
 20164 00000D0A 7408                    	je	short got_dpb_for_drive	;  done if so
 20165                                  
 20166 00000D0C C57419                  	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 20167 00000D0F 83FEFF                  	cmp	si,-1
 20168 00000D12 75F4                    	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 20169                                  
 20170                                  got_dpb_for_drive:
 20171 00000D14 C3                      	retn
 20172                                  ;%endif  ; 23/10/2022
 20173                                  
 20174                                  ;=======================================================================
 20175                                  
 20176                                  ;**	EndFile - Build DOS structures
 20177                                  ;
 20178                                  ; This procedure is called after the config.sys has been processed and
 20179                                  ; installable device drivers have been loaded (but before "install="
 20180                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 20181                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 20182                                  ; to allow for the safe EXECing of "install=" programs. All memory
 20183                                  ; above these structures is deallocated back to DOS.
 20184                                  ;
 20185                                  ;	ENTRY	?? BUGBUG
 20186                                  ;	EXIT	?? BUGBUG
 20187                                  ;	USES	?? BUGBUG
 20188                                  
 20189                                  ;=======================================================================
 20190                                  ; allocate files
 20191                                  ; ----------------------------------------------------------------------
 20192                                  
 20193                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20194                                  	; (SYSINIT:0CCDh)
 20195                                  
 20196                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 20197                                  	; (SYSINIT:0E00h)
 20198                                  endfile:
 20199                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 20200                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 20201                                  ; to confbot.
 20202                                  
 20203                                  ;	if this procedure has been called to take care of install= command,
 20204                                  ;	   then we have to save es,si registers.
 20205                                  
 20206                                  	; 11/12/2022
 20207                                  	; ds = cs
 20208                                  
 20209                                  	; 23/10/2022
 20210                                  	; 31/03/2019
 20211 00000D15 1E                      	push	ds
 20212                                  
 20213                                  	;;mov	ax,Bios_Data ; 0070h
 20214                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 20215                                  	; 21/10/2022
 20216 00000D16 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 20217 00000D19 8ED8                    	mov	ds,ax
 20218                                  
 20219                                  	;cmp	word [052Fh],0
 20220 00000D1B 833E[2705]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 20221 00000D20 7505                    	jne	short multrk_flag_done
 20222                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20223                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 20224                                  	; 12/12/2022
 20225 00000D22 800E[2705]80            	or	byte [multrk_flag],multrk_on ; 80h
 20226                                  multrk_flag_done:
 20227                                  	; 23/10/2022
 20228                                  	; 31/03/2019
 20229 00000D27 1F                      	pop	ds
 20230                                  
 20231                                  	; 11/12/2022
 20232                                  	; ds = cs
 20233                                  	;mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 20234                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 20235                                  	; (SYSINIT:0E14h)
 20236 00000D28 A1[A102]                	mov	ax,[CONFBOT]
 20237 00000D2B A3[A302]                	mov	[ALLOCLIM],ax
 20238                                  	; 23/10/2022
 20239                                  	;mov	ax, [cs:top_of_cdss]
 20240                                  	;mov	[cs:ALLOCLIM], ax 
 20241                                  
 20242                                  	; 11/12/2022
 20243                                  	; ds = cs
 20244                                  	;push	cs
 20245                                  	;pop	ds
 20246                                  	
 20247                                  	;mov	ax,[CONFBOT]
 20248                                  	;mov	[ALLOCLIM],ax
 20249                                  
 20250 00000D2E E8D435                  	call	round
 20251                                  	; 11/12/2022
 20252                                  	; ds = cs
 20253 00000D31 A0[9D02]                	mov	al,[FILES]
 20254                                  	; 23/10/2022
 20255                                  	;mov	al,[cs:FILES]
 20256 00000D34 2C05                    	sub	al,5
 20257 00000D36 764B                    	jbe	short dofcbs
 20258                                  
 20259 00000D38 50                      	push	ax
 20260                                  	;mov	al,devmark_files ; 'F'
 20261 00000D39 B046                    	mov	al,'F'
 20262 00000D3B E87B07                  	call	setdevmark		; set devmark for sfts (files)
 20263 00000D3E 58                      	pop	ax
 20264 00000D3F 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 20265                                  					;  it does sign extend.
 20266                                  	; 11/12/2022
 20267                                  	; ds = cs
 20268 00000D41 8B1E[6003]              	mov	bx,[memlo]
 20269 00000D45 8B16[6203]              	mov	dx,[memhi]
 20270 00000D49 C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 20271                                  	; 23/10/2022
 20272                                  	;mov	bx,[cs:memlo]
 20273                                  	;mov	dx,[cs:memhi]
 20274                                  	;lds	di,[cs:DOSINFO]		
 20275                                  
 20276                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 20277 00000D4D C57D04                  	lds	di,[di+4]
 20278                                  
 20279                                  	;mov	[di+SF.SFLink],bx
 20280 00000D50 891D                    	mov	[di],bx
 20281 00000D52 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 20282                                  
 20283 00000D55 0E                      	push	cs
 20284 00000D56 1F                      	pop	ds
 20285                                  
 20286                                  	; 11/12/2022
 20287                                  	; ds = cs
 20288 00000D57 C43E[6003]              	les	di,[memlo]		;point to new sft
 20289                                  	; 23/10/2022
 20290                                  	;les	di,[cs:memlo]
 20291                                  
 20292                                  	;mov	word [es:di+SF.SFLink],-1
 20293 00000D5B 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 20294                                  	;mov	[es:di+SF.SFCount],ax
 20295 00000D60 26894504                	mov	[es:di+4],ax
 20296                                  	;mov	bl,SF_ENTRY.size ; 59
 20297 00000D64 B33B                    	mov	bl,59
 20298 00000D66 F6E3                    	mul	bl			;ax = number of bytes to clear
 20299 00000D68 89C1                    	mov	cx,ax
 20300                                  	; 11/12/2022
 20301                                  	; ds = cs
 20302 00000D6A 0106[6003]              	add	[memlo],ax		;allocate memory
 20303                                  	; 23/10/2022
 20304                                  	;add	[cs:memlo],ax
 20305 00000D6E B80600                  	mov	ax,6
 20306                                  	; 11/12/2022
 20307 00000D71 0106[6003]              	add	[memlo],ax		;remember the header too
 20308                                  	;add	[cs:memlo],ax
 20309                                  	; 11/12/2022
 20310 00000D75 800E[E214]02            	or	byte [setdevmarkflag],for_devmark ; 2
 20311                                  	; 23/10/2022
 20312                                  	;or	byte [cs:setdevmarkflag],2
 20313 00000D7A E88835                  	call	round			; check for mem error before the stosb
 20314 00000D7D 01C7                    	add	di,ax
 20315 00000D7F 31C0                    	xor	ax,ax
 20316 00000D81 F3AA                    	rep	stosb			;clean out the stuff
 20317                                  
 20318                                  ; allocate fcbs
 20319                                  ; ----------------------------------------------------------------------
 20320                                  
 20321                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20322                                  	; (SYSINIT:0D48h)
 20323                                  dofcbs:
 20324                                  	; 11/12/2022
 20325                                  	; ds = cs
 20326                                  	;push	cs
 20327                                  	;pop	ds
 20328 00000D83 E87F35                  	call	round
 20329                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 20330 00000D86 B058                    	mov	al,'X'
 20331 00000D88 E82E07                  	call	setdevmark
 20332                                  	; 11/12/2022
 20333                                  	; ds = cs
 20334 00000D8B A0[9E02]                	mov	al,[FCBS]
 20335                                  	;mov	al,[cs:FCBS]
 20336 00000D8E 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 20337                                  					;  it does sign extend.
 20338                                  	; 11/12/2022
 20339 00000D90 8B1E[6003]              	mov	bx,[memlo]
 20340 00000D94 8B16[6203]              	mov	dx,[memhi]
 20341 00000D98 C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 20342                                  	; 23/10/2022
 20343                                  	;mov	bx,[cs:memlo]
 20344                                  	;mov	dx,[cs:memhi]
 20345                                  	;lds	di,[cs:DOSINFO]
 20346                                  
 20347                                  	;mov	[di+SYSI_FCB],bx
 20348                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 20349                                  	; 23/10/2022
 20350 00000D9C 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 20351 00000D9F 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 20352                                  
 20353 00000DA2 2E8A1E[9F02]            	mov	bl,[cs:KEEP]
 20354 00000DA7 30FF                    	xor	bh,bh
 20355                                  	;mov	[di+SYSI_KEEP],bx
 20356 00000DA9 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 20357                                  
 20358 00000DAC 0E                      	push	cs
 20359 00000DAD 1F                      	pop	ds
 20360                                  	
 20361 00000DAE C43E[6003]              	les	di,[memlo]		; point to new table
 20362                                  	;mov	word [es:di+SF.SFLink],-1
 20363 00000DB2 26C705FFFF              	mov	word [es:di],-1
 20364                                  	;mov	[es:di+SF.SFCount],ax
 20365                                  	; 02/11/2022
 20366 00000DB7 26894504                	mov	[es:di+4],ax
 20367 00000DBB B339                    	mov	bl,SF_ENTRY.size ; 59
 20368 00000DBD 89C1                    	mov	cx,ax
 20369 00000DBF F6E3                    	mul	bl			; ax = number of bytes to clear
 20370 00000DC1 0106[6003]              	add	[memlo],ax		; allocate memory
 20371                                  	;mov	ax,6
 20372 00000DC5 B80600                  	mov	ax,SF.size-2 ; 6
 20373 00000DC8 0106[6003]              	add	[memlo],ax		; remember the header too
 20374                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20375 00000DCC 800E[E214]02            	or	byte [setdevmarkflag],2
 20376 00000DD1 E83135                  	call	round			; check for mem error before the stosb
 20377 00000DD4 01C7                    	add	di,ax			; skip over header
 20378 00000DD6 B041                    	mov	al,'A'
 20379                                  fillloop:
 20380 00000DD8 51                      	push	cx			; save count
 20381 00000DD9 B93900                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 20382 00000DDC FC                      	cld
 20383 00000DDD F3AA                    	rep	stosb			; filled
 20384                                  
 20385                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 20386                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]	
 20387                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 20388                                  
 20389                                  	; 18/12/2022
 20390                                  	;cx = 0
 20391 00000DDF 26894DC7                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 20392 00000DE3 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]	
 20393 00000DE7 26894DDE                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 20394                                  	
 20395                                  	; 23/10/2022	
 20396                                  	;mov     word [es:di-3Bh],0
 20397                                  	;mov     word [es:di-26h],0
 20398                                  	;mov     word [es:di-24h],0
 20399                                  
 20400 00000DEB 59                      	pop	cx
 20401 00000DEC E2EA                    	loop	fillloop
 20402                                  
 20403                                  ; allocate buffers
 20404                                  ; ----------------------------------------------------------------------
 20405                                  
 20406                                  ; search through the list of media supported and allocate 3 buffers if the
 20407                                  ; capacity of the drive is > 360kb
 20408                                  
 20409                                  	; 18/12/2022
 20410                                  	; cx = 0
 20411 00000DEE 833E[9702]FF            	cmp	word [buffers],-1	; has buffers been already set?
 20412 00000DF3 7403                    	je	short dodefaultbuff
 20413 00000DF5 E98700                  	jmp	dobuff			; the user entered the buffers=.
 20414                                  
 20415                                  dodefaultbuff:
 20416                                  	; 18/12/2022
 20417 00000DF8 890E[9902]              	mov	[h_buffers],cx ; 0
 20418 00000DFC 41                      	inc	cx
 20419 00000DFD 41                      	inc	cx
 20420 00000DFE 890E[9702]              	mov	[buffers],cx ; 2	
 20421                                  	
 20422                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 20423                                  	;mov	word [buffers],2	; default to 2 buffers
 20424                                  
 20425                                  	; 23/10/2022	
 20426 00000E02 50                      	push	ax
 20427 00000E03 1E                      	push	ds ; 26/03/2019
 20428                                  	;les	bp,[DOSINFO]		; search through the dpb's
 20429 00000E04 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 20430                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 20431                                  	; 11/12/2022
 20432 00000E09 26C46E00                	les	bp,[es:bp]
 20433                                  	; 23/10/2022
 20434                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 20435                                  
 20436 00000E0D 0E                      	push	cs
 20437 00000E0E 1F                      	pop	ds
 20438                                  ;SYSINIT:0DE2h:
 20439                                  nextdpb:				; test if the drive supports removeable media
 20440                                  	;mov	bl,[es:bp+DPB.drive]
 20441                                  	; 11/12/2022
 20442 00000E0F 268A5E00                	mov	bl,[es:bp]
 20443                                  	; 23/10/2022
 20444                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 20445                                  
 20446                                  	;inc	bl
 20447                                  	; 18/12/2022
 20448 00000E13 43                      	inc	bx
 20449                                  
 20450                                  	;mov	ax,(IOCTL<<8)|8
 20451 00000E14 B80844                  	mov	ax,4408h
 20452 00000E17 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 20453                                  
 20454                                  ; ignore fixed disks
 20455                                  
 20456 00000E19 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 20457 00000E1B 7534                    	jnz	short nosetbuf
 20458                                  
 20459                                  ; get parameters of drive
 20460                                  
 20461 00000E1D 31DB                    	xor	bx,bx
 20462                                  	;;mov	bl,[es:bp+DPB.drive]
 20463                                  	; 11/12/2022
 20464 00000E1F 268A5E00                	mov	bl,[es:bp]
 20465                                  	; 23/10/2022
 20466                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 20467                                  	
 20468                                  	;inc	bl
 20469                                  	; 18/12/2022
 20470 00000E23 43                      	inc	bx
 20471                                  
 20472 00000E24 BA[DA48]                	mov	dx,deviceparameters
 20473                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 20474 00000E27 B80D44                  	mov	ax,440Dh
 20475                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 20476 00000E2A B96008                  	mov	cx,860h
 20477 00000E2D CD21                    	int	21h		; DOS - 2+ - IOCTL -
 20478 00000E2F 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 20479                                  					; generic ioctl
 20480                                  ; determine capacity of drive
 20481                                  ; media capacity = #sectors * bytes/sector
 20482                                  
 20483                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS]
 20484                                  	; 23/10/2022
 20485 00000E31 8B1E[E948]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 20486                                  	
 20487                                  ; to keep the magnitude of the media capacity within a word,
 20488                                  ; scale the sector size
 20489                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 20490                                  
 20491                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR]
 20492                                  	; 23/10/2022
 20493 00000E35 A1[E148]                	mov	ax,[deviceparameters+7] ; bytes per sector
 20494 00000E38 31D2                    	xor	dx,dx
 20495 00000E3A B90002                  	mov	cx,512
 20496 00000E3D F7F1                    	div	cx			; scale sector size in factor of
 20497                                  					; 512 bytes
 20498 00000E3F F7E3                    	mul	bx			; ax = #sectors * size factor
 20499 00000E41 09D2                    	or	dx,dx			; just in case of large floppies
 20500 00000E43 7505                    	jnz	short setbuf
 20501 00000E45 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 20502 00000E48 7607                    	jbe	short nosetbuf
 20503                                  setbuf:
 20504                                  	; 18/12/2022
 20505                                  	; word [buffers] = 2
 20506 00000E4A C606[9702]03            	mov	byte [buffers],3
 20507                                  	;mov	word [buffers],3
 20508 00000E4F EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 20509                                  					; for default buffer count
 20510                                  nosetbuf:
 20511                                  	; 23/10/2022
 20512                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 20513 00000E51 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 20514 00000E56 7406                    	je	short chk_memsize_for_buffers
 20515                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 20516 00000E58 26C46E19                	les	bp,[es:bp+19h]
 20517 00000E5C EBB1                    	jmp	short nextdpb
 20518                                  
 20519                                  ;from dos 3.3,the default number of buffers will be changed according to the
 20520                                  ;memory size too.
 20521                                  ; default buffers = 2
 20522                                  ; if diskette media > 360 kb,then default buffers = 3
 20523                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 20524                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 20525                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 20526                                  
 20527                                  chk_memsize_for_buffers:
 20528                                  	; 18/12/2022
 20529                                  	;cmp	word [MEMORY_SIZE],2000h
 20530                                  	;jbe	short bufset
 20531                                  	;mov	word [buffers],5
 20532                                  	;cmp	word [MEMORY_SIZE],4000h
 20533                                  	;jbe	short bufset
 20534                                  	;mov	word [buffers],10
 20535                                  	;cmp	word [MEMORY_SIZE],8000h
 20536                                  	;jbe	short bufset
 20537                                  	;mov	word [buffers],15
 20538                                  
 20539                                  	; 18/12/2022
 20540                                  	; word [buffers] = 3 or 2
 20541 00000E5E BB[9702]                	mov	bx,buffers
 20542 00000E61 A1[9202]                	mov	ax,[MEMORY_SIZE]
 20543 00000E64 48                      	dec	ax	; [MEMORY_SIZE] - 1
 20544                                  
 20545 00000E65 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 20546 00000E68 7213                    	jb	short bufset
 20547 00000E6A C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 20548 00000E6D 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 20549 00000E70 730B                    	jnb	short bufset
 20550 00000E72 C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 20551 00000E75 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 20552 00000E78 7303                    	jnb	short bufset
 20553 00000E7A C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 20554                                  bufset:
 20555                                  	; 23/10/2022
 20556                                  	; 26/03/2019
 20557 00000E7D 1F                      	pop	ds
 20558 00000E7E 58                      	pop	ax
 20559                                  
 20560                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20561                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 20562                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20563                                  
 20564                                  ; 26/03/2019
 20565                                  
 20566                                  ;*******************************************************************************
 20567                                  ;									       *
 20568                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 20569                                  ; input :								       *
 20570                                  ;    memhi:memlo - start of the next available memory			       *
 20571                                  ;    buffers = number of buffers					       *
 20572                                  ;    h_buffers = number of secondary buffers				       *
 20573                                  ;									       *
 20574                                  ; output:								       *
 20575                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 20576                                  ;	buffinfo set.							       *
 20577                                  ;	bufferqueue set.						       *
 20578                                  ;									       *
 20579                                  ; subroutines to be called:						       *
 20580                                  ;									       *
 20581                                  ;*******************************************************************************
 20582                                  
 20583                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20584                                  	; (SYSINIT:0E60h)
 20585                                  dobuff:
 20586                                  	; ds = cs ; 31/03/2019
 20587                                  	; 23/10/2022
 20588 00000E7F 2EC51E[6B02]            	lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 20589                                  	;mov	ax,[buffers] ; 31/03/2019
 20590                                  	;lds	bx,[DOSINFO]
 20591 00000E84 2EA1[9702]              	mov	ax,[cs:buffers]	; set sysi_buffers
 20592                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 20593 00000E88 89473F                  	mov	[bx+3Fh],ax
 20594 00000E8B 2EA1[9902]              	mov	ax,[cs:h_buffers]
 20595                                  	;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 20596 00000E8F 894741                  	mov	[bx+41h],ax
 20597 00000E92 C55F12                  	lds	bx,[bx+12h]
 20598                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 20599 00000E95 E86D34                  	call	round		; get [memhi]:[memlo]
 20600                                  	;mov	al,devmark_buf	; ='B'
 20601 00000E98 B042                    	mov	al,'B'	
 20602 00000E9A E81C06                  	call	setdevmark
 20603                                  
 20604                                  ;allocate buffers
 20605                                  
 20606 00000E9D 1E                      	push	ds			; save buffer info. ptr.
 20607 00000E9E 53                      	push	bx
 20608                                  
 20609 00000E9F E85303                  	call	set_buffer
 20610                                  
 20611 00000EA2 5B                      	pop	bx
 20612 00000EA3 1F                      	pop	ds
 20613                                  
 20614                                  ;now set the secondary buffer if specified.
 20615                                  
 20616 00000EA4 2E833E[9902]00          	cmp	word [cs:h_buffers],0
 20617 00000EAA 742D                    	je	short xif16
 20618 00000EAC E85634                  	call	round
 20619                                  	; 23/10/2022
 20620 00000EAF 2E8B0E[6003]            	mov	cx,[cs:memlo]
 20621                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 20622 00000EB4 894F06                  	mov	[bx+6],cx
 20623 00000EB7 2E8B0E[6203]            	mov	cx,[cs:memhi]
 20624                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 20625 00000EBC 894F08                  	mov	[bx+8],cx
 20626 00000EBF 2E8B0E[9902]            	mov	cx,[cs:h_buffers]
 20627                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 20628 00000EC4 894F0A                  	mov	[bx+10],cx
 20629 00000EC7 B80002                  	mov	ax,512			; 512 byte
 20630 00000ECA F7E1                    	mul	cx
 20631 00000ECC 2EA3[6003]              	mov	[cs:memlo],ax
 20632                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20633 00000ED0 2E800E[E214]02          	or	byte [cs:setdevmarkflag],2
 20634 00000ED6 E82C34                  	call	round
 20635                                  xif16:
 20636                                  
 20637                                  ; ----------------------------------------------------------------------
 20638                                  ; allocate cdss
 20639                                  ; ----------------------------------------------------------------------
 20640                                  
 20641                                  buf1:
 20642 00000ED9 E82934                  	call	round
 20643                                  
 20644 00000EDC 50                      	push	ax
 20645                                  	; 23/10/2022
 20646                                  	;mov	ax,devmark_cds		;='L'
 20647 00000EDD B84C00                  	mov	ax, 'L'
 20648 00000EE0 E8D605                  	call	setdevmark
 20649 00000EE3 58                      	pop	ax
 20650                                  
 20651 00000EE4 2EC43E[6B02]            	les	di,[cs:DOSINFO]
 20652                                  	;mov	cl,[es:di+SYSI_NUMIO]
 20653 00000EE9 268A4D20                	mov	cl,[es:di+20h]
 20654 00000EED 2E3A0E[A002]            	cmp	cl,[cs:NUM_CDS]
 20655 00000EF2 7305                    	jae	short gotncds 		; user setting must be at least numio
 20656 00000EF4 2E8A0E[A002]            	mov	cl,[cs:NUM_CDS]
 20657                                  gotncds:
 20658 00000EF9 30ED                    	xor	ch,ch
 20659                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 20660 00000EFB 26884D21                	mov	[es:di+21h],cl
 20661 00000EFF 2EA1[6203]              	mov	ax,[cs:memhi]
 20662                                  	;mov	[es:di+SYSI_CDS+2],ax
 20663 00000F03 26894518                	mov	[es:di+18h],ax
 20664 00000F07 2EA1[6003]              	mov	ax,[cs:memlo]
 20665                                  	;mov	[es:di+SYSI_CDS],ax
 20666 00000F0B 26894516                	mov	[es:di+16h],ax
 20667 00000F0F 88C8                    	mov	al,cl
 20668                                  	;mov	ah,curdirlen ; curdir_list.size
 20669 00000F11 B458                    	mov	ah,88
 20670 00000F13 F6E4                    	mul	ah
 20671 00000F15 E85002                  	call	ParaRound
 20672 00000F18 2E0106[6203]            	add	[cs:memhi],ax
 20673                                  
 20674                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20675 00000F1D 2E800E[E214]02          	or	byte [cs:setdevmarkflag],2
 20676 00000F23 E8DF33                  	call	round			; check for mem error before initializing
 20677                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 20678 00000F26 26C535                  	lds	si,[es:di]
 20679                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 20680 00000F29 26C47D16                	les	di,[es:di+16h]
 20681 00000F2D E86BFD                  	call	fooset
 20682                                  
 20683                                  ; ----------------------------------------------------------------------
 20684                                  ; allocate space for internal stack
 20685                                  ; ----------------------------------------------------------------------
 20686                                  
 20687 00000F30 0E                      	push	cs
 20688 00000F31 1F                      	pop	ds
 20689                                  
 20690                                  ;	if the user did not entered stacks= command, as a default, do not install
 20691                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 20692                                  ;	otherwise,install it to the user specified value or to the default
 20693                                  ;	value of 9,128 for other systems.
 20694                                  
 20695 00000F32 833E[8E02]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 20696 00000F37 740E                    	je	short doinstallstack	; then install as specified by the user
 20697 00000F39 803E[BA02]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 20698 00000F3E 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 20699 00000F40 803E[B902]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 20700 00000F45 736D                    	jae	short skipstack
 20701                                  doinstallstack:
 20702 00000F47 A1[8A02]                	mov	ax,[stack_count]	; stack_count = 0?
 20703 00000F4A 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 20704 00000F4C 7466                    	jz	short skipstack		; don't install stack.
 20705                                  
 20706                                  ;	dynamic relocation of stack code.
 20707                                  
 20708 00000F4E E8B433                  	call	round			; [memhi] = seg. for stack code
 20709                                  					; [memlo] = 0
 20710                                  
 20711                                  ; set devmark block into memory for mem command
 20712                                  ; devmark_id = 's' for stack
 20713                                  
 20714                                  	;mov	al,devmark_stk	;='S'
 20715                                  	; 23/10/2022
 20716 00000F51 B053                    	mov	al,'S'
 20717 00000F53 E86305                  	call	setdevmark
 20718                                  
 20719 00000F56 A1[6203]                	mov	ax,[memhi]
 20720 00000F59 8EC0                    	mov	es,ax		; es -> seg. the stack code is going to move.
 20721                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20722                                  	; 11/12/2022
 20723                                  	; ds = cs
 20724                                  	;push	cs
 20725                                  	;pop	ds
 20726 00000F5B 31F6                    	xor	si,si		; !!we know that stack code is at the beginning of sysinit.
 20727 00000F5D 31FF                    	xor	di,di
 20728 00000F5F B9[6702]                	mov	cx,endstackcode
 20729 00000F62 890E[6003]              	mov	[memlo],cx
 20730 00000F66 E89C33                  	call	round		; have enough space for relocation?
 20731 00000F69 F3A4                    	rep	movsb
 20732                                  
 20733 00000F6B 1E                      	push	ds		; stick the location of the NextStack entry
 20734                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 20735                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 20736                                  	; 21/10/2022
 20737 00000F6C B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 20738 00000F6F 8ED8                    	mov	ds,ax
 20739 00000F71 C706[5F08][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 20740 00000F77 8C06[6108]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 20741                                  
 20742 00000F7B 2EA1[6003]              	mov	ax,[cs:memlo]
 20743 00000F7F 2EA3[8E02]              	mov	[cs:stack_addr],ax ; set for stack area initialization
 20744 00000F83 A3[6508]                	mov	[IT_StackLoc],ax  ; pass it as Instance Data, too
 20745 00000F86 2EA1[6203]              	mov	ax,[cs:memhi]	 ; this will be used by stack_init routine.
 20746 00000F8A 2EA3[9002]              	mov	[cs:stack_addr+2],ax
 20747 00000F8E A3[6708]                	mov	[IT_StackLoc+2],ax
 20748                                  
 20749                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 20750                                  
 20751                                  	;mov	ax,entrysize ; mov ax,8
 20752                                  	; 23/10/2022
 20753 00000F91 B80800                  	mov	ax,8
 20754 00000F94 2E0306[8C02]            	add	ax,[cs:stack_size]
 20755 00000F99 2EF726[8A02]            	mul	word [cs:stack_count]
 20756                                  
 20757 00000F9E A3[6908]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 20758                                  
 20759 00000FA1 1F                      	pop	ds		; no more need to access Instance Table
 20760                                  
 20761 00000FA2 E8C301                  	call	ParaRound	; convert size to paragraphs
 20762                                  	
 20763                                  	; 11/12/2022
 20764                                  	; ds = cs
 20765                                  	;add	[cs:memhi],ax
 20766 00000FA5 0106[6203]              	add	[memhi],ax
 20767                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20768                                  	;or	byte [cs:setdevmarkflag],2
 20769 00000FA9 800E[E214]02            	or	byte [setdevmarkflag],2
 20770                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20771                                  				; to set the devmark_size for stack by round routine.
 20772 00000FAE E85433                  	call	round		; check for memory error before
 20773                                  				; continuing
 20774 00000FB1 E8EA02                  	call	stackinit	; initialize hardware stack. 
 20775                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 20776                                  skipstack:
 20777                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20778                                  	; (SYSINIT:0F99h)
 20779                                  
 20780                                  	; 11/12/2022
 20781                                  	; ds = cs
 20782                                  	;push	cs
 20783                                  	;pop	ds
 20784                                  
 20785 00000FB4 A0[9D02]                	mov	al,[FILES]
 20786 00000FB7 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 20787                                  				;  it does sign extend.
 20788 00000FB9 89C1                    	mov	cx,ax
 20789 00000FBB 31DB                    	xor	bx,bx		;close standard input
 20790 00000FBD B43E                    	mov	ah,3Eh ; CLOSE
 20791 00000FBF CD21                    	int	21h
 20792 00000FC1 BB0200                  	mov	bx,2
 20793                                  rcclloop:			;close everybody but standard output
 20794 00000FC4 B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 20795 00000FC6 CD21                    	int	21h		; in case we can't get new one open.
 20796 00000FC8 43                      	inc	bx
 20797 00000FC9 E2F9                    	loop	rcclloop
 20798                                  
 20799 00000FCB BA[EA45]                	mov	dx,condev
 20800 00000FCE B002                    	mov	al,2
 20801 00000FD0 B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 20802 00000FD2 F9                      	stc			; set for possible int 24
 20803 00000FD3 CD21                    	int	21h
 20804 00000FD5 7305                    	jnc	short goaux
 20805 00000FD7 E87235                  	call	badfil
 20806 00000FDA EB13                    	jmp	short goaux2
 20807                                  goaux:	
 20808 00000FDC 50                      	push	ax
 20809 00000FDD BB0100                  	mov	bx,1		;close standard output
 20810 00000FE0 B43E                    	mov	ah,3Eh ; CLOSE
 20811 00000FE2 CD21                    	int	21h
 20812 00000FE4 58                      	pop	ax
 20813                                  
 20814 00000FE5 89C3                    	mov	bx,ax		;new device handle
 20815 00000FE7 B445                    	mov	ah,45h ; XDUP
 20816 00000FE9 CD21                    	int	21h		;dup to 1,stdout
 20817 00000FEB B445                    	mov	ah,45h ; XDUP
 20818 00000FED CD21                    	int	21h		;dup to 2,stderr
 20819                                  goaux2: 
 20820 00000FEF BA[EE45]                	mov	dx,auxdev
 20821 00000FF2 B002                    	mov	al,2		;read/write access
 20822 00000FF4 E88635                  	call	open_dev
 20823                                  
 20824 00000FF7 BA[F245]                	mov	dx,prndev
 20825 00000FFA B001                    	mov	al,1		;write only
 20826 00000FFC E87E35                  	call	open_dev
 20827                                  
 20828                                  ;global rearm command for shared interrupt devices attached in the system;
 20829                                  ;shared interrupt attachment has some problem when it issues interrupt
 20830                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 20831                                  ;no further interrupts on that level will be presented until a global rearm
 20832                                  ;is issued. by the request of the system architecture group, msbio will
 20833                                  ;issue a global rearm after every device driver is loaded.
 20834                                  ;to issue a global rearm:	;for pc1,xt,palace
 20835                                  ;
 20836                                  ;			  out 02f2h,xx  ; interrupt level 2
 20837                                  ;			  out 02f3h,xx  ; interrupt level 3
 20838                                  ;			  out 02f4h,xx  ; interrupt level 4
 20839                                  ;			  out 02f5h,xx  ; interrupt level 5
 20840                                  ;			  out 02f6h,xx  ; interrupt level 6
 20841                                  ;			  out 02f7h,xx  ; interrupt level 7
 20842                                  ;
 20843                                  ;	for pc at,in addition to the above commands,
 20844                                  ;	need to handle the secondary interrupt handler
 20845                                  ;
 20846                                  ;			  out 06f2h,xx  ; interrupt level 10
 20847                                  ;			  out 06f3h,xx  ; interrupt level 11
 20848                                  ;			  out 06f4h,xx  ; interrupt level 12
 20849                                  ;			  out 06f6h,xx  ; interrupt level 14
 20850                                  ;			  out 06f7h,xx  ; interrupt level 15
 20851                                  ;
 20852                                  ;	for round-up machine
 20853                                  ;
 20854                                  ;			  none.
 20855                                  
 20856                                  ; where xx stands for any value.
 20857                                  ;
 20858                                  ; for your information,after naples level machine,the system service bios
 20859                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 20860                                  
 20861                                  	; 24/10/2022
 20862                                  
 20863 00000FFF 50                      	push	ax
 20864 00001000 53                      	push	bx
 20865 00001001 52                      	push	dx
 20866 00001002 06                      	push	es
 20867                                  
 20868 00001003 B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 20869 00001005 BAF202                  	mov	dx,2F2h 		;get starting address
 20870 00001008 EE                      	out	dx,al			; out 02f2h,0ffh
 20871 00001009 42                      	inc	dx
 20872 0000100A EE                      	out	dx,al			; out 02f3h,0ffh
 20873 0000100B 42                      	inc	dx
 20874 0000100C EE                      	out	dx,al			; out 02f4h,0ffh
 20875 0000100D 42                      	inc	dx
 20876 0000100E EE                      	out	dx,al			; out 02f5h,0ffh
 20877 0000100F 42                      	inc	dx
 20878 00001010 EE                      	out	dx,al			; out 02f6h,0ffh
 20879 00001011 42                      	inc	dx
 20880 00001012 EE                      	out	dx,al			; out 02f7h,0ffh
 20881                                  
 20882                                  ;sb secondary global rearm
 20883                                  
 20884 00001013 B800F0                  	mov	ax,0F000h		;get machine type
 20885 00001016 8EC0                    	mov	es,ax
 20886 00001018 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 20887 0000101E 740D                    	je	short startrearm	; *if at no need to check
 20888                                  
 20889 00001020 B4C0                    	mov	ah,0C0h 		;get system configuration
 20890 00001022 CD15                    	int	15h			; *
 20891 00001024 7216                    	jc	short finishrearm	; *jmp if old rom
 20892                                  
 20893                                  ; test feature byte for secondary interrupt controller
 20894                                  
 20895 00001026 26F6470540              	test	byte [es:bx+5],40h
 20896                                  	; 24/10/2022
 20897                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 20898 0000102B 740F                    	je	short finishrearm	;jmp if it is there
 20899                                  
 20900                                  startrearm:
 20901 0000102D B0FF                    	mov	al,0FFh 		;write any pattern to port
 20902 0000102F BAF206                  	mov	dx,6F2h 		;get starting address
 20903 00001032 EE                      	out	dx,al			;out 06f2h,0ffh
 20904 00001033 42                      	inc	dx			;bump address
 20905 00001034 EE                      	out	dx,al			;out 06f3h,0ffh
 20906 00001035 42                      	inc	dx			;bump address
 20907 00001036 EE                      	out	dx,al			;out 06f4h,0ffh
 20908 00001037 42                      	inc	dx			;bump address
 20909 00001038 42                      	inc	dx			;bump address
 20910 00001039 EE                      	out	dx,al			;out 06f6h,0ffh
 20911 0000103A 42                      	inc	dx			;bump address
 20912 0000103B EE                      	out	dx,al			;out 06f7h,0ffh
 20913                                  
 20914                                  finishrearm:
 20915 0000103C 07                      	pop	es
 20916 0000103D 5A                      	pop	dx
 20917 0000103E 5B                      	pop	bx
 20918 0000103F 58                      	pop	ax
 20919                                  
 20920                                  ;    global rearm end *******************
 20921                                  
 20922                                  ; ----------------------------------------------------------------------
 20923                                  ; allocate sysinit_base for install= command
 20924                                  ; ----------------------------------------------------------------------
 20925                                  ; sysinit_base allocation.
 20926                                  ;   check if endfile has been called to handle install= command.
 20927                                  
 20928                                  set_sysinit_base:
 20929                                  
 20930                                  ; ----------------------------------------------------------------------
 20931                                  ;sysinit_base will be established in the secure area of
 20932                                  ;lower memory when it handles the first install= command.
 20933                                  ;sysinit_base is the place where the actual exec function will be called and
 20934                                  ;will check sysinit module in high memory if it is damaged by the application
 20935                                  ;program.  if sysinit module has been broken,then "memory error..." message
 20936                                  ;is displayed by sysinit_base.
 20937                                  ; ----------------------------------------------------------------------
 20938                                  
 20939                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 20940                                  	; (SYSINIT:1028h)
 20941                                  
 20942                                  	; 11/12/2022
 20943                                  	; ds = cs
 20944 00001040 50                      	push	ax			; set devmark for mem command
 20945 00001041 A1[6203]                	mov	ax,[memhi]
 20946 00001044 2B06[6603]              	sub	ax,[area]
 20947 00001048 A3[5E03]                	mov	[impossible_owner_size],ax ; remember the size in case.
 20948                                  	;mov	al,devmark_inst ; 'T'
 20949 0000104B B054                    	mov	al,'T'
 20950 0000104D E86904                  	call	setdevmark
 20951 00001050 58                      	pop	ax
 20952                                  
 20953 00001051 8B3E[6203]              	mov	di,[memhi]
 20954 00001055 8EC7                    	mov	es,di
 20955 00001057 893E[D202]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 20956 0000105B 31FF                    	xor	di,di
 20957 0000105D 893E[D002]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 20958 00001061 BE[7411]                	mov	si,sysinit_base		; ds:si -> source code to be relocated.
 20959 00001064 B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 20960                                  	; 24/10/2022 
 20961                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 20962 00001067 010E[6003]              	add	[memlo],cx
 20963                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 20964                                  	; 11/12/2022
 20965                                  	; ds = cs
 20966                                  	;or	byte [cs:setdevmarkflag],2
 20967 0000106B 800E[E214]02            	or	byte [setdevmarkflag],2
 20968                                  	;or	byte [setdevmarkflag],for_devmark
 20969 00001070 E89232                  	call	round			; check mem error. also,readjust memhi for the next use.
 20970 00001073 F3A4                    	rep	movsb			; reallocate it.
 20971                                  
 20972 00001075 C706[D402][5B11]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 20973 0000107B 8C0E[D602]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 20974                                  	;or	word [install_flag],has_installed ; set the flag.
 20975                                  	;or	byte [install_flag],has_installed ; 2
 20976                                  	; 11/12/2022
 20977 0000107F 800E[CC02]02            	or	byte [install_flag],2
 20978                                  	; 24/10/2022
 20979                                  	;or	word [install_flag],2	
 20980                                  
 20981                                  ; ----------------------------------------------------------------------
 20982                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 20983                                  ; the top of the memory will be allocated for sysinit and config.sys if
 20984                                  ; have_install_cmd.
 20985                                  ; ----------------------------------------------------------------------
 20986                                  
 20987 00001084 E87E32                  	call	round
 20988 00001087 8B1E[6203]              	mov	bx,[memhi]
 20989 0000108B A1[6603]                	mov	ax,[area]
 20990 0000108E A3[5C03]                	mov	[old_area],ax		; save [area]
 20991 00001091 8EC0                    	mov	es,ax			;calc what we needed
 20992 00001093 29C3                    	sub	bx,ax
 20993                                  	; 24/10/2022
 20994 00001095 B44A                    	mov	ah,4Ah ; SETBLOCK
 20995 00001097 CD21                    	int	21h			;give the rest back
 20996                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20997                                  		; ES = segment address of block to change
 20998                                  		; BX = new size in paragraphs
 20999 00001099 06                      	push	es
 21000 0000109A 8CC0                    	mov	ax,es
 21001 0000109C 48                      	dec	ax
 21002 0000109D 8EC0                    	mov	es,ax			;point to arena
 21003                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 21004                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 21005                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 21006                                  	; 24/10/2022
 21007 0000109F 26C70601000800          	mov	word [es:1],8		;set impossible owner
 21008 000010A6 26C70608005344          	mov	word [es:8],'SD'	; System Data
 21009 000010AD 07                      	pop	es
 21010                                  
 21011 000010AE BBFFFF                  	mov	bx,0FFFFh
 21012 000010B1 B448                    	mov	ah,48h ; ALLOC
 21013 000010B3 CD21                    	int	21h
 21014 000010B5 B448                    	mov	ah,48h ; ALLOC
 21015 000010B7 CD21                    	int	21h			; allocate the rest of the memory
 21016                                  		; DOS - 2+ - ALLOCATE MEMORY
 21017                                  		; BX = number of 16-byte paragraphs desired
 21018 000010B9 A3[6203]                	mov	[memhi],ax		; start of the allocated memory
 21019 000010BC C706[6003]0000          	mov	word [memlo],0		;  to be used next.
 21020                                  
 21021                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 21022                                  ;;;; allocated.
 21023                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 21024                                  ;;;; this time) to the top-of-the memory),here we are going to
 21025                                  ;;;; 1). "setblock" from memhi to confbot.
 21026                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 21027                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 21028                                  
 21029                                  ;memory allocation for sysinit,confbot module.
 21030                                  
 21031 000010C2 8EC0                    	mov	es,ax
 21032                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 21033                                  	; (SYSINIT:11DFh)
 21034 000010C4 8B1E[A102]              	mov	bx,[CONFBOT]
 21035                                  	; 24/10/2022
 21036                                  	;mov	bx,[top_of_cdss] ; mov bx,[confbot]
 21037 000010C8 29C3                    	sub	bx,ax			; confbot - memhi
 21038 000010CA 4B                      	dec	bx			; make a room for the memory block id.
 21039 000010CB 4B                      	dec	bx			; make sure!!!.
 21040 000010CC B44A                    	mov	ah,4Ah ; SETBLOCK
 21041 000010CE CD21                    	int	21h			; this will free (confbot to top of memory)
 21042                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 21043                                  		; ES = segment address of block to change
 21044                                  		; BX = new size in paragraphs
 21045 000010D0 BBFFFF                  	mov	bx,0FFFFh
 21046 000010D3 B448                    	mov	ah,48h ; ALLOC
 21047 000010D5 CD21                    	int	21h
 21048 000010D7 B448                    	mov	ah,48h ; ALLOC
 21049 000010D9 CD21                    	int	21h			; allocate (confbot to top of memory)
 21050                                  		; DOS - 2+ - ALLOCATE MEMORY
 21051                                  		; BX = number of 16-byte paragraphs desired
 21052 000010DB A3[6603]                	mov	[area],ax		; save allocated memory segment.
 21053                                  					; need this to free this area for command.com.
 21054 000010DE 8E06[6203]              	mov	es,[memhi]
 21055 000010E2 B449                    	mov	ah,49h			; free allocated memory.
 21056 000010E4 CD21                    	int	21h			; free (memhi to confbot(=area))
 21057                                  		; DOS - 2+ - FREE MEMORY
 21058                                  		; ES = segment address of area to be freed
 21059                                  endfile_ret:
 21060 000010E6 C3                      	retn
 21061                                  
 21062                                  ; End of "EndFile" DOS structure configuration.
 21063                                  
 21064                                  ; ----------------------------------------------------------------------
 21065                                  ; 26/03/2019 - Retro DOS v4.0
 21066                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 21067                                  ; ----------------------------------------------------------------------
 21068                                  ; Do_Install_Exec
 21069                                  ;
 21070                                  ; This procedure is used to EXEC a program being loaded via the 
 21071                                  ; "install=" mechanism in config.sys. It does this by setting up
 21072                                  ; the parameters, and then jumping to sysinit_base, which has been
 21073                                  ; setup in low memory. When complete, sysinit_base will jump back
 21074                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 21075                                  ; program).
 21076                                  
 21077                                  ;SYSINIT:10CFh:
 21078                                  
 21079                                  do_install_exec:			; now,handles install= command.
 21080                                  
 21081 000010E7 56                      	push	si			; save si for config.sys again.
 21082                                  
 21083                                  ; we are going to call load/exec function.
 21084                                  ; set es:bx to the parameter block here;;;;;;;
 21085                                  ; set ds:dx to the asciiz string. remember that we already has 0
 21086                                  ; after the filename. so parameter starts after that. if next
 21087                                  ; character is a line feed (i.e. 10),then assume that the 0
 21088                                  ; we already encountered used to be a carrage return. in this
 21089                                  ; case,let's set the length to 0 which will be followed by
 21090                                  ; carridge return.
 21091                                  
 21092                                  ; es:si -> command line in config.sys. points to the first non blank
 21093                                  ;character after =.
 21094                                  
 21095 000010E8 06                      	push	es
 21096 000010E9 1E                      	push	ds
 21097 000010EA 07                      	pop	es
 21098 000010EB 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 21099 000010EC 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 21100                                  
 21101 000010EE 31C9                    	xor	cx,cx
 21102 000010F0 FC                      	cld
 21103 000010F1 2EC606[EF02]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 21104 000010F7 BF[F002]                	mov	di,ldexec_parm
 21105                                  installfilename:			; skip the file name
 21106 000010FA AC                      	lodsb				; al = ds:si; si++
 21107 000010FB 3C00                    	cmp	al,0
 21108 000010FD 7402                    	je	short got_installparm
 21109 000010FF EBF9                    	jmp	short installfilename
 21110                                  got_installparm:			; copy the parameters to ldexec_parm
 21111 00001101 AC                      	lodsb
 21112 00001102 268805                  	mov	[es:di],al
 21113 00001105 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 21114 00001107 7405                    	je	short done_installparm
 21115 00001109 FEC1                    	inc	cl			; # of char. in the parm.
 21116 0000110B 47                      	inc	di
 21117 0000110C EBF3                    	jmp	short got_installparm
 21118                                  done_installparm:
 21119 0000110E 2E880E[EE02]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 21120 00001113 80F900                  	cmp	cl,0			; if no parm,then
 21121 00001116 7506                    	jne	short install_seg_set 	; let the parm area
 21122 00001118 2EC606[EF02]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 21123                                  					; starts with cr.
 21124                                  install_seg_set:
 21125 0000111E 2EC70600000000          	mov	word [cs:0],0		; make a null environment segment
 21126 00001125 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 21127                                  
 21128                                  ;---------------------------------------------------M067----------------
 21129                                  ;
 21130                                  ; 	the environment pointer is made 0. so the current environment ptr.
 21131                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 21132                                  ;
 21133                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 21134                                  ;
 21135                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 21136                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 21137                                  ; 	was fixed. 
 21138                                  ;
 21139                                  ; ----------------------------------------------------------------------
 21140                                  
 21141                                  ;;ifdef   MULTI_CONFIG
 21142                                  
 21143                                  ; If there's any environment data in "config_wrkseg", pass to app
 21144                                  
 21145                                  ; 30/12/2022 - Retro DOS v4.0 (Modified MSDOS 6.21 IO.SYS SYSINIT)
 21146                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 21147                                  ;%if 0
 21148 00001127 89C1                            mov     cx,ax
 21149 00001129 2E833E[D914]00                  cmp     word [cs:config_envlen],0
 21150 0000112F 7405                            je      short no_envdata2
 21151 00001131 2E8B0E[DB14]                    mov     cx,[cs:config_wrkseg]
 21152                                  no_envdata2:
 21153                                  ;;endif  ;MULTI_CONFIG
 21154                                  
 21155                                  ;%endif	; 24/10/2022
 21156                                  
 21157                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 21158                                  	; 24/10/2022
 21159                                  	;mov	[cs:iexec.environ],cx
 21160                                  	; 02/11/2022
 21161 00001136 2EA3[4003]              	mov	[cs:iexec.environ],ax	
 21162                                  
 21163                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 21164 0000113A 2EA3[4403]              	mov	[cs:iexec.ldexec_line+2],ax
 21165                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 21166 0000113E 2EA3[4803]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 21167                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 21168 00001142 2EA3[4C03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 21169 00001146 E86000                  	call	sum_up
 21170 00001149 26A3[D802]              	mov	[es:checksum],ax	; save the value of the sum
 21171 0000114D 31C0                    	xor	ax,ax
 21172 0000114F B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 21173 00001151 BB[4003]                	mov	bx,instexe		; es:bx -> parm block.
 21174 00001154 06                      	push	es			; save es,ds for load/exec
 21175 00001155 1E                      	push	ds			; these registers will be restored in sysinit_base.
 21176 00001156 2EFF2E[D002]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 21177                                  					; load/exec function and check sum.
 21178                                  
 21179                                  ;----------------------------------------
 21180                                  
 21181                                  ;j.k. this is the returning address from sysinit_base.
 21182                                  
 21183                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 21184                                  
 21185                                  sysinitptr:				; returning far address from sysinit_base
 21186 0000115B 5E                      	pop	si			; restore si for config.sys file.
 21187 0000115C 06                      	push	es
 21188 0000115D 1E                      	push	ds
 21189 0000115E 07                      	pop	es
 21190 0000115F 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 21191 00001160 7305                            jnc     short install_exit_ret
 21192                                  
 21193 00001162 56                      	push	si			; error in loading the file for install=.
 21194 00001163 E8EA33                  	call	badload 		; es:si-> path,filename,0.
 21195 00001166 5E                      	pop	si
 21196                                  
 21197                                  	; 24/10/2022
 21198                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 21199                                  	; 11/12/2022
 21200                                  	; ds = cs
 21201                                  
 21202                                  	; 30/12/2022 - Retro DOS v4.2
 21203                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:1283h)
 21204                                  
 21205                                  install_exit_ret:
 21206 00001167 C3                      	retn
 21207                                  
 21208                                  ; 30/12/2022 - Retro DOS v4.2
 21209                                  %if 0
 21210                                  install_exit_ret:
 21211                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 21212                                  
 21213                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 21214                                  ;SYSINIT:1142h:
 21215                                  	mov     ah,4Dh
 21216                                  	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 21217                                  	cmp     ah,3
 21218                                  	jz      short sysinitptr_retn
 21219                                  	call    error_line
 21220                                  	stc
 21221                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 21222                                  	retn		
 21223                                  
 21224                                  %endif ; 24/10/2022
 21225                                  
 21226                                  ; ----------------------------------------------------------------------
 21227                                  
 21228                                  ;**	ParaRound - Round Up length to paragraph multiple
 21229                                  ;
 21230                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 21231                                  ;	by 16 yielding a "length in paragraphs" value.
 21232                                  ;
 21233                                  ;	ENTRY	(ax) = byte length
 21234                                  ;	EXIT	(ax) = rounded up length in paragraphs
 21235                                  ;	USES	ax, flags
 21236                                  
 21237                                  ParaRound:
 21238 00001168 83C00F                  	add	ax,15
 21239 0000116B D1D8                    	rcr	ax,1
 21240 0000116D D1E8                    	shr	ax,1
 21241 0000116F D1E8                    	shr	ax,1
 21242 00001171 D1E8                    	shr	ax,1
 21243 00001173 C3                      	retn
 21244                                  
 21245                                  ; ----------------------------------------------------------------------
 21246                                  ; sysinit_base module.
 21247                                  ;
 21248                                  ; This module is relocated by the routine EndFile to a location in low
 21249                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 21250                                  ; that are being loaded by the "install=" command. After the EXEC call
 21251                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 21252                                  ; top of memory) to be sure that the EXECed program did not damage it.
 21253                                  ; If it did, then this module will print an error message and stop the
 21254                                  ; system. Otherwise, it returns control to SYSINIT.
 21255                                  ;
 21256                                  ;in: after relocation,
 21257                                  ;    ax = 4b00h - load and execute the program dos function.
 21258                                  ;    ds = confbot. segment of config.sys file image
 21259                                  ;    es = sysinitseg. segment of sysinit module itself.
 21260                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 21261                                  ;    es:bx = pointer to a parameter block for load.
 21262                                  ;    SI_end (byte) - offset value of end of sysinit module label
 21263                                  ;    bigsize (word) - # of word from confbot to SI_end.
 21264                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 21265                                  ;			word boundary moduler form.
 21266                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 21267                                  ;
 21268                                  ;note: sysinit should save necessary registers and when the control is back
 21269                                  
 21270                                  	; 24/10/2022
 21271                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 21272                                  sysinit_base:				
 21273 00001174 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 21274 00001179 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 21275 0000117E CD21                    	int	21h			; load/exec dos call.
 21276 00001180 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 21277 00001185 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 21278 0000118A 1F                      	pop	ds			; restore confbot seg
 21279 0000118B 07                      	pop	es			; restore sysinitseg
 21280 0000118C 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 21281                                  					; at this time,i don't have to worry about
 21282                                  					; that sysinit module has been broken or not.
 21283 0000118E E81800                  	call	sum_up			; otherwise,check if it is good.
 21284 00001191 263906[D802]            	cmp	[es:checksum],ax
 21285 00001196 740C                    	je	short sysinit_base_end
 21286                                  
 21287                                  ;	memory broken. show "memory allocation error" message and stall.
 21288                                  
 21289 00001198 B409                    	mov	ah,9
 21290 0000119A 0E                      	push	cs
 21291 0000119B 1F                      	pop	ds
 21292                                  	; 30/12/2022
 21293                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:12B8h)
 21294                                  	;mov	dx, 102
 21295 0000119C BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 21296                                  					; 66h (for MSDOS 6.21 SYSINIT)
 21297 0000119F CD21                    	int	21h
 21298                                  		; DOS - PRINT STRING
 21299                                  		; DS:DX -> string terminated by "$"
 21300                                  
 21301                                  	; 30/12/2022 - Retro DOS v4.2
 21302                                  stall:
 21303                                  	; 24/10/2022
 21304                                  _stall: 
 21305                                  	; 11/12/2022
 21306 000011A1 F4                      	hlt 
 21307                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21308                                  	;hlt				;use HLT to minimize energy consumption
 21309 000011A2 EBFD                            jmp	short _stall
 21310                                  
 21311                                  sysinit_base_end: 
 21312 000011A4 26FF2E[D402]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 21313                                  
 21314                                  ;-------------------------------------
 21315                                  
 21316                                  sum_up:
 21317                                  
 21318                                  ;in:   es - sysinitseg.
 21319                                  ;out:  ax - result
 21320                                  ;
 21321                                  ;remark: since this routine will only check starting from "locstack" to the end of
 21322                                  ;	 sysinit segment,the data area, and the current stack area are not
 21323                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 21324                                  ;	 gaurantee to be safe.
 21325                                  ;
 21326                                  ;first sum up confbot seg.
 21327                                  
 21328 000011A9 1E                      	push	ds
 21329                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 21330                                  	; (SYSINIT:12C6h)
 21331 000011AA 26A1[A102]              	mov	ax,[es:CONFBOT]
 21332                                  	; 24/10/2022
 21333                                  	;mov	ax,[es:top_of_cdss]
 21334 000011AE 8ED8                    	mov	ds,ax
 21335 000011B0 31F6                    	xor	si,si
 21336 000011B2 31C0                    	xor	ax,ax
 21337 000011B4 268B0E[CE02]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 21338                                  					; whole test better fail.
 21339 000011B9 D1E9                    	shr	cx,1			; make it a word count
 21340 000011BB 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 21341                                  sum1:
 21342 000011BD 0304                    	add	ax,[si]
 21343 000011BF 46                      	inc	si
 21344 000011C0 46                      	inc	si
 21345 000011C1 E2FA                    	loop	sum1
 21346                                  ;now,sum up sysinit module.
 21347                                  sum_sys_code:
 21348                                  	; 24/10/2022
 21349 000011C3 BEC211                  	mov	si,locstack ; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 21350                                  			    ; 532h (MSDOS 6.21 IO.SYS, SYSINIT)
 21351                                  				        ; starting after the stack.  M069
 21352                                  					;  this does not cover the possible stack code!!!
 21353                                  	;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 21354                                  	; 02/11/2022
 21355                                  	;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 21356                                  	; 30/12/2022  
 21357 000011C6 B9[104E]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 21358 000011C9 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 21359 000011CB D1E9                    	shr	cx,1
 21360                                  sum2:
 21361 000011CD 260304                  	add	ax,[es:si]
 21362 000011D0 46                      	inc	si
 21363 000011D1 46                      	inc	si
 21364 000011D2 E2F9                    	loop	sum2
 21365 000011D4 1F                      	pop	ds
 21366 000011D5 C3                      	retn
 21367                                  
 21368                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21369                                  ; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 21370                                  ; (SYSINIT:12F2h)
 21371                                  
 21372                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 21373                                  ;SYSINIT:11BDh:			    ; = 62 (MSDOS 6.21 IO.SYS, SYSINIT:1290h) 	
 21374 000011D6 0000                    	dw	0
 21375                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 21376                                  ;SYSINIT:11BFh:			    ; = 64 (MSDOS 6.21 IO.SYS, SYSINIT:1292h)
 21377 000011D8 0000                    	dw	0	
 21378                                  
 21379                                  mem_alloc_err_msgx:
 21380                                  
 21381                                         ;include msbio.cl4		; memory allocation error message
 21382                                  
 21383                                  ;SYSINIT:12F6:  ; MSDOS 6.21 IO.SYS SYSINIT:12F6h
 21384 000011DA 0D0A                    	db	0Dh,0Ah
 21385 000011DC 4D656D6F727920616C-     	db 	'Memory allocation error $'
 21385 000011E5 6C6F636174696F6E20-
 21385 000011EE 6572726F722024     
 21386                                  
 21387                                  end_sysinit_base: ; label byte
 21388                                  	; 24/10/2022
 21389                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 21390                                  
 21391                                  ; ----------------------------------------------------------------------
 21392                                  ; Set_Buffer
 21393                                  ;
 21394                                  ;function: set buffers in the real memory.				  
 21395                                  ;	   lastly set the memhi,memlo for the next available free address.
 21396                                  ;
 21397                                  ;input:    ds:bx -> buffinfo.
 21398                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 21399                                  ;	   singlebuffersize = buffer header size + sector size		  
 21400                                  ;
 21401                                  ;output:   buffers Queue established.	       				   
 21402                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 21403                                  ; ----------------------------------------------------------------------
 21404                                  
 21405                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21406                                  	; (SYSINIT:11DCh)
 21407                                  
 21408                                  set_buffer:
 21409 000011F5 30D2                    	xor	dl,dl				; assume buffers not in HMA
 21410 000011F7 E85500                  	call	GetBufferAddr
 21411 000011FA 7402                    	jz	short set_buff_1
 21412 000011FC B201                    	mov	dl,1				; buffers in HMA
 21413                                  set_buff_1:
 21414                                  	; 25/10/2022
 21415                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 21416 000011FE 893F                    	mov	[bx],di
 21417                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 21418 00001200 8C4702                  	mov	[bx+2],es
 21419                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 21420 00001203 C747040000              	mov	word [bx+4],0
 21421                                  
 21422 00001208 89F8                    	mov	ax,di
 21423 0000120A 2E8B0E[9702]            	mov	cx,[cs:buffers]
 21424 0000120F 57                      	push	di				; remember first buffer
 21425                                  
 21426                                  ;	for each buffer
 21427                                  
 21428                                  nxt_buff:
 21429 00001210 E86300                  	call	set_buffer_info 		; set buf_link,buf_id...
 21430 00001213 89C7                    	mov	di,ax
 21431 00001215 E2F9                    	loop	nxt_buff
 21432                                  
 21433 00001217 2E2B3E[9B02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 21434                                  
 21435 0000121C 59                      	pop	cx				; get first buffer
 21436                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 21437 0000121D 26890D                  	mov	[es:di],cx
 21438 00001220 87CF                    	xchg	cx,di
 21439                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 21440                                  	; 25/10/2022
 21441 00001222 26894D02                	mov	[es:di+2],cx
 21442                                  
 21443 00001226 08D2                    	or	dl,dl				; In HMa ?
 21444 00001228 7417                    	jz	short set_buff_2		; no
 21445                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 21446 0000122A C6470C01                	mov	byte [bx+12],1
 21447 0000122E 2EA1[6203]              	mov	ax,[cs:memhi]			; seg of scratch buff
 21448                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of scratch buff is 0
 21449 00001232 C7470D0000              	mov	word [bx+13],0
 21450                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 21451 00001237 89470F                  	mov	word [bx+15],ax
 21452 0000123A 2EA1[9B02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 21453                                  	;sub	ax,bufinsiz ; 20		; buffer head not required
 21454 0000123E 83E814                  	sub	ax,20
 21455                                  set_buff_2:
 21456 00001241 2E0106[6003]            	add	[cs:memlo],ax
 21457                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 21458 00001246 2E800E[E214]02          	or	byte [cs:setdevmarkflag],2
 21459                                  	;call	round
 21460                                  	;retn
 21461                                  	; 12/12/2022
 21462 0000124C E9B630                  	jmp	round
 21463                                  
 21464                                  ; ----------------------------------------------------------------------
 21465                                  ; procedure : GetBufferAddr
 21466                                  ;
 21467                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 21468                                  ;
 21469                                  ; returns in es:di the buffer adress
 21470                                  ; returns NZ if allocated in HMA
 21471                                  ; ----------------------------------------------------------------------
 21472                                  
 21473                                  	; 25/10/2022 
 21474                                  GetBufferAddr:
 21475 0000124F 53                      	push	bx
 21476 00001250 52                      	push	dx
 21477 00001251 2EA1[9B02]              	mov	ax, [cs:singlebuffersize]
 21478 00001255 2EF726[9702]            	mul	word [cs:buffers]
 21479                                  	;add	ax,0Fh
 21480 0000125A 83C00F                  	add	ax,15 
 21481                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21482                                  	;and	ax,~15	; 0FFF0h	; para round
 21483                                  	; 12/12/2022
 21484 0000125D 24F0                    	and	al,~15	; 0F0h
 21485 0000125F 89C3                    	mov	bx,ax
 21486 00001261 B8024A                  	mov	ax,4A02h
 21487                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 21488 00001264 CD2F                    	int	2Fh
 21489 00001266 83FFFF                  	cmp	di,0FFFFh
 21490 00001269 7508                    	jne	short got_hma
 21491 0000126B BF0000                  	mov	di,0			; dont xor di,di Z flag needed
 21492                                  	;zf=1
 21493                                  	;xor	di,di	; 25/10/2022
 21494                                  	;zf=1
 21495 0000126E 2E8E06[6203]            	mov	es,[cs:memhi]
 21496                                  got_hma:
 21497 00001273 5A                      	pop	dx
 21498 00001274 5B                      	pop	bx
 21499 00001275 C3                      	retn
 21500                                  
 21501                                  ; ----------------------------------------------------------------------
 21502                                  
 21503                                  set_buffer_info:
 21504                                  
 21505                                  ;function: set buf_link,buf_id,buf_sector
 21506                                  ;
 21507                                  ;in: es:di -> buffer header to be set.
 21508                                  ;    ax = di
 21509                                  ;
 21510                                  ;out:
 21511                                  ;    above entries set.
 21512                                  
 21513                                  	; 25/10/2022 
 21514 00001276 2EFF36[BB02]            	push	word [cs:buf_prev_off]
 21515                                  	;pop	word [es:di+buffinfo.buf_prev]
 21516 0000127B 268F4502                	pop	word [es:di+2]
 21517 0000127F 2EA3[BB02]              	mov	[cs:buf_prev_off],ax
 21518 00001283 2E0306[9B02]            	add	ax,[cs:singlebuffersize]	; adjust ax
 21519                                  	;mov	[es:di+buffinfo.buf_next],ax
 21520 00001288 268905                  	mov	[es:di],ax
 21521                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 21522 0000128B 26C74504FF00            	mov	word [es:di+4],00FFh
 21523                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 21524 00001291 26C745060000            	mov	word [es:di+6],0
 21525                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 21526 00001297 26C745080000            	mov	word [es:di+8],0
 21527 0000129D C3                      	retn
 21528                                  
 21529                                  ; ======================================================================
 21530                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 21531                                  ; ----------------------------------------------------------------------
 21532                                  ; 27/03/2019 - Retro DOS v4.0
 21533                                  
 21534                                  ; ----------------------------------------------------------------------
 21535                                  ; ibmstack initialization routine.
 21536                                  ;
 21537                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 21538                                  ;	has been modified. this initialization routine also has to
 21539                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 21540                                  ;	should be set to signal that this interrupt handler is the
 21541                                  ;	first handler hooked to this interrupt vector.
 21542                                  ;	we determine this by looking at the instruction pointed by
 21543                                  ;	this vector. if it is iret, then this handler should be the
 21544                                  ;	first one. in our case, only the interrupt vector 77h is the
 21545                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 21546                                  ;
 21547                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 21548                                  ;	some design changes are needed to the above interrupt sharing
 21549                                  ;	method. the above sharing scheme assumes that 1). interrupt
 21550                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 21551                                  ;	interrupts would only be generated on levels 7 and 15.
 21552                                  ;	these assumptions are not true any more. we have to use the firstflag
 21553                                  ;	for every level of interrupt. we will set the firstflag on the following
 21554                                  ;	conditions:
 21555                                  ;
 21556                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 21557                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 21558                                  ;	 c. else if cs:ip points to an iret, then "first"
 21559                                  ;	 d. else if cs:ip points to dummy, then "first"
 21560                                  ;
 21561                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 21562                                  ;	be equal to the value at f000:ff01. this location is the initial value
 21563                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 21564                                  ;	the bioses for all of the machines.
 21565                                  ;
 21566                                  ;	system design group requests bios to handle the phantom interrupts.
 21567                                  ;
 21568                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 21569                                  ;	produced by the bogus adapter card even without interrupt request is
 21570                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 21571                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 21572                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 21573                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 21574                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 21575                                  ;	interrupt line.
 21576                                  ;
 21577                                  ;	to handle those "phantom" interrupts, the main stack code will check
 21578                                  ;	the own firstflag, and if it is not "first" (which means the forward
 21579                                  ;	pointer points to the legal shared interrupt handler), then pass the
 21580                                  ;	control. if it is the first, then the following action should be
 21581                                  ;	taken. we don't have to implement stack logic in this case.
 21582                                  ;
 21583                                  ;	to implement this logic, we rather choose a simple method.
 21584                                  ;	if ont of the above "firstflag" conditions is met, we are not
 21585                                  ;	going to hook this interrupt vector. the reason is if the original
 21586                                  ;	vector points to "iret" and do nothing, we don't need
 21587                                  ;	to implement the stack logic for it. this will simplify implementation
 21588                                  ;	while maintaining compatibility with the old version of dos.
 21589                                  ;	this implies that in the main stack code, there might be a stack code
 21590                                  ;	that will never be used, a dead code.
 21591                                  ;
 21592                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 21593                                  
 21594                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21595                                  	; (SYSINIT:1287h)
 21596                                  
 21597                                  	; 14/12/2022
 21598                                  stackinit:
 21599 0000129E 50                      	push	ax
 21600 0000129F 1E                      	push	ds
 21601 000012A0 06                      	push	es
 21602 000012A1 53                      	push	bx
 21603 000012A2 51                      	push	cx
 21604 000012A3 52                      	push	dx
 21605 000012A4 57                      	push	di
 21606 000012A5 56                      	push	si
 21607 000012A6 55                      	push	bp
 21608                                  
 21609                                  ;currently es -> stack code area
 21610                                  
 21611                                  	; 12/12/2022
 21612                                  	; ds = cs
 21613 000012A7 A1[8A02]                	mov	ax,[stack_count]
 21614 000012AA 89C1                    	mov	cx,ax  ; *!*!*  
 21615                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21616                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 21617                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 21618 000012AC 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 21619                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 21620 000012B0 A1[8C02]                	mov	ax,[stack_size]	 ; !!		;in cs
 21621 000012B3 26A3[0600]              	mov	[es:stacksize],ax
 21622                                  	; 12/12/2022
 21623 000012B7 A1[8E02]                	mov	ax,[stack_addr]			; offset
 21624                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21625                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21626                                  	;mov	ax,[cs:stack_addr]  ; !!
 21627 000012BA 26A3[0800]              	mov	[es:stacks],ax
 21628                                  	; 12/12/2022
 21629 000012BE 89C5                    	mov	bp,ax ; *!*
 21630 000012C0 A1[9002]                	mov	ax,[stack_addr+2]
 21631                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21632                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21633                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 21634 000012C3 26A3[0A00]              	mov	[es:stacks+2],ax
 21635                                  
 21636                                  ; initialize the data fields with the parameters
 21637                                  
 21638                                  ; "firstentry" will always be at stacks
 21639                                  
 21640                                  	;mov	bp,[es:stacks]			; get offset of stack
 21641                                  	; 12/12/2022
 21642                                  	; bp = [es:stacks] ; *!*
 21643 000012C7 26892E[0C00]            	mov	[es:firstentry],bp
 21644                                  
 21645                                  ; the stacks will always immediately follow the table entries
 21646                                  
 21647 000012CC B80800                  	mov	ax,entrysize ; 8
 21648                                  	;mov	cx,[es:stackcount]
 21649                                  	; 12/12/2022
 21650                                  	; cx = [es:stackcount] ; *!*!*
 21651 000012CF F7E1                    	mul	cx
 21652 000012D1 01E8                    	add	ax,bp
 21653 000012D3 26A3[0400]              	mov	[es:stackat],ax
 21654 000012D7 89C3                    	mov	bx,ax
 21655 000012D9 83EB02                  	sub	bx,2
 21656                                  
 21657                                  ; zero the entire stack area to start with
 21658                                  
 21659 000012DC 268B3E[0400]            	mov	di,[es:stackat]
 21660 000012E1 26A1[0600]              	mov	ax,[es:stacksize]
 21661 000012E5 F7E1                    	mul	cx
 21662 000012E7 89C1                    	mov	cx,ax
 21663 000012E9 31C0                    	xor	ax,ax
 21664 000012EB 06                      	push	es
 21665 000012EC 1F                      	pop	ds				;ds = relocated stack code seg.
 21666                                  
 21667                                  ;now, ds -> stack code area
 21668                                  
 21669 000012ED 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 21670 000012F1 FC                      	cld
 21671 000012F2 F3AA                    	rep	stosb
 21672                                  
 21673 000012F4 8B0E[0200]              	mov	cx,[stackcount]
 21674                                  
 21675                                  ; loop for "count" times, building a table entry
 21676                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 21677                                  ;  cx = number of entries
 21678                                  ;  es:bp => base of stacks - 2
 21679                                  ;  es:bx => first table entry
 21680                                  
 21681                                  buildloop:
 21682                                  	; 11/12/2022
 21683                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 21684                                  	; 25/10/2022
 21685                                  	;mov	byte [es:bp],free
 21686                                  	; 06/07/2023
 21687 000012F8 26884600                	mov	[es:bp],al ; 0 ; free
 21688 000012FC 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 21689                                  	;mov	[es:bp+1],al
 21690 00001300 26894602                	mov	[es:bp+savedsp],ax
 21691                                  	;mov	[es:bp2],ax
 21692 00001304 26894604                	mov	[es:bp+savedss],ax
 21693                                  	;mov	[es:bp+4],ax
 21694 00001308 031E[0600]              	add	bx,[stacksize]
 21695 0000130C 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 21696                                  	;mov	[es:bp+6],bx
 21697 00001310 26892F                  	mov	[es:bx],bp
 21698 00001313 83C508                  	add	bp,entrysize ; 8
 21699                                  
 21700 00001316 E2E0                    	loop	buildloop
 21701                                  
 21702 00001318 83ED08                  	sub	bp,entrysize ; 8
 21703 0000131B 892E[0E00]              	mov	[lastentry],bp
 21704 0000131F 892E[1000]              	mov	[nextentry],bp
 21705                                  
 21706 00001323 1E                      	push	ds
 21707 00001324 B800F0                  	mov	ax,0F000h		;look at the model byte
 21708 00001327 8ED8                    	mov	ds,ax
 21709 00001329 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 21710 0000132E 1F                      	pop	ds
 21711 0000132F 7504                    	jne	short skip_disablenmis
 21712                                  
 21713 00001331 B007                    	mov	al,07h			; disable convertible nmis
 21714 00001333 E672                    	out	72h,al
 21715                                  
 21716                                  skip_disablenmis:
 21717 00001335 31C0                    	xor	ax,ax
 21718 00001337 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 21719                                  					;ds - relocated stack code segment
 21720 00001339 FA                      	cli
 21721                                  
 21722                                  	;irp	aa,<02,08,09,70>
 21723                                  	;
 21724                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21725                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 21726                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 21727                                  	;mov	dx,offset int&aa	;pass where new handler is
 21728                                  	;call	new_init_loop		;adjust the vector to new handler,
 21729                                  	;				;saving pointer to original owner
 21730                                  	;endm
 21731                                  
 21732                                  stkinit_02:
 21733 0000133A BE0800                  	mov	si,02h*4 ; 8
 21734 0000133D BF[3A06]                	mov	di,INT19OLD02
 21735 00001340 BB[1200]                	mov	bx,old02
 21736 00001343 BA[1600]                	mov	dx,int02
 21737 00001346 E84901                  	call	new_init_loop
 21738                                  stkinit_08:
 21739 00001349 BE2000                  	mov	si,08h*4 ; 32
 21740 0000134C BF[3F06]                	mov	di,INT19OLD08
 21741 0000134F BB[3800]                	mov	bx,old08
 21742 00001352 BA[3C00]                	mov	dx,int08
 21743 00001355 E83A01                  	call	new_init_loop
 21744                                  stkinit_09:
 21745 00001358 BE2400                  	mov	si,09h*4 ; 36
 21746 0000135B BF[4406]                	mov	di,INT19OLD09
 21747 0000135E BB[4100]                	mov	bx,old09
 21748 00001361 BA[4500]                	mov	dx,int09
 21749 00001364 E82B01                  	call	new_init_loop
 21750                                  stkinit_70:
 21751 00001367 BEC001                  	mov	si,70h*4 ; 448
 21752 0000136A BF[6206]                	mov	di,INT19OLD70
 21753 0000136D BB[4E00]                	mov	bx,old70
 21754 00001370 BA[5200]                	mov	dx,int70
 21755 00001373 E81C01                  	call	new_init_loop
 21756                                  
 21757                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 21758                                  	;
 21759                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21760                                  	;push	ds			;save relocated stack code segment
 21761                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 21762                                  	;push	ds
 21763                                  	;pop	dx			;dx = segment value
 21764                                  	;	
 21765                                  	;cmp	dx,0
 21766                                  	;jz	int&aa&_first
 21767                                  	;
 21768                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 21769                                  	;jz	int&aa&_first
 21770                                  	;
 21771                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 21772                                  	;jz	int&aa&_not_first
 21773                                  	;
 21774                                  	;cmp	dx,0f000h		;rom bios segment
 21775                                  	;jnz	int&aa&_not_first
 21776                                  	;
 21777                                  	;push	es
 21778                                  	;push	dx
 21779                                  	;mov	dx,0f000h
 21780                                  	;mov	es,dx
 21781                                  	;cmp	bx,word ptr es:0ff01h
 21782                                         	;pop	dx
 21783                                  	;pop	es
 21784                                  	;jz	int&aa&_first
 21785                                  	;
 21786                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 21787                                  	;pop	ds
 21788                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 21789                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 21790                                  	;mov	dx, offset int&aa	;pass where new handler is
 21791                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 21792                                  	;				;pointer to original owner.
 21793                                  	;jmp	short int&aa&_end
 21794                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 21795                                  	;pop	ds
 21796                                  ;int&aa&_end:
 21797                                  	;
 21798                                  	;endm
 21799                                  
 21800                                  stkinit_0A:
 21801 00001376 BE2800                  	mov	si,0Ah*4 ; 40
 21802                                  	
 21803                                  ; 14/12/2022
 21804                                  %if 0	
 21805                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21806                                  	push	ds
 21807                                  	
 21808                                  	lds	bx,[es:si]
 21809                                  	push	ds
 21810                                  	pop	dx
 21811                                  		
 21812                                  	cmp	dx,0
 21813                                  	je	short int_0A_first
 21814                                  	
 21815                                  	cmp	byte [bx],0CFh
 21816                                  	je	short int_0A_first
 21817                                  	
 21818                                  	cmp	word [bx+6],424Bh
 21819                                  	je	short int_0A_not_first
 21820                                  	
 21821                                  	cmp	dx,0F000h
 21822                                  	jne	short int_0A_not_first
 21823                                  	
 21824                                  	push	es
 21825                                  	push	dx
 21826                                  	mov	dx,0F000h
 21827                                  	mov	es,dx
 21828                                  	cmp	bx,[es:0FF01h]
 21829                                         	pop	dx
 21830                                  	pop	es
 21831                                  	je	short int_0A_first
 21832                                  %Endif
 21833                                  
 21834                                  	; 14/12/2022
 21835                                  	; 25/10/2022
 21836 00001379 E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21837 0000137C 730C                    	jnc	short int_0A_first
 21838                                  	
 21839                                  int_0A_not_first:
 21840                                  	; 14/12/2022
 21841                                  	; 25/10/2022
 21842                                  	;pop	ds
 21843 0000137E BF[4906]                	mov	di,INT19OLD0A
 21844 00001381 BB[5900]                	mov	bx,old0A
 21845 00001384 BA[5700]                	mov	dx,int0A
 21846 00001387 E80801                  	call	new_init_loop
 21847                                  	
 21848                                  	; 14/12/2022	
 21849                                  	;jmp	short int_0A_end
 21850                                  ;int_0A_first:
 21851                                  	; 25/10/2022
 21852                                  	;pop	ds
 21853                                  
 21854                                  	; 14/12/2022
 21855                                  int_0A_first:
 21856                                  int_0A_end:
 21857                                  
 21858                                  stkinit_0B:
 21859 0000138A BE2C00                  	mov	si,0Bh*4 ; 44
 21860                                  	
 21861                                  	; 14/12/2022
 21862                                  	; 25/10/2022
 21863 0000138D E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21864 00001390 730C                    	jnc	short int_0B_end ; int_0B_first
 21865                                  
 21866                                  ; 14/12/2022
 21867                                  %if 0	
 21868                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21869                                  	push	ds
 21870                                  	lds	bx,[es:si]
 21871                                  	push	ds
 21872                                  	pop	dx
 21873                                  		
 21874                                  	cmp	dx,0
 21875                                  	je	short int_0B_first
 21876                                  
 21877                                  	cmp	byte [bx],0CFh
 21878                                  	je	short int_0B_first
 21879                                  	
 21880                                  	cmp	word [bx+6],424Bh
 21881                                  	je	short int_0B_not_first
 21882                                  	
 21883                                  	cmp	dx,0F000h
 21884                                  	jne	short int_0B_not_first
 21885                                  
 21886                                  	push	es
 21887                                  	push	dx
 21888                                  	mov	dx,0F000h
 21889                                  	mov	es,dx
 21890                                  	cmp	bx,[es:0FF01h]
 21891                                  	pop	dx
 21892                                  	pop	es
 21893                                  	je	short int_0B_first
 21894                                  %endif
 21895                                  
 21896                                  int_0B_not_first:
 21897                                  	; 14/12/2022
 21898                                  	; 25/10/2022
 21899                                  	;pop	ds
 21900 00001392 BF[4E06]                	mov	di,INT19OLD0B
 21901 00001395 BB[7100]                	mov	bx,old0B
 21902 00001398 BA[6F00]                	mov	dx,int0B
 21903 0000139B E8F400                  	call	new_init_loop
 21904                                  
 21905                                  	; 14/12/2022
 21906                                  	;jmp	short int_0B_end
 21907                                  ;int_0B_first:
 21908                                  	; 25/10/2022
 21909                                  	;pop	ds
 21910                                  
 21911                                  int_0B_end:
 21912                                  	
 21913                                  stkinit_0C:
 21914 0000139E BE3000                  	mov	si,0Ch*4 ; 48
 21915                                  	
 21916                                  	; 14/12/2022
 21917                                  	; 25/10/2022
 21918 000013A1 E8C300                  	call	int_xx_first_check
 21919 000013A4 730C                    	jnc	short int_0C_end ; int_0C_first
 21920                                  
 21921                                  ; 14/12/2022
 21922                                  %if 0	
 21923                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21924                                  	push	ds
 21925                                  	lds	bx,[es:si]
 21926                                  	push	ds
 21927                                  	pop	dx
 21928                                  		
 21929                                  	cmp	dx,0
 21930                                  	je	short int_0C_first
 21931                                  
 21932                                  	cmp	byte [bx],0CFh
 21933                                  	je	short int_0C_first
 21934                                  	
 21935                                  	cmp	word [bx+6],424Bh
 21936                                  	je	short int_0C_not_first
 21937                                  	
 21938                                  	cmp	dx,0F000h
 21939                                  	jne	short int_0C_not_first
 21940                                  
 21941                                  	push	es
 21942                                  	push	dx
 21943                                  	mov	dx,0F000h
 21944                                  	mov	es,dx
 21945                                  	cmp	bx,[es:0FF01h]
 21946                                  	pop	dx
 21947                                  	pop	es
 21948                                  	je	short int_0C_first
 21949                                  %endif
 21950                                  	
 21951                                  int_0C_not_first:
 21952                                  	; 14/12/2022
 21953                                  	; 25/10/2022
 21954                                  	;pop	ds
 21955 000013A6 BF[5306]                	mov	di,INT19OLD0C
 21956 000013A9 BB[8900]                	mov	bx,old0C
 21957 000013AC BA[8700]                	mov	dx,int0C
 21958 000013AF E8E000                  	call	new_init_loop
 21959                                  
 21960                                  	; 14/12/2022
 21961                                  	;jmp	short int_0C_end
 21962                                  ;int_0C_first:
 21963                                  	; 25/10/2022
 21964                                  	;pop	ds
 21965                                  
 21966                                  int_0C_end:
 21967                                  
 21968                                  stkinit_0D:
 21969 000013B2 BE3400                  	mov	si,0Dh*4 ; 52
 21970                                  
 21971                                  	; 14/12/2022	
 21972                                  	; 25/10/2022
 21973 000013B5 E8AF00                  	call	int_xx_first_check
 21974 000013B8 730C                    	jnc	short int_0D_end ; int_0D_first
 21975                                  
 21976                                  ; 14/12/2022
 21977                                  %if 0	
 21978                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21979                                  	push	ds
 21980                                  	lds	bx,[es:si]
 21981                                  	push	ds
 21982                                  	pop	dx
 21983                                  		
 21984                                  	cmp	dx,0
 21985                                  	je	short int_0D_first
 21986                                  
 21987                                  	cmp	byte [bx],0CFh
 21988                                  	je	short int_0D_first
 21989                                  	
 21990                                  	cmp	word [bx+6],424Bh
 21991                                  	je	short int_0D_not_first
 21992                                  	
 21993                                  	cmp	dx,0F000h
 21994                                  	jne	short int_0D_not_first
 21995                                  
 21996                                  	push	es
 21997                                  	push	dx
 21998                                  	mov	dx,0F000h
 21999                                  	mov	es,dx
 22000                                  	cmp	bx,[es:0FF01h]
 22001                                  	pop	dx
 22002                                  	pop	es
 22003                                  	je	short int_0D_first
 22004                                  %endif
 22005                                  	
 22006                                  int_0D_not_first:
 22007                                  	; 14/12/2022
 22008                                  	; 25/10/2022
 22009                                  	;pop	ds
 22010 000013BA BF[5806]                	mov	di,INT19OLD0D
 22011 000013BD BB[A100]                	mov	bx,old0D
 22012 000013C0 BA[9F00]                	mov	dx,int0D
 22013 000013C3 E8CC00                  	call	new_init_loop
 22014                                  
 22015                                  	; 14/12/2022
 22016                                  	;jmp	short int_0D_end
 22017                                  	; 02/11/2022
 22018                                  ;int_0D_first:
 22019                                  	;pop	ds
 22020                                  
 22021                                  int_0D_end:
 22022                                  
 22023                                  stkinit_0E:
 22024 000013C6 BE3800                  	mov	si,0Eh*4 ; 56
 22025                                  
 22026                                  	; 14/12/2022	
 22027                                  	; 25/10/2022
 22028 000013C9 E89B00                  	call	int_xx_first_check
 22029 000013CC 730C                    	jnc	short int_0E_end ; int_0E_first
 22030                                  
 22031                                  ; 14/12/2022
 22032                                  %if 0	
 22033                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22034                                  	push	ds
 22035                                  	lds	bx,[es:si]
 22036                                  	push	ds
 22037                                  	pop	dx
 22038                                  		
 22039                                  	cmp	dx,0
 22040                                  	je	short int_0E_first
 22041                                  
 22042                                  	cmp	byte [bx],0CFh
 22043                                  	je	short int_0E_first
 22044                                  	
 22045                                  	cmp	word [bx+6],424Bh
 22046                                  	je	short int_0E_not_first
 22047                                  	
 22048                                  	cmp	dx,0F000h
 22049                                  	jne	short int_0E_not_first
 22050                                  
 22051                                  	push	es
 22052                                  	push	dx
 22053                                  	mov	dx,0F000h
 22054                                  	mov	es,dx
 22055                                  	cmp	bx,[es:0FF01h]
 22056                                  	pop	dx
 22057                                  	pop	es
 22058                                  	je	short int_0E_first
 22059                                  %endif
 22060                                  	
 22061                                  int_0E_not_first:
 22062                                  	; 14/12/2022
 22063                                  	; 25/10/2022
 22064                                  	;pop	ds
 22065 000013CE BF[5D06]                	mov	di,INT19OLD0E
 22066 000013D1 BB[B900]                	mov	bx,old0E
 22067 000013D4 BA[B700]                	mov	dx,int0E
 22068 000013D7 E8B800                  	call	new_init_loop
 22069                                  
 22070                                  	; 14/12/2022
 22071                                  	;jmp	short int_0E_end
 22072                                  ;int_0E_first:
 22073                                  	; 25/10/2022
 22074                                  	;pop	ds	
 22075                                  
 22076                                  int_0E_end:
 22077                                  
 22078                                  stkinit_72:
 22079 000013DA BEC801                  	mov	si,72h*4 ; 456
 22080                                  	
 22081                                  	; 14/12/2022
 22082                                  	; 25/10/2022
 22083 000013DD E88700                  	call	int_xx_first_check
 22084 000013E0 730C                    	jnc	short int_72_end ; int_72_first
 22085                                  
 22086                                  ; 14/12/2022
 22087                                  %if 0	
 22088                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22089                                  	push	ds
 22090                                  	lds	bx,[es:si]
 22091                                  	push	ds
 22092                                  	pop	dx
 22093                                  		
 22094                                  	cmp	dx,0
 22095                                  	je	short int_72_first
 22096                                  
 22097                                  	cmp	byte [bx],0CFh
 22098                                  	je	short int_72_first
 22099                                  	
 22100                                  	cmp	word [bx+6],424Bh
 22101                                  	je	short int_72_not_first
 22102                                  	
 22103                                  	cmp	dx,0F000h
 22104                                  	jne	short int_72_not_first
 22105                                  
 22106                                  	push	es
 22107                                  	push	dx
 22108                                  	mov	dx,0F000h
 22109                                  	mov	es,dx
 22110                                  	cmp	bx,[es:0FF01h]
 22111                                  	pop	dx
 22112                                  	pop	es
 22113                                  	je	short int_72_first
 22114                                  %endif
 22115                                  	
 22116                                  int_72_not_first:
 22117                                  	; 14/12/2022
 22118                                  	; 25/10/2022
 22119                                  	;pop	ds
 22120 000013E2 BF[6706]                	mov	di,INT19OLD72
 22121 000013E5 BB[D100]                	mov	bx,old72
 22122 000013E8 BA[CF00]                	mov	dx,int72
 22123 000013EB E8A400                  	call	new_init_loop
 22124                                  
 22125                                  	; 14/12/2022
 22126                                  	;jmp	short int_72_end
 22127                                  ;int_72_first:
 22128                                  	; 25/10/2022
 22129                                  	;pop	ds
 22130                                  
 22131                                  int_72_end:
 22132                                  
 22133                                  stkinit_73:
 22134 000013EE BECC01                  	mov	si,73h*4 ; 460
 22135                                  	
 22136                                  	; 14/12/2022
 22137                                  	; 25/10/2022
 22138 000013F1 E87300                  	call	int_xx_first_check
 22139 000013F4 730C                    	jnc	short int_73_end ; int_73_first
 22140                                  
 22141                                  ; 14/12/2022
 22142                                  %if 0	
 22143                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22144                                  	push	ds
 22145                                  	lds	bx,[es:si]
 22146                                  	push	ds
 22147                                  	pop	dx
 22148                                  		
 22149                                  	cmp	dx,0
 22150                                  	je	short int_73_first
 22151                                  
 22152                                  	cmp	byte [bx],0CFh
 22153                                  	je	short int_73_first
 22154                                  	
 22155                                  	cmp	word [bx+6],424Bh
 22156                                  	je	short int_73_not_first
 22157                                  	
 22158                                  	cmp	dx,0F000h
 22159                                  	jne	short int_73_not_first
 22160                                  
 22161                                  	push	es
 22162                                  	push	dx
 22163                                  	mov	dx,0F000h
 22164                                  	mov	es,dx
 22165                                  	cmp	bx,[es:0FF01h]
 22166                                  	pop	dx
 22167                                  	pop	es
 22168                                  	je	short int_73_first
 22169                                  %endif	
 22170                                  	
 22171                                  int_73_not_first:
 22172                                  	; 14/12/2022
 22173                                  	; 25/10/2022
 22174                                  	;pop	ds
 22175 000013F6 BF[6C06]                	mov	di,INT19OLD73
 22176 000013F9 BB[E900]                	mov	bx,old73
 22177 000013FC BA[E700]                	mov	dx,int73
 22178 000013FF E89000                  	call	new_init_loop
 22179                                  
 22180                                  	; 14/12/2022
 22181                                  	;jmp	short int_73_end
 22182                                  ;int_73_first:
 22183                                  	; 25/10/2022
 22184                                  	;pop	ds
 22185                                  
 22186                                  int_73_end:
 22187                                  
 22188                                  stkinit_74:
 22189 00001402 BED001                  	mov	si,74h*4 ; 464
 22190                                  	
 22191                                  	; 14/12/2022
 22192                                  	; 25/10/2022
 22193 00001405 E85F00                  	call	int_xx_first_check
 22194 00001408 730C                    	jnc	short int_74_end ; int_74_first
 22195                                  
 22196                                  ; 14/12/2022
 22197                                  %if 0		
 22198                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22199                                  	push	ds
 22200                                  	lds	bx,[es:si]
 22201                                  	push	ds
 22202                                  	pop	dx
 22203                                  		
 22204                                  	cmp	dx,0
 22205                                  	je	short int_74_first
 22206                                  
 22207                                  	cmp	byte [bx],0CFh
 22208                                  	je	short int_74_first
 22209                                  	
 22210                                  	cmp	word [bx+6],424Bh
 22211                                  	je	short int_74_not_first
 22212                                  	
 22213                                  	cmp	dx,0F000h
 22214                                  	jne	short int_74_not_first
 22215                                  
 22216                                  	push	es
 22217                                  	push	dx
 22218                                  	mov	dx,0F000h
 22219                                  	mov	es,dx
 22220                                  	cmp	bx,[es:0FF01h]
 22221                                  	pop	dx
 22222                                  	pop	es
 22223                                  	je	short int_74_first
 22224                                  %endif
 22225                                  
 22226                                  int_74_not_first:
 22227                                  	; 14/12/2022
 22228                                  	; 25/10/2022
 22229                                  	;pop	ds
 22230 0000140A BF[7106]                	mov	di,INT19OLD74
 22231 0000140D BB[0101]                	mov	bx,old74
 22232 00001410 BA[FF00]                	mov	dx,int74
 22233 00001413 E87C00                  	call	new_init_loop
 22234                                  	
 22235                                  	; 14/12/2022
 22236                                  	;jmp	short int_74_end
 22237                                  ;int_74_first:
 22238                                  	; 25/10/2022
 22239                                  	;pop	ds
 22240                                  
 22241                                  int_74_end:
 22242                                  
 22243                                  stkinit_76:
 22244 00001416 BED801                  	mov	si,76h*4 ; 472
 22245                                  	
 22246                                  	; 14/12/2022
 22247                                  	; 25/10/2022
 22248 00001419 E84B00                  	call	int_xx_first_check
 22249 0000141C 730E                    	jnc	short int_76_end ; int_76_first
 22250                                  
 22251                                  ; 14/12/2022
 22252                                  %if 0	
 22253                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22254                                  	push	ds
 22255                                  	lds	bx,[es:si]
 22256                                  	push	ds
 22257                                  	pop	dx
 22258                                  		
 22259                                  	cmp	dx,0
 22260                                  	je	short int_76_first
 22261                                  
 22262                                  	cmp	byte [bx],0CFh
 22263                                  	je	short int_76_first
 22264                                  	
 22265                                  	cmp	word [bx+6],424Bh
 22266                                  	je	short int_76_not_first
 22267                                  	
 22268                                  	cmp	dx,0F000h
 22269                                  	jne	short int_76_not_first
 22270                                  
 22271                                  	push	es
 22272                                  	push	dx
 22273                                  	mov	dx,0F000h
 22274                                  	mov	es,dx
 22275                                  	cmp	bx,[es:0FF01h]
 22276                                  	pop	dx
 22277                                  	pop	es
 22278                                  	je	short int_76_first
 22279                                  %endif
 22280                                  	
 22281                                  int_76_not_first:
 22282                                  	; 14/12/2022
 22283                                  	; 25/10/2022
 22284                                  	;pop	ds
 22285 0000141E BF[7606]                	mov	di,INT19OLD76
 22286 00001421 BB[1901]                	mov	bx,old76
 22287 00001424 BA[1701]                	mov	dx,int76
 22288 00001427 E86800                  	call	new_init_loop
 22289                                  
 22290                                  	; 14/12/2022
 22291 0000142A EB00                    	jmp	short int_76_end
 22292                                  ;int_76_first:
 22293                                  	; 25/10/2022
 22294                                  	;pop	ds
 22295                                  
 22296                                  int_76_end:
 22297                                  
 22298                                  stkinit_77:
 22299 0000142C BEDC01                  	mov	si,77h*4 ; 476
 22300                                  	
 22301                                  	; 14/12/2022
 22302                                  	; 25/10/2022
 22303 0000142F E83500                  	call	int_xx_first_check
 22304 00001432 730C                    	jnc	short int_77_end ; int_77_first
 22305                                  
 22306                                  ; 14/12/2022
 22307                                  %if 0	
 22308                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22309                                  	push	ds
 22310                                  	lds	bx,[es:si]
 22311                                  	push	ds
 22312                                  	pop	dx
 22313                                  		
 22314                                  	cmp	dx,0
 22315                                  	je	short int_77_first
 22316                                  
 22317                                  	cmp	byte [bx],0CFh
 22318                                  	je	short int_77_first
 22319                                  	
 22320                                  	cmp	word [bx+6],424Bh
 22321                                  	je	short int_77_not_first
 22322                                  	
 22323                                  	cmp	dx,0F000h
 22324                                  	jne	short int_77_not_first
 22325                                  
 22326                                  	push	es
 22327                                  	push	dx
 22328                                  	mov	dx,0F000h
 22329                                  	mov	es,dx
 22330                                  	cmp	bx,[es:0FF01h]
 22331                                  	pop	dx
 22332                                  	pop	es
 22333                                  	je	short int_77_first
 22334                                  %endif
 22335                                  	
 22336                                  int_77_not_first:
 22337                                  	; 14/12/2022
 22338                                  	; 25/10/2022
 22339                                  	;pop	ds
 22340 00001434 BF[7B06]                	mov	di,INT19OLD77
 22341 00001437 BB[3101]                	mov	bx,old77
 22342 0000143A BA[2F01]                	mov	dx,int77
 22343 0000143D E85200                  	call	new_init_loop
 22344                                  
 22345                                  	; 14/12/2022
 22346                                  	;jmp	short int_77_end
 22347                                  ;int_77_first:
 22348                                  	; 25/10/2022
 22349                                  	;pop	ds
 22350                                  
 22351                                  int_77_end:
 22352 00001440 1E                      	push	ds
 22353 00001441 B800F0                  	mov	ax,0F000h		; look at the model byte
 22354 00001444 8ED8                    	mov	ds,ax
 22355 00001446 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 22356 0000144B 1F                      	pop	ds
 22357 0000144C 7504                    	jne	short skip_enablenmis
 22358                                  
 22359 0000144E B027                    	mov	al,27h			; enable convertible nmis
 22360 00001450 E672                    	out	72h,al
 22361                                  
 22362                                  ; 25/10/2022
 22363                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 22364                                  
 22365                                  skip_enablenmis:
 22366 00001452 FB                      	sti
 22367                                  	;;mov	ax,Bios_Data ; 70h
 22368                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 22369                                  	; 21/10/2022
 22370 00001453 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 22371 00001456 8ED8                    	mov	ds,ax
 22372                                  
 22373                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 22374                                  
 22375 00001458 C606[3806]01            	mov	byte [INT19SEM],1	; indicate that int 19h
 22376                                  					; initialization is complete
 22377                                  
 22378 0000145D 5D                      	pop	bp			; restore all
 22379 0000145E 5E                      	pop	si
 22380 0000145F 5F                      	pop	di
 22381 00001460 5A                      	pop	dx
 22382 00001461 59                      	pop	cx
 22383 00001462 5B                      	pop	bx
 22384 00001463 07                      	pop	es
 22385 00001464 1F                      	pop	ds
 22386 00001465 58                      	pop	ax
 22387 00001466 C3                      	retn
 22388                                  
 22389                                  ; 14/12/2022
 22390                                  ; ----------------------------------------------------------------------
 22391                                  
 22392                                  	; 14/12/2022
 22393                                  	; 25/10/2022
 22394                                  ;%if 0
 22395                                  	; 27/03/2019 - Retro DOS v4.0
 22396                                  int_xx_first_check:
 22397 00001467 1E                      	push	ds
 22398 00001468 26C51C                  	lds	bx,[es:si]
 22399 0000146B 1E                      	push	ds
 22400 0000146C 5A                      	pop	dx
 22401                                  		
 22402 0000146D 83FA00                  	cmp	dx,0
 22403 00001470 741E                    	je	short int_xx_first
 22404                                  	
 22405 00001472 803FCF                  	cmp	byte [bx],0CFh
 22406 00001475 7419                    	je	short int_xx_first
 22407                                  	
 22408 00001477 817F064B42              	cmp	word [bx+6],424Bh
 22409 0000147C 7411                    	je	short int_xx_not_first
 22410                                  	
 22411 0000147E 81FA00F0                	cmp	dx,0F000h
 22412 00001482 750B                    	jne	short int_xx_not_first
 22413                                  
 22414 00001484 06                      	push	es
 22415                                  	;push	dx
 22416                                  	;mov	dx,0F000h
 22417 00001485 8EC2                    	mov	es,dx
 22418 00001487 263B1E01FF              	cmp	bx,[es:0FF01h]
 22419                                        	;pop	dx
 22420 0000148C 07                      	pop	es
 22421 0000148D 7401                    	je	short int_xx_first
 22422                                  
 22423                                  int_xx_not_first:
 22424 0000148F F9                      	stc
 22425                                  int_xx_first:
 22426 00001490 1F                      	pop	ds
 22427 00001491 C3                      	retn
 22428                                  
 22429                                  ;%endif
 22430                                  
 22431                                  ; ----------------------------------------------------------------------
 22432                                  ; 27/03/2019 - Retro DOS v4.0
 22433                                  
 22434                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22435                                  ; (SYSINIT:1610h)
 22436                                  
 22437                                  new_init_loop:
 22438                                  
 22439                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 22440                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 22441                                  ;	dx=ds:offset of intxx, the new interrupt handler
 22442                                  ;	di=offset value of int19old&aa variable in bios.
 22443                                  ;	es=zero, segid of vector table
 22444                                  ;	ds=relocated stack code segment
 22445                                  
 22446 00001492 268B04                  	mov	ax,[es:si]		;remember offset in vector
 22447 00001495 8907                    	mov	[bx],ax			; to original owner in ds
 22448 00001497 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 22449 0000149B 894702                  	mov	[bx+2],ax		; to original owner in ds
 22450                                  
 22451 0000149E 1E                      	push	ds
 22452                                  	;;mov	ax,Bios_Data ; 70h
 22453                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 22454                                  	; 21/10/2022
 22455 0000149F B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 22456 000014A2 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 22457 000014A4 268B04                  	mov	ax,[es:si]		;int 19 handler
 22458 000014A7 8905                    	mov	[di],ax
 22459 000014A9 268B4402                	mov	ax,[es:si+2]
 22460 000014AD 894502                  	mov	word [di+2],ax
 22461 000014B0 1F                      	pop	ds
 22462                                  
 22463 000014B1 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 22464 000014B4 268C5C02                	mov	[es:si+2],ds
 22465 000014B8 C3                      	retn
 22466                                  
 22467                                  ; End of STACK initialization routine
 22468                                  ; ----------------------------------------------------------------------
 22469                                  
 22470                                  ; ----------------------------------------------------------------------
 22471                                  ;set the devmark for mem command.
 22472                                  ;in: [memhi] - the address to place devmark
 22473                                  ;    [memlo] = 0
 22474                                  ;    al = id for devmark_id
 22475                                  ;out: devmark established.
 22476                                  ;     the address saved in cs:[devmark_addr]
 22477                                  ;     [memhi] increase by 1.
 22478                                  ; ----------------------------------------------------------------------
 22479                                  
 22480                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22481                                  ; (SYSINIT:1637h)
 22482                                  
 22483                                  setdevmark:
 22484                                  
 22485 000014B9 06                      	push	es
 22486 000014BA 51                      	push	cx
 22487                                  
 22488 000014BB 2E8B0E[6203]            	mov	cx,[cs:memhi]
 22489 000014C0 2E890E[E014]            	mov	[cs:devmark_addr],cx
 22490 000014C5 8EC1                    	mov	es,cx
 22491                                  	; 25/10/2022
 22492                                  	;mov	[es:devmark.id],al
 22493 000014C7 26A20000                	mov	[es:0],al
 22494 000014CB 41                      	inc	cx
 22495                                  	;mov	[es:devmark.seg],cx
 22496 000014CC 26890E0100              	mov	[es:1],cx
 22497                                  
 22498 000014D1 59                      	pop	cx
 22499 000014D2 07                      	pop	es
 22500 000014D3 2EFF06[6203]            	inc	word [cs:memhi]
 22501 000014D8 C3                      	retn
 22502                                  
 22503                                  ; ----------------------------------------------------------------------
 22504                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 22505                                  ; ----------------------------------------------------------------------
 22506                                  ; 27/03/2019 - Retro DOS v4.0
 22507                                  
 22508                                  ;MULTI_CONFIG	equ 1
 22509                                  
 22510                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 22511                                                                          ; allocation strategy call
 22512                                  
 22513                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 22514                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 22515                                  
 22516                                  default_filenum equ 8
 22517                                  
 22518                                  ;stacksw	equ true		; include switchable hardware stacks
 22519                                  
 22520                                  ; external variable defined in ibmbio module for multi-track
 22521                                  
 22522                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 22523                                  					; it on after handling config.sys file as a
 22524                                  					; default value,if multrk_flag = multrk_off1.
 22525                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 22526                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 22527                                  
 22528                                  ; if stacksw
 22529                                  
 22530                                  ; internal stack parameters
 22531                                  
 22532                                  ;entrysize	equ 8
 22533                                  
 22534                                  ;mincount	equ 8
 22535                                  ;defaultcount	equ 9
 22536                                  ;maxcount	equ 64
 22537                                  
 22538                                  ;minsize 	equ 32
 22539                                  ;defaultsize	equ 128
 22540                                  ;maxsize 	equ 512
 22541                                  
 22542                                  DOS_FLAG_OFFSET	equ 86h
 22543                                  
 22544                                  ;ifdef MULTI_CONFIG
 22545                                  ;
 22546                                  ;   config_envlen must immediately precede config_wrkseg, because they
 22547                                  ;   may be loaded as a dword ptr
 22548                                  
 22549                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 22550                                  ; 25/10/2022
 22551 000014D9 0000                    config_envlen:	dw  0  			; when config_wrkseg is being used as
 22552                                                 				;  a scratch env, this is its length
 22553 000014DB 0000                    config_wrkseg:	dw  0			; config work area (above confbot)
 22554                                                     			;  segment of work area
 22555                                  
 22556 000014DD 00                      config_cmd:	db  0  			; current config cmd
 22557                                                   			;  (with CONFIG_OPTION_QUERY bit intact)
 22558 000014DE 00                      config_multi:	db  0                   ; non-zero if multi-config config.sys
 22559                                  
 22560                                  ;endif ; MULTI_CONFIG
 22561                                  
 22562 000014DF 00                      multdeviceflag:	db  0
 22563                                  
 22564 000014E0 0000                    devmark_addr:	dw  0			;segment address for devmark.
 22565                                  
 22566 000014E2 00                      setdevmarkflag: db  0			;flag used for devmark
 22567                                  
 22568                                  ; 30/12/2022
 22569                                  ; 12/12/2022
 22570 000014E3 00                      driver_units:	db  0			;total unitcount for driver
 22571                                  
 22572                                  ; 12/12/2022
 22573                                  ;ems_stub_installed:
 22574                                  ;		db  0
 22575                                  
 22576                                  ; 12/12/2022	
 22577                                  ;align 2
 22578                                  
 22579                                  badparm_ptr:	; label	dword
 22580 000014E4 0000                    badparm_off:	dw  0
 22581 000014E6 0000                    badparm_seg:	dw  0
 22582                                  
 22583                                  ;******************************************************************************
 22584                                  ;take care of config.sys file.
 22585                                  ;system parser data and code.
 22586                                  ;******************************************************************************
 22587                                  
 22588                                  ;*******************************************************************
 22589                                  ; parser options set for msbio sysconf module
 22590                                  ;*******************************************************************
 22591                                  ;
 22592                                  ;**** default assemble swiches definition **************************
 22593                                  
 22594                                  ;farsw	equ 0		; near call expected
 22595                                  ;datesw	equ 0		; check date format
 22596                                  ;timesw	equ 0		; check time format
 22597                                  ;filesw	equ 1		; check file specification
 22598                                  ;capsw	equ 0		; perform caps if specified
 22599                                  ;cmpxsw	equ 0		; check complex list
 22600                                  ;numsw	equ 1		; check numeric value
 22601                                  ;keysw	equ 0		; support keywords
 22602                                  ;swsw	equ 1		; support switches
 22603                                  ;val1sw	equ 1		; support value definition 1
 22604                                  ;val2sw	equ 0		; support value definition 2
 22605                                  ;val3sw	equ 1		; support value definition 3
 22606                                  ;drvsw	equ 1		; support drive only format
 22607                                  ;qussw	equ 0		; support quoted string format
 22608                                  
 22609                                  ; psdata_seg equ cs
 22610                                  
 22611                                  	;.xlist
 22612                                  	;include parse.asm		;together with psdata.inc
 22613                                  	;.list
 22614                                  
 22615                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 22616                                  ; ======================================================================
 22617                                  ; 27/03/2019 - Retro DOS v4.0
 22618                                  
 22619                                  ; 30/03/2019
 22620                                  ; VERSION.INC (MSDOS 6.0) 
 22621                                  ; Set DBCS Blank constant
 22622                                  
 22623                                  ; ifndef DBCS
 22624                                  DB_SPACE EQU 2020h
 22625                                  DB_SP_HI EQU 20h
 22626                                  DB_SP_LO EQU 20h
 22627                                  ; else
 22628                                  
 22629                                  ;*******************************************************************
 22630                                  ; Parser include file
 22631                                  ;*******************************************************************
 22632                                  
 22633                                  ;**** Equation field
 22634                                  ;-------- Character code definition
 22635                                  
 22636                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 22637                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 22638                                  _$P_Period	   equ	"."             ;AN020;
 22639                                  _$P_Slash	   equ	"/"             ;AN020;
 22640                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 22641                                  _$P_Comma	   equ	","             ;AN000;
 22642                                  _$P_Switch	   equ	"/"             ;AN000;
 22643                                  _$P_Keyword	   equ	"="             ;AN000;
 22644                                  _$P_Colon	   equ	":"             ;AN000;
 22645                                  _$P_Plus 	   equ	"+"             ;AN000;
 22646                                  _$P_Minus	   equ	"-"             ;AN000;
 22647                                  _$P_Rparen	   equ	")"             ;AN000;
 22648                                  _$P_Lparen	   equ	"("             ;AN000;
 22649                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 22650                                  _$P_DQuote	   equ	'"'             ;AN000;
 22651                                  _$P_NULL 	   equ	0		;AN000;
 22652                                  _$P_TAB		   equ	9		;AN000;
 22653                                  _$P_CR		   equ	0Dh		;AN000;
 22654                                  _$P_LF		   equ	0Ah		;AN000;
 22655                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 22656                                  
 22657                                  ;-------- Masks
 22658                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 22659                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 22660                                  
 22661                                  ;-------- DOS function call related equs
 22662                                  
 22663                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 22664                                  					; by this call, following information
 22665                                  struc _$P_CDI	
 22666 00000000 ????                     .DateF: resw 1
 22667 00000002 ??????????               .Money: resb 5
 22668 00000007 ????                     .1000:	 resb 2
 22669 00000009 ????                     .Dec:	 resb 2
 22670 0000000B ????                     .DateS: resb 2
 22671 0000000D ????                     .TimeS: resb 2
 22672 0000000F ??                          	 resb 1
 22673 00000010 ??                      	 resb 1
 22674 00000011 ??                       .TimeF: resb 1	 
 22675 00000012 ????????                	 resw 2
 22676 00000016 ????                    	 resb 2
 22677 00000018 <res Ah>                	 resw 5
 22678                                   .size:
 22679                                  endstruc
 22680                                  
 22681                                  _$P_Date_MDY	   equ	0		;AN000;
 22682                                  _$P_Date_DMY	   equ	1		;AN000;
 22683                                  _$P_Date_YMD	   equ	2		;AN000;
 22684                                  ;-------------
 22685                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 22686                                  					;AN000; DS:SI will points to DBCS EV
 22687                                  ;-------------
 22688                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 22689                                  					;AN000; following parameters are set
 22690                                  					;AN000; to get casemap table.
 22691                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 22692                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 22693                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 22694                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 22695                                  					; By this call following information
 22696                                  					; is returned.
 22697                                  struc _$P_DOS_TBL
 22698 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 22699 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 22700 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 22701                                  endstruc
 22702                                  
 22703                                  ; ----------------------------------------------------------------------------
 22704                                  ; PARMS 	LABEL	BYTE
 22705                                  ;		DW	PARMSX
 22706                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 22707                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22708                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 22709                                  ;					; TYPICAL ARE ";", "="
 22710                                  ;					; "," & WHITESPACE ALWAYS
 22711                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22712                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 22713                                  ; ----------------------------------------------------------------------------
 22714                                  
 22715                                  ;-------------------------------- PARMS block structure
 22716                                  struc _$P_PARMS_Blk
 22717 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 22718 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 22719 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 22720                                  endstruc
 22721                                  
 22722                                  _$P_Len_PARMS	   equ	4		;AN000;
 22723                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 22724                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 22725                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 22726                                  
 22727                                  ; ----------------------------------------------------------------------------
 22728                                  ; PARMSX	LABEL	BYTE
 22729                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 22730                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 22731                                  ;		:			; REPEATS maxp-1 TIMES
 22732                                  ;		DB	maxs		; # OF SWITCHES
 22733                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 22734                                  ;		:			; REPEATS maxs-1 TIMES
 22735                                  ;		DB	maxk		; # OF KEYWORD
 22736                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 22737                                  ;		:			; REPEATS maxk-1 TIMES
 22738                                  ; ----------------------------------------------------------------------------
 22739                                  
 22740                                  ;-------------------------------- PARMSX block structure
 22741                                  struc _$P_PARMSX_Blk		;AN000;
 22742 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 22743 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 22744 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 22745                                  endstruc
 22746                                  
 22747                                  ; ----------------------------------------------------------------------------
 22748                                  ; << Control field definition  >>
 22749                                  ;
 22750                                  ;
 22751                                  ;CONTROL   LABEL   BYTE
 22752                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 22753                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 22754                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 22755                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 22756                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 22757                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 22758                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 22759                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 22760                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 22761                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 22762                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 22763                                  ;				   ; 0002H=REPEATS ALLOWED
 22764                                  ;				   ; 0001H=OPTIONAL
 22765                                  ;	   DW	   FUNCTION_FLAGS
 22766                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 22767                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 22768                                  ;				   ; 0010H=REMOVE ":" AT END
 22769                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 22770                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 22771                                  ;	   DW	   VALUES	   ; VALUE LISTS
 22772                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 22773                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 22774                                  ;	   :
 22775                                  ;
 22776                                  ;Note:
 22777                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 22778                                  ;      DATE bit simalteniously.
 22779                                  ;
 22780                                  ;      The parser examins each bit along with the following priority.
 22781                                  ;
 22782                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 22783                                  ;      FILE SPEC -> SIMPLE STRING.
 22784                                  ;
 22785                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 22786                                  ;      in the result buffer is capitalized.
 22787                                  ;
 22788                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 22789                                  ;
 22790                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 22791                                  ;      switch, for example, '/A', then STRING points to;
 22792                                  ;
 22793                                  ;			DB    1 	; number of following synonyms
 22794                                  ;			DB   '/A',0
 22795                                  ;
 22796                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 22797                                  ;
 22798                                  ;			DB    1 	; number of following synonyms
 22799                                  ;			DB   'CODEPAGE=',0
 22800                                  ;
 22801                                  ;    - "..." must consist of upper case characters only because the parser
 22802                                  ;      performs pattern matching after converting input to upper case (by
 22803                                  ;      using the current country upper case table)
 22804                                  ;
 22805                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 22806                                  ;      example /A and /B, the format will be;
 22807                                  ;
 22808                                  ;			DB    2 	; number of following synonyms
 22809                                  ;			DB    '/A',0
 22810                                  ;			DB    '/B',0
 22811                                  ; ----------------------------------------------------------------------------
 22812                                  
 22813                                  ;**** Match_Flags
 22814                                  
 22815                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 22816                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 22817                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 22818                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 22819                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 22820                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 22821                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 22822                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 22823                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 22824                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 22825                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 22826                                  _$P_Optional	   equ	0001h		;AN000; Optional
 22827                                  
 22828                                  ;**** Function flags
 22829                                  
 22830                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 22831                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 22832                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 22833                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 22834                                  
 22835                                  ;-------------------------------- Control block structure
 22836                                  struc _$P_Control_Blk
 22837 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 22838 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 22839 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 22840 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 22841 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 22842 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 22843                                  endstruc
 22844                                  
 22845                                  ; ----------------------------------------------------------------------------
 22846                                  ; << Value List Definition >>
 22847                                  ;
 22848                                  ;VALUES 	LABEL	BYTE
 22849                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 22850                                  ;	     +-
 22851                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 22852                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 22853                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 22854                                  ;	     |	:
 22855                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 22856                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 22857                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 22858                                  ;	     |	:
 22859                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 22860                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 22861                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 22862                                  ;	     +-	:
 22863                                  ;
 22864                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 22865                                  ;
 22866                                  ;Note:
 22867                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 22868                                  ;      when no choice lists are provided.
 22869                                  ;
 22870                                  ;    - STRING must consist of upper case characters only because the parser
 22871                                  ;      performs pattern matching after converting input to upper case (by
 22872                                  ;      using the current country upper case table)
 22873                                  ; ----------------------------------------------------------------------------
 22874                                  
 22875                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 22876                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 22877                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 22878                                  _$P_nval_String	   equ	3		;AN000; string list ID
 22879                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 22880                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 22881                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 22882                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 22883                                  
 22884                                  struc _$P_Val_List
 22885 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 22886 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 22887 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 22888 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 22889 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 22890                                  endstruc
 22891                                  
 22892                                  ; ----------------------------------------------------------------------------
 22893                                  ; << Result Buffer Definition  >>
 22894                                  ;
 22895                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 22896                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 22897                                  ;						;	1=NUMBER, 2=LIST INDEX,
 22898                                  ;						;	3=STRING, 4=COMPLEX,
 22899                                  ;						;	5=FILESPEC, 6=DRIVE
 22900                                  ;						;	7=DATE, 8=TIME
 22901                                  ;						;	9=QUOTED STRING
 22902                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 22903                                  ;
 22904                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 22905                                  ;
 22906                                  ;            +-
 22907                                  ;	    | DD	n			; VALUE IF NUMBER
 22908                                  ;	    | or
 22909                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 22910                                  ;	    |					; (ES presents Segment address)
 22911                                  ;	    | or
 22912                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 22913                                  ;	    | or
 22914                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 22915                                  ;	    | or
 22916                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 22917                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 22918                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 22919                                  ;	    | or
 22920                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 22921                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 22922                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 22923                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 22924                                  ;	    +-
 22925                                  ;
 22926                                  ;
 22927                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 22928                                  ;      list.
 22929                                  ;
 22930                                  ;      YEAR: If the input value for the year is less than 100, parser
 22931                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 22932                                  ;	     the year value, he returns 1987.
 22933                                  ; ----------------------------------------------------------------------------
 22934                                  
 22935                                  ;-------------------------------- Result block structure
 22936                                  struc _$P_Result_Blk
 22937 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 22938 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 22939 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 22940 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 22941                                  endstruc
 22942                                  
 22943                                  ;--------------------------------
 22944                                  ;**** values for the type field in the result block
 22945                                  
 22946                                  _$P_EOL		   equ	0		;AN000; End of line
 22947                                  _$P_Number	   equ	1		;AN000; Number
 22948                                  _$P_List_Idx	   equ	2		;AN000; List Index
 22949                                  _$P_String	   equ	3		;AN000; String
 22950                                  _$P_Complex	   equ	4		;AN000; Complex
 22951                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 22952                                  _$P_Drive	   equ	6		;AN000; Drive
 22953                                  _$P_Date_F	   equ	7		;AN000; Date
 22954                                  _$P_Time_F	   equ	8		;AN000; Time
 22955                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 22956                                  
 22957                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 22958                                  
 22959                                  ;**** Return code
 22960                                  ;
 22961                                  ; following return code will be returned in the AX register.
 22962                                  
 22963                                  _$P_No_Error	   equ	0		;AN000; No error
 22964                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 22965                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 22966                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 22967                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 22968                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 22969                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 22970                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 22971                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 22972                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 22973                                  
 22974                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 22975                                  
 22976                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 22977                                  
 22978                                  ;********************** Local Data *************************************
 22979 000014E8 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 22980 000014EA 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 22981 000014EC 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 22982 000014EE 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 22983 000014F0 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 22984 000014F1 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 22985 000014F3 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 22986 000014F5 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 22987                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 22988                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 22989                                  
 22990                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 22991                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 22992                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 22993                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 22994                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 22995                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 22996                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 22997                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 22998                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 22999                                  
 23000                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 23001                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 23002                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 23003                                  
 23004 000014F7 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 23005 000014F9 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 23006 000014FB 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 23007 000014FD 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 23008                                  
 23009 000014FF 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 23010                                  _$P_STRING_BUF_END equ	$		;AN000;
 23011                                  
 23012                                  ; 25/10/2022
 23013                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 23014                                  
 23015 0000157F FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 23016 00001580 0000                    		   dw	0		;AN000; offset	of char case map table
 23017 00001582 0000                    		   dw	0		;AN000; segment of char case map table
 23018                                  ; 25/10/2022
 23019                                  ;IF CAPSW
 23020                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 23021                                  ;		   dw	0		;AN000; offset	of file case map table
 23022                                  ;		   dw	0		;AN000; segment of file case map table
 23023                                  ;ENDIF
 23024                                  
 23025                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 23026                                  ;
 23027                                  
 23028                                  ;M029
 23029                                  ;!!!WARNING!!!
 23030                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 23031                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 23032                                  ;changes need to be made in SYSPARSE
 23033                                  
 23034                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 23035                                  
 23036                                  ; 25/10/2022
 23037                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 23038                                  
 23039 00001584 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 23040                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 23041                                  
 23042                                  ;ENDIF					;AN000;(of FileSW)
 23043                                  
 23044                                  ; delimiter parsing
 23045                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 23046                                  _$P_period_only	   equ	02h		;AN032; check only for period
 23047                                  
 23048                                  ;filespec error flag
 23049 0000158D 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 23050                                  					;AN033;  was detected.
 23051                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 23052                                  
 23053                                  
 23054                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 23055                                  ; ======================================================================
 23056                                  ; 27/03/2019 - Retro DOS v4.0
 23057                                  
 23058                                  ;***********************************************************************
 23059                                  ; SysParse;
 23060                                  ;
 23061                                  ;  Function : Parser Entry
 23062                                  ;
 23063                                  ;  Input: DS:SI -> command line
 23064                                  ;	  ES:DI -> parameter block
 23065                                  ;	  cs -> psdata.inc
 23066                                  ;	  CX = operand ordinal
 23067                                  ;
 23068                                  ;	  Note:  ES is the segment containing all the control blocks defined
 23069                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 23070                                  ;		 is in DS.
 23071                                  ;
 23072                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 23073                                  ;		    invalid value list. But this parser does NOT implement
 23074                                  ;		    this feature. Therefore CY always zero.
 23075                                  ;
 23076                                  ;	   CY = 0   AX = return code
 23077                                  ;		    BL = terminated delimiter code
 23078                                  ;		    CX = new operand ordinal
 23079                                  ;		    SI = set past scaned operand
 23080                                  ;		    DX = selected result buffer
 23081                                  ;
 23082                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 23083                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 23084                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 23085                                  ;
 23086                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 23087                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 23088                                  ;
 23089                                  ;-------- Modification History -----------------------------------------
 23090                                  ;
 23091                                  ;  4/04/87 : Created by K. K,
 23092                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 23093                                  ;	   : JMP SHORT assemble error (tm02)
 23094                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 23095                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 23096                                  ;	     DateSW equ 1)	      (tm04)
 23097                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 23098                                  ;				      (tm05) in PSDATA.INC
 23099                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 23100                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 23101                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 23102                                  ;	     value-list block	      (tm07)
 23103                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 23104                                  ;	     switch (keyword) or not. If there is, backup si for next call
 23105                                  ;	     (tm08)
 23106                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 23107                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 23108                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 23109                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 23110                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 23111                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 23112                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 23113                                  ;					  (tm12)
 23114                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 23115                                  ;					  (tm13)
 23116                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 23117                                  ;					  (tm14)
 23118                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 23119                                  ;					  (tm15)
 23120                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 23121                                  
 23122                                  ;  7/24/87 : Quoted strings being returned with quotes.
 23123                                  
 23124                                  ;  7/28/87 : Kerry S (;AN018;)
 23125                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 23126                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 23127                                  ;	     affected: _$P_Chk_SW_Control.
 23128                                  
 23129                                  ;  7/29/87 : Kerry S (;AN019;)
 23130                                  ;	     Now allow the optional bit in match flags for switches.  This
 23131                                  ;	     allows the switch to be encountered with a value or without a
 23132                                  ;	     value and no error is returned.
 23133                                  ;
 23134                                  
 23135                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 23136                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 23137                                  ;	     within a date response, instead of checking just for the one
 23138                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 23139                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 23140                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 23141                                  
 23142                                  ;  9/1/87  : Kerry S (;AN021)
 23143                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 23144                                  ;	     the command line with the string in the control block the
 23145                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 23146                                  ;	     on the command line and assuming a match.	This allowed a shorter
 23147                                  ;	     string on the command line than in the synonym list in the control
 23148                                  ;	     block.  I put in a test for a null in the control block so the
 23149                                  ;	     string in the control block must be the same length as the string
 23150                                  ;	     preceeding the colon or equal on the command line.
 23151                                  
 23152                                  ;  8/28/87 : Kerry S (;AN022;)
 23153                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 23154                                  ;	     problems for people who included it themselves in a segment other
 23155                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 23156                                  ;	     segment.
 23157                                  
 23158                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 23159                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 23160                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 23161                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 23162                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 23163                                  ;	     BL be used if TIME is being parsed.
 23164                                  
 23165                                  ;  9/24/87 : Ed K
 23166                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 23167                                  ;	     invocations with their normally expanded code; made comments
 23168                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 23169                                  
 23170                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 23171                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 23172                                  ;	     pointed to by non-existant CONTROL.
 23173                                  
 23174                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 23175                                  ;	     A quoted text string can be framed only by double quote.  Remove
 23176                                  ;	     support to frame quoted text string with single quote.
 23177                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 23178                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 23179                                  ;	     single quote in PROC prologues are left as is for history reasons.
 23180                                  
 23181                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 23182                                  ;	     quote chars within a quoted string is supposed to be reported as
 23183                                  ;	     one quote character, but is reported as two quotes.  This changed
 23184                                  ;	     two instructions in PROC _$P_Quoted_Str.
 23185                                  
 23186                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 23187                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 23188                                  
 23189                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 23190                                  
 23191                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 23192                                  ;	     psdata buffer should have cs.
 23193                                  
 23194                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 23195                                  ;	     positional missing.
 23196                                  
 23197                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 23198                                  ;	     as a line delimiter, should use carriage return.
 23199                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 23200                                  
 23201                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 23202                                  
 23203                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 23204                                  ;	     endless loop since SI is returned still pointing to start
 23205                                  ;	     of that parm.
 23206                                  
 23207                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 23208                                  ;	     Vector to returned string has CS instead of cs, but
 23209                                  ;	     when tried to fix it on previous version, changed similar
 23210                                  ;	     but wrong place.
 23211                                  
 23212                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 23213                                  ;	     delimiters between hours, minutes, seconds for time. And period
 23214                                  ;	     and comma are valid delimiters between seconds and 100th second.
 23215                                  
 23216                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 23217                                  ;	     in a filespec, then flag an error.
 23218                                  
 23219                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 23220                                  ;	     indexed off of the cs equate instead of the DS register.
 23221                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 23222                                  ;  -->	     local parser data. Why were some references to local data changed
 23223                                  ;	     to do this before, but not all ?????
 23224                                  
 23225                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 23226                                  
 23227                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 23228                                  ;
 23229                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 23230                                  
 23231                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 23232                                  
 23233                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 23234                                  ;	     separator in TIME before hundredths field.
 23235                                  ;
 23236                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 23237                                  ;			strings as keywords.
 23238                                  ;
 23239                                  ;***********************************************************************
 23240                                  
 23241                                  ;IF FarSW				;AN000;(Check if need far return)
 23242                                  ;SysParse proc far			;AN000;
 23243                                  ;ELSE					;AN000;
 23244                                  ;SysParse proc near			;AN000;
 23245                                  ;ENDIF					;AN000;(of FarSW)
 23246                                  
 23247                                  ; 27/03/2019 - Retro DOS v4.0
 23248                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 23249                                  
 23250                                  ; 25/10/2022 - Retro DOS v4.0
 23251                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 23252                                  
 23253                                  SysParse:
 23254 0000158E 2EC706[F514]0000        	mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 23255 00001595 FC                      	cld				;AN000; confirm forward direction
 23256 00001596 2E890E[E814]            	mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 23257 0000159B 2EC706[EA14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 23258 000015A2 2EC706[FD14]0000        	mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 23259                                  
 23260 000015A9 2EC706[EE14]0000        	mov	word [cs:_$P_DX],0	;AC034; (tm15)
 23261                                  
 23262                                  ;M029 -- Begin changes
 23263                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 23264                                  ;entry to SysParse. This is in the non-checksum region and any program that
 23265                                  ;corrupts this table but does not corrupt the checksum region will leave
 23266                                  ;command.com parsing in an inconsistent state.
 23267                                  ; NB: The special characters string has been hardcoded here. If any change
 23268                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 23269                                  
 23270                                  ;IF FileSW + DrvSW
 23271 000015B0 2EC706[8415]5D5B        	mov	word [cs:_$P_FileSp_Char], ']['
 23272 000015B7 2EC706[8615]3C7C        	mov	word [cs:_$P_FileSp_Char+2], '<|'
 23273 000015BE 2EC706[8815]2B3E        	mov	word [cs:_$P_FileSp_Char+4], '+>'
 23274 000015C5 2EC706[8A15]3B3D        	mov 	word [cs:_$P_FileSp_Char+6], ';='
 23275                                  ;ENDIF
 23276                                  
 23277                                  ;M029 -- End of changes
 23278                                  
 23279 000015CC E89606                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 23280 000015CF 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 23281                                  ;--------------------------- End of Line
 23282 000015D1 B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 23283 000015D4 53                      	push	bx			;AN000;
 23284                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 23285                                  					;AN000; Get the PARMSX address to
 23286 000015D5 268B1D                  	mov	bx,[es:di]
 23287                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 23288                                  					;AN000; check ORDINAL to see if the minimum
 23289 000015D8 263A0F                  	cmp	cl,[es:bx]	
 23290 000015DB 7303                    	jae	short _$P_Fin		;AN000; positional found.
 23291                                  
 23292 000015DD B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 23293                                  _$P_Fin: 				;AN000;
 23294 000015E0 5B                      	pop	bx			;AN000;
 23295 000015E1 E91F01                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 23296                                  ;---------------------------
 23297                                  _$P_Start:				;AN000;
 23298 000015E4 2E8936[F714]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 23299 000015E9 53                      	push	bx			;AN000; quoted string or file spec.
 23300 000015EA 57                      	push	di			;AN000;
 23301 000015EB 55                      	push	bp			;AN000;
 23302                                  	;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 23303                                  	; 02/11/2022
 23304 000015EC 8D1E[FF14]              	lea	bx,[_$P_STRING_BUF]
 23305 000015F0 2EF606[F614]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 23306 000015F6 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 23307                                  
 23308                                  _$P_Pack_Loop:				;AN000;
 23309 000015F8 AC                      	lodsb				;AN000; Pick a operand from buffer
 23310 000015F9 E80E07                  	call	_$P_Chk_Switch		;AN000; Check switch character
 23311 000015FC 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 23312                                  
 23313 000015FE E88606                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 23314 00001601 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 23315                                  
 23316 00001603 E8B606                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 23317 00001606 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 23318                                  
 23319 00001608 2EF606[F614]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 23320                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 23321 0000160E 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 23322                                  
 23323 00001610 E85206                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 23324 00001613 EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 23325                                  
 23326                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 23327 00001615 2EF606[F614]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 23328 0000161B 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 23329                                  
 23330 0000161D 4E                      	dec	si			;AN000; (tm08)
 23331 0000161E EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 23332                                  
 23333                                  _$P_PL01:				;AN000;
 23334 00001620 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 23335 00001623 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 23336 00001625 7506                    	jne	short _$P_PL00 		;AN000; then
 23337                                  
 23338 00001627 2E800E[F614]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 23339                                  _$P_PL00:				;AN000;
 23340 0000162D 43                      	inc	bx			;AN000; ready to see next byte
 23341 0000162E E8F206                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 23342 00001631 73C5                    	jnc	_$P_Pack_Loop		;AN000; if no, process to next byte
 23343                                  
 23344 00001633 AC                      	lodsb				;AN000; if yes, store
 23345 00001634 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 23346 00001637 43                      	inc	bx			;AN000; update pointer
 23347 00001638 EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 23348                                  
 23349                                  _$P_Pack_End_BY_EOL:			;AN000;
 23350 0000163A 4E                      	dec	si			;AN000; backup si pointer
 23351                                  _$P_Pack_End:				;AN000;
 23352 0000163B 2E8936[EC14]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 23353 00001640 2EC60700                	mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 23354 00001644 2E891E[FB14]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 23355                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 23356 00001649 268B1D                  	mov	bx,[es:di]
 23357                                  	;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 23358                                  	; 02/11/2022
 23359 0000164C 8D36[FF14]              	lea	si,[_$P_STRING_BUF]
 23360 00001650 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 23361 00001654 7436                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 23362                                  
 23363 00001656 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 23364 0000165A 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 23365                                  
 23366 0000165C 2EF606[F614]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 23367 00001662 7552                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 23368                                  
 23369                                  _$P_Positional_Manager:			;AN000; else process as positional
 23370 00001664 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23371 00001668 30E4                    	xor	ah,ah			;AN000; ax = maxp
 23372 0000166A 2E3906[E814]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 23373 0000166F 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 23374                                  
 23375 00001671 2EA1[E814]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 23376 00001675 D1E0                    	shl	ax,1			;AN000; ax = ax*2
 23377 00001677 43                      	inc	bx			;AC035; add '2' to
 23378 00001678 43                      	inc	bx			;AC035;  BX reg
 23379                                  					;AN000; now bx points to 1st CONTROL
 23380 00001679 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 23381 0000167B 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 23382 0000167E E88400                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 23383 00001681 EB65                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 23384                                  
 23385                                  _$P_Too_Many_Error:			;AN000;
 23386 00001683 2EC706[EA14]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 23387 0000168A EB5C                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 23388                                  
 23389                                  _$P_SW_Manager:				;AN000;
 23390 0000168C 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23391 00001690 30E4                    	xor	ah,ah			;AN000; ax = maxp
 23392 00001692 40                      	inc	ax			;AN000;
 23393 00001693 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 23394 00001695 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 23395 00001697 268A0F                  	mov	cl,[es:bx]		;AN000;
 23396 0000169A 30ED                    	xor	ch,ch			;AN000; cx = maxs
 23397                                  	;or	cx,cx			;AN000; at least one switch ?
 23398                                  	;jz	short _$P_SW_Not_Found 	;AN000;
 23399                                  	; 07/07/2023
 23400 0000169C E30F                    	jcxz	_$P_SW_Not_Found	; no
 23401                                  
 23402 0000169E 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 23403                                  
 23404                                  _$P_SW_Mgr_Loop: 			;AN000;
 23405 0000169F 53                      	push	bx			;AN000;
 23406 000016A0 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 23407 000016A3 E8BF00                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 23408 000016A6 5B                      	pop	bx			;AN000;
 23409 000016A7 733F                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 23410                                  
 23411 000016A9 43                      	inc	bx			;AC035; add '2' to
 23412 000016AA 43                      	inc	bx			;AC035;  BX reg
 23413                                  					;AN000; else bx points to the next CONTROL
 23414 000016AB E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 23415                                  
 23416                                  _$P_SW_Not_Found:			;AN000;
 23417 000016AD 2EC706[EA14]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 23418 000016B4 EB32                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 23419                                  
 23420                                  _$P_Key_Manager: 			;AN000;
 23421 000016B6 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23422 000016BA 30E4                    	xor	ah,ah			;AN000; ax = maxp
 23423 000016BC 40                      	inc	ax			;AN000;
 23424 000016BD D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 23425 000016BF 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 23426 000016C1 268A07                  	mov	al,[es:bx]		;AN000;
 23427 000016C4 30E4                    	xor	ah,ah			;AN000; ax = maxs
 23428 000016C6 D1E0                    	shl	ax,1			;AN000;
 23429 000016C8 40                      	inc	ax			;AN000; ax = ax*2+1
 23430 000016C9 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 23431 000016CB 268A0F                  	mov	cl,[es:bx]		;AN000;
 23432 000016CE 30ED                    	xor	ch,ch			;AN000; cx = maxk
 23433                                  	;or	cx,cx			;AN000; at least one keyword ?
 23434                                  	;jz	short _$P_Key_Not_Found	;AN000;
 23435                                  	; 07/07/2023
 23436 000016D0 E30F                    	jcxz	_$P_Key_Not_Found	; no
 23437                                  
 23438 000016D2 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 23439                                  
 23440                                  _$P_Key_Mgr_Loop:			;AN000;
 23441 000016D3 53                      	push	bx			;AN000;
 23442 000016D4 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 23443 000016D7 E85A00                  	call	_$P_Chk_Key_Control	;AN000; do process for keyword
 23444 000016DA 5B                      	pop	bx			;AN000;
 23445 000016DB 730B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 23446                                  
 23447 000016DD 43                      	inc	bx			;AC035; add '2' to
 23448 000016DE 43                      	inc	bx			;AC035;  BX reg
 23449                                  					;AN000; else bx points to the next CONTROL
 23450 000016DF E2F2                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 23451                                  
 23452                                  _$P_Key_Not_Found:			;AN000;
 23453 000016E1 2EC706[EA14]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 23454                                  _$P_Return_to_Caller:			;AN000;
 23455 000016E8 5D                      	pop	bp			;AN000;
 23456 000016E9 5F                      	pop	di			;AN000;
 23457 000016EA 5B                      	pop	bx			;AN000;
 23458 000016EB 2E8B0E[E814]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 23459 000016F0 2EA1[EA14]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 23460 000016F4 2E8B36[EC14]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 23461 000016F9 2E8B16[EE14]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 23462 000016FE 2E8A1E[F014]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 23463                                  _$P_Single_Exit: 			;AN000;
 23464 00001703 F8                      	clc				;AN000;
 23465 00001704 C3                      	retn				;AN000;
 23466                                  
 23467                                  ;***********************************************************************
 23468                                  ; _$P_Chk_Pos_Control
 23469                                  ;
 23470                                  ; Function: Parse CONTROL block for a positional
 23471                                  ;
 23472                                  ; Input:     ES:BX -> CONTROL block
 23473                                  ;	     cs:SI -> _$P_STRING_BUF
 23474                                  ;
 23475                                  ; Output:    None
 23476                                  ;
 23477                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 23478                                  ;
 23479                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 23480                                  ;***********************************************************************
 23481                                  
 23482                                  _$P_Chk_Pos_Control:
 23483 00001705 50                      	push	ax			;AN000;
 23484                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 23485 00001706 268B07                  	mov	ax,[es:bx]
 23486                                  	; 12/12/2022
 23487 00001709 A802                    	test	al,_$P_Repeat
 23488                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 23489 0000170B 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 23490                                  
 23491 0000170D 2EFF06[E814]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 23492                                  _$P_CPC00:				;AN000;
 23493 00001712 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 23494 00001716 7517                    	jne	short _$P_CPC01		;AN000;
 23495                                  
 23496                                  	; 12/12/2022
 23497 00001718 A801                    	test	al,_$P_Optional
 23498                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 23499 0000171A 7509                    	jnz	short _$P_CPC02		;AN000;
 23500                                  
 23501 0000171C 2EC706[EA14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 23502 00001723 EB0D                    	jmp	short _$P_CPC_Exit	;AN000;
 23503                                  
 23504                                  _$P_CPC02:				;AN000;
 23505 00001725 50                      	push	ax			;AN000;
 23506                                  	;mov	al,_$P_String		;AN000; if it is optional return NULL
 23507                                  	;mov	ah,_$P_No_Tag		;AN000; no item tag indication
 23508                                  	; 07/07/2023
 23509 00001726 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23510 00001729 E89800                  	call	_$P_Fill_Result		;AN000;
 23511 0000172C 58                      	pop	ax			;AN000;
 23512 0000172D EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 23513                                  
 23514                                  _$P_CPC01:				;AN000;
 23515 0000172F E81701                  	call	_$P_Check_Match_Flags	;AN000;
 23516                                  _$P_CPC_Exit:				;AN000;
 23517 00001732 58                      	pop	ax			;AN000;
 23518 00001733 C3                      	retn				;AN000;
 23519                                  
 23520                                  ;***********************************************************************
 23521                                  ; _$P_Chk_Key_Control
 23522                                  ;
 23523                                  ; Function: Parse CONTROL block for a keyword
 23524                                  ;
 23525                                  ; Input:     ES:BX -> CONTROL block
 23526                                  ;	     cs:SI -> _$P_STRING_BUF
 23527                                  ;
 23528                                  ; Output:    CY = 1 : not match
 23529                                  ;
 23530                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 23531                                  ;
 23532                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 23533                                  ;***********************************************************************
 23534                                  
 23535                                  _$P_Chk_Key_Control:
 23536 00001734 F9                      	stc				;AN000; this logic works when the KeySW
 23537 00001735 C3                      	retn				;AN000; is reset.
 23538                                  
 23539                                  ;***********************************************************************
 23540                                  ; _$P_Search_KEYorSW:
 23541                                  ;
 23542                                  ; Function: Seach specified keyword or switch from CONTROL
 23543                                  ;
 23544                                  ; Input:     ES:BX -> CONTROL block
 23545                                  ;	     cs:SI -> _$P_STRING_BUF
 23546                                  ;
 23547                                  ; Output:    CY = 1 : not match
 23548                                  ;
 23549                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 23550                                  ;***********************************************************************
 23551                                  
 23552                                  	; 25/10/2022 - Retro DOS v4.0
 23553                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 23554                                  
 23555                                  _$P_Search_KEYorSW:			;AN000;
 23556 00001736 55                      	push	bp			;AN000;
 23557 00001737 51                      	push	cx			;AN000;
 23558 00001738 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 23559 0000173C 30ED                    	xor	ch,ch			;AN000; and set it to cx
 23560                                  	;or	cx,cx			;AN000; No synonyms specified ?
 23561                                  	;jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 23562                                  	; 07/07/2023
 23563 0000173E E30D                    	jcxz	_$P_KEYorSW_Not_Found
 23564                                  
 23565                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 23566                                  	; 25/10/2022
 23567 00001740 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 23568                                  	;lea	bp,[bx+9]
 23569                                  _$P_KEYorSW_Loop:			;AN000;
 23570 00001743 E8BB03                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 23571 00001746 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 23572                                  
 23573 00001748 E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 23574 0000174B E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 23575                                  _$P_KEYorSW_Not_Found:			;AN000;
 23576 0000174D F9                      	stc				;AN000; indicate not found in synonym list
 23577 0000174E EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 23578                                  
 23579                                  _$P_KEYorSW_Found:			;AN000;
 23580 00001750 2E892E[FD14]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 23581 00001755 F8                      	clc				;AN000; indicate found
 23582                                  _$P_KEYorSW_Exit:			;AN000;
 23583 00001756 59                      	pop	cx			;AN000;
 23584 00001757 5D                      	pop	bp			;AN000;
 23585 00001758 C3                      	retn				;AN000;
 23586                                   
 23587                                  ;***********************************************************************
 23588                                  ; _$P_MoveBP_NUL
 23589                                  ;***********************************************************************
 23590                                  
 23591                                  _$P_MoveBP_NUL:
 23592                                  _$P_MBP_Loop:				;AN000;
 23593                                  	; 11/12/2022
 23594 00001759 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 23595                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 23596                                  	; (SYSINIT:18DBh)
 23597                                   	;cmp     byte [es:bp+0],0
 23598 0000175E 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 23599                                  
 23600 00001760 45                      	inc	bp			;AN000; until
 23601 00001761 EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 23602                                  
 23603                                  _$P_MBP_Exit:				;AN000;
 23604 00001763 45                      	inc	bp			;AN000; bp points to next to NULL
 23605 00001764 C3                      	retn				;AN000;
 23606                                  
 23607                                  ;***********************************************************************
 23608                                  ; _$P_Chk_SW_Control
 23609                                  ;
 23610                                  ; Function: Parse CONTROL block for a switch
 23611                                  ;
 23612                                  ; Input:     ES:BX -> CONTROL block
 23613                                  ;	     cs:SI -> _$P_STRING_BUF
 23614                                  ;
 23615                                  ; Output:    CY = 1 : not match
 23616                                  ;
 23617                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 23618                                  ;
 23619                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 23620                                  ;***********************************************************************
 23621                                  
 23622                                  _$P_Chk_SW_Control:
 23623                                  
 23624                                  ;IF SwSW				;AN000;(Check if switch is supported)
 23625                                  	;or	byte [cs:_$P_Flags+1],10h
 23626 00001765 2E800E[F614]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 23627 0000176B E8C8FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 23628 0000176E 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 23629                                  
 23630                                  	;and	[cs:_$P_Flags+],0EFh
 23631 00001770 2E8026[F614]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 23632                                  					;AC034; reset the indicator previously set
 23633 00001776 50                      	push	ax			;AN000; 	      /switch:
 23634 00001777 2EA1[F914]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 23635 0000177B 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 23636 0000177D 2E0106[F714]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 23637 00001782 58                      	pop	ax			;AN000;
 23638                                  
 23639 00001783 2E8B36[F914]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 23640 00001788 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 23641 0000178C 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 23642                                  
 23643 0000178E 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 23644 00001793 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 23645                                  
 23646 00001795 2EC706[EA14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 23647 0000179C EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 23648                                  
 23649                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 23650                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 23651 0000179E 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 23652 000017A2 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 23653                                  
 23654                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 23655                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 23656                                  	;test	word [es:bx],1
 23657                                  	; 12/12/2022
 23658                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 23659 000017A4 26F60701                	test	byte [es:bx],_$P_Optional
 23660 000017A8 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 23661                                  
 23662 000017AA 2EC706[EA14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 23663 000017B1 EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 23664                                  
 23665                                  _$P_CSW00:				;AN000;
 23666 000017B3 E89300                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 23667 000017B6 F8                      	clc				;AN000; indicate match
 23668                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 23669                                  	; 12/12/2022
 23670 000017B7 C3                      	retn
 23671                                  
 23672                                  _$P_Chk_SW_Err0: 			;AN000;
 23673 000017B8 F9                      	stc				;AN000; not found in switch synonym list
 23674                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 23675                                  	; 12/12/2022
 23676 000017B9 C3                      	retn	
 23677                                  
 23678                                  _$P_Chk_SW_Exit: 			;AN000;
 23679 000017BA 50                      	push	ax			;AN000;
 23680                                  	;mov	al,_$P_String		;AN000;
 23681                                  	;mov	ah,_$P_No_Tag		;AN000;
 23682                                  	; 07/07/2023
 23683 000017BB B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23684 000017BE E80300                  	call	_$P_Fill_Result		;AN000; set result buffer
 23685 000017C1 58                      	pop	ax			;AN000;
 23686 000017C2 F8                      	clc				;AN000;
 23687                                  _$P_Chk_SW_Single_Exit:			;AN000;
 23688 000017C3 C3                      	retn				;AN000;
 23689                                  ;ELSE					;AN000;(of IF SwSW)
 23690                                  ;	stc				;AN000; this logic works when the SwSW
 23691                                  ;	retn				;AN000; is reset.
 23692                                  
 23693                                  ;***********************************************************************
 23694                                  ; _$P_Fill_Result
 23695                                  ;
 23696                                  ; Function: Fill the result buffer
 23697                                  ;
 23698                                  ; Input:    AH = Item tag
 23699                                  ;	    AL = type
 23700                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 23701                                  ;		  AL = 2: DX has index(offset) into value list
 23702                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 23703                                  ;		  AL = 7: DX has year, CL has month and CH has date
 23704                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 23705                                  ;			  amd CH has hundredths
 23706                                  ;		  AL = else: cs:SI points to returned string buffer
 23707                                  ;	    ES:BX -> CONTROL block
 23708                                  ;
 23709                                  ; Output:   None
 23710                                  ;
 23711                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 23712                                  ;
 23713                                  ; Vars: _$P_DX(W)
 23714                                  ;***********************************************************************
 23715                                  
 23716                                  _$P_Fill_Result:
 23717 000017C4 57                      	push	di			;AN000;
 23718 000017C5 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 23719                                  					;AN000; di points to result buffer
 23720 000017C9 2E893E[EE14]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 23721 000017CE 268805                  	mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 23722 000017D1 26886501                	mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 23723 000017D5 50                      	push	ax			;AN000;
 23724 000017D6 2EA1[FD14]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 23725 000017DA 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 23726                                  					;AN000;   then set it to the result
 23727 000017DE 58                      	pop	ax			;AN000;
 23728                                  _$P_RLT04:				;AN000;
 23729 000017DF 3C01                    	cmp	al,_$P_Number		;AN000; if number
 23730 000017E1 750A                    	jne	short _$P_RLT00		;AN000;
 23731                                  
 23732                                  _$P_RLT02:				;AN000;
 23733 000017E3 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 23734 000017E7 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 23735 000017EB EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 23736                                  
 23737                                  _$P_RLT00:				;AN000;
 23738 000017ED 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 23739 000017EF 7506                    	jne	short _$P_RLT01		;AN000;
 23740                                  
 23741 000017F1 26895504                	mov	word [es:di+_$P_Result_Blk.Picked_Val],dx 
 23742                                  					;AN000; then store list index
 23743 000017F5 EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 23744                                  
 23745                                  _$P_RLT01:				;AN000;
 23746 000017F7 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 23747 000017F9 74E8                    	je	short _$P_RLT02		;AN000;
 23748                                  
 23749 000017FB 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 23750 000017FD 74E4                    	je	short _$P_RLT02		;AN000;
 23751                                  
 23752 000017FF 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 23753 00001801 7506                    	jne	short _$P_RLT03		;AN000;
 23754                                  
 23755 00001803 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 23756 00001807 EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 23757                                  
 23758                                  _$P_RLT03:				;AN000;
 23759 00001809 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 23760 0000180B 750F                    	jne	short _$P_RLT05		;AN000;
 23761                                  
 23762 0000180D 2EA1[F714]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 23763 00001811 40                      	inc	ax			;AN000; skip left Parentheses
 23764 00001812 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 23765 00001816 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 23766 0000181A EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 23767                                  
 23768                                  _$P_RLT05:				;AN000;
 23769                                  ;------------------------  AL = 3, 5, or 9
 23770 0000181C 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 23771                                  					;AN000; store offset of STRING_BUF
 23772 00001820 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 23773                                  					;AN031; store segment of STRING_BUF
 23774 00001824 50                      	push	ax			;AN000;
 23775 00001825 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 23776                                  					;AN000; need CAPS by file table?
 23777 0000182A 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 23778                                  
 23779 0000182C B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 23780 0000182E EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 23781                                  
 23782                                  _$P_RLT_CAP00:				;AN000;
 23783 00001830 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 23784                                  					;AN000; need CAPS by char table ?
 23785 00001835 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 23786                                  
 23787 00001837 B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 23788                                  _$P_RLT_CAP02:				;AN000;
 23789 00001839 E8DF00                  	call	_$P_Do_CAPS_String	;AN000; process CAPS along the table
 23790                                  _$P_RLT_CAP01:				;AN000;
 23791 0000183C 58                      	pop	ax			;AN000;
 23792 0000183D 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 23793                                  					;AN000; removing colon at end ?
 23794 00001842 7403                    	jz	short _$P_RLT_Exit	;AN000;
 23795                                  
 23796 00001844 E8AE00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 23797                                  _$P_RLT_Exit:				;AN000;
 23798 00001847 5F                      	pop	di			;AN000;
 23799 00001848 C3                      	retn				;AN000;
 23800                                  
 23801                                  ;***********************************************************************
 23802                                  ; _$P_Check_Match_Flags
 23803                                  ;
 23804                                  ; Function:  Check the match_flags and make the exit code and set the
 23805                                  ;	     result buffer
 23806                                  ;
 23807                                  ;	    Check for types in this order:
 23808                                  ;		Complex
 23809                                  ;		Date
 23810                                  ;		Time
 23811                                  ;		Drive
 23812                                  ;		Filespec
 23813                                  ;		Quoted String
 23814                                  ;		Simple String
 23815                                  ;
 23816                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23817                                  ;	     ES:BX -> CONTROL block
 23818                                  ;
 23819                                  ; Output:    None
 23820                                  ;
 23821                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 23822                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 23823                                  ;	     _$P_Drive_Format
 23824                                  ;***********************************************************************
 23825                                  
 23826                                  	; 25/10/2022 - Retro DOS v4.0
 23827                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 23828                                  
 23829                                  	; 12/12/2022
 23830                                  _$P_Check_Match_Flags:
 23831 00001849 2EC606[8D15]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 23832                                  					;AN033;AC034;; clear filespec error flag.
 23833 0000184F 50                      	push	ax			;AN000;
 23834                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 23835 00001850 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 23836 00001853 09C0                    	or	ax,ax			;AC035; test ax for zero
 23837 00001855 7517                    	jnz	short _$P_Mat		;AN000; (tm12)
 23838 00001857 50                      	push	ax			;AN000; (tm12)
 23839 00001858 53                      	push	bx			;AN000; (tm12)
 23840 00001859 52                      	push	dx			;AN000; (tm12)
 23841 0000185A 57                      	push	di			;AN000; (tm12)
 23842 0000185B 2EC706[EA14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 23843                                  	;mov	ah,_$P_No_Tag		;AN000; (tm12)
 23844                                  	;mov	al,_$P_String		;AN000; (tm12)
 23845                                  	; 07/07/2023
 23846 00001862 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23847 00001865 E85CFF                  	call	_$P_Fill_Result		;AN000; (tm12)
 23848 00001868 5F                      	pop	di			;AN000; (tm12)
 23849 00001869 5A                      	pop	dx			;AN000; (tm12)
 23850 0000186A 5B                      	pop	bx			;AN000; (tm12)
 23851 0000186B 58                      	pop	ax			;AN000; (tm12)
 23852                                  	; 12/12/2022
 23853                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 23854                                  	; 12/12/2022
 23855                                  ;_$P_Mat: 				;AN000; (tm12)
 23856                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 23857                                  _$P_Bridge:
 23858 0000186C EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 23859                                  	
 23860                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23861                                  	; (SYSINIT:19F9h)
 23862                                  	; 12/12/2022
 23863                                  	;nop	; db 90h
 23864                                  
 23865                                  ; 12/12/2022
 23866                                  _$P_Mat:
 23867                                  _$P_Match03:				;AN000;
 23868                                  	;test	ax,_$P_Num_Val ; 8000h	;AN000; Numeric value
 23869                                  	; 07/07/2023
 23870 0000186E F6C480                  	test	ah,(_$P_Num_Val>>8) ; 80h
 23871 00001871 7412                    	jz	short _$P_Match04	;AN000;
 23872                                  
 23873 00001873 2EC706[EA14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23874 0000187A E81F01                  	call	_$P_Value		;AN000; do process
 23875 0000187D 2E833E[EA14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23876 00001883 7557                    	jne	short _$P_Match_Exit	;AN000;
 23877                                  _$P_Match04:				;AN000;
 23878                                  	;test	ax,_$P_SNum_Val ; 4000h	;AN000; Signed numeric value
 23879                                  	; 07/07/2023
 23880 00001885 F6C440                  	test	ah,(_$P_SNum_Val>>8) ; 40h
 23881 00001888 7412                    	jz	short _$P_Match05	;AN000;
 23882                                  
 23883 0000188A 2EC706[EA14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23884 00001891 E8E400                  	call	_$P_SValue		;AN000; do process
 23885 00001894 2E833E[EA14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23886 0000189A 7540                    	jne	short _$P_Match_Exit	;AN000;
 23887                                  _$P_Match05:				;AN000;
 23888                                  	;test	ax,_$P_Drv_Only ; 100h	;AN000; Drive only
 23889                                  	; 07/07/2023
 23890 0000189C F6C401                  	test	ah,(_$P_Drv_Only>>8) ; 1
 23891 0000189F 7415                    	jz	short _$P_Match06	;AN000;
 23892                                  
 23893 000018A1 2EC706[EA14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23894 000018A8 E8F402                  	call	_$P_File_Format		;AN000; 1st, call file format
 23895 000018AB E87503                  	call	_$P_Drive_Format	;AN000; check drive format, next
 23896 000018AE 2E833E[EA14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23897 000018B4 7526                    	jne	short _$P_Match_Exit	;AN000;
 23898                                  _$P_Match06:				;AN000;
 23899                                  	;test	ax,_$P_File_Spc ; 200h	;AN000; File spec
 23900                                  	; 07/07/2023
 23901 000018B6 F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 23902 000018B9 7412                    	jz	short _$P_Match07	;AN000;
 23903                                  
 23904 000018BB 2EC706[EA14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23905 000018C2 E8DA02                  	call	_$P_File_Format		;AN000; do process
 23906 000018C5 2E833E[EA14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23907 000018CB 750F                    	jne	short _$P_Match_Exit	;AN000;
 23908                                  _$P_Match07:				;AN000;
 23909                                  	;test	ax,_$P_Simple_S	; 2000h	;AN000; Simple string
 23910                                  	; 07/07/2023
 23911 000018CD F6C420                  	test	ah,(_$P_Simple_S>>8) ; 20h
 23912 000018D0 740A                    	jz	short _$P_Match09	;AN000;
 23913                                  
 23914 000018D2 2EC706[EA14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23915 000018D9 E8BC01                  	call	_$P_Simple_String	;AN000; do process
 23916                                  _$P_Match09:				;AN000;
 23917                                  _$P_Match_Exit:				;AN000;
 23918 000018DC 2E833E[8D15]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 23919 000018E2 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23920 000018E4 2E833E[EA14]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 23921 000018EA 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23922 000018EC 2EC706[EA14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 23923                                  _$P_Match2_Exit: 			;AN033;
 23924 000018F3 58                      	pop	ax			;AN000;
 23925 000018F4 C3                      	retn				;AN000;
 23926                                  
 23927                                  ;***********************************************************************
 23928                                  ; _$P_Remove_Colon;
 23929                                  ;
 23930                                  ; Function: Remove colon at end
 23931                                  ;
 23932                                  ; Input:    cs:SI points to string buffer to be examineed
 23933                                  ;
 23934                                  ; Output:   None
 23935                                  ;
 23936                                  ; Use:	_$P_Chk_DBCS
 23937                                  ;***********************************************************************
 23938                                  
 23939                                  _$P_Remove_Colon:
 23940 000018F5 50                      	push	ax			;AN000;
 23941 000018F6 56                      	push	si			;AN000;
 23942                                  _$P_RCOL_Loop:				;AN000;
 23943 000018F7 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23944 000018FA 08C0                    	or	al,al			;AN000; end of string ?
 23945 000018FC 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 23946                                  
 23947 000018FE 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 23948 00001900 750D                    	jne	short _$P_RCOL00	;AN000;
 23949                                  
 23950 00001902 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 23951 00001907 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 23952                                  
 23953 00001909 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 23954 0000190D EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 23955                                  
 23956                                  _$P_RCOL00:				;AN000;
 23957 0000190F E81104                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 23958 00001912 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 23959                                  
 23960 00001914 46                      	inc	si			;AN000; if yes, skip trailing byte
 23961                                  _$P_RCOL01:				;AN000;
 23962 00001915 46                      	inc	si			;AN000; si points to next byte
 23963 00001916 EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 23964                                  
 23965                                  _$P_RCOL_Exit:				;AN000;
 23966 00001918 5E                      	pop	si			;AN000;
 23967 00001919 58                      	pop	ax			;AN000;
 23968 0000191A C3                      	retn				;AN000;
 23969                                  
 23970                                  ;***********************************************************************
 23971                                  ; _$P_Do_CAPS_String;
 23972                                  ;
 23973                                  ; Function: Perform capitalization along with the file case map table
 23974                                  ;	    or character case map table.
 23975                                  ;
 23976                                  ; Input:    AL = 2 : Use character table
 23977                                  ;	    AL = 4 : Use file table
 23978                                  ;	    cs:SI points to string buffer to be capitalized
 23979                                  ;
 23980                                  ; Output:   None
 23981                                  ;
 23982                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 23983                                  ;***********************************************************************
 23984                                  
 23985                                  _$P_Do_CAPS_String:
 23986 0000191B 56                      	push	si			;AN000;
 23987 0000191C 52                      	push	dx			;AN000;
 23988 0000191D 88C2                    	mov	dl,al			;AN000; save info id
 23989                                  _$P_DCS_Loop:				;AN000;
 23990 0000191F 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 23991 00001922 E8FE03                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 23992 00001925 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 23993                                  
 23994 00001927 08C0                    	or	al,al			;AN000; end of string ?
 23995 00001929 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 23996                                  
 23997 0000192B E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 23998 0000192E 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 23999 00001931 EB01                    	jmp	short _$P_DCS01		;AN000; process next
 24000                                  _$P_DCS00:				;AN000;
 24001 00001933 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 24002                                  _$P_DCS01:				;AN000;
 24003 00001934 46                      	inc	si			;AN000; si point to next byte
 24004 00001935 EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 24005                                  _$P_DCS_Exit:				;AN000;
 24006 00001937 5A                      	pop	dx			;AN000;
 24007 00001938 5E                      	pop	si			;AN000;
 24008 00001939 C3                      	retn
 24009                                  
 24010                                  ;***********************************************************************
 24011                                  ; _$P_Do_CAPS_Char;
 24012                                  ;
 24013                                  ; Function: Perform capitalization along with the file case map table
 24014                                  ;	    or character case map table.
 24015                                  ;
 24016                                  ; Input:    DL = 2 : Use character table
 24017                                  ;	    DL = 4 : Use file table
 24018                                  ;	    AL = character to be capitalized
 24019                                  ;
 24020                                  ; Output:   None
 24021                                  ;
 24022                                  ; Use:	INT 21h /w AH=65h
 24023                                  ;***********************************************************************
 24024                                  
 24025                                  _$P_Do_CAPS_Char:
 24026 0000193A 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 24027 0000193C 730B                    	jae	short _$P_DCC_Go	;AN000; no
 24028                                  
 24029 0000193E 3C61                    	cmp	al,"a"                  ;AN000; check if  "a" <= AL <= "z"
 24030 00001940 7235                    	jb	short _$P_CAPS_Ret	;AN000;   
 24031                                  
 24032 00001942 3C7A                    	cmp	al,"z"                  ;AN000;
 24033 00001944 7731                    	ja	short _$P_CAPS_Ret	;AN000;
 24034                                  
 24035 00001946 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000; make CAPS
 24036                                  	;jmp	short _$P_CAPS_Ret	;AN000;
 24037                                  	; 07/07/2023
 24038 00001948 C3                      	retn
 24039                                  
 24040                                  _$P_DCC_Go:				;AN000;
 24041 00001949 53                      	push	bx			;AN000;
 24042 0000194A 06                      	push	es			;AN000;
 24043 0000194B 57                      	push	di			;AN000;
 24044                                  
 24045                                  	;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 24046 0000194C 8D3E[7F15]              	lea	di,[_$P_Char_CAP_Ptr]
 24047                                  _$P_DCC00:				;AN000;
 24048 00001950 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 24049 00001953 7415                    	je	short _$P_DCC01		;AN000; no
 24050                                  
 24051                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 24052                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 24053                                  ; call, regardless of what base register is currently be defined as cs.
 24054                                  
 24055 00001955 50                      	push	ax			;AN000; get CAPS table thru DOS call
 24056 00001956 51                      	push	cx			;AN000;
 24057 00001957 52                      	push	dx			;AN000;
 24058                                  
 24059 00001958 0E                      	push	cs			;AC036; pass current base seg into
 24060                                  					;(Note: this used to push CS.  BUG...
 24061 00001959 07                      	pop	es			;AN000;   ES reg, required for
 24062                                  					;get extended country information
 24063                                  	;mov	al,dl ; function	;AN000; upper case table
 24064                                  	; 07/07/2023
 24065 0000195A 92                      	xchg	ax,dx
 24066 0000195B B465                    	mov	ah,_$P_DOS_Get_TBL ; 65h ;AN000; get extended CDI
 24067 0000195D BBFFFF                  	mov	bx,_$P_DOSTBL_Def ; -1	;AN000; get active CON
 24068 00001960 B90500                  	mov	cx,_$P_DOSTBL_BL ; 5	;AN000; buffer length
 24069                                  	;mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 24070                                  	; 07/07/2023
 24071 00001963 89DA                    	mov	dx,bx ; 0FFFFh
 24072                                  					;DI already set to point to buffer
 24073 00001965 CD21                    	int	21h			;AN000; es:di point to buffer that
 24074                                  					;now has been filled in with info
 24075 00001967 5A                      	pop	dx			;AN000;
 24076 00001968 59                      	pop	cx			;AN000;
 24077 00001969 58                      	pop	ax			;AN000;
 24078                                  
 24079                                  _$P_DCC01:				;AN000;
 24080                                  
 24081                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 24082                                  ; by the previous GET COUNTRY INFO DOS call. This usage of ES is made
 24083                                  ; regardless of which base reg is currently the cs reg.
 24084                                  
 24085                                  	;mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 24086                                  	;mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 24087                                  	; 07/07/2023
 24088 0000196A 2EC45D01                	les	bx,[cs:di+_$P_DOS_TBL.Off]
 24089 0000196E 43                      	inc	bx			;AC035; add '2' to
 24090 0000196F 43                      	inc	bx			;AC035;  BX reg
 24091                                  					;AN000; skip length field
 24092 00001970 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 24093                                  	;xlat	es:[bx] 		;AN000; perform case map
 24094 00001972 26                      	es
 24095 00001973 D7                      	xlat
 24096 00001974 5F                      	pop	di			;AN000;
 24097 00001975 07                      	pop	es			;AN000;
 24098 00001976 5B                      	pop	bx			;AN000;
 24099                                  _$P_CAPS_Ret:				;AN000;
 24100 00001977 C3                      	retn				;AN000;
 24101                                  
 24102                                  ;***********************************************************************
 24103                                  ; _$P_Value / _$P_SValue
 24104                                  ;
 24105                                  ; Function:  Make 32bit value from cs:SI and see value list
 24106                                  ;	     and make result buffer.
 24107                                  ;	     _$P_SValue is an entry point for the signed value
 24108                                  ;	     and this will simply call _$P_Value after the handling
 24109                                  ;	     of the sign character, "+" or "-"
 24110                                  ;
 24111                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24112                                  ;	     ES:BX -> CONTROL block
 24113                                  ;
 24114                                  ; Output:    None
 24115                                  ;
 24116                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 24117                                  ;
 24118                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 24119                                  ;***********************************************************************
 24120                                  
 24121                                  	; 26/10/2022 - Retro DOS v4.0
 24122                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 24123                                  
 24124                                  	; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 24125                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1C46h)  	
 24126                                  _$P_SValue:				;AN000; when signed value here
 24127 00001978 50                      	push	ax			;AN000;
 24128 00001979 2E800E[F614]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 24129 0000197F 2E8026[F614]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 24130                                  	;and	byte [cs:_$P_Flags2],~_$P_Neg ; 07/07/2023 
 24131 00001985 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 24132 00001988 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 24133 0000198A 740A                    	je	short _$P_SVal00	;AN000;
 24134                                  
 24135 0000198C 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 24136 0000198E 7507                    	jne	short _$P_Sval01	;AN000; else
 24137                                  
 24138 00001990 2E800E[F614]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 24139                                  _$P_SVal00:				;AN000;
 24140 00001996 46                      	inc	si			;AN000; skip sign char
 24141                                  _$P_Sval01:				;AN000;
 24142 00001997 E80200                  	call	_$P_Value		;AN000; and process value
 24143 0000199A 58                      	pop	ax			;AN000;
 24144 0000199B C3                      	retn
 24145                                  
 24146                                  ;***********************************************************************
 24147                                  
 24148                                  	; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 24149                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1C6Ah)
 24150                                  
 24151                                  	; 26/10/2022
 24152                                  _$P_Value:				;AN000;
 24153 0000199C 50                      	push	ax			;AN000;
 24154 0000199D 51                      	push	cx			;AN000;
 24155 0000199E 52                      	push	dx			;AN000;
 24156 0000199F 56                      	push	si			;AN000;
 24157 000019A0 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 24158 000019A2 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 24159 000019A4 53                      	push	bx			;AN000; save control pointer
 24160                                  _$P_Value_Loop:				;AN000;
 24161 000019A5 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 24162 000019A8 08C0                    	or	al,al			;AN000; end of line ?
 24163 000019AA 743C                    	jz	short _$P_Value00	;AN000;
 24164                                  
 24165 000019AC E8DD00                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 24166 000019AF 7233                    	jc	short _$P_Value_Err0	;AN000;
 24167                                  
 24168 000019B1 30E4                    	xor	ah,ah			;AN000;
 24169 000019B3 89C5                    	mov	bp,ax			;AN000; save binary number
 24170                                  
 24171                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 24172                                  ; Ref: Disassembled PCDOS 7.1 IBMBIO.COM SYSINIT code
 24173                                  ;				Erdogan Tan - July 2023 
 24174                                  %if 0
 24175                                  	shl	dx,1			;AN000; to have 2*x
 24176                                  	rcl	cx,1			;AN000; shift left w/ carry
 24177                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24178                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 24179                                  
 24180                                  	mov	bx,dx			;AN000; save low(2*x)
 24181                                  	mov	ax,cx			;AN000; save high(2*x)
 24182                                  	shl	dx,1			;AN000; to have 4*x
 24183                                  	rcl	cx,1			;AN000; shift left w/ carry
 24184                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24185                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 24186                                  
 24187                                  	shl	dx,1			;AN000; to have 8*x
 24188                                  	rcl	cx,1			;AN000; shift left w/ carry
 24189                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24190                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 24191                                  
 24192                                  	add	dx,bx			;AN000; now have 10*x
 24193                                  	adc	cx,ax			;AN000; 32bit ADD
 24194                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24195                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 24196                                  
 24197                                  	add	dx,bp			;AN000; Add the current one degree decimal
 24198                                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 24199                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24200                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 24201                                  
 24202                                  	inc	si			;AN000; update pointer
 24203                                  	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 24204                                  ;_$P_Value_Err0:
 24205                                  %endif
 24206                                  ;****
 24207                                  %if 1
 24208                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 24209                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:2130h)
 24210                                  
 24211 000019B5 30E4                    	xor	ah,ah
 24212 000019B7 89C5                    	mov	bp,ax			; save binary number
 24213 000019B9 E81C00                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 24214 000019BC 89D3                    	mov	bx,dx			; ax:bx = 2*(cx:dx)
 24215 000019BE 89C8                    	mov	ax,cx
 24216 000019C0 E81500                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 24217 000019C3 E81200                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 24218 000019C6 01DA                    	add	dx,bx			; 8*(cx:dx)+2*(cx:dx) = 10*(cx:dx)
 24219 000019C8 11C1                    	adc	cx,ax
 24220 000019CA E80F00                  	call	_$P_Value_Chk_Add_OVF
 24221 000019CD 01EA                    	add	dx,bp			; Add the current one degree decimal
 24222                                  					; if carry, add 1 to high 16bit
 24223 000019CF 83D100                  	adc	cx,0
 24224 000019D2 E80700                  	call	_$P_Value_Chk_Add_OVF	; Overflow occurred ?
 24225                                  					; then error, exit (without return here)
 24226 000019D5 46                      	inc	si			; update pointer
 24227 000019D6 EBCD                    	jmp	short _$P_Value_Loop
 24228                                  
 24229                                  _$P_Value_2x_OVF:
 24230 000019D8 D1E2                    	shl	dx,1 			; to have 2*x
 24231 000019DA D1D1                    	rcl	cx,1			; shift left w/ carry
 24232                                  _$P_Value_Chk_Add_OVF:
 24233 000019DC E89B00                  	call	_$P_Check_OVF		; check overflow (for the last shift or add)
 24234 000019DF 7201                    	jc	short _$P_Value_OVF
 24235 000019E1 C3                      	retn
 24236                                  _$P_Value_OVF:
 24237 000019E2 44                      	inc	sp 			; skip "call" return address to the caller
 24238 000019E3 44                      	inc	sp
 24239                                  
 24240                                  ;_$P_Value_Err0:	
 24241                                  %endif
 24242                                  ;****
 24243                                  
 24244                                  _$P_Value_Err0:				;AN000;
 24245 000019E4 5B                      	pop	bx			;AN000;
 24246 000019E5 E98300                  	jmp	_$P_Value_Err		;AN000; Bridge
 24247                                  ;
 24248                                  _$P_Value00:				;AN000;
 24249 000019E8 5B                      	pop	bx			;AN000; restore control pointer
 24250 000019E9 2EF606[F614]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 24251 000019EF 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 24252                                  
 24253 000019F1 F7D1                    	not	cx			;AN000; +
 24254 000019F3 F7D2                    	not	dx			;AN000; |- Make 2's complement
 24255 000019F5 83C201                  	add	dx,1			;AN000; |
 24256 000019F8 83D100                  	adc	cx,0			;AN000; +
 24257                                  
 24258                                  _$P_Value01:				;AN000; / nval = 0
 24259 000019FB 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 24260 000019FF 268A04                  	mov	al,[es:si]		;AN000; get nval
 24261 00001A02 3C00                    	cmp	al,_$P_nval_None 	;AN000; no value list ?
 24262                                  	;*jne	short _$P_Value02	;AN000;
 24263                                  	;* 07/07/2023
 24264 00001A04 7459                    	je	short _$P_Value05
 24265                                  
 24266                                  	;mov	al,_$P_Number		;AN000; Set type
 24267                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24268                                  	; 07/07/2023
 24269                                  	;*mov	ax,(_$P_No_Tag<<8)|_$P_Number
 24270                                  	;*jmp	short _$P_Value_Exit	;AN000;
 24271                                  
 24272                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 24273                                  	; (SYSINIT:1BA5h)
 24274                                  	; 12/12/2022
 24275                                  	;nop	; db  90h
 24276                                  
 24277                                  _$P_Value02:				;AN000; / nval = 1
 24278                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 24279                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 24280                                  ;(tm07) jne	short _$P_Value03	;AN000;
 24281                                  
 24282 00001A06 46                      	inc	si			;AN000;
 24283 00001A07 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 24284 00001A0A 3C00                    	cmp	al,_$P_No_nrng		;AN000; (tm07)
 24285 00001A0C 745D                    	je	short _$P_Value03	;AN000; (tm07)
 24286                                  
 24287 00001A0E 46                      	inc	si			;AN000; si points to 1st item_tag
 24288                                  _$P_Val02_Loop:				;AN000;
 24289 00001A0F 2EF606[F614]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 24290 00001A15 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 24291                                  
 24292 00001A17 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 24293 00001A1B 7234                    	jb	short _$P_Val02_Next	;AN000;
 24294 00001A1D 7706                    	ja	short _$P_Val_In	;AN000;
 24295                                  
 24296 00001A1F 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 24297 00001A23 722C                    	jb	short _$P_Val02_Next	;AN000;
 24298                                  
 24299                                  _$P_Val_In:				;AN000;
 24300 00001A25 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 24301 00001A29 7726                    	ja	short _$P_Val02_Next	;AN000;
 24302 00001A2B 7237                    	jb	short _$P_Val_Found	;AN000;
 24303                                  
 24304 00001A2D 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 24305 00001A31 771E                    	ja	short _$P_Val02_Next	;AN000;
 24306                                  
 24307 00001A33 EB2F                    	jmp	short _$P_Val_Found	;AN000;
 24308                                  
 24309                                  _$P_Val02_Sign:				;AN000;
 24310 00001A35 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 24311 00001A39 7C16                    	jl	short _$P_Val02_Next	;AN000;
 24312 00001A3B 7F06                    	jg	short _$P_SVal_In	;AN000;
 24313                                  
 24314 00001A3D 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 24315 00001A41 7C0E                    	jl	short _$P_Val02_Next	;AN000;
 24316                                  
 24317                                  _$P_SVal_In:				;AN000;
 24318 00001A43 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 24319 00001A47 7F08                    	jg	short _$P_Val02_Next	;AN000;
 24320                                  
 24321 00001A49 7C19                    	jl	short _$P_Val_Found	;AN000;
 24322                                  
 24323 00001A4B 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 24324                                  	;jg	short _$P_Val02_Next	;AN000;
 24325                                  	;jmp	short _$P_Val_Found	;AN000;
 24326                                  	; 07/07/2023
 24327 00001A4F 7E13                    	jng	short _$P_Val_Found
 24328                                  
 24329                                  _$P_Val02_Next:				;AN000;
 24330 00001A51 83C609                  	add	si,_$P_Len_Range 	;AN000;
 24331 00001A54 FEC8                    	dec	al			;AN000; loop nrng times in AL
 24332 00001A56 75B7                    	jne	short _$P_Val02_Loop	;AN000;
 24333                                  					; / Not found
 24334 00001A58 2EC706[EA14]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 24335                                  	;mov	al,_$P_Number		;AN000;
 24336                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24337                                  _$P_Value05:		;* 07/07/2023
 24338                                  	; 07/07/2023
 24339 00001A5F B801FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Number
 24340 00001A62 EB0E                    	jmp	short _$P_Value_Exit	;AN000;
 24341                                  
 24342                                  _$P_Val_Found:				;AN000;
 24343 00001A64 B001                    	mov	al,_$P_Number		;AN000;
 24344 00001A66 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 24345 00001A69 EB07                    	jmp	short _$P_Value_Exit	;AN000;
 24346                                  
 24347                                  _$P_Value03:				;AN000; / nval = 2
 24348                                  
 24349                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 24350                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 24351                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 24352                                  ;(tm07) inc	si			;AN000;
 24353                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 24354                                  ;	mov	ah,$P_Len_Range 	;AN000;
 24355                                  ;	mul	ah			;AN000;  Skip nrng field
 24356                                  ;	inc	ax			;AN000;
 24357                                  ;	add	si,ax			;AN000; si points to nnval
 24358                                  ;	mov	al,es:[si]		;AN000; get nnval
 24359                                  ;	inc	si			;AN000; si points to 1st item_tag
 24360                                  ;$P_Val03_Loop:				;AN000;
 24361                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 24362                                  ;	jne	$P_Val03_Next		;AN000;
 24363                                  ;
 24364                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 24365                                  ;	je	$P_Val_Found		;AN000;
 24366                                  ;
 24367                                  ;$P_Val03_Next:				;AN000;
 24368                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 24369                                  ;	dec	al			;AN000; loop nval times in AL
 24370                                  ;	jne	$P_Val03_Loop		;AN000;
 24371                                  ;					;AN000; / Not found
 24372                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 24373                                  ;	mov	al,$P_Number		;AN000;
 24374                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 24375                                  ;	jmp	short $P_Value_Exit	;AN000;
 24376                                  ;
 24377                                  ;ENDIF					;AN000;(of Val2SW)
 24378                                  ;$P_Value04:
 24379                                  
 24380                                  _$P_Value_Err:				;AN000;
 24381 00001A6B 2EC706[EA14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24382                                  	;mov	al,_$P_String		;AN000; Set type
 24383                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24384                                  	; 07/07/2023
 24385                                  	;mov	ax,(_$P_No_Tag<<8)|_$P_String
 24386                                  _$P_Value_Exit:				;AN000;
 24387 00001A72 E84FFD                  	call	_$P_Fill_Result		;AN000;
 24388 00001A75 5E                      	pop	si			;AN000;
 24389 00001A76 5A                      	pop	dx			;AN000;
 24390 00001A77 59                      	pop	cx			;AN000;
 24391 00001A78 58                      	pop	ax			;AN000;
 24392 00001A79 C3                      	retn				;AN000;
 24393                                  
 24394                                  ; 28/03/2019 - Retro DOS v4.0
 24395                                  
 24396                                  ;***********************************************************************
 24397                                  ; _$P_Check_OVF
 24398                                  ;
 24399                                  ; Function:  Check if overflow is occurred with consideration of
 24400                                  ;	     signed or un-signed numeric value
 24401                                  ;
 24402                                  ; Input:     Flag register
 24403                                  ;
 24404                                  ; Output:    CY = 1  :	Overflow
 24405                                  ;
 24406                                  ; Vars:     _$P_Flags(R)
 24407                                  ;***********************************************************************
 24408                                  
 24409                                  	; 26/10/2022
 24410                                  _$P_Check_OVF:
 24411 00001A7A 9C                      	pushf				;AN000;
 24412 00001A7B 2EF606[F614]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 24413 00001A81 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 24414                                  
 24415 00001A83 9D                      	popf				;AN000; by the CY bit
 24416 00001A84 C3                      	retn				;AN000;
 24417                                  
 24418                                  _$P_COVF:				;AN000;
 24419 00001A85 9D                      	popf				;AN000; else,
 24420 00001A86 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 24421                                  
 24422 00001A88 F8                      	clc				;AN000; indicate it with CY bit
 24423 00001A89 C3                      	retn				;AN000; CY=0 means no overflow
 24424                                  
 24425                                  _$P_COVF00:				;AN000;
 24426 00001A8A F9                      	stc				;AN000; and CY=1 means overflow
 24427 00001A8B C3                      	retn				;AN000;
 24428                                  
 24429                                  ;***********************************************************************
 24430                                  ; _$P_0099;
 24431                                  ;
 24432                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 24433                                  ;
 24434                                  ; Input:     AL = character code
 24435                                  ;
 24436                                  ; Output:    CY = 1 : AL is not number
 24437                                  ;	     CY = 0 : AL contains binary value
 24438                                  ;***********************************************************************
 24439                                  
 24440                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 24441                                  %if 0
 24442                                  _$P_0099:
 24443                                  	cmp	al,"0"                  ;AN000;
 24444                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 24445                                  	; 12/12/2022
 24446                                  	jb	short _$P_0099Err2  ; cf=1
 24447                                  
 24448                                  	cmp	al,"9"                  ;AN000;
 24449                                  	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 24450                                  
 24451                                  	sub	al,"0"                  ;AN000; make char -> bin
 24452                                  	; 12/12/2022
 24453                                  	; cf=0	
 24454                                  	;clc				;AN000; indicate no error
 24455                                  	retn				;AN000;
 24456                                  
 24457                                  _$P_0099Err:				;AN000;
 24458                                  	stc				;AN000; indicate error
 24459                                  _$P_0099Err2: ; 12/12/2022	
 24460                                  	retn				;AN000;
 24461                                  %endif
 24462                                  
 24463                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 24464                                  %if 1
 24465                                  _$P_0099:
 24466 00001A8C 3C30                    	cmp	al,"0"                  ; cmp al,30h
 24467 00001A8E 7207                    	jb	short _$P_0099Err	; must be 0 =< al =< 9
 24468 00001A90 3C3A                    	cmp	al,"9"+1                ; cmp al,3Ah  
 24469 00001A92 F5                      	cmc				; cf=0 -> cf=1
 24470 00001A93 7202                    	jb	short _$P_0099Err
 24471 00001A95 2C30                    	sub	al,"0"	; sub al,30h 	; make char -> bin
 24472                                  	; cf=0
 24473                                  _$P_0099Err:	; cf=1
 24474 00001A97 C3                      	retn
 24475                                  %endif	
 24476                                  
 24477                                  ;***********************************************************************
 24478                                  ; _$P_Simple_String
 24479                                  ;
 24480                                  ; Function:  See value list for the simple string
 24481                                  ;	     and make result buffer.
 24482                                  ;
 24483                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24484                                  ;	     ES:BX -> CONTROL block
 24485                                  ;
 24486                                  ; Output:    None
 24487                                  ;
 24488                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 24489                                  ;
 24490                                  ; Vars: _$P_RC(W)
 24491                                  ;***********************************************************************
 24492                                  
 24493                                  _$P_Simple_String:
 24494 00001A98 50                      	push	ax			;AN000;
 24495 00001A99 53                      	push	bx			;AN000;
 24496 00001A9A 52                      	push	dx			;AN000;
 24497 00001A9B 57                      	push	di			;AN000;
 24498 00001A9C 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 24499 00001AA0 268A05                  	mov	al,[es:di]		;AN000; get nval
 24500 00001AA3 08C0                    	or	al,al			;AN000; no value list ?
 24501 00001AA5 7504                    	jnz	short _$P_Sim00		;AN000; then
 24502                                  
 24503 00001AA7 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24504 00001AA9 EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 24505                                  
 24506                                  _$P_Sim00:				;AN000;
 24507                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 24508 00001AAB 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 24509 00001AAD 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 24510                                  
 24511 00001AAF 47                      	inc	di			;AN000;
 24512 00001AB0 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 24513 00001AB3 B409                    	mov	ah,_$P_Len_Range 	;AN000;
 24514 00001AB5 F6E4                    	mul	ah			;AN000; Skip nrng field
 24515 00001AB7 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 24516 00001AB8 01C7                    	add	di,ax			;AN000; di points to nnval
 24517 00001ABA 268A05                  	mov	al,[es:di]		;AN000; get nnval
 24518 00001ABD B405                    	mov	ah,_$P_Len_Value 	;AN000;
 24519 00001ABF F6E4                    	mul	ah			;AN000; Skip nnval field
 24520 00001AC1 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 24521 00001AC2 01C7                    	add	di,ax			;AN000; di points to nstrval
 24522 00001AC4 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 24523 00001AC7 47                      	inc	di			;AC035; add '2' to
 24524 00001AC8 47                      	inc	di			;AC035;  DI reg
 24525                                  					;AN000; di points to 1st string in list
 24526                                  _$P_Sim_Loop:				;AN000;
 24527 00001AC9 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 24528 00001ACC E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 24529 00001ACF 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 24530                                  
 24531 00001AD1 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 24532 00001AD4 FEC8                    	dec	al			;AN000; loop nstval times in AL
 24533 00001AD6 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 24534                                  					;AN000; / Not found
 24535 00001AD8 2EC706[EA14]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 24536 00001ADF B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24537 00001AE1 EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 24538                                  
 24539                                  _$P_Sim_Found:				;AN000;
 24540 00001AE3 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 24541 00001AE7 B002                    	mov	al,_$P_List_Idx		;AN000;
 24542 00001AE9 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 24543 00001AEC EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 24544                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 24545                                  _$P_Sim01:				;AN000;
 24546 00001AEE 2EC706[EA14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24547 00001AF5 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24548                                  _$P_Sim_Exit:				;AN000;
 24549 00001AF7 B003                    	mov	al,_$P_String		;AN000; Set type
 24550                                  _$P_Sim_Exit0:				;AN000;
 24551 00001AF9 E8C8FC                  	call	_$P_Fill_Result		;AN000;
 24552 00001AFC 5F                      	pop	di			;AN000;
 24553 00001AFD 5A                      	pop	dx			;AN000;
 24554 00001AFE 5B                      	pop	bx			;AN000;
 24555 00001AFF 58                      	pop	ax			;AN000;
 24556 00001B00 C3                      	retn				;AN000;
 24557                                  
 24558                                  ;***********************************************************************
 24559                                  ; _$P_String_Comp:
 24560                                  ;
 24561                                  ; Function:  Compare two string
 24562                                  ;
 24563                                  ; Input:     cs:SI -> 1st string
 24564                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 24565                                  ;	     ES:BX -> CONTROL block
 24566                                  ;
 24567                                  ; Output:    CY = 1 if not match
 24568                                  ;
 24569                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 24570                                  ;
 24571                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 24572                                  ;***********************************************************************
 24573                                  
 24574                                  _$P_String_Comp:
 24575 00001B01 50                      	push	ax			;AN000;
 24576 00001B02 55                      	push	bp			;AN000;
 24577 00001B03 52                      	push	dx			;AN000;
 24578 00001B04 56                      	push	si			;AN000;
 24579 00001B05 B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 24580                                  _$P_SCOM_Loop:				;AN000;
 24581 00001B07 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 24582 00001B0A E81602                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 24583 00001B0D 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 24584                                  
 24585 00001B0F E828FE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 24586                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 24587 00001B12 2EF606[F614]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 24588 00001B18 740D                    	jz	short _$P_SCOM04	;AN000;
 24589                                  
 24590 00001B1A 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 24591 00001B1C 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 24592                                  
 24593 00001B1E 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 24594 00001B23 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 24595                                  
 24596 00001B25 EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 24597                                  
 24598                                  _$P_SCOM04:				;AN000;
 24599 00001B27 2EF606[F614]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 24600 00001B2D 740E                    	jz	short _$P_SCOM03	;AN000;
 24601                                  
 24602 00001B2F 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 24603 00001B31 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 24604                                  
 24605                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24606                                  	;cmp	byte [es:bp+0],_$P_NULL
 24607                                  	; 11/12/2022
 24608 00001B33 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 24609 00001B38 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 24610                                  
 24611                                  _$P_SCOM05:				;AN000;   found a match
 24612 00001B3A 46                      	inc	si			;AN000; si points to just after "=" or ":"
 24613 00001B3B EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 24614                                  
 24615                                  _$P_SCOM03:				;AN000;
 24616                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 24617                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24618                                  	;cmp	al,[es:bp+0]
 24619                                  	; 11/12/2022
 24620 00001B3D 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 24621 00001B41 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 24622                                  
 24623 00001B43 08C0                    	or	al,al			;AN000; end of line
 24624 00001B45 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 24625                                  
 24626                                  	; 12/12/2022
 24627                                  	;inc	si			;AN000; update operand pointer
 24628                                  	;inc	bp			;AN000;    and synonym pointer
 24629                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24630 00001B47 EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 24631                                  
 24632                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 24633                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24634                                  	;cmp	al,[es:bp+0]
 24635                                  	; 11/12/2022
 24636 00001B49 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 24637 00001B4D 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 24638                                  
 24639 00001B4F 46                      	inc	si			;AN000; else, load next byte
 24640 00001B50 2E8A04                  	mov	al,[cs:si]		;AN000; and
 24641 00001B53 45                      	inc	bp			;AN000;
 24642                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24643                                  	;cmp	al,[es:bp+0]
 24644                                  	; 11/12/2022
 24645 00001B54 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 24646 00001B58 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 24647                                  
 24648                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24649                                  	; 12/12/2022
 24650                                  _$P_SCOM01:
 24651 00001B5A 46                      	inc	si			;AN000; else update operand pointer
 24652 00001B5B 45                      	inc	bp			;AN000; 		and synonym pointer
 24653                                  ;_$P_SCOM01:				;AN000;
 24654 00001B5C EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 24655                                  
 24656                                  _$P_SCOM_Differ0:			;AN000;
 24657                                  ;IF SwSW				;AN000;(tm10)
 24658 00001B5E 2EF606[F614]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 24659 00001B64 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 24660                                  
 24661                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24662                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 24663                                  	; 12/12/2022
 24664 00001B66 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 24665 00001B6B 7407                    	je	short _$P_not_applicable ;AN000;(tm10)
 24666                                  
 24667                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24668                                  	;cmp	byte [es:bp+0],_$P_NULL
 24669                                  	; 11/12/2022
 24670 00001B6D 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 24671                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 24672 00001B72 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 24673                                  
 24674                                  _$P_not_applicable:			;AN000;(tm10)
 24675                                  ;ENDIF					;AN000;(tm10)
 24676                                  
 24677                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 24678                                  					;AN000; ignore colon option specified ?
 24679                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 24680                                  	; 12/12/2022
 24681 00001B74 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24682                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24683                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 24684 00001B78 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 24685                                  
 24686 00001B7A 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 24687 00001B7C 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 24688                                  
 24689                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24690                                  	;cmp	byte [es:bp+0],_$P_NULL
 24691                                  	; 11/12/2022
 24692 00001B7E 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 24693 00001B83 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 24694                                  
 24695 00001B85 EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 24696                                  
 24697                                  _$P_SCOM02:				;AN000;
 24698 00001B87 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 24699 00001B89 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 24700                                  
 24701                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24702                                  	;cmp	byte [es:bp+0],_$P_Colon
 24703                                  	; 11/12/2022
 24704 00001B8B 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 24705 00001B90 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 24706                                  
 24707                                  _$P_SCOM_Differ: 			;AN000;
 24708 00001B92 F9                      	stc				;AN000; indicate not found
 24709 00001B93 EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 24710                                  
 24711                                  _$P_SCOM_Same:				;AN000;
 24712                                  	; 12/12/2022
 24713                                  	; cf=0
 24714 00001B95 2E8936[F914]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 24715                                  	; 12/12/2022
 24716                                  	;clc				;AN000; indicate found
 24717                                  _$P_SCOM_Exit:				;AN000;
 24718 00001B9A 5E                      	pop	si			;AN000;
 24719 00001B9B 5A                      	pop	dx			;AN000;
 24720 00001B9C 5D                      	pop	bp			;AN000;
 24721 00001B9D 58                      	pop	ax			;AN000;
 24722 00001B9E C3                      	retn
 24723                                  
 24724                                  ; 30/03/2019
 24725                                  
 24726                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 24727                                  
 24728                                  ;***********************************************************************
 24729                                  ; _$P_File_Format;
 24730                                  ;
 24731                                  ; Function:  Check if the input string is valid file spec format.
 24732                                  ;	     And set the result buffer.
 24733                                  ;
 24734                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24735                                  ;	     ES:BX -> CONTROL block
 24736                                  ;
 24737                                  ; Output:    None
 24738                                  ;
 24739                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 24740                                  ;
 24741                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 24742                                  ;	_$P_SaveSI_Cmpx(R)
 24743                                  ;***********************************************************************
 24744                                  
 24745                                  _$P_File_Format:
 24746 00001B9F 50                      	push	ax			;AN000;
 24747 00001BA0 57                      	push	di			;AN000;
 24748 00001BA1 56                      	push	si			;AN000;
 24749 00001BA2 2E8B3E[F714]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 24750                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 24751 00001BA7 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 24752 00001BAA 08C0                    	or	al,al			;AN000; end of line ?
 24753 00001BAC 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 24754                                  
 24755 00001BAE E85D00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 24756 00001BB1 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 24757                                  
 24758 00001BB3 2EC606[8D15]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 24759                                  					;AN033;AC034;; set error flag- bad char.
 24760 00001BB9 5E                      	pop	si			;AN033;
 24761 00001BBA 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 24762 00001BBE 5F                      	pop	di			;AN033;
 24763 00001BBF EB3E                    	jmp	short _$P_FileF02	;AN033;
 24764                                  
 24765                                  _$P_FileF_Err:				;AN000;
 24766 00001BC1 5E                      	pop	si			;AN000;
 24767 00001BC2 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 24768 00001BC6 5F                      	pop	di			;AN000;
 24769                                  
 24770                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 24771                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 24772                                  	; 12/12/2022
 24773 00001BC7 26F60701                	test	byte [es:bx],_$P_Optional
 24774                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24775                                  	;test	word [es:bx],_$P_Optional
 24776 00001BCB 7532                    	jnz	short _$P_FileF02	;AN000;
 24777                                  
 24778 00001BCD 2EC706[EA14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 24779 00001BD4 EB29                    	jmp	short _$P_FileF02	;AN000;
 24780                                  
 24781                                  _$P_FileF03:				;AN000;
 24782 00001BD6 58                      	pop	ax			;AN000; discard save si
 24783 00001BD7 56                      	push	si			;AN000; save new si
 24784                                  _$P_FileF_Loop1: 			;AN000;
 24785 00001BD8 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 24786 00001BDB 08C0                    	or	al,al			;AN000; end of line ?
 24787 00001BDD 741E                    	jz	short _$P_FileF_RLT	;AN000;
 24788                                  
 24789 00001BDF E82C00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 24790 00001BE2 740B                    	je	short _$P_FileF00	;AN000;
 24791                                  
 24792 00001BE4 E83C01                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 24793 00001BE7 7302                    	jnc	short _$P_FileF01	;AN000;
 24794 00001BE9 47                      	inc	di			;AN000; if yes, skip next byte
 24795 00001BEA 46                      	inc	si			;AN000;
 24796                                  _$P_FileF01:				;AN000;
 24797 00001BEB 47                      	inc	di			;AN000;
 24798 00001BEC 46                      	inc	si			;AN000;
 24799 00001BED EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 24800                                  ;
 24801                                  _$P_FileF00:				;AN000;
 24802 00001BEF 2EA2[F014]              	mov	[cs:_$P_Terminator],al	;AC034;
 24803 00001BF3 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 24804 00001BF7 47                      	inc	di			;AN000;
 24805 00001BF8 2E893E[EC14]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 24806                                  _$P_FileF_RLT:				;AN000;
 24807 00001BFD 5E                      	pop	si			;AN000;
 24808 00001BFE 5F                      	pop	di			;AN000;
 24809                                  _$P_FileF02:				;AN000;
 24810 00001BFF 58                      	pop	ax			;AN000; (tm14)
 24811                                  	;test	ax,_$P_File_Spc	; 200h	;AN000; (tm14)
 24812                                  	; 08/07/2023
 24813 00001C00 F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 24814 00001C03 7408                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 24815                                  
 24816 00001C05 50                      	push	ax			;AN000; (tm14)
 24817                                  	;mov	ah,_$P_No_Tag		;AN000; set
 24818                                  	;mov	al,_$P_File_Spec 	;AN000; result
 24819                                  	; 08/07/2023
 24820 00001C06 B805FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_File_Spec ; 0FF05h
 24821                                  					      ; set result
 24822 00001C09 E8B8FB                  	call	_$P_Fill_Result		;AN000; buffer to file spec
 24823 00001C0C 58                      	pop	ax			;AN000;
 24824                                  
 24825                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 24826 00001C0D C3                      	retn				;AN000;
 24827                                  
 24828                                  ;***********************************************************************
 24829                                  ; _$P_FileSp_Chk
 24830                                  ;
 24831                                  ; Function:  Check if the input byte is one of file special characters
 24832                                  ;
 24833                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24834                                  ;	     AL = character code to be examineed
 24835                                  ;
 24836                                  ; Output:    ZF = 1 , AL is one of special characters
 24837                                  ;***********************************************************************
 24838                                  
 24839                                  _$P_FileSp_Chk:
 24840 00001C0E 53                      	push	bx			;AN000;
 24841 00001C0F 51                      	push	cx			;AN000;
 24842                                  	;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 24843 00001C10 8D1E[8415]              	lea	bx,[_$P_FileSp_Char] 	; "[]|<>+=;\"" at
 24844                                  					; MSDOS 6.21 IO.SYS - SYSINIT:1838h
 24845 00001C14 B90900                  	mov	cx,_$P_FileSp_Len ; 9	;AN000; load length of it
 24846                                  _$P_FileSp_Loop: 			;AN000;
 24847 00001C17 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 24848 00001C1A 7404                    	je	short _$P_FileSp_Exit	;AN000;
 24849                                  
 24850 00001C1C 43                      	inc	bx			;AN000;
 24851 00001C1D E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 24852                                  
 24853 00001C1F 41                      	inc	cx			;AN000; reset ZF
 24854                                  _$P_FileSp_Exit: 			;AN000;
 24855 00001C20 59                      	pop	cx			;AN000;
 24856 00001C21 5B                      	pop	bx			;AN000;
 24857 00001C22 C3                      	retn
 24858                                  
 24859                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 24860                                  
 24861                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 24862                                  
 24863                                  ;***********************************************************************
 24864                                  ; _$P_Drive_Format;
 24865                                  ;
 24866                                  ; Function:  Check if the input string is valid drive only format.
 24867                                  ;	     And set the result buffer.
 24868                                  ;
 24869                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24870                                  ;	     ES:BX -> CONTROL block
 24871                                  ;
 24872                                  ; Output:    None
 24873                                  ;
 24874                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 24875                                  ;
 24876                                  ; Vars: _$P_RC(W)
 24877                                  ;***********************************************************************
 24878                                  
 24879                                  _$P_Drive_Format:
 24880 00001C23 50                      	push	ax			;AN000;
 24881 00001C24 52                      	push	dx			;AN000;
 24882 00001C25 2E8A04                  	mov	al,[cs:si]		;AN000;
 24883 00001C28 08C0                    	or	al,al			;AN000; if null string
 24884 00001C2A 7436                    	je	short _$P_Drv_Exit	;AN000; do nothing
 24885                                  
 24886 00001C2C E8F400                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 24887 00001C2F 722A                    	jc	short _$P_Drv_Err	;AN000; (yes, error)
 24888                                  
 24889 00001C31 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d",":", 0 ?
 24890 00001C36 740D                    	je	short _$P_DrvF00	;AN000;
 24891                                  
 24892                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 24893                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 24894                                  	; 12/12/2022
 24895 00001C38 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24896                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24897                                  	;test	word [es:bx],_$P_Ig_Colon
 24898 00001C3C 741D                    	jz	short _$P_Drv_Err	;AN000;
 24899                                  
 24900 00001C3E 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d",0 ?
 24901 00001C43 7516                    	jne	short _$P_Drv_Err	;AN000;
 24902                                  
 24903                                  _$P_DrvF00:				;AN000;
 24904 00001C45 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 24905 00001C47 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 24906 00001C49 7210                    	jb	short _$P_Drv_Err	;AN000; in range of
 24907                                  
 24908 00001C4B 3C7A                    	cmp	al,"z"                  ;AN000; "a"-"z"
 24909 00001C4D 770C                    	ja	short _$P_Drv_Err	;AN000; if no, error
 24910                                  
 24911 00001C4F 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 24912 00001C51 88C2                    	mov	dl,al			;AN000; set
 24913                                  	;mov	ah,_$P_No_Tag		;AN000; result
 24914                                  	;mov	al,_$P_Drive		;AN000; buffer
 24915                                  	; 08/07/2023
 24916 00001C53 B806FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Drive ; 0FF06h
 24917                                  					      ; set result buffer
 24918 00001C56 E86BFB                  	call	_$P_Fill_Result		;AN000; to drive
 24919 00001C59 EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 24920                                  
 24921                                  _$P_Drv_Err:				;AN000;
 24922 00001C5B 2EC706[EA14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24923                                  _$P_Drv_Exit:				;AN000;
 24924 00001C62 5A                      	pop	dx			;AN000;
 24925 00001C63 58                      	pop	ax			;AN000;
 24926 00001C64 C3                      	retn				;AN000;
 24927                                  
 24928                                  ;ENDIF					;AN000;(of DrvSW)
 24929                                  
 24930                                  ;***********************************************************************
 24931                                  ; _$P_Skip_Delim;
 24932                                  ;
 24933                                  ; Function: Skip delimiters specified in the PARMS list, white space
 24934                                  ;	    and comma.
 24935                                  ;
 24936                                  ; Input:    DS:SI -> Command String
 24937                                  ;	    ES:DI -> Parameter List
 24938                                  ;
 24939                                  ; Output:   CY = 1 if the end of line encounterd
 24940                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 24941                                  ;	    AL = Last examineed character
 24942                                  ;
 24943                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 24944                                  ;
 24945                                  ; Vars:     _$P_Flags(R)
 24946                                  ;***********************************************************************
 24947                                  
 24948                                  _$P_Skip_Delim:
 24949                                  _$P_Skip_Delim_Loop:			;AN000;
 24950 00001C65 AC                      	lodsb				;AN000;
 24951 00001C66 E81E00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 24952 00001C69 7416                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 24953                                  
 24954 00001C6B E84E00                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 24955 00001C6E 7514                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 24956                                  
 24957 00001C70 2EF606[F614]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 24958 00001C76 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 24959                                  
 24960 00001C78 2EF606[F614]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 24961                                  	;jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 24962                                  	; 08/07/2023
 24963                                  	; cf=0
 24964 00001C7E 7505                    	jnz	short _$P_Skip_Delim_Exit
 24965 00001C80 C3                      	retn
 24966                                  
 24967                                  	;dec	si			;AN000; backup si for next call (tm08)
 24968                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 24969                                  	; 12/12/2022
 24970                                  	; cf=0
 24971                                  	; 08/07/2023
 24972                                  	;jmp	short _$P_Skip_Delim_Exit
 24973                                  
 24974                                  _$P_Skip_Delim_CY:			;AN000;
 24975 00001C81 F9                      	stc				;AN000; indicate EOL
 24976 00001C82 EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 24977                                  
 24978                                  _$P_Skip_Delim_NCY:			;AN000;
 24979 00001C84 F8                      	clc				;AN000; indicate non delim
 24980                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 24981 00001C85 4E                      	dec	si			;AN000;  backup index pointer
 24982                                  	; 08/07/2023
 24983                                  	; 12/12/2022
 24984                                  ;_$P_Exit_At_Extra:	 ; cf=0
 24985 00001C86 C3                      	retn				;AN000;
 24986                                  
 24987                                  	; 12/12/2022
 24988                                  ;_$P_Exit_At_Extra:			;AN000;
 24989                                  	;clc				;AN000; indicate extra delim
 24990                                  	;retn				;AN000;
 24991                                  
 24992                                  ;***********************************************************************
 24993                                  ; _$P_Chk_EOL;
 24994                                  ;
 24995                                  ; Function: Check if AL is one of End of Line characters.
 24996                                  ;
 24997                                  ; Input:    AL = character code
 24998                                  ;	    ES:DI -> Parameter List
 24999                                  ;
 25000                                  ; Output:   ZF = 1 if one of End of Line characters
 25001                                  ;**********************************************************************
 25002                                  
 25003                                  _$P_Chk_EOL:
 25004 00001C87 53                      	push	bx			;AN000;
 25005 00001C88 51                      	push	cx			;AN000;
 25006 00001C89 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 25007 00001C8B 742C                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 25008 00001C8D 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 25009 00001C8F 7428                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 25010                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 25011 00001C91 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 25012 00001C93 7424                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 25013                                  ;ENDIF					;AN028;
 25014 00001C95 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 25015                                  					;AN000; EOL character specified ?
 25016 00001C9A 721D                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 25017 00001C9C 31DB                    	xor	bx,bx			;AN000;
 25018 00001C9E 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 25019                                  					;AN000; get length of delimiter list
 25020 00001CA2 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 25021                                  	; 08/07/2023
 25022 00001CA5 31C9                    	xor	cx,cx ; *
 25023 00001CA7 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 25024 00001CAB 740B                    	je	short _$P_Chk_EOL_NZ	;AN000;
 25025                                  	; 08/07/2023
 25026                                  	;;xor	cx,cx			;AN000; Get number of extra character
 25027                                  	;xor	ch,ch ; *
 25028 00001CAD 268A09                  	mov	cl,[es:bx+di]		;AN000; 
 25029                                  _$P_Chk_EOL_Loop:			;AN000;
 25030 00001CB0 43                      	inc	bx			;AN000;
 25031 00001CB1 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 25032 00001CB4 7403                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 25033 00001CB6 E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 25034                                  	; 08/07/2023
 25035                                  	; cx=0
 25036                                  _$P_Chk_EOL_NZ:				;AN000;
 25037                                  	;cmp	al,_$P_CR		;AN000; reset ZF
 25038                                  	; 08/07/2023
 25039 00001CB8 41                      	inc	cx  ; zf=0  (cx=1) ; *
 25040                                  _$P_Chk_EOL_Exit:			;AN000;
 25041 00001CB9 59                      	pop	cx			;AN000;
 25042 00001CBA 5B                      	pop	bx			;AN000;
 25043 00001CBB C3                      	retn
 25044                                  
 25045                                  ;***********************************************************************
 25046                                  ; _$P_Chk_Delim;
 25047                                  ;
 25048                                  ; Function: Check if AL is one of delimiter characters.
 25049                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 25050                                  ;	    blanks.
 25051                                  ;
 25052                                  ; Input:    AL = character code
 25053                                  ;	    DS:SI -> Next Character
 25054                                  ;	    ES:DI -> Parameter List
 25055                                  ;
 25056                                  ; Output:   ZF = 1 if one of delimiter characters
 25057                                  ;	    SI points to the next character
 25058                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 25059                                  ;***********************************************************************
 25060                                   
 25061                                  	; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 25062                                  	; MSDOS 6.21 IO.SYS - SYSINIT:1FAEh
 25063                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:2451h) ; (Retro DOS v5.0)
 25064                                  
 25065                                  _$P_Chk_Delim:
 25066 00001CBC 53                      	push	bx			;AN000;
 25067 00001CBD 51                      	push	cx			;AN000;
 25068 00001CBE 2EC606[F014]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 25069                                  					;AC034; Assume terminated by space
 25070                                  	;and	byte [cs:_$P_Flags20,0DFh
 25071 00001CC4 2E8026[F614]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 25072 00001CCA 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 25073 00001CCC 7423                    	je	short _$P_Chk_Delim_Exit ;AN000;
 25074                                  
 25075 00001CCE 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 25076 00001CD0 741F                    	je	short _$P_Chk_Delim_Exit ;AN000;
 25077                                  
 25078 00001CD2 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 25079 00001CD4 741E                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 25080                                  
 25081                                  ; Note: _$P_Chk_Delim00 part of code is nonsense here
 25082                                  ;        because _$P_Space = _$P_DBSP1 = 20h
 25083                                  ;        Erdogan Tan - 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 25084                                  ;_$P_Chk_Delim00:
 25085                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:246Bh)
 25086                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1FC8h)
 25087                                  %if 0
 25088                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25089                                  _$P_Chk_Delim00: 			;AN000;
 25090                                  	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 25091                                  	jne	short _$P_Chk_Delim01	;AN000;
 25092                                  
 25093                                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 25094                                  	jne	short _$P_Chk_Delim01	;AN000;
 25095                                  
 25096                                  	mov	al,_$P_Space		;AN000;
 25097                                  	inc	si			;AN000; make si point to next character
 25098                                  	cmp	al,al			;AN000; Set ZF
 25099                                  	jmp	short _$P_Chk_Delim_Exit ;AN000;
 25100                                  %endif
 25101                                  
 25102                                  _$P_Chk_Delim01: 			;AN000;
 25103 00001CD6 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 25104                                  					;AN000; delimiter character specified ?
 25105 00001CDB 7214                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 25106                                  
 25107                                  	;xor	cx,cx			;AN000;
 25108 00001CDD 30ED                    	xor	ch,ch
 25109                                  	;mov	cl,[es:di+3]
 25110 00001CDF 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 25111                                  					;AN000; get length of delimiter list
 25112                                  	;or	cx,cx			;AN000; No extra Delim character ?
 25113                                  	;jz	short _$P_Chk_Delim_NZ 	;AN000;
 25114                                  	; 08/07/2023
 25115 00001CE3 E30B                    	jcxz	_$P_Chk_Delim_NZ
 25116                                  
 25117 00001CE5 BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 25118                                  _$P_Chk_Delim_Loop:			;AN000;
 25119 00001CE8 43                      	inc	bx			;AN000;
 25120 00001CE9 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 25121 00001CEC 7406                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 25122                                  
 25123 00001CEE E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 25124                                  
 25125                                  _$P_Chk_Delim_NZ:			;AN000;
 25126                                  	;cmp	al,_$P_Space		;AN000; reset ZF
 25127                                  	; 08/07/2023
 25128                                  	; cx=0 here
 25129 00001CF0 41                      	inc	cx ; cx=1, zf=0
 25130                                  _$P_Chk_Delim_Exit:			;AN000;
 25131                                  _$P_ChkDfin:				;AN000;
 25132 00001CF1 59                      	pop	cx			;AN000;
 25133 00001CF2 5B                      	pop	bx			;AN000;
 25134 00001CF3 C3                      	retn				;AN000;
 25135                                  
 25136                                  _$P_Chk_Delim_Exit0:			;AN000;
 25137 00001CF4 2EA2[F014]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 25138 00001CF8 2EF606[F614]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 25139 00001CFE 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 25140                                  
 25141 00001D00 2E800E[F614]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 25142                                  					;AC034; flag terminated extra delimiter or comma
 25143                                  _$P_No_Set_Extra:			;AN027;
 25144 00001D06 38C0                    	cmp	al,al			;AN000; set ZF
 25145 00001D08 EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 25146                                  
 25147                                  ;***********************************************************************
 25148                                  ; _$P_Chk_Switch;
 25149                                  ;
 25150                                  ; Function: Check if AL is the switch character not in first position of
 25151                                  ;	    _$P_STRING_BUF
 25152                                  ;
 25153                                  ; Input:    AL = character code
 25154                                  ;	    BX = current pointer within _$P_String_Buf
 25155                                  ;	    SI =>next char on command line (following the one in AL)
 25156                                  ;
 25157                                  ; Output:   CF = 1 (set) if AL is switch character, and not in first
 25158                                  ;		 position, and has no chance of being part of a date string,
 25159                                  ;		 i.e. should be treated as a delimiter.
 25160                                  
 25161                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 25162                                  ;		 position, or is a slash but may be part of a date string, i.e.
 25163                                  ;		 should not be treated as a delimiter.
 25164                                  ;
 25165                                  ; Vars:  _$P_Terminator(W)
 25166                                  
 25167                                  ; Use:	 _$P_0099
 25168                                  ;***********************************************************************
 25169                                  
 25170                                  _$P_Chk_Switch:
 25171                                  	;;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 25172                                  	;lea	bp,[_$P_STRING_BUF]	;BP=OFFSET of _$P_String_Buf even in group addressing
 25173                                  	; 08/07/2023
 25174 00001D0A BD[FF14]                	mov	bp,_$P_STRING_BUF
 25175                                  
 25176                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 25177 00001D0D 39EB                    	cmp	bx,bp			;AN000;
 25178 00001D0F 7406                    	je	short _$P_STRUC_L2	;AN000;
 25179                                  
 25180                                  ;	.IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 25181 00001D11 3C2F                    	cmp	al,_$P_Switch		;AN000;
 25182 00001D13 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 25183                                  
 25184 00001D15 F9                      	stc				;AN020;not in first position and is slash
 25185                                  	;jmp     short _$P_STRUC_L1	;AN000;
 25186                                  	; 12/12/2022
 25187 00001D16 C3                      	retn
 25188                                  
 25189                                  ; 12/12/2022
 25190                                  ;_$P_STRUC_L5:				;AN000;
 25191                                  ;	CLC				;AN020;not a slash
 25192                                  ;;	    .ENDIF			;AN020;
 25193                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 25194                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 25195                                  
 25196                                  _$P_STRUC_L2:				;AN000;
 25197                                  ;	.IF <AL EQ _$P_Switch> THEN	;AN020;
 25198 00001D17 3C2F                    	cmp     al,_$P_Switch		;AN000;
 25199 00001D19 7506                    	jne	short _$P_STRUC_L12	;AN000;
 25200                                  
 25201 00001D1B 2E800E[F614]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020 ;AC034;;could be valid switch, first char and is slash
 25202                                  ;	.ENDIF				;AN020;
 25203                                  
 25204                                  	; 12/12/2022
 25205                                  	; cf=0
 25206                                  	;retn
 25207                                  
 25208                                  _$P_STRUC_L5:
 25209                                  	; 12/12/2022
 25210                                  _$P_STRUC_L12:				;AN000;
 25211 00001D21 F8                      	clc				;AN020;CF=0 indicating first char
 25212                                  ;	.ENDIF				;AN020;
 25213                                  _$P_STRUC_L1:				;AN000;
 25214 00001D22 C3                      	retn				;AN000;
 25215                                  
 25216                                  ;**************************************************************************
 25217                                  ; _$P_Chk_DBCS:
 25218                                  ;
 25219                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 25220                                  ;
 25221                                  ;  Input:
 25222                                  ;	  AL	= Code to be examineed
 25223                                  ;
 25224                                  ;  Output:
 25225                                  ;	  If CF is on then a lead byte of DBCS
 25226                                  ;
 25227                                  ; Use: INT 21h w/AH=63
 25228                                  ;
 25229                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 25230                                  ;***************************************************************************
 25231                                  
 25232                                  _$P_Chk_DBCS:
 25233 00001D23 1E                      	push	ds			;AN000;
 25234 00001D24 56                      	push	si			;AN000;
 25235 00001D25 53                      	push	bx			;AN000; (tm11)
 25236                                  	;cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 25237                                  	;jne	short _$P_DBCS00	;AN000;
 25238                                  	; 08/07/2023
 25239 00001D26 2E8B36[F314]            	mov	si,[cs:_$P_DBCSEV_SEG]
 25240 00001D2B 21F6                    	and	si,si ; 0 ?
 25241 00001D2D 7525                    	jnz	short _$P_DBCS00 ; already set
 25242 00001D2F 50                      	push	ax			;AN000;
 25243 00001D30 1E                      	push	ds			;AN000; (tm11)
 25244 00001D31 51                      	push	cx			;AN000;
 25245 00001D32 52                      	push	dx			;AN000;
 25246 00001D33 57                      	push	di			;AN000;
 25247 00001D34 55                      	push	bp			;AN000;
 25248 00001D35 06                      	push	es			;AN000;
 25249                                  	; si = 0 ; 08/07/2023
 25250                                  	;xor	si,si			;AN000;
 25251 00001D36 8EDE                    	mov	ds,si ; 0		;AN000;
 25252 00001D38 B80063                  	mov	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 25253 00001D3B CD21                    	int	21h			;AN000;
 25254                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 25255 00001D3D 8CDB                    	mov	bx,ds			;AN000; (tm11)
 25256 00001D3F 09DB                    	or	bx,bx			;AN000; (tm11)
 25257 00001D41 07                      	pop	es			;AN000;
 25258 00001D42 5D                      	pop	bp			;AN000;
 25259 00001D43 5F                      	pop	di			;AN000;
 25260 00001D44 5A                      	pop	dx			;AN000;
 25261 00001D45 59                      	pop	cx			;AN000;
 25262 00001D46 1F                      	pop	ds			;AN000; (tm11)
 25263 00001D47 58                      	pop	ax			;AN000;
 25264 00001D48 7424                    	jz	short _$P_NON_DBCS	;AN000;
 25265                                  _$P_DBCS02:				;AN000;
 25266 00001D4A 2E8936[F114]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 25267 00001D4F 2E891E[F314]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 25268                                  _$P_DBCS00:				;AN000;
 25269                                  	;mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 25270                                  	;mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 25271                                  	; 08/07/2023
 25272 00001D54 2EC536[F114]            	lds	si,[cs:_$P_DBCSEV_OFF]
 25273                                  _$P_DBCS_LOOP:				;AN000;
 25274 00001D59 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 25275 00001D5C 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 25276 00001D5E 3A04                    	cmp	al,[si] 		;AN000;
 25277 00001D60 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 25278 00001D62 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 25279 00001D65 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 25280 00001D67 F9                      	stc				;AN000; if yes, indicate DBCS and exit
 25281 00001D68 EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 25282                                  _$P_DBCS01:				;AN000;
 25283 00001D6A 46                      	inc	si			;AC035; add '2' to
 25284 00001D6B 46                      	inc	si			;AC035;  SI reg
 25285                                  					;AN000; get next vector
 25286 00001D6C EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 25287                                  _$P_NON_DBCS:				;AN000;
 25288                                  	; 12/12/2022
 25289                                  	; cf=0
 25290                                  	;clc				;AN000; indicate SBCS
 25291                                  _$P_DBCS_EXIT:				;AN000;
 25292 00001D6E 5B                      	pop	bx			;AN000; (tm11)
 25293 00001D6F 5E                      	pop	si			;AN000;
 25294 00001D70 1F                      	pop	ds			;AN000;
 25295 00001D71 C3                      	retn				;AN000;
 25296                                  
 25297                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 25298                                  ; ======================================================================
 25299                                  ; 27/03/2019 - Retro DOS v4.0
 25300                                  
 25301                                  ;control block definitions for parser.
 25302                                  ;-----------------------------------------------------------------------
 25303                                  ; buffer = [n | n,m] {/e}
 25304                                  
 25305                                  ; 30/03/2019
 25306                                  
 25307                                  struc p_parms
 25308 00000000 ????                    	resw	1	; dw ?
 25309 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 25310 00000003 ??                      	resb	1	; db 1	; length is 1
 25311 00000004 ??                      	resb 	1	; db ';' ; delimiter
 25312                                  .size:
 25313                                  endstruc
 25314                                  
 25315                                  struc p_pos
 25316 00000000 ????                    	resw	1	; dw ?	; numeric value??
 25317 00000002 ????                    	resw	1	; dw ?	; function
 25318 00000004 ????                    	resw	1	; dw ?	; result value buffer
 25319                                  
 25320                                  ; note: by defining result_val before this structure, we could remove
 25321                                  ;  the "result_val" from every structure invocation
 25322                                  
 25323 00000006 ????                    	resw	1	; dw ?	; value list
 25324 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 25325                                  .size:
 25326                                  endstruc
 25327                                  
 25328                                  struc	p_range
 25329 00000000 ??                      	resb	1	; db 1	; range definition
 25330 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 25331 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 25332 00000003 ????????                	resd	1	; dd ?	; numeric min
 25333 00000007 ????????                	resd	1	; dd ?	; numeric max
 25334                                  .size:
 25335                                  endstruc
 25336                                  
 25337                                  ;-----------------------------------------------------------------------
 25338                                  
 25339                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25340                                  	; (SYSINIT:1F48h)
 25341                                  
 25342                                  	; 08/07/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25343                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2083h
 25344                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:251Dh) ; (Retro DOS v5.0)
 25345                                  
 25346                                  ; buffer = [n | n,m] {/e}
 25347                                  
 25348                                  ;buf_parms p_parms <buf_parmsx>
 25349                                  buf_parms: 
 25350 00001D72 [771D]                  	dw	buf_parmsx
 25351 00001D74 01                      	db	1	; an extra delimiter list
 25352 00001D75 01                      	db	1	; length is 1
 25353 00001D76 3B                      	db	';'	; delimiter
 25354                                  
 25355                                  buf_parmsx:
 25356 00001D77 0102[811D][951D]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 25357 00001D7D 01                      	db	1			; one switch
 25358 00001D7E [A91D]                  	dw	sw_x_ctrl
 25359 00001D80 00                      	db	0			; no keywords
 25360                                  
 25361                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 25362                                  buf_pos1:
 25363 00001D81 0080                    	dw	8000h	; numeric value??
 25364 00001D83 0000                    	dw	0	; function
 25365 00001D85 [BB1D]                  	dw	result_val ; result value buffer	
 25366 00001D87 [8A1D]                  	dw	buf_range_1 ; value list
 25367 00001D89 00                      	db	0  	; no switches/keywords
 25368                                  
 25369                                  ;buf_range_1 p_range <,,,1,99>		; M050
 25370                                  buf_range_1:
 25371 00001D8A 01                      	db	1	; range definition
 25372 00001D8B 01                      	db	1	; 1 definition of range
 25373 00001D8C 01                      	db	1	; item tag for this range
 25374 00001D8D 01000000                	dd	1	; numeric min
 25375 00001D91 63000000                	dd	99	; numeric max
 25376                                  
 25377                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 25378                                  buf_pos2:
 25379 00001D95 0180                    	dw	8001h
 25380 00001D97 0000                    	dw	0
 25381 00001D99 [BB1D]                  	dw	result_val	
 25382 00001D9B [9E1D]                  	dw	buf_range_2
 25383 00001D9D 00                      	db	0
 25384                                  
 25385                                  ;buf_range_2 p_range <,,,0,8>
 25386                                  buf_range_2:
 25387 00001D9E 01                      	db	1
 25388 00001D9F 01                      	db	1
 25389 00001DA0 01                      	db	1
 25390 00001DA1 00000000                	dd	0
 25391 00001DA5 08000000                	dd	8
 25392                                  
 25393                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 25394                                  sw_x_ctrl:
 25395 00001DA9 0000                    	dw	0
 25396 00001DAB 0000                    	dw	0
 25397 00001DAD [BB1D]                  	dw	result_val	
 25398 00001DAF [BA1D]                  	dw	noval
 25399 00001DB1 01                      	db	1	; 1 switch
 25400                                  	
 25401                                  switch_x:
 25402 00001DB2 2F5800                  	db	'/X',0		; M016
 25403                                  
 25404                                  p_buffers:
 25405 00001DB5 0000                    	dw	0	; local variables
 25406                                  p_h_buffers:
 25407 00001DB7 0000                    	dw	0
 25408                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25409                                  p_buffer_slash_x:
 25410 00001DB9 00                      	db	0 ; 31/03/2019
 25411                                  
 25412                                  ;-- common definitions -------------------------------------------------
 25413                                  
 25414 00001DBA 00                      noval:	db	0
 25415                                  
 25416                                  result_val: 	;label	byte
 25417 00001DBB 00                      	db	0		; type returned
 25418                                  result_val_itag:
 25419 00001DBC 00                      	db	0		; item tag returned
 25420                                  result_val_swoff:
 25421 00001DBD 0000                    	dw	0		; es:offset of the switch defined
 25422                                  rv_byte:	;label	byte
 25423 00001DBF 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 25424                                  
 25425                                  ;-----------------------------------------------------------------------
 25426                                  
 25427                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25428                                  	; (SYSINIT:1F99h)
 25429                                  
 25430                                  ; break = [ on | off ]
 25431                                  
 25432                                  ;brk_parms p_parms  <brk_parmsx>
 25433                                  brk_parms:
 25434 00001DC3 [C81D]                  	dw	brk_parmsx
 25435 00001DC5 01                      	db	1	; an extra delimiter list
 25436 00001DC6 01                      	db	1	; length is 1
 25437 00001DC7 3B                      	db	';'	; delimiter
 25438                                  
 25439                                  brk_parmsx:
 25440 00001DC8 0101[CE1D]              	dw	101h,brk_pos	; min,max = 1 positional
 25441 00001DCC 00                      	db	0		; no switches
 25442 00001DCD 00                      	db	0		; no keywords
 25443                                  
 25444                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 25445                                  brk_pos:
 25446 00001DCE 0020                    	dw	2000h
 25447 00001DD0 0000                    	dw	0
 25448 00001DD2 [BB1D]                  	dw	result_val	
 25449 00001DD4 [D71D]                  	dw	on_off_string
 25450 00001DD6 00                      	db	0
 25451                                  
 25452                                  on_off_string:	;label	byte
 25453 00001DD7 03                      	db	3		; signals that there is a string choice
 25454 00001DD8 00                      	db	0		; no range definition
 25455 00001DD9 00                      	db	0		; no numeric values choice
 25456 00001DDA 02                      	db	2		; 2 strings for choice
 25457 00001DDB 01                      	db	1		; the 1st string tag
 25458 00001DDC [E11D]                  	dw	on_string
 25459 00001DDE 02                      	db	2		; the 2nd string tag
 25460 00001DDF [E41D]                  	dw	off_string
 25461                                  
 25462                                  on_string:
 25463 00001DE1 4F4E00                  	db	"ON",0
 25464                                  off_string:
 25465 00001DE4 4F464600                	db	"OFF",0
 25466                                  
 25467                                  p_ctrl_break:
 25468 00001DE8 00                      	db	0	; local variable
 25469                                  
 25470                                  ;-----------------------------------------------------------------------
 25471                                  
 25472                                  	; 27/10/2022
 25473                                  
 25474                                  ; country = n {m {path}}
 25475                                  ; or
 25476                                  ; country = n,,path
 25477                                  
 25478                                  ;cntry_parms p_parms <cntry_parmsx>
 25479                                  cntry_parms:
 25480 00001DE9 [EE1D]                  	dw	cntry_parmsx
 25481 00001DEB 01                      	db	1
 25482 00001DEC 01                      	db	1
 25483 00001DED 3B                      	db	';'
 25484                                  	
 25485                                  cntry_parmsx:
 25486 00001DEE 0103[F81D][0C1E]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 25486 00001DF4 [151E]             
 25487 00001DF6 00                      	db	0		; no switches
 25488 00001DF7 00                      	db	0		; no keywords
 25489                                  
 25490                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 25491                                  cntry_pos1:
 25492 00001DF8 0080                    	dw	8000h
 25493 00001DFA 0000                    	dw	0
 25494 00001DFC [BB1D]                  	dw	result_val	
 25495 00001DFE [011E]                  	dw	cc_range
 25496 00001E00 00                      	db	0
 25497                                  
 25498                                  ;cc_range p_range <,,,1,999>
 25499                                  cc_range:
 25500 00001E01 01                      	db	1
 25501 00001E02 01                      	db	1
 25502 00001E03 01                      	db	1
 25503 00001E04 01000000                	dd	1
 25504 00001E08 E7030000                	dd	999
 25505                                  
 25506                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 25507                                  cntry_pos2:
 25508 00001E0C 0180                    	dw	8001h
 25509 00001E0E 0000                    	dw	0
 25510 00001E10 [BB1D]                  	dw	result_val	
 25511 00001E12 [011E]                  	dw	cc_range
 25512 00001E14 00                      	db	0
 25513                                  
 25514                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 25515                                  cntry_pos3:
 25516 00001E15 0102                    	dw	201h
 25517 00001E17 0000                    	dw	0
 25518 00001E19 [BB1D]                  	dw	result_val	
 25519 00001E1B [BA1D]                  	dw	noval
 25520 00001E1D 00                      	db	0	
 25521                                  
 25522                                  p_cntry_code:
 25523 00001E1E 0000                    	dw	0	; local variable
 25524                                  p_code_page:
 25525 00001E20 0000                    	dw	0	; local variable
 25526                                  
 25527                                  ;-----------------------------------------------------------------------
 25528                                  
 25529                                  	; 27/10/2022
 25530                                  
 25531                                  ; files = n
 25532                                  
 25533                                  ;files_parms p_parms <files_parmsx>
 25534                                  files_parms:
 25535 00001E22 [271E]                  	dw	files_parmsx
 25536 00001E24 01                      	db	1
 25537 00001E25 01                      	db	1
 25538 00001E26 3B                      	db	';'
 25539                                  
 25540                                  files_parmsx:
 25541 00001E27 0101[2D1E]              	dw	101h,files_pos	; min,max 1 positional
 25542 00001E2B 00                      	db	0		; no switches
 25543 00001E2C 00                      	db	0		; no keywords
 25544                                  
 25545                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 25546                                  files_pos:
 25547 00001E2D 0080                    	dw	8000h
 25548 00001E2F 0000                    	dw	0
 25549 00001E31 [BB1D]                  	dw	result_val	
 25550 00001E33 [361E]                  	dw	files_range
 25551 00001E35 00                      	db	0
 25552                                  
 25553                                  ;files_range p_range <,,,8,255>
 25554                                  files_range:
 25555 00001E36 01                      	db	1
 25556 00001E37 01                      	db	1
 25557 00001E38 01                      	db	1
 25558 00001E39 08000000                	dd	8
 25559 00001E3D FF000000                	dd	255
 25560                                  
 25561                                  p_files:
 25562 00001E41 00                      	db	0		; local variable
 25563                                  
 25564                                  ;-----------------------------------------------------------------------
 25565                                  
 25566                                  	; 27/10/2022
 25567                                  
 25568                                  ; fcbs = n,m
 25569                                  
 25570                                  ;fcbs_parms p_parms <fcbs_parmsx>
 25571                                  fcbs_parms:
 25572 00001E42 [471E]                  	dw	fcbs_parmsx
 25573 00001E44 01                      	db	1
 25574 00001E45 01                      	db	1
 25575 00001E46 3B                      	db	';'
 25576                                  
 25577                                  fcbs_parmsx:
 25578 00001E47 0102[4F1E][631E]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 25579 00001E4D 00                      	db	0		; no switches
 25580 00001E4E 00                      	db	0		; no keywords
 25581                                  
 25582                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 25583                                  fcbs_pos_1:
 25584 00001E4F 0080                    	dw	8000h
 25585 00001E51 0000                    	dw	0
 25586 00001E53 [BB1D]                  	dw	result_val	
 25587 00001E55 [581E]                  	dw	fcbs_range
 25588 00001E57 00                      	db	0
 25589                                  
 25590                                  ;fcbs_range p_range <,,,1,255>
 25591                                  fcbs_range:
 25592 00001E58 01                      	db	1
 25593 00001E59 01                      	db	1
 25594 00001E5A 01                      	db	1
 25595 00001E5B 01000000                	dd	1
 25596 00001E5F FF000000                	dd	255
 25597                                  
 25598                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 25599                                  fcbs_pos_2:
 25600 00001E63 0080                    	dw	8000h
 25601 00001E65 0000                    	dw	0
 25602 00001E67 [BB1D]                  	dw	result_val	
 25603 00001E69 [6C1E]                  	dw	fcbs_keep_range
 25604 00001E6B 00                      	db	0
 25605                                  
 25606                                  ;fcbs_keep_range p_range <,,,0,255>
 25607                                  fcbs_keep_range:
 25608 00001E6C 01                      	db	1
 25609 00001E6D 01                      	db	1
 25610 00001E6E 01                      	db	1
 25611 00001E6F 00000000                	dd	0
 25612 00001E73 FF000000                	dd	255
 25613                                  
 25614 00001E77 00                      p_fcbs:	db	0		; local variable
 25615 00001E78 00                      p_keep:	db	0		; local variable
 25616                                  
 25617                                  ;-----------------------------------------------------------------------
 25618                                  
 25619                                  	; 27/10/2022
 25620                                  
 25621                                  ; lastdrive = x
 25622                                  
 25623                                  ;ldrv_parms p_parms <ldrv_parmsx>
 25624                                  ldrv_parms:
 25625 00001E79 [7E1E]                  	dw	ldrv_parmsx
 25626 00001E7B 01                      	db	1
 25627 00001E7C 01                      	db	1
 25628 00001E7D 3B                      	db	';'
 25629                                  
 25630                                  ldrv_parmsx:
 25631 00001E7E 0101[841E]              	dw	101h,ldrv_pos	; min,max = 1 positional
 25632 00001E82 00                      	db	0		; no switches
 25633 00001E83 00                      	db	0		; no keywords
 25634                                  
 25635                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 25636                                  ldrv_pos:				    ; remove colon at end
 25637 00001E84 1001                    	dw	110h
 25638 00001E86 1000                    	dw	10h
 25639 00001E88 [BB1D]                  	dw	result_val	
 25640 00001E8A [BA1D]                  	dw	noval
 25641 00001E8C 00                      	db	0
 25642                                  	
 25643 00001E8D 00                      p_ldrv:	db	0		; local variable
 25644                                  
 25645                                  ;-----------------------------------------------------------------------
 25646                                  
 25647                                  	; 27/10/2022
 25648                                  
 25649                                  ; stacks = n,m
 25650                                  
 25651                                  ;stks_parms p_parms <stks_parmsx>
 25652                                  stks_parms:
 25653 00001E8E [931E]                  	dw	stks_parmsx
 25654 00001E90 01                      	db	1
 25655 00001E91 01                      	db	1
 25656 00001E92 3B                      	db	';'
 25657                                  
 25658                                  stks_parmsx:
 25659 00001E93 0202[9B1E][AF1E]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 25660 00001E99 00                      	db	0		; no switches
 25661 00001E9A 00                      	db	0		; no keywords
 25662                                  
 25663                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 25664                                  stks_pos_1:
 25665 00001E9B 0080                    	dw	8000h
 25666 00001E9D 0000                    	dw	0
 25667 00001E9F [BB1D]                  	dw	result_val	
 25668 00001EA1 [A41E]                  	dw	stks_range
 25669 00001EA3 00                      	db	0
 25670                                  
 25671                                  ;stks_range p_range <,,,0,64>
 25672                                  stks_range:
 25673 00001EA4 01                      	db	1
 25674 00001EA5 01                      	db	1
 25675 00001EA6 01                      	db	1
 25676 00001EA7 00000000                	dd	0
 25677 00001EAB 40000000                	dd	64
 25678                                  
 25679                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 25680                                  stks_pos_2:
 25681 00001EAF 0080                    	dw	8000h
 25682 00001EB1 0000                    	dw	0
 25683 00001EB3 [BB1D]                  	dw	result_val	
 25684 00001EB5 [B81E]                  	dw	stk_size_range
 25685 00001EB7 00                      	db	0
 25686                                  
 25687                                  ;stk_size_range p_range <,,,0,512>
 25688                                  stk_size_range:
 25689 00001EB8 01                      	db	1
 25690 00001EB9 01                      	db	1
 25691 00001EBA 01                      	db	1
 25692 00001EBB 00000000                	dd	0
 25693 00001EBF 00020000                	dd	512	
 25694                                  
 25695                                  p_stack_count:
 25696 00001EC3 0000                    	dw	0	; local variable
 25697                                  p_stack_size:
 25698 00001EC5 0000                    	dw	0	; local variable
 25699                                  
 25700                                  ;-----------------------------------------------------------------------
 25701                                  
 25702                                  	; 27/10/2022
 25703                                  
 25704                                  ; multitrack = [ on | off ]
 25705                                  
 25706                                  ;mtrk_parms p_parms <mtrk_parmsx>
 25707                                  mtrk_parms:
 25708 00001EC7 [CC1E]                  	dw	mtrk_parmsx
 25709 00001EC9 01                      	db	1
 25710 00001ECA 01                      	db	1
 25711 00001ECB 3B                      	db	';'
 25712                                  
 25713                                  mtrk_parmsx:
 25714 00001ECC 0101[D21E]              	dw	101h,mtrk_pos	; min,max = 1 positional
 25715 00001ED0 00                      	db	0		; no switches
 25716 00001ED1 00                      	db	0		; no keywords
 25717                                  
 25718                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 25719                                  mtrk_pos:
 25720 00001ED2 0020                    	dw	2000h
 25721 00001ED4 0000                    	dw	0
 25722 00001ED6 [BB1D]                  	dw	result_val	
 25723 00001ED8 [D71D]                  	dw	on_off_string
 25724 00001EDA 00                      	db	0
 25725                                  
 25726 00001EDB 00                      p_mtrk:	db	0		; local variable
 25727                                  
 25728                                  ;-----------------------------------------------------------------------
 25729                                  
 25730                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25731                                  	; (SYSINIT:20B2h)
 25732                                  
 25733                                  ; switches=/k
 25734                                  
 25735                                  ;swit_parms p_parms <swit_parmsx>
 25736                                  swit_parms:
 25737 00001EDC [E11E]                  	dw	swit_parmsx
 25738 00001EDE 01                      	db	1
 25739 00001EDF 01                      	db	1
 25740 00001EE0 3B                      	db	';'
 25741                                  
 25742                                  swit_parmsx:
 25743 00001EE1 0000                    	dw	0		; no positionals
 25744                                  	; 08/07/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS, SYSINIT)
 25745 00001EE3 05                      	db	5               ; # of switches
 25746                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 25747                                  	;db	3
 25748 00001EE4 [EF1E]                  	dw	swit_k_ctrl	; /k control
 25749                                  	; 01/01/2023 - Retro DOS v4.2 ; *
 25750 00001EE6 [FB1E]                  	dw	swit_n_ctrl ; * ; /n control (for MULTI_CONFIG only)
 25751 00001EE8 [071F]                  	dw	swit_f_ctrl ; * ; /f control (for MULTI_CONFIG only)
 25752 00001EEA [131F]                  	dw	swit_t_ctrl     ; /t control
 25753 00001EEC [1F1F]                  	dw	swit_w_ctrl     ; /w control
 25754 00001EEE 00                      	db	0		; no keywords
 25755                                  
 25756                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25757                                  swit_k_ctrl:
 25758 00001EEF 00000000[BB1D]-         	dw	0,0,result_val,noval
 25758 00001EF5 [BA1D]             
 25759 00001EF7 01                      	db	1
 25760 00001EF8 2F4B00                  swit_k:	db	'/K',0
 25761                                  
 25762                                  ; 01/01/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS)
 25763                                  ; (SYSINIT:220Ch) ; *
 25764                                  
 25765                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 25766                                  ;
 25767                                  ;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25768                                  swit_n_ctrl: ; *
 25769 00001EFB 00000000[BB1D]-         	dw	0,0,result_val,noval
 25769 00001F01 [BA1D]             
 25770 00001F03 01                      	db	1
 25771 00001F04 2F4E00                  swit_n: db	'/N',0
 25772                                  
 25773                                  ;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25774                                  swit_f_ctrl: ; *
 25775 00001F07 00000000[BB1D]-         	dw	0,0,result_val,noval
 25775 00001F0D [BA1D]             
 25776 00001F0F 01                      	db	1
 25777 00001F10 2F4600                  swit_f: db 	'/F',0
 25778                                  
 25779                                  	; 27/10/2022
 25780                                  
 25781                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 25782                                  swit_t_ctrl:
 25783 00001F13 00000000[BB1D]-         	dw	0,0,result_val,noval
 25783 00001F19 [BA1D]             
 25784 00001F1B 01                      	db	1
 25785 00001F1C 2F5400                  swit_t:	db	'/T',0			   ;				M059
 25786                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 25787                                  swit_w_ctrl:
 25788 00001F1F 00000000[BB1D]-         	dw	0,0,result_val,noval
 25788 00001F25 [BA1D]             
 25789 00001F27 01                      	db	1
 25790 00001F28 2F5700                  swit_w:	db	'/W',0			   ;				M063
 25791                                  
 25792                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 25793                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 25794                                  ;   in the above table to prevent the parsing code from complaining about them
 25795                                  
 25796 00001F2B 00                      p_swit_k:	db     0	; local variable
 25797 00001F2C 00                      p_swit_t:	db     0	; local variable			M059
 25798 00001F2D 00                      p_swit_w:	db     0	; local variable			M063
 25799                                  
 25800                                  ;-----------------------------------------------------------------------
 25801                                  
 25802                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25803                                  	; (SYSINIT:20E8h)
 25804                                  
 25805                                  ; DOS = [ high | low ]
 25806                                  
 25807                                  ;dos_parms p_parms  <dos_parmsx>
 25808                                  dos_parms:
 25809 00001F2E [331F]                  	dw	dos_parmsx
 25810 00001F30 01                      	db	1
 25811 00001F31 01                      	db	1
 25812 00001F32 3B                      	db	';'
 25813                                  dos_parmsx:
 25814 00001F33 01                      	db	1		; min parameters
 25815 00001F34 02                      	db	2		; max parameters
 25816 00001F35 [3B1F]                  	dw	dos_pos		; 
 25817 00001F37 [3B1F]                  	dw	dos_pos		; 
 25818 00001F39 00                      	db	0		; no switches
 25819 00001F3A 00                      	db	0		; no keywords
 25820                                  
 25821                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 25822                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 25823                                  dos_pos:
 25824 00001F3B 00200000[BB1D]-         	dw	2000h,0,result_val,dos_strings
 25824 00001F41 [4D1F]             
 25825 00001F43 00                      	db	0
 25826 00001F44 00200000[BB1D]-         	dw	2000h,0,result_val,dos_strings
 25826 00001F4A [4D1F]             
 25827 00001F4C 00                      	db	0	
 25828                                  
 25829                                  dos_strings:	;label	byte
 25830 00001F4D 03                      	db	3		; signals that there is a string choice
 25831 00001F4E 00                      	db	0		; no range definition
 25832 00001F4F 00                      	db	0		; no numeric values choice
 25833 00001F50 04                      	db	4		; 4 strings for choice
 25834 00001F51 01                      	db	1		; the 1st string tag
 25835 00001F52 [5D1F]                  	dw	hi_string
 25836 00001F54 02                      	db	2		; the 2nd string tag
 25837 00001F55 [621F]                  	dw	lo_string
 25838 00001F57 03                      	db	3
 25839 00001F58 [661F]                  	dw	umb_string
 25840 00001F5A 04                      	db	4
 25841 00001F5B [6A1F]                  	dw	noumb_string
 25842                                  
 25843 00001F5D 4849474800              hi_string:	db	"HIGH",0
 25844 00001F62 4C4F5700                lo_string:	db	"LOW",0
 25845 00001F66 554D4200                umb_string:	db	"UMB",0
 25846 00001F6A 4E4F554D4200            noumb_string:	db	"NOUMB",0
 25847                                  
 25848 00001F70 00                      p_dos_hi:	db	0	; local variable
 25849                                  				; BUGBUG : I dont know whether PARSER uses
 25850                                  				;          this variable or not
 25851                                  
 25852                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25853                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25854                                  ;%if 0
 25855                                  
 25856                                  ;****************************************************************** RICHID ****
 25857                                  
 25858                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 25859                                  
 25860                                  ; 30/03/2019 - Retro DOS v4.0
 25861                                  ;------------------------------------------------------------------------------
 25862                                  
 25863                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 25864                                  ;
 25865                                  ;   Date:     May 14, 1992
 25866                                  ;
 25867                                  ;******************************************************************************
 25868                                  ;
 25869                                  ;   Modification log:
 25870                                  ;
 25871                                  ;     DATE    WHO      DESCRIPTION
 25872                                  ;   --------  -------  --------------------------------------------------------
 25873                                  ;   05/14/92  t-richj  Original
 25874                                  ;   06/21/92  t-richj  Final revisions before check-in
 25875                                  ;
 25876                                  ;******************************************************************************
 25877                                  ;
 25878                                  ; There are two primary definitions which need to be made, selectively, before
 25879                                  ; this include file should be used.  These are:
 25880                                  ;    HV_Extern - If this has been defined, variables for this module will be
 25881                                  ;                declared as external.  Otherwise, variables will be declared
 25882                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 25883                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 25884                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 25885                                  ;                (as only one module, sysconf.asm, includes this file).
 25886                                  ;    HV_LoadHigh - This should be defined when this module is going into
 25887                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 25888                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 25889                                  ;
 25890                                  ;******************************************************************************
 25891                                  
 25892                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 25893                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 25894                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 25895                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 25896                                  ; space problem (it's just such a nice round number, eh?).
 25897                                  
 25898                                  MAXUMB	equ	16
 25899                                  
 25900                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 25901                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 25902                                  
 25903                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 25904                                  SystemPSPOwner	equ	8
 25905                                  ;JapanPSPOwner	equ	9
 25906                                  
 25907                                  ; for LoadHigh and DeviceHigh:
 25908                                  ;
 25909                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 25910                                  ;	          UnHideUMBs().
 25911                                  ;	fUmbTiny - Is set to 1 if the user has specified /S on the command-
 25912                                  ;	           line.
 25913                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 25914                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 25915                                  ;	          given a command-line like "/L:3,500;4"
 25916                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 25917                                  ;	          matching its index number was specified on the command-line;
 25918                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 25919                                  ;	          will be set to 1. All others will be set to 0.
 25920                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 25921                                  ;	          specified by the user for a UMB (in the above example, all
 25922                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 25923                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 25924                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 25925                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 25926                                  ;	           for details).
 25927                                  
 25928 00001F71 00                      fInHigh:  db	0
 25929 00001F72 00                      fUmbTiny: db	0
 25930 00001F73 0000                    SegLoad:  dw	0
 25931 00001F75 00                      UmbLoad:  db	0
 25932 00001F76 00<rep 10h>             UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 25933 00001F86 0000<rep 10h>           UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 25934 00001FA6 00                      fm_umb:   db	0
 25935 00001FA7 00                      fm_strat: db	0
 25936 00001FA8 00                      fm_argc:  db	0	
 25937                                  
 25938                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 25939                                  ; UmbLoad is set to the UMB number given.
 25940                                  
 25941                                  UNSPECIFIED	equ	-1
 25942                                  
 25943                                  ;%endif ; 27/10/2022
 25944                                  
 25945                                  ;****************************************************************** RICHID ****
 25946                                  
 25947                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 25948                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 25949                                  
 25950                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25951                                  ; (SYSINIT:212Bh)	
 25952                                  
 25953                                  		;public	DevEntry
 25954                                  
 25955 00001FA9 0000                    DevSize:	dw	0	; size of the device driver being loaded (paras)
 25956 00001FAB 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 25957 00001FAD 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 25958 00001FAF 00000000                DevEntry:	dd	0	; Entry point to the device driver
 25959 00001FB3 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 25960                                  ; 30/12/2022
 25961                                  ; 27/10/2022 
 25962 00001FB7 00                      ConvLoad:	db	0	; Use conventional (dos 5 style) InitDevLoad?
 25963                                  ;
 25964 00001FB8 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 25965 00001FB9 0000                    DevUMBAddr:	dw	0	; current UMB used for loading devices (paras)
 25966 00001FBB 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 25967 00001FBD 0000                    DevUMBFree:	dw	0	; Start of free mem blk in the current UMB (paras)
 25968                                  ;
 25969 00001FBF 00000000                DevXMSAddr:	dd	0
 25970                                  ;
 25971 00001FC3 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 25972 00001FC5 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 25973                                  ;
 25974 00001FC7 00                      DeviceHi:	db	0	; Flag indicating whether the current device
 25975                                  				;  is being loaded into UMB
 25976 00001FC8 0000                    DevSizeOption:	dw	0	; SIZE= option
 25977                                  ;
 25978 00001FCA 00                      Int12Lied:	db	0	; did we trap int 12h ?
 25979 00001FCB 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12h ram)
 25980 00001FCD 50524F544D414E24        ThreeComName:	db	'PROTMAN$' ; 3Com Device name
 25981                                  ;
 25982 00001FD5 00                      FirstUMBLinked:	db	0
 25983 00001FD6 0000                    DevDOSData:	dw	0	; segment of DOS Data
 25984 00001FD8 00000000                DevCmdLine:	dd	0	; Current Command line
 25985 00001FDC 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 25986                                  				; to use the file name in the command line
 25987                                  ;
 25988                                  ;	ifdef	dblspace_hooks
 25989                                  ;MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 25990                                  ;	endif
 25991                                  
 25992                                  ; ===========================================================================
 25993                                  
 25994                                  ; 31/03/2019 - Retro DOS v4.0
 25995                                  
 25996                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25997                                  ; (SYSINIT:215Eh)
 25998                                  
 25999                                  ;----------------------------------------------------------------------------
 26000                                  ;
 26001                                  ; procedure : doconf
 26002                                  ;
 26003                                  ;             Config file is parsed initially with this routine. For the
 26004                                  ;             Subsequent passes 'multi_pass' entry is used .
 26005                                  ;
 26006                                  ;----------------------------------------------------------------------------
 26007                                  
 26008                                  	; 27/10/2022
 26009                                  doconf:
 26010 00001FDD 0E                      	push	cs
 26011 00001FDE 1F                      	pop	ds
 26012                                  
 26013 00001FDF B80037                  	mov	ax,3700h
 26014                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 26015 00001FE2 CD21                    	int	21h
 26016 00001FE4 8816[E146]              	mov	[command_line+1],dl	; set in default command line
 26017                                  
 26018                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21  IO.SYS)
 26019                                  ; 27/10/2022
 26020                                  ;;ifdef	MULTI_CONFIG
 26021                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 26022 00001FE8 8816[DF46]              	mov	[def_swchr],dl ; 31/03/2019 
 26023                                  ;;endif	;MULTI_CONFIG
 26024                                  
 26025 00001FEC BA[F645]                	mov	dx,config ;'\CONFIG.SYS' ; now pointing to file description
 26026 00001FEF B8003D                  	mov	ax,3D00h
 26027                                  	;mov	ax,OPEN<<8		; open file "config.sys"
 26028 00001FF2 F9                      	stc				; in case of int 24h
 26029 00001FF3 CD21                    	int	21h			; function request
 26030 00001FF5 7309                    	jnc	short noprob		; brif opened okay
 26031                                  
 26032                                  ; 31/12/2022
 26033                                  ; 27/10/2022
 26034                                  ;;ifdef	MULTI_CONFIG
 26035 00001FF7 E83919                  	call	kbd_read		; we still want to give the guy
 26036                                  ;					; a chance to select clean boot!
 26037                                  ;;endif					; (ie, no autoexec.bat processing)
 26038 00001FFA C606[CB02]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 26039 00001FFF C3                      	retn
 26040                                  noprob: 				; get file size (note < 64k!!)
 26041 00002000 89C3                    	mov	bx,ax  ; File handle
 26042 00002002 31C9                    	xor	cx,cx
 26043 00002004 31D2                    	xor	dx,dx
 26044                                  	;mov	ax,4202h
 26045 00002006 B80242                  	mov	ax,(LSEEK<<8)|2
 26046 00002009 CD21                    	int	21h
 26047 0000200B A3[5403]                	mov	[count],ax
 26048                                  
 26049 0000200E 31D2                    	xor	dx,dx
 26050                                  	;mov	ax,4200h
 26051 00002010 B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 26052 00002013 CD21                    	int	21h
 26053                                  
 26054                                  	; 31/12/2022 - Retro DOS v4.2 
 26055 00002015 8B16[A302]              	mov	dx,[ALLOCLIM]		;use current alloclim value
 26056                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26057                                  	;mov	dx,[top_of_cdss] 
 26058                                  
 26059 00002019 A1[5403]                	mov	ax,[count]
 26060 0000201C A3[CE02]                	mov	[config_size],ax	;save the size of config.sys file.
 26061 0000201F E846F1                  	call	ParaRound
 26062 00002022 29C2                    	sub	dx,ax
 26063                                  
 26064                                  ; 31/12/2022
 26065                                  ; 27/10/2022
 26066                                  ;ifdef	MULTI_CONFIG
 26067                                  ;
 26068                                  ;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 26069                                  ;  CONFIG.SYS image, and later for building the initial environment) need
 26070                                  ;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 26071                                  ;  we (may) add a variable to the environment that does not explicity appear
 26072                                  ;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 26073                                  ;  The default setting for CONFIG cannot result in more than 1 paragraph
 26074                                  ;  of extra space, so here we account for it (the worst case of course is
 26075                                  ;  when CONFIG.SYS is some very small size, like 0 -JTP)
 26076                                  ;
 26077 00002024 4A                      	dec	dx                      ;reserve 1 additional paragraph
 26078 00002025 8916[DB14]              	mov	[config_wrkseg],dx      ;this is the segment to be used for
 26079 00002029 29C2                    	sub	dx,ax                   ;rebuilding the config.sys memory image
 26080                                  ;;endif	;MULTI_CONFIG
 26081                                  
 26082 0000202B 83EA11                  	sub	dx,11h			;room for header
 26083                                  	
 26084                                  	; 31/12/2022
 26085 0000202E 8916[A302]              	mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 26086 00002032 8916[A102]              	mov	[CONFBOT],dx
 26087                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26088                                  	;mov	[top_of_cdss],dx
 26089                                  	;call    TempCDS 
 26090                                  	
 26091                                  	; 31/12/2022
 26092                                  	; 11/12/2022
 26093                                  	; ds <> cs 
 26094                                  	;mov	dx,[cs:top_of_cdss]
 26095                                   
 26096 00002036 8EDA                    	mov	ds,dx
 26097 00002038 8EC2                    	mov	es,dx
 26098                                  
 26099 0000203A 31D2                    	xor	dx,dx
 26100 0000203C 2E8B0E[5403]            	mov	cx,[cs:count]
 26101 00002041 B43F                    	mov	ah,3Fh
 26102                                  	;mov	ah,READ  ; 3Fh
 26103 00002043 F9                      	stc				;in case of int 24h
 26104 00002044 CD21                    	int	21h			;function request
 26105 00002046 9C                      	pushf
 26106                                  
 26107                                  ; find the eof mark in the file. if present,then trim length.
 26108                                  
 26109 00002047 50                      	push	ax
 26110 00002048 57                      	push	di
 26111 00002049 51                      	push	cx
 26112 0000204A B01A                    	mov	al,1Ah			; eof mark
 26113 0000204C 89D7                    	mov	di,dx			; point to buffer
 26114 0000204E E305                    	jcxz	puteol			; no chars
 26115 00002050 F2AE                    	repnz	scasb			; find end
 26116 00002052 7501                    	jnz	short puteol		; none found and count exhausted
 26117                                  
 26118                                  ; we found a 1a. back up
 26119                                  
 26120 00002054 4F                      	dec	di			; backup past 1Ah
 26121                                  
 26122                                  ;  just for the halibut, stick in an extra eol
 26123                                  
 26124                                  puteol:
 26125 00002055 B00D                    	mov	al,cr ; 0Dh
 26126 00002057 AA                      	stosb
 26127 00002058 B00A                    	mov	al,lf  ;0Ah
 26128 0000205A AA                      	stosb
 26129 0000205B 29D7                    	sub	di,dx			; difference moved
 26130                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26131                                  	;mov	[cs:count],di		; new count
 26132                                  
 26133                                  	; 11/12/2022	
 26134                                  	; 31/03/2019 - Retro DOS v4.0
 26135 0000205D 0E                      	push	cs
 26136 0000205E 1F                      	pop	ds
 26137                                  
 26138 0000205F 893E[5403]              	mov	[count],di		; new count
 26139                                  
 26140 00002063 59                      	pop	cx
 26141 00002064 5F                      	pop	di
 26142 00002065 58                      	pop	ax
 26143                                  
 26144                                  	; 11/12/2022
 26145                                  	; 27/10/2022
 26146                                  	;push	cs
 26147                                  	;pop	ds
 26148                                  
 26149 00002066 50                      	push	ax
 26150                                  	;mov	ah,CLOSE
 26151 00002067 B43E                    	mov	ah,3Eh
 26152 00002069 CD21                    	int	21h
 26153 0000206B 58                      	pop	ax
 26154 0000206C 9D                      	popf
 26155 0000206D 7204                    	jc	short conferr 		;we've got a problem
 26156 0000206F 39C1                    	cmp	cx,ax			; if ax <(>) cx
 26157 00002071 742D                    	jz	short getcom		;couldn't read the file
 26158                                  conferr:
 26159 00002073 BA[F645]                	mov	dx,config		;print config error
 26160 00002076 E8D324                  	call	badfil
 26161                                  ;endconv:	; 01/01/2023
 26162 00002079 C3                      	retn
 26163                                  
 26164                                  ;----------------------------------------------------------------------------
 26165                                  ;
 26166                                  ; entry : multi_pass
 26167                                  ;
 26168                                  ;             called to execute device=,install= commands
 26169                                  ;
 26170                                  ;----------------------------------------------------------------------------
 26171                                  
 26172                                  	; 27/10/2022
 26173                                  multi_pass:
 26174 0000207A 0E                      	push	cs
 26175 0000207B 1F                      	pop	ds
 26176                                  
 26177 0000207C 803E[CB02]0A            	cmp	byte [multi_pass_id],10
 26178                                  ;jae_endconv:
 26179 00002081 731C                    	jae	short endconv 		; do nothing. just return.
 26180                                  
 26181                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26182 00002083 FF36[A102]              	push	word [CONFBOT]
 26183                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26184                                  	;push	word [top_of_cdss]
 26185 00002087 07                      	pop	es			; es = [confbot] (CONFIG.SYS image seg)
 26186                                  
 26187 00002088 8B36[5603]              	mov	si,[org_count]
 26188 0000208C 8936[5403]              	mov	[count],si		; set count
 26189 00002090 31F6                    	xor	si,si ; 0
 26190 00002092 8936[5803]                      mov     [chrptr],si		; reset chrptr
 26191 00002096 8936[AD02]                      mov     [linecount],si		; reset linecount
 26192                                  
 26193 0000209A E8F408                  	call	getchr
 26194 0000209D EB07                    	jmp	short conflp
 26195                                  
 26196                                  	; 01/01/2023
 26197                                  endconv:
 26198 0000209F C3                      	retn	
 26199                                  
 26200                                  getcom:
 26201                                  	; 03/01/2023
 26202                                  	; ds = cs
 26203 000020A0 E84E16                          call    organize                ; organize the file
 26204 000020A3 E8EB08                  	call	getchr
 26205                                  conflp: 
 26206 000020A6 72F7                    	jc	short endconv
 26207                                  
 26208 000020A8 FF06[AD02]                      inc     word [linecount]	; increase linecount
 26209                                  
 26210 000020AC C606[DF14]00            	mov	byte [multdeviceflag],0	; reset multdeviceflag.
 26211 000020B1 C606[E214]00            	mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 26212 000020B6 3C0A                    	cmp	al,lf			; linefeed?
 26213 000020B8 7449                    	je	short blank_line	; then ignore this line.
 26214                                  
 26215                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26216                                  ; (SYSINIT:23CCh)
 26217                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26218                                  ;%if 0
 26219                                  
 26220                                  ;ifdef	MULTI_CONFIG
 26221                                  
 26222                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 26223                                  ;   number immediately following it....
 26224                                  
 26225 000020BA A2[DD14]                        mov     [config_cmd],al         ; save original command code
 26226                                  	;and	al,NOT CONFIG_OPTION_QUERY
 26227 000020BD 247F                    	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 26228 000020BF 803E[DE14]00                    cmp     byte [config_multi],0	; is this a multi-config config.sys?
 26229 000020C4 7427                            je      short not_final		; no, line number is not embedded
 26230                                  
 26231 000020C6 50                              push    ax                      ;
 26232 000020C7 E8C708                          call    getchr                  ; ignore end-of-image errors,
 26233 000020CA 88C4                            mov     ah,al                   ; because if there's an error
 26234 000020CC E8C208                          call    getchr                  ; fetching the line number that's
 26235 000020CF 86C4                            xchg    al,ah                   ; supposed to be there, the next
 26236 000020D1 A3[AD02]                        mov     [linecount],ax          ; getchr call will get the same error
 26237 000020D4 58                              pop     ax
 26238                                  ;
 26239                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 26240                                  ;   which to obtain its original program name, it grovels through all of
 26241                                  ;   memory to find the filename that was used to exec it; it wants to find
 26242                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 26243                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 26244                                  ;   immediately before the filename, but since we are now storing line # info
 26245                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 26246                                  ;   spot.
 26247                                  ;
 26248                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 26249                                  ;   over the line number info, since we no longer need that info anyway. This
 26250                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 26251                                  ;   retrieved.
 26252                                  ;
 26253 000020D5 803E[CB02]02                    cmp	byte [multi_pass_id],2	; final pass?
 26254 000020DA 7211                            jb	short not_final		; no
 26255                                          ;test	word [install_flag],have_install_cmd
 26256 000020DC F606[CC02]01            	test	byte [install_flag],have_install_cmd ; 1
 26257 000020E1 7407                            jz	short final		; no install cmds, so yes it is
 26258 000020E3 803E[CB02]03                    cmp	byte [multi_pass_id],3	; final pass?
 26259 000020E8 7203                            jb	short not_final		; no
 26260                                  final:                                  ;
 26261 000020EA 268804                  	mov	[es:si],al		; save backward-compatible command code
 26262                                  not_final:                              ;
 26263                                  ;endif
 26264                                  
 26265                                  ; 31/12/2022
 26266                                  ;%endif ; 27/10/2022
 26267                                  
 26268 000020ED 88C4                    	mov	ah,al
 26269 000020EF E89F08                  	call	getchr
 26270 000020F2 7314                    	jnc	short tryi
 26271                                  
 26272 000020F4 803E[CB02]02            	cmp	byte [multi_pass_id],2
 26273                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 26274                                  	; 27/10/2022
 26275 000020F9 73A4                    	jnb	short endconv	
 26276 000020FB E95F08                  	jmp	badop
 26277                                  	
 26278                                  coff:	
 26279                                  	; 11/12/2022
 26280                                  	; ds = cs
 26281                                  	;push	cs
 26282                                  	;pop	ds
 26283 000020FE E8CB21                  	call	newline
 26284 00002101 EBA3                    	jmp	short conflp	; 13/05/2019
 26285                                  
 26286                                  blank_line:
 26287 00002103 E88B08                  	call	getchr
 26288 00002106 EB9E                    	jmp	short conflp
 26289                                  
 26290                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26291                                  ; 11/12/2022
 26292                                  ; (there is not a jump or call to here from anywhere!)
 26293                                  ;coff_p:
 26294                                  	;push	cs
 26295                                  	;pop	ds
 26296                                  
 26297                                  ;to handle install= commands,we are going to use multi-pass.
 26298                                  ;the first pass handles the other commands and only set install_flag when
 26299                                  ;it finds any install command. the second pass will only handle the
 26300                                  ;install= command.
 26301                                  
 26302                                  ;------------------------------------------------------------------------------
 26303                                  ;install command
 26304                                  ;------------------------------------------------------------------------------
 26305                                  
 26306                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26307                                  	; (SYSINIT:2250h)
 26308                                  tryi:
 26309 00002108 803E[CB02]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 26310 0000210D 7503                    	jne	short not_init_pass
 26311 0000210F E97F01                  	jmp	multi_try_doshi
 26312                                  not_init_pass:
 26313 00002112 803E[CB02]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 26314                                          ; 11/12/2022
 26315                                  	;je	short multi_pass_coff2	; now it is NOPs
 26316 00002117 74E5                    	je	short coff
 26317                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26318                                  	;je	short multi_pass_coff	
 26319                                  					; This pass can be made use of if
 26320                                  					; we want do some config.sys process
 26321                                  					; after device drivers are loaded
 26322                                  					; and before install= commands
 26323                                  					; are processed
 26324                                  
 26325 00002119 803E[CB02]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 26326 0000211E 741D                    	je	short multi_try_i
 26327 00002120 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 26328                                  	; 11/12/2022
 26329                                  	;je	short multi_pass_coff2
 26330 00002123 74D9                    	je	short coff
 26331                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26332                                  	;je	short multi_pass_coff	
 26333                                  
 26334                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 26335                                  ;       but don't process them now.        
 26336                                          
 26337 00002125 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 26338                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26339 00002128 7507                    	jne	short precheck_installhigh ; the first pass is for normal operation.
 26340                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26341                                  	;jne	short tryb	
 26342                                  	
 26343                                  	;or	word [install_flag],have_install_cmd ; set the flag
 26344 0000212A 800E[CC02]01            	or	byte [install_flag],have_install_cmd ; 1
 26345                                  multi_pass_coff2:
 26346 0000212F EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 26347                                  
 26348                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26349                                  ; (SYSINIT:2448h)
 26350                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26351                                  ;%if 0
 26352                                  precheck_installhigh:
 26353 00002131 80FC57                  	cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 26354 00002134 756B                    	jne     short tryb		; carry on with normal processing
 26355                                  	;or	word [install_flag],have_install_cmd
 26356 00002136 800E[CC02]01            	or	byte [install_flag],have_install_cmd ; 1
 26357 0000213B EBC1                    	jmp	short coff
 26358                                  ;%endif ; 27/10/2022
 26359                                  
 26360                                  multi_try_i:
 26361 0000213D 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I' ; install= command?
 26362                                  	; 31/12/2022 - Retro DOS v4.2
 26363 00002140 750A                    	jne	short multi_try_n	; no, check for installhigh
 26364                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26365                                  	;jne	short multi_pass_filter
 26366                                  
 26367                                  ; 31/12/2022
 26368                                  ;%if 1 
 26369                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26370                                  ;%if 0
 26371                                  ;ifdef	MULTI_CONFIG
 26372 00002142 E8FC1F                  	call	query_user              ; query the user if config_cmd
 26373 00002145 7241                    	jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 26374                                  ;endif
 26375                                  ;%endif ; 27/10/2022
 26376                                  
 26377 00002147 E89DEF                  	call	do_install_exec 	;install it.
 26378 0000214A EBB2                    	jmp	short coff		;to handle next install= command.
 26379                                  
 26380                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26381                                  ; (SYSINIT:2463h)
 26382                                  ;%if 1
 26383                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26384                                  ;%if 0
 26385                                  
 26386                                  multi_try_n:
 26387 0000214C 80FC57                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 26388 0000214F 7537                            jne	short multi_pass_filter	; no. ignore this.
 26389                                  ;ifdef	MULTI_CONFIG
 26390 00002151 E8ED1F                          call    query_user              ; query the user if config_cmd
 26391 00002154 7232                            jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 26392                                  ;endif
 26393                                  
 26394                                  ;       The memory environment is in its normal DOS state, so do
 26395                                  ;       the standard calls to set the alloc strategy for loading high
 26396                                  
 26397 00002156 B80058                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 26398 00002159 CD21                    	int	21h			;get alloc strategy
 26399 0000215B 89C3                    	mov	bx,ax
 26400 0000215D 53                              push    bx                      ; save for the return
 26401                                  
 26402 0000215E 81CB8000                        or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 26403 00002162 B80158                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 26404 00002165 CD21                    	int	21h			;set alloc strategy
 26405                                  
 26406 00002167 B80258                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 26407 0000216A CD21                            int     21h                     ; get link state
 26408 0000216C 30E4                            xor     ah,ah                   ; clear top byte
 26409 0000216E 50                              push    ax                      ; save for return
 26410                                  
 26411 0000216F B80358                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 26412 00002172 BB0100                  	mov	bx,1
 26413 00002175 CD21                    	int	21h			;link in UMBs
 26414                                  
 26415 00002177 E86DEF                  	call	do_install_exec 	;install it.
 26416                                  
 26417 0000217A B80358                          mov     ax,(ALLOCOPER<<8)|3
 26418 0000217D 5B                              pop     bx                      ; recover original link state
 26419 0000217E CD21                            int     21h
 26420 00002180 5B                              pop     bx                      ; recover original alloc strategy
 26421 00002181 B80158                          mov     ax,(ALLOCOPER<<8)|1
 26422 00002184 CD21                            int     21h
 26423                                  
 26424                                  	;jmp	short coff		;to handle next install= command.
 26425                                  	; 01/01/2023
 26426 00002186 EBA7                    	jmp	short multi_pass_coff2
 26427                                  
 26428                                  ;%endif ; 27/10/2022
 26429                                  
 26430                                  multi_pass_filter:
 26431 00002188 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 26432 0000218B 740A                    	je	short multi_pass_adjust
 26433 0000218D 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 26434 00002190 7405                    	je	short multi_pass_adjust
 26435 00002192 80FC30                          cmp     ah,CONFIG_REM     ; '0' ; rem?
 26436 00002195 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 26437                                  
 26438                                  multi_pass_adjust:			; these commands need to
 26439 00002197 FF0E[5803]              	dec	word [chrptr]		;  adjust chrptr,count
 26440 0000219B FF06[5403]              	inc	word [count]		;  for newline proc.
 26441                                  
 26442                                  multi_pass_coff:
 26443                                  	; 11/12/2022
 26444                                  	;jmp	short coff		; to handle next install= commands.
 26445                                  	; 01/01/2023
 26446 0000219F EB8E                    	jmp	short multi_pass_coff2
 26447                                  
 26448                                  ;------------------------------------------------------------------------------
 26449                                  ; buffer command
 26450                                  ;------------------------------------------------------------------------------
 26451                                  
 26452                                  ;******************************************************************************
 26453                                  ;									      *
 26454                                  ; function: parse the parameters of buffers= command.			      *
 26455                                  ;									      *
 26456                                  ; input :								      *
 26457                                  ;	es:si -> parameters in command line.				      *
 26458                                  ; output:								      *
 26459                                  ;	buffers set							      *
 26460                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 26461                                  ;	h_buffers set if secondary buffer cache specified.		      *
 26462                                  ;									      *
 26463                                  ; subroutines to be called:						      *
 26464                                  ;	sysinit_parse							      *
 26465                                  ; logic:								      *
 26466                                  ; {									      *
 26467                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 26468                                  ;	set dx,cx to 0; 						      *
 26469                                  ;	reset buffer_slash_x;						      *
 26470                                  ;	while (end of command line)					      *
 26471                                  ;	{ sysinit_parse;						      *
 26472                                  ;	  if (no error) then						      *
 26473                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 26474                                  ;		    buffer_slash_x = 1					      *
 26475                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 26476                                  ;			  buffers = result_val._$P_picked_val;		      *
 26477                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 26478                                  ;	  else	{show error message;error exit} 			      *
 26479                                  ;	};								      *
 26480                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 26481                                  ; };									      *
 26482                                  ;									      *
 26483                                  ;******************************************************************************
 26484                                  
 26485                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26486                                  	; (SYSINIT:229Ch)
 26487                                  tryb:
 26488 000021A1 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 26489 000021A4 755C                    	jne	short tryc
 26490                                  
 26491                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26492                                  ; (SYSINIT:24BFh)
 26493                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26494                                  ;%if 0
 26495                                  ;ifdef	MULTI_CONFIG
 26496 000021A6 E8981F                  	call	query_user		; query the user if config_cmd
 26497 000021A9 7257                    	jc	short tryc		; has the CONFIG_OPTION_QUERY bit set
 26498                                  ;endif
 26499                                  ;%endif ; 27/10/2022
 26500                                  
 26501                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26502                                  	; 18/12/2022
 26503 000021AB 31C9                    	xor	cx,cx
 26504                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 26505 000021AD 880E[B91D]              	mov	[p_buffer_slash_x],cl ; 0
 26506                                  
 26507 000021B1 BF[721D]                	mov	di,buf_parms
 26508                                  	;xor	cx,cx	; 18/12/2022
 26509                                  	; 03/01/2023
 26510                                  	;mov	dx,cx
 26511                                  do7:
 26512 000021B4 E88307                  	call	sysinit_parse
 26513 000021B7 7303                    	jnc	short if7		; parse error,
 26514                                  	;call	badparm_p		;  and show messages and end the search loop.
 26515                                  	;;jmp	short sr7
 26516                                  	; 31/12/2022
 26517                                  ;sr7:
 26518                                  	;jmp	coff
 26519                                  	; 03/01/2023
 26520 000021B9 E9AA06                  	jmp	badparm_p_coff
 26521                                  if7:
 26522 000021BC 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 26523 000021BF 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 26524                                  	;cmp	word [result_val_swoff],switch_x ; (/X switch)
 26525 000021C1 813E[BD1D][B21D]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 26526                                  	;jne	short if11
 26527                                  	; 31/12/2022
 26528 000021C7 74EB                    	je	short do7 ;je short en11
 26529                                  
 26530                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 26531                                  	;jmp	short en11 ; 31/12/2022
 26532                                  if11:
 26533                                  	;mov	ax,[rv_dword]
 26534 000021C9 A1[BF1D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 26535 000021CC 83F901                  	cmp	cx,1
 26536 000021CF 7505                    	jne	short if13
 26537                                  
 26538 000021D1 A3[B51D]                	mov	[p_buffers],ax
 26539                                  	;jmp	short en11
 26540                                  	; 31/12/2022
 26541 000021D4 EBDE                    	jmp	short do7
 26542                                  if13:
 26543 000021D6 A3[B71D]                	mov	[p_h_buffers],ax
 26544                                  en11:
 26545 000021D9 EBD9                    	jmp	short do7
 26546                                  en7:
 26547 000021DB 833E[B51D]63            	cmp	word [p_buffers],99
 26548 000021E0 760B                    	jbe	short if18
 26549                                  
 26550                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 26551                                  ;	jne	short if18
 26552                                  
 26553 000021E2 E88407                  	call	badparm_p
 26554 000021E5 C706[B71D]0000          	mov	word [p_h_buffers],0
 26555 000021EB EB12                    	jmp	short sr7
 26556                                  if18:
 26557 000021ED A1[B51D]                	mov	ax,[p_buffers]	; we don't have any problem.
 26558 000021F0 A3[9702]                	mov	[buffers],ax	; now,let's set it really.
 26559                                  
 26560 000021F3 A1[B71D]                	mov	ax,[p_h_buffers]
 26561 000021F6 A3[9902]                	mov	[h_buffers],ax
 26562                                  
 26563                                  ;	mov	al,[p_buffer_slash_x]	; M016
 26564                                  ;	mov	[buffer_slash_x],al
 26565                                  
 26566 000021F9 A1[AD02]                	mov	ax,[linecount]
 26567 000021FC A3[B702]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 26568                                  	; 31/12/2022
 26569                                  	;jmp	short sr7
 26570                                  	; 03/01/2023
 26571                                  sr7:
 26572 000021FF E9FCFE                  	jmp	coff
 26573                                  
 26574                                  ;------------------------------------------------------------------------------
 26575                                  ; break command
 26576                                  ;------------------------------------------------------------------------------
 26577                                  
 26578                                  ;****************************************************************************
 26579                                  ;									    *
 26580                                  ; function: parse the parameters of break = command.			    *
 26581                                  ;									    *
 26582                                  ; input :								    *
 26583                                  ;	es:si -> parameters in command line.				    *
 26584                                  ; output:								    *
 26585                                  ;	turn the control-c check on or off.				    *
 26586                                  ;									    *
 26587                                  ; subroutines to be called:						    *
 26588                                  ;	sysinit_parse							    *
 26589                                  ; logic:								    *
 26590                                  ; {									    *
 26591                                  ;	set di to brk_parms;						    *
 26592                                  ;	set dx,cx to 0; 						    *
 26593                                  ;	while (end of command line)					    *
 26594                                  ;	{ sysinit_parse;						    *
 26595                                  ;	  if (no error) then						    *
 26596                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 26597                                  ;		   set p_ctrl_break,on;					    *
 26598                                  ;	       else					  /*off 	 */ *
 26599                                  ;		   set p_ctrl_break,off;				    *
 26600                                  ;	  else {show message;error_exit};				    *
 26601                                  ;	};								    *
 26602                                  ;	if (no error) then						    *
 26603                                  ;	   dos function call to set ctrl_break check according to	    *
 26604                                  ; };									    *
 26605                                  ;									    *
 26606                                  ;****************************************************************************
 26607                                  
 26608                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26609                                  	; (SYSINIT:22FFh)
 26610                                  tryc:
 26611 00002202 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 26612 00002205 7539                    	jne	short trym
 26613                                  
 26614                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26615                                  ; (SYSINIT:2527h)
 26616                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26617                                  ;%if 0
 26618                                  ;ifdef	MULTI_CONFIG
 26619 00002207 E8371F                  	call	query_user              ; query the user if config_cmd
 26620 0000220A 7234                    	jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 26621                                  ;endif
 26622                                  ;%endif ; 27/10/2022
 26623                                  
 26624 0000220C BF[C31D]                	mov	di,brk_parms
 26625 0000220F 31C9                    	xor	cx,cx
 26626                                  	; 03/01/2023
 26627                                  	;mov	dx,cx
 26628                                  do22:
 26629 00002211 E82607                  	call	sysinit_parse
 26630 00002214 7303                    	jnc	short if22		; parse error
 26631                                  	;call	badparm_p		;  show message and end the search loop.
 26632                                  	;;jmp	short sr22
 26633                                  	; 31/12/2022
 26634                                  ;sr22:
 26635                                  	;jmp	coff
 26636                                  	; 03/01/2023
 26637 00002216 E94D06                  	jmp	badparm_p_coff
 26638                                  if22:
 26639 00002219 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 26640 0000221C 7415                    	je	short en22		; then end the $endloop
 26641                                  
 26642                                  	;cmp	byte [result_val_itag],1
 26643 0000221E 803E[BC1D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 26644 00002223 7507                    	jne	short if26
 26645                                  
 26646 00002225 C606[E81D]01            	mov	byte [p_ctrl_break],1	; turn it on
 26647                                  	;jmp	short en26
 26648                                  	; 31/12/2022
 26649 0000222A EBE5                    	jmp	short do22
 26650                                  if26:
 26651 0000222C C606[E81D]00            	mov	byte [p_ctrl_break],0	; turn it off
 26652                                  en26:
 26653 00002231 EBDE                    	jmp	short do22		; we actually set the ctrl break
 26654                                  en22:
 26655 00002233 B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 26656 00002235 B001                    	mov	al,1
 26657 00002237 8A16[E81D]              	mov	dl,[p_ctrl_break]
 26658 0000223B CD21                    	int	21h
 26659                                  	; 31/12/2022
 26660                                  	;jmp	short sr22
 26661                                  	; 03/01/2023
 26662                                  sr22:
 26663 0000223D E9BEFE                  	jmp	coff
 26664                                  
 26665                                  ;------------------------------------------------------------------------------
 26666                                  ; multitrack command
 26667                                  ;------------------------------------------------------------------------------
 26668                                  
 26669                                  ;******************************************************************************
 26670                                  ;									      *
 26671                                  ; function: parse the parameters of multitrack= command.		      *
 26672                                  ;									      *
 26673                                  ; input :								      *
 26674                                  ;	es:si -> parameters in command line.				      *
 26675                                  ; output:								      *
 26676                                  ;	turn multrk_flag on or off.					      *
 26677                                  ;									      *
 26678                                  ; subroutines to be called:						      *
 26679                                  ;	sysinit_parse							      *
 26680                                  ; logic:								      *
 26681                                  ; {									      *
 26682                                  ;	set di to brk_parms;						      *
 26683                                  ;	set dx,cx to 0; 						      *
 26684                                  ;	while (end of command line)					      *
 26685                                  ;	{ sysinit_parse;						      *
 26686                                  ;	  if (no error) then						      *
 26687                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 26688                                  ;		   set p_mtrk,on;					      *
 26689                                  ;	       else					  /*off 	 */   *
 26690                                  ;		   set p_mtrk,off;					      *
 26691                                  ;	  else {show message;error_exit};				      *
 26692                                  ;	};								      *
 26693                                  ;	if (no error) then						      *
 26694                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 26695                                  ;									      *
 26696                                  ; };									      *
 26697                                  ;									      *
 26698                                  ;******************************************************************************
 26699                                  
 26700                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26701                                  trym:
 26702 00002240 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 26703 00002243 7573                    	jne	short tryu
 26704                                  
 26705                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26706                                  ; (SYSINIT:2569h)
 26707                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26708                                  ;%if 0
 26709                                  ;ifdef	MULTI_CONFIG
 26710 00002245 E8F91E                  	call	query_user      ; query the user if config_cmd
 26711 00002248 726E                    	jc	short tryu	; has the CONFIG_OPTION_QUERY bit set
 26712                                  ;endif
 26713                                  ;%endif	; 27/10/2022
 26714                                  
 26715 0000224A BF[C71E]                	mov	di,mtrk_parms
 26716 0000224D 31C9                    	xor	cx,cx
 26717                                  	; 03/01/2023
 26718                                  	;mov	dx,cx
 26719                                  do31:
 26720 0000224F E8E806                  	call	sysinit_parse
 26721 00002252 7303                    	jnc	short if31	; parse error
 26722                                  	;call	badparm_p	;  show message and end the search loop.
 26723                                  	;;jmp	short sr31
 26724                                  	; 31/12/2022
 26725                                  ;sr31:
 26726                                  	;jmp	coff
 26727                                  	; 03/01/2023
 26728 00002254 E90F06                  	jmp	badparm_p_coff
 26729                                  if31:
 26730 00002257 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 26731 0000225A 7415                    	je	short en31	; then end the $endloop
 26732                                  
 26733                                  	;cmp	byte [result_val_itag],1
 26734 0000225C 803E[BC1D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 26735 00002261 7507                    	jne	short if35
 26736                                  
 26737 00002263 C606[DB1E]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 26738                                  	;jmp	short en35
 26739                                  	; 31/12/2022
 26740 00002268 EBE5                    	jmp	short do31
 26741                                  if35:
 26742 0000226A C606[DB1E]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 26743                                  en35:
 26744 0000226F EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 26745                                  en31:
 26746 00002271 1E                      	push	ds
 26747                                  	;;mov	ax,Bios_Data ; 70h
 26748                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 26749                                  	; 21/10/2022
 26750 00002272 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 26751 00002275 8ED8                    	mov	ds,ax
 26752                                  
 26753 00002277 2E803E[DB1E]00          	cmp	byte [cs:p_mtrk],0
 26754 0000227D 7508                    	jne	short if39
 26755                                  
 26756 0000227F C706[2705]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 26757 00002285 EB06                    	jmp	short en39
 26758                                  if39:
 26759 00002287 C706[2705]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 26760                                  en39:
 26761 0000228D 1F                      	pop	ds
 26762                                  	; 31/12/2022
 26763                                  	;jmp	short sr31
 26764                                  	; 03/01/2023
 26765                                  sr31:
 26766 0000228E E96DFE                  	jmp	coff
 26767                                  
 26768                                  ;----------------------------------------------------------------------------
 26769                                  ; DOS=HIGH/LOW command
 26770                                  ;----------------------------------------------------------------------------
 26771                                  
 26772                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26773                                  multi_try_doshi:
 26774 00002291 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 26775 00002294 7403                    	je	short it_is_h
 26776                                  skip_it:
 26777 00002296 E9EFFE                  	jmp	multi_pass_filter
 26778                                  it_is_h:				; M003 - removed initing DevUMB
 26779                                  					;	 & runhigh
 26780                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26781                                  ; (SYSINIT:25C1h)
 26782                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26783                                  ;%if 0
 26784                                  ;ifdef	MULTI_CONFIG
 26785 00002299 E8A51E                  	call	query_user              ; query the user if config_cmd
 26786 0000229C 72F8                    	jc	short skip_it		; has the CONFIG_OPTION_QUERY bit set
 26787                                  ;endif
 26788                                  ;%endif ; 27/10/2022
 26789                                  
 26790 0000229E BF[2E1F]                	mov	di,dos_parms
 26791 000022A1 31C9                    	xor	cx,cx
 26792                                  	; 03/01/2023
 26793                                  	;mov	dx,cx
 26794                                  h_do_parse:
 26795 000022A3 E89406                  	call	sysinit_parse
 26796 000022A6 7303                    	jnc	short h_parse_ok	
 26797                                  h_badparm:				; parse error
 26798                                  	; 03/01/2023
 26799                                  	;call	badparm_p		; show message and end the search loop.
 26800                                  	;;jmp	short h_end
 26801                                  	; 11/12/2022
 26802                                  ;h_end:
 26803                                  	;jmp	coff
 26804                                  	; 03/01/2023
 26805 000022A8 E9BB05                  	jmp	badparm_p_coff	
 26806                                  h_parse_ok:
 26807 000022AB 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 26808 000022AE 7405                    	je	short h_end		; then end the $endloop
 26809 000022B0 E82407                  	call	ProcDOS
 26810 000022B3 EBEE                    	jmp	short h_do_parse
 26811                                  	; 11/12/2022
 26812                                  	; 03/01/2023
 26813                                  h_end:
 26814 000022B5 E946FE                  	jmp	coff
 26815                                  
 26816                                  ;-----------------------------------------------------------------------------
 26817                                  ; devicehigh command
 26818                                  ;-----------------------------------------------------------------------------
 26819                                  
 26820                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26821                                  tryu:
 26822 000022B8 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 26823 000022BB 7552                    	jne	short tryd
 26824                                  
 26825                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26826                                  ; (SYSINIT:25E9h)
 26827                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26828                                  ;%if 0
 26829                                  ;ifdef	MULTI_CONFIG
 26830 000022BD E8811E                  	call	query_user              ; query the user if config_cmd
 26831 000022C0 724D                    	jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 26832                                  ;endif
 26833                                  ;%endif ; 28/10/2022
 26834                                  
 26835                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26836                                  ;%if 0
 26837                                  	; 01/01/2023
 26838                                  	; ds = cs
 26839                                  
 26840 000022C2 E8A907                  	call	InitVar
 26841 000022C5 E88A0F                  	call	ParseSize		; process the size= option
 26842                                  	;jnc	short tryu_0
 26843                                  	; 31/12/2022
 26844 000022C8 720C                    	jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 26845                                  
 26846                                  ;%endif ; 28/10/2022
 26847                                  
 26848                                  ; 31/12/2022
 26849                                  %if 0
 26850                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26851                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 26852                                  	;mov	[cs:badparm_seg], es
 26853                                  	; 11/12/2022
 26854                                  	; ds = cs
 26855                                  	mov	[badparm_off], si
 26856                                  	mov	[badparm_seg], es
 26857                                  
 26858                                  	; 31/12/2022
 26859                                  	;call	ParseSize
 26860                                  	;jnc	short tryu_2	; 28/10/2022
 26861                                  	
 26862                                  	;call	badparm_p
 26863                                  	;jmp	coff
 26864                                  	; 03/01/2023
 26865                                  	jmp	badparm_p_coff
 26866                                  %endif
 26867                                  
 26868                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26869                                  ; (SYSINIT:2606h)
 26870                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26871                                  ;%if 0
 26872                                  tryu_0:
 26873                                  	;mov	ax,[cs:DevSizeOption]
 26874                                  	; 31/12/2022
 26875 000022CA A1[C81F]                	mov	ax,[DevSizeOption] ; ds = cs
 26876 000022CD 09C0                    	or	ax,ax
 26877 000022CF 7510                    	jnz	short tryu_2
 26878                                  
 26879 000022D1 E82C08                  	call	ParseVar
 26880 000022D4 730B                    	jnc	short tryu_2
 26881                                  tryu_1:
 26882                                  	; 31/12/2022
 26883                                  	; ds = cs
 26884 000022D6 8936[E414]              	mov	[badparm_off], si
 26885 000022DA 8C06[E614]              	mov	[badparm_seg], es
 26886                                  	;mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 26887                                  	;mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 26888                                  	
 26889                                  	;call	badparm_p		; so all we have to do is choke and
 26890                                  	;jmp	coff			; die, rather verbosely.
 26891                                  	; 03/01/2023
 26892 000022DE E98505                  	jmp	badparm_p_coff
 26893                                  
 26894                                  ;%endif ; 28/10/2022
 26895                                  
 26896                                  tryu_2:	
 26897 000022E1 56                      	push	si
 26898 000022E2 06                      	push	es
 26899                                  tryu_3:
 26900 000022E3 268A04                  	mov	al,[es:si]
 26901 000022E6 3C0D                    	cmp	al,cr
 26902 000022E8 740C                    	je	short tryu_4
 26903 000022EA 3C0A                    	cmp	al,lf
 26904 000022EC 7408                    	je	short tryu_4
 26905 000022EE E8BF1F                  	call	delim
 26906 000022F1 7403                    	jz	short tryu_4
 26907 000022F3 46                      	inc	si
 26908 000022F4 EBED                    	jmp	short tryu_3
 26909                                  tryu_4:	
 26910                                  	; 11/12/2022
 26911                                  	; ds = cs
 26912 000022F6 A2[DC1F]                	mov	[DevSavedDelim],al
 26913                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 26914                                  					;  it with null
 26915                                  	; 18/12/2022
 26916 000022F9 29DB                    	sub	bx,bx
 26917 000022FB 26881C                  	mov	[es:si],bl ; 0
 26918                                   	;mov	byte [es:si],0
 26919                                  
 26920 000022FE 07                      	pop	es
 26921 000022FF 5E                      	pop	si
 26922                                  
 26923                                  ;------------------------------------------------------------------------------
 26924                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 26925                                  ;------------------------------------------------------------------------------
 26926                                  
 26927                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26928                                  ; (SYSINIT:2642h)
 26929                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26930                                  ;%if 0
 26931                                  ; 10/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 26932                                  ; MSDOS 6.21 IO.SYS - SYSINIT:2642h
 26933                                  %if 1
 26934                                  	; 01/01/2023
 26935                                  	; ds = cs
 26936 00002300 E8710C                  	call	UmbTest			; See if UMBs are around...
 26937                                  	; 01/01/2023
 26938                                  	;jnc	short NrmTst		; ...yep. So do that normal thang.
 26939                                  	
 26940                                  	;mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 26941                                  	; 31/12/2022
 26942                                  	; ds = cs, bx = 0
 26943                                  	;mov	byte [DeviceHi],bl ; 0
 26944                                  	;jmp	short LoadDevice
 26945                                  	; 01/01/2023
 26946 00002303 7222                    	jc	short LoadDevice ; bl = 0
 26947                                  %endif
 26948                                  ;%endif
 26949                                  
 26950                                  ;------------------------------------------------------------------------------
 26951                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 26952                                  ;------------------------------------------------------------------------------
 26953                                  
 26954                                  NrmTst:
 26955                                  	; 11/12/2022
 26956                                  	; ds = cs
 26957                                  	;;mov	byte [cs:DeviceHi],0
 26958                                  	;mov	byte [DeviceHi],0
 26959                                  	; 18/12/2022
 26960                                  	; bx = 0
 26961 00002305 381E[B81F]              	cmp	[DevUMB],bl ; 0
 26962                                  	;cmp	byte [DevUMB],0
 26963                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 26964 00002309 741C                    	je	short LoadDevice	; no, we don't
 26965                                  	;mov	byte [cs:DeviceHi],1
 26966                                  	; 11/12/2022
 26967                                  	;mov	byte [DeviceHi],1
 26968                                  	; 18/12/2022
 26969 0000230B FEC3                    	inc	bl ; mov bl,1 ; (*)
 26970                                  	; 11/12/2022
 26971                                  	;jmp	short LoadDevice2	; 11/12/2022
 26972 0000230D EB18                    	jmp	short LoadDevice
 26973                                  
 26974                                  ;------------------------------------------------------------------------------
 26975                                  ; device command
 26976                                  ;------------------------------------------------------------------------------
 26977                                  
 26978                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26979                                  	; (SYSINIT:2665h)
 26980                                  
 26981                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26982                                  	; (SYSINIT:2401h)
 26983                                  tryd:
 26984                                  	; 11/12/2022
 26985                                  	;xor 	bx,bx ; 31/12/2022
 26986                                  	;
 26987 0000230F 80FC44                          cmp     ah,CONFIG_DEVICE ; 'D'
 26988 00002312 7403                    	je	short gotd
 26989                                  skip_it2:
 26990 00002314 E99702                  	jmp	tryq
 26991                                  gotd:
 26992                                  
 26993                                  ; 31/12/2022 - Retro DOS v4.2
 26994                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26995                                  ;%if 0
 26996                                  ;ifdef	MULTI_CONFIG
 26997 00002317 E8271E                  	call	query_user              ; query the user if config_cmd
 26998 0000231A 72F8                    	jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 26999                                  ;endif
 27000                                  ;%endif ; 28/10/2022
 27001                                  
 27002                                  	; 31/12/2022
 27003 0000231C 29DB                    	sub	bx,bx
 27004                                  	; bx = 0
 27005                                  	; 11/12/2022
 27006                                  	; ds = cs
 27007                                  	;mov	byte [DeviceHi],0
 27008                                  	;mov	word [DevSizeOption],0
 27009 0000231E 891E[C81F]              	mov	[DevSizeOption],bx ; 0
 27010 00002322 C606[DC1F]20            	mov	byte [DevSavedDelim],' '
 27011                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 27012                                  	;mov	word [cs:DevSizeOption],0
 27013                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 27014                                  					;  be replaced with a ' '
 27015                                  LoadDevice:                             ; device= or devicehigh= command.
 27016                                  	; 11/12/2022
 27017                                  	;mov	byte [DeviceHi],0
 27018 00002327 881E[C71F]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 27019                                  LoadDevice2:
 27020                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 27021                                  	;
 27022                                  	;push    cs
 27023                                          ;pop     ds
 27024                                  	;
 27025                                  	;mov	[bpb_addr],si		; pass the command line to the device
 27026                                  	;mov	[bpb_addr+2],es
 27027                                  	;
 27028                                  	;mov	[DevCmdLine],si		; save it for ourself
 27029                                  	;mov	[DevCmdLine+2],es
 27030                                  	;
 27031                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 27032                                  
 27033                                  	; 11/12/2022
 27034                                  	; ds = cs
 27035                                  	;mov	bx,cs
 27036                                  	;mov	ds,bx
 27037                                  
 27038                                  	;mov	[cs:bpb_addr],si	; pass the command line to the device
 27039 0000232B 8936[7A03]              	mov	[bpb_addr],si
 27040                                  	;mov	[cs:bpb_addr+2],es
 27041 0000232F 8C06[7C03]              	mov	[bpb_addr+2],es
 27042                                  
 27043                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 27044 00002333 8936[D81F]              	mov	[DevCmdLine],si
 27045                                  	;mov	[cs:DevCmdLine+2],es	
 27046 00002337 8C06[DA1F]              	mov	[DevCmdLine+2],es
 27047                                  
 27048                                  	; 31/12/2022 - Retro DOS v4.2
 27049 0000233B C606[E314]00            	mov	byte [driver_units],0	; clear total block units for driver	
 27050                                  
 27051 00002340 E8C21F                  	call	round
 27052                                  	
 27053 00002343 E8170E                  	call	SizeDevice
 27054 00002346 723F                    	jc	short BadFile
 27055                                  
 27056                                  	; 11/12/2022
 27057                                  	; ds = cs
 27058                                  
 27059                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 27060                                  
 27061                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27062                                  ; (SYSINIT:26A4h)
 27063                                  
 27064                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27065                                  ;%if 0
 27066 00002348 C606[B71F]01            	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 27067                                  
 27068                                  	; 22/07/2023
 27069                                  	;mov	al,[DeviceHi]		; If not using upper memory,
 27070 0000234D 800E[C71F]00            	or	byte [DeviceHi],0	; Skip all this and go on to
 27071                                  	; 10/07/2023
 27072                                  	;or	al,al
 27073 00002352 741E                    	jz	short DevConvLoad	; the actual load.
 27074                                  
 27075                                  	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 27076 00002354 A0[751F]                	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 27077                                  
 27078 00002357 3CFF                    	cmp	al,-1			; If umb0 not specified, it's old style
 27079 00002359 7417                    	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 27080                                  
 27081 0000235B FE0E[B71F]              	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 27082                                  
 27083 0000235F E8DF09                  	call	GetLoadSize		; Returns size of first UMB specified
 27084 00002362 09C0                    	or	ax,ax
 27085 00002364 7406                    	jz	short tryd_1		; If size is not specified..
 27086                                  
 27087 00002366 3B06[A91F]              	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 27088 0000236A 7D06                    	jge	short DevConvLoad
 27089                                  tryd_1:
 27090 0000236C A1[A91F]                	mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 27091 0000236F E8DE09                  	call	StoLoadSize		; minsize for load UMB.
 27092                                  
 27093                                  ;%endif ; 28/10/2022
 27094                                  
 27095                                  ; - End DeviceHigh primary logic changes --------------------------------------
 27096                                  
 27097                                  DevConvLoad:
 27098                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27099 00002372 E8E50C                  	call	InitDevLoad
 27100                                  
 27101                                  	; 11/12/2022
 27102                                  	; ds = cs
 27103 00002375 A1[AB1F]                	mov	ax,[DevLoadAddr]
 27104 00002378 0306[A91F]              	add	ax,[DevSize]
 27105 0000237C 7206                    	jc	short NoMem
 27106 0000237E 3906[AD1F]              	cmp	[DevLoadEnd],ax
 27107 00002382 7315                    	jae	short LoadDev
 27108                                  	
 27109                                  	; 11/12/2022
 27110                                  	;mov	ax,[cs:DevLoadAddr]
 27111                                  	;add	ax,[cs:DevSize]
 27112                                  	;jc	short NoMem
 27113                                  	;cmp	[cs:DevLoadEnd],ax
 27114                                  	;jae	short LoadDev
 27115                                  NoMem:
 27116                                  	; 11/12/2022
 27117                                  	; ds = cs
 27118                                  	;jmp	mem_err
 27119 00002384 E9C11F                  	jmp	mem_err2
 27120                                  
 27121                                  BadFile:
 27122                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27123                                  	;;call	RetFromUM		; Does nothing if didn't call HideUMBs
 27124                                  	;;cmp	byte [es:si],' '
 27125                                          ;;jae	short tryd_2
 27126                                  	; 31/12/2022	
 27127                                  	;cmp	byte [es:si],0Dh	; cr
 27128                                          ;jne	short tryd_2
 27129                                  	;jmp	badop
 27130                                  	; 31/12/2022
 27131                                  	; ds = cs
 27132                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27133                                  	; (SYSINIT:26E6h)
 27134 00002387 E8340E                  	call	RetFromUM		; Does nothing if didn't call HideUMBs
 27135 0000238A 26803C20                	cmp	byte [es:si],' ' 
 27136                                  	;cmp	byte [es:si],20h ; space
 27137 0000238E 7303                    	jnb	short tryd_2
 27138 00002390 E9CA05                  	jmp	badop
 27139                                  tryd_2:
 27140 00002393 E8BA21                  	call	badload
 27141 00002396 E965FD                  	jmp	coff
 27142                                  
 27143                                  LoadDev:
 27144 00002399 06                      	push	es
 27145 0000239A 1F                      	pop	ds
 27146                                  
 27147 0000239B 89F2                    	mov	dx,si			;ds:dx points to file name
 27148 0000239D E8020E                  	call	ExecDev			; load device driver using exec call
 27149                                  badldreset:
 27150 000023A0 1E                      	push	ds
 27151 000023A1 07                      	pop	es			;es:si back to config.sys
 27152 000023A2 0E                      	push	cs
 27153 000023A3 1F                      	pop	ds			;ds back to sysinit
 27154 000023A4 72E1                    	jc	short BadFile
 27155                                  goodld:
 27156                                  	; 11/12/2022
 27157                                  	; ds = cs
 27158                                  
 27159 000023A6 06                      	push	es ; +	; 31/12/2022
 27160 000023A7 56                      	push	si ; ++
 27161 000023A8 E8250E                  	call	RemoveNull
 27162 000023AB 06                      	push	es
 27163 000023AC 56                      	push	si
 27164                                  
 27165 000023AD 0E                      	push	cs
 27166 000023AE 07                      	pop	es
 27167                                  
 27168 000023AF 1E                      	push	ds ; **  ; ds = cs
 27169 000023B0 56                      	push	si
 27170                                  
 27171                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 27172                                  	; 31/12/2022
 27173                                  	; ds = cs
 27174 000023B1 C536[AF1F]              	lds	si,[DevEntry]
 27175                                  
 27176                                  	;test	word [si+4],8000h
 27177                                  	; 11/12/2022
 27178 000023B5 F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 27179                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 27180 000023B9 7514                    	jnz	short got_device_com_cont   ; no.
 27181                                  
 27182 000023BB 2EC536[6B02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 27183                                  	;cmp	byte [si+32],26
 27184 000023C0 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 27185 000023C4 7209                    	jb	short got_device_com_cont
 27186                                  
 27187 000023C6 5E                      	pop	si
 27188 000023C7 1F                      	pop	ds ; **
 27189                                  
 27190 000023C8 5E                      	pop	si			; clear the stack
 27191 000023C9 07                      	pop	es
 27192                                  
 27193                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27194                                  	;call	RetFromUM
 27195                                  	; 31/12/2022
 27196                                  	; ds = cs ; **
 27197 000023CA E8F10D                  	call	RetFromUM		; Do this before we leave
 27198                                  
 27199                                  	;jmp	short badnumblock
 27200                                  	; 31/12/2022
 27201 000023CD EB77                    	jmp	short badnumblock2  ; ds = cs
 27202                                  
 27203                                  got_device_com_cont:
 27204 000023CF 5E                      	pop	si
 27205 000023D0 1F                      	pop	ds
 27206                                  
 27207                                  	; 11/12/2022
 27208                                  	; ds = cs
 27209                                  
 27210 000023D1 E82606                  	call	LieInt12Mem
 27211 000023D4 E88506                  	call	UpdatePDB		; update the PSP:2 value M020
 27212                                  
 27213                                  	; 11/12/2022
 27214                                  	; ds = cs
 27215 000023D7 803E[DF14]00            	cmp	byte [multdeviceflag],0
 27216                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 27217                                  					;  driver in the file ; M027
 27218 000023DC 750E                    	jne	short skip_pass_limit	;		      ; M027
 27219                                  
 27220                                  	; 11/12/2022
 27221                                  	; ds = cs
 27222                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 27223                                  	;mov	bx,[cs:DevLoadEnd]
 27224                                  	;mov	[cs:break_addr+2],bx
 27225                                  
 27226 000023DE C706[7603]0000          	mov	word [break_addr],0
 27227 000023E4 8B1E[AD1F]              	mov	bx,[DevLoadEnd]
 27228 000023E8 891E[7803]              	mov	[break_addr+2],bx
 27229                                  
 27230                                  skip_pass_limit:
 27231                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 27232                                  ;	number of installed devices (including DblSpace drives) where
 27233                                  ;	"drivenumber" is the number that the next block device will
 27234                                  ;	be assigned to. Because some naughty device drivers (like
 27235                                  ;	interlnk) look at the internal DOS variable instead of the
 27236                                  ;	value we pass it, we'll temporarily stick our value into
 27237                                  ;	DOS DATA while we're initializing the device drivers.
 27238                                  ;
 27239                                  ;	Note that this will make it impossible for this device
 27240                                  ;	driver to access the DblSpace drive letters, whether
 27241                                  ;	they are swapped-hosts or unswapped compressed drives,
 27242                                  ;	during its initialization phase.
 27243                                  
 27244                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27245                                  ; (SYSINIT:2752h)
 27246                                  ; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27247                                  ;%if 0
 27248                                  	; 31/12/2022
 27249                                  	;push	ds
 27250                                  	
 27251                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 27252                                  	; 31/12/2022
 27253                                  	; ds = cs
 27254 000023EC C51E[6B02]              	lds	bx,[DOSINFO]		; ds:bx -> sys_var
 27255                                  
 27256 000023F0 2EA0[7E03]              	mov	al,[cs:drivenumber]	; temporarily use this next drv value
 27257 000023F4 2EA2[7E03]              	mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 27258 000023F8 88C4                    	mov	ah,al
 27259                                  	
 27260 000023FA 874720                  	xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 27261                                  	; 31/12/2022
 27262                                  	;pop	ds
 27263                                  	
 27264 000023FD 50                      	push	ax			; save real sysi_numio/ncds in ax
 27265                                  
 27266                                  ;%endif ; 29/10/2022
 27267                                  
 27268                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27269                                  	; (SYSINIT:24B9h)
 27270                                  
 27271 000023FE BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 27272 00002401 E84D1F                  	call	calldev 		; calldev (sdevstrat);
 27273 00002404 BB0800                  	mov	bx,SYSDEV.INT ; 8
 27274 00002407 E8471F                  	call	calldev 		; calldev (sdevint);
 27275                                  
 27276                                  	; 11/12/2022
 27277                                  	; ds <> cs (from calldev) ; 31/12/2022
 27278                                  
 27279                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27280                                  ; (SYSINIT:2773h)
 27281                                  ; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27282                                  ;%if 0
 27283 0000240A 58                      	pop	ax			; get real sysi_numio value
 27284                                  	; 31/12/2022
 27285                                  	;push	ds
 27286 0000240B 2EC51E[6B02]            	lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 27287 00002410 894720                  	mov	[bx+SYSI_NUMIO],ax	; restore previous/real value
 27288                                  	; 31/12/2022
 27289                                  	;pop	ds
 27290                                  
 27291                                  ;%endif ; 29/10/2022
 27292                                  
 27293                                  	; 11/12/2022
 27294 00002413 0E                      	push	cs
 27295 00002414 1F                      	pop	ds
 27296                                  
 27297 00002415 E81206                  	call	TrueInt12Mem
 27298                                  
 27299                                  	; 11/12/2022
 27300                                  	; ds = cs
 27301                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 27302                                  	;mov	[cs:DevBrkAddr],ax
 27303                                  	;mov	ax,[cs:break_addr+2]
 27304                                  	;mov	[cs:DevBrkAddr+2],ax
 27305 00002418 A1[7603]                	mov	ax,[break_addr]	
 27306 0000241B A3[B31F]                	mov	[DevBrkAddr],ax
 27307 0000241E A1[7803]                	mov	ax,[break_addr+2]
 27308 00002421 A3[B51F]                	mov	[DevBrkAddr+2],ax
 27309                                  
 27310                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27311                                  	;call	RetFromUM		; There we go... all done.
 27312                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27313                                  	; (SYSINIT:2791h)
 27314 00002424 E8970D                  	call	RetFromUM		; There we go... all done.	
 27315                                  
 27316                                  	; 31/12/2022
 27317                                  	; ds = cs
 27318                                  
 27319                                  	; 11/12/2022
 27320 00002427 803E[B81F]00            	cmp	byte [DevUMB],0	
 27321                                  	;cmp	byte [cs:DevUMB],0
 27322 0000242C 7403                    	je	short tryd_3
 27323 0000242E E8C60E                  	call	AllocUMB
 27324                                  	; 31/12/2022
 27325                                  	; ds = cs
 27326                                  tryd_3:
 27327                                  
 27328                                  ;ifndef ROMDOS
 27329                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 27330                                  
 27331                                  	; 11/12/2022
 27332                                  	; ds = cs
 27333                                  	
 27334                                  	;cmp	byte [cs:runhigh],0FFh
 27335 00002431 803E[6A02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 27336 00002436 7503                    	jne	short tryd_4
 27337                                  	
 27338                                  	; 11/12/2022
 27339                                  	; ds = cs
 27340 00002438 E835E5                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 27341                                  tryd_4:
 27342                                  ;endif ; ROMDOS
 27343                                  
 27344 0000243B 5E                      	pop	si
 27345 0000243C 1F                      	pop	ds
 27346 0000243D C60400                  	mov	byte [si],0		; *p = 0;
 27347                                  
 27348 00002440 0E                      	push	cs
 27349 00002441 1F                      	pop	ds
 27350                                  
 27351 00002442 EB1F                    	jmp	short was_device_com
 27352                                  
 27353                                  ;----------------------------------------------------------------------------
 27354                                  
 27355                                  ; 02/04/2019 - Retro DOS v4.0
 27356                                  
 27357                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27358                                  ; (SYSINIT:27B3h)
 27359                                  
 27360                                  badnumblock:
 27361 00002444 0E                      	push	cs
 27362 00002445 1F                      	pop	ds
 27363                                  badnumblock2:	; 31/12/2022 (ds=cs)
 27364 00002446 BA[C44B]                	mov	dx,badblock
 27365 00002449 E82C21                  	call	print
 27366                                  
 27367                                  ;------ fall thru -----------------------------------------------------------
 27368                                  
 27369                                  	; 31/12/2022 - Retro DOS v4.2
 27370                                  
 27371                                  erase_dev_do:				; modified to show message "error in config.sys..."
 27372                                  	
 27373                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 27374                                  				; (Note: 'call CheckDoubleSpace'
 27375                                  				; has been removed at 'erase_dev_do:' pos
 27376                                  				; in PCDOS 7.1 IBMBIO.COM - SYSINIT:2CBAh)
 27377                                  				; Erdogan Tan - 10/07/2023
 27378 0000244C 5E                      	pop	si ; ++
 27379 0000244D 07                      	pop	es ; + ; 31/12/2022
 27380                                  
 27381 0000244E 0E                      	push	cs
 27382 0000244F 1F                      	pop	ds
 27383                                  
 27384                                  skip1_resetmemhi:
 27385                                  	; 11/12/2022
 27386                                  	; ds = cs
 27387 00002450 833E[7F03]00            	cmp	word [configmsgflag],0
 27388                                  	;cmp	word [cs:configmsgflag],0
 27389 00002455 7409                    	je	short no_error_line_msg
 27390                                  
 27391 00002457 E84E05                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 27392                                  	; 11/12/2022
 27393                                  	; ds = cs
 27394                                  	;mov	word [cs:configmsgflag],0
 27395 0000245A C706[7F03]0000          	mov	word [configmsgflag],0	; set the default value again.
 27396                                  
 27397                                  no_error_line_msg:
 27398 00002460 E99BFC                  	jmp	coff
 27399                                  
 27400                                  ;----------------------------------------------------------------------------
 27401                                  
 27402                                  was_device_com:
 27403                                  	; 14/12/2022
 27404                                  	; ds = cs
 27405 00002463 A1[B51F]                	mov	ax,[DevBrkAddr+2]
 27406                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 27407 00002466 3B06[AD1F]              	cmp	ax,[DevLoadEnd]
 27408                                  	;cmp	ax,[cs:DevLoadEnd]
 27409 0000246A 7605                    	jbe	short breakok
 27410                                  
 27411 0000246C 5E                      	pop	si
 27412 0000246D 07                      	pop	es
 27413 0000246E E916FF                  	jmp	BadFile
 27414                                  
 27415                                  breakok:
 27416                                  	; 14/12/2022
 27417                                  	; ds = cs
 27418 00002471 C43E[6B02]              	les	di,[DOSINFO] 
 27419 00002475 C516[AF1F]              	lds	dx,[DevEntry]
 27420                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 27421 00002479 89D6                    	mov	si,dx
 27422                                  
 27423                                  	; 14/11/2022
 27424                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 27425                                  
 27426                                  	; 14/12/2022
 27427                                  	; ds <> cs
 27428                                  	
 27429                                  	;mov	ax,[si+4]
 27430 0000247B 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 27431                                  	; 12/12/2022
 27432 0000247E F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 27433                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 27434 00002481 7426                    	jz	short isblock
 27435                                  
 27436                                  ;------ lets deal with character devices
 27437                                  
 27438 00002483 2E800E[E214]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 27439 00002489 E8770D                  	call	DevSetBreak		;go ahead and alloc mem for device
 27440                                  jc_edd:
 27441 0000248C 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 27442                                  
 27443                                  	; 12/12/2022
 27444 0000248E A801                    	test	al,ISCIN
 27445                                  	;test	ax,ISCIN ; 1		;is it a console in?
 27446 00002490 7408                    	jz	short tryclk
 27447                                  
 27448 00002492 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 27449 00002496 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 27450                                  tryclk: 
 27451                                  	; 12/12/2022
 27452 0000249A A808                    	test	al,ISCLOCK
 27453                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 27454 0000249C 7408                    	jz	short golink
 27455                                  
 27456 0000249E 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 27457 000024A2 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 27458                                  golink: 
 27459 000024A6 E9B500                  	jmp	linkit
 27460                                  
 27461                                  ;------ deal with block device drivers
 27462                                  
 27463                                  isblock:
 27464 000024A9 2EA0[7503]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 27465 000024AD 08C0                    	or	al,al
 27466 000024AF 749B                    	jz	short erase_dev_do
 27467                                  	;mov	[si+10],al
 27468 000024B1 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 27469                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27470                                  	;add	[cs:driver_units],al
 27471                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27472 000024B4 2E0006[E314]            	add	[cs:driver_units],al	; keep total for all drivers in file
 27473                                  perdrv:
 27474 000024B9 98                      	cbw				; warning no device > 127 units
 27475 000024BA 89C1                    	mov	cx,ax
 27476 000024BC 88E6                    	mov	dh,ah
 27477                                  	;mov	dl,[es:di+32]
 27478 000024BE 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 27479 000024C2 88D4                    	mov	ah,dl
 27480 000024C4 00C4                    	add	ah,al			; check for too many devices
 27481 000024C6 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 27482 000024C9 7603                    	jbe	short ok_block
 27483 000024CB E976FF                  	jmp	badnumblock
 27484                                  
 27485                                  ok_block:
 27486 000024CE 2E800E[E214]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 27487 000024D4 E82C0D                  	call	DevSetBreak		; alloc the device
 27488 000024D7 72B3                    	jc	short jc_edd
 27489 000024D9 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 27490                                  
 27491 000024DD 2E0006[7E03]            	add	[cs:drivenumber],al	; remember amount for next device
 27492 000024E2 2EC51E[7A03]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 27493                                  perunit:
 27494 000024E7 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 27495                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 27496                                  	; 11/12/2022
 27497 000024EC 26C46E00                	les	bp,[es:bp]
 27498                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27499                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 27500                                  scandpb:
 27501                                  	;cmp	word [es:bp+25],-1
 27502 000024F0 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 27503 000024F5 7406                    	je	short foundpb
 27504                                  	;les	bp,[es:bp+25]
 27505 000024F7 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 27506 000024FB EBF3                    	jmp	short scandpb
 27507                                  foundpb:
 27508 000024FD 2EA1[B31F]              	mov	ax,[cs:DevBrkAddr]
 27509 00002501 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 27510 00002505 2EA1[B51F]              	mov	ax,[cs:DevBrkAddr+2]
 27511 00002509 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 27512                                  
 27513 0000250D 2EC42E[B31F]            	les	bp,[cs:DevBrkAddr]
 27514 00002512 2E8306[B31F]21          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 27515                                  
 27516 00002518 E8C70C                  	call	RoundBreakAddr
 27517                                  
 27518 0000251B 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 27519 00002521 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 27520                                  
 27521 00002526 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 27522 00002528 43                      	inc	bx
 27523 00002529 43                      	inc	bx			;point to next guy
 27524                                  	;mov	[es:bp+DPB.DRIVE],dx
 27525                                  	; 11/12/2022
 27526 0000252A 26895600                	mov	[es:bp],dx ; 13/05/2019
 27527                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27528                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 27529                                  	
 27530 0000252E B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 27531 00002530 CD21                    	int	21h
 27532                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 27533                                  			; DS:SI -> BPB (BIOS Parameter Block)
 27534                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 27535                                  
 27536                                  	;mov	ax,[es:bp+2]
 27537 00002532 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 27538 00002536 06                      	push	es
 27539 00002537 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 27540                                  	;cmp	ax,[es:di+10h]
 27541 0000253C 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 27542 00002540 07                      	pop	es
 27543                                  	;jna	short iblk_1
 27544                                  	;jmp	short bad_bpb_size_sector
 27545                                  	; 29/10/2022
 27546 00002541 775D                    	ja	short bad_bpb_size_sector
 27547                                  iblk_1:
 27548 00002543 1E                      	push	ds
 27549 00002544 52                      	push	dx
 27550                                  
 27551 00002545 2EC516[AF1F]            	lds	dx,[cs:DevEntry]
 27552                                  	;mov	[es:bp+13h],dx
 27553 0000254A 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 27554                                  	;mov	[es:bp+15h],ds
 27555 0000254E 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 27556                                  
 27557 00002552 5A                      	pop	dx
 27558 00002553 1F                      	pop	ds
 27559                                  
 27560 00002554 42                      	inc	dx
 27561 00002555 FEC6                    	inc	dh
 27562 00002557 E28E                    	loop	perunit
 27563                                  
 27564 00002559 0E                      	push	cs
 27565 0000255A 1F                      	pop	ds
 27566                                  
 27567 0000255B E80DE7                  	call	TempCDS 		; set cds for new drives
 27568                                  	; 31/12/2022
 27569                                  	; ds <> cs
 27570                                  linkit:
 27571 0000255E 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 27572 00002563 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 27573 00002567 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 27574                                  
 27575 0000256B 2EC536[AF1F]            	lds	si,[cs:DevEntry]	;ds:si = device location
 27576 00002570 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 27577 00002574 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 27578 00002578 8B04                    	mov	ax,[si]			;get pointer to next device
 27579 0000257A 2EA3[AF1F]              	mov	[cs:DevEntry],ax	;and save it
 27580                                  
 27581 0000257E 890C                    	mov	[si],cx			;link in the driver
 27582 00002580 895402                  	mov	[si+2],dx
 27583                                  enddev:
 27584 00002583 5E                      	pop	si
 27585 00002584 07                      	pop	es
 27586 00002585 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 27587 00002586 740B                    	jz	short coffj3
 27588                                  
 27589 00002588 2EFE06[DF14]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 27590 0000258D E8950C                  	call	DevBreak		; M009
 27591                                  	; 11/12/2022
 27592                                  	; ds = cs (DevBreak)
 27593                                  
 27594                                  	; 03/04/2019 - Retro DOS v4.0
 27595                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 27596 00002590 E913FE                  	jmp	goodld			; otherwise pretend we loaded it in
 27597                                  coffj3: 
 27598                                  	; 18/12/2022
 27599                                  	; ax = 0
 27600 00002593 2EA2[DF14]              	mov	[cs:multdeviceflag],al ; 0
 27601                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 27602 00002597 E88B0C                  	call	DevBreak
 27603                                  	; 11/12/2022
 27604                                  	; ds = cs (DevBreak)
 27605                                  	
 27606                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27607                                  	; (SYSINIT:2919h)
 27608                                  	; 11/07/2023
 27609 0000259A E88203                  	call	CheckProtmanArena
 27610                                  	
 27611                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 27612                                  	;;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 27613                                  ;					;  created a bogus arena to try
 27614                                  ;					;  to protect some of its resident-
 27615                                  ;					;  init code.
 27616                                  	;call	CheckDoubleSpace
 27617 0000259D E95EFB                  	jmp	coff
 27618                                  
 27619                                  ;----------------------------------------------------------------------------
 27620                                  
 27621                                  ;CheckDoubleSpace:
 27622                                  ;;;;	ifdef	dblspace_hooks
 27623                                  ;
 27624                                  ;;	Now check for two special MagicDrv cases:
 27625                                  ;;
 27626                                  ;;       a) the last driver load was MagicDrv final placement:
 27627                                  ;;	   -> add number of MagicDrv reserved drives to drivenumber
 27628                                  ;;
 27629                                  ;;       b) MagicDrv is currently in temporary home:
 27630                                  ;;          -> call it to give it a chance to mount and shuffle drives
 27631                                  ;
 27632                                  ;	cmp	byte [cs:MagicHomeFlag],0 ; already home?
 27633                                  ;	jnz	short no_more_magic_calls ;  nothing more to do if so
 27634                                  ;
 27635                                  ;;	Now inquire of driver whether it is present, and final located
 27636                                  ;
 27637                                  ;	mov	ax,multMagicdrv ; 4A11h
 27638                                  ;	mov	bx,MD_VERSION ; 0
 27639                                  ;	int	2fh			; ch = number of MagicDrv drive letters
 27640                                  ;	or	ax,ax			; is it there?
 27641                                  ;	jnz	short no_more_magic_calls ; done if not
 27642                                  ;
 27643                                  ;	test	dx,8000h		; is it final placed?
 27644                                  ;	jnz	short magic_not_yet_home ;  skip if not
 27645                                  ;
 27646                                  ;;	Okay, now the driver is final placed!  Set the flag so we
 27647                                  ;;	don't keep checking it, and add its number of drive letters
 27648                                  ;;	to drivenumber.
 27649                                  ;
 27650                                  ;	mov	byte [cs:MagicHomeFlag],0ffh ; set the flag!
 27651                                  ;	add	[cs:drivenumber],ch	; add number of MagicDrv volumes to
 27652                                  ;;					;  the drive number we'll pass to the
 27653                                  ;;					;  next loadable block device.
 27654                                  ;
 27655                                  ;	jmp	short no_more_magic_calls ; and finished.
 27656                                  ;
 27657                                  ;magic_not_yet_home:
 27658                                  ;	push	es
 27659                                  ;	push	si
 27660                                  ;
 27661                                  ;	mov	cx,[cs:memhi]		; pass it a work buffer
 27662                                  ;	mov	dx,[cs:ALLOCLIM]	;   address in cx (segment)
 27663                                  ;	sub	dx,cx			;   for len dx (paragraphs)
 27664                                  ;
 27665                                  ;	mov	bx,2
 27666                                  ;	mov	al,[cs:driver_units]	; shuffle magicdrives and new drives
 27667                                  ;;					;   by this many units
 27668                                  ;
 27669                                  ;;BUGBUG 29-Oct-1992 bens Take this 55h out after Beta 4
 27670                                  ;	mov	ah,55h			; backdoor won't shuffle unless it
 27671                                  ;;					;  sees this, to prevent bad things
 27672                                  ;;					;  from happening if people run the
 27673                                  ;;					;  new driver with an old (dos) BIOS
 27674                                  ;	call	far [cs:MagicBackdoor]
 27675                                  ;
 27676                                  ;	pop	si
 27677                                  ;	pop	es
 27678                                  ;
 27679                                  ;no_more_magic_calls:
 27680                                  ;
 27681                                  ;;;;	endif
 27682                                  ;	retn
 27683                                  
 27684                                  ; 03/04/2019 - Retro DOS v4.0
 27685                                  
 27686                                  bad_bpb_size_sector:
 27687 000025A0 5E                      	pop	si
 27688 000025A1 07                      	pop	es
 27689 000025A2 BA[E64A]                	mov	dx,badsiz_pre
 27690 000025A5 BB[C44A]                	mov	bx,crlfm
 27691 000025A8 E8AB1F                  	call	prnerr
 27692                                  
 27693 000025AB E950FB                  	jmp	coff
 27694                                  
 27695                                  ;------------------------------------------------------------------------------
 27696                                  ; country command
 27697                                  ;      the syntax is:
 27698                                  ;	country=country id {,codepage {,path}}
 27699                                  ;	country=country id {,,path}	:default codepage id in dos
 27700                                  ;------------------------------------------------------------------------------
 27701                                  
 27702                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27703                                  	; (SYSINIT:2663h)
 27704                                  tryq:
 27705 000025AE 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 27706 000025B1 7403                    	je	short tryq_cont
 27707                                  skip_it3:
 27708 000025B3 E90D01                  	jmp	tryf
 27709                                  tryq_cont:
 27710                                  
 27711                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27712                                  ; (SYSINIT:297Eh)
 27713                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27714                                  ;%if 0
 27715                                  ;ifdef	MULTI_CONFIG
 27716 000025B6 E8881B                  	call	query_user		; query the user if config_cmd
 27717 000025B9 72F8                    	jc	short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 27718                                  ;endif
 27719                                  ;%endif ; 02/11/2022
 27720                                  
 27721                                  	; 31/12/2022
 27722                                  	;xor	bx,bx
 27723 000025BB 31C9                    	xor	cx,cx
 27724                                  	; 14/12/2022
 27725                                  	; ds = cs
 27726                                  	; bx = 0
 27727                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 27728                                  	;mov	word [cs:p_code_page],0
 27729                                  	; 31/12/2022
 27730                                  	; cx = 0
 27731                                  	;mov	[cntry_drv],bl ; 0
 27732                                  	;mov	[p_code_page],bx ; 0
 27733 000025BD 880E[0246]              	mov	[cntry_drv],cl ; 0
 27734 000025C1 890E[201E]              	mov	[p_code_page],cx ; 0	
 27735                                  
 27736 000025C5 BF[E91D]                	mov	di,cntry_parms
 27737                                  	;xor	cx,cx	; 31/12/2022
 27738                                  	; 03/01/2023
 27739                                  	;mov	dx,cx
 27740                                  do52:
 27741 000025C8 E86F03                  	call	sysinit_parse
 27742 000025CB 730B                    	jnc	short if52		; parse error,check error code and
 27743                                  
 27744 000025CD E8E000                  	call	cntry_error		; show message and end the search loop.
 27745                                  	; 14/12/2022
 27746                                  	; ds = cs
 27747 000025D0 C706[1E1E]FFFF          	mov	word [p_cntry_code],-1
 27748                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 27749 000025D6 EB34                    	jmp	short sr52
 27750                                  if52:
 27751 000025D8 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 27752 000025DB 742F                    	jz	short sr52		; then end the search loop
 27753                                  
 27754                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 27755                                  	; 14/12/2022
 27756                                  	; ds = cs
 27757 000025DD 803E[BB1D]01            	cmp	byte [result_val],_$P_Number	
 27758                                  	;cmp	byte [cs:result_val],_$P_Number
 27759 000025E2 7512                    	jnz	short if56
 27760                                  
 27761                                  	;;mov	ax,[cs:rw_dword]
 27762                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27763                                  	; 14/12/2022
 27764 000025E4 A1[BF1D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 27765 000025E7 83F901                  	cmp	cx,1
 27766 000025EA 7505                    	jne	short if57
 27767                                  
 27768                                  	;mov	[cs:p_cntry_code],ax
 27769                                  	; 14/12/2022
 27770 000025EC A3[1E1E]                	mov	[p_cntry_code],ax
 27771                                  
 27772                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27773                                  	;jmp	short en57
 27774                                  	; 12/12/2022
 27775                                  	;jmp	short en56
 27776 000025EF EBD7                    	jmp	short do52
 27777                                  if57:
 27778                                  	;mov	[cs:p_code_page],ax
 27779                                  	; 14/12/2022
 27780                                  	; ds = cs
 27781 000025F1 A3[201E]                	mov	[p_code_page],ax
 27782                                  en57:
 27783                                  	;jmp	short en56		; path entered
 27784                                  	; 12/12/2022
 27785 000025F4 EBD2                    	jmp	short do52
 27786                                  if56:
 27787 000025F6 1E                      	push	ds
 27788 000025F7 06                      	push	es
 27789 000025F8 56                      	push	si
 27790 000025F9 57                      	push	di
 27791                                  
 27792 000025FA 0E                      	push	cs
 27793 000025FB 07                      	pop	es
 27794                                  
 27795                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 27796                                  	; 14/12/2022
 27797 000025FC C536[BF1D]              	lds	si,[rv_dword]
 27798 00002600 BF[0246]                	mov	di,cntry_drv
 27799 00002603 E83E1F                  	call	move_asciiz
 27800                                  
 27801 00002606 5F                      	pop	di
 27802 00002607 5E                      	pop	si
 27803 00002608 07                      	pop	es
 27804 00002609 1F                      	pop	ds
 27805                                  
 27806                                  en56:
 27807 0000260A EBBC                    	jmp	short do52
 27808                                  
 27809                                  sr52:
 27810                                  	; 14/12/2022
 27811                                  	; ds = cs
 27812 0000260C 833E[1E1E]FF            	cmp	word [p_cntry_code],-1
 27813                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 27814 00002611 7509                    	jne	short tryq_open
 27815 00002613 E9E8FA                  	jmp	coff
 27816                                  
 27817                                  tryqbad:				;"invalid country code or code page"
 27818 00002616 F9                      	stc
 27819 00002617 BA[2D4B]                	mov     dx,badcountry
 27820 0000261A EB79                    	jmp     tryqchkerr
 27821                                  
 27822                                  tryq_open:
 27823                                  	; 14/12/2022
 27824                                  	; ds = cs
 27825 0000261C 803E[0246]00            	cmp	byte [cntry_drv],0
 27826                                  	;cmp	byte [cs:cntry_drv],0
 27827 00002621 7405                    	je	short tryq_def
 27828 00002623 BA[0246]                	mov	dx,cntry_drv
 27829 00002626 EB03                    	jmp	short tryq_openit
 27830                                  
 27831                                  tryq_def:
 27832 00002628 BA[0446]                	mov	dx,cntry_root
 27833                                  tryq_openit:
 27834 0000262B B8003D                  	mov	ax,3D00h		;open a file
 27835 0000262E F9                      	stc
 27836 0000262F CD21                    	int	21h
 27837 00002631 7242                    	jc	short tryqfilebad	;open failure
 27838                                  
 27839                                  	; 14/12/2022
 27840                                  	; ds = cs
 27841 00002633 A3[5A03]                	mov	[cntryfilehandle],ax
 27842                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 27843 00002636 89C3                    	mov	bx,ax
 27844 00002638 A1[1E1E]                	mov	ax,[p_cntry_code]
 27845 0000263B 8B16[201E]              	mov	dx,[p_code_page]
 27846                                  	;mov	ax,[cs:p_cntry_code]
 27847                                  	;mov	dx,[cs:p_code_page]	;now,ax=country id,bx=filehandle
 27848                                  	;mov	cx,[cs:memhi]
 27849 0000263F 8B0E[6203]              	mov	cx,[memhi]
 27850 00002643 81C18001                	add	cx,384			;need 6k buffer to handle country.sys
 27851                                  					;M023
 27852                                  	; 14/12/2022
 27853                                  	; ds = cs
 27854 00002647 3B0E[A302]              	cmp	cx,[ALLOCLIM]
 27855                                  	;cmp	cx,[cs:ALLOCLIM]
 27856 0000264B 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 27857                                  
 27858 0000264D BE[0246]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 27859 00002650 803C00                  	cmp	byte [si],0 		;default path?
 27860 00002653 7502                    	jne	short tryq_set_for_dos
 27861                                  
 27862 00002655 46                      	inc	si
 27863 00002656 46                      	inc	si			;ds:si -> cntry_root
 27864                                  
 27865                                  tryq_set_for_dos:
 27866                                  	; 14/12/2022
 27867                                  	; ds = cs
 27868 00002657 C43E[7702]              	les	di,[sysi_country]
 27869                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 27870 0000265B 57                      	push	di			;save di
 27871                                  	;add	di,8
 27872 0000265C 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 27873 0000265F E8E21E                  	call	move_asciiz		;set the path to country.sys in dos.
 27874 00002662 5F                      	pop	di			;es:di -> country info tab again.
 27875                                  
 27876                                  	; 14/12/2022	
 27877 00002663 8B0E[6203]              	mov	cx,[memhi]
 27878                                  	;mov	cx,[cs:memhi]
 27879 00002667 8ED9                    	mov	ds,cx
 27880 00002669 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 27881 0000266B E8661D                  	call	setdoscountryinfo	;now do the job!!!
 27882                                  	; ds <> cs ; 14/12/2022
 27883 0000266E 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 27884                                  
 27885 00002670 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 27886 00002673 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 27887                                  
 27888                                  tryqfilebad:
 27889 00002675 0E                      	push	cs
 27890 00002676 07                      	pop	es
 27891 00002677 2E803E[0246]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 27892 0000267D 7405                    	je	short tryqdefbad
 27893                                  
 27894 0000267F BE[0246]                	mov	si,cntry_drv
 27895 00002682 EB03                    	jmp	short tryqbadload
 27896                                  
 27897                                  tryqdefbad:				;default file has been used.
 27898 00002684 BE[0446]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 27899                                  tryqbadload:
 27900 00002687 E8C61E                  	call	badload 		;ds will be restored to sysinit_seg
 27901                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27902                                  	; (SYSINIT:2A69h)
 27903 0000268A 8B0E[A102]              	mov	cx,[CONFBOT] ; ds = cs (from badload)
 27904                                  	;mov	cx,[cs:CONFBOT]
 27905                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27906                                  	;mov	cx,[cs:top_of_cdss]
 27907                                  	; 11/12/2022
 27908                                  	; ds = cs
 27909                                  	;mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 27910 0000268E 8EC1                    	mov	es,cx			;restore es -> confbot.
 27911 00002690 EB13                    	jmp	short coffj4
 27912                                  
 27913                                  tryqmemory:
 27914 00002692 BA[704B]                	mov	dx,insufmemory
 27915                                  tryqchkerr:
 27916                                  	;mov	cx,[cs:CONFBOT]
 27917                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27918                                  	;mov	cx,[cs:top_of_cdss]
 27919                                  	; 12/12/2022
 27920 00002695 0E                      	push	cs
 27921 00002696 1F                      	pop	ds
 27922                                  	; 31/12/2022 - Retro DOS v4.2
 27923 00002697 8B0E[A102]              	mov	cx,[CONFBOT] ; (MSDOS 6.21 IO.SYS, SYSINIT)
 27924                                  	;mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 27925 0000269B 8EC1                    	mov	es,cx			;restore es -> confbot seg
 27926                                  	;push	cs
 27927                                  	;pop	ds			;restore ds to sysinit_seg
 27928 0000269D 7306                    	jnc	short coffj4		;if no error,then exit
 27929                                  
 27930 0000269F E8D61E                  	call	print			;else show error message
 27931 000026A2 E80303                  	call	error_line
 27932                                  coffj4:
 27933                                  	;mov	bx,[cs:cntryfilehandle]
 27934                                  	; 11/12/2022
 27935                                  	; ds = cs
 27936 000026A5 8B1E[5A03]              	mov	bx,[cntryfilehandle]
 27937 000026A9 B43E                    	mov	ah,3Eh
 27938 000026AB CD21                    	int	21h			;close file. don't care even if it fails.
 27939 000026AD E94EFA                  	jmp	coff
 27940                                  
 27941                                  ;--------------------------------------------
 27942                                  
 27943                                  cntry_error:
 27944                                  
 27945                                  ;function: show "invalid country code or code page" messages,or
 27946                                  ;		"error in country command" depending on the error code
 27947                                  ;		in ax returned by sysparse;
 27948                                  ;in:	ax - error code
 27949                                  ;	ds - sysinitseg
 27950                                  ;	es - confbot
 27951                                  ;out:	show message.  dx destroyed.
 27952                                  
 27953 000026B0 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 27954 000026B3 7505                    	jne	short if64
 27955 000026B5 BA[2D4B]                	mov	dx,badcountry		;"invalid country code or code page"
 27956 000026B8 EB03                    	jmp	short en64
 27957                                  if64:
 27958 000026BA BA[534B]                	mov	dx,badcountrycom	;"error in contry command"
 27959                                  en64:
 27960 000026BD E8B81E                  	call	print
 27961                                  	;call	error_line
 27962                                  	;retn
 27963                                  	; 11/12/2022
 27964 000026C0 E9E502                  	jmp	error_line
 27965                                  
 27966                                  ;------------------------------------------------------------------------------
 27967                                  ; files command
 27968                                  ;------------------------------------------------------------------------------
 27969                                  
 27970                                  ;******************************************************************************
 27971                                  ; function: parse the parameters of files= command.			      *
 27972                                  ;									      *
 27973                                  ; input :								      *
 27974                                  ;	es:si -> parameters in command line.				      *
 27975                                  ; output:								      *
 27976                                  ;	variable files set.						      *
 27977                                  ;									      *
 27978                                  ; subroutines to be called:						      *
 27979                                  ;	sysinit_parse							      *
 27980                                  ; logic:								      *
 27981                                  ; {									      *
 27982                                  ;	set di points to files_parms;					      *
 27983                                  ;	set dx,cx to 0; 						      *
 27984                                  ;	while (end of command line)					      *
 27985                                  ;	{ sysinit_parse;						      *
 27986                                  ;	  if (no error) then						      *
 27987                                  ;	     files = result_val._$P_picked_val				      *
 27988                                  ;	  else								      *
 27989                                  ;	     error exit;						      *
 27990                                  ;	};								      *
 27991                                  ; };									      *
 27992                                  ;									      *
 27993                                  ;******************************************************************************
 27994                                  
 27995                                  tryf:
 27996 000026C3 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 27997 000026C6 7528                    	jne	short tryl
 27998                                  
 27999                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28000                                  ; (SYSINIT:2AABh)
 28001                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28002                                  ;%if 0
 28003                                  ;ifdef	MULTI_CONFIG
 28004 000026C8 E8761A                  	call	query_user              ; query the user if config_cmd
 28005 000026CB 7223                    	jc	short tryl		; has the CONFIG_OPTION_QUERY bit set
 28006                                  ;endif
 28007                                  ;%endif ; 30/10/2022
 28008                                  
 28009                                  	; 14/12/2022
 28010                                  	; ds = cs
 28011                                  
 28012 000026CD BF[221E]                	mov	di,files_parms
 28013 000026D0 31C9                    	xor	cx,cx
 28014                                  	; 03/01/2023
 28015                                  	;mov	dx,cx
 28016                                  do67:
 28017 000026D2 E86502                  	call	sysinit_parse
 28018 000026D5 7303                    	jnc	short if67		; parse error
 28019                                  	;call	badparm_p		;  and show messages and end the search loop.
 28020                                  	;jmp	short sr67
 28021                                  	; 03/01/2023
 28022 000026D7 E98C01                  	jmp	badparm_p_coff
 28023                                  if67:
 28024 000026DA 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 28025 000026DD 7408                    	je	short en67		; then end the $endloop
 28026                                  
 28027                                  	; 14/12/2022
 28028                                  	; ds = cs
 28029                                  	;;mov	al,[cs:rv_dword]
 28030                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28031                                  	;mov	[cs:p_files],al		; save it temporarily
 28032                                  	;mov	al,[rv_dword]
 28033 000026DF A0[BF1D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 28034 000026E2 A2[411E]                	mov	[p_files],al
 28035                                  
 28036 000026E5 EBEB                    	jmp	short do67
 28037                                  en67:
 28038                                  	; 14/12/2022
 28039                                  	; ds = cs
 28040 000026E7 A0[411E]                	mov	al,[p_files]
 28041 000026EA A2[9D02]                	mov	[FILES],al	
 28042                                  	;mov	al,[cs:p_files]
 28043                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 28044                                  sr67:
 28045 000026ED E90EFA                  	jmp	coff
 28046                                  
 28047                                  ; 04/04/2019 - Retro DOS v4.0
 28048                                  
 28049                                  ;------------------------------------------------------------------------------
 28050                                  ; lastdrive command
 28051                                  ;------------------------------------------------------------------------------
 28052                                  
 28053                                  ;******************************************************************************
 28054                                  ; function: parse the parameters of lastdrive= command. 		      *
 28055                                  ;									      *
 28056                                  ; input :								      *
 28057                                  ;	es:si -> parameters in command line.				      *
 28058                                  ; output:								      *
 28059                                  ;	set the variable num_cds.					      *
 28060                                  ;									      *
 28061                                  ; subroutines to be called:						      *
 28062                                  ;	sysinit_parse							      *
 28063                                  ; logic:								      *
 28064                                  ; {									      *
 28065                                  ;	set di points to ldrv_parms;					      *
 28066                                  ;	set dx,cx to 0; 						      *
 28067                                  ;	while (end of command line)					      *
 28068                                  ;	{ sysinit_parse;						      *
 28069                                  ;	  if (no error) then						      *
 28070                                  ;	     set num_cds to the returned value; 			      *
 28071                                  ;	  else	/*error exit*/						      *
 28072                                  ;	     error exit;						      *
 28073                                  ;	};								      *
 28074                                  ; };									      *
 28075                                  ;									      *
 28076                                  ;******************************************************************************
 28077                                  
 28078                                  tryl:
 28079 000026F0 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 28080 000026F3 7528                    	jne	short tryp
 28081                                  
 28082                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28083                                  ; (SYSINIT:2AE0h)
 28084                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28085                                  ;%if 0
 28086 000026F5 E8491A                  	call	query_user      ; query the user if config_cmd
 28087 000026F8 7223                    	jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 28088                                  ;endif
 28089                                  ;%endif ; 30/10/2022
 28090                                  
 28091                                  	; 14/12/2022
 28092                                  	; ds = cs
 28093                                  
 28094 000026FA BF[791E]                	mov	di,ldrv_parms
 28095 000026FD 31C9                    	xor	cx,cx
 28096                                  	; 03/01/2023
 28097                                  	;mov	dx,cx
 28098                                  do73:
 28099 000026FF E83802                  	call	sysinit_parse
 28100 00002702 7303                    	jnc	short if73	; parse error
 28101                                  	;call	badparm_p	;  and show messages and end the search loop.
 28102                                  	;jmp	short sr73
 28103                                  	; 03/01/2023
 28104 00002704 E95F01                  	jmp	badparm_p_coff
 28105                                  if73:
 28106 00002707 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 28107 0000270A 7408                    	je	short en73	; then end the $endloop
 28108                                  
 28109                                  	; 14/12/2022
 28110                                  	; ds = cs
 28111                                  	;;mov	al,[cs:rv_dword]
 28112                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 28113                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 28114                                  
 28115                                  	;mov	al,[rv_dword]
 28116 0000270C A0[BF1D]                	mov	al,[rv_byte]
 28117 0000270F A2[8D1E]                	mov	[p_ldrv],al
 28118                                  
 28119 00002712 EBEB                    	jmp	short do73
 28120                                  en73:
 28121                                  	; 14/12/2022
 28122                                  	; ds = cs
 28123 00002714 A0[8D1E]                	mov	al,[p_ldrv]
 28124 00002717 A2[A002]                	mov	[NUM_CDS],al
 28125                                  	;mov	al,[cs:p_ldrv]
 28126                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 28127                                  sr73:
 28128 0000271A E9E1F9                  	jmp	coff
 28129                                  
 28130                                  ;--------------------------------------------------------------------------
 28131                                  ; setting drive parameters
 28132                                  ;--------------------------------------------------------------------------
 28133                                  
 28134                                  tryp:
 28135 0000271D 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 28136 00002720 7516                    	jne	short tryk
 28137                                  
 28138                                  ; 31/12/2022 - Retro DOS v4.2
 28139                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28140                                  ;%if 0
 28141                                  ;ifdef	MULTI_CONFIG
 28142 00002722 E81C1A                  	call	query_user      ; query the user if config_cmd
 28143 00002725 7211                    	jc	short tryk	; has the CONFIG_OPTION_QUERY bit set
 28144                                  ;endif
 28145                                  ;%endif ; 30/10/2022
 28146                                  
 28147 00002727 E8E50E                  	call	parseline
 28148 0000272A 7209                    	jc	short trypbad
 28149 0000272C E8F90D                  	call	setparms
 28150 0000272F E83B0E                  	call	diddleback
 28151                                  
 28152                                  ; No error check here, because setparms and diddleback have no error 
 28153                                  ; returns, and setparms as coded now can return with carry set. 
 28154                                  ;       jc	short trypbad
 28155                                  
 28156                                  	; 12/12/2022
 28157                                  	; cf = 0
 28158                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28159                                  	;jc	short trypbad
 28160                                  	
 28161 00002732 E9C9F9                  	jmp	coff
 28162                                  trypbad:
 28163 00002735 E92502                  	jmp	badop
 28164                                  
 28165                                  ;--------------------------------------------------------------------------
 28166                                  ; setting internal stack parameters
 28167                                  ; stacks=m,n where
 28168                                  ;	m is the number of stacks (range 8 to 64,default 9)
 28169                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 28170                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 28171                                  ;	any combinations that are not within the specified limits will
 28172                                  ;	result in "unrecognized command" error.
 28173                                  ;--------------------------------------------------------------------------
 28174                                  
 28175                                  ;**************************************************************************
 28176                                  ;									  *
 28177                                  ; function: parse the parameters of stacks= command.			  *
 28178                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 28179                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 28180                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 28181                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 28182                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 28183                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 28184                                  ;	    (or if "0,0" pair has been entered.)			  *
 28185                                  ; input :								  *
 28186                                  ;	es:si -> parameters in command line.				  *
 28187                                  ; output:								  *
 28188                                  ;	set the variables stack_count,stack_size.			  *
 28189                                  ;									  *
 28190                                  ; subroutines to be called:						  *
 28191                                  ;	sysinit_parse							  *
 28192                                  ; logic:								  *
 28193                                  ; {									  *
 28194                                  ;	set di points to stks_parms;					  *
 28195                                  ;	set dx,cx to 0; 						  *
 28196                                  ;	while (end of command line)					  *
 28197                                  ;	{ sysinit_parse;						  *
 28198                                  ;	  if (no error) then						  *
 28199                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 28200                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 28201                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 28202                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 28203                                  ;	     }								  *
 28204                                  ;	  else	/*error exit*/						  *
 28205                                  ;	     error exit;						  *
 28206                                  ;	};								  *
 28207                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 28208                                  ;	if o.k.,then set stack_count,stack_size;			  *
 28209                                  ;	 else error_exit;						  *
 28210                                  ; };									  *
 28211                                  ;**************************************************************************
 28212                                  
 28213                                  tryk:
 28214                                          ;if      stacksw
 28215                                  
 28216 00002738 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 28217 0000273B 7402                    	je	short do_tryk
 28218                                  skip_it4:
 28219 0000273D EB79                    	jmp	short trys	; 15/12/2022
 28220                                  do_tryk:
 28221                                  
 28222                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28223                                  ; (SYSINIT:2B33h)
 28224                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28225                                  ;%if 0
 28226                                  ;ifdef	MULTI_CONFIG
 28227 0000273F E8FF19                         call	query_user              ; query the user if config_cmd
 28228 00002742 72F9                           jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 28229                                  ;endif
 28230                                  ;%endif	; 30/10/2022
 28231                                  
 28232                                  	; 14/12/2022
 28233                                  	; ds = cs
 28234                                  
 28235 00002744 BF[8E1E]                	mov	di,stks_parms
 28236 00002747 31C9                    	xor	cx,cx
 28237                                  	; 03/01/2023
 28238                                  	;mov	dx,cx
 28239                                  do79:
 28240 00002749 E8EE01                  	call	sysinit_parse
 28241 0000274C 730B                    	jnc	short if79		; parse error
 28242                                  
 28243 0000274E BA[DF4B]                	mov	dx,badstack		; "invalid stack parameter"
 28244 00002751 E8241E                  	call	print			;  and show messages and end the search loop.
 28245 00002754 E85102                  	call	error_line
 28246                                  	;jmp	sr79
 28247                                  	; 11/12/2022
 28248 00002757 EB39                    	jmp	short sr79
 28249                                  if79:
 28250 00002759 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 28251 0000275C 7412                    	je	short en79		; then end the $endloop
 28252                                  
 28253                                  	; 14/12/2022
 28254                                  	; ds = cs
 28255                                  
 28256                                  	;;mov	ax,[cs:rv_dword]
 28257                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28258                                  	;mov	ax,[rv_dword]
 28259 0000275E A1[BF1D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 28260                                  
 28261 00002761 83F901                  	cmp	cx,1
 28262 00002764 7505                    	jne	short if83
 28263                                  
 28264                                  	; 14/12/2022
 28265                                  	;mov	[cs:p_stack_count],ax
 28266                                  	;jmp	short en83
 28267 00002766 A3[C31E]                	mov	[p_stack_count],ax
 28268 00002769 EBDE                    	jmp	short do79
 28269                                  if83:
 28270                                  	; 14/12/2022
 28271                                  	;mov	[cs:p_stack_size],ax
 28272 0000276B A3[C51E]                	mov	[p_stack_size],ax
 28273                                  en83:
 28274 0000276E EBD9                    	jmp	short do79
 28275                                  en79:
 28276                                  	; 14/12/2022
 28277                                  	; ds = cs
 28278 00002770 A1[C31E]                	mov	ax,[p_stack_count]
 28279 00002773 09C0                    	or	ax,ax
 28280 00002775 741E                    	jz	short if87		
 28281                                  
 28282                                  	; 14/12/2022
 28283                                  	;cmp	word [p_stack_count],0
 28284                                  	;;cmp	word [cs:p_stack_count],0
 28285                                  	;je	short if87
 28286                                  
 28287                                  	; 14/12/2022
 28288 00002777 83F808                  	cmp	ax,mincount ; 8
 28289                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 28290                                  	; 15/12/2022
 28291 0000277A 721F                    	jb	short en87
 28292 0000277C 833E[C51E]20            	cmp	word [p_stack_size],minsize ; 32
 28293                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 28294                                  	; 15/12/2022
 28295 00002781 7218                    	jb	short en87
 28296                                  if94:
 28297                                  	; 14/12/2022
 28298                                  	; ds = cs
 28299                                  	; ax = [p_stack_count]
 28300                                  	;mov	ax,[p_stack_count]
 28301                                  	;;mov	ax,[cs:p_stack_count]
 28302 00002783 A3[8A02]                	mov	[stack_count],ax
 28303                                  	;mov	[cs:stack_count],ax
 28304                                  	;mov	ax,[cs:p_stack_size]
 28305 00002786 A1[C51E]                	mov	ax,[p_stack_size]
 28306                                  	;mov	[cs:stack_size],ax
 28307 00002789 A3[8C02]                	mov	[stack_size],ax
 28308                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 28309 0000278C C706[8E02]FFFF          	mov	word [stack_addr],-1
 28310                                  sr79:
 28311 00002792 E969F9                  	jmp	coff
 28312                                  
 28313                                  if87:
 28314                                  	; 14/12/2022
 28315 00002795 3906[C51E]              	cmp	[p_stack_size],ax ; 0
 28316 00002799 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 28317                                  	;cmp	word [cs:p_stack_size],0
 28318                                  	;je	short if94
 28319                                  en87:
 28320                                  	; 15/12/2022
 28321                                  	; ([p_stack_count] is invalid, use default values)
 28322                                  	; 14/12/2022
 28323                                  	; ds = cs
 28324 0000279B C706[8A02]0900          	mov	word [stack_count],defaultcount ; 9
 28325 000027A1 C706[8C02]8000          	mov	word [stack_size],defaultsize ; 128
 28326 000027A7 C706[8E02]0000          	mov	word [stack_addr],0
 28327                                  	;mov	word [cs:stack_count],defaultcount ; 9
 28328                                  	;				; reset to default value.
 28329                                  	;mov	word [cs:stack_size],defaultsize ; 128
 28330                                  	;mov	word [cs:stack_addr],0
 28331                                  
 28332 000027AD BA[DF4B]                	mov	dx,badstack
 28333 000027B0 E8C51D                  	call	print
 28334 000027B3 E8F201                  	call	error_line
 28335 000027B6 EBDA                    	jmp	short sr79
 28336                                  
 28337                                  ; 15/12/2022
 28338                                  %if 0
 28339                                  	mov	di,stks_parms
 28340                                  	xor	cx,cx
 28341                                  	; 03/01/2023
 28342                                  	;mov	dx,cx
 28343                                  do79:
 28344                                  	call	sysinit_parse
 28345                                  	jnc	short if79		; parse error
 28346                                  
 28347                                  	mov	dx,badstack		; "invalid stack parameter"
 28348                                  	call	print			;  and show messages and end the search loop.
 28349                                  	call	error_line
 28350                                  	;jmp	sr79
 28351                                  	; 11/12/2022
 28352                                  	jmp	short sr79
 28353                                  if79:
 28354                                  	cmp	ax,_$P_RC_EOL		; end of line?
 28355                                  	je	short en79		; then end the $endloop
 28356                                  
 28357                                  	;mov	ax,[cs:rv_dword]
 28358                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28359                                  	cmp	cx,1
 28360                                  	jne	short if83
 28361                                  
 28362                                  	mov	[cs:p_stack_count],ax
 28363                                  	jmp	short en83
 28364                                  if83:
 28365                                  	mov	[cs:p_stack_size],ax
 28366                                  en83:
 28367                                  	jmp	short do79
 28368                                  en79:
 28369                                  	cmp	word [cs:p_stack_count],0
 28370                                  	je	short if87
 28371                                  
 28372                                  	cmp	word [cs:p_stack_count],mincount ; 8
 28373                                  	jb	short ll88
 28374                                  	cmp	word [cs:p_stack_size],minsize ; 32
 28375                                  	jnb	short if88
 28376                                  ll88:
 28377                                  	mov	word [cs:p_stack_count],-1 ; invalid
 28378                                  if88:
 28379                                  	jmp	short en87
 28380                                  
 28381                                  	; 11/12/2022
 28382                                  if94:
 28383                                  	mov	ax,[cs:p_stack_count]
 28384                                  	mov	[cs:stack_count],ax
 28385                                  	mov	ax,[cs:p_stack_size]
 28386                                  	mov	[cs:stack_size],ax
 28387                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 28388                                  sr79:
 28389                                  	jmp	coff
 28390                                  
 28391                                  if87:
 28392                                  	cmp	word [cs:p_stack_size],0
 28393                                  	je	short en87
 28394                                  	mov	word [cs:p_stack_count],-1 ; invalid
 28395                                  en87:
 28396                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 28397                                  	jne	short if94
 28398                                  
 28399                                  	mov	word [cs:stack_count],defaultcount ; 9
 28400                                  					; reset to default value.
 28401                                  	mov	word [cs:stack_size],defaultsize ; 128
 28402                                  	mov	word [cs:stack_addr],0
 28403                                  
 28404                                  	mov	dx,badstack
 28405                                  	call	print
 28406                                  	call	error_line
 28407                                  	jmp	short sr79
 28408                                  
 28409                                  %endif
 28410                                  
 28411                                  ; 11/12/2022
 28412                                  %if 0 
 28413                                  
 28414                                  if94:
 28415                                  	mov	ax,[cs:p_stack_count]
 28416                                  	mov	[cs:stack_count],ax
 28417                                  	mov	ax,[cs:p_stack_size]
 28418                                  	mov	[cs:stack_size],ax
 28419                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 28420                                  sr79:
 28421                                  	jmp	coff
 28422                                  
 28423                                  %endif
 28424                                  
 28425                                  	;endif
 28426                                  
 28427                                  ;------------------------------------------------------------------------
 28428                                  ; shell command
 28429                                  ;------------------------------------------------------------------------
 28430                                  
 28431                                  trys:
 28432 000027B8 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 28433 000027BB 755A                    	jne	short tryx
 28434                                  
 28435                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28436                                  ; (SYSINIT:2BE1h)
 28437                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28438                                  ;%if 0
 28439                                  ;ifdef	MULTI_CONFIG
 28440 000027BD E88119                  	call	query_user              ; query the user if config_cmd
 28441 000027C0 7255                    	jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 28442 000027C2 2EC606[4F46]01          	mov	byte [cs:newcmd],1
 28443                                  ;endif
 28444                                  ;%endif ; 30/10/2022
 28445                                  
 28446                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 28447                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28448                                  	;mov	byte [cs:command_line+1],0
 28449                                  	; 15/12/2022
 28450                                  	; ds = cs
 28451 000027C8 C606[E146]00            	mov	byte [command_line+1],0
 28452                                  
 28453 000027CD BF[5346]                        mov     di,commnd+1		; we already have the first char
 28454 000027D0 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 28455                                  storeshell:
 28456 000027D3 E8BB01                  	call	getchr
 28457 000027D6 08C0                            or      al,al                   ; this is the normal case: "organize"
 28458 000027D8 741C                            jz	short getshparms	; put a ZERO right after the filename
 28459                                  
 28460 000027DA 3C20                            cmp     al," "                  ; this may happen if there are no args
 28461 000027DC 7209                            jb	short endofshell	; I suppose...
 28462 000027DE 8805                    	mov	[di],al
 28463 000027E0 47                      	inc	di
 28464                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 28465                                          ;jb	short storeshell	; commnd (the filename)
 28466                                          ;jmp	short endofshell
 28467                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28468                                  	;jmp	short storeshell
 28469                                  	; 03/01/2023
 28470 000027E1 81FF[9146]              	cmp	di,commnd+63		; this makes sure we don't overflow
 28471 000027E5 72EC                            jb	short storeshell	; commnd (the filename)
 28472                                  	;jmp	short endofshell
 28473                                  
 28474                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28475                                  ;getshparms:
 28476                                  ;	mov     byte [di],0		; zero-terminate the filename
 28477                                  ;	mov     di,command_line+1	; prepare to process the command-line
 28478                                  ;
 28479                                  ;parmloop:
 28480                                  ;	call	getchr
 28481                                  ;	cmp	al," "
 28482                                  ;	jb	short endofparms
 28483                                  ;	mov	[di],al
 28484                                  ;	inc	di
 28485                                  ;	cmp     di,command_line+126
 28486                                  ;	jb	short parmloop
 28487                                  ;endofparms:
 28488                                  ;	mov     cx,di
 28489                                  ;	sub     cx,command_line+1
 28490                                  ;	mov     [cs:command_line],cl
 28491                                  ;
 28492                                  ;endofshell:
 28493                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 28494                                  ;					; the command-line as the case may be)
 28495                                  ;skipline:
 28496                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 28497                                  ;       je	short endofline		; the line: watch for ever-present LF
 28498                                  ;call	getchr
 28499                                  ;       jnc	short skipline		; keep it up as long as there are chars
 28500                                  ;
 28501                                  ;endofline:
 28502                                  ;       jmp     conflp
 28503                                  
 28504                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28505                                  endofshell:
 28506 000027E7 C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 28507                                  					; the command-line as the case may be)
 28508                                  	; 11/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 28509                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2C33h
 28510                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:314Eh
 28511                                  	;call	getchr
 28512                                  skipline:		; MSDOS 6.21 IO.SYS - SYSINIT:2C33h
 28513 000027EA 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 28514 000027EC 7405                    	je	short endofline		; the line: watch for ever-present LF
 28515 000027EE E8A001                  	call	getchr
 28516                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.1 IO.SYS)
 28517                                  	; (SYSINIT:2C3Ah)
 28518 000027F1 73F7                    	jnb	short skipline
 28519                                  	
 28520                                  endofline:
 28521 000027F3 E9B0F8                  	jmp     conflp
 28522                                  
 28523                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28524                                  getshparms:
 28525                                  	; 18/12/2022
 28526                                  	; al = 0
 28527 000027F6 8805                    	mov	[di],al ; 0
 28528                                  	;mov	byte [di],0		; zero-terminate the filename
 28529 000027F8 BF[E146]                	mov     di,command_line+1	; prepare to process the command-line
 28530                                  parmloop:
 28531 000027FB E89301                  	call	getchr
 28532 000027FE 3C20                    	cmp	al," " ; 20h
 28533                                  	;jb	short endofshell
 28534                                  	; 03/01/2023
 28535 00002800 7209                    	jb	short endofparms
 28536                                  
 28537 00002802 8805                    	mov	[di],al
 28538 00002804 47                      	inc	di
 28539                                  	;jmp	short parmloop
 28540                                  	; 03/01/2023 - Retro DOS v4.2
 28541 00002805 81FF[5E47]              	cmp     di,command_line+126
 28542 00002809 72F0                    	jb	short parmloop
 28543                                  
 28544                                  	; 03/01/2023 - Retro DOS v4.2
 28545                                  endofparms:
 28546 0000280B 89F9                    	mov	cx,di
 28547 0000280D 81E9[E146]              	sub	cx,command_line+1
 28548                                  	;mov	[cs:command_line],cl
 28549                                  	; 03/01/2023
 28550 00002811 880E[E046]              	mov	[command_line],cl
 28551 00002815 EBD0                    	jmp	short endofshell
 28552                                  
 28553                                  ;------------------------------------------------------------------------
 28554                                  ; fcbs command
 28555                                  ;------------------------------------------------------------------------
 28556                                  
 28557                                  ;************************************************************************
 28558                                  ; function: parse the parameters of fcbs= command.			*
 28559                                  ;									*
 28560                                  ; input :								*
 28561                                  ;	es:si -> parameters in command line.				*
 28562                                  ; output:								*
 28563                                  ;	set the variables fcbs,keep.					*
 28564                                  ;									*
 28565                                  ; subroutines to be called:						*
 28566                                  ;	sysinit_parse							*
 28567                                  ; logic:								*
 28568                                  ; {									*
 28569                                  ;	set di points to fcbs_parms;					*
 28570                                  ;	set dx,cx to 0; 						*
 28571                                  ;	while (end of command line)					*
 28572                                  ;	{ sysparse;							*
 28573                                  ;	  if (no error) then						*
 28574                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 28575                                  ;		   fcbs = result_val._$P_picked_val;			*
 28576                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 28577                                  ;		   keep = result_val._$P_picked_val;			*
 28578                                  ;	     }								*
 28579                                  ;	  else	/*error exit*/						*
 28580                                  ;	     error exit;						*
 28581                                  ;	};								*
 28582                                  ; };									*
 28583                                  ;************************************************************************
 28584                                  
 28585                                  tryx:
 28586 00002817 80FC58                          cmp     ah,CONFIG_FCBS  ; 'X'
 28587                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28588 0000281A 7534                    	jne	short try1
 28589                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28590                                  	;jne	short tryy	; comment command
 28591                                  
 28592                                  ; 31/12/2022 - Retro DOS v4.2
 28593                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28594                                  ;%if 0
 28595                                  ;ifdef	MULTI_CONFIG
 28596 0000281C E82219                  	call	query_user      ; query the user if config_cmd
 28597 0000281F 722F                    	jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 28598                                  ;endif
 28599                                  ;%endif ; 30/10/2022
 28600                                  
 28601 00002821 BF[421E]                	mov	di,fcbs_parms
 28602 00002824 31C9                    	xor	cx,cx
 28603                                  	; 03/01/2023
 28604                                  	;mov	dx,cx
 28605                                  do98:
 28606 00002826 E81101                  	call	sysinit_parse
 28607                                          ; 03/01/2023
 28608                                  	;jnc	short if98	; parse error
 28609                                          ;call	badparm_p	;  and show messages and end the search loop.
 28610                                  	;jmp	short sr98
 28611                                  	;------------------------
 28612                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28613 00002829 723B                    	jc	short badparm_p_coff
 28614                                  if98:
 28615 0000282B 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 28616 0000282E 7412                    	je	short en98	; then end the $endloop
 28617                                  
 28618                                  	;;mov	al,[cs:rv_dword]
 28619                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28620                                  	; 15/12/2022
 28621                                  	; ds = cs
 28622 00002830 A0[BF1D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 28623 00002833 83F901                  	cmp	cx,1		; the first positional?
 28624 00002836 7505                    	jne	short if102
 28625                                  	;mov	[cs:p_fcbs],al
 28626                                  	; 15/12/2022
 28627 00002838 A2[771E]                	mov	[p_fcbs],al
 28628                                  	;jmp	short en102
 28629 0000283B EBE9                    	jmp	short do98
 28630                                  if102:
 28631                                  	;mov	[cs:p_keep],al
 28632                                  	; 15/12/2022
 28633 0000283D A2[781E]                	mov	[p_keep],al
 28634                                  en102:
 28635 00002840 EBE4                    	jmp	short do98
 28636                                  en98:
 28637                                  	; 15/12/2022
 28638                                  	; ds = cs
 28639 00002842 A0[771E]                	mov	al,[p_fcbs]
 28640 00002845 A2[9E02]                	mov	[FCBS],al
 28641 00002848 C606[9F02]00            	mov	byte [KEEP],0
 28642                                  	;mov	al,[cs:p_fcbs]	 ; M017
 28643                                  	;mov	[cs:FCBS],al	 ; M017
 28644                                  	;mov	byte [cs:KEEP],0 ; M017
 28645                                  sr98:
 28646 0000284D E9AEF8                  	jmp	coff
 28647                                  
 28648                                  ; 31/12/2022 - Retro DOS v4.2
 28649                                  %if 0
 28650                                  
 28651                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28652                                  ;-------------------------------------------------------------------------
 28653                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 28654                                  ;		line number
 28655                                  ;-------------------------------------------------------------------------
 28656                                  
 28657                                  tryy:
 28658                                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 28659                                  	jne	short try0
 28660                                  
 28661                                  donothing:
 28662                                  	; 15/12/2022
 28663                                  	; ds = cs
 28664                                  	dec	word [chrptr]
 28665                                  	inc	word [count]
 28666                                  	; 02/11/2022
 28667                                  	;dec	word [cs:chrptr]
 28668                                  	;inc	word [cs:count]
 28669                                  
 28670                                  	jmp	coff
 28671                                  
 28672                                  ;------------------------------------------------------------------------
 28673                                  ; rem command
 28674                                  ;------------------------------------------------------------------------
 28675                                  
 28676                                  try0:				; do nothing with this line.
 28677                                  	cmp     ah,CONFIG_REM ; '0'
 28678                                  	je	short donothing
 28679                                  
 28680                                  %endif
 28681                                  
 28682                                  ; 07/04/2019 - Retro DOS v4.0
 28683                                  
 28684                                  ;-----------------------------------------------------------------------
 28685                                  ; switches command
 28686                                  ;-----------------------------------------------------------------------
 28687                                  
 28688                                  ;***********************************************************************
 28689                                  ;								       *
 28690                                  ; function: parse the option switches specified.		       *
 28691                                  ; note - this command is intended for the future use also.	       *
 28692                                  ; when we need to set system data flag,use this command.	       *
 28693                                  ;								       *
 28694                                  ; input :							       *
 28695                                  ;	es:si -> parameters in command line.			       *
 28696                                  ; output:							       *
 28697                                  ;	p_swit_k set if /k option chosen.			       *
 28698                                  ;								       *
 28699                                  ; subroutines to be called:					       *
 28700                                  ;	sysinit_parse						       *
 28701                                  ; logic:							       *
 28702                                  ; {								       *
 28703                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 28704                                  ;	set dx,cx to 0; 					       *
 28705                                  ;	while (end of command line)				       *
 28706                                  ;	{ sysinit_parse;					       *
 28707                                  ;	  if (no error) then					       *
 28708                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 28709                                  ;		    p_swit_k = 1				       *
 28710                                  ;	       endif						       *
 28711                                  ;	  else {show error message;error exit}			       *
 28712                                  ;	};							       *
 28713                                  ; };								       *
 28714                                  ;								       *
 28715                                  ;***********************************************************************
 28716                                  
 28717                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 28718                                  
 28719                                  try1:
 28720 00002850 80FC31                          cmp     ah,CONFIG_SWITCHES ; '1'
 28721 00002853 7402                    	je	short do_try1	; switches= command entered?
 28722                                  skip_it5:
 28723                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28724                                  	; (SYSINIT:2C8Ah)
 28725 00002855 EB7F                    	jmp	tryv
 28726                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28727                                  	;jmp	tryz
 28728                                  
 28729                                  do_try1:
 28730                                  
 28731                                  ; 31/12/2022 - Retro DOS v4.2
 28732                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28733                                  ;%if 0
 28734                                  ;ifdef	MULTI_CONFIG
 28735 00002857 E8E718                  	call	query_user      ; query the user if config_cmd
 28736 0000285A 72F9                    	jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 28737                                  ;endif
 28738                                  ;%endif ; 30/10/2022
 28739                                  
 28740 0000285C BF[DC1E]                	mov	di,swit_parms
 28741 0000285F 31C9                    	xor	cx,cx
 28742                                  	; 03/01/2023
 28743                                  	;mov	dx,cx
 28744                                  do110:
 28745 00002861 E8D600                  	call	sysinit_parse
 28746 00002864 7306                    	jnc	short if110	; parse error
 28747                                  	;call	badparm_p	;  and show messages and end the search loop.
 28748                                  	;jmp	short sr110
 28749                                  	; -----------------------
 28750                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28751                                  badparm_p_coff:
 28752 00002866 E80001                  	call	badparm_p
 28753 00002869 E992F8                  	jmp	coff
 28754                                  	;------------------------
 28755                                  if110:
 28756 0000286C 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 28757 0000286F 742D                    	je	short en110	; then jmp to $endloop for semantic check
 28758                                  
 28759                                  	; 15/12/2022
 28760                                  	; ds = cs
 28761                                  	;;cmp	word [cs:result_val_swoff],swit_k
 28762                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 28763 00002871 813E[BD1D][F81E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 28764 00002877 7507                    	jne	short if115	;				;M059
 28765                                  	; 15/12/2022
 28766 00002879 C606[2B1F]01            	mov	byte [p_swit_k],1
 28767                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 28768 0000287E EBE1                    	jmp	short do110
 28769                                  if115:	
 28770                                  	; 15/12/2022						;M059
 28771                                  	;;cmp	word [cs:result_val_swoff],swit_t
 28772                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 28773 00002880 813E[BD1D][1C1F]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 28774 00002886 7507                    	jne	short if116					;M059 M063
 28775                                  	; 15/12/2022
 28776 00002888 C606[2C1F]01            	mov	byte [p_swit_t],1
 28777                                  	;mov	byte [cs:p_swit_t],1				;M059
 28778 0000288D EBD2                    	jmp	short do110					;M059
 28779                                  if116:
 28780                                  	; 15/12/2022
 28781                                  	;;cmp	word [cs:result_val_swoff],swit_w
 28782                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 28783 0000288F 813E[BD1D][281F]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 28784 00002895 75CA                    	jne	short do110					;M063
 28785                                  	; 15/12/2022
 28786 00002897 C606[2D1F]01            	mov	byte [p_swit_w],1
 28787                                  	;mov	byte [cs:p_swit_w],1				;M063
 28788 0000289C EBC3                    	jmp	short do110					;M063
 28789                                  en110:
 28790                                  	; 15/12/2022
 28791                                  	; ds = cs
 28792 0000289E 803E[2B1F]01            	cmp	byte [p_swit_k],1
 28793                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 28794 000028A3 1E                      	push	ds
 28795                                  	;;mov	ax,Bios_Data
 28796                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 28797                                  	; 21/10/2022
 28798 000028A4 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 28799 000028A7 8ED8                    	mov	ds,ax
 28800 000028A9 750A                    	jne	short if117
 28801 000028AB C606[E504]00            	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 28802 000028B0 C606[E604]01            	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 28803                                  if117:
 28804                                  	; 15/12/2022
 28805                                  	; ds <> cs
 28806 000028B5 2EA0[2C1F]              	mov	al,[cs:p_swit_t]				;M059
 28807 000028B9 A2[F204]                	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 28808                                  
 28809 000028BC 2E803E[2D1F]00          	cmp	byte [cs:p_swit_w],0				;M063
 28810 000028C2 740E                    	je	short skip_dos_flag				;M063
 28811 000028C4 06                      	push	es
 28812 000028C5 53                      	push	bx
 28813 000028C6 B452                    	mov	ah,GET_IN_VARS ; 52h				;M063
 28814 000028C8 CD21                    	int	21h						;M063
 28815                                  			; DOS - 2+ internal - GET LIST OF LISTS
 28816                                  			; Return: ES:BX -> DOS list of lists
 28817                                  	;or	bytes [es:86h],2
 28818 000028CA 26800E860002            	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 28819 000028D0 5B                      	pop	bx
 28820 000028D1 07                      	pop	es
 28821                                  skip_dos_flag:							;M063
 28822 000028D2 1F                      	pop	ds
 28823                                  sr110:
 28824 000028D3 E928F8                  	jmp	coff
 28825                                  
 28826                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28827                                  ; (SYSINIT:2D14h)
 28828                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28829                                  ;%if 0
 28830                                  
 28831                                  tryv:
 28832                                  
 28833                                  ;ifdef	MULTI_CONFIG
 28834                                  ;------------------------------------------------------------------------
 28835                                  ; set command (as in "set var=value<cr/lf>")
 28836                                  ;------------------------------------------------------------------------
 28837                                  
 28838 000028D6 80FC56                  	cmp	ah,CONFIG_SET  ; 'V'
 28839 000028D9 750F                    	jne	short tryn
 28840 000028DB E86318                  	call	query_user      ; query the user if config_cmd
 28841 000028DE 720A                    	jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 28842 000028E0 E85714                  	call	copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 28843 000028E3 73EE                    	jnc	short sr110	; no error
 28844                                  err:    
 28845 000028E5 E8C000                  	call	error_line      ; whoops, display error in line XXX
 28846 000028E8 EBE9                    	jmp	short sr110     ; jump to coff (to skip to next line)
 28847                                  
 28848                                  ;------------------------------------------------------------------------
 28849                                  ; numlock command (as in "numlock=on|off")
 28850                                  ;------------------------------------------------------------------------
 28851                                  tryn:
 28852 000028EA 80FC4E                  	cmp	ah,CONFIG_NUMLOCK  ;'N'
 28853 000028ED 750C                    	jne	short tryy      
 28854 000028EF E84F18                  	call	query_user      ; query the user if config_cmd
 28855 000028F2 7207                    	jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 28856 000028F4 E8C410                  	call	set_numlock
 28857 000028F7 72EC                    	jc	short err
 28858 000028F9 EBD8                    	jmp	short sr110	; all done
 28859                                  
 28860                                  ;endif	;MULTI_CONFIG
 28861                                  
 28862                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28863                                  ;-------------------------------------------------------------------------
 28864                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 28865                                  ;		line number
 28866                                  ;-------------------------------------------------------------------------
 28867                                  
 28868                                  	; 31/12/2022
 28869                                  tryy:
 28870 000028FB 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 28871 000028FE 750B                    	jne	short try0
 28872                                  
 28873                                  donothing:
 28874                                  	; 15/12/2022
 28875                                  	; ds = cs
 28876 00002900 FF0E[5803]              	dec	word [chrptr]
 28877 00002904 FF06[5403]              	inc	word [count]
 28878                                  	; 02/11/2022
 28879                                  	;dec	word [cs:chrptr]
 28880                                  	;inc	word [cs:count]
 28881                                  
 28882 00002908 E9F3F7                  	jmp	coff
 28883                                  
 28884                                  ;------------------------------------------------------------------------
 28885                                  ; rem command
 28886                                  ;------------------------------------------------------------------------
 28887                                  
 28888                                  try0:				; do nothing with this line.
 28889 0000290B 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 28890 0000290E 74F0                    	je	short donothing
 28891                                  
 28892                                  ;%endif	; 30/10/2022
 28893                                  
 28894                                  ; 30/10/2022
 28895                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 28896                                  
 28897                                  ;------------------------------------------------------------------------
 28898                                  ; bogus command
 28899                                  ;------------------------------------------------------------------------
 28900                                  
 28901                                  tryz:
 28902 00002910 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 28903                                  	; 31/12/2022
 28904 00002913 74EB                    	je	short donothing
 28905                                  	; 02/11/2022
 28906                                  	;je	short tryz_donothing
 28907                                  
 28908 00002915 FF0E[5803]              	dec	word [chrptr]
 28909 00002919 FF06[5403]              	inc	word [count]
 28910 0000291D EB3E                    	jmp	short badop
 28911                                  
 28912                                  ; 31/12/2022
 28913                                  ;	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 28914                                  ;tryz_donothing:
 28915                                  ;	jmp	donothing
 28916                                  
 28917                                  ; 07/04/2019 - Retro DOS v4.0
 28918                                  
 28919                                  ;------------------------------------------------------------------------------
 28920                                  
 28921                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28922                                  ; (SYSINIT:2D5Dh)
 28923                                  
 28924                                  ; 11/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 28925                                  
 28926                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28927                                  ;
 28928                                  ;***	CheckProtmanArena -- special hack for adjusting alloclim with Protman$
 28929                                  ;
 28930                                  ;	adjusts alloclim if Protman$ reduced our arena through a manual hack.
 28931                                  ;
 28932                                  CheckProtmanArena:
 28933 0000291F 06                      	push	es
 28934 00002920 2EA1[6603]              	mov	ax,[cs:area]	; get our arena header
 28935 00002924 48                      	dec	ax
 28936 00002925 8EC0                    	mov	es,ax
 28937                                  	;add	ax,[es:ARENA.SIZE]
 28938 00002927 2603060300              	add	ax,[es:3]	; find end of arena
 28939 0000292C 40                      	inc	ax
 28940 0000292D 2E3B06[A302]            	cmp	ax,[cs:ALLOCLIM] ; is it less than alloclim?
 28941 00002932 7704                    	ja	short CheckProtmanDone
 28942                                  
 28943 00002934 2EA3[A302]              	mov	[cs:ALLOCLIM],ax ; reduce alloclim then
 28944                                  CheckProtmanDone:
 28945 00002938 07                      	pop	es
 28946 00002939 C3                      	retn
 28947                                  
 28948                                  ;------------------------------------------------------------------------------
 28949                                  
 28950                                  sysinit_parse:
 28951                                  
 28952                                  ;------------------------------------------------------------------------------
 28953                                  ;set up registers for sysparse
 28954                                  ;in)	es:si -> command line in confbot
 28955                                  ;	di -> offset of the parse control definition.
 28956                                  ;
 28957                                  ;out)	calls sysparse.
 28958                                  ;	carry will set if parse error.
 28959                                  ;	*** the caller should check the eol condition by looking at ax
 28960                                  ;	*** after each call.
 28961                                  ;	*** if no parameters are found,then ax will contain a error code.
 28962                                  ;	*** if the caller needs to look at the synomym@ of the result,
 28963                                  ;	***  the caller should use cs:@ instead of es:@.
 28964                                  ;	cx register should be set to 0 at the first time the caller calls this
 28965                                  ;	 procedure.
 28966                                  ;	ax - exit code
 28967                                  ;	bl - terminated delimeter code
 28968                                  ;	cx - new positional ordinal
 28969                                  ;	si - set to pase scanned operand
 28970                                  ;	dx - selected result buffer
 28971                                  ;------------------------------------------------------------------------------
 28972                                  
 28973                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28974                                  	; (SYSINIT:2D78h)
 28975                                  
 28976                                  	; 24/10/2022
 28977 0000293A 06                      	push	es			;save es,ds
 28978 0000293B 1E                      	push	ds
 28979                                  
 28980 0000293C 06                      	push	es
 28981 0000293D 1F                      	pop	ds			;now ds:si -> command line
 28982                                  
 28983 0000293E 0E                      	push	cs
 28984 0000293F 07                      	pop	es			;now es:di -> control definition
 28985                                  
 28986 00002940 2E8C1E[E614]            	mov	[cs:badparm_seg],ds	;save the pointer to the parm
 28987 00002945 2E8936[E414]            	mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 28988                                  	;mov	dx,0
 28989                                  	; 03/01/2023
 28990 0000294A 29D2                    	sub	dx,dx ; 0
 28991 0000294C E83FEC                  	call	SysParse
 28992 0000294F 83F800                  	cmp	ax,_$P_No_Error	; 0	;no error
 28993                                  
 28994                                  ;**cas note:  when zero true after cmp, carry clear
 28995                                  
 28996                                  	;je	short ll4
 28997                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 28998                                  	; 12/12/2022
 28999 00002952 7406                    	je	short en4 ; cf=0
 29000 00002954 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 29001                                  	;jne	short if4
 29002                                  	; 12/12/2022
 29003 00002957 7401                    	je	short en4 ; cf=0
 29004                                  
 29005                                  ; 12/12/2022
 29006                                  ;ll4:
 29007                                  ;	; 12/12/2022
 29008                                  ;	; cf=0
 29009                                  ;	;clc
 29010                                  ;	jmp	short en4
 29011                                  
 29012                                  if4:
 29013                                  	; 24/10/2022
 29014 00002959 F9                      	stc
 29015                                  en4:
 29016 0000295A 1F                      	pop	ds
 29017 0000295B 07                      	pop	es
 29018 0000295C C3                      	retn
 29019                                  
 29020                                  ; 11/12/2022
 29021                                  %if 0
 29022                                  
 29023                                  ;----------------------------------------------------------------------------
 29024                                  ;
 29025                                  ; procedure : badop_p
 29026                                  ;
 29027                                  ;             same thing as badop,but will make sure to set ds register back
 29028                                  ;             to sysinitseg and return back to the caller.
 29029                                  ;
 29030                                  ;----------------------------------------------------------------------------
 29031                                  
 29032                                  badop_p:
 29033                                  	push	cs
 29034                                  	pop	ds		;set ds to configsys seg.
 29035                                  	mov	dx,badopm
 29036                                  	call	print
 29037                                          ;call	error_line
 29038                                  	;retn
 29039                                  	; 11/12/2022
 29040                                  	jmp	error_line
 29041                                  
 29042                                  %endif
 29043                                  
 29044                                  ;----------------------------------------------------------------------------
 29045                                  ;
 29046                                  ; label : badop
 29047                                  ;
 29048                                  ;----------------------------------------------------------------------------
 29049                                  
 29050                                  badop:	
 29051 0000295D BA[A04A]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 29052 00002960 E8151C                  	call	print
 29053 00002963 E84200                  	call	error_line	;show "error in config.sys ..." .
 29054 00002966 E995F7                  	jmp	coff
 29055                                  
 29056                                  ;----------------------------------------------------------------------------
 29057                                  ;
 29058                                  ; procedure : badparm_p
 29059                                  ;
 29060                                  ;             show "bad command or parameters - xxxxxx"
 29061                                  ;             in badparm_seg,badparm_off -> xxxxx
 29062                                  ;
 29063                                  ;----------------------------------------------------------------------------
 29064                                  
 29065                                  	; 24/10/2022
 29066                                  badparm_p:
 29067                                  	; 11/12/2022
 29068                                  	; ds = cs
 29069                                  	; 11/12/2022
 29070                                  	;push	ds ; *
 29071 00002969 52                      	push	dx
 29072 0000296A 56                      	push	si
 29073                                  
 29074                                  	; 11/12/2022
 29075                                  	; ds = cs
 29076                                  	;push	cs
 29077                                  	;pop	ds
 29078                                  
 29079 0000296B BA[C74A]                	mov	dx,badparm
 29080 0000296E E8071C                  	call	print			; "bad command or parameters - "
 29081 00002971 C536[E414]              	lds	si,[badparm_ptr]
 29082                                  
 29083                                  ;	print "xxxx" until cr.
 29084                                  
 29085                                  do1:
 29086 00002975 8A14                    	mov	dl,[si]			; get next character
 29087 00002977 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 29088 0000297A 7407                    	je	short en1		; exit loop if so
 29089                                  
 29090 0000297C B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 29091 0000297E CD21                    	int	21h			; display character
 29092 00002980 46                      	inc	si			; next character
 29093 00002981 EBF2                    	jmp	short do1
 29094                                  en1:
 29095 00002983 0E                      	push	cs
 29096 00002984 1F                      	pop	ds
 29097                                  
 29098 00002985 BA[C44A]                	mov	dx,crlfm
 29099 00002988 E8ED1B                  	call	print
 29100 0000298B E81A00                  	call	error_line
 29101                                  
 29102 0000298E 5E                      	pop	si
 29103 0000298F 5A                      	pop	dx
 29104                                  	; 11/12/2022
 29105                                  	;pop	ds ; *
 29106                                  badparmp_ret:
 29107 00002990 C3                      	retn
 29108                                  
 29109                                  ;----------------------------------------------------------------------------
 29110                                  ;
 29111                                  ; procedure : getchr
 29112                                  ;
 29113                                  ;----------------------------------------------------------------------------
 29114                                  
 29115                                  	; 24/10/2022
 29116                                  getchr:
 29117                                  	; 12/12/2022
 29118                                  	;push	cx
 29119                                  	;mov	cx,[count]
 29120                                  	;jcxz	nochar
 29121                                  	; 12/12/2022
 29122 00002991 833E[5403]01            	cmp	word [count],1 
 29123 00002996 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 29124                                  	
 29125 00002998 8B36[5803]              	mov	si,[chrptr]
 29126 0000299C 268A04                  	mov	al,[es:si]
 29127 0000299F FF0E[5403]              	dec	word [count]
 29128 000029A3 FF06[5803]              	inc	word [chrptr]
 29129                                  	; 12/12/202
 29130                                  	; cf=0
 29131                                  	;clc
 29132                                  ;get_ret:
 29133                                  	;pop	cx
 29134                                  	;retn
 29135                                  nochar: 
 29136                                  	; 12/12/2022
 29137                                  	; cf=1
 29138                                  	;stc
 29139                                  	;jmp	short get_ret
 29140                                  	
 29141 000029A7 C3                      	retn
 29142                                  
 29143                                  ; 11/12/2022
 29144                                  %if 0
 29145                                  
 29146                                  ;----------------------------------------------------------------------------
 29147                                  ;
 29148                                  ; procedure : incorrect_order
 29149                                  ;
 29150                                  ;             show "incorrect order in config.sys ..." message.
 29151                                  ;
 29152                                  ;----------------------------------------------------------------------------
 29153                                  
 29154                                  incorrect_order:
 29155                                  	mov	dx,badorder
 29156                                  	call	print
 29157                                  	call	showlinenum
 29158                                  	retn
 29159                                  
 29160                                  %endif
 29161                                  
 29162                                  ;----------------------------------------------------------------------------
 29163                                  ;
 29164                                  ; procedure : error_line
 29165                                  ;
 29166                                  ;             show "error in config.sys ..." message.
 29167                                  ;
 29168                                  ;----------------------------------------------------------------------------
 29169                                  
 29170                                  	; 11/12/2022
 29171                                  	; 24/10/2022
 29172                                  error_line:
 29173                                  	; 11/12/2022
 29174                                  	; ds = cs
 29175                                  	;push	cs
 29176                                  	;pop	ds
 29177                                  
 29178 000029A8 BA[FC4B]                	mov	dx,errorcmd
 29179 000029AB E8CA1B                  	call	print
 29180                                  	;call	showlinenum
 29181                                  	;retn
 29182                                  	; 11/12/2022
 29183                                  	;jmp	short showlinenum
 29184                                  
 29185                                  ;----------------------------------------------------------------------------
 29186                                  ;
 29187                                  ; procedure : showlinenum
 29188                                  ;
 29189                                  ; convert the binary linecount to decimal ascii string in showcount
 29190                                  ; and display showcount at the current curser position.
 29191                                  ; in.) linecount
 29192                                  ;
 29193                                  ; out) the number is printed.
 29194                                  ;
 29195                                  ;----------------------------------------------------------------------------
 29196                                  
 29197                                  	; 11/12/2022
 29198                                  	; ds = cs
 29199                                  	; 24/10/2022
 29200                                  showlinenum:
 29201 000029AE 06                      	push	es
 29202                                  	; 11/12/2022
 29203                                  	;push	ds
 29204 000029AF 57                      	push	di
 29205                                  
 29206 000029B0 0E                      	push	cs
 29207 000029B1 07                      	pop	es		; es=cs
 29208                                  
 29209                                  	; 11/12/2022
 29210                                  	;push	cs
 29211                                  	;pop	ds
 29212                                  
 29213 000029B2 BF[B302]                	mov	di,showcount+4	; di -> the least significant decimal field.
 29214 000029B5 B90A00                  	mov	cx,10		; decimal divide factor
 29215                                  	;mov	ax,[cs:linecount]
 29216                                  	; 11/12/2022
 29217 000029B8 A1[AD02]                	mov	ax,[linecount]
 29218                                  sln_loop:
 29219                                  	; 11/12/2022
 29220 000029BB 39C8                    	cmp	ax,cx ; < 10 ?
 29221                                  	;cmp	ax,10		; < 10?
 29222 000029BD 720C                    	jb	short sln_last  ; yes
 29223                                  
 29224 000029BF 31D2                    	xor	dx,dx
 29225 000029C1 F7F1                    	div	cx	; cx = 10
 29226 000029C3 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 29227                                  				; convert to ascii numeric char ("0" to "9")
 29228 000029C6 8815                    	mov	[di],dl
 29229 000029C8 4F                      	dec	di
 29230 000029C9 EBF0                    	jmp	short sln_loop
 29231                                  
 29232                                  sln_last:
 29233 000029CB 0C30                    	or	al,30h	; "0"   ; convert to ascii numeric char ("0" to "9")
 29234 000029CD 8805                    	mov	[di],al
 29235 000029CF 89FA                    	mov	dx,di
 29236 000029D1 E8A41B                  	call	print		; show it.
 29237 000029D4 5F                      	pop	di
 29238                                  	; 11/12/2022
 29239                                  	;pop	ds
 29240 000029D5 07                      	pop	es
 29241 000029D6 C3                      	retn
 29242                                  
 29243                                  ; 07/04/2019 - Retro DOS v4.0
 29244                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 29245                                  
 29246                                  ;----------------------------------------------------------------------------
 29247                                  ;
 29248                                  ; procedure : ProcDOS
 29249                                  ;
 29250                                  ;	Process the result of DOS= parsing
 29251                                  ;
 29252                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 29253                                  ;				= 2 for DOS=LOW
 29254                                  ;				= 3 for DOS=UMB
 29255                                  ;				= 4 for DOS=NOUMB
 29256                                  ;----------------------------------------------------------------------------
 29257                                  
 29258                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 29259                                  	; (SYTSINIT:2AB5h)
 29260                                  ProcDOS:
 29261                                  	; 01/01/2023
 29262                                  	; ds = cs
 29263 000029D7 30E4                    	xor	ah,ah
 29264                                  	;;mov	al,[cs:result_val_itag]
 29265                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 29266                                  	; 01/01/2023
 29267 000029D9 A0[BC1D]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 29268 000029DC 48                      	dec	ax
 29269 000029DD 7415                    	jz	short pd_hi
 29270 000029DF 48                      	dec	ax
 29271 000029E0 740E                    	jz	short pd_lo
 29272 000029E2 48                      	dec	ax
 29273 000029E3 7405                    	jz	short pd_umb
 29274                                  	;;mov	byte [cs:DevUMB],0
 29275                                  	; 18/12/2022
 29276                                  	;mov	byte [cs:DevUMB],ah ; 0
 29277                                  	; 01/01/2023
 29278 000029E5 8826[B81F]              	mov	byte [DevUMB],ah ; 0
 29279 000029E9 C3                      	retn
 29280                                  pd_umb:
 29281                                  	; 01/01/2023
 29282 000029EA C606[B81F]FF            	mov	byte [DevUMB],0FFh
 29283                                  	;mov	byte [cs:DevUMB],0FFh
 29284 000029EF C3                      	retn
 29285                                  pd_lo:
 29286                                  	; 01/01/2023
 29287 000029F0 A2[6A02]                	mov	[runhigh],al ; 0
 29288                                  	; 18/12/2022
 29289                                  	;mov	[cs:runhigh],al ; 0
 29290                                  	;;mov	byte [cs:runhigh],0
 29291 000029F3 C3                      	retn
 29292                                  pd_hi:
 29293                                  	; 01/01/2023
 29294 000029F4 C606[6A02]FF            	mov	byte [runhigh],0FFh
 29295                                  	;mov	byte [cs:runhigh],0FFh
 29296                                  limx:	; 11/12/2022
 29297 000029F9 C3                      	retn
 29298                                  
 29299                                  ;----------------------------------------------------------------------------
 29300                                  ;
 29301                                  ; procedure : LieInt12Mem
 29302                                  ;
 29303                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 29304                                  ;		alloclim set to the limit of low memory.
 29305                                  ;
 29306                                  ;	Output : none
 29307                                  ;
 29308                                  ;	Changes the ROM BIOS variable which stores the total low memory
 29309                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 29310                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 29311                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 29312                                  ;	converted into Ks and stored in 40:13h
 29313                                  ;
 29314                                  ;----------------------------------------------------------------------------
 29315                                  
 29316                                  LieInt12Mem:
 29317                                  	; 11/12/2022
 29318                                  	; ds = cs
 29319 000029FA A1[A302]                	mov	ax,[ALLOCLIM]
 29320                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12h as alloclim
 29321                                  					; assuming that it is 3Com
 29322 000029FD E84400                  	call	IsIt3Com		; Is it 3Com driver?
 29323 00002A00 740A                    	jz	short lim_set		; yes, lie to him differently
 29324                                  	; 13/05/2019
 29325                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 29326                                  	;je	short limx		; no, don't lie
 29327                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12h as end of UMB
 29328                                  	; 11/12/2022
 29329                                  	; ds = cs
 29330 00002A02 803E[C71F]00            	cmp	byte [DeviceHi],0
 29331 00002A07 74F0                    	je	short limx
 29332 00002A09 A1[AD1F]                	mov	ax,[DevLoadEnd]
 29333                                  lim_set:
 29334                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29335                                  	; 11/12/2022
 29336                                  	;call	SetInt12Mem
 29337                                  ;limx:
 29338                                  	;retn
 29339                                  	
 29340                                  	;jmp	short SetInt12Mem 
 29341                                  
 29342                                  ;----------------------------------------------------------------------------
 29343                                  ;
 29344                                  ; procedure : SetInt12Mem
 29345                                  ;
 29346                                  ;	Input : AX = Memory size to be set (in paras)
 29347                                  ;	Output : none
 29348                                  ;
 29349                                  ;	Sets the variable 40:13 to the memory size passed in AX
 29350                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 29351                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 29352                                  ;	restoring the value of 40:13
 29353                                  ;
 29354                                  ;----------------------------------------------------------------------------
 29355                                  
 29356                                  	; 01/11/2022
 29357                                  SetInt12Mem:
 29358 00002A0C 1E                      	push	ds
 29359 00002A0D BB4000                  	mov	bx,40h
 29360 00002A10 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 29361 00002A12 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 29362 00002A16 2E891E[CB1F]            	mov	[cs:OldInt12Mem],bx	; save it
 29363 00002A1B B106                    	mov	cl,6
 29364 00002A1D D3E8                    	shr	ax,cl			; convert paras into Ks
 29365 00002A1F A31300                  	mov	[13h],ax		; Lie
 29366 00002A22 2EC606[CA1F]FF          	mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 29367 00002A28 1F                      	pop	ds
 29368                                  ;limx:
 29369 00002A29 C3                      	retn
 29370                                  
 29371                                  ;----------------------------------------------------------------------------
 29372                                  ;
 29373                                  ; procedure : TrueInt12Mem
 29374                                  ;
 29375                                  ;	Input : Int12Lied = 0 if we are not lying currently
 29376                                  ;			  = 0ffh if we are lying
 29377                                  ;		OldInt12Mem = Saved value of 40:13h
 29378                                  ;
 29379                                  ;	Output : none
 29380                                  ;
 29381                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 29382                                  ;	and resets the flag which indicates that we were lying
 29383                                  ;
 29384                                  ;----------------------------------------------------------------------------
 29385                                  
 29386                                  TrueInt12Mem:
 29387                                  	; 11/12/2022
 29388                                  	; ds = cs
 29389 00002A2A 803E[CA1F]00            	cmp	byte [Int12Lied],0
 29390                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 29391                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 29392                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 29393 00002A2F 7412                    	je	short timx		; no, we weren't
 29394                                  	; 18/12/2022
 29395 00002A31 B84000                  	mov	ax,40h
 29396 00002A34 8826[CA1F]              	mov	[Int12Lied],ah ; 0
 29397                                  	;mov	byte [Int12Lied],0
 29398                                  	;mov	byte [cs:Int12Lied],0
 29399 00002A38 1E                      	push	ds
 29400                                  	;mov	ax,40h
 29401 00002A39 8ED8                    	mov	ds,ax
 29402 00002A3B 2EA1[CB1F]              	mov	ax,[cs:OldInt12Mem]
 29403 00002A3F A31300                  	mov	[13h],ax		; restore INT 12h memory
 29404 00002A42 1F                      	pop	ds
 29405                                  timx:
 29406 00002A43 C3                      	retn
 29407                                  
 29408                                  ;----------------------------------------------------------------------------
 29409                                  ;
 29410                                  ; procedure : IsIt3Com?
 29411                                  ;
 29412                                  ;	Input : DevEntry = Seg:0 of device driver
 29413                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 29414                                  ;		 else Zero flag is reset
 29415                                  ;
 29416                                  ;----------------------------------------------------------------------------
 29417                                  
 29418                                  IsIt3Com:
 29419                                  	; 11/12/2022
 29420                                  	; ds = cs
 29421 00002A44 1E                      	push	ds
 29422 00002A45 06                      	push	es
 29423 00002A46 56                      	push	si
 29424                                  	; 11/12/2022
 29425 00002A47 C536[AF1F]              	lds	si,[DevEntry]
 29426                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 29427 00002A4B 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 29428 00002A4E 0E                      	push	cs
 29429 00002A4F 07                      	pop	es
 29430 00002A50 BF[CD1F]                	mov	di,ThreeComName
 29431 00002A53 B90800                  	mov	cx,8			; name length
 29432 00002A56 F3A6                    	rep	cmpsb
 29433 00002A58 5E                      	pop	si
 29434 00002A59 07                      	pop	es
 29435 00002A5A 1F                      	pop	ds
 29436 00002A5B C3                      	retn
 29437                                  
 29438                                  ;M020 : BEGIN
 29439                                  ;----------------------------------------------------------------------------
 29440                                  
 29441                                  UpdatePDB:
 29442 00002A5C 1E                      	push	ds
 29443 00002A5D B462                    	mov	ah,62h
 29444 00002A5F CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 29445 00002A61 8EDB                    	mov	ds,bx
 29446 00002A63 2E8B1E[A302]            	mov	bx,[cs:ALLOCLIM]
 29447                                  	;mov	[2],bx
 29448 00002A68 891E0200                	mov	[PDB.BLOCK_LEN],bx
 29449 00002A6C 1F                      	pop	ds
 29450 00002A6D C3                      	retn
 29451                                  
 29452                                  ; M020 : END
 29453                                  
 29454                                  ;----------------------------------------------------------------------------
 29455                                  
 29456                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29457                                  ;%if 0
 29458                                  
 29459                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 29460                                  ; (SYSINIT:2EEEh)
 29461                                  
 29462                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 29463                                  ;include highexit.inc	; umb's, etc
 29464                                  
 29465                                  ; ----------------------------------------------------------------------
 29466                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 29467                                  ; ----------------------------------------------------------------------
 29468                                  ; 07/04/2019 - Retro DOS v4.0
 29469                                  
 29470                                  ;******************************************************************************
 29471                                  ;
 29472                                  ; This file contains routines needed to parse and implement user-given
 29473                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 29474                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 29475                                  ; the variables in highvar.inc, for use by the rest of the routines.
 29476                                  ;
 29477                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 29478                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 29479                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 29480                                  ;    DH/LH module opts
 29481                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 29482                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 29483                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 29484                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 29485                                  ; available during the load.
 29486                                  ;
 29487                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 29488                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 29489                                  ; upper-memory block which was not specified by the user... in addition, if
 29490                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 29491                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 29492                                  ; allocated. After the load, the function UnHideUMBs() (in highexit.inc) will
 29493                                  ; free any UMBs so allocated.
 29494                                  ;
 29495                                  ; When a device driver loads, there is the additional problem of allocating its
 29496                                  ; initial load site; this should be restricted to the first UMB specified on
 29497                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 29498                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 29499                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 29500                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 29501                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 29502                                  ;
 29503                                  ;******************************************************************************
 29504                                  
 29505                                  SWTCH	equ	'/'		; Switch character
 29506                                  
 29507                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 29508                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 29509                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 29510                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 29511                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 29512                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 29513                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 29514                                  
 29515                                  CR	equ	0Dh		; Carriage Return
 29516                                  LF	equ	0Ah		; Line Feed
 29517                                  TAB	equ	09h		; Tab character (^I)
 29518                                  
 29519                                  ; -----------------------------------------------------------------------------
 29520                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 29521                                  ; -----------------------------------------------------------------------------
 29522                                  ; ENTRY:       None
 29523                                  ; EXIT:        Variables listed in highvar.inc are initialized
 29524                                  ; ERROR EXIT:  None
 29525                                  ; USES:        Flags, variables in highvar.inc
 29526                                  ; -----------------------------------------------------------------------------
 29527                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1. Its contents
 29528                                  ; are largely ignored, but it is initialized nonetheless.
 29529                                  ; -----------------------------------------------------------------------------
 29530                                  
 29531                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 29532                                  ; (SYSINIT:2EEEh)
 29533                                  
 29534                                  InitVar:
 29535                                  	; 01/01/2023
 29536                                  	; ds = cs
 29537                                  
 29538                                  	;pushreg <ax, cx, di, es>
 29539                                  	; 03/01/2023
 29540                                  	;push	ax
 29541                                  	;push	cx
 29542                                  	;push	di
 29543 00002A6E 06                      	push	es
 29544                                  
 29545                                  	;dataseg es			;Point ES into appropriate data segment
 29546 00002A6F 0E                      	push	cs
 29547 00002A70 07                      	pop	es
 29548                                  
 29549 00002A71 31C0                    	xor	ax,ax
 29550                                  	;mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 29551                                  	;mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 29552                                  	;mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 29553                                  	;mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 29554                                  	;				;Later is the # of the 1st spec'd UMB
 29555                                  	;mov	[es:fm_argc], al	;Start with zero args having been read
 29556                                  
 29557                                  	; 01/01/2023
 29558                                  	; ds = cs
 29559 00002A73 A2[721F]                	mov	[fUmbTiny],al		;Shrink UMBs? (made 1 if /S given)
 29560 00002A76 A2[711F]                	mov	[fInHigh],al		;Set to 1 when DH/LH has been called
 29561 00002A79 A3[731F]                	mov	[SegLoad],ax		;Load Address (seg), used for DH only
 29562 00002A7C C606[751F]FF            	mov	byte [UmbLoad],UNSPECIFIED ; 0FFh
 29563                                  					;Later is the # of the 1st spec'd UMB
 29564 00002A81 A2[A81F]                	mov	[fm_argc], al		;Start with zero args having been read
 29565                                  
 29566 00002A84 FC                      	cld
 29567                                  
 29568 00002A85 B91000                  	mov	cx,MAXUMB ; 16		;For each entry
 29569 00002A88 BF[761F]                	mov	di,UmbUsed		;on the UmbUsed array,
 29570 00002A8B F3AA                    	rep	stosb			;	Store 0
 29571                                  
 29572                                  	;mov	cx,MAXUMB ; 16		;Okay... for each entry
 29573                                  	; 01/01/2033
 29574 00002A8D B110                    	mov	cl,MAXUMB ; 16
 29575 00002A8F BF[861F]                	mov	di,UmbSize		;on the UmbSize array,
 29576 00002A92 F3AB                    	rep	stosw			;	Store 0
 29577                                  
 29578                                  	;normseg es			; Return ES
 29579                                  
 29580                                  	;popreg	<es, di, cx, ax>
 29581 00002A94 07                      	pop	es
 29582                                  	; 03/01/2023
 29583                                  	;pop	di
 29584                                  	;pop	cx
 29585                                  	;pop	ax	 	
 29586                                  
 29587 00002A95 C3                      	retn
 29588                                  
 29589                                  ; -----------------------------------------------------------------------------
 29590                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 29591                                  ; -----------------------------------------------------------------------------
 29592                                  ; ENTRY   : None
 29593                                  ; EXIT    : None
 29594                                  ; ERROR   : None
 29595                                  ; USES    : Flags, fm_umb, fm_strat
 29596                                  ; -----------------------------------------------------------------------------
 29597                                  
 29598                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 29599                                  	; (SYSINIT:2F22h)
 29600                                  FixMem:
 29601                                  	; 01/01/2023
 29602                                  	;push	ax
 29603                                  	;push	bx
 29604                                  	;push	cx
 29605                                  	;push	dx
 29606 00002A96 06                      	push	es
 29607                                  
 29608 00002A97 E84900                  	call	fm_link		; Link in UMBs
 29609                                  
 29610 00002A9A E80C02                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 29611 00002A9D 723F                    	jc	short fmX	; (if couldn't get it, leave now).
 29612                                  
 29613 00002A9F 8EC0                    	mov	es,ax		; It returns in AX, so move it to ES.
 29614                                  
 29615                                  ; - Walk MCB Chain ------------------------------------------------------------
 29616                                  
 29617 00002AA1 31D2                    	xor	dx,dx		; We're keeping the address of the last MCB
 29618 00002AA3 89D1                    	mov 	cx,dx		; in CX... and the last owner
 29619 00002AA5 42                      	inc	dx		; in dx as we go through the loop:
 29620                                  
 29621                                  ; ------------------------------------------
 29622                                  ; FM10--DX  = last MCB's owner's PSP address
 29623                                  ;       CX  = last MCB's address (segment)
 29624                                  ; ------------------------------------------
 29625                                  
 29626 00002AA6 26A00000                fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 29627 00002AAA 268B1E0100              	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 29628 00002AAF 09D3                    	or	bx,dx			; dx was owner of previous MCB
 29629 00002AB1 7516                    	jnz	short fm30		; If not both zero, don't cat.
 29630                                  
 29631                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 29632                                  
 29633 00002AB3 268B1E0300              fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 29634 00002AB8 8EC1                    	mov	es,cx			; Go back to prev MCB's address
 29635 00002ABA 26A20000                	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 29636                                  
 29637 00002ABE 26031E0300              	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 29638                                  	;add	bx,1			; And add one for the header
 29639                                  	; 11/07/2023
 29640 00002AC3 43                      	inc	bx
 29641 00002AC4 26891E0300              	mov	[es:ARENA.SIZE],bx	; Write the size
 29642                                  
 29643                                  	; ---------------------------------------------------------------------
 29644                                  
 29645 00002AC9 8CC1                    fm30:	mov	cx,es			; Save MCB address
 29646 00002ACB 268B160100              	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 29647                                  
 29648 00002AD0 8CC3                    	mov	bx,es			; Move to the next MCB
 29649                                  	;add	bx,[es:3]
 29650 00002AD2 26031E0300              	add	bx,[es:ARENA.SIZE]
 29651 00002AD7 43                      	inc	bx
 29652 00002AD8 8EC3                    	mov	es,bx
 29653                                  
 29654                                  	;cmp	al,'Z'
 29655 00002ADA 3C5A                    	cmp	al,arena_signature_end
 29656 00002ADC 75C8                    	jne	short fm10		; If signature != 'Z', there are more.
 29657                                  fmX:	
 29658 00002ADE E81300                  	call	fm_unlink		; Unlink UMBs
 29659                                  
 29660 00002AE1 07                      	pop	es
 29661                                  	; 01/01/2023
 29662                                  	;pop	dx
 29663                                  	;pop	cx
 29664                                  	;pop	bx
 29665                                  	;pop	ax
 29666                                  
 29667 00002AE2 C3                      	retn
 29668                                  
 29669                                  ; -----------------------------------------------------------------------------
 29670                                  ;*** fm_link - links UMBs not already linked in
 29671                                  ; -----------------------------------------------------------------------------
 29672                                  ; ENTRY:    None
 29673                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 29674                                  ; ERROR:    None
 29675                                  ; USES:     AX, BX, fm_umb
 29676                                  ; -----------------------------------------------------------------------------
 29677                                  
 29678                                  	; 01/01/2023 - Retro DOS v4.2
 29679                                  fm_link:
 29680 00002AE3 B80258                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 29681 00002AE6 CD21                    	int	21h			; Current link-state is now in al
 29682                                  
 29683                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 29684                                  	;
 29685                                  	;push	es
 29686                                  	;push	cs
 29687                                  	;pop	es
 29688                                  	;mov	[es:fm_umb],al
 29689                                  	;pop	es
 29690                                  	
 29691                                  	; 01/01/2023
 29692                                  	; ds = cs
 29693                                  	;mov	[cs:fm_umb],al
 29694 00002AE8 A2[A61F]                	mov	[fm_umb],al
 29695                                  
 29696 00002AEB B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 29697 00002AEE BB0100                  	mov	bx,1
 29698 00002AF1 CD21                    	int	21h
 29699 00002AF3 C3                      	retn
 29700                                  
 29701                                  ; -----------------------------------------------------------------------------
 29702                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 29703                                  ; -----------------------------------------------------------------------------
 29704                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 29705                                  ; EXIT:     None
 29706                                  ; ERROR:    None
 29707                                  ; USES:     AX, BX
 29708                                  ; -----------------------------------------------------------------------------
 29709                                  
 29710                                  	; 01/01/2023 - Retro DOS v4.2
 29711                                  fm_unlink:
 29712 00002AF4 31DB                    	xor	bx,bx
 29713                                  	
 29714                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 29715                                  	;
 29716                                  	;push	ds
 29717                                  	;push	cs
 29718                                  	;pop	ds
 29719                                  	;mov	bl,[fm_umb]	
 29720                                  	;pop	ds
 29721                                  	
 29722                                  	; 01/01/2023
 29723                                  	; ds = cs
 29724                                  	;mov	bl,[cs:fm_umb]
 29725 00002AF6 8A1E[A61F]              	mov	bl,[fm_umb]
 29726                                  
 29727 00002AFA B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 29728 00002AFD CD21                    	int	21h			; so just use that, and call int 21h
 29729 00002AFF C3                      	retn
 29730                                  
 29731                                  ; 08/04/2019 - Retro DOS v4.0
 29732                                  
 29733                                  ; -----------------------------------------------------------------------------
 29734                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 29735                                  ; laid out in highvar.inc
 29736                                  ; -----------------------------------------------------------------------------
 29737                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 29738                                  ; EXIT:     ES:SI points to first character in child program name
 29739                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 29740                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 29741                                  ; -----------------------------------------------------------------------------
 29742                                  ; Error codes (in AX if carry set on return):
 29743                                  ;
 29744                                  PV_InvArg	equ	1	; Invalid argument passed
 29745                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 29746                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 29747                                  ;
 29748                                  ; This routine exects ES:SI to point to a string much like the following:
 29749                                  ;    "/S/L:1,200;2 module options"
 29750                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 29751                                  ; required, though that's what this routine is supposed to parse.
 29752                                  ;
 29753                                  optS		equ	'S'	; /S
 29754                                  optL		equ	'L'	; /L:...
 29755                                  ;
 29756                                  ; -----------------------------------------------------------------------------
 29757                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 29758                                  ; a command-line for spawning a child process. For a typical LH command, say,
 29759                                  ;     lh /l:1,1000;2 print/d:lpt2
 29760                                  ; the arguments would look like (one per line):
 29761                                  ;     lh
 29762                                  ;     /l
 29763                                  ;     1
 29764                                  ;     1000
 29765                                  ;     2
 29766                                  ;     print
 29767                                  ;     /d
 29768                                  ;     :lpt2
 29769                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 29770                                  ; arg was the filename. So, inside this routine, we keep a running counter
 29771                                  ; of the number of arguments LH will need to skip in order to get to the
 29772                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 29773                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 29774                                  ; for:
 29775                                  ;    Each /L
 29776                                  ;    Each /S (there should be only one)
 29777                                  ;    Each UMB number (they follow ":" or ";")
 29778                                  ;    Each UMB size   (they follow ",")
 29779                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 29780                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 29781                                  ; -----------------------------------------------------------------------------
 29782                                  
 29783                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 29784                                  	; (SYSINIT:2F9Fh)
 29785                                  
 29786                                  ParseVar:
 29787                                  	;pushreg <di, ds, es>
 29788                                  	; 01/01/2023
 29789                                  	;push	di ; * ; (not required) ; 01/01/2023
 29790 00002B00 1E                      	push	ds
 29791 00002B01 06                      	push	es
 29792                                  
 29793 00002B02 06                      	push	es		; Make DS:SI point to it, as well as ES:SI
 29794 00002B03 1F                      	pop	ds		; (regardless if we're in devhigh or loadhigh)
 29795 00002B04 FC                      	cld
 29796                                  
 29797                                  ; ------------------------------------------------
 29798                                  ; PV10--ES:SI = any whitespace on the command-line
 29799                                  ; ------------------------------------------------
 29800                                  
 29801 00002B05 AC                      pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 29802 00002B06 E8A200                  	call	isWhite
 29803 00002B09 74FA                    	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 29804                                  	;cmp	al,'/'
 29805 00002B0B 3C2F                    	cmp	al,SWTCH
 29806 00002B0D 7404                    	je	short pv20	;       ES:SI=="/L..."--go process a switch
 29807                                  
 29808 00002B0F 4E                      	dec	si		; Backup--it's now "odule options", and we need
 29809 00002B10 F8                      	clc			; that "m" we just read (or whatever it is).
 29810 00002B11 EB2B                    	jmp	short pvX	; Then return with carry clear == we're done.
 29811                                  pv20:	
 29812 00002B13 AC                      	lodsb			; Just read 'S' or 'L', hopefully
 29813                                  	;toUpper al		; So we make it upper-case, and...
 29814 00002B14 24DF                    	and	al,0DFh
 29815                                  	;cmp	al,'S'
 29816 00002B16 3C53                    	cmp	al,optS		; just read 'S'?
 29817 00002B18 750D                    	jne	short pv30
 29818                                  
 29819                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 29820 00002B1A 2EFE06[A81F]            	inc	byte [cs:fm_argc] ; 19/04/2019
 29821                                  
 29822                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 29823                                  	;
 29824                                  	;push	es
 29825                                  	;push	cs
 29826                                  	;pop	es
 29827                                  	;mov	[es:fUmbTiny],1	
 29828                                  	;pop	es
 29829                                  
 29830 00002B1F 2EC606[721F]01          	mov	byte [cs:fUmbTiny],1
 29831                                  
 29832 00002B25 EBDE                    	jmp	short pv10	; possibly even "/L...".
 29833                                  
 29834                                  pv30:	;cmp	al,'L'
 29835 00002B27 3C4C                    	cmp	al,optL		; If it's not 'L' either, then it's a bad
 29836 00002B29 750D                    	jne	short pvE1	; switch!
 29837                                  
 29838                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 29839 00002B2B 2EFE06[A81F]            	inc	byte [cs:fm_argc] ; 19/04/2019
 29840                                  
 29841 00002B30 E80E00                  	call	parseL
 29842 00002B33 73D0                    	jnc	short pv10	; If no carry, go back and look for more
 29843                                  
 29844 00002B35 4E                      	dec	si		; Else, back up and exit.
 29845 00002B36 EB03                    	jmp	short pvErr	; AX has already been set by parseL
 29846                                  
 29847                                  pvE1:	;mov	ax,3
 29848 00002B38 B80300                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 29849 00002B3B 4E                      pvErr:	dec	si
 29850 00002B3C 4E                      	dec	si
 29851 00002B3D F9                      	stc
 29852                                  pvX:	;popreg	<es, ds, di>
 29853 00002B3E 07                      	pop	es
 29854 00002B3F 1F                      	pop	ds
 29855                                  	; 01/01/2023
 29856                                  	;pop	di ; * ; (not required) ; 01/01/2023
 29857 00002B40 C3                      	retn
 29858                                  
 29859                                  ; -----------------------------------------------------------------------------
 29860                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 29861                                  ; -----------------------------------------------------------------------------
 29862                                  ; ENTRY:    ES:SI points to colon
 29863                                  ; EXIT:     ES:SI points to first character not parsed
 29864                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 29865                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 29866                                  ; -----------------------------------------------------------------------------
 29867                                  ; If the string here is terminated with anything other than whitespace or a
 29868                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 29869                                  ; set, indicating that they've screwed up the syntax. The 3-character rewind
 29870                                  ; makes sure the app /L: is reported as being the culprit.
 29871                                  ; -----------------------------------------------------------------------------
 29872                                  
 29873                                  parseL:
 29874 00002B41 AC                      	lodsb
 29875 00002B42 3C3A                    	cmp	al,':'		; Make sure they did /L:
 29876 00002B44 754E                    	jne	short plE1	; If they didn't, return with carry set.
 29877                                  
 29878                                  ; ------------------------------------------
 29879                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 29880                                  ; ------------------------------------------
 29881                                  
 29882 00002B46 E8E700                  pl10:	call	GetXNum		; After this, it's ",size" or ";umb" or " mod"
 29883 00002B49 724F                    	jc	short plE2	; And error if it's a bad number.
 29884 00002B4B E8A901                  	call	convUMB		; Convert any address to a UMB number
 29885                                  
 29886 00002B4E 88C1                    	mov	cl,al		; Remember the UMB number
 29887 00002B50 E87600                  	call	stowUMB		; Mark this UMB # as used;
 29888 00002B53 7245                    	jc	short plE2	; If it was already marked, it'll error
 29889                                  
 29890                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 29891 00002B55 2EFE06[A81F]            	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 29892                                  
 29893 00002B5A AC                      	lodsb
 29894 00002B5B 3C3B                    	cmp	al,';'		; Did "umb;" ?
 29895 00002B5D 74E7                    	je	short pl10	; Yep: go back and get another UMB.
 29896                                  
 29897 00002B5F E84900                  	call	isWhite		; Did "umb " ?
 29898 00002B62 743B                    	jz	short plX	; Yep: return (it'll go back to whitespace)
 29899                                  
 29900 00002B64 E83900                  	call	isEOL		; Did "umb" ?
 29901 00002B67 7435                    	jz	short plSwX	; If so, backup and exit like everything's ok
 29902                                  
 29903                                  	;cmp	al,'/'
 29904 00002B69 3C2F                    	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 29905 00002B6B 7431                    	je	short plSwX	; If so, back up ES:SI one character and return
 29906                                  
 29907 00002B6D 3C2C                    	cmp	al,','		; Did "umb," ?
 29908 00002B6F 7523                    	jne	short plE1	; Just what the heck DID they do? Return error.
 29909                                  
 29910                                  ; --- Read a size -------------------------------------------------------------
 29911                                  
 29912 00002B71 E8BC00                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 29913 00002B74 721E                    	jc	short plE1	; And error if it's a bad size.
 29914                                  
 29915 00002B76 E82201                  	call	toPara		; Convert from bytes to paragraphs
 29916                                  
 29917 00002B79 E87200                  	call	stowSiz		; CL still has the UMB number for this routine
 29918                                  
 29919                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 29920 00002B7C 2EFE06[A81F]            	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 29921                                  
 29922 00002B81 AC                      	lodsb
 29923 00002B82 3C3B                    	cmp	al,';'		; They did "umb,size;", so get another UMB.
 29924 00002B84 74C0                    	je	short pl10	;
 29925                                  
 29926 00002B86 E82200                  	call	isWhite		; Did it end with whitespace?
 29927 00002B89 7414                    	jz	short plX	; If so, we're done here--go back.
 29928                                  
 29929 00002B8B E81200                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 29930 00002B8E 740E                    	jz	short plSwX	; If so, backup and exit like everything's ok
 29931                                  
 29932                                  	;cmp	al,'/'
 29933 00002B90 3C2F                    	cmp	al,SWTCH	; Did they do "umb,size/" ?
 29934 00002B92 740A                    	je	short plSwX	; If so, again, we're done here.
 29935                                  plE1:	
 29936                                  	;mov	ax,1
 29937 00002B94 B80100                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 29938 00002B97 4E                      	dec	si
 29939 00002B98 F9                      	stc
 29940 00002B99 C3                      	retn
 29941                                  
 29942                                  plE2:	;mov	ax,2
 29943 00002B9A B80200                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 29944                                  	; 12/12/2022
 29945                                  	; cf=1
 29946                                  	;stc
 29947 00002B9D C3                      	retn
 29948                                  plSwX:	
 29949 00002B9E 4E                      	dec	si		; If we hit a '/' character, back up one char
 29950                                  				; so the whitespace checker will see it too.
 29951                                  plX:	; 12/12/2022
 29952                                  	; cf=0
 29953                                  	;clc			; Then just return with carry clear, so
 29954 00002B9F C3                      	retn			; ParseVar will go about its business.
 29955                                  
 29956                                  ; -----------------------------------------------------------------------------
 29957                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 29958                                  ; -----------------------------------------------------------------------------
 29959                                  ; ENTRY:    None
 29960                                  ; EXIT:     None
 29961                                  ; ERROR:    None
 29962                                  ; USES:     fm_argc, flags
 29963                                  ; -----------------------------------------------------------------------------
 29964                                  
 29965                                  ;incArgc:
 29966                                  	;push	ax
 29967                                  
 29968                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 29969                                  
 29970                                  	;mov	al,[cs:fm_argc]
 29971                                  
 29972                                  	;inc	al		; Increment it,
 29973                                  
 29974                                  	;;putdata fm_argc, al	; And store it right back.
 29975                                  
 29976                                  	;mov	[cs:fm_argc],al
 29977                                  
 29978                                  	;pop	ax
 29979                                  	;retn
 29980                                  
 29981                                  ; -----------------------------------------------------------------------------
 29982                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 29983                                  ; -----------------------------------------------------------------------------
 29984                                  ; ENTRY:    AL contains character to test
 29985                                  ; EXIT:     ZF set if AL contains CR or LF, or 0
 29986                                  ; ERROR:    None
 29987                                  ; USES:     ZF
 29988                                  ; -----------------------------------------------------------------------------
 29989                                  
 29990                                  isEOL:
 29991 00002BA0 3C00                    	cmp	al,0		; Null-terminator
 29992 00002BA2 7406                    	je	short ieX
 29993 00002BA4 3C0D                    	cmp	al,CR ; 0Dh	; Carriage Return
 29994 00002BA6 7402                    	je	short ieX
 29995 00002BA8 3C0A                    	cmp	al,LF ; 0Ah	; LineFeed
 29996                                  ieX:	
 29997 00002BAA C3                      	retn
 29998                                  
 29999                                  ; -----------------------------------------------------------------------------
 30000                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 30001                                  ; -----------------------------------------------------------------------------
 30002                                  ; ENTRY:    AL contains character to test
 30003                                  ; EXIT:     ZF set if AL contains space, tab, or equals
 30004                                  ; ERROR:    None
 30005                                  ; USES:     ZF
 30006                                  ; -----------------------------------------------------------------------------
 30007                                  
 30008                                  isWhite:
 30009 00002BAB 3C20                    	cmp	al,' '		; Space
 30010 00002BAD 7406                    	je	short iwX
 30011 00002BAF 3C3D                    	cmp	al,'='		; Equals (treat as whitespace)
 30012 00002BB1 7402                    	je	short iwX
 30013 00002BB3 3C09                    	cmp	al,tab ; 9	; Tab
 30014                                  iwX:	
 30015 00002BB5 C3                      	retn
 30016                                  
 30017                                  ; -----------------------------------------------------------------------------
 30018                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 30019                                  ; -----------------------------------------------------------------------------
 30020                                  ; ENTRY:    AL contains UMB number
 30021                                  ; EXIT:     None
 30022                                  ; ERROR:    None
 30023                                  ; USES:     Flags, variables in highvar.inc
 30024                                  ; -----------------------------------------------------------------------------
 30025                                  
 30026                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 30027                                  
 30028                                  unMarkUMB:
 30029                                  	; 02/01/2023
 30030                                  	;push	ax
 30031                                  	;push	bx
 30032                                  	;push	di
 30033                                  	;push	es
 30034                                  	;
 30035                                  	;push	cs
 30036                                  	;pop	es
 30037                                  
 30038 00002BB6 30E4                    	xor	ah,ah
 30039 00002BB8 89C3                    	mov	bx,ax
 30040                                  
 30041                                  	; 19/04/2019
 30042                                  	
 30043                                  	;;mov	byte [es:bx+UmbUsed],0
 30044                                  	;mov	[es:bx+UmbUsed],ah ; 0
 30045                                  	; 02/01/2023
 30046                                  	; ds= cs
 30047                                  	;mov	[cs:bx+UmbUsed],ah ; 0
 30048 00002BBA 88A7[761F]              	mov	[bx+UmbUsed],ah ; 0
 30049                                  
 30050 00002BBE 3806[751F]              	cmp	[UmbLoad],al
 30051                                  	;cmp	[cs:UmbLoad],al
 30052                                  	;;cmp	[es:UmbLoad],al
 30053 00002BC2 7504                    	jne	short umu10
 30054                                  
 30055                                  	;;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 30056                                  	;mov	[es:UmbLoad],ah ; 0
 30057                                  	; 02/01/2023
 30058                                  	; ds = cs
 30059                                  	;mov	[cs:UmbLoad],ah ; 0
 30060 00002BC4 8826[751F]              	mov	[UmbLoad],ah ; 0
 30061                                  umu10:	
 30062                                  	;pop	es
 30063                                  	;pop	di
 30064                                  	;pop	bx
 30065                                  	;pop	ax
 30066 00002BC8 C3                      	retn
 30067                                  
 30068                                  ; -----------------------------------------------------------------------------
 30069                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 30070                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 30071                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 30072                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 30073                                  ; -----------------------------------------------------------------------------
 30074                                  ; ENTRY:    AL contains UMB number, as specified by the user
 30075                                  ; EXIT:     None
 30076                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 30077                                  ; USES:     AX, Flags, variables in highvar.inc
 30078                                  ; -----------------------------------------------------------------------------
 30079                                  
 30080                                  	; 01/01/2023 - Retro DOS v4.2
 30081                                  stowUMB:
 30082 00002BC9 3C10                    	cmp	al,MAXUMB ; 16
 30083 00002BCB 7202                    	jb	short su10
 30084 00002BCD F9                      	stc
 30085 00002BCE C3                      	retn			; Ooops-- UMB # >= MAXUMB
 30086                                  su10:	
 30087                                  	; 01/01/2023
 30088                                  	;push	bx
 30089                                  	;push	di
 30090                                  	;push	si
 30091                                  	;push	ds
 30092                                  	;push	es
 30093                                  	;push	cs
 30094                                  	;pop	es
 30095                                  	;push	cs
 30096                                  	;pop	ds
 30097                                  
 30098                                  	; 01/01/2023
 30099                                  	; ds <> cs
 30100                                  	;cmp	byte [cs:UmbLoad],0FFh
 30101 00002BCF 2E803E[751F]FF          	cmp	byte [cs:UmbLoad],UNSPECIFIED
 30102                                  				; If this, we haven't been here before
 30103 00002BD5 7504                    	jne	short su20
 30104 00002BD7 2EA2[751F]              	mov	[cs:UmbLoad],al	; So remember this UMB as the load UMB slot.
 30105                                  
 30106                                  	;;cmp	byte [UmbLoad],0FFh
 30107                                  	;cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 30108                                  	;jne	short su20
 30109                                  	;mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 30110                                  su20:	
 30111 00002BDB 08C0                    	or	al,al		; If they gave UMB 0, there's really nothing
 30112 00002BDD 740E                    	jz	short su30	; that we should do here.
 30113                                  
 30114                                  	;mov	bl,al
 30115                                  	;xor	bh,bh
 30116                                  	;mov	ax,1		; Now, AX = 1, and BX = UMB Number
 30117                                  	; 01/01/2023
 30118 00002BDF 30E4                    	xor	ah,ah
 30119 00002BE1 89C3                    	mov	bx,ax
 30120 00002BE3 B001                    	mov	al,1
 30121                                  
 30122                                  	;xchg	[es:bx+UmbUsed],al
 30123                                  	; 01/01/2023
 30124 00002BE5 2E8687[761F]            	xchg	[cs:bx+UmbUsed],al
 30125                                  
 30126                                  	;or	al,al		; If it was already 1, then al==1... and that
 30127                                  	;jz	short su30	; means an error.
 30128                                  	;
 30129                                  	;stc			; OOOPS! This one's been used before. :(
 30130                                  	
 30131                                  	; 01/01/2023
 30132 00002BEA 3C01                    	cmp	al,1
 30133 00002BEC F5                      	cmc 	; if al > 0 -> cf = 1
 30134                                  su30:	
 30135                                  	; 01/01/2023
 30136                                  	;pop	es
 30137                                  	;pop	ds
 30138                                  	;pop	si
 30139                                  	;pop	di
 30140                                  	;pop	bx
 30141 00002BED C3                      	retn
 30142                                  
 30143                                  ; -----------------------------------------------------------------------------
 30144                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 30145                                  ; -----------------------------------------------------------------------------
 30146                                  ; ENTRY:    CL contains UMB number, AX contains size
 30147                                  ; EXIT:     None
 30148                                  ; ERROR:    None
 30149                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 30150                                  ; -----------------------------------------------------------------------------
 30151                                  
 30152                                  ; 13/05/2019
 30153                                  
 30154                                  	; 01/01/2023 - Retro DOS v4.2
 30155                                  stowSiz:
 30156                                  	; 01/01/2023
 30157                                  	;push	bx
 30158                                  	;;push	di ; ?
 30159                                  	;push	es
 30160                                  
 30161                                  	;push	cs
 30162                                  	;pop	es	
 30163                                  
 30164 00002BEE 88CB                    	mov	bl,cl			; Now bl==UMB number, AX==size
 30165 00002BF0 B700                    	mov	bh,0			;     bx==UMB number, AX==size
 30166 00002BF2 D0E3                    	shl	bl,1			;     bx==offset into array, AX=size
 30167                                  	;mov	[es:bx+UmbSize],ax	; Store the size
 30168                                  	; 01/01/2023
 30169 00002BF4 2E8987[861F]            	mov	[cs:bx+UmbSize],ax	; Store the size
 30170                                  
 30171                                  	; 01/01/2023
 30172                                  	;pop	es
 30173                                  	;;pop	di ; ?
 30174                                  	;pop	bx
 30175                                  
 30176 00002BF9 C3                      	retn
 30177                                  
 30178                                  ; -----------------------------------------------------------------------------
 30179                                  ;*** toDigit - converts a character-digit to its binary counterpart
 30180                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 30181                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 30182                                  ; A-F are considered valid if gnradix is 16.
 30183                                  ; -----------------------------------------------------------------------------
 30184                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 30185                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 30186                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 30187                                  ; USES:     CL, Flags
 30188                                  ; -----------------------------------------------------------------------------
 30189                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 30190                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 30191                                  ; will be 10 or 16.
 30192                                  ; -----------------------------------------------------------------------------
 30193                                  
 30194                                  gnradix:
 30195 00002BFA 0000                    	dw	0		; Must be a word--16x16 multiplication
 30196                                  
 30197                                  toDigit:
 30198 00002BFC 2E833E[FA2B]10          	cmp	word [cs:gnradix],16
 30199 00002C02 751C                    	jne	short td20	; Don't check hex digits if radix isn't 16
 30200                                  
 30201                                  toDigit_hex:
 30202 00002C04 80F961                  	cmp	cl,'a'	; 61h
 30203 00002C07 7209                    	jb	short td10
 30204 00002C09 80F966                  	cmp	cl,'f'	; 66h
 30205 00002C0C 7720                    	ja	short tdE	; Nothing valid above 'f' at all...
 30206 00002C0E 80E957                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 30207                                  	;clc			; <- CLC is implicit from last SUB
 30208 00002C11 C3                      	retn
 30209                                  td10:	
 30210 00002C12 80F941                  	cmp	cl,'A'  ; 41h
 30211 00002C15 7209                    	jb	short td20	; Below 'A'? Not a letter...
 30212 00002C17 80F946                  	cmp	cl,'F'	; 46h
 30213 00002C1A 7712                    	ja	short tdE	; Above 'F'? Not a digit.
 30214 00002C1C 80E937                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 30215                                  	;clc			; <- CLC is implicit from last SUB
 30216 00002C1F C3                      	retn
 30217                                  toDigit_dec:
 30218                                  td20:	
 30219 00002C20 80F930                  	cmp	cl,'0'		; If less than zero,
 30220                                  	;jb	short tdE	; Done.
 30221 00002C23 720A                    	jb	short tdEr ; 08/04/2019
 30222 00002C25 80F939                  	cmp	cl,'9'		; Or, if greater than nine,
 30223 00002C28 7704                    	ja	short tdE	; Done.
 30224 00002C2A 80E930                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 30225                                  	;clc			; <- CLC is implicit from last SUB
 30226 00002C2D C3                      	retn
 30227                                  tdE:	
 30228 00002C2E F9                      	stc
 30229                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 30230 00002C2F C3                      	retn
 30231                                  
 30232                                  ; -----------------------------------------------------------------------------
 30233                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 30234                                  ; -----------------------------------------------------------------------------
 30235                                  ; ENTRY:    ES:SI points to an ascii string to scan
 30236                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 30237                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 30238                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 30239                                  ; -----------------------------------------------------------------------------
 30240                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 30241                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 30242                                  ; will be 10 or 16.
 30243                                  ; -----------------------------------------------------------------------------
 30244                                  
 30245                                  ; 08/04/2019 - Retro DOS v4.0
 30246                                  
 30247                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 30248                                  ; (SYSINIT:3109h)
 30249                                  
 30250                                  GetXNum:
 30251                                  	;pushreg <bx, cx, ds>
 30252                                  	; 01/01/2023
 30253                                  	;push	bx
 30254 00002C30 51                      	push	cx ; *
 30255                                  	;push	ds
 30256                                  
 30257 00002C31 FC                      	cld
 30258 00002C32 31C0                    	xor	ax,ax
 30259 00002C34 31DB                    	xor	bx,bx
 30260 00002C36 31C9                    	xor	cx,cx
 30261 00002C38 31D2                    	xor	dx,dx			; Start with 0 (makes sense)
 30262                                  
 30263 00002C3A 2EC706[FA2B]0A00        	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 30264                                  
 30265 00002C41 268A0C                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 30266                                  	;call	toDigit
 30267 00002C44 E8D9FF                  	call	toDigit_dec
 30268                                  	;jc	short gxnE		; If it's not a digit, leave now.
 30269                                  	; 01/01/2023
 30270 00002C47 7233                    	jc	short gxnX
 30271                                  
 30272 00002C49 08C9                    	or	cl,cl
 30273 00002C4B 7517                    	jnz	short gxn20		; Doesn't have '0x'
 30274 00002C4D 268A4C01                	mov	cl,[es:si+1]
 30275 00002C51 80F978                  	cmp	cl,'x'			; Either 'x'...
 30276 00002C54 7405                    	je	short gxn10
 30277 00002C56 80F958                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 30278 00002C59 7509                    	jne	short gxn20
 30279                                  
 30280                                  gxn10:	
 30281 00002C5B 2EC706[FA2B]1000        	mov	word [cs:gnradix], 16
 30282 00002C62 46                      	inc	si			; Since we read "0x", march over it.
 30283 00002C63 46                      	inc	si
 30284                                  
 30285                                  ; ------------------------------------------------------
 30286                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 30287                                  ;        DX:AX = current total
 30288                                  ;        BX    = 0
 30289                                  ;        CH    = 0
 30290                                  ; ------------------------------------------------------
 30291                                  
 30292                                  gxn20:	
 30293 00002C64 268A0C                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 30294 00002C67 46                      	inc	si
 30295                                  
 30296 00002C68 E891FF                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 30297 00002C6B 720D                    	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 30298                                  
 30299 00002C6D E80E00                  	call	mul32		; Multiply DX:AX by gnradix
 30300 00002C70 720A                    	jc	short gxnX	; (if it's too big, error out)
 30301                                  
 30302 00002C72 01C8                    	add	ax,cx		; Add the digit
 30303 00002C74 11DA                    	adc	dx,bx		; (BX is 0!)--Adds 1 if last add wrapped
 30304                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 30305                                  	;jmp	short gxn20
 30306 00002C76 73EC                    	jnc	short gxn20
 30307                                  gxnE:	
 30308                                  	;stc			; In this case, we need to set the carry
 30309 00002C78 EB02                    	jmp	short gxnX	; and leave--there were no digits given.
 30310                                  gxnQ:	
 30311 00002C7A 4E                      	dec	si		; Don't read in the offensive character.
 30312 00002C7B F8                      	clc			; And clear carry, so they know it's okay.
 30313                                  gxnX:	
 30314                                  	; 01/01/2023
 30315                                  	;pop	ds
 30316 00002C7C 59                      	pop	cx ; *
 30317                                  	;pop	bx
 30318 00002C7D C3                      	retn
 30319                                  
 30320                                  ; -----------------------------------------------------------------------------
 30321                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 30322                                  ; -----------------------------------------------------------------------------
 30323                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 30324                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 30325                                  ; ERROR:   Carry set if number was too large
 30326                                  ; USES:    Flags, AX, DX
 30327                                  ; -----------------------------------------------------------------------------
 30328                                  
 30329                                  mul32:
 30330 00002C7E 50                      	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 30331 00002C7F 89D0                    	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 30332 00002C81 2EF726[FA2B]            	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 30333 00002C86 7211                    	jc	short m32E	; Too big?
 30334                                  
 30335 00002C88 89C2                    	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 30336 00002C8A 58                      	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 30337                                  
 30338 00002C8B 87D3                    	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 30339 00002C8D 2EF726[FA2B]            	mul	word [cs:gnradix] ; DX=carry, AX=new:lo, TOS=orig, BX=new:hi
 30340 00002C92 87D3                    	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 30341 00002C94 01DA                    	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 30342 00002C96 31DB                    	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 30343 00002C98 C3                      	retn
 30344                                  m32E:	
 30345 00002C99 58                      	pop	ax
 30346 00002C9A C3                      	retn
 30347                                  
 30348                                  ; -----------------------------------------------------------------------------
 30349                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 30350                                  ; -----------------------------------------------------------------------------
 30351                                  ; ENTRY:   DX:AX = the number to be divided
 30352                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 30353                                  ; ERROR:   None
 30354                                  ; USES:    Flags, AX, DX
 30355                                  ; -----------------------------------------------------------------------------
 30356                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 30357                                  ;       can't ensure a 386 host machine. Sorry.
 30358                                  ; -----------------------------------------------------------------------------
 30359                                  
 30360                                  	; 01/01/2023 - Retro DOS v4.2
 30361                                  toPara:
 30362 00002C9B 51                      	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 30363                                  
 30364 00002C9C B104                    	mov	cl,4		;
 30365 00002C9E D3E8                    	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 30366 00002CA0 92                      	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 30367 00002CA1 B10C                    	mov	cl,12
 30368 00002CA3 D3E0                    	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 30369 00002CA5 09D0                    	or	ax,dx		;    AX=hhhh LLLL llll llll
 30370                                  
 30371 00002CA7 59                      	pop	cx
 30372 00002CA8 C3                      	retn
 30373                                  
 30374                                  ; -----------------------------------------------------------------------------
 30375                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 30376                                  ; -----------------------------------------------------------------------------
 30377                                  ; ENTRY:  Nothing
 30378                                  ; EXIT:   AX contains 0x9FFF for most systems
 30379                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 30380                                  ; USES:   Flags, AX
 30381                                  ; -----------------------------------------------------------------------------
 30382                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 30383                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 30384                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 30385                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 30386                                  ; -----------------------------------------------------------------------------
 30387                                  
 30388                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 30389                                  UmbHead:
 30390                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 30391                                  
 30392                                  	;push	si ; ?
 30393                                  	;push	ds ; ? 
 30394                                  	;push	es
 30395                                  	;push	bx ; *	
 30396                                  
 30397                                  	; 09/04/2019
 30398                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 30399                                  
 30400 00002CA9 B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30401 00002CAB CD21                    	int	21h
 30402                                  
 30403 00002CAD 26A18C00                	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 30404                                  	
 30405                                  	; 01/01/2023
 30406 00002CB1 83F8FF                  	cmp	ax,0FFFFh
 30407 00002CB4 F5                      	cmc
 30408                                  	; if AX=0FFFFh -> CF=1
 30409 00002CB5 C3                      	retn
 30410                                  
 30411                                  ; 01/01/2023
 30412                                  ;%if 0
 30413                                  ;	cmp	ax,0FFFFh
 30414                                  ;	je	short uhE		; If it's 0xFFFF, it's an error...
 30415                                  ;
 30416                                  ;	clc				; Else, it isn't (CLC done by prev cmp)
 30417                                  ;	;jmp	short uhX
 30418                                  ;	; 12/12/2022
 30419                                  ;	retn
 30420                                  ;uhE:	
 30421                                  ;	stc
 30422                                  ;uhX:	
 30423                                  ;	;pop	bx ; *
 30424                                  ;	;pop	es
 30425                                  ;	;pop	ds ; ?
 30426                                  ;	;pop	si ; ?
 30427                                  ;	retn
 30428                                  ;%endif
 30429                                  
 30430                                  ; -----------------------------------------------------------------------------
 30431                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 30432                                  ; -----------------------------------------------------------------------------
 30433                                  ; ENTRY:  ES:0 should point to a valid MCB
 30434                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 30435                                  ; USES:   Flags
 30436                                  ; -----------------------------------------------------------------------------
 30437                                  
 30438                                  isSysMCB:
 30439                                  	;push	ax
 30440                                  
 30441                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 30442                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 30443                                  	;je	short ism10
 30444                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 30445                                  	;;je	short ism10
 30446                                  	;;jmp	short ismX		; Anything else isn't.
 30447                                  	;jne	short ismX
 30448 00002CB6 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 30449 00002CBC 7507                    	jne	short ismX 
 30450                                  ism10:	
 30451                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 30452                                  	;cmp	ax,'SC' ; 4353h
 30453 00002CBE 26813E08005343          	cmp	word [es:ARENA.NAME],'SC'
 30454                                  ismX:	
 30455                                  	;pop	ax
 30456 00002CC5 C3                      	retn
 30457                                  
 30458                                  ; 09/04/2019 - Retro DOS v4.0
 30459                                  
 30460                                  ; -----------------------------------------------------------------------------
 30461                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 30462                                  ; -----------------------------------------------------------------------------
 30463                                  ; ENTRY:  AX contains a segment address
 30464                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 30465                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 30466                                  ; USES:   Flags, AX
 30467                                  ; -----------------------------------------------------------------------------
 30468                                  ; An address in the following areas is treated as:
 30469                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 30470                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 30471                                  ;      ...
 30472                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 30473                                  ; -----------------------------------------------------------------------------
 30474                                  
 30475                                  	; 01/01/2023 - Retro DOS v4.2
 30476                                  AddrToUmb:
 30477                                  	; 01/01/2023
 30478                                  	;push	cx
 30479                                  	;push	dx
 30480 00002CC6 06                      	push	es
 30481                                  
 30482 00002CC7 89C2                    	mov	dx,ax		; DX = address to search for
 30483                                  
 30484 00002CC9 E8DDFF                  	call	UmbHead		; AX = first segment
 30485 00002CCC 7222                    	jc	short atuE	; If it couldn't get it, error out.
 30486                                  
 30487                                  	; 22/07/2023
 30488                                  	;mov	es,ax ; *	; ES = first UMB segment
 30489 00002CCE 31C9                    	xor	cx,cx ; 0	; Pretend we're on UMB 0 for now... (cx = UMB#)
 30490                                  
 30491                                  	; 22/07/2023
 30492                                  atu10:
 30493 00002CD0 8EC0                    	mov	es,ax ; * ; ** ; 22/07/2023
 30494                                  ; ----------------------------------------
 30495                                  ; ATU10--ES - Current MCB address
 30496                                  ;        DX - Address given for conversion
 30497                                  ;        CX - Current UMB #
 30498                                  ; ----------------------------------------
 30499                                  
 30500                                  ;atu10:	
 30501                                  	;mov	ax,es ; * ; 18/07/2023
 30502 00002CD2 39D0                            cmp	ax,dx		; Present segment >= given segment?
 30503 00002CD4 731D                    	jae	short atuX	; Yep--done.
 30504                                  
 30505 00002CD6 E8DDFF                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 30506 00002CD9 7501                    	jnz	short atu20
 30507                                  
 30508 00002CDB 41                      	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 30509                                  atu20:	
 30510                                  	;mov	al,[es:ARENA.SIGNATURE]
 30511                                  	;cmp	al,arena_signature_end  ; 'Z'
 30512                                  	; 22/07/2023
 30513                                  	; ax = es
 30514                                  	;mov	ax,es ; **
 30515 00002CDC 2603060300              	add	ax,[es:ARENA.SIZE]
 30516 00002CE1 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 30517 00002CE7 7403                    	je	short atu30		; 'Z' means this was the last MCB... that's it.
 30518                                  
 30519                                  	;NextMCB es,ax
 30520                                  
 30521                                  	;mov	ax,es ; **
 30522                                  	;;add	ax,[es:3]
 30523                                  	;add	ax,[es:ARENA.SIZE]
 30524 00002CE9 40                      	inc	ax
 30525                                  	; 22/07/2023
 30526                                  	;mov	es,ax ; *
 30527 00002CEA EBE4                    	jmp	short atu10
 30528                                  
 30529                                  ; -----------------------------------------------------------------------------
 30530                                  ; if we get to atu30, they specified a number that was past the last MCB.
 30531                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 30532                                  ; -----------------------------------------------------------------------------
 30533                                  
 30534                                  atu30:	
 30535                                  	; 22/07/2023
 30536                                  	; ax = es + [es:ARENA.SIZE] 
 30537                                  	;mov	ax,es ; **
 30538                                  	;add	ax,[es:ARENA.SIZE] ; **
 30539 00002CEC 39D0                    	cmp	ax,dx		; Present >= given?
 30540 00002CEE 7303                    	jae	short atuX	; Yep! It _was_ inside.
 30541                                  atuE:	
 30542 00002CF0 31C9                    	xor	cx,cx ; 0	; Else, fall through with UMB # == -1
 30543 00002CF2 49                      	dec	cx		; (that makes it return 0xFFFF and sets CF)
 30544                                  atuX:	
 30545 00002CF3 89C8                    	mov	ax,cx		; Return the UMB number in AX
 30546                                  	
 30547 00002CF5 07                      	pop	es	
 30548                                  	; 01/01/2023
 30549                                  	;pop	dx
 30550                                  	;pop	cx
 30551 00002CF6 C3                      	retn
 30552                                  
 30553                                  ; -----------------------------------------------------------------------------
 30554                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 30555                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 30556                                  ; address rather than a UMB number... and use that address to look up a UMB.
 30557                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 30558                                  ; -----------------------------------------------------------------------------
 30559                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 30560                                  ; EXIT:   AX will contain a UMB number
 30561                                  ; ERROR:  None
 30562                                  ; USES:   Flags, AX
 30563                                  ; -----------------------------------------------------------------------------
 30564                                  
 30565                                  	; 01/01/2023 - Retro DOS v4.2
 30566                                  convUMB:
 30567 00002CF7 2E833E[FA2B]10          	cmp	word [cs:gnradix],16
 30568 00002CFD 7507                    	jne	short cu10	; If it didn't read in hex, it's not an address
 30569 00002CFF E8C4FF                  	call	AddrToUmb	; Else, convert the address to a UMB number
 30570                                  	;cmp	ax,0FFFFh
 30571                                  	;jne	short cu10
 30572                                  	;inc	ax		; If too high, ignore it (make it conventional)
 30573                                  	; 01/01/2023
 30574 00002D02 40                      	inc	ax
 30575 00002D03 7401                    	jz	short cu10	; If too high, ignore it (make it conventional)
 30576 00002D05 48                      	dec	ax
 30577                                  cu10:	
 30578 00002D06 C3                      	retn
 30579                                  
 30580                                  ; 01/01/2023 - Retro DOS v4.2
 30581                                  ;%if 0
 30582                                  ;
 30583                                  ;; -----------------------------------------------------------------------------
 30584                                  ;;*** setUMBs - links umbs and sets allocation strategy for a load
 30585                                  ;;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 30586                                  ;; of the usual HIGH_FIRST. See the code.
 30587                                  ;; -----------------------------------------------------------------------------
 30588                                  ;; ENTRY:  None
 30589                                  ;; EXIT:   None
 30590                                  ;; ERROR:  None
 30591                                  ;; USES:   Flags, fm_umb, fm_strat
 30592                                  ;; -----------------------------------------------------------------------------
 30593                                  ;
 30594                                  ;setUMBs:
 30595                                  ;	push	ax
 30596                                  ;	push	bx
 30597                                  ;	call	fm_link
 30598                                  ;	pop	bx
 30599                                  ;	pop	ax
 30600                                  ;	retn
 30601                                  ;
 30602                                  ;%endif
 30603                                  
 30604                                  ; 18/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 30605                                  ; loadLow subroutine is not used anywhere of IO.SYS 6.22 (& 5.0)
 30606                                  %if 0
 30607                                  
 30608                                  ; -----------------------------------------------------------------------------
 30609                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 30610                                  ; -----------------------------------------------------------------------------
 30611                                  ; ENTRY:  None
 30612                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 30613                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 30614                                  ; ERROR:  None
 30615                                  ; USES:   Flags, fm_strat, fm_umb
 30616                                  ; -----------------------------------------------------------------------------
 30617                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 30618                                  ; load UMB, and it is 0. That 0 can be either from the user having _specified_
 30619                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 30620                                  ; such that the load UMB is too small, and shouldn't be used.
 30621                                  ; -----------------------------------------------------------------------------
 30622                                  
 30623                                  loadLow:
 30624                                  	;push	ds
 30625                                  	;push	cs		; Point DS into appropriate data segment
 30626                                  	;pop	ds	
 30627                                  
 30628                                  	;mov	al,[UmbLoad]
 30629                                  	mov	al,[cs:UmbLoad]
 30630                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 30631                                  	jne	short ll10
 30632                                  
 30633                                  	stc
 30634                                  ll15:
 30635                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 30636                                  	;stc
 30637                                  	;jmp	short llX
 30638                                  	retn
 30639                                  ll10:	
 30640                                  	or	al,al		; AL=the load UMB: Is it == 0?
 30641                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 30642                                  
 30643                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 30644                                  	retn
 30645                                  
 30646                                  	;mov	al,1
 30647                                  	;clc
 30648                                  ;llX:
 30649                                  	;pop	ds		; Return DS to where it was
 30650                                  	;retn
 30651                                  
 30652                                  %endif
 30653                                  
 30654                                  ; -----------------------------------------------------------------------------
 30655                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 30656                                  ; -----------------------------------------------------------------------------
 30657                                  ; ENTRY:  None
 30658                                  ; EXIT:   None
 30659                                  ; ERROR:  None
 30660                                  ; USES:   Flags, fm_strat, fm_umb
 30661                                  ; -----------------------------------------------------------------------------
 30662                                  
 30663                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 30664                                  	; (SYSINIT:322Fh)
 30665                                  HideUMBs:
 30666                                  	; 01/01/2023
 30667                                  	;push	ax
 30668                                  	;push	cx
 30669                                  	;push	ds
 30670 00002D07 06                      	push	es
 30671                                  
 30672                                  	; 01/01/2023
 30673                                  	; ds = cs
 30674                                  
 30675 00002D08 E86902                  	call	UmbTest		; See if we REALLY linked in anything...
 30676 00002D0B 7232                    	jc	short husX	; ...if not, there's nothing for us to do.
 30677                                  
 30678 00002D0D E886FD                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 30679                                  	
 30680                                  	;call	setUMBs		; Link UMBs and set memory-allocation strategy
 30681                                  	; 01/01/2023
 30682 00002D10 E8D0FD                  	call	fm_link
 30683                                  
 30684                                  	;putdata fInHigh,1	; Remember that we're now running high
 30685                                  	;mov	byte [cs:fInHigh],1
 30686                                  	; 01/01/2023
 30687 00002D13 C606[711F]01            	mov	byte [fInHigh],1
 30688                                  
 30689                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 30690                                  	;mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 30691                                  	; 01/01/2023
 30692 00002D18 A0[751F]                	mov	al,[UmbLoad]
 30693                                  
 30694 00002D1B 3CFF                    	cmp	al,UNSPECIFIED	; If they didn't,
 30695 00002D1D 7420                    	je	short husX	; then we shouldn't do this loop:
 30696                                  
 30697 00002D1F 31C9                    	xor	cx,cx
 30698                                  
 30699                                  ; -----------------------------------------------
 30700                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 30701                                  ; -----------------------------------------------
 30702                                  
 30703 00002D21 41                      hus10:	inc	cx		; For each UMB:
 30704                                  	; 01/01/2023
 30705 00002D22 80F910                  	cmp	cl,MAXUMB
 30706                                  	;cmp	cx,MAXUMB ; 16
 30707 00002D25 730E                    	jae	short hus20
 30708                                  
 30709 00002D27 88C8                    	mov	al,cl		; (stopping as soon as we're outside of the
 30710 00002D29 06                      	push	es
 30711 00002D2A E89E00                  	call	findUMB		; valid range of UMBs)
 30712 00002D2D 07                      	pop	es		; push/pop: trash what findumb finds.  :-)
 30713 00002D2E 7205                    	jc	short hus20
 30714                                  	
 30715                                  	; 02/01/2023
 30716                                  	;push	cx ; *
 30717 00002D30 E84C01                  	call	_hideUMB_	; hide what we need to hide.
 30718                                  	;pop	cx ; *
 30719                                  
 30720 00002D33 EBEC                    	jmp	short hus10
 30721                                  hus20:	
 30722                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 30723                                  	; 01/01/2023
 30724                                  	; ds = cs
 30725                                  	;mov	al,[UmbLoad]
 30726                                  	;;mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 30727 00002D35 800E[751F]00            	or	byte [UmbLoad],0
 30728                                  	;or	al,al		; --Is the load UMB 0? (-1==unspecified)
 30729 00002D3A 7503                    	jnz	short husX	; If not, we're done.
 30730                                  
 30731 00002D3C E86302                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 30732                                  husX:	
 30733 00002D3F 07                      	pop	es
 30734                                  	; 01/01/2023
 30735                                  	;pop	ds
 30736                                  	;pop	cx
 30737                                  	;pop	ax
 30738 00002D40 C3                      	retn
 30739                                  
 30740                                  ; -----------------------------------------------------------------------------
 30741                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 30742                                  ; -----------------------------------------------------------------------------
 30743                                  ; ENTRY:  None
 30744                                  ; EXIT:   AL == load UMB
 30745                                  ; ERROR:  None
 30746                                  ; USES:   Flags, AX
 30747                                  ; -----------------------------------------------------------------------------
 30748                                  
 30749                                  ;GetLoadUMB:
 30750                                  ;	;getdata al, UmbLoad
 30751                                  ;	push	ds
 30752                                  ;	push	cs
 30753                                  ;	pop	ds
 30754                                  ;	mov	al,[UmLoad]
 30755                                  ;	pop	ds
 30756                                  ;	retn
 30757                                  
 30758                                  ; -----------------------------------------------------------------------------
 30759                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 30760                                  ; -----------------------------------------------------------------------------
 30761                                  ; ENTRY:  None
 30762                                  ; EXIT:   AX == load UMB minimum size
 30763                                  ; ERROR:  None
 30764                                  ; USES:   Flags, AX
 30765                                  ; -----------------------------------------------------------------------------
 30766                                  
 30767                                  	; 01/01/2023 - Retro DOS v4.2
 30768                                  GetLoadSize:
 30769                                  	; 09/04/2019 - Retro DOS v4.0
 30770                                  	;mov	al,[cs:UmbLoad]
 30771                                  	; 01/01/2023
 30772                                  	; ds = cs
 30773 00002D41 A0[751F]                	mov	al,[UmbLoad] 
 30774                                  	;jmp	short GetSize
 30775                                  
 30776                                  	;push	bx
 30777                                  	;;push	si
 30778                                  	;push	ds
 30779                                  	;push	cs
 30780                                  	;pop	ds
 30781                                  
 30782                                  	;mov	al,[UmbLoad]
 30783                                  
 30784                                  	;xor	ah,ah			;    ax==UMB
 30785                                  	;mov	bx,UmbSize		;    bx==array
 30786                                  	;shl	al,1	                ;    ax==offset
 30787                                  	;;add	ax,bx			;    ax==element index
 30788                                  	;;mov	si,ax			; ds:si==element index
 30789                                  
 30790                                  	;;lodsw				;    hh
 30791                                  
 30792                                  	;add	bx,ax
 30793                                  	;mov	ax,[bx]
 30794                                  
 30795                                  	;pop	ds
 30796                                  	;;pop	si
 30797                                  	;pop	bx
 30798                                  	;retn
 30799                                  
 30800                                  ; -----------------------------------------------------------------------------
 30801                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 30802                                  ; -----------------------------------------------------------------------------
 30803                                  ; ENTRY:  AL == a UMB number
 30804                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 30805                                  ; ERROR:  None
 30806                                  ; USES:   Flags, AX
 30807                                  ; -----------------------------------------------------------------------------
 30808                                  
 30809                                  	; 01/01/2023 - Retro DOS v4.2
 30810                                  GetSize:
 30811                                  	; 09/04/2019 - Retro DOS v4.0
 30812                                  
 30813                                  	;push	bx ; 01/01/2023
 30814                                  	;push	si
 30815                                  	;push	ds
 30816                                  	;push	cs
 30817                                  	;pop	ds
 30818                                  
 30819 00002D44 30E4                    	xor	ah,ah			;    ax==UMB
 30820 00002D46 BB[861F]                	mov	bx,UmbSize		;    bx==array
 30821 00002D49 D0E0                    	shl	al,1	                ;    ax==offset
 30822                                  	;add	ax,bx			;    ax==element index
 30823                                  	;mov	si,ax			; ds:si==element index
 30824                                  
 30825                                  	;lodsw				;    ax==size
 30826                                  
 30827 00002D4B 01C3                    	add	bx,ax
 30828                                  	; 01/01/2023
 30829                                  	; ds = cs
 30830 00002D4D 8B07                    	mov	ax,[bx]
 30831                                  	;mov	ax,[cs:bx]
 30832                                  
 30833                                  	;pop	ds
 30834                                  	;pop	si
 30835                                  	;pop	bx ; 01/01/2023
 30836 00002D4F C3                      	retn
 30837                                  
 30838                                  ; -----------------------------------------------------------------------------
 30839                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 30840                                  ; -----------------------------------------------------------------------------
 30841                                  ; ENTRY:   AL == new load UMB
 30842                                  ; EXIT:    None
 30843                                  ; ERROR:   None
 30844                                  ; USES:    Flags, AX
 30845                                  ; -----------------------------------------------------------------------------
 30846                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 30847                                  ;          time you would ever need this, so that's okay.
 30848                                  ; -----------------------------------------------------------------------------
 30849                                  
 30850                                  ;StoLoadUMB:
 30851                                  ;	;putdata UmbLoad, al
 30852                                  ;	push	es
 30853                                  ;	push	cs
 30854                                  ;	pop	es
 30855                                  ;	mov	[es:UmbLoad],al
 30856                                  ;	pop	es
 30857                                  ;	retn
 30858                                  
 30859                                  ; -----------------------------------------------------------------------------
 30860                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 30861                                  ; -----------------------------------------------------------------------------
 30862                                  ; ENTRY:  AL == new load size
 30863                                  ; EXIT:   None
 30864                                  ; ERROR:  None
 30865                                  ; USES:   Flags, AX
 30866                                  ; -----------------------------------------------------------------------------
 30867                                  
 30868                                  	; 01/01/2023 - Retro DOS v4.2
 30869                                  StoLoadSize:
 30870                                  	; 01/01/2023
 30871                                  	;push	dx
 30872                                  
 30873                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 30874                                  	;
 30875                                  	;push	ds
 30876                                  	;push	cs
 30877                                  	;pop	ds
 30878                                  	;mov	dl,[UmbLoad]
 30879                                  	;pop	ds	
 30880                                  
 30881 00002D50 2E8A16[751F]            	mov	dl,[cs:UmbLoad]
 30882                                  
 30883 00002D55 80FAFF                  	cmp	dl,UNSPECIFIED ; 0FFh
 30884 00002D58 7403                    	je	short sls10
 30885                                  
 30886 00002D5A E891FE                  	call	stowSiz			; We've got a function to do just this
 30887                                  sls10:	
 30888                                  	; 01/01/2023
 30889                                  	;pop	dx
 30890 00002D5D C3                      	retn
 30891                                  
 30892                                  ; -----------------------------------------------------------------------------
 30893                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 30894                                  ; -----------------------------------------------------------------------------
 30895                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 30896                                  ; EXIT:     None; free elements in UMB marked as hidden
 30897                                  ; ERROR:    None
 30898                                  ; USES:     Flags
 30899                                  ; -----------------------------------------------------------------------------
 30900                                  
 30901                                  	; 01/01/2023 - Retro DOS v4.2
 30902                                  hideUMB:
 30903                                  	; 02/01/2023
 30904 00002D5E 52                      	push	dx ; (*)
 30905                                  	; 01/01/2023
 30906                                  	;push	ax
 30907 00002D5F 06                      	push	es
 30908                                  
 30909 00002D60 E86800                  	call	findUMB	; (*)	; Returns with carry if err, else ES == MCB
 30910 00002D63 7224                    	jc	short huX
 30911                                  
 30912                                  ; ------------------------------------------------
 30913                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 30914                                  ;            we're not in the same UMB, so exit.
 30915                                  ; ------------------------------------------------
 30916                                  
 30917 00002D65 E84EFF                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30918 00002D68 741F                    	jz	short huX	; If it is, we've finished the UMB.
 30919                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 30920 00002D6A 26830E010000            	or	word [es:ARENA.OWNER],0
 30921 00002D70 7503                    	jnz	short hu20
 30922                                  
 30923 00002D72 E81700                  	call	hideMCB
 30924                                  hu20:	
 30925                                  	;mov	al,[es:ARENA.SIGNATURE]
 30926                                  	;cmp	al,arena_signature_end  ;'Z'
 30927                                  	; 19/07/2023
 30928 00002D75 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],'Z'
 30929 00002D7B 740C                    	jz	short huX	; 'Z' means this was the last MCB... that's it.
 30930                                  
 30931                                  	;NextMCB es,ax		; Go on forward.
 30932 00002D7D 8CC0                    	mov     ax,es
 30933                                  	;add	ax,[es:3]
 30934 00002D7F 2603060300              	add     ax,[es:ARENA.SIZE]
 30935 00002D84 40                      	inc     ax
 30936 00002D85 8EC0                    	mov     es,ax
 30937                                  
 30938 00002D87 EBDC                    	jmp	short hu10
 30939                                  huX:	
 30940 00002D89 07                      	pop	es
 30941                                  	; 01/01/2023
 30942                                  	;pop	ax
 30943                                  	; 02/01/2023
 30944 00002D8A 5A                      	pop	dx ; (*)
 30945 00002D8B C3                      	retn
 30946                                  
 30947                                  ; 02/01/2023
 30948                                  %if 0
 30949                                  
 30950                                  ; -----------------------------------------------------------------------------
 30951                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 30952                                  ; -----------------------------------------------------------------------------
 30953                                  ; ENTRY:    None
 30954                                  ; EXIT:     ZF set if user DIDN'T specify /S
 30955                                  ; ERROR:    None
 30956                                  ; USES:     Flags
 30957                                  ; -----------------------------------------------------------------------------
 30958                                  
 30959                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 30960                                  isTiny:
 30961                                  	; 02/01/2023
 30962                                  	;push	ax
 30963                                  
 30964                                  	;getdata al,fUmbTiny
 30965                                  	;
 30966                                  	;push	ds
 30967                                  	;push	cs
 30968                                  	;pop	ds
 30969                                  	;mov	al,[fUmbTiny]
 30970                                  	;pop	ds
 30971                                  
 30972                                  	mov	al,[cs:fUmbTiny]
 30973                                  	; 02/01/2023
 30974                                  	; ds = cs
 30975                                  	mov	al,[fUmbTiny]
 30976                                  
 30977                                  	or	al,al
 30978                                  	; 02/01/2023
 30979                                  	;pop	ax
 30980                                  	retn
 30981                                  
 30982                                  %endif
 30983                                  
 30984                                  ; -----------------------------------------------------------------------------
 30985                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 30986                                  ; -----------------------------------------------------------------------------
 30987                                  ; ENTRY:    ES:0 should point to an MCB
 30988                                  ; EXIT:     ZF set if MCB is free, else !ZF
 30989                                  ; ERROR:    None
 30990                                  ; USES:     Flags
 30991                                  ; -----------------------------------------------------------------------------
 30992                                  
 30993                                  ;isFreeMCB:
 30994                                  ;	or	word [es:ARENA.OWNER],0
 30995                                  ;	retn
 30996                                  
 30997                                  ; -----------------------------------------------------------------------------
 30998                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 30999                                  ; -----------------------------------------------------------------------------
 31000                                  ; ENTRY:    ES:0 should point to an MCB
 31001                                  ; EXIT:     None; MCB marked as HIDDEN
 31002                                  ; ERROR:    None
 31003                                  ; USES:     None
 31004                                  ; -----------------------------------------------------------------------------
 31005                                  
 31006                                  hideMCB:
 31007 00002D8C 26C70601000800          	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 31008 00002D93 26C70608004849          	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 31009 00002D9A 26C7060A004444          	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 31010 00002DA1 26C7060C00454E          	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 31011 00002DA8 26C7060E002020          	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 31012 00002DAF C3                      	retn
 31013                                  
 31014                                  ; -----------------------------------------------------------------------------
 31015                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 31016                                  ; -----------------------------------------------------------------------------
 31017                                  ; ENTRY:    ES:0 should point to an MCB
 31018                                  ; EXIT:     None; MCB marked as FREE
 31019                                  ; ERROR:    None
 31020                                  ; USES:     None
 31021                                  ; -----------------------------------------------------------------------------
 31022                                  
 31023                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31024                                  
 31025                                  unHideMCB:
 31026                                  	; 03/01/2023
 31027                                  	;push	ax
 31028 00002DB0 26C70601000000          	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 31029 00002DB7 B82020                  	mov	ax,'  ' ; 2020h
 31030 00002DBA 26A30800                	mov	[es:ARENA.NAME+0],ax
 31031 00002DBE 26A30A00                	mov	[es:ARENA.NAME+2],ax
 31032 00002DC2 26A30C00                	mov	[es:ARENA.NAME+4],ax
 31033 00002DC6 26A30E00                	mov	[es:ARENA.NAME+6],ax
 31034                                  	; 03/01/2023
 31035                                  	;pop	ax
 31036 00002DCA C3                      	retn
 31037                                  
 31038                                  ; -----------------------------------------------------------------------------
 31039                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 31040                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 31041                                  ; -----------------------------------------------------------------------------
 31042                                  ; ENTRY:    AL should be to a valid UMB number
 31043                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 31044                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 31045                                  ; USES:     Flags, ES
 31046                                  ; -----------------------------------------------------------------------------
 31047                                  
 31048                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31049                                  	; (SYSINIT:3344h)
 31050                                  findUMB:
 31051                                  	; 01/01/2023
 31052                                  	;push	ax
 31053                                  	; 02/01/2023
 31054 00002DCB 51                      	push	cx ; *
 31055                                  	;push	dx
 31056                                  
 31057 00002DCC 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 31058                                  
 31059 00002DCE 89C2                    	mov	dx,ax		; Store the to-be-found UMB number in DX
 31060                                  
 31061 00002DD0 E8D6FE                  	call	UmbHead		; Returns first UMB segment in AX
 31062                                  	; 22/07/2023
 31063                                  	;mov	es,ax ; *
 31064 00002DD3 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 31065                                  
 31066                                  	; 22/07/2023
 31067                                  fu10:
 31068 00002DD5 8EC0                    	mov	es,ax ; * ; **
 31069                                  ; ---------------------------------------------
 31070                                  ; FU10--CX - This UMB number; 0 == conventional
 31071                                  ;       DX - The UMB number they're looking for
 31072                                  ;       ES - The current MCB address
 31073                                  ; ---------------------------------------------
 31074                                  
 31075                                  ;fu10:	
 31076 00002DD7 39D1                    	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 31077 00002DD9 7417                    	je	short fuX	; searching for--so exit.
 31078                                  
 31079 00002DDB E8D8FE                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 31080 00002DDE 7501                    	jnz	short fu20
 31081                                  
 31082 00002DE0 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 31083                                  fu20:	
 31084                                  	;mov	al,[es:ARENA.SIGNATURE]
 31085                                  	;cmp	al,arena_signature_end ; 'Z'
 31086                                  	; 19/07/2023
 31087 00002DE1 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end 
 31088 00002DE7 7408                    	je	short fuE	; 'Z' means this was the last MCB... that's it.
 31089                                  
 31090                                  	;NextMCB es,ax		; Go on forward.
 31091                                  	; 22/07/2023
 31092                                  	; ax = es
 31093                                  	;mov	ax,es ; * ; 22/07/2023
 31094                                  	;add	ax,[es:3]
 31095 00002DE9 2603060300              	add	ax,[es:ARENA.SIZE]
 31096 00002DEE 40                      	inc	ax
 31097                                  	; 22/07/2023
 31098                                  	;mov	es,ax ; **
 31099 00002DEF EBE4                    	jmp	short fu10
 31100                                  fuE:	
 31101 00002DF1 F9                      	stc
 31102                                  fuX:
 31103                                  	; 01/01/2023
 31104                                  	;pop	dx
 31105                                  	; 02/01/2023
 31106 00002DF2 59                      	pop	cx ; *
 31107                                  	;pop	ax		; The address is already in ES.
 31108 00002DF3 C3                      	retn
 31109                                  
 31110                                  ; -----------------------------------------------------------------------------
 31111                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 31112                                  ; -----------------------------------------------------------------------------
 31113                                  ; ENTRY:    AL should be to a valid UMB number
 31114                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 31115                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 31116                                  ; USES:     Flags, ES
 31117                                  ; -----------------------------------------------------------------------------
 31118                                  
 31119                                  	; 01/01/2023 - Retro DOS v4.2
 31120                                  BigFree:
 31121                                  	; 01/01/2023
 31122                                  	;push	bx
 31123 00002DF4 51                      	push	cx
 31124                                  
 31125 00002DF5 E8D3FF                  	call	findUMB			; Returns with CF if err, else ES==MCB
 31126 00002DF8 723A                    	jc	short bfX
 31127                                  
 31128 00002DFA 31DB                    	xor	bx,bx			; Segment address of largest free MCB
 31129 00002DFC 31C9                    	xor	cx,cx			; Size of largest free MCB
 31130                                  
 31131                                  ; ---------------------------------------------
 31132                                  ; BF10--ES - Current MCB address
 31133                                  ;       BX - Address of largest free MCB so far
 31134                                  ;       CX - Size of largest free MCB so far
 31135                                  ; ---------------------------------------------
 31136                                  
 31137                                  bf10:	
 31138 00002DFE E8B5FE                  	call	isSysMCB		; If we've left the MCB, we're done.
 31139 00002E01 7428                    	jz	short bf30
 31140                                  
 31141                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 31142 00002E03 26830E010000            	or	word [es:ARENA.OWNER],0
 31143 00002E09 750C                    	jnz	short bf20
 31144                                  
 31145 00002E0B 26A10300                	mov	ax,[es:ARENA.SIZE]
 31146                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 31147 00002E0F 39C1                    	cmp	cx,ax
 31148                                  	;jg	short bf20		; Unless we're bigger,
 31149                                  	; 19/07/2023
 31150 00002E11 7D04                    	jge	short bf20
 31151                                  
 31152 00002E13 8CC3                    	mov	bx,es			; Store this new element's address,
 31153                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 31154 00002E15 89C1                    	mov	cx,ax
 31155                                  bf20:	
 31156                                  	;mov	al,[es:ARENA.SIGNATURE]
 31157                                  	;cmp	al,arena_signature_end	; 'Z'
 31158                                  	; 19/07/2023
 31159                                  	;cmp	byte [es:0],'Z'
 31160 00002E17 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 31161 00002E1D 740C                    	jz	short bf30		; 'Z' means this was the last MCB.
 31162                                  
 31163                                  	;NextMCB es,ax			; Go on forward.
 31164 00002E1F 8CC0                    	mov     ax,es
 31165                                  	;add	ax,[es:3]
 31166 00002E21 2603060300              	add     ax,[es:ARENA.SIZE]
 31167 00002E26 40                      	inc     ax
 31168 00002E27 8EC0                    	mov     es,ax
 31169                                  
 31170 00002E29 EBD3                    	jmp	short bf10
 31171                                  
 31172 00002E2B 8EC3                    bf30:	mov	es,bx			; Return the address
 31173 00002E2D 89C8                    	mov	ax,cx			; Return the size
 31174 00002E2F 09DB                    	or	bx,bx
 31175 00002E31 7501                    	jnz	short bfX
 31176                                  bfE:	
 31177 00002E33 F9                      	stc				; (if size==0, there's nothing free)
 31178                                  bfX:
 31179 00002E34 59                      	pop	cx
 31180                                  	; 01/01/2023
 31181                                  	;pop	bx
 31182 00002E35 C3                      	retn
 31183                                  
 31184                                  ; -----------------------------------------------------------------------------
 31185                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 31186                                  ; -----------------------------------------------------------------------------
 31187                                  ; ENTRY:    AL should be to a valid UMB number
 31188                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 31189                                  ; ERROR:    None
 31190                                  ; USES:     Flags
 31191                                  ; -----------------------------------------------------------------------------
 31192                                  
 31193                                  	; 02/01/2023 - Retro DOS v4.2
 31194                                  
 31195                                  isSpecified:
 31196                                  	; 02/01/2023
 31197                                  	;push	ax
 31198                                  
 31199 00002E36 30FF                    	xor	bh,bh
 31200 00002E38 88C3                    	mov	bl,al
 31201                                  
 31202                                  	;getdata al,DS:UmbUsed[bx]
 31203                                  	;
 31204                                  	;push	ds
 31205                                  	;push	cs
 31206                                  	;pop	ds
 31207                                  	;mov	al,[bx+UmbUsed]
 31208                                  	;pop	ds
 31209                                  	
 31210                                  	;mov	al,[cs:bx+UmbUsed]
 31211                                  	; 02/01/2023
 31212                                  	; ds = cs
 31213 00002E3A 8A87[761F]              	mov	al,[bx+UmbUsed]
 31214                                  
 31215 00002E3E 08C0                    	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 31216                                  
 31217                                  	; 02/01/2023
 31218 00002E40 58                      	pop	ax
 31219 00002E41 C3                      	retn
 31220                                  
 31221                                  ; -----------------------------------------------------------------------------
 31222                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 31223                                  ; -----------------------------------------------------------------------------
 31224                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 31225                                  ; EXIT:     None; MCB broken if carry clear
 31226                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 31227                                  ; USES:     Flags
 31228                                  ; -----------------------------------------------------------------------------
 31229                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 31230                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 31231                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 31232                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 31233                                  ; minimum for performing a split.
 31234                                  ; -----------------------------------------------------------------------------
 31235                                  
 31236                                  MIN_SPLIT_SIZE	equ 20h
 31237                                  
 31238                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31239                                  
 31240                                  shrinkMCB:
 31241                                  	;pushreg <bx,cx,es>
 31242                                  	; 02/01/2023
 31243                                  	;push	bx
 31244 00002E42 51                      	push	cx
 31245 00002E43 06                      	push	es
 31246                                  
 31247 00002E44 89C3                    	mov	bx,ax			; Move things around... and
 31248                                  	; 02/01/2023
 31249                                  	;mov	ax,es			; save this one for later.
 31250                                  
 31251 00002E46 268B0E0300              	mov	cx,[es:ARENA.SIZE]
 31252                                  	; 02/01/2023
 31253 00002E4B 89C8                    	mov	ax,cx 
 31254                                  
 31255 00002E4D 83E820                  	sub	ax,MIN_SPLIT_SIZE ; 32
 31256                                  	;sub	cx,MIN_SPLIT_SIZE ; 32
 31257                                  	;;cmp	bx,cx			; {New size} vs {Current Size-20h}
 31258                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 31259                                  	; 18/12/2022
 31260                                  	;cmp	cx,bx
 31261                                  	; 02/01/2023
 31262 00002E50 39D8                    	cmp	ax,bx
 31263 00002E52 7228                    	jb	short smE ; (*)
 31264                                  
 31265 00002E54 268A160000              	mov	dl,[es:ARENA.SIGNATURE]
 31266                                  	
 31267                                  	;mov	cx,[es:ARENA.SIZE]
 31268                                  	; 02/01/2023
 31269 00002E59 8CC0                    	mov	ax,es
 31270                                  
 31271 00002E5B 26891E0300              	mov	[es:ARENA.SIZE],bx
 31272 00002E60 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],'M'
 31273                                  
 31274 00002E66 01D8                    	add	ax,bx
 31275 00002E68 40                      	inc	ax
 31276 00002E69 8EC0                    	mov	es,ax			; Move to new arena area
 31277                                  
 31278 00002E6B 89C8                    	mov	ax,cx
 31279 00002E6D 29D8                    	sub	ax,bx
 31280                                  	; 12/12/2022
 31281                                  	; ax > 0
 31282 00002E6F 48                      	dec	ax			; And prepare the new size
 31283                                  
 31284                                  	; 18/12/2022
 31285 00002E70 2688160000              	mov	[es:ARENA.SIGNATURE],dl
 31286                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 31287 00002E75 26A30300                	mov	[es:ARENA.SIZE],ax
 31288                                  	;mov	ax,'  ' ; 2020h
 31289                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 31290                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 31291                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 31292                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 31293                                  
 31294                                  	; 18/12/2022
 31295 00002E79 E8A401                  	call	freeMCB	; (**)
 31296                                  
 31297                                  	; 12/12/2022
 31298                                  	; cf=0
 31299                                  	;clc
 31300                                  	; 18/12/2022
 31301                                  	;jmp	short smX
 31302                                  smE:	
 31303                                  	; 18/12/2022
 31304                                  	; cf=1 (*)
 31305                                  	;stc
 31306                                  smX:	
 31307                                  	;popreg	<es,cx,bx>
 31308 00002E7C 07                      	pop	es
 31309 00002E7D 59                      	pop	cx
 31310                                  	; 02/01/2023
 31311                                  	;pop	bx
 31312 00002E7E C3                      	retn
 31313                                  
 31314                                  ; -----------------------------------------------------------------------------
 31315                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 31316                                  ; -----------------------------------------------------------------------------
 31317                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 31318                                  ; EXIT:     None; UMB is hidden as necessary
 31319                                  ; ERROR:    None
 31320                                  ; USES:     Flags, AX, CX
 31321                                  ; -----------------------------------------------------------------------------
 31322                                  ; PRIMARY LOGIC:
 31323                                  ;
 31324                                  ; If the UMB is specified in the DH/LH statement, then:
 31325                                  ;    If the largest free segment is too small (check specified size), then:
 31326                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 31327                                  ;    Else, if largest free segment is LARGER than specified size, then:
 31328                                  ;       If /S was given on the command-line, then:
 31329                                  ;          Break that element into two pieces
 31330                                  ;          Set a flag that we're shrinking
 31331                                  ;       Endif
 31332                                  ;    Endif
 31333                                  ; Endif
 31334                                  ; If the UMB is NOT specified (or was removed by the above):
 31335                                  ;    Hide all free elements in the UMB
 31336                                  ;    If the flag that we're shrinking was set, then:
 31337                                  ;       UN-hide the lower portion of the shrunken UMB
 31338                                  ;    ENDIF
 31339                                  ; ENDIF
 31340                                  ; -----------------------------------------------------------------------------
 31341                                  
 31342                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31343                                  	; (SYSINIT:3426h)
 31344                                  _hideUMB_:
 31345                                  	; 02/01/2023
 31346                                  	; ds = cs
 31347                                  
 31348                                  	; 01/01/2023
 31349                                  	;push	bx
 31350                                  	;push	dx
 31351 00002E7F 06                      	push	es
 31352                                  
 31353 00002E80 88C8                    	mov	al,cl
 31354 00002E82 E8B1FF                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 31355 00002E85 742D                    	jz	short hu_20
 31356                                  
 31357 00002E87 88C8                    	mov	al,cl		; Retrieve the size of the largest
 31358 00002E89 E868FF                  	call	BigFree		; free element in AX; put its address in ES
 31359 00002E8C 7226                    	jc	short hu_20	; Oops. Errors mean skip this part.
 31360                                  
 31361 00002E8E 50                      	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 31362 00002E8F 88C8                    	mov	al,cl		; Retrieve the user's specified
 31363 00002E91 E8B0FE                  	call	GetSize		; minimum size for this umb (into AX)
 31364 00002E94 5B                      	pop	bx		; Now BX==BigFree, AX==Specified Size
 31365                                  
 31366 00002E95 09C0                    	or	ax,ax		; If they didn't specify one,
 31367 00002E97 741B                    	jz	short hu_20	; Skip over all this.
 31368                                  
 31369 00002E99 39D8                    	cmp	ax,bx		; Ah... if (specified > max free)
 31370 00002E9B 7607                    	jbe	short hu_10
 31371                                  
 31372 00002E9D 88C8                    	mov	al,cl		;  Then mark that UMB as unused. Nya nya.
 31373 00002E9F E814FD                  	call	unMarkUMB
 31374 00002EA2 EB10                    	jmp	short hu_20
 31375                                  hu_10:	
 31376                                  	;call	isTiny		; Returns ZF clear if user specified /S
 31377                                  	;jz	short hu_20
 31378                                  	; 02/01/2023
 31379                                  ;isTiny:
 31380                                  	;mov	al,[fUmbTiny] ; ds = cs
 31381                                  	;or	al,al
 31382 00002EA4 800E[721F]00            	or	byte [fUmbTiny],0
 31383 00002EA9 7409                    	jz	short hu_20
 31384                                  
 31385 00002EAB E894FF                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 31386 00002EAE 7204                    	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 31387                                  
 31388 00002EB0 8CC2                    	mov	dx,es
 31389 00002EB2 EB09                    	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 31390                                  
 31391 00002EB4 89C8                    hu_20:	mov	ax,cx
 31392 00002EB6 E87DFF                  	call	isSpecified	; If they specified this UMB, we're done...
 31393 00002EB9 7510                    	jnz	short hu_X	; so leave.
 31394                                  
 31395 00002EBB 31D2                    	xor	dx,dx
 31396                                  hu_30:	
 31397 00002EBD 88C8                    	mov	al,cl
 31398                                  
 31399 00002EBF E89CFE                  	call	hideUMB		; Hides everything in UMB #al
 31400                                  
 31401 00002EC2 09D2                    	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 31402 00002EC4 7405                    	jz	short hu_X	; So we should leave.
 31403                                  
 31404 00002EC6 8EC2                    	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 31405 00002EC8 E8E5FE                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 31406                                  hu_X:	
 31407 00002ECB 07                      	pop	es
 31408                                  	; 01/01/2023
 31409                                  	;pop	dx
 31410                                  	;pop	bx
 31411 00002ECC C3                      	retn
 31412                                  
 31413                                  ; -----------------------------------------------------------------------------
 31414                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 31415                                  ; -----------------------------------------------------------------------------
 31416                                  ; Entry:  None
 31417                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 31418                                  ; Error:  None
 31419                                  ; Uses:   Flags
 31420                                  ; -----------------------------------------------------------------------------
 31421                                  
 31422                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31423                                  UnFreeze:
 31424                                  	; 03/01/2023
 31425                                  	;push	ax
 31426 00002ECD 06                      	push	es
 31427                                  
 31428 00002ECE E8D8FD                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 31429 00002ED1 721A                    	jc	short ufX
 31430                                  
 31431                                  	; 22/07/2023
 31432                                  uf10:
 31433 00002ED3 8EC0                    	mov	es,ax ; *
 31434                                  
 31435                                  ; ------------------------------
 31436                                  ; UF10--ES - Current MCB address
 31437                                  ; ------------------------------
 31438                                  
 31439                                  ;uf10:	
 31440 00002ED5 E81700                  	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 31441 00002ED8 7503                    	jnz	short uf20
 31442 00002EDA E8D3FE                  	call	unHideMCB
 31443                                  uf20:	
 31444                                  	;mov	al,[es:ARENA.SIGNATURE]
 31445                                  	;cmp	al,arena_signature_end ; 'Z'
 31446                                  	; 22/07/2023
 31447 00002EDD 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31448 00002EE3 7408                    	jz	short ufX	; 'Z' means this was the last MCB.. that's it.
 31449                                  
 31450                                  	;NextMCB es,ax		; Go on forward.
 31451                                  	; 22/07/2023
 31452                                  	; ax = es
 31453                                  	;mov	ax,es ; *
 31454                                  	;add	ax,[es:3]
 31455 00002EE5 2603060300              	add	ax,[es:ARENA.SIZE]
 31456 00002EEA 40                      	inc	ax
 31457                                  	; 22/07/2023
 31458                                  	;mov	es,ax
 31459 00002EEB EBE6                    	jmp	short uf10
 31460                                  ufX:	
 31461 00002EED 07                      	pop	es
 31462                                  	; 03/01/2023
 31463                                  	;pop	ax
 31464 00002EEE C3                      	retn
 31465                                  
 31466                                  ; -----------------------------------------------------------------------------
 31467                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 31468                                  ; -----------------------------------------------------------------------------
 31469                                  ; ENTRY:    ES:0 should point to an MCB
 31470                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 31471                                  ; ERROR:    None
 31472                                  ; USES:     Flags
 31473                                  ; -----------------------------------------------------------------------------
 31474                                  
 31475                                  isFrozMCB:
 31476                                  	;push	ax
 31477                                  
 31478                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 31479                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 31480 00002EEF 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 31481 00002EF5 7522                    	jne	short ifmX
 31482                                  
 31483                                  	;mov	ax,[es:ARENA.NAME+0]
 31484                                  	;cmp	ax,'FR' ; 5246h
 31485 00002EF7 26813E08004652          	cmp	word [es:ARENA.NAME+0],'FR'
 31486 00002EFE 7519                    	jne	short ifmX
 31487                                  	;mov	ax,[es:ARENA.NAME+2]
 31488                                  	;cmp	ax,'OZ' ; 5A4Fh
 31489 00002F00 26813E0A004F5A          	cmp	word [es:ARENA.NAME+2],'OZ'
 31490 00002F07 7510                    	jne	short ifmX
 31491                                  	;mov	ax,[es:ARENA.NAME+4]
 31492                                  	;cmp	ax,'EN' ; 4E45h
 31493 00002F09 26813E0C00454E          	cmp	word [es:ARENA.NAME+4],'EN'
 31494 00002F10 7507                    	jne	short ifmX
 31495                                  	;mov	ax,[es:ARENA.NAME+6]
 31496                                  	;cmp	ax,'  ' ; 2020h
 31497 00002F12 26813E0E002020          	cmp	word [es:ARENA.NAME+6],'  '
 31498                                  ifmX:	
 31499                                  	;pop	ax
 31500 00002F19 C3                      	retn
 31501                                  
 31502                                  ; -----------------------------------------------------------------------------
 31503                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 31504                                  ; -----------------------------------------------------------------------------
 31505                                  ; ENTRY:    ES:0 should point to an MCB
 31506                                  ; EXIT:     None; MCB frozen
 31507                                  ; ERROR:    None
 31508                                  ; USES:     None
 31509                                  ; -----------------------------------------------------------------------------
 31510                                  
 31511                                  frezMCB:
 31512 00002F1A 26C70601000800          	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 31513 00002F21 26C70608004652          	mov	word [es:ARENA.NAME+0],'FR'
 31514 00002F28 26C7060A004F5A          	mov	word [es:ARENA.NAME+2],'OZ'
 31515 00002F2F 26C7060C00454E          	mov	word [es:ARENA.NAME+4],'EN'
 31516 00002F36 26C7060E002020          	mov	word [es:ARENA.NAME+6],'  '
 31517 00002F3D C3                      	retn
 31518                                  
 31519                                  ; -----------------------------------------------------------------------------
 31520                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 31521                                  ; -----------------------------------------------------------------------------
 31522                                  ; Entry:  None
 31523                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 31524                                  ; Error:  None
 31525                                  ; Uses:   Flags
 31526                                  ; -----------------------------------------------------------------------------
 31527                                  
 31528                                  	; 01/01/2023 - Retro DOS v4.2  
 31529                                  FreezeUM:
 31530                                  	; 01/01/2023
 31531                                  	;push	ax
 31532                                  	;push	cx
 31533                                  	;push	dx
 31534 00002F3E 06                      	push	es
 31535                                  
 31536                                  	;;call	GetLoadUMB
 31537                                  	; 01/01/2023
 31538                                  	; ds = cs
 31539                                  	;mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 31540 00002F3F A0[751F]                	mov	al,[UmbLoad] 	
 31541                                  
 31542 00002F42 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 31543 00002F44 89C2                    	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 31544                                  
 31545 00002F46 E860FD                  	call	UmbHead		; Returns first UMB segment in AX
 31546                                  	; 22/07/2023
 31547                                  	;mov	es,ax ; *
 31548 00002F49 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 31549                                  
 31550                                  	; 22/07/2023
 31551                                  fum10:
 31552 00002F4B 8EC0                    	mov	es,ax ; *
 31553                                  
 31554                                  ; -----------------------------------------
 31555                                  ; FUM10--ES - Current MCB address
 31556                                  ;        CX - Current UMB number
 31557                                  ;        DX - UMB number to skip (load UMB)
 31558                                  ; -----------------------------------------
 31559                                  
 31560                                  ;fum10:	
 31561 00002F4D E866FD                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 31562 00002F50 7501                    	jnz	short fum20
 31563                                  
 31564 00002F52 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 31565                                  fum20:	
 31566 00002F53 39D1                    	cmp	cx,dx		; If this is the load UMB, we don't want to
 31567 00002F55 740B                    	je	short fum30	; freeze anything... so skip that section.
 31568                                  
 31569                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 31570 00002F57 26830E010000            	or	word [es:ARENA.OWNER],0
 31571 00002F5D 7503                    	jnz	short fum30	; either.
 31572                                  
 31573 00002F5F E8B8FF                  	call	frezMCB
 31574                                  fum30:	
 31575                                  	;mov	al,[es:ARENA.SIGNATURE]
 31576                                  	;cmp	al,arena_signature_end ; 'Z'
 31577                                  	; 22/07/2023
 31578 00002F62 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31579 00002F68 7408                    	je	short fumX	; 'Z' means this was the last MCB.. that's it.
 31580                                  
 31581                                  	;NextMCB es, ax		; Go on forward.
 31582                                  	; 22/07/2023
 31583                                  	; ax = es
 31584                                  	;mov	ax,es
 31585                                  	;add	ax,[es:3]
 31586 00002F6A 2603060300              	add	ax,[es:ARENA.SIZE]
 31587 00002F6F 40                      	inc	ax
 31588                                  	; 22/07/2023
 31589                                  	;mov	es,ax ; *
 31590 00002F70 EBD9                    	jmp	short fum10
 31591                                  
 31592 00002F72 07                      fumX:	pop	es
 31593                                  	; 01/01/2023
 31594                                  	;pop	dx
 31595                                  	;pop	cx
 31596                                  	;pop	ax
 31597 00002F73 C3                      	retn
 31598                                  
 31599                                  ; -----------------------------------------------------------------------------
 31600                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 31601                                  ; -----------------------------------------------------------------------------
 31602                                  ; ENTRY:    None
 31603                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 31604                                  ; ERROR:    None
 31605                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 31606                                  ; -----------------------------------------------------------------------------
 31607                                  
 31608                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31609                                  UmbTest:
 31610                                  	; 01/01/2023
 31611                                  	;push	ax
 31612 00002F74 53                      	push	bx ; *
 31613                                  	;push	ds
 31614 00002F75 06                      	push	es ; **
 31615                                  
 31616                                  	; 01/01/2023
 31617                                  	; ds = cs
 31618                                  
 31619 00002F76 E86AFB                  	call	fm_link			; Link in UMBs (if not already linked)
 31620 00002F79 E80800                  	call	WalkMem			; Check to see if they're really linked
 31621 00002F7C 9C                      	pushf				; And remember what we found out
 31622 00002F7D E874FB                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 31623 00002F80 9D                      	popf				; And restore what we found out.
 31624                                  
 31625 00002F81 07                      	pop	es ; **
 31626                                  	; 01/01/2023
 31627                                  	;pop	ds
 31628 00002F82 5B                      	pop	bx ; *
 31629                                  	;pop	ax
 31630 00002F83 C3                      	retn
 31631                                  
 31632                                  ; -----------------------------------------------------------------------------
 31633                                  ;*** WalkMem - travels memory chain and returns carry clear if UMBs are linked
 31634                                  ; -----------------------------------------------------------------------------
 31635                                  ; ENTRY:    None
 31636                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 31637                                  ; ERROR:    None
 31638                                  ; USES:     Flags
 31639                                  ; -----------------------------------------------------------------------------
 31640                                  
 31641                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31642                                  	; (SYSINIT:3541h)
 31643                                  
 31644                                  WalkMem:
 31645                                  	;push	ax ; ?
 31646                                  	;push	bx ; ?
 31647                                  	;;push	ds ; ? ; 01/01/2023 (MSDOS 6.21 IO.SYS, SYSINIT:352Fh)
 31648                                  	;push	es ; ? no need to save contents of these registers ?
 31649                                  		   	
 31650 00002F84 B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 31651 00002F86 CD21                    	int	21h
 31652                                  
 31653 00002F88 268B47FE                	mov	ax,[es:bx-2]
 31654                                  	; 22/07/2023
 31655                                  um10:
 31656 00002F8C 8EC0                    	mov	es,ax ; * ; **
 31657                                  
 31658                                  ; ------------------------------
 31659                                  ; UM10: ES = Current MCB pointer
 31660                                  ; ------------------------------
 31661                                  
 31662                                  ;um10:
 31663                                  	;mov	al,[es:ARENA.SIGNATURE]
 31664                                  	;cmp	al,arena_signature_end ; 'Z'
 31665                                  	; 22/07/2023
 31666 00002F8E 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31667 00002F94 7408                    	je	short um20		; If signature == 'Z', hay no more.
 31668                                  
 31669                                  	;NextMCB es,bx			; Move to the next MCB
 31670                                  
 31671                                  	;mov	bx,es
 31672                                  	;;add	bx,[es:3]
 31673                                  	;add	bx,[es:ARENA.SIZE]
 31674                                  	;inc	bx
 31675                                  	;mov	es,bx
 31676                                  	; 22/07/2023
 31677                                  	; ax = es
 31678                                  	;mov	ax,es ; *
 31679 00002F96 2603060300              	add	ax,[es:ARENA.SIZE]
 31680 00002F9B 40                      	inc	ax
 31681                                  	;mov	es,ax ; **
 31682                                  	
 31683 00002F9C EBEE                    	jmp	short um10		; And restart the loop.
 31684                                  um20:	
 31685                                  	; 22/07/2023
 31686                                  	; ax = es
 31687                                  	;mov	ax,es
 31688                                  
 31689 00002F9E 3DFF9F                  	cmp	ax,9FFFh		; This sets CF if ax < 9FFF.
 31690                                  
 31691                                  	;pop	es ; ?
 31692                                  	;;pop	ds ; ? ; 01/01/2023 (MSDOS 6.21 IO.SYS, SYSINIT:353Dh)
 31693                                  	;pop	bx ; ?
 31694                                  	;pop	ax ; ?
 31695                                  	
 31696 00002FA1 C3                      	retn
 31697                                  
 31698                                  ; -----------------------------------------------------------------------------
 31699                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 31700                                  ; -----------------------------------------------------------------------------
 31701                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 31702                                  ; EXIT:     None
 31703                                  ; ERROR:    None
 31704                                  ; USES:     AX, BX
 31705                                  ; -----------------------------------------------------------------------------
 31706                                  
 31707                                  	; 01/01/2023 - Retro DOS v4.2
 31708                                  hl_unlink:
 31709 00002FA2 30FF                    	xor	bh,bh
 31710                                  
 31711                                  	;getdata bl,fm_umb		; Restore original link-state
 31712                                  	;
 31713                                  	;push	ds
 31714                                  	;push	cs
 31715                                  	;pop	ds
 31716                                  	;mov	bl,[fm_umb]
 31717                                  	;pop	ds
 31718                                  
 31719                                  	; 01/01/2023
 31720                                  	; ds = cs
 31721                                  	;mov	bl,[cs:fm_umb]
 31722 00002FA4 8A1E[A61F]              	mov	bl,[fm_umb]
 31723                                  
 31724 00002FA8 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 31725 00002FAB CD21                    	int	21h
 31726 00002FAD C3                      	retn
 31727                                  
 31728                                  ; ----------------------------------------------------------------------
 31729                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 31730                                  ; ----------------------------------------------------------------------
 31731                                  ; 09/04/2019 - Retro DOS v4.0
 31732                                  
 31733                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 31734                                  ;   Date:     May 14, 1992
 31735                                  
 31736                                  ;   Modification log:
 31737                                  ;
 31738                                  ;     DATE    WHO      DESCRIPTION
 31739                                  ;   --------  -------  --------------------------------------------------------
 31740                                  ;   05/14/92  t-richj  Original
 31741                                  ;   06/21/92  t-richj  Final revisions before check-in
 31742                                  
 31743                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 31744                                  
 31745                                  ; -----------------------------------------------------------------------------
 31746                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 31747                                  ; -----------------------------------------------------------------------------
 31748                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 31749                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 31750                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 31751                                  ; ERROR:  None
 31752                                  ; USES:   fInHigh (from highvar.inc), carry flag
 31753                                  ; -----------------------------------------------------------------------------
 31754                                  
 31755                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31756                                  	; (SYSINIT:357Bh)
 31757                                  
 31758                                  UnHideUMBs:
 31759 00002FAE 50                      	push	ax		; Save ax for what we're about to do
 31760                                  
 31761                                  ; -----------------------------------------------------------------------------
 31762                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 31763                                  ;    length of time. Those six constitute a check of whether or not we should
 31764                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 31765                                  ;    will destroy the current link-state and memory-allocation strategy after
 31766                                  ;    every command execution.
 31767                                  ; -----------------------------------------------------------------------------
 31768                                  
 31769                                  	;getdata al,fInHigh	; Get InHigh from data segment
 31770                                  	;
 31771                                  	;push	ds
 31772                                  	;push	cs
 31773                                  	;pop	ds
 31774                                  	;mov	al,[fInHigh]
 31775                                  	;pop	ds	
 31776                                  
 31777                                  	;mov	al,[cs:fInHigh]
 31778                                  	; 31/12/2022
 31779                                  	; ds = cs
 31780 00002FAF A0[711F]                	mov	al,[fInHigh]	
 31781                                  
 31782 00002FB2 08C0                    	or	al,al
 31783 00002FB4 7503                    	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 31784                                  
 31785 00002FB6 58                      	pop	ax		; then there's nothing to do here... so
 31786 00002FB7 F9                      	stc			; restore everything and return. Just like
 31787 00002FB8 C3                      	retn			; that.
 31788                                  uhu10:	
 31789 00002FB9 E88C00                  	call	linkumb		; Make sure UMBs are linked in.
 31790 00002FBC E81200                  	call	FreeUMBs
 31791                                  
 31792                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 31793                                  	;
 31794                                  	;push	es
 31795                                  	;push	cs
 31796                                  	;pop	es
 31797                                  	;mov	byte [es:fInHigh],0
 31798                                  	;pop	ds
 31799                                  
 31800                                  	; 31/12/2022
 31801                                  	; ds = cs	
 31802                                  	;mov	byte [cs:fInHigh],0
 31803 00002FBF C606[711F]00            	mov	byte [fInHigh],0
 31804                                  
 31805                                  	;call	he_unlink	; Unlink UMBs
 31806                                  	; 31/12/2022
 31807                                  ;;he_unlink:			; unlinks UMBs if fm_umb is set to 0
 31808 00002FC4 30FF                    	xor	bh,bh
 31809                                  
 31810                                  	;getdata bl,fm_umb	; Restore original link-state
 31811                                  	;mov	bl,[cs:fm_umb]	
 31812 00002FC6 8A1E[A61F]              	mov	bl,[fm_umb]
 31813                                  
 31814 00002FCA B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 31815 00002FCD CD21                    	int	21h
 31816                                  	;;retn
 31817                                  
 31818 00002FCF 58                      	pop	ax
 31819                                  	; 12/12/2022
 31820                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 31821 00002FD0 C3                      	retn
 31822                                  
 31823                                  ; 31/12/2022
 31824                                  ;%if 0
 31825                                  ;
 31826                                  ;; -----------------------------------------------------------------------------
 31827                                  ;;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 31828                                  ;; -----------------------------------------------------------------------------
 31829                                  ;; ENTRY:    fm_umb == 1 : leave linked, else unlink
 31830                                  ;; EXIT:     None
 31831                                  ;; ERROR:    None
 31832                                  ;; USES:     AX, BX
 31833                                  ;; -----------------------------------------------------------------------------
 31834                                  ;
 31835                                  ;he_unlink:
 31836                                  ;	xor	bh, bh
 31837                                  ;
 31838                                  ;	;getdata bl, fm_umb	; Restore original link-state
 31839                                  ;	mov	bl,[cs:fm_umb]	
 31840                                  ;
 31841                                  ;	mov	ax,DOS_SET_UMBLINK ; 5803h
 31842                                  ;	int	21h
 31843                                  ;	retn
 31844                                  ;
 31845                                  ;%endif
 31846                                  
 31847                                  ; -----------------------------------------------------------------------------
 31848                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 31849                                  ; -----------------------------------------------------------------------------
 31850                                  ; ENTRY:    None
 31851                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 31852                                  ; ERROR:    None (ignore CF)
 31853                                  ; USES:     Flags
 31854                                  ; -----------------------------------------------------------------------------
 31855                                  
 31856                                  FreeUMBs:
 31857 00002FD1 50                      	push	ax
 31858 00002FD2 06                      	push	es
 31859                                  
 31860 00002FD3 E86500                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 31861 00002FD6 721A                    	jc	short fusX
 31862                                  fus10:
 31863 00002FD8 8EC0                    	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 31864                                  ;fus10:	
 31865 00002FDA E81800                  	call	isHideMCB	; Returns with ZF set if owner is 0
 31866 00002FDD 7503                    	jnz	short fus20
 31867 00002FDF E83E00                  	call	freeMCB
 31868                                  fus20:	   
 31869                                  	;mov	al,[es:ARENA.SIGNATURE]
 31870                                  	;cmp	al,arena_signature_end ; 'Z'
 31871                                  	; 22/07/2023
 31872 00002FE2 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31873 00002FE8 7408                    	jz	short fusX	; That means this was the last MCB--that's it.
 31874                                  	
 31875                                  	; 22/07/2023
 31876                                  	; ax = es
 31877                                  	;mov	ax,es
 31878 00002FEA 2603060300              	add	ax,[es:ARENA.SIZE]
 31879 00002FEF 40                      	inc	ax
 31880                                  	; 22/07/2023
 31881                                  	;mov	es,ax
 31882 00002FF0 EBE6                    	jmp	short fus10	; Go on forward.
 31883                                  fusX:	
 31884 00002FF2 07                      	pop	es
 31885 00002FF3 58                      	pop	ax
 31886 00002FF4 C3                      	retn
 31887                                  
 31888                                  ; -----------------------------------------------------------------------------
 31889                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 31890                                  ; -----------------------------------------------------------------------------
 31891                                  ; ENTRY:    ES:0 should point to an MCB
 31892                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 31893                                  ; ERROR:    None
 31894                                  ; USES:     Flags
 31895                                  ; -----------------------------------------------------------------------------
 31896                                  
 31897                                  isHideMCB:
 31898                                  	;push	ax
 31899                                  
 31900 00002FF5 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 31901 00002FFB 7522                    	jne	short ihm_x			     ; then check for HIDDEN
 31902                                  
 31903                                  	;mov	ax,[es:ARENA.NAME]
 31904                                  	;cmp	ax,'HI' ; 4948h
 31905 00002FFD 26813E08004849          	cmp	word [es:ARENA.NAME+0],'HI'
 31906 00003004 7519                    	jne	short ihm_x
 31907                                  	;mov	ax,[es:ARENA.NAME+2]
 31908                                  	;cmp	ax,'DD' ; 4444h
 31909 00003006 26813E0A004444          	cmp	word [es:ARENA.NAME+2],'DD'
 31910 0000300D 7510                    	jne	short ihm_x
 31911                                  	;mov	ax,[es:ARENA.NAME+4]
 31912                                  	;cmp	ax,'EN' ; 4E45h
 31913 0000300F 26813E0C00454E          	cmp	word [es:ARENA.NAME+4],'EN'
 31914 00003016 7507                    	jne	short ihm_x
 31915                                  	;mov	ax,[es:ARENA.NAME+6]
 31916                                  	;cmp	ax,'  ' ; 2020h
 31917 00003018 26813E0E002020          	cmp	word [es:ARENA.NAME+6],'  '
 31918                                  ihm_x:	
 31919                                  	;pop	ax
 31920 0000301F C3                      	retn
 31921                                  
 31922                                  ; -----------------------------------------------------------------------------
 31923                                  ;*** freeMCB - marks as free the MCB at ES:0
 31924                                  ; -----------------------------------------------------------------------------
 31925                                  ; ENTRY:    ES:0 should point to an MCB
 31926                                  ; EXIT:     None; MCB free'd
 31927                                  ; ERROR:    None
 31928                                  ; USES:     AX
 31929                                  ; -----------------------------------------------------------------------------
 31930                                  
 31931                                  freeMCB:
 31932 00003020 26C70601000000          	mov	word [es:ARENA.OWNER],0
 31933 00003027 B82020                  	mov	ax,'  ' ; mov ax,2020h ; 31/12/2022
 31934 0000302A 26A30800                	mov	[es:ARENA.NAME+0],ax
 31935 0000302E 26A30A00                	mov	[es:ARENA.NAME+2],ax
 31936 00003032 26A30C00                	mov	[es:ARENA.NAME+4],ax
 31937 00003036 26A30E00                	mov	[es:ARENA.NAME+6],ax
 31938 0000303A C3                      	retn
 31939                                  
 31940                                  ; -----------------------------------------------------------------------------
 31941                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 31942                                  ; -----------------------------------------------------------------------------
 31943                                  ; ENTRY:  Nothing
 31944                                  ; EXIT:   AX contains 0x9FFF for most systems
 31945                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 31946                                  ; USES:   Flags, AX
 31947                                  ; -----------------------------------------------------------------------------
 31948                                  
 31949                                  HeadUmb:
 31950                                  	; 13/05/2019
 31951                                  
 31952                                  	;push	si ; ?
 31953                                  	;push	ds ; ?
 31954                                  	;push	es
 31955                                  	;push	bx ; *
 31956                                  
 31957                                  	; 09/04/2019
 31958                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 31959                                  
 31960 0000303B B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 31961 0000303D CD21                    	int	21h
 31962                                  			; DOS - 2+ internal - GET LIST OF LISTS
 31963                                  			; Return: ES:BX -> DOS list of lists
 31964                                  	;mov	ax,[es:8Ch]
 31965 0000303F 26A18C00                	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 31966 00003043 83F8FF                  	cmp	ax,0FFFFh
 31967                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 31968                                  
 31969                                  	;clc				; Else, it isn't.
 31970                                  	;jmp	short xhu_x
 31971                                  xhu_e:	
 31972                                  	;stc
 31973 00003046 F5                      	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 31974                                  xhu_x:	
 31975                                  	;pop	bx ; *
 31976                                  	;pop	es	
 31977                                  	;pop	ds ; ?
 31978                                  	;pop	si ; ?
 31979 00003047 C3                      	retn
 31980                                  
 31981                                  ; -----------------------------------------------------------------------------
 31982                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 31983                                  ; -----------------------------------------------------------------------------
 31984                                  ; ENTRY:    None
 31985                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 31986                                  ; ERROR:    None
 31987                                  ; USES:     AX, BX, fm_umb
 31988                                  ; -----------------------------------------------------------------------------
 31989                                  
 31990                                  linkumb:
 31991 00003048 B80258                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 31992 0000304B CD21                    	int	21h			; Current link-state is now in al
 31993                                  
 31994 0000304D 08C0                    	or	al,al			; BUGBUG: proper check?
 31995 0000304F 7508                    	jnz	short lumbX		; Jumps if UMBs already linked in
 31996                                  
 31997 00003051 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 31998 00003054 BB0100                  	mov	bx,1
 31999 00003057 CD21                    	int	21h
 32000                                  lumbX:
 32001 00003059 C3                      	retn
 32002                                  
 32003                                  ;%endif
 32004                                  
 32005                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32006                                  ; (SYSINIT:2B5Fh)
 32007                                  
 32008                                  ; ----------------------------------------------------------------------
 32009                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 32010                                  ; ----------------------------------------------------------------------
 32011                                  ; 09/04/2019 - Retro DOS v4.0
 32012                                  
 32013                                  ;----------------------------------------------------------------------------
 32014                                  ;
 32015                                  ; procedure : InitDevLoad
 32016                                  ;
 32017                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 32018                                  ;			 = 1 indicates load in UMB:
 32019                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 32020                                  ;		                    = 1 indicates a DOS 5-style load
 32021                                  ;		DevSize  = Size of the device driver file in paras
 32022                                  ;
 32023                                  ;	Output : none
 32024                                  ;
 32025                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 32026                                  ;	Also sets up a header for the Device driver entry for mem utility
 32027                                  ;
 32028                                  ;----------------------------------------------------------------------------
 32029                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 32030                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 32031                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 32032                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 32033                                  ;----------------------------------------------------------------------------
 32034                                  
 32035                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32036                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32037                                  	; (SYSINIT:364Ah)
 32038                                  InitDevLoad:
 32039                                  	; 01/01/2023
 32040                                  	;push	es ; *
 32041                                  
 32042                                  	; 11/12/2022
 32043                                  	; ds = cs
 32044 0000305A 803E[C71F]00            	cmp	byte [DeviceHi],0
 32045                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 32046                                  	;je	short InitForLo		; no, init for lo mem
 32047 0000305F 7439                    	je	short initforlo_x ; 09/04/2019
 32048                                  
 32049                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32050                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32051                                  ; %if 0
 32052                                  	; 01/01/2023
 32053 00003061 803E[B71F]01            	cmp	byte [ConvLoad],1
 32054                                  	;cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 32055 00003066 7413                    	je	short InitForConv
 32056                                  
 32057                                  ; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 32058                                  ; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 32059                                  ; any areas left in upper-memory, except for elements in the load UMB...
 32060                                  ; we then malloc space as per Dos-5 style, and mark as free any spaces which
 32061                                  ; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 32062                                  ; and UnHideUMBs later on marks all 8+HIDDEN as free.
 32063                                  
 32064 00003068 E86904                  	call	ShrinkUMB		; Stop using the old device arena
 32065                                  
 32066 0000306B E899FC                  	call	HideUMBs		; Mark up the UM area as we see fit
 32067 0000306E E8CDFE                  	call	FreezeUM		; Hide everything BUT the load area
 32068 00003071 E85700                  	call	GetUMBForDev		; And grab that load area as needed
 32069 00003074 9C                      	pushf
 32070 00003075 E855FE                  	call	UnFreeze		; Then unhide everything frozen
 32071 00003078 9D                      	popf
 32072                                  	;jc	short InitForLo		; (if carry, it's loading low)
 32073                                  	;jmp	short InitForHi
 32074                                  	; 06/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 32075 00003079 EB0B                    	jmp	short idl0
 32076                                  
 32077                                  ;%endif ; 01/11/2022
 32078                                  
 32079                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32080                                  	; (SYSINIT:2B67h)
 32081                                  InitForConv:
 32082                                  	; 11/12/2022
 32083                                  	; ds = cs
 32084 0000307B E83700                  	call	SpaceInUMB		; Do we have space left in the
 32085                                  					;  current UMB ?
 32086 0000307E 7308                    	jnc	short InitForHi		; yes, we have
 32087 00003080 E85104                  	call	ShrinkUMB		; shrink the current UMB in use
 32088 00003083 E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 32089                                  idl0: ; 06/07/2023
 32090 00003086 720D                    	jc	short InitForLo		; we didn't succeed, so load
 32091                                  					;  in low memory
 32092                                  InitForHi:
 32093                                  	; 11/12/2022
 32094                                  	; ds = cs
 32095                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 32096                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 32097                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 32098 00003088 A1[BD1F]                	mov	ax,[DevUMBFree]
 32099 0000308B 8B16[B91F]              	mov	dx,[DevUMBAddr]
 32100 0000308F 0316[BB1F]              	add	dx,[DevUMBSize]
 32101 00003093 EB0C                    	jmp	short idl1
 32102                                  
 32103                                  InitForLo:
 32104                                  	; 11/12/2022
 32105                                  	; ds = cs
 32106                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 32107 00003095 C606[C71F]00            	mov	byte [DeviceHi],0
 32108                                  initforlo_x:
 32109                                  	; 11/12/2022
 32110                                  	; ds = cs
 32111                                  					;  into UMB indicate that
 32112                                  					;  we are loading low
 32113                                  	;mov	ax,[cs:memhi]		; AX = Start of Low memory
 32114                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 32115 0000309A A1[6203]                	mov	ax,[memhi]
 32116 0000309D 8B16[A302]              	mov	dx,[ALLOCLIM]
 32117                                  idl1:
 32118 000030A1 E86C00                  	call	DevSetMark		; setup a sub-arena for DD
 32119                                  	; 11/12/2022
 32120                                  	; ds = cs
 32121                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 32122                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 32123                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 32124                                  	;mov	[cs:DevEntry+2],ax
 32125 000030A4 A3[AB1F]                	mov	[DevLoadAddr],ax
 32126 000030A7 8916[AD1F]              	mov	[DevLoadEnd],dx
 32127 000030AB C706[AF1F]0000          	mov	word [DevEntry],0
 32128 000030B1 A3[B11F]                	mov	[DevEntry+2],ax
 32129                                  	; 01/01/2023
 32130                                  	;pop	es ; *
 32131 000030B4 C3                      	retn
 32132                                  
 32133                                  ;----------------------------------------------------------------------------
 32134                                  ;
 32135                                  ; procedure : SpaceInUMB?
 32136                                  ;
 32137                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 32138                                  ;	Output : Carry set if no space in UMB
 32139                                  ;		 Carry clear if Space is available for the device in
 32140                                  ;		   current UMB
 32141                                  ;
 32142                                  ;----------------------------------------------------------------------------
 32143                                  
 32144                                  SpaceInUMB:
 32145                                  	; 11/12/2022
 32146                                  	; ds = cs
 32147                                  	;mov	ax,[cs:DevUMBSize]
 32148                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 32149                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 32150 000030B5 A1[BB1F]                	mov	ax,[DevUMBSize]
 32151 000030B8 0306[B91F]              	add	ax,[DevUMBAddr]		; End of UMB
 32152 000030BC 2B06[BD1F]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 32153                                  	; 11/12/2022
 32154                                  	;or	ax,ax			; Nospace ?
 32155                                  	;jnz	short spcinumb1
 32156                                  	;stc
 32157                                  	;retn
 32158                                  	; 11/12/2022
 32159 000030C0 83F801                  	cmp	ax,1
 32160 000030C3 7205                    	jb	short spcinumb2	; cf=1
 32161                                  spcinumb1:
 32162 000030C5 48                      	dec	ax			; space for sub-arena
 32163                                  	; 11/12/2022
 32164                                  	; ds = cs
 32165 000030C6 3B06[A91F]              	cmp	ax,[DevSize]
 32166                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 32167                                  spcinumb2:
 32168 000030CA C3                      	retn
 32169                                  
 32170                                  ;----------------------------------------------------------------------------
 32171                                  ;
 32172                                  ; procedure : PrepareMark
 32173                                  ;
 32174                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 32175                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 32176                                  ;
 32177                                  ;----------------------------------------------------------------------------
 32178                                  
 32179                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32180                                  ;
 32181                                  ;PrepareMark:
 32182                                  ;	push	ds
 32183                                  ;	mov	ds,ax
 32184                                  ;	mov	word [ARENA.OWNER],8
 32185                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 32186                                  ;	pop	ds
 32187                                  ;
 32188                                  ;	inc	ax
 32189                                  ;	mov	[cs:DevUMBAddr],ax
 32190                                  ;	mov	[cs:DevUMBFree],ax
 32191                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 32192                                  ;	retn
 32193                                  
 32194                                  ;----------------------------------------------------------------------------
 32195                                  ;
 32196                                  ; procedure : GetUMBForDev
 32197                                  ;
 32198                                  ;	Input : DevSize
 32199                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 32200                                  ;		 the device.
 32201                                  ;		 If success carry clear
 32202                                  ;
 32203                                  ;	Allocates the biggest UMB for loading devices and updates
 32204                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 32205                                  ;	UMB.
 32206                                  ;
 32207                                  ;	This routine relies on the fact that all of the low memory
 32208                                  ;	is allocated, and any DOS alloc calls should return memory
 32209                                  ;	from the UMB pool.
 32210                                  ;
 32211                                  ;----------------------------------------------------------------------------
 32212                                  
 32213                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32214                                  	; (SYSINIT:2BC6h)
 32215                                  
 32216                                  GetUMBForDev:
 32217                                  	; 11/12/2022
 32218                                  	; ds = cs
 32219 000030CB BBFFFF                  	mov	bx,0FFFFh
 32220 000030CE B80048                  	mov	ax,4800h
 32221 000030D1 CD21                    	int	21h
 32222                                  		; DOS - 2+ - ALLOCATE MEMORY
 32223                                  		; BX = number of 16-byte paragraphs desired
 32224                                  
 32225 000030D3 09DB                    	or	bx,bx
 32226 000030D5 742C                    	jz	short gufd_err
 32227                                  
 32228 000030D7 4B                      	dec	bx
 32229                                  	; 11/12/2022
 32230                                  	; ds = cs
 32231 000030D8 391E[A91F]              	cmp	[DevSize],bx
 32232                                  	;cmp	[cs:DevSize],bx
 32233 000030DC 7725                    	ja	short gufd_err
 32234 000030DE 43                      	inc	bx
 32235                                  
 32236 000030DF B80048                  	mov	ax,4800h
 32237 000030E2 CD21                    	int	21h
 32238 000030E4 721D                    	jc	short gufd_err
 32239                                  
 32240                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32241                                  	;dec	ax
 32242                                  	;call	PrepareMark
 32243                                  	;
 32244                                  PrepareMark:
 32245 000030E6 1E                      	push	ds
 32246 000030E7 48                      	dec	ax
 32247 000030E8 8ED8                    	mov	ds,ax
 32248 000030EA C70601000800            	mov	word [ARENA.OWNER],8
 32249 000030F0 C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 32250 000030F6 40                      	inc	ax
 32251 000030F7 1F                      	pop	ds
 32252                                  	; 11/12/2022
 32253                                  	; ds = cs
 32254                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 32255                                  	;mov	[cs:DevUMBAddr],ax
 32256                                  	;mov	[cs:DevUMBFree],ax
 32257 000030F8 891E[BB1F]              	mov	[DevUMBSize],bx		; update the UMB Variables
 32258 000030FC A3[B91F]                	mov	[DevUMBAddr],ax
 32259 000030FF A3[BD1F]                	mov	[DevUMBFree],ax
 32260                                  	;
 32261                                  	; 11/12/2022
 32262                                  	; cf=0
 32263                                  	;clc				; mark no error
 32264 00003102 C3                      	retn
 32265                                  gufd_err:
 32266 00003103 31C0                    	xor	ax,ax ; 0
 32267                                  	; 11/12/2022
 32268                                  	; ds = cs
 32269                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 32270                                  	;mov	[cs:DevUMBAddr],ax
 32271                                  	;mov	[cs:DevUMBFree],ax
 32272 00003105 A3[BB1F]                	mov	[DevUMBSize],ax		; erase the previous values
 32273 00003108 A3[B91F]                	mov	[DevUMBAddr],ax
 32274 0000310B A3[BD1F]                	mov	[DevUMBFree],ax
 32275 0000310E F9                      	stc
 32276 0000310F C3                      	retn
 32277                                  
 32278                                  ;----------------------------------------------------------------------------
 32279                                  ;
 32280                                  ; procedure : DevSetMark
 32281                                  ;
 32282                                  ;	Input : AX - Free segment were device is going to be loaded
 32283                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 32284                                  ;
 32285                                  ;	Creates a sub-arena for the device driver
 32286                                  ;	puts 'D' marker in the sub-arena
 32287                                  ;	Put the owner of the sub-arena as (AX+1)
 32288                                  ;	Copies the file name into sub-arena name field
 32289                                  ;
 32290                                  ;	Size field of the sub-arena will be set only at succesful
 32291                                  ;	completion of Device load.
 32292                                  ;
 32293                                  ;----------------------------------------------------------------------------
 32294                                  
 32295                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32296                                  	; (SYSINIT:2C13h)
 32297                                  
 32298                                  DevSetMark:
 32299 00003110 06                      	push	es
 32300                                  	; 03/01/2023
 32301                                  	;push	di
 32302 00003111 1E                      	push	ds
 32303 00003112 56                      	push	si
 32304 00003113 8EC0                    	mov	es,ax
 32305 00003115 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 32306 0000311B 40                      	inc	ax
 32307 0000311C 26A30100                	mov	[es:devmark.seg],ax
 32308                                  
 32309                                  ;-------------- Copy file name
 32310                                  
 32311 00003120 50                      	push	ax			; save load address
 32312 00003121 2EC536[7A03]            	lds	si,[cs:bpb_addr]	; command line is still there
 32313                                  
 32314 00003126 89F7                    	mov	di,si
 32315 00003128 FC                      	cld
 32316                                  dsm_again:
 32317 00003129 AC                      	lodsb
 32318 0000312A 3C3A                    	cmp	al,':'
 32319 0000312C 7504                    	jne	short isit_slash
 32320 0000312E 89F7                    	mov	di,si
 32321 00003130 EBF7                    	jmp	short dsm_again
 32322                                  isit_slash:
 32323 00003132 3C5C                    	cmp	al,'\'
 32324 00003134 7504                    	jne	short isit_null
 32325 00003136 89F7                    	mov	di,si
 32326 00003138 EBEF                    	jmp	short dsm_again
 32327                                  isit_null:
 32328 0000313A 08C0                    	or	al,al
 32329 0000313C 75EB                    	jnz	short dsm_again
 32330 0000313E 89FE                    	mov	si,di
 32331                                  
 32332 00003140 BF0800                  	mov	di,devmark.filename ; 8
 32333 00003143 B90800                  	mov	cx,8			; maximum 8 characters
 32334                                  dsm_next_char:
 32335 00003146 AC                      	lodsb
 32336 00003147 08C0                    	or	al,al
 32337 00003149 7407                    	jz	short blankout
 32338 0000314B 3C2E                    	cmp	al,'.'
 32339 0000314D 7403                    	je	short blankout
 32340 0000314F AA                      	stosb
 32341 00003150 E2F4                    	loop	dsm_next_char
 32342                                  blankout:
 32343 00003152 E304                    	jcxz	dsm_exit
 32344 00003154 B020                    	mov	al,' '
 32345 00003156 F3AA                    	rep	stosb			; blank out the rest
 32346                                  dsm_exit:
 32347 00003158 58                      	pop	ax			; restore load address
 32348 00003159 5E                      	pop	si
 32349 0000315A 1F                      	pop	ds
 32350                                  	; 03/01/2023
 32351                                  	;pop	di
 32352 0000315B 07                      	pop	es
 32353 0000315C C3                      	retn
 32354                                  
 32355                                  ;----------------------------------------------------------------------------
 32356                                  ;
 32357                                  ; procedure : SizeDevice
 32358                                  ;
 32359                                  ;	Input : ES:SI - points to device file to be sized
 32360                                  ;
 32361                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 32362                                  ;
 32363                                  ;	Calculates the size of the device file in paras and stores it
 32364                                  ;	in DevSize
 32365                                  ;
 32366                                  ;----------------------------------------------------------------------------
 32367                                  
 32368                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32369                                  SizeDevice:
 32370                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32371                                  	; 11/12/2022 ; *
 32372 0000315D 1E                      	push	ds ; *
 32373 0000315E 06                      	push	es
 32374 0000315F 1F                      	pop	ds
 32375 00003160 89F2                    	mov	dx,si			; ds:dx -> file name
 32376 00003162 B8003D                  	mov	ax,3D00h		; open
 32377 00003165 CD21                    	int	21h
 32378 00003167 7237                    	jc	short sd_err		; open failed
 32379                                  
 32380 00003169 89C3                    	mov	bx,ax			; BX - file handle
 32381 0000316B B80242                  	mov	ax,4202h		; seek
 32382 0000316E 31C9                    	xor	cx,cx
 32383 00003170 89CA                    	mov	dx,cx			; to end of file
 32384 00003172 CD21                    	int	21h
 32385 00003174 7223                    	jc	short sd_close		; did seek fail (impossible)
 32386 00003176 83C00F                  	add	ax,15			; para convert
 32387 00003179 83D200                  	adc	dx,0
 32388 0000317C F7C2F0FF                	test	dx,0FFF0h		; size > 0ffffh paras ?
 32389                                  	;jz	short szdev1		; no
 32390                                  	; 22/07/2023
 32391 00003180 7409                    	jz	short sd_ctp
 32392 00003182 2EC706[A91F]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 32393                                  					; assuming that we fail later
 32394 00003189 EB0E                    	jmp	short sd_close
 32395                                  sd_ctp:	
 32396                                  	; 22/07/2023
 32397                                  ;szdev1:
 32398 0000318B B104                    	mov	cl,4			; convert it to paras
 32399 0000318D D3E8                    	shr	ax,cl
 32400 0000318F B10C                    	mov	cl,12
 32401 00003191 D3E2                    	shl	dx,cl
 32402 00003193 09D0                    	or	ax,dx ; * ; cf=0
 32403                                  	;
 32404                                  	; 22/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 32405                                  	; MSDOS 6.22 IO:SYS - SYSINIT:37A6h 
 32406                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32407                                  	;cmp	ax,[cs:DevSizeOption]
 32408                                  	;ja	short szdev2
 32409                                  	;mov	ax,[cs:DevSizeOption]
 32410                                  	; 12/12/2022
 32411                                  	;clc
 32412                                  ;szdev2:
 32413 00003195 2EA3[A91F]              	mov	[cs:DevSize],ax		; save file size (in paragraps)
 32414                                  	; 22/07/2023
 32415                                  	;clc ; cf=0 ; *	; CLC is not needed here
 32416                                  			; (OR instruction clears CF) - E.TAN 22/07/2023
 32417                                  
 32418                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32419                                  	; 12/12/2022
 32420                                  	; cf=0
 32421                                  	;clc
 32422                                  sd_close:
 32423 00003199 9C                      	pushf				; let close not spoil our
 32424                                  					;  carry flag
 32425 0000319A B8003E                  	mov	ax,3E00h		; close
 32426 0000319D CD21                    	int	21h			; we are not checking for err
 32427 0000319F 9D                      	popf
 32428                                  sd_err:
 32429                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32430                                  	; 11/12/2022 ; *
 32431 000031A0 1F                      	pop     ds ; *
 32432 000031A1 C3                      	retn
 32433                                  
 32434                                  ;----------------------------------------------------------------------------
 32435                                  ;
 32436                                  ; procedure : ExecDev
 32437                                  ;
 32438                                  ;	Input : ds:dx -> device to be executed
 32439                                  ;		DevLoadAddr - contains where device has to be loaded
 32440                                  ;
 32441                                  ;	Output : Carry if error
 32442                                  ;		 Carry clear if no error
 32443                                  ;
 32444                                  ;	Loads a device driver using the 4b03h function call
 32445                                  ;
 32446                                  ;----------------------------------------------------------------------------
 32447                                  
 32448                                  	; 01/11/2022
 32449                                  ExecDev:
 32450 000031A2 2E8B1E[AB1F]            	mov	bx,[cs:DevLoadAddr]
 32451 000031A7 2E891E[C31F]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 32452                                  					;  block for exec with
 32453                                  					;  load address
 32454 000031AC 2E891E[C51F]            	mov	[cs:DevExecReloc],bx
 32455 000031B1 8CCB                    	mov	bx,cs
 32456 000031B3 8EC3                    	mov	es,bx
 32457 000031B5 BB[C31F]                	mov	bx,DevExecAddr		; es:bx points to parameters
 32458                                  	;mov	al,3	; (load program only)
 32459                                  	;mov	ah,EXEC ; 4Bh
 32460                                  	; 04/07/2023
 32461 000031B8 B8034B                  	mov	ax,(EXEC<<8)|03h
 32462 000031BB CD21                    	int	21h			; load in the device driver
 32463                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 32464                                  		; DS:DX -> ASCIZ filename
 32465                                  		; ES:BX -> parameter block
 32466                                  		; AL = subfunction 
 32467 000031BD C3                      	retn
 32468                                  
 32469                                  ;----------------------------------------------------------------------------
 32470                                  ;
 32471                                  ; procedure : RetFromUM
 32472                                  ;
 32473                                  ;	Input : None
 32474                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 32475                                  ;		 ConvLoad clear if did.
 32476                                  ;
 32477                                  ;	Prepares memory for more devices after returning from loading one
 32478                                  ;	using the DOS 6 options (/L:... etc).
 32479                                  ;
 32480                                  ;----------------------------------------------------------------------------
 32481                                  
 32482                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32483                                  ;  (SYSINIT:37D1h)
 32484                                  
 32485                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32486                                  ;%if 0
 32487                                  RetFromUM:
 32488                                  	; 31/12/2022
 32489                                  	; ds = cs
 32490 000031BE 9C                      	pushf
 32491                                  	;mov	byte [cs:ConvLoad],1
 32492 000031BF C606[B71F]01            	mov	byte [ConvLoad],1
 32493 000031C4 E8E7FD                  	call	UnHideUMBs
 32494 000031C7 7205                    	jc	short rfUM1		; Skip this if didn't HideUMBs
 32495                                  	; 31/12/2022
 32496                                  	; ds = cs
 32497                                  	;mov	byte [cs:ConvLoad],0
 32498 000031C9 C606[B71F]00            	mov	byte [ConvLoad],0
 32499                                  rfUM1:	
 32500 000031CE 9D                      	popf
 32501 000031CF C3                      	retn
 32502                                  
 32503                                  ;%endif ; 01/11/2022
 32504                                  
 32505                                  ;----------------------------------------------------------------------------
 32506                                  ;
 32507                                  ; procedure : RemoveNull
 32508                                  ;
 32509                                  ;	Input : ES:SI points to a null terminated string
 32510                                  ;
 32511                                  ;	Output : none
 32512                                  ;
 32513                                  ;	Replaces the null at the end of a string with blank
 32514                                  ;
 32515                                  ;----------------------------------------------------------------------------
 32516                                  
 32517                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32518                                  	; (SYSINIT:2CCEh)
 32519                                  RemoveNull:
 32520                                  	; 11/12/2022
 32521                                  	; ds = cs
 32522                                  rn_next:
 32523 000031D0 268A1C                  	mov	bl,[es:si]
 32524 000031D3 08DB                    	or	bl,bl			; null ?
 32525 000031D5 7403                    	jz	short rn_gotnull
 32526 000031D7 46                      	inc	si			; advance the pointer
 32527 000031D8 EBF6                    	jmp	short rn_next
 32528                                  rn_gotnull:
 32529                                  	; 11/12/2022
 32530 000031DA 8A1E[DC1F]              	mov	bl,[DevSavedDelim]
 32531                                  	;mov	bl,[cs:DevSavedDelim]
 32532 000031DE 26881C                  	mov	[es:si],bl		; replace null with blank
 32533                                  	; 02/11/2022
 32534                                  ; 11/12/2022
 32535                                  rba_ok:		; 10/04/2019
 32536 000031E1 C3                      	retn
 32537                                  
 32538                                  ;----------------------------------------------------------------------------
 32539                                  ;
 32540                                  ; procedure : RoundBreakAddr
 32541                                  ;
 32542                                  ;	Input : DevBrkAddr
 32543                                  ;	Output : DevBrkAddr
 32544                                  ;
 32545                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 32546                                  ;
 32547                                  ;----------------------------------------------------------------------------
 32548                                  
 32549                                  RoundBreakAddr:
 32550 000031E2 2EA1[B31F]              	mov	ax,[cs:DevBrkAddr]
 32551 000031E6 E87FDF                  	call	ParaRound
 32552 000031E9 2E0106[B51F]            	add	[cs:DevBrkAddr+2],ax
 32553 000031EE 2EC706[B31F]0000        	mov	word [cs:DevBrkAddr],0
 32554 000031F5 2EA1[AD1F]              	mov	ax,[cs:DevLoadEnd]
 32555 000031F9 2E3906[B51F]            	cmp	[cs:DevBrkAddr+2],ax
 32556 000031FE 76E1                    	jbe	short rba_ok
 32557 00003200 E94311                  	jmp	mem_err
 32558                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32559                                  	; 11/12/2022
 32560                                  ;rba_ok:
 32561                                  ;	retn
 32562                                  
 32563                                  ;----------------------------------------------------------------------------
 32564                                  ;
 32565                                  ; procedure : DevSetBreak
 32566                                  ;
 32567                                  ;	Input : DevBrkAddr
 32568                                  ;	Output : Carry set if Device returned Init failed
 32569                                  ;		 Else carry clear
 32570                                  ;
 32571                                  ;----------------------------------------------------------------------------
 32572                                  
 32573                                  DevSetBreak:
 32574 00003203 50                      	push	ax
 32575                                  
 32576 00003204 2EA1[B51F]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 32577 00003208 2E803E[DF14]00          	cmp	byte [cs:multdeviceflag],0
 32578 0000320E 750F                    	jne	short set_break_continue ;do not check it.
 32579 00003210 2E3B06[AB1F]            	cmp	ax,[cs:DevLoadAddr]
 32580 00003215 7508                    	jne	short set_break_continue ;if not same, then o.k.
 32581                                  
 32582                                  	;cmp	word [cs:DevBrkAddr],0
 32583                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 32584                                  	; 12/12/2022
 32585 00003217 2E833E[B31F]01          	cmp	word [cs:DevBrkAddr],1
 32586 0000321D 7204                    	jb	short break_failed
 32587                                  
 32588                                  set_break_continue:
 32589 0000321F E8C0FF                  	call	RoundBreakAddr
 32590                                  	; 12/12/2022
 32591 00003222 F8                      	clc
 32592                                  break_failed:
 32593 00003223 58                      	pop	ax
 32594                                  	;clc
 32595 00003224 C3                      	retn
 32596                                  
 32597                                  	; 12/12/2022
 32598                                  ;break_failed:
 32599                                  	;pop	ax
 32600                                  	;stc
 32601                                  	;retn
 32602                                  
 32603                                  ;----------------------------------------------------------------------------
 32604                                  ;
 32605                                  ; procedure : DevBreak
 32606                                  ;
 32607                                  ;	Input : DevLoadAddr & DevBrkAddr
 32608                                  ;	Output : none
 32609                                  ;
 32610                                  ;	Marks a succesful install of a device driver
 32611                                  ;	Sets device size field in sub-arena &
 32612                                  ;	Updates Free ptr in UMB or adjusts memhi
 32613                                  ;
 32614                                  ;----------------------------------------------------------------------------
 32615                                  
 32616                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32617                                  DevBreak:
 32618                                  	;push	ds ; 11/12/2022
 32619                                  
 32620                                  	; 11/12/2022
 32621 00003225 0E                      	push	cs
 32622 00003226 1F                      	pop	ds
 32623                                  	;mov	ax,[cs:DevLoadAddr]
 32624                                  	;mov	bx,[cs:DevBrkAddr+2]
 32625 00003227 A1[AB1F]                	mov	ax,[DevLoadAddr]
 32626 0000322A 8B1E[B51F]              	mov	bx,[DevBrkAddr+2]
 32627                                  	; 11/12/2022
 32628 0000322E 1E                      	push	ds
 32629                                  
 32630 0000322F 48                      	dec	ax			; seg of sub-arena
 32631 00003230 8ED8                    	mov	ds,ax
 32632 00003232 40                      	inc	ax			; Back to Device segment
 32633 00003233 29D8                    	sub	ax,bx
 32634 00003235 F7D8                    	neg	ax			; size of device in paras
 32635 00003237 A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 32636                                  	
 32637                                  	; 11/12/2022
 32638 0000323A 1F                      	pop	ds
 32639                                  	; ds = cs
 32640                                   	
 32641 0000323B 803E[C71F]00            	cmp	byte [DeviceHi],0
 32642                                  	;cmp	byte [cs:DeviceHi],0
 32643 00003240 7405                    	je	short db_lo
 32644                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 32645                                  	;jmp	short db_exit
 32646                                  	; 11/12/2022
 32647 00003242 891E[BD1F]              	mov	[DevUMBFree],bx
 32648 00003246 C3                      	retn	
 32649                                  db_lo:
 32650                                  	; 11/12/2022
 32651                                  	; ds = cs
 32652                                  	;mov	[cs:memhi],bx
 32653                                  	;mov	word [cs:memlo],0
 32654 00003247 891E[6203]              	mov	[memhi],bx
 32655 0000324B C706[6003]0000          	mov	word [memlo],0 ; 18/12/2022
 32656                                  db_exit:
 32657                                  	;pop	ds ; 11/12/2022
 32658 00003251 C3                      	retn
 32659                                  
 32660                                  ; 10/04/2019 - Retro DOS v4.0
 32661                                  
 32662                                  ;----------------------------------------------------------------------------
 32663                                  ;
 32664                                  ; procedure : ParseSize
 32665                                  ;
 32666                                  ;	Parses the command line for SIZE= command
 32667                                  ;
 32668                                  ;	ES:SI = command line to parsed
 32669                                  ;
 32670                                  ;	returns ptr to command line after SIZE= option in ES:SI
 32671                                  ;	updates the DevSizeOption variable with value supplied
 32672                                  ;	in SIZE=option
 32673                                  ;	Returns carry if the SIZE option was invalid
 32674                                  ;
 32675                                  ;----------------------------------------------------------------------------
 32676                                  
 32677                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32678                                  	; (SYSINIT:2D5Ah)
 32679                                  ParseSize:
 32680                                  	;push	bx
 32681                                  	;mov	bx,si
 32682                                  
 32683                                  	; 11/12/2022
 32684                                  	; ds = cs
 32685                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 32686                                  	;mov	[cs:DevCmdLine],si
 32687                                  	;mov	[cs:DevCmdLine+2],es
 32688 00003252 C706[C81F]0000          	mov	word [DevSizeOption],0 ; init the value
 32689 00003258 8936[D81F]              	mov	[DevCmdLine],si
 32690 0000325C 8C06[DA1F]              	mov	[DevCmdLine+2],es	
 32691 00003260 E82900                  	call	SkipDelim
 32692 00003263 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 32693 00003268 7520                    	jne	short ps_no_size
 32694 0000326A 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 32695 00003270 7518                    	jne	short ps_no_size
 32696 00003272 268A4404                	mov	al,[es:si+4]
 32697 00003276 E83710                  	call	delim
 32698                                  	;jne	short ps_no_size
 32699                                  	; 22/07/2023
 32700 00003279 750E                    	jne	short ps_no_size_2 ; cf=0 here
 32701 0000327B 83C605                  	add	si,5
 32702 0000327E E81600                  	call	GetHexNum
 32703 00003281 7208                    	jc	short ps_err
 32704                                  	; 11/12/2022
 32705                                  	; ds = cs
 32706                                  	;mov	[cs:DevSizeOption],ax
 32707 00003283 A3[C81F]                	mov	[DevSizeOption],ax
 32708 00003286 E80300                  	call	SkipDelim
 32709                                  	; 22/07/2023
 32710                                  ps_no_size_2:
 32711                                  	; cf = 0
 32712 00003289 C3                      	retn
 32713                                  
 32714                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32715                                  	;mov	bx,si
 32716                                  ps_no_size:	
 32717                                  	;mov	si,bx
 32718                                  	;pop	bx
 32719 0000328A F8                      	clc	; cf=0
 32720                                  	;retn
 32721                                  	; 11/12/2022
 32722                                  ps_err:		; cf=1
 32723                                  sd_ret:		; cf=?
 32724 0000328B C3                      	retn
 32725                                  ;ps_err:
 32726                                  	; 02/11/2022
 32727                                  	;pop	bx
 32728                                  	;stc
 32729                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32730                                  	; 11/12/2022
 32731                                  	; cf=1
 32732                                  	;stc
 32733                                  	; 11/12/2022
 32734                                  ;sd_ret: 
 32735                                  	; 22/07/2023
 32736                                  	; 12/04/2019
 32737                                  	;retn
 32738                                  
 32739                                  ; 12/04/2019 - Retro DOS v4.0
 32740                                  
 32741                                  ;----------------------------------------------------------------------------
 32742                                  ;
 32743                                  ; procedure : SkipDelim
 32744                                  ;
 32745                                  ;	Skips delimiters in the string pointed to by ES:SI
 32746                                  ;	Returns ptr to first non-delimiter character in ES:SI
 32747                                  ;
 32748                                  ;----------------------------------------------------------------------------
 32749                                  	
 32750                                  	; 01/11/2022
 32751                                  SkipDelim:
 32752                                  sd_next_char:
 32753 0000328C 268A04                  	mov	al,[es:si]
 32754 0000328F E81E10                  	call	delim
 32755 00003292 75F7                    	jnz	short sd_ret
 32756 00003294 46                      	inc	si
 32757 00003295 EBF5                    	jmp	short sd_next_char ; 01/11/2022
 32758                                  	; 11/12/2022
 32759                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32760                                  ;sd_ret:
 32761                                  	;retn
 32762                                  
 32763                                  ;----------------------------------------------------------------------------
 32764                                  ;
 32765                                  ; procedure : GetHexNum
 32766                                  ;
 32767                                  ;	Converts an ascii string terminated by a delimiter into binary.
 32768                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 32769                                  ;
 32770                                  ;	Returns in AX the number of paras equivalent to the
 32771                                  ;	hex number of bytes specified by the hexadecimal string.
 32772                                  ;
 32773                                  ;	Returns carry in case it encountered a non-hex character or
 32774                                  ;	if it encountered crlf
 32775                                  ;
 32776                                  ;----------------------------------------------------------------------------
 32777                                  
 32778                                  ; 13/05/2019
 32779                                  
 32780                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32781                                  	; (SYSINIT:38C5h)
 32782                                  
 32783                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32784                                  	; (SYSINIT:2DA5h)
 32785                                  GetHexNum:
 32786 00003297 31C0                    	xor	ax,ax
 32787 00003299 31D2                    	xor	dx,dx
 32788                                  ghn_next:
 32789 0000329B 268A1C                  	mov	bl,[es:si]
 32790 0000329E 80FB0D                  	cmp	bl,cr  ; 0Dh
 32791 000032A1 7436                    	je	short ghn_err
 32792 000032A3 80FB0A                  	cmp	bl,lf  ; 0Ah
 32793 000032A6 7431                    	je	short ghn_err
 32794 000032A8 50                      	push	ax
 32795 000032A9 88D8                    	mov	al,bl
 32796 000032AB E80210                  	call	delim
 32797 000032AE 58                      	pop	ax
 32798                                  	; 03/01/2023
 32799 000032AF B90400                  	mov	cx, 4
 32800 000032B2 7410                    	jz	short ghn_into_paras
 32801 000032B4 E82400                  	call	GetNibble
 32802                                  	;jc	short ghn_err
 32803                                  	; 11/12/2022
 32804 000032B7 7221                    	jc	short ghn_ret ; cf=1
 32805                                  	; 03/01/2023
 32806                                  	;mov	cx,4
 32807                                  ghn_shift1:
 32808 000032B9 D1E0                    	shl	ax,1
 32809 000032BB D1D2                    	rcl	dx,1
 32810 000032BD E2FA                    	loop	ghn_shift1
 32811 000032BF 08D8                    	or	al,bl
 32812 000032C1 46                      	inc	si
 32813 000032C2 EBD7                    	jmp	short ghn_next
 32814                                  ghn_into_paras:
 32815 000032C4 83C00F                  	add	ax,15
 32816 000032C7 83D200                  	adc	dx,0
 32817 000032CA F7C2F0FF                	test	dx,0FFF0h
 32818 000032CE 7509                    	jnz	short ghn_err
 32819                                  	; 03/01/2023
 32820                                  	;mov	cx,4
 32821                                  ghn_shift2:
 32822 000032D0 F8                      	clc
 32823 000032D1 D1DA                    	rcr	dx,1
 32824 000032D3 D1D8                    	rcr	ax,1
 32825 000032D5 E2F9                    	loop	ghn_shift2
 32826 000032D7 F8                      	clc
 32827 000032D8 C3                      	retn
 32828                                  	; 11/12/2022
 32829                                  ghn_err:
 32830                                  gnib_err:
 32831 000032D9 F9                      	stc
 32832                                  ghn_ret:
 32833                                  gnib_ret:
 32834 000032DA C3                      	retn
 32835                                  
 32836                                  ;----------------------------------------------------------------------------
 32837                                  ;
 32838                                  ; procedure : GetNibble
 32839                                  ;
 32840                                  ;	Convert one nibble (hex digit) in BL into binary
 32841                                  ;
 32842                                  ;	Returns binary value in BL
 32843                                  ;
 32844                                  ;	Returns carry if BL contains non-hex digit
 32845                                  ;
 32846                                  ;----------------------------------------------------------------------------
 32847                                  
 32848                                  GetNibble:
 32849 000032DB 80FB30                  	cmp	bl,'0'
 32850                                  	;jb	short gnib_err
 32851                                  	; 11/12/2022
 32852 000032DE 72FA                    	jb	short gnib_ret ; cf=1
 32853 000032E0 80FB39                  	cmp	bl,'9'
 32854 000032E3 7704                    	ja	short is_it_hex
 32855 000032E5 80EB30                  	sub	bl,'0'		; clc
 32856 000032E8 C3                      	retn
 32857                                  is_it_hex:
 32858 000032E9 80FB41                  	cmp	bl,'A'
 32859                                  	;jb	short gnib_err
 32860                                  	; 11/12/2022
 32861 000032EC 72EC                    	jb	short gnib_ret ; cf=1
 32862 000032EE 80FB46                  	cmp	bl,'F'
 32863 000032F1 77E6                    	ja	short gnib_err ; 11/12/2022
 32864 000032F3 80EB37                  	sub	bl,'A'- 10	; clc
 32865 000032F6 C3                      	retn
 32866                                  	; 11/12/2022
 32867                                  ;gnib_err:
 32868                                  ;	stc
 32869                                  ;gnib_ret:
 32870                                  ;	retn
 32871                                  
 32872                                  ;============================================================================
 32873                                  
 32874                                  ; 12/04/2019 - Retro DOS v4.0
 32875                                  
 32876                                  ; umb.inc (MSDOS 6.0, 1991)
 32877                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 32878                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 32879                                  
 32880                                  XMM_REQUEST_UMB	equ 10h
 32881                                  XMM_RELEASE_UMB	equ 11h
 32882                                  
 32883                                  ;----------------------------------------------------------------------------
 32884                                  ;
 32885                                  ; procedure : AllocUMB
 32886                                  ;
 32887                                  ;	Allocate all UMBs and link it to DOS arena chain
 32888                                  ;
 32889                                  ;----------------------------------------------------------------------------
 32890                                  
 32891                                  AllocUMB:
 32892                                  	; 31/12/2022
 32893                                  	; ds = cs
 32894 000032F7 E81000                  	call	InitAllocUMB		; link in the first UMB
 32895 000032FA 720D                    	jc	short au_exit		; quit on error
 32896                                  au_next:
 32897 000032FC E83900                  	call	umb_allocate		; allocate
 32898 000032FF 7205                    	jc	short au_coalesce
 32899 00003301 E85000                  	call	umb_insert		; & insert till no UMBs
 32900 00003304 EBF6                    	jmp	short au_next
 32901                                  au_coalesce:
 32902 00003306 E80901                  	call	umb_coalesce		; coalesce all UMBs
 32903                                  au_exit:
 32904                                  	; 31/12/2022
 32905                                  	; ds = cs
 32906 00003309 C3                      	retn
 32907                                  
 32908                                  ;----------------------------------------------------------------------------
 32909                                  ;
 32910                                  ; procedure : InitAllocUMB
 32911                                  ;
 32912                                  ;----------------------------------------------------------------------------
 32913                                  
 32914                                  InitAllocUMB:
 32915                                  	; 31/12/2022
 32916                                  	; ds = cs
 32917 0000330A E8A8D7                  	call	IsXMSLoaded
 32918 0000330D 7527                    	jnz	short iau_err		; quit on no XMS driver
 32919 0000330F B452                    	mov	ah,52h
 32920 00003311 CD21                    	int	21h			; get DOS DATA seg
 32921                                  	; 31/12/2022
 32922                                  	; ds = cs
 32923                                  	;mov	[cs:DevDOSData],es	; & save it for later
 32924 00003313 8C06[D61F]              	mov	[DevDOSData],es		; & save it for later
 32925 00003317 B81043                  	mov	ax,4310h
 32926 0000331A CD2F                    	int	2Fh
 32927                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 32928                                  	;mov	[cs:DevXMSAddr+2],es
 32929 0000331C 891E[BF1F]              	mov	[DevXMSAddr],bx		; get XMS driver address
 32930 00003320 8C06[C11F]              	mov	[DevXMSAddr+2],es	
 32931                                  	; 31/12/2022
 32932 00003324 803E[D51F]00            	cmp	byte [FirstUMBLinked],0 
 32933                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 32934                                  	;jne	short ia_1		; quit if we already did it
 32935                                  	; 12/12/2022
 32936 00003329 770A                    	ja	short ia_1 ; cf=0
 32937 0000332B E83201                  	call	LinkFirstUMB		; else link the first UMB
 32938                                  	;jc	short iau_err
 32939                                  	; 12/12/2022
 32940 0000332E 7207                    	jc	short iau_err2  ; cf=1
 32941                                  	; 31/12/2022
 32942                                  	; ds = cs
 32943 00003330 C606[D51F]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 32944                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 32945                                  ia_1:
 32946                                  	; 12/12/2022
 32947                                  	; cf=0
 32948                                  	;clc
 32949 00003335 C3                      	retn
 32950                                  iau_err:
 32951 00003336 F9                      	stc
 32952                                  iau_err2:
 32953 00003337 C3                      	retn
 32954                                  
 32955                                  ;-------------------------------------------------------------------------
 32956                                  ;
 32957                                  ; Procedure Name	: umb_allocate
 32958                                  ;
 32959                                  ; Inputs		: DS = data
 32960                                  ;
 32961                                  ; Outputs		: if UMB available
 32962                                  ;				Allocates the largest available UMB and 
 32963                                  ;			  	BX = segment of allocated block
 32964                                  ;				DX = size of allocated block
 32965                                  ;				NC
 32966                                  ;			  else 
 32967                                  ;				CY
 32968                                  ;
 32969                                  ; Uses			: BX, DX
 32970                                  ;
 32971                                  ;-------------------------------------------------------------------------
 32972                                  
 32973                                  umb_allocate:
 32974                                  	; 31/12/2022
 32975                                  	; ds = cs
 32976 00003338 50                      	push	ax
 32977 00003339 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 32978 0000333B BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 32979                                  					;   possible
 32980                                  	; 31/12/2022
 32981 0000333E FF1E[BF1F]              	call	far [DevXMSAddr]
 32982                                  	;call	far [cs:DevXMSAddr]
 32983                                  					; dx now contains the size of
 32984                                  					; the largest UMB
 32985 00003342 09D2                    	or	dx,dx
 32986 00003344 740B                    	jz	short ua_err
 32987                                  	
 32988 00003346 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 32989                                  
 32990                                  	; 31/12/2022
 32991 00003348 FF1E[BF1F]              	call	far [DevXMSAddr]
 32992                                  	;call	far [cs:DevXMSAddr]
 32993                                  
 32994 0000334C 83F801                  	cmp	ax,1			; Q: was the reqst successful
 32995                                  	;jne	short ua_err		; N: error
 32996                                  	; 27/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 32997 0000334F 7601                    	jna	short ua_done ; if ax=1 then cf=0, else cf=1 (ax=0)
 32998                                  ua_err:
 32999 00003351 F9                      	stc	
 33000                                  
 33001                                  	;clc
 33002                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33003                                  	; 12/12/2022
 33004                                  	; cf=0
 33005                                  	;clc 
 33006                                  ua_done:
 33007 00003352 58                      	pop	ax
 33008 00003353 C3                      	retn
 33009                                  	; 27/07/2023
 33010                                  ;ua_err:
 33011                                  	;stc
 33012                                  	;jmp	short ua_done
 33013                                  
 33014                                  ;---------------------------------------------------------------------------
 33015                                  ;
 33016                                  ; Procedure Name	: umb_insert
 33017                                  ;
 33018                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 33019                                  ;			: BX = seg address of UMB to be linked in
 33020                                  ;			: DX = size of UMB to be linked in paras
 33021                                  ;			; DS = data
 33022                                  ;
 33023                                  ; Outputs		: links the UMB into the arena chain
 33024                                  ;
 33025                                  ; Uses			: AX, CX, ES, DX, BX
 33026                                  ;
 33027                                  ;---------------------------------------------------------------------------
 33028                                  
 33029                                  umb_insert:
 33030 00003354 1E                      	push	ds
 33031                                  
 33032                                  	; 31/12/2022
 33033                                  	; ds = cs
 33034                                  
 33035                                  	;mov	ds,[cs:DevDOSData]
 33036 00003355 8E1E[D61F]              	mov	ds,[DevDOSData] ; 31/12/2022 
 33037                                  	;mov	ds,[8Ch]
 33038 00003359 8E1E8C00                	mov	ds,[UMB_ARENA]		; ds = UMB_HEAD
 33039 0000335D 8CD8                    	mov	ax,ds
 33040 0000335F 8EC0                    	mov	es,ax
 33041                                  ui_next:
 33042 00003361 39D8                    	cmp	ax,bx			; Q: is current block above
 33043                                  					;    new block
 33044 00003363 770F                    	ja	short ui_insert		; Y: insert it
 33045                                  					; Q: is current block the
 33046                                  					;    last
 33047 00003365 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 33048 0000336B 745C                    	je	short ui_append		; Y: append new block to chain
 33049                                  					; N: get next block
 33050 0000336D 8ED8                    	mov	ds,ax			; M005
 33051                                  	;call	get_next		; ax = es = next block
 33052 0000336F E8E200                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 33053 00003372 EBED                    	jmp	short ui_next
 33054                                  
 33055                                  ui_insert:
 33056 00003374 8CD9                    	mov	cx,ds			; ds = previous arena
 33057 00003376 41                      	inc	cx			; top of previous block
 33058                                  
 33059 00003377 29D9                    	sub	cx,bx
 33060 00003379 F7D9                    	neg	cx			; cx = size of used block
 33061                                  	;mov	byte [0],'M'
 33062 0000337B C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 33063                                  	;mov	word [1],8
 33064 00003380 C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 33065                                  	;mov	[3],cx
 33066 00003386 890E0300                	mov	[ARENA.SIZE],cx	
 33067                                  	;mov	word [8],4353h ; 'SC'
 33068 0000338A C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 33069                                  
 33070                                  ; prepare the arena at start of new block
 33071                                  
 33072 00003390 8EC3                    	mov	es,bx
 33073 00003392 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 33074 00003398 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 33075                                  					; mark as free
 33076 0000339F 83EA02                  	sub	dx,2			; make room for arena at
 33077                                  					; start & end of new block
 33078 000033A2 2689160300              	mov	[es:ARENA.SIZE],dx
 33079                                  
 33080                                  ; prepare arena at end of new block
 33081                                  	
 33082 000033A7 01D3                    	add	bx,dx
 33083 000033A9 43                      	inc	bx
 33084 000033AA 8EC3                    	mov	es,bx			; es=arena at top of new block
 33085 000033AC 43                      	inc	bx			; bx=top of new block
 33086                                  
 33087                                  					; ax contains arena just above
 33088                                  					; this block
 33089 000033AD 29D8                    	sub	ax,bx			; ax = size of used block
 33090                                  	
 33091 000033AF 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 33092 000033B5 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 33093 000033BC 26A30300                	mov	[es:ARENA.SIZE],ax	
 33094 000033C0 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 33095                                  
 33096 000033C7 EB47                    	jmp	short ui_done
 33097                                  
 33098                                  ui_append:
 33099                                  					; es = arena of last block	
 33100 000033C9 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 33101 000033CE 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 33102                                  					; going to rsrv on top of this 
 33103                                  					; block for the next arena.
 33104                                  	; 13/05/2019
 33105 000033D4 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 33106                                  
 33107 000033DA 89C1                    	mov	cx,ax			; cx=top of prev block-1
 33108 000033DC 40                      	inc	ax
 33109 000033DD 29D8                    	sub	ax,bx			; ax=top of prev block - 
 33110                                  					;    seg. address of new block
 33111 000033DF F7D8                    	neg	ax
 33112                                  
 33113 000033E1 8EC1                    	mov	es,cx			; es = arena of unused block
 33114                                  
 33115 000033E3 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 33116 000033E9 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 33117 000033F0 26A30300                	mov	[es:ARENA.SIZE],ax	
 33118 000033F4 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 33119                                  
 33120                                  ; prepare the arena at start of new block
 33121 000033FB 8EC3                    	mov	es,bx
 33122 000033FD 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 33123 00003403 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 33124                                  					; mark as free
 33125 0000340A 4A                      	dec	dx			; make room for arena
 33126 0000340B 2689160300              	mov	[es:ARENA.SIZE],dx	
 33127                                  ui_done:
 33128                                  uc_done: ; 31/12/2022 ; *!
 33129 00003410 1F                      	pop	ds
 33130                                  	; ds = cs ; 31/12/2022
 33131                                  ;uc_done:	; 18/12/2022
 33132 00003411 C3                      	retn
 33133                                  
 33134                                  ; 13/04/2019 - Retro DOS v4.0
 33135                                  
 33136                                  ;----------------------------------------------------------------------------
 33137                                  ;
 33138                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 33139                                  ;
 33140                                  ;	Coalesce adds the block following the argument to the argument block,
 33141                                  ;	if it's free.  Coalesce is usually used to join free blocks, but
 33142                                  ;	some callers (such as $setblock) use it to join a free block to it's
 33143                                  ;	preceeding allocated block.
 33144                                  ;
 33145                                  ;	EXIT	'C' clear if OK
 33146                                  ;		  (ds) unchanged, this block updated
 33147                                  ;		  (ax) = address of next block, IF not at end
 33148                                  ;		'C' set if arena trashed
 33149                                  ;	USES	cx, di, ds, es
 33150                                  ;
 33151                                  ;----------------------------------------------------------------------------
 33152                                  
 33153                                  umb_coalesce:
 33154                                  	; 31/12/2022
 33155                                  	; ds = cs
 33156 00003412 1E                      	push	ds ; *!
 33157                                  
 33158 00003413 31FF                    	xor	di, di
 33159                                  
 33160                                  	;mov	es,[cs:DevDOSData]
 33161                                  	; 31/12/2022
 33162 00003415 8E06[D61F]              	mov	es,[DevDOSData]
 33163 00003419 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 33164                                  uc_nextfree:
 33165 0000341E 8CC0                    	mov	ax,es
 33166 00003420 8ED8                    	mov	ds,ax
 33167                                  	;cmp	[es:1],di
 33168 00003422 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 33169 00003427 7407                    	je	short uc_again		; Y: try to coalesce with next block
 33170                                  					; N: get next arena
 33171 00003429 E82100                  	call	get_next		; es, ax = next arena
 33172 0000342C 72E2                    	jc	short uc_done	; *!
 33173 0000342E EBEE                    	jmp	short uc_nextfree
 33174                                  uc_again:
 33175 00003430 E81A00                  	call	get_next		; es, ax = next arena
 33176 00003433 72DB                    	jc	short uc_done	; *!
 33177                                  uc_check:
 33178 00003435 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 33179 0000343A 75E2                    	jne	short uc_nextfree	; N: get next free arena
 33180                                  					; Y: coalesce
 33181 0000343C 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 33182 00003441 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 33183                                  	;add	[3],cx
 33184 00003442 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 33185 00003446 268A0D                  	mov     cl,[es:di]              ; move up signature
 33186 00003449 880D                    	mov     [di],cl
 33187 0000344B EBE3                    	jmp     short uc_again		; try again
 33188                                  
 33189                                  	; 18/12/2022
 33190                                  ;uc_done:
 33191                                  	;retn
 33192                                  
 33193                                  ;----------------------------------------------------------------------------
 33194                                  ;
 33195                                  ;**	get_next - Find Next item in Arena
 33196                                  ;
 33197                                  ;	ENTRY	dS - pointer to block head
 33198                                  ;	EXIT	AX,ES - pointers to next head
 33199                                  ;		'C' set if arena damaged
 33200                                  ;
 33201                                  ;----------------------------------------------------------------------------
 33202                                  
 33203                                  	; 01/11/2022
 33204                                  get_next:
 33205 0000344D 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 33206 00003452 740A                    	je	short gn_err
 33207                                  _get_next_:
 33208 00003454 8CD8                    	mov     ax,ds                   ; ax=current block
 33209 00003456 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 33210 0000345A 40                      	inc     ax                      ; remember that header!
 33211 0000345B 8EC0                    	mov	es,ax
 33212                                  	;clc
 33213                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33214                                  	; 11/12/2022
 33215                                  	; cf=0
 33216                                  	;clc
 33217 0000345D C3                      	retn
 33218                                  gn_err:
 33219 0000345E F9                      	stc
 33220                                  	; 11/12/2022	
 33221                                  lfu_err:	 ; cf=1
 33222 0000345F C3                      	retn
 33223                                  
 33224                                  ;----------------------------------------------------------------------------
 33225                                  ;
 33226                                  ; procedure : LinkFirstUMB
 33227                                  ;
 33228                                  ;----------------------------------------------------------------------------
 33229                                  
 33230                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33231                                  	; (SYSINIT:2F81h)
 33232                                  LinkFirstUMB:
 33233                                  	; 31/12/2022
 33234                                  	; ds = cs
 33235 00003460 E8D5FE                  	call	umb_allocate
 33236 00003463 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 33237                                  
 33238                                  ; bx = segment of allocated UMB
 33239                                  ; dx = size of UMB
 33240                                  
 33241                                  	; 31/12/2022
 33242                                  	; ds = cs
 33243                                  
 33244 00003465 CD12                    	int	12h			; ax = size of memory
 33245 00003467 B106                    	mov	cl,6
 33246 00003469 D3E0                    	shl	ax,cl			; ax = size in paragraphs
 33247                                  
 33248 0000346B 89C1                    	mov	cx,ax			; cx = size in paras
 33249 0000346D 29D8                    	sub	ax,bx			; ax = - size of unused block
 33250                                  
 33251 0000346F F7D8                    	neg	ax
 33252                                  
 33253 00003471 83E901                  	sub	cx,1			; cx = first umb_arena
 33254 00003474 8EC1                    	mov	es,cx			; es = first umb_arena
 33255                                  	
 33256 00003476 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 33257 0000347C 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 33258                                  					
 33259 00003483 26A30300                	mov	[es:ARENA.SIZE],ax	
 33260 00003487 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 33261                                  
 33262                                  ; put in the arena for the first UMB
 33263                                  
 33264 0000348E 8EC3                    	mov	es,bx			; es has first free umb seg
 33265 00003490 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 33266 00003496 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 33267                                  					; mark as free 
 33268 0000349D 4A                      	dec	dx			; make room for arena
 33269 0000349E 2689160300              	mov	[es:ARENA.SIZE],dx	
 33270                                  
 33271                                  	;mov	es,[cs:DevDOSData]
 33272                                  	; 31/12/2022
 33273 000034A3 8E06[D61F]              	mov	es,[DevDOSData] ; ds = cs
 33274 000034A7 BF8C00                  	mov	di,UMB_ARENA ; 8Ch
 33275 000034AA 26890D                  	mov	[es:di],cx		; initialize umb_head in DOS
 33276                                  					;  data segment with the arena
 33277                                  					;  just below Top of Mem
 33278                                  
 33279                                  ; we must now scan the arena chain and update the size of the last arena
 33280                                  
 33281 000034AD BF2400                  	mov	di,DOS_ARENA ; 24h
 33282 000034B0 268E05                  	mov	es,[es:di]		; es = start arena
 33283 000034B3 31FF                    	xor	di,di
 33284                                  ;scan_next
 33285                                  ; 09/12/2022
 33286                                  scannext:
 33287 000034B5 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 33288 000034B9 740C                    	je	short got_last
 33289                                  	
 33290 000034BB 8CC0                    	mov	ax,es
 33291 000034BD 2603060300              	add	ax,[es:ARENA.SIZE]
 33292 000034C2 40                      	inc	ax
 33293 000034C3 8EC0                    	mov	es,ax
 33294                                  	;jmp	short scan_next
 33295                                  	; 09/12/2022
 33296 000034C5 EBEE                    	jmp	short scannext
 33297                                  got_last:
 33298 000034C7 26832E030001            	sub	word [es:ARENA.SIZE],1
 33299 000034CD 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 33300                                  	;clc
 33301                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33302                                  	; 11/12/2022
 33303                                  	; cf=0
 33304                                  	;clc
 33305 000034D3 C3                      	retn
 33306                                  
 33307                                  ; 11/12/2022
 33308                                  ;;lfu_err:
 33309                                  ;	;stc
 33310                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33311                                  ;	; 11/12/2022
 33312                                  ;	; cf=1
 33313                                  ;	;stc
 33314                                  ;	retn
 33315                                  
 33316                                  ;----------------------------------------------------------------------------
 33317                                  ;
 33318                                  ; procedure : ShrinkUMB
 33319                                  ;
 33320                                  ;	Shrinks the current UMB in use, so that the unused portions
 33321                                  ;	of the UMB is given back to the DOS free mem pool
 33322                                  ;
 33323                                  ;----------------------------------------------------------------------------
 33324                                  
 33325                                  ShrinkUMB:
 33326                                  	; 12/12/2022
 33327                                  	; ds = cs
 33328 000034D4 833E[B91F]00            	cmp	word [DevUMBAddr],0
 33329                                  	;cmp	word [cs:DevUMBAddr],0
 33330 000034D9 741F                    	je	short su_exit
 33331 000034DB 06                      	push	es
 33332                                  	; 01/01/2023
 33333                                  	;push	bx
 33334                                  	; 12/12/2022
 33335                                  	;mov	bx,[cs:DevUMBFree]
 33336                                  	;sub	bx,[cs:DevUMBAddr]
 33337                                  	;mov	es,[cs:DevUMBAddr]
 33338 000034DC 8B1E[BD1F]              	mov	bx,[DevUMBFree]
 33339 000034E0 2B1E[B91F]              	sub	bx,[DevUMBAddr]
 33340 000034E4 8E06[B91F]              	mov	es,[DevUMBAddr]
 33341                                  	
 33342 000034E8 B8004A                  	mov	ax,4A00h
 33343 000034EB CD21                    	int	21h
 33344                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 33345                                  		; ES = segment address of block to change
 33346                                  		; BX = new size in paragraphs
 33347 000034ED 8CC0                    	mov	ax,es
 33348 000034EF 48                      	dec	ax
 33349 000034F0 8EC0                    	mov	es,ax
 33350 000034F2 26C70601000800          	mov	word [es:ARENA.OWNER],8
 33351                                  	; 01/01/2023
 33352                                  	;pop	bx
 33353 000034F9 07                      	pop	es
 33354                                  su_exit:
 33355 000034FA C3                      	retn
 33356                                  
 33357                                  ;----------------------------------------------------------------------------
 33358                                  ;
 33359                                  ; procedure : UnlinkUMB
 33360                                  ;
 33361                                  ;	Unlinks the UMBs from the DOS arena chain
 33362                                  ;
 33363                                  ;----------------------------------------------------------------------------
 33364                                  
 33365                                  UnlinkUMB:
 33366                                  	; 12/12/2022
 33367                                  	; ds = cs
 33368 000034FB 1E                      	push	ds
 33369 000034FC 06                      	push	es
 33370                                  	; 12/12/2022
 33371 000034FD 803E[D51F]00            	cmp	byte [FirstUMBLinked],0
 33372                                  	;cmp	byte [cs:FirstUMBLinked],0
 33373 00003502 7420                    	je	short ulu_x		; nothing to unlink
 33374                                  	; 12/12/2022
 33375 00003504 8E06[D61F]              	mov	es,[DevDOSData]
 33376                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 33377 00003508 268E1E2400              	mov	ds,[es:DOS_ARENA]
 33378 0000350D 268B3E8C00              	mov	di,[es:UMB_ARENA]
 33379                                  ulu_next:
 33380 00003512 E838FF                  	call	get_next
 33381 00003515 720D                    	jc	short ulu_x
 33382 00003517 39C7                    	cmp	di,ax			; is the next one UMB ?
 33383 00003519 7404                    	je	short ulu_found
 33384 0000351B 8ED8                    	mov	ds,ax
 33385 0000351D EBF3                    	jmp	short ulu_next
 33386                                  ulu_found:
 33387                                  	;mov	byte [0],'Z'
 33388 0000351F C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 33389                                  ulu_x:
 33390 00003524 07                      	pop	es
 33391 00003525 1F                      	pop	ds
 33392 00003526 C3                      	retn
 33393                                  
 33394                                  ; ----------------------------------------------------------------------
 33395                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 33396                                  ; ----------------------------------------------------------------------
 33397                                  ; 14/04/2019 - Retro DOS v4.0
 33398                                  
 33399                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 33400                                  ;
 33401                                  ; Summary:
 33402                                  ;
 33403                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 33404                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 33405                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 33406                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 33407                                  ;   and/or config.inc for the full list.
 33408                                  ;
 33409                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 33410                                  ;   configuration support. blockname is either MENU, which contains one
 33411                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 33412                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 33413                                  ;   INCLUDE allows the current block to name another block for inclusion
 33414                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 33415                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 33416                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 33417                                  ;
 33418                                  ; Example:
 33419                                  ;
 33420                                  ;   [menu]
 33421                                  ;   menuitem=misc,Miscellaneous
 33422                                  ;   menuitem=network,Network Configuration
 33423                                  ;   menudefault=network,15
 33424                                  ;
 33425                                  ;   [network]
 33426                                  ;   include misc
 33427                                  ;   device=foo
 33428                                  ;
 33429                                  ;   [misc]
 33430                                  ;   device=bar
 33431                                  ;   include alternate
 33432                                  ;
 33433                                  ;   [alternate]
 33434                                  ;   device=tar
 33435                                  ;
 33436                                  ;
 33437                                  ;   When the menu is displayed
 33438                                  ;
 33439                                  ;    1. Miscellaneous
 33440                                  ;    2. Network Configuration
 33441                                  ;
 33442                                  ;   #2 is highlighted as the default option, and will be automatically
 33443                                  ;   selected after 15 seconds. It will invoke the following lines in the
 33444                                  ;   following order:
 33445                                  ;
 33446                                  ;       DEVICE=BAR
 33447                                  ;       DEVICE=TAR
 33448                                  ;       DEVICE=FOO
 33449                                  ;
 33450                                  
 33451                                  ;MULTI_CONFIG equ 1
 33452                                  
 33453                                  ; the following depend on the positions of the various letters in switchlist
 33454                                  
 33455                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 33456                                  
 33457                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 33458                                  flagdrive	equ 00001000b ; 8 
 33459                                  flagcyln	equ 00010000b ; 16
 33460                                  flagseclim	equ 00100000b ; 32
 33461                                  flagheads	equ 01000000b ; 64
 33462                                  flagff		equ 10000000b ; 128
 33463                                  
 33464                                  ;----------------------------------------------------------------------------
 33465                                  ; 19/04/2019 - Retro DOS v4.0
 33466                                  
 33467                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 33468                                  
 33469                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33470                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 33471                                  
 33472 00003527 00                      insert_blank:	db 	0
 33473                                  
 33474                                  ;----------------------------------------------------------------------------
 33475                                  ;
 33476                                  ; procedure : setparms
 33477                                  ;
 33478                                  ; the following set of routines is used to parse the drivparm = command in
 33479                                  ; the config.sys file to change the default drive parameters.
 33480                                  ;
 33481                                  ;----------------------------------------------------------------------------
 33482                                  
 33483                                  setparms:
 33484 00003528 1E                      	push	ds
 33485 00003529 50                      	push	ax
 33486 0000352A 53                      	push	bx
 33487 0000352B 51                      	push	cx
 33488 0000352C 52                      	push	dx
 33489                                  
 33490 0000352D 0E                      	push	cs
 33491 0000352E 1F                      	pop	ds
 33492                                  
 33493 0000352F 31DB                    	xor	bx,bx
 33494 00003531 8A1E[024A]              	mov	bl,[drive]
 33495                                  	; 18/12/2022
 33496 00003535 43                      	inc	bx
 33497                                  	;inc	bl			; get it correct for ioctl call
 33498                                  					; (1=a,2=b...)
 33499 00003536 BA[DA48]                	mov	dx,deviceparameters
 33500                                  	;mov	ah,IOCTL ; 44h
 33501                                  	;mov	al,GENERIC_IOCTL ; 0Dh
 33502                                  	; 04/07/2023
 33503 00003539 B80D44                  	mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 33504                                  	;mov	ch,RAWIO ; 8
 33505                                  	;mov	cl,SET_DEVICE_PARAMETERS ; 40h
 33506                                  	; 04/07/2023
 33507 0000353C B94008                  	mov	cx,(RAWIO<<8)|SET_DEVICE_PARAMETERS 
 33508 0000353F CD21                    	int	21h
 33509                                  
 33510                                  ; 27/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 33511 00003541 8A26[034A]              	mov	ah,[switches]
 33512                                  	;mov	al,[deviceparameters+20]
 33513 00003545 A0[EE48]                	mov	al,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 33514 00003548 8A0E[024A]              	mov	cl,[drive]
 33515                                  ;
 33516                                  ;; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33517                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 33518                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 33519                                  ;	; 21/10/2022
 33520                                  ;	;mov	ax,DOSBIODATASEG ; 0070h	
 33521                                  ;	;mov	ds,ax			; set Bios_Data segment
 33522                                  ;
 33523                                  ;	; 27/07/2023
 33524                                  ;	;;test	word [cs:switches],flagec35 ; 4
 33525                                  ;	;test	byte [cs:switches],flagec35
 33526                                  ;	;jz	short not_ec35
 33527                                  ;
 33528                                  ;	; 27/07/2023
 33529                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33530                                  ;	;;test	word [switches],flagec35 ; 4
 33531                                  ;	; 12/12/2022
 33532                                  ;	;test	byte [switches],flagec35 ; 4
 33533                                  ;	;jz	short eot_ok
 33534                                  ;	
 33535                                  	;mov	cl,[cs:drive]		; which drive was this for?
 33536                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33537                                  	;mov	cl,[drive]
 33538                                  	; 27/07/2023
 33539                                  	;mov	ax,DOSBIODATASEG ; 0070h	
 33540                                  	;mov	ds,ax
 33541                                  
 33542 0000354C BA7000                  	mov	dx,DOSBIODATASEG
 33543 0000354F 8EDA                    	mov	ds,dx
 33544                                  
 33545 00003551 F6C404                  	test	ah,flagec35	; test byte [cs:switches],flagec35
 33546 00003554 7408                    	jz	short not_ec35
 33547                                  
 33548                                  	;mov	al,1			; assume drive 0
 33549                                  	;shl	al,cl			; set proper bit depending on drive
 33550                                  	;;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 33551                                  	;or	[ec35_flag],al		; set the bit in the permanent flags
 33552                                  	; 27/07/2023
 33553 00003556 B401                    	mov	ah,1
 33554 00003558 D2E4                    	shl	ah,cl
 33555 0000355A 0826[2905]              	or	[ec35_flag],ah
 33556                                  
 33557                                  ; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 33558                                  ;	MSDOS 6.21 IO.SYS - SYINIT:3EB0h	
 33559                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33560                                  not_ec35:
 33561                                  ;	Now adjust the BIOS's EOT variable if our new drive has more
 33562                                  ;	sectors per track than any old ones.
 33563                                  
 33564                                  	; 27/07/2023
 33565                                  	;;mov	al,[cs:deviceparameters+20]
 33566                                  	;mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 33567                                  	
 33568                                  	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 33569 0000355E 3A06[2C01]              	cmp	al,[eot]
 33570 00003562 7603                    	jbe	short eot_ok
 33571 00003564 A2[2C01]                	mov	[eot],al
 33572                                  eot_ok:
 33573 00003567 5A                      	pop	dx			; fix up all the registers
 33574 00003568 59                      	pop	cx
 33575 00003569 5B                      	pop	bx
 33576 0000356A 58                      	pop	ax
 33577 0000356B 1F                      	pop	ds ; 13/05/2019
 33578 0000356C C3                      	retn
 33579                                  
 33580                                  ;----------------------------------------------------------------------------
 33581                                  ;
 33582                                  ; procedure : diddleback
 33583                                  ;
 33584                                  ; replace default values for further drivparm commands
 33585                                  ;
 33586                                  ;----------------------------------------------------------------------------
 33587                                  
 33588                                  diddleback:
 33589 0000356D 1E                      	push	ds
 33590 0000356E 0E                      	push	cs
 33591 0000356F 1F                      	pop	ds
 33592                                  	;mov	word [deviceparameters+4],80
 33593 00003570 C706[DE48]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 33594                                  	;mov	byte [deviceparameters+1],2
 33595 00003576 C606[DB48]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 33596                                  	;mov	word [deviceparameters+2],0
 33597 0000357B C706[DC48]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 33598 00003581 C706[034A]0000          	mov	word [switches],0	    ; zero all switches
 33599 00003587 1F                      	pop	ds
 33600 00003588 C3                      	retn
 33601                                  
 33602                                  
 33603                                  ; 03/01/2023
 33604                                  %if 0
 33605                                  
 33606                                  ; 15/04/2019 - Retro DOS v4.0
 33607                                  
 33608                                  ;----------------------------------------------------------------------------
 33609                                  ;
 33610                                  ; procedure : parseline
 33611                                  ;
 33612                                  ; entry point is parseline. al contains the first character in command line.
 33613                                  ;
 33614                                  ;----------------------------------------------------------------------------
 33615                                  
 33616                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 33617                                  	; (SYSINIT:3EDFh)
 33618                                  
 33619                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33620                                  	; (SYSINIT:30ACh)
 33621                                  parseline:
 33622                                  	; 03/01/2023
 33623                                  	; ds = cs ; *
 33624                                  
 33625                                  	;push	ds ; *
 33626                                  
 33627                                  	;push	cs ; *
 33628                                  	;pop	ds ; *
 33629                                  
 33630                                  nextswtch:
 33631                                  	cmp	al,cr			; carriage return?
 33632                                  	je	short done_line
 33633                                  	cmp	al,lf			; linefeed?
 33634                                  	je	short put_back		; put it back and done
 33635                                  
 33636                                  ; anything less or equal to a space is ignored.
 33637                                  
 33638                                  	cmp	al,' '                  ; space?
 33639                                  	jbe	short getnext		; skip over space
 33640                                  	cmp	al,'/'
 33641                                  	je	short getparm
 33642                                  	stc				; mark error invalid-character-in-input
 33643                                  	;jmp	short exitpl
 33644                                  	; 03/01/2023
 33645                                  swterr:
 33646                                  	retn
 33647                                  
 33648                                  getparm:
 33649                                  	call	check_switch
 33650                                  	mov	[switches],bx		; save switches read so far
 33651                                  	jc	short swterr
 33652                                  getnext:
 33653                                  	call	getchr
 33654                                  	;jc	short done_line
 33655                                  	;jmp	short nextswtch
 33656                                  	; 03/01/2023
 33657                                  	jnc	short nextswtch
 33658                                  ;swterr:
 33659                                  	;jmp	short exitpl		; exit if error
 33660                                  
 33661                                  done_line:
 33662                                  	; 12/12/2022
 33663                                  	test	byte [switches],flagdrive ; 8
 33664                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 33665                                  	jnz	short okay
 33666                                  	stc				; mark error no-drive-specified
 33667                                  	;jmp	short exitpl
 33668                                  	; 03/01/2023
 33669                                  	retn
 33670                                  
 33671                                  okay:
 33672                                  	mov	ax,[switches]
 33673                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 33674                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 33675                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 33676                                  	;clc			    ; everything is fine
 33677                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33678                                  	; 12/12/2022
 33679                                  	; cf=0
 33680                                  	;clc
 33681                                  	;call	setdeviceparameters
 33682                                  	; 03/01/2023
 33683                                  	jmp	setdeviceparameters
 33684                                  ;exitpl:
 33685                                  	; 03/01/2023
 33686                                  	; ds = cs
 33687                                  	;pop	ds ; *
 33688                                  	retn
 33689                                  put_back:
 33690                                  	inc	word [count]		; one more char to scan
 33691                                  	dec	word [chrptr]		; back up over linefeed
 33692                                  	jmp	short done_line
 33693                                  
 33694                                  %endif
 33695                                  
 33696                                  ;----------------------------------------------------------------------------
 33697                                  ;
 33698                                  ; procedure : check_switch
 33699                                  ;
 33700                                  ; processes a switch in the input. it ensures that the switch is valid, and
 33701                                  ; gets the number, if any required, following the switch. the switch and the
 33702                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 33703                                  ; error.
 33704                                  ;
 33705                                  ;----------------------------------------------------------------------------
 33706                                  
 33707                                  check_switch:
 33708 00003589 E805F4                  	call	getchr
 33709                                  	;jc	short err_check
 33710 0000358C 724E                    	jc	short err_chk
 33711 0000358E 24DF                            and     al,0DFh                 ; convert it to upper case
 33712 00003590 3C41                    	cmp	al,'A'
 33713                                  	;jb	short err_check
 33714 00003592 7248                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 33715 00003594 3C5A                    	cmp	al,'Z'
 33716 00003596 7743                    	ja	short err_check
 33717                                  
 33718 00003598 06                      	push	es
 33719                                  
 33720 00003599 0E                      	push	cs
 33721 0000359A 07                      	pop	es
 33722                                  
 33723 0000359B 8A0E[964A]              	mov	cl,[switchlist]		; get number of valid switches
 33724 0000359F B500                    	mov	ch,0
 33725 000035A1 BF[974A]                	mov	di,1+switchlist		; point to string of valid switches
 33726 000035A4 F2AE                    	repne	scasb
 33727                                  
 33728 000035A6 07                      	pop	es
 33729 000035A7 7532                    	jnz	short err_check
 33730                                  
 33731 000035A9 B80100                  	mov	ax,1
 33732 000035AC D3E0                    	shl	ax,cl			; set bit to indicate switch
 33733 000035AE 8B1E[034A]              	mov	bx,[switches]		; get switches so far
 33734 000035B2 09C3                    	or	bx,ax			; save this with other switches
 33735 000035B4 89C1                    	mov	cx,ax
 33736                                  	; 12/12/2022
 33737 000035B6 A8F8                    	test	al,switchnum ; 0F8h
 33738                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 33739 000035B8 741E                    	jz	short done_swtch
 33740                                  
 33741 000035BA E8D4F3                  	call	getchr
 33742 000035BD 721A                    	jc	short err_swtch
 33743                                  
 33744 000035BF 3C3A                    	cmp	al,':'
 33745 000035C1 7516                    	jne	short err_swtch
 33746                                  
 33747 000035C3 E8CBF3                  	call	getchr
 33748 000035C6 53                      	push	bx			; preserve switches
 33749                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33750                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 33751                                  	; 12/12/2022
 33752                                  	; ds = cs
 33753 000035C7 C606[AC02]20            	mov	byte [sepchr],' '
 33754 000035CC E8AD0D                  	call	getnum
 33755                                  	;mov	byte [cs:sepchr],0
 33756                                  	; 12/12/2022
 33757 000035CF C606[AC02]00            	mov	byte [sepchr],0
 33758 000035D4 5B                      	pop	bx			; restore switches
 33759                                  
 33760                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 33761                                  ; not check for carry set here. if there is an error, it will be detected
 33762                                  ; further on (hopefully).
 33763                                  
 33764 000035D5 E80500                  	call	process_num
 33765                                  
 33766                                  done_swtch:
 33767                                  	;clc
 33768                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33769                                  	; 12/12/2022
 33770                                  	; cf=0
 33771                                  	;clc
 33772 000035D8 C3                      	retn
 33773                                  
 33774                                  err_swtch:
 33775 000035D9 31CB                    	xor	bx,cx			; remove this switch from the records
 33776                                  err_check:
 33777 000035DB F9                      	stc
 33778                                  err_chk:
 33779 000035DC C3                      	retn
 33780                                  
 33781                                  ;----------------------------------------------------------------------------
 33782                                  ;
 33783                                  ; procedure : process_num
 33784                                  ;
 33785                                  ; this routine takes the switch just input, and the number following (if any),
 33786                                  ; and sets the value in the appropriate variable. if the number input is zero
 33787                                  ; then it does nothing - it assumes the default value that is present in the
 33788                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 33789                                  ;
 33790                                  ;----------------------------------------------------------------------------
 33791                                  
 33792                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33793                                  	; (SYSINIT:3156h)
 33794                                  process_num:
 33795 000035DD 850E[034A]              	test	[switches],cx		; if this switch has been done before,
 33796 000035E1 752B                    	jnz	short done_ret		; ignore this one.
 33797                                  	; 12/12/2022
 33798 000035E3 F6C108                  	test	cl,flagdrive ; 8
 33799                                  	;test	cx,flagdrive ; 8
 33800 000035E6 7404                    	jz	short try_f
 33801 000035E8 A2[024A]                	mov	byte [drive],al
 33802                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33803                                  	;jmp	short done_ret
 33804                                  	; 12/12/2022
 33805                                  	; cf=0
 33806 000035EB C3                      	retn	; 13/05/2019
 33807                                  try_f:
 33808                                  	; 12/12/2022
 33809 000035EC F6C180                  	test	cl,flagff ; 80h
 33810                                  	;test	cx,flagff ; 80h
 33811 000035EF 7404                    	jz	short try_t
 33812                                  
 33813                                  ; ensure that we do not get bogus form factors that are not supported
 33814                                  
 33815                                  	;mov	[deviceparameters+1],al
 33816 000035F1 A2[DB48]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 33817                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33818                                  	;jmp	short done_ret
 33819                                  	; 12/12/2022
 33820                                  	; cf=0
 33821 000035F4 C3                      	retn	; 13/05/2019
 33822                                  try_t:
 33823 000035F5 09C0                    	or	ax,ax
 33824 000035F7 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 33825                                  	; 12/12/2022
 33826 000035F9 F6C110                  	test	cl,flagcyln ; 10h
 33827                                  	;test	cx,flagcyln ; 10h
 33828 000035FC 7404                    	jz	short try_s
 33829                                  
 33830                                  	;mov	[deviceparameters+4],ax
 33831 000035FE A3[DE48]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 33832                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33833                                  	;jmp	short done_ret
 33834                                  	; 12/12/2022
 33835                                  	; cf=0
 33836 00003601 C3                      	retn	; 13/05/2019
 33837                                  try_s:
 33838                                  	; 12/12/2022
 33839 00003602 F6C120                  	test	cl,flagseclim ; 20h
 33840                                  	;test	cx,flagseclim ; 20h
 33841 00003605 7404                    	jz	short try_h
 33842 00003607 A3[004A]                	mov	[slim],ax
 33843                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33844                                  	;jmp	short done_ret
 33845                                  	; 12/12/2022
 33846                                  	; cf=0
 33847 0000360A C3                      	retn	; 13/05/2019
 33848                                  
 33849                                  ; must be for number of heads
 33850                                  
 33851                                  try_h:
 33852 0000360B A3[FE49]                	mov	[hlim],ax
 33853                                  done_ret:
 33854                                  	;clc
 33855                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33856                                  	; 12/12/2022
 33857                                  	; cf=0 (test instruction resets cf)
 33858                                  	;clc
 33859 0000360E C3                      	retn
 33860                                  
 33861                                  
 33862                                  ; 03/01/2023 - Retro DOS v4.2
 33863                                  %if 1
 33864                                  
 33865                                  ; 15/04/2019 - Retro DOS v4.0
 33866                                  
 33867                                  ;----------------------------------------------------------------------------
 33868                                  ;
 33869                                  ; procedure : parseline
 33870                                  ;
 33871                                  ; entry point is parseline. al contains the first character in command line.
 33872                                  ;
 33873                                  ;----------------------------------------------------------------------------
 33874                                  
 33875                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 33876                                  	; (SYSINIT:3EDFh)
 33877                                  
 33878                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33879                                  	; (SYSINIT:30ACh)
 33880                                  parseline:
 33881                                  	; 03/01/2023
 33882                                  	; ds = cs ; *
 33883                                  
 33884                                  	;push	ds ; *
 33885                                  
 33886                                  	;push	cs ; *
 33887                                  	;pop	ds ; *
 33888                                  
 33889                                  nextswtch:
 33890 0000360F 3C0D                    	cmp	al,cr			; carriage return?
 33891 00003611 741C                    	je	short done_line
 33892 00003613 3C0A                    	cmp	al,lf			; linefeed?
 33893 00003615 7421                    	je	short put_back		; put it back and done
 33894                                  
 33895                                  ; anything less or equal to a space is ignored.
 33896                                  
 33897 00003617 3C20                    	cmp	al,' '                  ; space?
 33898 00003619 760F                    	jbe	short getnext		; skip over space
 33899 0000361B 3C2F                    	cmp	al,'/'
 33900 0000361D 7402                    	je	short getparm
 33901 0000361F F9                      	stc				; mark error invalid-character-in-input
 33902                                  	;jmp	short exitpl
 33903                                  	; 03/01/2023
 33904                                  swterr:
 33905 00003620 C3                      	retn
 33906                                  
 33907                                  getparm:
 33908 00003621 E865FF                  	call	check_switch
 33909 00003624 891E[034A]              	mov	[switches],bx		; save switches read so far
 33910 00003628 72F6                    	jc	short swterr
 33911                                  getnext:
 33912 0000362A E864F3                  	call	getchr
 33913                                  	;jc	short done_line
 33914                                  	;jmp	short nextswtch
 33915                                  	; 03/01/2023
 33916 0000362D 73E0                    	jnc	short nextswtch
 33917                                  ;swterr:
 33918                                  	;jmp	short exitpl		; exit if error
 33919                                  
 33920                                  done_line:
 33921                                  	; 12/12/2022
 33922 0000362F F606[034A]08            	test	byte [switches],flagdrive ; 8
 33923                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 33924 00003634 750C                    	jnz	short okay
 33925 00003636 F9                      	stc				; mark error no-drive-specified
 33926                                  	;jmp	short exitpl
 33927                                  	; 03/01/2023
 33928 00003637 C3                      	retn
 33929                                  
 33930                                  ;exitpl:
 33931                                  	; 03/01/2023
 33932                                  	; ds = cs
 33933                                  	;;pop	ds ; *
 33934                                  	;retn
 33935                                  
 33936                                  put_back:
 33937 00003638 FF06[5403]              	inc	word [count]		; one more char to scan
 33938 0000363C FF0E[5803]              	dec	word [chrptr]		; back up over linefeed
 33939 00003640 EBED                    	jmp	short done_line
 33940                                  
 33941                                  okay:
 33942 00003642 A1[034A]                	mov	ax,[switches]
 33943 00003645 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 33944 00003648 A3[DC48]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 33945 0000364B C706[0049]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 33946                                  	;clc			    ; everything is fine
 33947                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33948                                  	; 12/12/2022
 33949                                  	; cf=0
 33950                                  	;clc
 33951                                  	;call	setdeviceparameters
 33952                                  	; 03/01/2023
 33953                                  	;jmp	short setdeviceparameters
 33954                                  
 33955                                  %endif
 33956                                  
 33957                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 33958                                  
 33959                                  ;----------------------------------------------------------------------------
 33960                                  ;
 33961                                  ; procedure : setdeviceparameters
 33962                                  ;
 33963                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 33964                                  ; system based on the form factor. it is assumed that the bpbs for the
 33965                                  ; various form factors are present in the bpbtable. for hard files,
 33966                                  ; the recommended bpb is the same as the bpb on the drive.
 33967                                  ; no attempt is made to preserve registers since we are going to jump to
 33968                                  ; sysinit straight after this routine.
 33969                                  ;
 33970                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 33971                                  ;	  we always return no carry
 33972                                  ;
 33973                                  ;	note:  there is a routine by the same name in msdioctl.asm
 33974                                  ;
 33975                                  ;----------------------------------------------------------------------------
 33976                                  
 33977                                  ; 15/04/2019 - Retro DOS v4.0
 33978                                  
 33979                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33980                                  
 33981                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33982                                  	; (SYSINIT:3FC4h)
 33983                                  
 33984                                  setdeviceparameters:
 33985                                  	; 03/01/2023
 33986                                  	; ds = cs
 33987                                  
 33988 00003651 06                      	push	es
 33989                                  
 33990 00003652 0E                      	push	cs
 33991 00003653 07                      	pop	es
 33992                                  
 33993 00003654 31DB                    	xor	bx,bx
 33994 00003656 8A1E[DB48]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 33995 0000365A 80FB00                  	cmp	bl,DEV_5INCH ; 0
 33996 0000365D 7506                    	jne	short got_80
 33997                                  
 33998 0000365F C706[DE48]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 33999                                  							; 48 tpi=40 cyl
 34000                                  got_80:
 34001 00003665 D1E3                    	shl	bx,1			; get index into bpb table
 34002 00003667 8BB7[824A]              	mov	si,[bpbtable+bx]	; get address of bpb
 34003                                  
 34004                                  	;mov	di,deviceparameters+7	
 34005                                  	; 02/11/2022
 34006 0000366B BF[E148]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 34007 0000366E B91F00                  	mov	cx,A_BPB.size ; 31
 34008 00003671 FC                      	cld
 34009                                  	;repe	movsb
 34010                                  	; 02/11/2022
 34011 00003672 F3A4                    	rep	movsb
 34012                                  
 34013 00003674 07                      	pop	es
 34014                                  
 34015                                  	; 12/12/2022
 34016 00003675 F606[034A]20            	test	byte [switches],flagseclim ; 20h
 34017                                  	;tklhhhtgest	word [switches],flagseclim ; 20h
 34018 0000367A 7406                    	jz	short see_heads
 34019                                  
 34020 0000367C A1[004A]                	mov	ax,[slim]
 34021                                  	;mov	[deviceparameters+20],ax
 34022 0000367F A3[EE48]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],ax
 34023                                  
 34024                                  see_heads:
 34025                                  	; 12/12/2022
 34026 00003682 F606[034A]40            	test	byte [switches],flagheads ; 40h
 34027                                  	;test	word [switches],flagheads ; 40h
 34028 00003687 7406                    	jz	short heads_not_altered
 34029                                  
 34030 00003689 A1[FE49]                	mov	ax,[hlim]
 34031                                  	;mov	[deviceparameters+22],ax	
 34032 0000368C A3[F048]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax
 34033                                  
 34034                                  heads_not_altered:
 34035                                  
 34036                                  ; set up correct media descriptor byte and sectors/cluster
 34037                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 34038                                  
 34039                                  	;mov	byte [deviceparameters+9],2
 34040                                  	; 02/11/2022
 34041                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],2
 34042                                  	; 03/01/2023
 34043 0000368F B80200                  	mov	ax,2	
 34044 00003692 A2[E348]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 2
 34045                                  
 34046 00003695 B3F0                    	mov	bl,0F0h			; get default mediabyte
 34047                                  
 34048                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 34049                                  
 34050                                  	;mov	bh,[deviceparameters+17]
 34051                                  	; 02/11/2022
 34052 00003697 8A3E[EB48]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR]
 34053                                  	
 34054                                  	; 03/01/2023
 34055                                  	; ax = 2
 34056 0000369B 3906[F048]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax ; >2 heads?
 34057                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],2 ; >2 heads?
 34058 0000369F 773C                    	ja	short got_correct_mediaid ; just use default if heads>2
 34059                                  
 34060 000036A1 7524                    	jne	short only_one_head	; one head, do one head stuff
 34061                                  
 34062                                  ;	two head drives will use the mediadescriptor from the bpb
 34063                                  
 34064 000036A3 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 34065                                  
 34066                                  ;	two sided drives have two special cases to look for. One is
 34067                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 34068                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 34069                                  ;	   one sector/cluster.
 34070                                  
 34071                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 34072                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 34073                                  ;	   type of 2 headed drive is all set.
 34074                                  
 34075 000036A5 833E[EE48]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],18
 34076 000036AA 7509                    	jne	short not_144m
 34077 000036AC 833E[DE48]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 34078 000036B1 7502                    	jne	short not_144m
 34079                                  
 34080                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 34081                                  
 34082 000036B3 EB24                    	jmp	short got_one_secperclus_drive
 34083                                  
 34084                                  ;	check for 320K
 34085                                  
 34086                                  not_144m:
 34087 000036B5 833E[DE48]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 34088 000036BA 7521                    	jne	short got_correct_mediaid
 34089 000036BC 833E[EE48]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 34090 000036C1 751A                    	jne	short got_correct_mediaid
 34091                                  
 34092 000036C3 B3FC                    	mov	bl,0FCh
 34093 000036C5 EB16                    	jmp	short got_correct_mediaid
 34094                                  
 34095                                  only_one_head:
 34096                                  
 34097                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 34098                                  
 34099 000036C7 803E[DB48]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 34100 000036CC 740B                    	je	short got_one_secperclus_drive
 34101                                  
 34102                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 34103                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 34104                                  ;	  besides 8 will be considered 0fch
 34105                                  
 34106 000036CE B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 34107 000036D0 833E[EE48]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 34108                                  	; 12/12/2022
 34109 000036D5 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 34110                                  
 34111 000036D7 B3FE                    	mov	bl,0FEh			; 160K mediaid
 34112                                  
 34113                                  ;	we've either got a one sided drive, or a 1.44M drive
 34114                                  ;	  either case we'll use 1 sector per cluster instead of 2
 34115                                  
 34116                                  got_one_secperclus_drive:
 34117                                  	; 03/01/2023
 34118                                  	; ax = 2
 34119 000036D9 48                      	dec	ax  ; ax = 1
 34120 000036DA A2[E348]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 1
 34121                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],1
 34122                                  
 34123                                  got_correct_mediaid:
 34124 000036DD 881E[EB48]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR],bl
 34125                                  
 34126                                  ;	 Calculate the correct number of Total Sectors on medium
 34127                                  
 34128 000036E1 A1[DE48]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 34129 000036E4 F726[F048]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS]
 34130 000036E8 F726[EE48]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 34131 000036EC A3[E948]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS],ax
 34132 000036EF F8                      	clc				; we currently return no errors
 34133                                  
 34134 000036F0 C3                      	retn
 34135                                  
 34136                                  ;	M047 -- end rewritten routine
 34137                                  
 34138                                  ;----------------------------------------------------------------------------
 34139                                  ;
 34140                                  ; procedure : organize
 34141                                  ;
 34142                                  ;----------------------------------------------------------------------------
 34143                                  
 34144                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 34145                                  	; (SYSINIT:3234h)
 34146                                  
 34147                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 34148                                  	; (SYSINIT:4067h)
 34149                                  
 34150                                  organize:
 34151                                  	; 03/01/2023
 34152                                  	; ds = cs
 34153 000036F1 8B0E[5403]              	mov	cx,[count]
 34154                                  	;mov	cx,[cs:count]
 34155 000036F5 E323                    	jcxz	nochar1
 34156                                  
 34157                                  ;ifndef	MULTI_CONFIG
 34158                                  ;
 34159                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 34160                                  ;;   because we the case of values in SET commands preserved
 34161                                  ;
 34162                                  ;	call	mapcase
 34163                                  ;endif
 34164                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34165                                  	; 03/01/2023 - Retro DOS v4.2
 34166                                  	;call	mapcase
 34167                                  
 34168 000036F7 31F6                    	xor	si,si
 34169 000036F9 89F7                    	mov	di,si
 34170 000036FB 31C0                    	xor	ax,ax
 34171                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 34172                                  	;;mov	byte [cs:com_level],0
 34173                                  	; 12/12/2022
 34174                                  	;mov	[cs:com_level],al ; 0
 34175                                  	; 03/01/2023
 34176                                  	; ds = cs
 34177 000036FD A2[4E03]                	mov	[com_level],al ; 0
 34178                                  org1:
 34179 00003700 E8FA01                  	call	skip_comment
 34180 00003703 740D                    	jz	short end_commd_line	; found a comment string and skipped.
 34181 00003705 E8DB01                  	call	get2			; not a comment string. then get a char.
 34182 00003708 3C0A                    	cmp	al,lf ; 0Ah
 34183 0000370A 7406                    	je	short end_commd_line	; starts with a blank line.
 34184 0000370C 3C20                    	cmp	al,' ' ; 20h
 34185 0000370E 76F0                    	jbe	short org1		; skip leading control characters
 34186 00003710 EB0A                    	jmp	short findit
 34187                                  
 34188                                  end_commd_line:
 34189 00003712 AA                      	stosb				; store line feed char in buffer for the linecount.
 34190                                  	;mov	byte [cs:com_level],0	; reset the command level.
 34191                                  	; 03/01/2023
 34192                                  	; ds = cs
 34193 00003713 C606[4E03]00            	mov	byte [com_level],0
 34194 00003718 EBE6                    	jmp	short org1
 34195                                  
 34196                                  nochar1:
 34197 0000371A F9                      	stc
 34198 0000371B C3                      	retn
 34199                                  
 34200                                  findit:
 34201 0000371C 51                      	push	cx
 34202 0000371D 56                      	push	si
 34203 0000371E 57                      	push	di
 34204 0000371F 89F5                    	mov	bp,si
 34205 00003721 4D                      	dec	bp
 34206 00003722 BE[F747]                        mov     si,comtab		; prepare to search command table
 34207 00003725 B500                    	mov	ch,0
 34208                                  findcom:
 34209 00003727 89EF                    	mov	di,bp
 34210 00003729 8A0C                    	mov	cl,[si]
 34211 0000372B 46                      	inc	si
 34212 0000372C E345                    	jcxz	nocom
 34213                                  
 34214                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34215                                  
 34216                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 34217                                  
 34218                                  ;ifdef	MULTI_CONFIG
 34219                                  
 34220                                  ;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 34221                                  ;   time skip the upcoming delimiter test (since ";" need not be followed by
 34222                                  ;   anything in particular)
 34223                                  
 34224 0000372E 26803D3B                	cmp	byte [es:di],CONFIG_SEMICOLON  ; ';'
 34225 00003732 7430                    	je	short semicolon
 34226                                  loopcom:
 34227                                  	;mov	al,[es:di]
 34228                                  	;inc	di
 34229                                  	;and	al,~20h ; 0DFh		; force upper case
 34230                                  	;inc	si                      ; compare to byte @es:di
 34231                                  	;cmp	al,[si-1]
 34232                                  	; 28/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 34233 00003734 268A25                  	mov	ah,[es:di]
 34234 00003737 47                      	inc	di
 34235 00003738 80E4DF                  	and	ah,~20h ; 0DFh		
 34236 0000373B AC                      	lodsb			; mov al,[si]
 34237                                  				; inc si
 34238                                  	;cmp	al,ah
 34239                                  	;loope	loopcom
 34240                                  	; 28/07/2023
 34241 0000373C 30C4                    	xor	ah,al		; result: ah = 0 (*) if ah = al
 34242 0000373E E1F4                    	loopz	loopcom
 34243                                  ;else
 34244                                  ;	repe	cmpsb
 34245                                  ;endif
 34246                                  	; 02/11/2022
 34247                                  	; 03/01/2023 - Retro DOS v4.2
 34248                                  	;repe	cmpsb
 34249                                  
 34250                                  	; 28/07/2023
 34251                                  	;lahf
 34252 00003740 01CE                            add     si,cx                   ; bump to next position without affecting flags
 34253                                  	;sahf
 34254 00003742 AC                              lodsb                           ; get indicator letter
 34255                                  	;jnz	short findcom
 34256                                          ; 28/07/2023
 34257 00003743 08E4                    	or	ah,ah			; (*)
 34258 00003745 75E0                    	jnz	short findcom		
 34259                                  	
 34260 00003747 26803D0D                	cmp     byte [es:di],cr		; the next char might be cr,lf
 34261 0000374B 7421                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 34262 0000374D 26803D0A                	cmp	byte [es:di],lf
 34263 00003751 741B                    	je	short gotcom0
 34264                                  
 34265                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34266                                  
 34267                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 34268                                  
 34269                                  ;ifdef	MULTI_CONFIG
 34270                                  
 34271                                  ;   Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 34272                                  
 34273 00003753 3C5B                    	cmp	al,CONFIG_BEGIN  ; '['
 34274 00003755 7417                    	je	short gotcom0
 34275                                  ;endif
 34276 00003757 50                      	push	ax
 34277 00003758 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 34278                                  
 34279                                  ;ifdef	MULTI_CONFIG
 34280                                  
 34281                                  ;   If keyword is *immediately* followed by a question mark (?), then
 34282                                  ;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 34283                                  ;   stored in the CONFIG.SYS memory image.
 34284                                  
 34285 0000375B 3C3F                    	cmp	al,'?'                  ; explicit interactive command?
 34286 0000375D 7509                    	jne	short no_query		; no
 34287 0000375F 58                      	pop	ax                      ; yes, so retrieve the original code
 34288                                  	;or	al,80h ; 03/01/2023
 34289 00003760 0C80                    	or	al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 34290 00003762 EB0A                    	jmp	short gotcom0           ;
 34291                                  semicolon:
 34292 00003764 B030                    	mov	al,CONFIG_REM ; '0'
 34293 00003766 EB06                    	jmp	short gotcom0
 34294                                  no_query:
 34295                                  ;endif  ;MULTI_CONFIG
 34296                                  
 34297                                  	; 02/11/2022
 34298                                  	; 03/01/2023 - Retro DOS v4.2
 34299                                  	;push	ax
 34300                                  	;mov	al,[es:di]		; now the next char. should be a delim.
 34301                                  
 34302 00003768 E8450B                  	call	delim
 34303                                  no_delim:
 34304 0000376B 58                      	pop	ax
 34305 0000376C 75B9                    	jnz	short findcom
 34306                                  gotcom0:
 34307 0000376E 5F                      	pop	di
 34308 0000376F 5E                      	pop	si
 34309 00003770 59                      	pop	cx
 34310 00003771 EB0F                    	jmp	short gotcom
 34311                                  nocom:
 34312 00003773 5F                      	pop	di
 34313 00003774 5E                      	pop	si
 34314 00003775 59                      	pop	cx
 34315 00003776 B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 34316 00003778 AA                      	stosb				; save indicator char.
 34317                                  _skipline:
 34318 00003779 E86701                  	call	get2
 34319 0000377C 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 34320 0000377E 75F9                            jne     short _skipline
 34321 00003780 EB90                    	jmp	short end_commd_line	; handle next command line
 34322                                  gotcom:
 34323 00003782 AA                              stosb                           ; save indicator char in buffer
 34324                                  
 34325                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34326                                  
 34327                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 34328                                  
 34329                                  ;ifdef	MULTI_CONFIG
 34330                                  
 34331                                  ;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 34332                                  ;   it screws up the direct comparisons below.
 34333                                  
 34334 00003783 247F                    	and	al,~CONFIG_OPTION_QUERY ; 7Fh
 34335                                  ;endif
 34336                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 34337                                  	; 03/01/2023
 34338                                  	; ds = cs
 34339 00003785 A2[5203]                	mov	[cmd_indicator],al	; save it for the future use.
 34340                                  
 34341                                  ;ifdef	MULTI_CONFIG
 34342                                  
 34343                                  ;   There is no whitespace/delimiter between the "begin block" character
 34344                                  ;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 34345                                  ;   skipping code
 34346                                  
 34347 00003788 3C5B                    	cmp	al,CONFIG_BEGIN
 34348 0000378A 7455                    	je	short org31
 34349 0000378C 3C4F                    	cmp	al,CONFIG_SUBMENU ; 'O'
 34350 0000378E 740F                    	je	short no_mapcase
 34351 00003790 3C45                    	cmp	al,CONFIG_MENUITEM ; 'E'
 34352 00003792 740B                    	je	short no_mapcase
 34353 00003794 3C41                    	cmp	al,CONFIG_MENUDEFAULT ; 'A'
 34354 00003796 7407                    	je	short no_mapcase
 34355 00003798 3C4A                    	cmp	al,CONFIG_INCLUDE ; 'J'
 34356 0000379A 7403                    	je	short no_mapcase
 34357 0000379C E83A0B                  	call	mapcase			; map case of rest of line to UPPER
 34358                                  no_mapcase:
 34359                                  ;endif
 34360                                  	;; 02/11/2022
 34361                                  	;;mov	[cs:cmd_indicator],al	; save it for the future use.
 34362                                  	;; 03/01/2023
 34363                                  	;; ds = cs
 34364                                  	;mov	[cmd_indicator],al
 34365                                  org2:	
 34366 0000379F E84101                  	call    get2                    ; skip the command name until delimiter
 34367 000037A2 3C0A                            cmp     al,lf 	    ; 0Ah
 34368 000037A4 740F                    	je	short org21
 34369 000037A6 3C0D                    	cmp	al,cr 	    ; 0Dh	
 34370 000037A8 740B                    	je	short org21
 34371                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34372                                  	; 03/01/2023 - Retro DOS v4.2
 34373 000037AA 3C2F                    	cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 34374 000037AC 7407                    	je	short org21		; T-RICHJ: to be parsed properly.
 34375                                  
 34376 000037AE E8FF0A                  	call	delim
 34377 000037B1 75EC                            jnz	short org2
 34378 000037B3 EB02                    	jmp	short org3
 34379                                  org21:					;if cr or lf then
 34380 000037B5 4E                      	dec	si			; undo si, cx register
 34381 000037B6 41                      	inc	cx			;  and continue
 34382                                  org3:	
 34383                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 34384                                  	;je	short get_cmt_token
 34385                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34386                                  	; 03/01/2023 - Retro DOS v4.2	
 34387                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 34388                                  	;je	short org_file
 34389                                  	;cmp	byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 34390                                  	;je	short org_file
 34391                                  	;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 34392                                  	;je	short org_file
 34393                                  	; 02/11/2022
 34394                                  	; 03/01/2023 - Retro DOS v4.2
 34395                                  	;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 34396                                  	;;je	short org_file
 34397                                  	;cmp	byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 34398                                  	;je	short org_file
 34399                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 34400                                  	;je	short org_switch
 34401                                  
 34402                                  	; 03/01/2023
 34403                                  	; ds = cs
 34404                                  
 34405 000037B7 803E[5203]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 34406 000037BC 745D                    	je	short get_cmt_token
 34407                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34408                                  	; 03/01/2023 - Retro DOS v4.2	
 34409 000037BE 803E[5203]44            	cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 34410 000037C3 7430                    	je	short org_file
 34411 000037C5 803E[5203]49            	cmp	byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 34412 000037CA 7429                    	je	short org_file
 34413 000037CC 803E[5203]57            	cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 34414 000037D1 7422                    	je	short org_file
 34415                                  	; 02/11/2022
 34416                                  	; 03/01/2023 - Retro DOS v4.2
 34417                                  	;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 34418                                  	;je	short org_file
 34419 000037D3 803E[5203]53                    cmp	byte [cmd_indicator],CONFIG_SHELL ; 'S'
 34420 000037D8 741B                    	je	short org_file
 34421 000037DA 803E[5203]31                    cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 34422 000037DF 7403                    	je	short org_switch
 34423                                  	
 34424                                  org31:
 34425 000037E1 E99500                  	jmp	org4
 34426                                  
 34427                                  org_switch:
 34428 000037E4 E81601                  	call	skip_comment
 34429 000037E7 7472                    	jz	short end_commd_line_brdg
 34430                                  
 34431 000037E9 E8F700                  	call	get2
 34432 000037EC E8C90A                  	call	org_delim
 34433 000037EF 74F3                    	jz	short org_switch
 34434                                  
 34435 000037F1 AA                      	stosb
 34436 000037F2 E99300                  	jmp	org5
 34437                                  
 34438                                  org_file:			; get the filename and put 0 at end
 34439 000037F5 E80501                  	call	skip_comment
 34440 000037F8 7464                    	jz	short org_put_zero
 34441                                  
 34442 000037FA E8E600                  	call	get2		; not a comment
 34443 000037FD E8B00A                  	call	delim
 34444 00003800 74F3                    	jz	short org_file	; skip the possible delimiters
 34445                                  
 34446 00003802 AA                      	stosb			; copy the first non delim char found in buffer
 34447                                  
 34448                                  org_copy_file:
 34449 00003803 E8F700                  	call	skip_comment	; comment char in the filename?
 34450 00003806 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 34451                                  
 34452 00003808 E8D800                  	call	get2
 34453 0000380B 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 34454 0000380D 7457                    	je	short end_file_slash ; this will be the special case.
 34455                                  
 34456 0000380F AA                      	stosb			; save the char. in buffer
 34457 00003810 E89D0A                  	call	delim
 34458 00003813 7459                    	jz	short end_copy_file
 34459                                  
 34460 00003815 3C20                    	cmp	al, ' '
 34461 00003817 77EA                    	ja	short org_copy_file ; keep copying
 34462 00003819 EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 34463                                  
 34464                                  get_cmt_token:			; get the token. just max. 2 char.
 34465 0000381B E8C500                  	call	get2
 34466 0000381E 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 34467 00003820 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 34468 00003822 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 34469 00003824 74F5                    	je	short get_cmt_token ;  character.)
 34470 00003826 3C3D                    	cmp	al,'='		; = is special in this case.
 34471 00003828 74F1                    	je	short get_cmt_token
 34472 0000382A 3C0D                    	cmp	al,cr
 34473 0000382C 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 34474 0000382E 3C0A                    	cmp	al,lf
 34475 00003830 7422                    	je	short get_cmt_end
 34476                                  
 34477                                  	; 03/01/2023
 34478                                  	; ds = cs
 34479                                  	;mov	[cs:cmmt1],al	; store it
 34480                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 34481 00003832 A2[5003]                	mov	[cmmt1],al	; store it
 34482 00003835 C606[4F03]01            	mov	byte [cmmt],1	; 1 char. so far.
 34483 0000383A E8A600                  	call	get2
 34484 0000383D 3C20                    	cmp	al,' ' ; 20h
 34485 0000383F 7413                    	je	short get_cmt_end
 34486 00003841 3C09                    	cmp	al,tab ; 9
 34487 00003843 740F                    	je	short get_cmt_end
 34488 00003845 3C0D                    	cmp	al,cr  ; 0Dh
 34489 00003847 740B                    	je	short get_cmt_end
 34490 00003849 3C0A                    	cmp	al,lf  ; 0Ah
 34491 0000384B 740E                    	je	short end_commd_line_brdg
 34492                                  
 34493                                  	;mov	[cs:cmmt2],al
 34494                                  	;inc	byte [cs:cmmt]
 34495                                  	; 03/01/2023
 34496 0000384D A2[5103]                	mov	[cmmt2],al
 34497 00003850 FE06[4F03]              	inc	byte [cmmt]
 34498                                  
 34499                                  get_cmt_end:
 34500 00003854 E88C00                  	call	get2
 34501 00003857 3C0A                    	cmp	al,lf
 34502 00003859 75F9                    	jne	short get_cmt_end	; skip it.
 34503                                  end_commd_line_brdg: 
 34504 0000385B E9B4FE                  	jmp	end_commd_line		; else jmp to end_commd_line
 34505                                  
 34506                                  org_put_zero:				; make the filename in front of
 34507 0000385E 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 34508 00003862 47                      	inc	di
 34509 00003863 E9ACFE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 34510                                  
 34511                                  end_file_slash: 			; al = "/" option char.
 34512 00003866 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 34513 0000386A 47                      	inc	di			; and
 34514 0000386B AA                      	stosb				; store "/" after that.
 34515 0000386C EB1A                    	jmp	short org5		; continue with the rest of the line
 34516                                  
 34517                                  end_copy_file:
 34518 0000386E 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 34519 00003873 3C0A                    	cmp	al,lf
 34520 00003875 74E4                    	je	short end_commd_line_brdg
 34521 00003877 EB0F                    	jmp	short org5
 34522                                  
 34523                                  org4:					; org4 skips all delimiters after the command name except for '/'
 34524 00003879 E88100                  	call	skip_comment
 34525 0000387C 74DD                    	jz	short end_commd_line_brdg
 34526                                  
 34527 0000387E E86200                  	call	get2
 34528 00003881 E8340A                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 34529 00003884 74F3                    	jz	short org4
 34530 00003886 EB08                    	jmp	short org51
 34531                                  
 34532                                  org5:					; rest of the line
 34533 00003888 E87200                  	call	skip_comment		; comment?
 34534 0000388B 74CE                    	jz	short end_commd_line_brdg
 34535 0000388D E85300                  	call	get2			; not a comment.
 34536                                  
 34537                                  org51:
 34538 00003890 AA                      	stosb				; copy the character
 34539 00003891 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 34540 00003893 743A                    	je	short at_quote
 34541 00003895 3C20                    	cmp	al,' '  ; 20h
 34542 00003897 77EF                    	ja	short org5
 34543                                  					; M051 - Start
 34544                                  	; 03/01/2023
 34545                                  	; ds = cs
 34546 00003899 803E[5203]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 34547                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 34548 0000389E 7514                    	jne	short not_dh		; N: 
 34549 000038A0 3C0A                    	cmp	al,lf			; Q: is this line feed
 34550 000038A2 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 34551 000038A4 3C0D                    	cmp	al,cr			; Q: is this a cr
 34552 000038A6 75E0                    	jne	short org5		; N: 
 34553 000038A8 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 34554 000038AD AA                      	stosb				; put cr after blank
 34555 000038AE FE06[2735]              	inc	byte [insert_blank]
 34556                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 34557                                  					; inserted
 34558 000038B2 EBD4                    	jmp	short org5
 34559                                  not_dh:					; M051 - End
 34560                                  
 34561 000038B4 3C0A                    	cmp	al,lf			; line feed?
 34562 000038B6 740F                    	je	short org1_brdg		; handles the next command line.
 34563 000038B8 EBCE                    	jmp	short org5		; handles next char in this line.
 34564                                  
 34565                                  org_dhlf:				; M051 - Start
 34566                                  	; 03/01/2023
 34567                                  	; ds = cs
 34568 000038BA 803E[2735]01            	cmp	byte [insert_blank],1
 34569                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 34570 000038BF 7406                    	je	short org1_brdg		; Y:
 34571 000038C1 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 34572 000038C6 AA                      	stosb				; put lf after blank
 34573                                  					; M051 - End
 34574                                  org1_brdg:
 34575 000038C7 C606[2735]00            	mov	byte [insert_blank],0 
 34576                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 34577                                  					; M051: devicehigh
 34578 000038CC E931FE                  	jmp	org1
 34579                                  
 34580                                  at_quote:
 34581 000038CF 803E[4E03]00            	cmp	byte [com_level],0
 34582                                  	;cmp	byte [cs:com_level],0
 34583 000038D4 7407                    	je	short up_level
 34584                                  	;mov	byte [cs:com_level],0	; reset it.
 34585 000038D6 C606[4E03]00            	mov	byte [com_level],0
 34586 000038DB EBAB                    	jmp	short org5
 34587                                  
 34588                                  up_level:
 34589                                  	;inc	byte [cs:com_level]	; set it.
 34590 000038DD FE06[4E03]              	inc	byte [com_level]
 34591 000038E1 EBA5                    	jmp	short org5
 34592                                  
 34593                                  ;----------------------------------------------------------------------------
 34594                                  ;
 34595                                  ; procedure : get2
 34596                                  ;
 34597                                  ;----------------------------------------------------------------------------
 34598                                  
 34599                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 34600                                  	; (SYSINIT:33FAh)
 34601                                  
 34602                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 34603                                  	; (SYSINIT:4270h)
 34604                                  get2:
 34605 000038E3 E304                    	jcxz	noget
 34606                                  	;
 34607                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34608                                  	;;lods	byte ptr es:[si]
 34609                                  	; 12/12/2022
 34610 000038E5 26                      	es	
 34611 000038E6 AC                      	lodsb
 34612                                  	;mov	al, [es:si]
 34613                                  	;inc	si
 34614                                  	;
 34615 000038E7 49                      	dec	cx
 34616 000038E8 C3                      	retn
 34617                                  noget:
 34618 000038E9 59                      	pop	cx
 34619                                  	; 03/01/2023
 34620                                  	; ds = cs
 34621                                  	;mov	[cs:count],di ; 13/05/2019
 34622                                  	;mov	[cs:org_count],di
 34623 000038EA 893E[5403]              	mov	[count],di
 34624 000038EE 893E[5603]              	mov	[org_count],di
 34625 000038F2 31F6                    	xor	si,si
 34626                                  	;mov	[cs:chrptr],si
 34627 000038F4 8936[5803]              	mov	[chrptr],si
 34628                                  
 34629                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34630                                  
 34631                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 34632                                  
 34633                                  ;ifndef MULTI_CONFIG
 34634                                  ;	retn
 34635                                  ;else
 34636                                  
 34637                                  ;   This was the rather kludgy way out of procedure "organize", but instead
 34638                                  ;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 34639                                  ;   and the new boot menu stuff...
 34640                                  
 34641 000038F8 89F9                    	mov     cx,di
 34642 000038FA E9E300                  	jmp     menu_check
 34643                                  
 34644                                  ;endif
 34645                                  	; 02/11/2022
 34646                                  	; 03/01/2023 - Retro DOS v4.2
 34647                                  	;retn
 34648                                  
 34649                                  ;----------------------------------------------------------------------------
 34650                                  ;
 34651                                  ; procedure : skip_comment
 34652                                  ;
 34653                                  ;skip the commented string until lf, if current es:si-> a comment string.
 34654                                  ;in) es:si-> string
 34655                                  ;	 cx -> length.
 34656                                  ;out) zero flag not set if not found a comment string.
 34657                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 34658                                  ;	  the line feed character at this moment when return.
 34659                                  ;	  ax register destroyed.
 34660                                  ;	  if found, si, cx register adjusted accordingly.
 34661                                  ;
 34662                                  ;----------------------------------------------------------------------------
 34663                                  
 34664                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 34665                                  	; (SYSINIT:428Dh)
 34666                                  
 34667                                  skip_comment:
 34668 000038FD E3EA                    	jcxz	noget		; get out of the organize routine.
 34669                                  
 34670                                  	; 03/01/2023
 34671                                  	; ds = cs	
 34672                                  
 34673 000038FF 803E[4E03]00            	cmp	byte [com_level],0
 34674                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 34675 00003904 752C                    	jne	short no_commt	 ; (not inside quotations)
 34676                                  
 34677 00003906 803E[4F03]01            	cmp	byte [cmmt],1
 34678                                  	;cmp	byte [cs:cmmt],1
 34679 0000390B 7225                    	jb	short no_commt
 34680                                  
 34681 0000390D 268A04                  	mov	al,[es:si]
 34682                                  	
 34683 00003910 3806[5003]              	cmp	[cmmt1],al
 34684                                  	;cmp	[cs:cmmt1],al
 34685 00003914 751C                    	jne	short no_commt
 34686                                  
 34687 00003916 803E[4F03]02            	cmp	byte [cmmt],2
 34688                                  	;cmp	byte [cs:cmmt],2
 34689 0000391B 750A                    	jne	short skip_cmmt
 34690                                  
 34691 0000391D 268A4401                	mov	al,[es:si+1]
 34692                                  	
 34693 00003921 3806[5103]              	cmp	[cmmt2],al
 34694                                  	;cmp	[cs:cmmt2],al
 34695 00003925 750B                    	jne	short no_commt
 34696                                  skip_cmmt:
 34697 00003927 E3C0                    	jcxz	noget		; get out of organize routine.
 34698 00003929 268A04                  	mov	al,[es:si]
 34699 0000392C 46                      	inc	si
 34700 0000392D 49                      	dec	cx
 34701 0000392E 3C0A                    	cmp	al,lf		; line feed?
 34702 00003930 75F5                    	jne	short skip_cmmt
 34703                                  no_commt:
 34704 00003932 C3                      	retn
 34705                                  
 34706                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34707                                  ; (SYSINIT:42C8h)
 34708                                  
 34709                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34710                                  ;%if 0
 34711                                  
 34712                                  ;ifdef	MULTI_CONFIG
 34713                                  
 34714                                  ;----------------------------------------------------------------------------
 34715                                  ;
 34716                                  ;   kbd_read: wait for keystroke
 34717                                  ;
 34718                                  ;   INPUT
 34719                                  ;       DS == CS == sysinitseg
 34720                                  ;
 34721                                  ;   OUTPUT
 34722                                  ;       Carry SET to clean boot, CLEAR otherwise
 34723                                  ;
 34724                                  ;   OTHER REGS USED
 34725                                  ;       All
 34726                                  ;
 34727                                  ;   HISTORY
 34728                                  ;       Created 16-Nov-1992 by JeffPar
 34729                                  ;
 34730                                  ;----------------------------------------------------------------------------
 34731                                  
 34732                                  kbd_read:
 34733 00003933 F606[A647]02                    test    byte [bDisableUI],2
 34734 00003938 7520                            jnz     short kbd_nodelay
 34735                                  
 34736 0000393A 1E                              push    ds              ; the bios timer tick count is incremented
 34737 0000393B 29C0                            sub     ax,ax           ; 18.2 times per second;
 34738 0000393D 8ED8                            mov     ds,ax           ; watch the timer tick count for 37 transitions
 34739                                  	;mov	dx,[046Ch]	; get initial value
 34740                                  kbd_loop:
 34741 0000393F B401                            mov     ah,1            ;
 34742 00003941 CD16                            int     16h             ; peek the keyboard
 34743 00003943 7514                            jnz	short kbd_loopdone ; something's there, get out
 34744 00003945 B402                            mov     ah,2            ; peek the shift states
 34745 00003947 CD16                            int     16h             ;
 34746 00003949 A803                            test    al,03h          ; either right or left shift key bits set?
 34747 0000394B 750C                            jnz	short kbd_loopdone ; yes
 34748 0000394D A16C04                          mov     ax,[046Ch]	;
 34749                                  	;sub	ax,dx           ; get difference
 34750                                  	; 15/04/2019 - Retro DOS v4.0
 34751 00003950 2E2B06[8403]            	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 34752                                  
 34753 00003955 3C25                    	cmp     al,37           ; reached limit?  ; (2 seconds)
 34754 00003957 72E6                            jb	short kbd_loop	; not yet
 34755                                  kbd_loopdone:
 34756 00003959 1F                              pop     ds              ; delay complete!
 34757                                  kbd_nodelay:
 34758 0000395A 29DB                            sub     bx,bx           ; assume clean boot
 34759 0000395C B402                            mov     ah,2            ; peek the shift states
 34760 0000395E CD16                            int     16h             ;
 34761 00003960 A803                            test    al,03h          ; either right or left shift key bits set?
 34762 00003962 7407                            jz      short kbd_notshift ; no
 34763 00003964 43                              inc     bx              ; yes
 34764 00003965 43                              inc     bx
 34765                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 34766 00003966 800E[AA47]04            	or	byte [bQueryOpt],4
 34767                                  kbd_notshift:                   ;
 34768 0000396B B401                            mov     ah,1            ; peek the keyboard
 34769 0000396D CD16                            int     16h             ;
 34770 0000396F 743E                            jz	short kbd_test	; no key present
 34771 00003971 08C0                            or      al,al           ; is it a function key?
 34772 00003973 753A                            jnz	short kbd_test	; no
 34773                                  
 34774                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 34775 00003975 80FC62                          cmp     ah,62h          ; CTRL F5
 34776 00003978 7405                            je	short kbd_cfg_bypass
 34777                                  	
 34778 0000397A 80FC3F                          cmp     ah,3Fh          ; F5 function key?
 34779 0000397D 750D                            jne	short kbd_notf5	; no
 34780                                  kbd_cfg_bypass:
 34781 0000397F BA[3D4C]                        mov     dx,_$CleanMsg
 34782 00003982 E8F30B                          call    print
 34783                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 34784 00003985 800E[AA47]04            	or	byte [bQueryOpt],4 
 34785 0000398A EB16                            jmp     short kbd_eat   ; yes, clean boot selected
 34786                                  kbd_notf5:
 34787                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 34788 0000398C 80FC65                          cmp     ah,65h          ; CTRL F8
 34789 0000398F 7405                            je	short kbd_cfg_confirm
 34790                                  
 34791 00003991 80FC42                          cmp     ah,42h          ; F8 function key?
 34792 00003994 7523                            jne	short kbd_exit	; no
 34793                                  kbd_cfg_confirm:
 34794 00003996 BA[7B4C]                        mov     dx,_$InterMsg
 34795 00003999 E8DC0B                          call    print           ;
 34796 0000399C B301                            mov     bl,1            ; yes, interactive-boot option enabled
 34797 0000399E 881E[AA47]                      mov     [bQueryOpt],bl  ; change default setting
 34798                                  kbd_eat:                        ;
 34799 000039A2 B400                            mov     ah,0            ;
 34800 000039A4 CD16                            int     16h             ; eat the key we assumed was a signal
 34801 000039A6 C606[B047]FF                    mov	byte [secElapsed],-1
 34802 000039AB 09DB                            or      bx,bx           ;
 34803 000039AD 7405                            jz	short kbd_clean	;
 34804                                  kbd_test:                       ;
 34805 000039AF 80FB02                          cmp     bl,2            ;
 34806 000039B2 7205                            jb	short kbd_exit	;
 34807                                  kbd_clean:                      ;
 34808 000039B4 E88608                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 34809 000039B7 F9                              stc                     ; set carry to indicate abort
 34810 000039B8 C3                              retn			;
 34811                                  kbd_exit:                       ;
 34812 000039B9 F8                              clc                     ; clear carry to indicate success
 34813 000039BA C3                              retn			;
 34814                                  
 34815                                  ;----------------------------------------------------------------------------
 34816                                  ;
 34817                                  ;   set_numlock: set numlock LED
 34818                                  ;
 34819                                  ;   INPUT
 34820                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 34821                                  ;
 34822                                  ;   OUTPUT
 34823                                  ;       None
 34824                                  ;
 34825                                  ;   OTHER REGS USED
 34826                                  ;       None
 34827                                  ;
 34828                                  ;   HISTORY
 34829                                  ;       Created 16-Nov-1992 by JeffPar
 34830                                  ;
 34831                                  ;----------------------------------------------------------------------------
 34832                                  
 34833                                  	; 04/01/2023 - Retro DOS v4.2
 34834                                  
 34835                                  set_numlock:
 34836                                          ; 04/01/2023
 34837                                  	;push	ax
 34838 000039BB 1E                              push    ds
 34839 000039BC 29C0                            sub     ax,ax
 34840 000039BE 8ED8                            mov     ds,ax
 34841 000039C0 268B04                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 34842 000039C3 2E3B06[184C]                    cmp     ax,[cs:OnOff+2]	; should we turn it off?
 34843 000039C8 7507                            jne	short not_off	; no
 34844 000039CA 80261704DF                      and     byte [0417h],~20h ; 0DFh
 34845 000039CF EB0D                            jmp     short set_done
 34846                                  not_off:
 34847 000039D1 2E3B06[164C]                    cmp     ax,[cs:OnOff]	; should we turn it on?
 34848 000039D6 F9                              stc
 34849 000039D7 7505                            jne	short set_done	; no
 34850 000039D9 800E170420                      or      byte [0417h],20h
 34851                                  set_done:
 34852 000039DE 1F                              pop     ds
 34853                                  	; 04/01/2023
 34854                                  	;pop	ax
 34855 000039DF C3                              retn
 34856                                  
 34857                                  ; 16/04/2019 - Retro DOS v4.0
 34858                                  
 34859                                  ;----------------------------------------------------------------------------
 34860                                  ;
 34861                                  ;   menu_check: check for presence of menu (and other) configuration blocks
 34862                                  ;
 34863                                  ;   INPUT
 34864                                  ;       CX == "organized" config.sys memory image length
 34865                                  ;    ES:SI -> "organized" config.sys memory image
 34866                                  ;       DS == CS == sysinitseg
 34867                                  ;
 34868                                  ;   OUTPUT
 34869                                  ;       Same as above; the idea is that menu_check simply transforms
 34870                                  ;       a block-structured config.sys image into a conventional image,
 34871                                  ;       based on the user's block selection and any other boot-time options
 34872                                  ;       the user may have employed...
 34873                                  ;
 34874                                  ;   OTHER REGS USED
 34875                                  ;       All
 34876                                  ;
 34877                                  ;   NOTES
 34878                                  ;       [count] and [org_count] are set to the new config.sys image length
 34879                                  ;
 34880                                  ;   HISTORY
 34881                                  ;       Created 16-Mar-1992 by JeffPar
 34882                                  ;
 34883                                  ;----------------------------------------------------------------------------
 34884                                  
 34885                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 34886                                  	; (SYSINIT:4378h)
 34887                                  
 34888                                  menu_check:
 34889                                  
 34890                                  ;   Search for SWITCHES, determine if /N or /F are present; if so, then
 34891                                  ;   disable clean/interactive boot options
 34892                                  
 34893 000039E0 51                              push    cx              ;
 34894 000039E1 56                              push    si              ;
 34895 000039E2 29DB                            sub     bx,bx           ; remains ZERO until first block
 34896                                  swchk_loop:                     ;
 34897 000039E4 E84C07                          call    get_char        ; get first char of current line
 34898 000039E7 724C                            jc	short swchk_end	; hit eof
 34899 000039E9 3C5B                            cmp     al,CONFIG_BEGIN ; '['
 34900 000039EB 7503                            jne	short swchk_next1 ;
 34901 000039ED 43                              inc     bx              ; remember that we've seen a block
 34902 000039EE EB40                            jmp     short swchk_nextline
 34903                                  swchk_next1:                    ;
 34904 000039F0 3C4E                            cmp     al,CONFIG_NUMLOCK
 34905 000039F2 750E                            jne	short swchk_next2 ;
 34906 000039F4 09DB                            or      bx,bx           ; only do NUMLOCK commands that exist
 34907 000039F6 7538                            jnz	short swchk_nextline ; before the first block
 34908 000039F8 E8C0FF                          call    set_numlock     ; REM it out so we don't act on it later, too
 34909 000039FB 26C644FF30                      mov     byte [es:si-1],CONFIG_REM
 34910 00003A00 EB2E                            jmp     short swchk_nextline
 34911                                  swchk_next2:                    ;
 34912 00003A02 3C31                            cmp     al,CONFIG_SWITCHES
 34913 00003A04 752A                            jne	short swchk_nextline ; this line ain't it
 34914                                  swchk_scan:                     ;
 34915 00003A06 E82A07                          call    get_char        ; look for /N or /F
 34916                                  swchk_scan1:                    ;
 34917 00003A09 3C0A                            cmp     al,LF           ; end of line?
 34918 00003A0B 7423                            je	short swchk_nextline ; yes
 34919 00003A0D 3C2F                            cmp     al,'/'          ; switch-char?
 34920 00003A0F 75F5                            jne	short swchk_scan ; no
 34921 00003A11 E81F07                          call    get_char        ;
 34922 00003A14 24DF                            and     al,~20h ; 0DFh	; convert to upper case
 34923 00003A16 3A06[051F]                      cmp     al,[swit_n+1]
 34924 00003A1A 7507                            jne	short swchk_scan2 ; no
 34925 00003A1C 800E[A647]01                    or      byte [bDisableUI],1
 34926 00003A21 EBE3                            jmp	short swchk_scan ; continue looking for switches of interest
 34927                                  swchk_scan2:                    ;
 34928 00003A23 3A06[111F]                      cmp     al,[swit_f+1]
 34929 00003A27 75E0                            jne	short swchk_scan1 ; no
 34930 00003A29 800E[A647]02                    or      byte [bDisableUI],2
 34931 00003A2E EBD6                            jmp     short swchk_scan ; continue looking for switches of interest
 34932                                  swchk_nextline:                 ;
 34933 00003A30 E8DA06                          call    skip_opt_line   ;
 34934 00003A33 EBAF                            jmp     short swchk_loop ;
 34935                                  swchk_end:                      ;
 34936 00003A35 5E                              pop     si              ;
 34937 00003A36 59                              pop     cx              ;
 34938                                  
 34939                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 34940                                  ;   the DisableUI flag is still clear
 34941                                  
 34942 00003A37 F606[A647]01                    test    byte [bDisableUI],1
 34943 00003A3C 7508                            jnz	short menu_search
 34944                                  ;
 34945                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 34946                                  ;   there is anything at all in the keyboard buffer
 34947                                  ;
 34948 00003A3E E8F2FE                          call    kbd_read
 34949 00003A41 7303                            jnc	short menu_search
 34950 00003A43 E9F601                          jmp	menu_abort
 34951                                  
 34952                                  ;   Search for MENU block; it is allowed to be anywhere in config.sys
 34953                                  
 34954                                  menu_search:
 34955 00003A46 29DB                            sub     bx,bx           ; if no MENU, default to zero for no_selection
 34956 00003A48 BF[EB47]                        mov     di,szMenu	;
 34957 00003A4B E81804                          call    find_block      ; find the MENU block
 34958 00003A4E 733D                            jnc	short menu_found ;
 34959 00003A50 C606[E347]00                    mov     byte [szBoot],0
 34960 00003A55 E91402                          jmp	no_selection ; not found
 34961                                  
 34962                                  ;   Process the requested menu color(s)
 34963                                  
 34964                                  menu_color:
 34965 00003A58 51                              push    cx              ;
 34966 00003A59 52                              push    dx              ;
 34967 00003A5A BA0700                          mov     dx,0007h        ; default color setting
 34968 00003A5D E8B206                          call    get_number	; get first number
 34969 00003A60 80E30F                          and     bl,0Fh		; first # is foreground color (for low nibble)
 34970 00003A63 88DD                            mov     ch,bl           ; save it in CH
 34971                                  	; 01/08/2023 - Retro DOS v4.2 IO.SYS (optimization) by Erdogan Tan 
 34972                                  	; (high nibble of dl is 0)
 34973                                  	;and	dl,0F0h         ; (low nibble of dl would be zero)
 34974                                          ;or	dl,bl		; (low nibble of dl is 7) ! 14/08/2023
 34975 00003A65 88DA                    	mov	dl,bl	; 14/08/2023	 	
 34976 00003A67 E84608                          call    delim           ; did we hit a delimiter
 34977 00003A6A 7511                            jne	short check_color ; no, all done
 34978 00003A6C E8A306                          call    get_number	; get next number
 34979 00003A6F 80E30F                          and     bl,0Fh		; second # is background color (for high nibble)
 34980 00003A72 88DE                            mov     dh,bl           ; save it in DH
 34981 00003A74 80E20F                          and     dl,0Fh		;
 34982 00003A77 B104                            mov     cl,4            ;
 34983 00003A79 D2E3                            shl     bl,cl           ;
 34984 00003A7B 08DA                            or      dl,bl           ;
 34985                                  check_color:                    ;
 34986 00003A7D 38F5                            cmp     ch,dh           ; are foreground/background the same?
 34987 00003A7F 7503                            jne	short set_color	; no
 34988 00003A81 80F208                          xor     dl,08h          ; yes, so modify the fgnd intensity
 34989                                  set_color:
 34990 00003A84 8816[A147]                      mov     [bMenuColor],dl ;
 34991 00003A88 5A                              pop     dx              ;
 34992 00003A89 59                              pop     cx              ;
 34993 00003A8A E9AB00                          jmp	menu_nextitem
 34994                                  
 34995                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 34996                                  ;   above is there simply to alleviate short jump problems)
 34997                                  
 34998                                  menu_found:
 34999 00003A8D C606[AB47]01                    mov     byte [bDefBlock],1
 35000 00003A92 C706[AD47]0000                  mov     word [offDefBlock],0
 35001 00003A98 C606[AF47]FF                    mov     byte [secTimeOut],-1
 35002 00003A9D 8026[AA47]FD                    and     byte [bQueryOpt],~2 ; 0FDh
 35003                                  
 35004 00003AA2 E86806                          call    skip_opt_line   ; skip to next line
 35005 00003AA5 29D2                            sub     dx,dx           ; initialize total block count (0 => none yet)
 35006                                  
 35007                                  ;   Process the menu block now
 35008                                  
 35009                                  menu_process:
 35010 00003AA7 E88906                          call    get_char        ; get first char of current line
 35011 00003AAA 722E                            jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 35012 00003AAC 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 35013 00003AAE 3C5B                            cmp     al,CONFIG_BEGIN ; BEGIN implies END
 35014 00003AB0 7428                            je	short to_menu_getdefault
 35015 00003AB2 3C4F                            cmp     al,CONFIG_SUBMENU
 35016 00003AB4 744D                            je	short menu_item	; go process sub-menu
 35017 00003AB6 3C45                            cmp     al,CONFIG_MENUITEM
 35018 00003AB8 7449                            je	short menu_item	; go process menu item
 35019 00003ABA 3C41                            cmp     al,CONFIG_MENUDEFAULT
 35020 00003ABC 741E                            je	short menu_default ; go process menu default
 35021 00003ABE 3C52                            cmp     al,CONFIG_MENUCOLOR
 35022 00003AC0 7496                            je	short menu_color ; go process menu color
 35023 00003AC2 3C4E                            cmp     al,CONFIG_NUMLOCK
 35024 00003AC4 740F                            je	short menu_numlock ;
 35025 00003AC6 3C30                            cmp     al,CONFIG_REM   ; allow remarks in menu block
 35026 00003AC8 746E                            je	short menu_nextitem ;
 35027 00003ACA E8D307                          call    any_delim       ; allow blank lines and such
 35028 00003ACD 7469                            je	short menu_nextitem ;
 35029 00003ACF F9                              stc                     ;
 35030 00003AD0 E83607                          call    print_error     ; non-MENU command!
 35031 00003AD3 EB63                            jmp     short menu_nextitem
 35032                                  menu_numlock:
 35033 00003AD5 E8E3FE                          call    set_numlock
 35034 00003AD8 EB5E                            jmp     short menu_nextitem
 35035                                  to_menu_getdefault:
 35036 00003ADA EB62                            jmp     short menu_getdefault
 35037                                  
 35038                                  ;   Save the offset of the default block name, we'll need it later
 35039                                  
 35040                                  menu_default:
 35041 00003ADC 8936[AD47]                      mov     [offDefBlock],si; save address of default block name
 35042 00003AE0 803E[B047]00                    cmp     byte [secElapsed],0
 35043 00003AE5 751A                            jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 35044 00003AE7 E8F905                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 35045 00003AEA 724C                            jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 35046 00003AEC E80A06                          call    skip_delim      ; something is typed
 35047 00003AEF 7247                            jc	short menu_nextitem ;
 35048 00003AF1 89DE                            mov     si,bx           ;
 35049 00003AF3 E81C06                          call    get_number      ; get number (of seconds for timeout)
 35050 00003AF6 80FB5A                          cmp     bl,90           ; limit it to a reasonable number
 35051                                  	;jb	short timeout_ok ; (besides, 99 is the largest # my simple
 35052 00003AF9 7602                            jna	short timeout_ok ; 01/08/2023
 35053 00003AFB B35A                    	mov     bl,90           ;  display function can handle)
 35054                                  timeout_ok:                     ;
 35055 00003AFD 881E[AF47]                      mov     [secTimeOut],bl ;
 35056                                  timeout_skip:
 35057 00003B01 EB35                            jmp     short menu_nextitem
 35058                                  
 35059                                  ;   Verify that this is a valid menu item by searching for the named block
 35060                                  
 35061                                  menu_item:
 35062                                  	;cmp	dl,9	; 04/01/2023
 35063 00003B03 80FA09                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 35064 00003B06 7330                            jae	short menu_nextitem ;
 35065 00003B08 89F7                            mov     di,si           ; DS:DI -> block name to search for
 35066 00003B0A E84003                          call    srch_block      ;
 35067 00003B0D 7406                            je	short menu_itemfound ;
 35068 00003B0F F9                              stc                     ;
 35069 00003B10 E8F606                          call    print_error     ; print error and pause
 35070 00003B13 EB23                            jmp     short menu_nextitem ; if not found, ignore this menu item
 35071                                  
 35072                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 35073                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 35074                                  ;   and CX are unmodified
 35075                                  
 35076                                  menu_itemfound:
 35077 00003B15 42                              inc     dx              ; otherwise, increment total block count
 35078 00003B16 89D3                            mov     bx,dx           ; and use it to index the arrays of offsets
 35079 00003B18 8887[B147]                      mov	[abBlockType+bx],al
 35080 00003B1C 01DB                            add     bx,bx           ; of recorded block names and descriptions
 35081                                  
 35082                                  ;   There should be a description immediately following the block name on
 35083                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 35084                                  ;   description...
 35085                                  
 35086 00003B1E 89B7[BB47]                      mov     [aoffBlockName+bx],si
 35087 00003B22 89B7[CF47]                      mov     [aoffBlockDesc+bx],si
 35088 00003B26 89DF                            mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 35089 00003B28 E8B805                          call    skip_token      ;
 35090 00003B2B 720B                            jc	short menu_nextitem ; hit eol/eof
 35091 00003B2D E8C905                          call    skip_delim      ;
 35092 00003B30 7206                            jc	short menu_nextitem ; hit eol/eof
 35093 00003B32 87DF                            xchg    bx,di           ;
 35094 00003B34 89BF[CF47]                      mov     [aoffBlockDesc+bx],di
 35095                                  
 35096                                  menu_nextitem:
 35097 00003B38 E8D205                          call    skip_opt_line   ;
 35098 00003B3B E969FF                          jmp     menu_process    ; go back for more lines
 35099                                  
 35100                                  ;   Display menu items now, after determining which one is default
 35101                                  
 35102                                  menu_getdefault:
 35103 00003B3E 08D2                            or      dl,dl           ; where there any valid blocks at all?
 35104 00003B40 7505                            jnz	short menu_valid ; yes
 35105 00003B42 29DB                            sub     bx,bx           ; no, so force autoselect of 0
 35106 00003B44 E9ED00                          jmp     menu_autoselect ; (meaning: process common blocks only)
 35107                                  menu_valid:
 35108 00003B47 29DB                            sub     bx,bx           ;
 35109 00003B49 8816[AC47]                      mov     [bMaxBlock],dl  ; first, record how many blocks we found
 35110 00003B4D 8B3E[AD47]                      mov     di,[offDefBlock];
 35111 00003B51 09FF                            or      di,di           ; does a default block exist?
 35112 00003B53 741C                            jz	short menu_nodefault ; no
 35113 00003B55 43                              inc     bx              ; yes, walk name table, looking for default
 35114                                  menu_chkdefault:
 35115 00003B56 53                              push    bx              ;
 35116 00003B57 01DB                            add     bx,bx           ;
 35117 00003B59 8BB7[BB47]                      mov     si,[aoffBlockName+bx]
 35118 00003B5D B98000                          mov     cx,128          ; arbitrary maximum length of a name
 35119 00003B60 1E                              push    ds              ;
 35120 00003B61 06                              push    es              ;
 35121 00003B62 1F                              pop     ds              ;
 35122 00003B63 E82703                          call    comp_names      ; is this block the same as the default?
 35123 00003B66 1F                              pop     ds              ;
 35124 00003B67 5B                              pop     bx              ;
 35125 00003B68 7409                            je	short menu_setdefault ; yes
 35126 00003B6A 43                              inc     bx              ;
 35127 00003B6B 3A1E[AC47]                      cmp     bl,[bMaxBlock]  ; all done searching?
 35128 00003B6F 76E5                            jbe	short menu_chkdefault ; not yet
 35129                                  menu_nodefault:
 35130 00003B71 B301                            mov     bl,1            ; if no default, force default to #1
 35131                                  menu_setdefault:
 35132 00003B73 881E[AB47]                      mov     [bDefBlock],bl  ; yes, this will be the initial current block
 35133                                  
 35134                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 35135                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 35136                                  ;   supposed to skip menu display and run with the specified default block;
 35137                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 35138                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 35139                                  ;   with no timeout)
 35140                                  
 35141 00003B77 803E[AF47]00                    cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 35142 00003B7C 750A                            jne	short menu_display ; no
 35143 00003B7E F606[AA47]01                    test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 35144 00003B83 7503                            jnz	short menu_display ; yes, so *don't* assume default after all
 35145 00003B85 E9C700                          jmp     not_topmenu	;
 35146                                  
 35147                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 35148                                  
 35149                                  menu_display:
 35150 00003B88 B40F                            mov     ah,0Fh          ; get current video mode
 35151 00003B8A CD10                            int     10h             ;
 35152 00003B8C B400                            mov     ah,00h          ; just re-select that mode
 35153 00003B8E CD10                            int     10h             ;
 35154 00003B90 06                              push    es              ;
 35155 00003B91 B84000                          mov     ax,40h          ; reach down into the ROM BIOS data area
 35156 00003B94 8EC0                            mov     es,ax           ; and save the current (default) video page
 35157 00003B96 26A14E00                        mov     ax,[es:004Eh]   ; start address and page #, in case the
 35158 00003B9A A3[A847]                        mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 35159 00003B9D 26A06200                        mov     al,[es:0062h]   ;
 35160 00003BA1 A2[A747]                        mov     [bCRTPage],al   ;
 35161 00003BA4 A1[A247]                        mov     ax,[bMenuPage]	; select new page for menu
 35162 00003BA7 CD10                            int     10h             ;
 35163 00003BA9 B80006                          mov     ax,0600h        ; clear entire screen
 35164 00003BAC 8A3E[A147]                      mov     bh,[bMenuColor] ; using this color
 35165 00003BB0 29C9                            sub     cx,cx           ; upper left row/col
 35166                                          ;mov	dl,[es:CRT_Cols] 
 35167 00003BB2 268A164A00                      mov	dl,[es:4Ah]
 35168 00003BB7 FECA                    	dec     dl              ;
 35169                                          ;mov	dh,[es:CRT_Rows];
 35170 00003BB9 268A368400                      mov	dh,[es:84h]
 35171 00003BBE 08F6                    	or      dh,dh           ; # of rows valid?
 35172 00003BC0 7504                            jnz	short menu_clear ; hopefully
 35173 00003BC2 8A36[A547]                      mov     dh,[bLastRow]   ; no, use a default
 35174                                  menu_clear:
 35175 00003BC6 CD10                            int     10h             ; clear the screen using the req. attribute
 35176 00003BC8 07                              pop     es              ;
 35177 00003BC9 8836[A547]                      mov     [bLastRow],dh   ; save DH
 35178 00003BCD BA[B84C]                        mov     dx,_$MenuHeader
 35179 00003BD0 E8A509                          call    print           ; cursor now on row 3 (numbered from 0)
 35180                                  
 35181 00003BD3 F606[A647]01                    test    byte [bDisableUI],1
 35182 00003BD8 751F                            jnz     short menu_nostatus
 35183 00003BDA 8A3E[A247]                      mov     bh,[bMenuPage]  ;
 35184 00003BDE 8A36[A547]                      mov     dh,[bLastRow]   ; restore DH
 35185 00003BE2 B200                            mov     dl,0            ; print the status line on row DH, col 0,
 35186 00003BE4 B402                            mov     ah,02h          ; now that we can trash the cursor position
 35187 00003BE6 CD10                            int     10h             ;
 35188 00003BE8 BA[044D]                        mov     dx,_$StatusLine
 35189 00003BEB E88A09                          call    print           ;
 35190 00003BEE B403                            mov     ah,3            ; get cursor position
 35191 00003BF0 CD10                            int     10h             ;
 35192 00003BF2 80EA02                          sub     dl,2            ;
 35193 00003BF5 8816[A447]                      mov     [bLastCol],dl   ; save column where status char will go
 35194                                  
 35195                                  menu_nostatus:
 35196 00003BF9 BB0100                          mov     bx,1            ; now prepare to display all the menu items
 35197                                  menu_disploop:
 35198 00003BFC E8BD02                          call    print_item	; print item #BL
 35199 00003BFF 43                              inc     bx              ; why "inc bx"?  because it's a 1-byte opcode
 35200 00003C00 3A1E[AC47]                      cmp     bl,[bMaxBlock]  ; all done?
 35201 00003C04 76F6                            jbe	short menu_disploop ; not yet
 35202                                  
 35203                                  ;   Set cursor position to just below the menu items
 35204                                  
 35205 00003C06 B200                            mov     dl,0            ; select column
 35206 00003C08 88DE                            mov     dh,bl           ;
 35207 00003C0A 80C604                          add     dh,4            ; select row below menu
 35208 00003C0D 8A3E[A247]                      mov     bh,[bMenuPage]  ;
 35209 00003C11 B402                            mov     ah,02h          ; set cursor position beneath the block list
 35210 00003C13 CD10                            int     10h             ;
 35211                                  
 35212 00003C15 BA[F14C]                        mov     dx,_$MenuPrmpt
 35213 00003C18 E85D09                          call    print           ;
 35214 00003C1B E83603                          call    select_item     ; make a selection, return # in BX
 35215 00003C1E BA[C44A]                        mov     dx,crlfm	
 35216 00003C21 E85409                          call    print           ;
 35217 00003C24 FF36[A647]                      push    word [bDisableUI]
 35218 00003C28 800E[A647]01                    or      byte [bDisableUI],1
 35219 00003C2D E87404                          call    show_status     ; clear the status line now
 35220 00003C30 8F06[A647]                      pop     word [bDisableUI]
 35221                                  
 35222                                  ;   Now begins the "re-organization" process...
 35223                                  
 35224                                  menu_autoselect:
 35225 00003C34 83FBFF                          cmp     bx,-1           ; clean boot requested?
 35226 00003C37 7508                            jne	short normal_boot ; no
 35227 00003C39 E80106                          call    disable_autoexec; basically, add a /D to the command.com line
 35228                                  menu_abort:
 35229 00003C3C 29C9                            sub     cx,cx           ; then immediately exit with 0 config.sys image
 35230 00003C3E E9EE00                          jmp	menu_exit	;
 35231                                  
 35232                                  normal_boot:
 35233 00003C41 83FBFE                          cmp     bx,-2           ; back to top-level menu?
 35234 00003C44 7509                            jne	short not_topmenu ; no
 35235 00003C46 8B0E[5403]                      mov     cx,[count]      ; yes, start all over
 35236 00003C4A 29F6                            sub     si,si           ;
 35237 00003C4C E9F7FD                          jmp     menu_search
 35238                                  
 35239                                  not_topmenu:
 35240 00003C4F 80BF[B147]4F                    cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 35241 00003C54 7510                            jne	short not_submenu
 35242 00003C56 01DB                            add     bx,bx           ;
 35243 00003C58 8BBF[BB47]                      mov     di,[aoffBlockName+bx]
 35244 00003C5C E8EE01                          call    srch_block      ; THIS CANNOT FAIL!
 35245 00003C5F 89FE                            mov     si,di           ;
 35246 00003C61 89D9                            mov     cx,bx           ; ES:SI and CX are ready for another round
 35247 00003C63 E927FE                          jmp     menu_found
 35248                                  
 35249                                  not_submenu:
 35250 00003C66 01DB                            add     bx,bx           ; get BX -> name of selected block
 35251 00003C68 8B9F[BB47]                      mov     bx,[aoffBlockName+bx]
 35252                                  
 35253                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 35254                                  ;   the offset relative to ES of the block name to be processed (along with
 35255                                  ;   all the "common" lines of course)
 35256                                  
 35257                                  no_selection:
 35258 00003C6C 891E[AD47]                      mov     [offDefBlock],bx; save selection
 35259 00003C70 8B0E[5403]                      mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 35260 00003C74 29F6                            sub     si,si           ;
 35261 00003C76 1E                              push    ds              ;
 35262 00003C77 8E1E[DB14]                      mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 35263 00003C7B 29FF                            sub     di,di           ;
 35264                                  
 35265                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 35266                                  ;
 35267                                  ;   Work our way through the config.sys image again, this time copying
 35268                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 35269                                  ;   within the requested block. Lines inside INCLUDEd blocks are transparently
 35270                                  ;   copied by copy_block in a recursive fashion; the amount of recursion is
 35271                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 35272                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 35273                                  ;
 35274                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 35275                                  ;   stack we're running on, then we should check it inside copy_block
 35276                                  
 35277                                  copyblock_loop:
 35278 00003C7D 53                              push    bx              ; save selected block name
 35279 00003C7E E83C01                          call    copy_block      ; process (named or common) block
 35280 00003C81 5B                              pop     bx              ;
 35281 00003C82 723C                            jc	short move_config ; hit eof
 35282                                  
 35283                                  ;   copy_block can only return for two reasons: it hit eof or a new block
 35284                                  
 35285                                  copyblock_begin:
 35286 00003C84 50                              push    ax              ;
 35287 00003C85 51                              push    cx              ;
 35288 00003C86 56                              push    si              ;
 35289 00003C87 57                              push    di              ; always do "common" blocks
 35290 00003C88 BF[F047]                        mov     di,szCommon
 35291 00003C8B 1E                              push    ds              ;
 35292 00003C8C 0E                              push    cs              ;
 35293 00003C8D 1F                              pop     ds              ;
 35294 00003C8E E8FC01                          call    comp_names      ;
 35295 00003C91 1F                              pop     ds              ;
 35296 00003C92 5F                              pop     di              ;
 35297 00003C93 5E                              pop     si              ;
 35298 00003C94 59                              pop     cx              ;
 35299 00003C95 58                              pop     ax              ;
 35300 00003C96 740F                            je	short copyblock_check
 35301 00003C98 09DB                            or      bx,bx           ; is there a block name to check?
 35302 00003C9A 7414                            jz	short copyblock_skip ; no
 35303 00003C9C 57                              push    di              ;
 35304 00003C9D 89DF                            mov     di,bx           ; check block against given block name
 35305 00003C9F 1E                              push    ds              ;
 35306 00003CA0 06                              push    es              ;
 35307 00003CA1 1F                              pop     ds              ;
 35308 00003CA2 E8E801                          call    comp_names      ; is this the block we really want to do?
 35309 00003CA5 1F                              pop     ds              ;
 35310 00003CA6 5F                              pop     di              ;
 35311                                  copyblock_check:
 35312 00003CA7 7217                            jc	short move_config ; hit eof
 35313 00003CA9 7505                            jne	short copyblock_skip  ;
 35314 00003CAB E85F04                          call    skip_opt_line   ;
 35315 00003CAE EBCD                            jmp	short copyblock_loop 
 35316                                  
 35317                                  copyblock_skip:                 ;
 35318 00003CB0 E85A04                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 35319 00003CB3 E87D04                          call    get_char        ;
 35320 00003CB6 7208                            jc	short move_config ; hit eof
 35321 00003CB8 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 35322 00003CBA 3C5B                            cmp     al,CONFIG_BEGIN ;
 35323 00003CBC 74C6                            je	short copyblock_begin
 35324 00003CBE EBF0                            jmp     short copyblock_skip ; anything else is just skipped
 35325                                  ;
 35326                                  ;   To create as little risk to the rest of SysInit as little as possible,
 35327                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 35328                                  ;   copy the new config.sys image to "confbot"
 35329                                  ;
 35330                                  move_config:
 35331 00003CC0 89F9                            mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 35332 00003CC2 51                              push    cx              ;
 35333                                  ;
 35334                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 35335                                  ;   since the configuration name only currently exists in the "confbot" area
 35336                                  ;
 35337                                   	;mov	cx,7
 35338 00003CC3 B90700                  	mov     cx,szMenu-szBoot-1
 35339 00003CC6 BE[E347]                        mov     si,szBoot	; first copy the CONFIG= part
 35340 00003CC9 47                              inc     di              ; skip a byte, in case absolutely nothing
 35341                                                                  ; was copied to the workspace, because we always
 35342                                                                  ; zero the first byte of the workspace (below)
 35343                                  copy_boot: 
 35344                                  	;lods    byte ptr cs:[si];
 35345 00003CCA 2E                              cs
 35346 00003CCB AC                      	lodsb
 35347 00003CCC 8805                    	mov     [di],al         ;
 35348 00003CCE 47                              inc     di              ;
 35349 00003CCF E2F9                            loop    copy_boot       ;
 35350                                  
 35351 00003CD1 06                              push    es              ; then copy the configuration name
 35352                                          ;mov	cx,128-7	; put an upper limit on the name, to be safe
 35353                                  	; 04/01/2023
 35354 00003CD2 B179                    	mov	cl,128-7
 35355 00003CD4 2E8B36[AD47]            	mov     si,[cs:offDefBlock]; ES:SI -> default block name
 35356 00003CD9 09F6                            or      si,si           ; valid?
 35357 00003CDB 7505                            jnz	short l1	; yes
 35358 00003CDD 0E                              push    cs              ;
 35359 00003CDE 07                              pop     es              ;
 35360 00003CDF BE[F047]                        mov     si,szCommon
 35361 00003CE2 268A04                  l1:     mov     al,[es:si]      ;
 35362 00003CE5 E8B805                          call    any_delim       ;
 35363 00003CE8 7406                            je	short l2	;
 35364 00003CEA 8805                            mov     [di],al         ;
 35365 00003CEC 46                              inc     si              ;
 35366 00003CED 47                              inc     di              ;
 35367 00003CEE E2F2                            loop    l1              ;
 35368 00003CF0 C6050A                  l2:     mov     byte [di],lf	; terminate the configuration string
 35369 00003CF3 07                              pop     es              ;
 35370                                  
 35371                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 35372                                  
 35373 00003CF4 29FF                            sub     di,di           ;
 35374 00003CF6 2E893E[D914]                    mov     [cs:config_envlen],di
 35375 00003CFB 29F6                            sub     si,si           ;
 35376 00003CFD 59                              pop     cx              ; recover the size of "config_wrkseg"
 35377                                  
 35378 00003CFE 51                              push    cx              ;
 35379 00003CFF F3A4                            rep     movsb           ; moved!
 35380 00003D01 59                              pop     cx              ;
 35381 00003D02 8CD8                            mov     ax,ds           ;
 35382 00003D04 1F                              pop     ds              ;
 35383                                  
 35384                                  ;   Now that the config_wrkseg is available once again, we shall
 35385                                  ;   use it to create an environment. The first thing to go in will be
 35386                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 35387                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 35388                                  ;   is empty.
 35389                                  
 35390 00003D05 06                              push    es              ;
 35391 00003D06 8EC0                            mov     es,ax           ;
 35392 00003D08 46                              inc     si              ; ES:SI -> "CONFIG=configuration"
 35393 00003D09 26C606000000                    mov     byte [es:0],0	; empty the environment block
 35394 00003D0F E82800                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 35395 00003D12 07                              pop     es
 35396                                  
 35397                                  ;   Before returning, restore the default video page setting but do NOT
 35398                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 35399                                  ;   displayed on a different page, then it's because we don't want to see
 35400                                  ;   all the device driver/TSR goop (which goes to the default page)
 35401                                  
 35402                                  menu_done:
 35403 00003D13 803E[A247]00                    cmp     byte [bMenuPage],0
 35404 00003D18 7415                            je	short menu_exit	;
 35405 00003D1A 06                              push    es              ;
 35406 00003D1B B84000                          mov     ax,40h          ;
 35407 00003D1E 8EC0                            mov     es,ax           ;
 35408 00003D20 A1[A847]                        mov     ax,[wCRTStart]  ;
 35409 00003D23 26A34E00                        mov     [es:004Eh],ax   ;
 35410 00003D27 A0[A747]                        mov     al,[bCRTPage]   ;
 35411 00003D2A 26A26200                        mov     [es:0062h],al   ;
 35412 00003D2E 07                              pop     es              ;
 35413                                  menu_exit:
 35414 00003D2F 890E[5403]                      mov     [count],cx      ; set new counts
 35415 00003D33 890E[5603]                      mov     [org_count],cx  ;
 35416 00003D37 29F6                            sub     si,si           ; always return ES:SI pointing to config.sys
 35417 00003D39 C3                              retn
 35418                                  
 35419                                  ;----------------------------------------------------------------------------
 35420                                  ;
 35421                                  ;   copy_envvar: copy the envvar at ES:SI to "config_wrkseg"
 35422                                  ;
 35423                                  ;   INPUT
 35424                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 35425                                  ;
 35426                                  ;   OUTPUT
 35427                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 35428                                  ;       carry set if error (eg, missing =); clear otherwise
 35429                                  ;
 35430                                  ;   OTHER REGS USED
 35431                                  ;       None
 35432                                  ;
 35433                                  ;   NOTES
 35434                                  ;       None
 35435                                  ;
 35436                                  ;   HISTORY
 35437                                  ;       Created 29-Mar-1992 by JeffPar
 35438                                  ;
 35439                                  ;----------------------------------------------------------------------------
 35440                                  
 35441                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 35442                                  	; (SYSINIT:46D4h)
 35443                                  
 35444                                  copy_envvar:
 35445 00003D3A 51                              push    cx              ;
 35446 00003D3B 56                              push    si              ;
 35447 00003D3C 1E                              push    ds              ;
 35448 00003D3D 06                              push    es              ;
 35449 00003D3E 06                              push    es              ;
 35450 00003D3F 8E06[DB14]                      mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 35451 00003D43 1F                              pop     ds                 ; DS:SI to point to envvar
 35452                                  
 35453                                  ;   Have to calculate the length of the variable name (and if we hit
 35454                                  ;   the end of the line before we hit '=', then it's curtains for this
 35455                                  ;   config.sys line)
 35456                                  ;
 35457                                  ;   The check for NULL is important because copy_envvar is also used to copy
 35458                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 35459                                  ;   menu block existed (in order to prevent the creation of an environment)
 35460                                  
 35461 00003D44 29C9                            sub     cx,cx           ;
 35462                                  copy_varlen:                    ;
 35463 00003D46 AC                              lodsb                   ;
 35464 00003D47 08C0                            or      al,al           ; NULL?
 35465 00003D49 F9                              stc                     ;
 35466 00003D4A 746C                            jz	short copy_envexit ; yes, abort
 35467 00003D4C 3C0D                            cmp     al,cr          ;
 35468 00003D4E F9                              stc                     ;
 35469 00003D4F 7467                            je	short copy_envexit
 35470 00003D51 3C0A                            cmp     al,lf          ;
 35471 00003D53 F9                              stc                     ;
 35472 00003D54 7462                            je	short copy_envexit
 35473 00003D56 41                              inc     cx              ;
 35474 00003D57 3C3D                            cmp     al,'='          ;
 35475 00003D59 75EB                            jne	short copy_varlen
 35476 00003D5B B000                            mov     al,0            ;
 35477 00003D5D 8A24                            mov     ah,[si]         ; save char after '='
 35478 00003D5F 29CE                            sub     si,cx           ; back up to given varname
 35479 00003D61 49                              dec     cx              ; CX == # of bytes in varname
 35480 00003D62 29FF                            sub     di,di           ; start looking for DS:SI at ES:0
 35481                                  copy_varsrch:
 35482 00003D64 263805                          cmp     byte [es:di],al
 35483 00003D67 7425                            je	short copy_envprep ; search failed, just copy var
 35484 00003D69 89FB                            mov     bx,di           ; ES:BX -> start of this varname
 35485 00003D6B 51                              push    cx              ;
 35486 00003D6C 56                              push    si              ;
 35487 00003D6D F3A6                            repe    cmpsb           ;
 35488 00003D6F 5E                              pop     si              ;
 35489 00003D70 59                              pop     cx              ;
 35490 00003D71 7531                            jne	short copy_varnext ; no match, skip to next varname
 35491 00003D73 26803D3D                        cmp     byte [es:di],'='
 35492 00003D77 752B                            jne     short copy_varnext ; no match, there's more characters
 35493                                  
 35494                                  ;   Previous occurrence of variable has been found; determine the
 35495                                  ;   entire length and then destroy it
 35496                                  
 35497 00003D79 B9FFFF                          mov     cx,-1           ;
 35498 00003D7C F2AE                            repne   scasb           ; guaranteed to get null (since we put it there)
 35499 00003D7E 56                              push    si              ;
 35500 00003D7F 89FE                            mov     si,di           ;
 35501 00003D81 89DF                            mov     di,bx           ;
 35502 00003D83 2E8B0E[D914]                    mov     cx,[cs:config_envlen]
 35503 00003D88 29F1                            sub     cx,si           ; destroy variable now
 35504                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 35505                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO:SYS - SYSINIT:4724h
 35506                                  
 35507 00003D8A F3                      	rep	; 0F3h
 35508 00003D8B 26                      	es	; 26h
 35509 00003D8C A4                      	movsb	; 0A4h
 35510                                  
 35511 00003D8D 5E                      	pop     si
 35512                                  copy_envprep:
 35513 00003D8E 80FC0D                          cmp     ah,cr          ; if there is nothing after the '='
 35514 00003D91 741D                            je	short copy_envdel ; then just exit with variable deleted
 35515 00003D93 80FC0A                          cmp     ah,lf           ;
 35516 00003D96 7418                            je	short copy_envdel
 35517                                          ;jmp	short copy_envloop
 35518                                  	; 04/01/2023
 35519                                  copy_envloop:                  ;
 35520 00003D98 AC                      	lodsb                   ;
 35521 00003D99 3C0D                    	cmp	al,cr           ;
 35522 00003D9B 7410                    	je	short copy_envdone
 35523 00003D9D 3C0A                    	cmp	al,lf           ;
 35524 00003D9F 740C                    	je	short copy_envdone
 35525 00003DA1 AA                      	stosb                   ;
 35526 00003DA2 EBF4                    	jmp	short copy_envloop
 35527                                  
 35528                                  copy_varnext:                   ;
 35529 00003DA4 51                              push    cx              ;
 35530 00003DA5 B9FFFF                          mov     cx,-1           ;
 35531 00003DA8 F2AE                            repne   scasb           ;
 35532 00003DAA 59                              pop     cx              ;
 35533 00003DAB EBB7                            jmp	short copy_varsrch
 35534                                  
 35535                                  	; 04/01/2023
 35536                                  ;copy_envloop:                  ;
 35537                                  ;	lodsb                   ;
 35538                                  ;	cmp	al,cr           ;
 35539                                  ;	je	short copy_envdone
 35540                                  ;	cmp	al,lf           ;
 35541                                  ;	je	short copy_envdone
 35542                                  ;	stosb                   ;
 35543                                  ;	jmp	short copy_envloop
 35544                                  
 35545                                  copy_envdone:                   ;
 35546 00003DAD 28C0                            sub     al,al           ; do SUB to clear carry as well
 35547 00003DAF AA                              stosb                   ; always null-terminate these puppies
 35548                                  copy_envdel:                    ;
 35549 00003DB0 268805                          mov     [es:di],al      ; and stick another null to terminate the env.
 35550 00003DB3 2E893E[D914]                    mov     [cs:config_envlen],di
 35551                                  
 35552                                  copy_envexit:                   ;
 35553 00003DB8 07                              pop     es              ;
 35554 00003DB9 1F                              pop     ds              ;
 35555 00003DBA 5E                              pop     si              ;
 35556 00003DBB 59                              pop     cx              ;
 35557                                  
 35558                                  copy_done:	; 18/12/2022
 35559 00003DBC C3                              retn
 35560                                  
 35561                                  ;----------------------------------------------------------------------------
 35562                                  ;
 35563                                  ;   copy_block: copy the current block to the new config.sys workspace
 35564                                  ;
 35565                                  ;   INPUT
 35566                                  ;       CX == remaining bytes in "organized" config.sys memory image
 35567                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 35568                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 35569                                  ;             config.sys image) where the current block is to be copied
 35570                                  ;
 35571                                  ;   OUTPUT
 35572                                  ;       Same as above
 35573                                  ;       AL also equals the last character read from the organized image
 35574                                  ;
 35575                                  ;   OTHER REGS USED
 35576                                  ;       All
 35577                                  ;
 35578                                  ;   NOTES
 35579                                  ;       None
 35580                                  ;
 35581                                  ;   HISTORY
 35582                                  ;       Created 16-Mar-1992 by JeffPar
 35583                                  ;
 35584                                  ;----------------------------------------------------------------------------
 35585                                  
 35586                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 35587                                  	; (SYSINIT:4759h)
 35588                                  
 35589                                  copy_block:
 35590 00003DBD E87303                          call    get_char        ; check for include
 35591 00003DC0 72FA                            jc	short copy_done	;
 35592 00003DC2 247F                    	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 35593 00003DC4 3C5B                    	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 35594 00003DC6 74F4                            je	short copy_done ;
 35595                                  
 35596 00003DC8 3C4A                            cmp     al,CONFIG_INCLUDE ; 'J'
 35597 00003DCA 88E0                            mov     al,ah           ; AL == the original line code
 35598 00003DCC 753A                            jne	short copy_line	; not an "include" line
 35599                                  
 35600                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 35601                                  ;   never try to include the block again (no infinite include loops please),
 35602                                  ;   then search for the named block and call copy_block again.
 35603                                  
 35604 00003DCE 26C644FF30                      mov     byte [es:si-1],CONFIG_REM ; '0'
 35605 00003DD3 57                              push    di              ;
 35606                                  
 35607 00003DD4 BF[EB47]                        mov     di,szMenu
 35608 00003DD7 E8D400                          call    comp_names_safe ; don't allow INCLUDE MENU
 35609 00003DDA 7425                            je	short copy_skip	;
 35610                                  
 35611 00003DDC BF[F047]                        mov     di,szCommon
 35612 00003DDF E8CC00                          call    comp_names_safe ; don't allow INCLUDE COMMON
 35613 00003DE2 741D                            je	short copy_skip	;
 35614                                  
 35615 00003DE4 89F7                            mov     di,si           ; try to find the block
 35616 00003DE6 E86400                          call    srch_block      ;
 35617 00003DE9 89FA                            mov     dx,di           ;
 35618 00003DEB 5F                              pop     di              ;
 35619 00003DEC 7514                            jne	short copy_error ; no such block
 35620 00003DEE 51                              push    cx              ;
 35621 00003DEF 89D9                            mov     cx,bx           ;
 35622 00003DF1 56                              push    si              ;
 35623 00003DF2 4A                              dec     dx              ;
 35624 00003DF3 89D6                            mov     si,dx           ;
 35625 00003DF5 E81003                          call    skip_line       ; skip the rest of the "block name" line
 35626 00003DF8 E8C2FF                          call    copy_block      ; and copy in the rest of that block
 35627 00003DFB 5E                              pop     si              ;
 35628 00003DFC 59                              pop     cx              ;
 35629 00003DFD 28C0                            sub     al,al           ; force skip_opt_line to skip...
 35630 00003DFF EB2B                            jmp     short copy_nextline
 35631                                  
 35632                                  copy_skip:
 35633 00003E01 5F                              pop     di
 35634                                  copy_error:
 35635 00003E02 F8                              clc                     ;
 35636 00003E03 E80304                          call    print_error     ; note that carry is clear, no pause
 35637 00003E06 EB24                            jmp     short copy_nextline
 35638                                  
 35639                                  ;   Copy the line at ES:SI to the current location at DS:DI
 35640                                  
 35641                                  copy_line:
 35642 00003E08 8805                            mov     [di],al         ;
 35643 00003E0A 47                              inc     di              ;
 35644 00003E0B 3C20                            cmp     al,' '          ; is this is a "real" line with a "real" code?
 35645 00003E0D 721D                            jb	short copy_nextline ; no
 35646 00003E0F 2E803E[DE14]00                  cmp     byte [cs:config_multi],0
 35647 00003E15 7409                            je	short copy_loop	; not a multi-config config.sys, don't embed #s
 35648 00003E17 E81700                          call    get_linenum	; BX == line # of line @ES:SI
 35649 00003E1A 891D                            mov     [di],bx         ; stash it immediately following the line code
 35650 00003E1C 47                              inc     di              ;
 35651 00003E1D 47                              inc     di              ;
 35652 00003E1E EB08                            jmp     short copy_next ;
 35653                                  copy_loop:                      ;
 35654 00003E20 E81003                          call    get_char        ;
 35655 00003E23 7297                            jc	short copy_done ; end of file
 35656 00003E25 8805                            mov     [di],al         ;
 35657 00003E27 47                              inc     di              ;
 35658                                  copy_next:
 35659 00003E28 3C0A                            cmp     al,lf ; 0Ah	; done with line?
 35660 00003E2A 75F4                            jne	short copy_loop	; nope
 35661                                  
 35662                                  copy_nextline:
 35663 00003E2C E8DE02                          call    skip_opt_line   ;
 35664 00003E2F EB8C                            jmp     short copy_block
 35665                                  
 35666                                  	; 18/12/2022
 35667                                  ;copy_done:
 35668                                          ;retn
 35669                                  
 35670                                  ;----------------------------------------------------------------------------
 35671                                  ;
 35672                                  ;   get_linenum: return line # (in BX) of current line (@ES:SI)
 35673                                  ;
 35674                                  ;   INPUT
 35675                                  ;    ES:SI -> some line in the config.sys memory image
 35676                                  ;
 35677                                  ;   OUTPUT
 35678                                  ;       BX == line # (relative to 1)
 35679                                  ;
 35680                                  ;   OTHER REGS USED
 35681                                  ;       DX
 35682                                  ;
 35683                                  ;   NOTES
 35684                                  ;       None
 35685                                  ;
 35686                                  ;   HISTORY
 35687                                  ;       Created 16-Mar-1992 by JeffPar
 35688                                  ;
 35689                                  ;----------------------------------------------------------------------------
 35690                                  
 35691                                  get_linenum:
 35692 00003E31 50                              push    ax              ;
 35693 00003E32 29DB                            sub     bx,bx           ; BX == line # (to be returned)
 35694 00003E34 51                              push    cx              ;
 35695 00003E35 89F2                            mov     dx,si           ; DX == the offset we're looking for
 35696 00003E37 56                              push    si              ;
 35697 00003E38 2E8B0E[5403]                    mov     cx,[cs:count]   ;
 35698 00003E3D 29F6                            sub     si,si           ; prepare to scan entire file
 35699                                  get_linenum_loop:               ;
 35700 00003E3F E8C602                          call    skip_line       ;
 35701 00003E42 7205                            jc	short get_linenum_done
 35702 00003E44 43                              inc     bx              ;
 35703 00003E45 39D6                            cmp     si,dx           ; have we exceeded the desired offset yet?
 35704 00003E47 72F6                            jb	short get_linenum_loop ; no
 35705                                  get_linenum_done:               ;
 35706 00003E49 5E                              pop     si              ;
 35707 00003E4A 59                              pop     cx              ;
 35708 00003E4B 58                              pop     ax              ;
 35709 00003E4C C3                              retn
 35710                                  
 35711                                  ;----------------------------------------------------------------------------
 35712                                  ;
 35713                                  ;   srch_block: searches entire config.sys for block name @ES:DI
 35714                                  ;
 35715                                  ;   INPUT
 35716                                  ;       ES -> config.sys image
 35717                                  ;    ES:DI -> block name to find
 35718                                  ;
 35719                                  ;   OUTPUT
 35720                                  ;       ZF flag set, if found
 35721                                  ;    ES:DI -> just past the name in the block heading, if found
 35722                                  ;       BX == # bytes remaining from that point, if found
 35723                                  ;
 35724                                  ;   OTHER REGS USED
 35725                                  ;       None
 35726                                  ;
 35727                                  ;   NOTES
 35728                                  ;       This differs from "find_block" in that it searches the ENTIRE
 35729                                  ;       config.sys image, not merely the remaining portion, and that it
 35730                                  ;       takes a pointer to block name that is *elsewhere* in the image
 35731                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 35732                                  ;
 35733                                  ;   HISTORY
 35734                                  ;       Created 16-Mar-1992 by JeffPar
 35735                                  ;
 35736                                  ;----------------------------------------------------------------------------
 35737                                  
 35738                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 35739 00003E4D 50                              push    ax              ;
 35740 00003E4E 51                              push    cx              ;
 35741 00003E4F 2E8B0E[5403]                    mov     cx,[cs:count]   ;
 35742 00003E54 56                              push    si              ;
 35743 00003E55 29F6                            sub     si,si           ;
 35744 00003E57 1E                              push    ds              ;
 35745 00003E58 06                              push    es              ;
 35746 00003E59 1F                              pop     ds              ;
 35747 00003E5A E80900                          call    find_block      ;
 35748 00003E5D 89F7                            mov     di,si           ;
 35749 00003E5F 89CB                            mov     bx,cx           ;
 35750 00003E61 1F                              pop     ds              ;
 35751 00003E62 5E                              pop     si              ;
 35752 00003E63 59                              pop     cx              ;
 35753 00003E64 58                              pop     ax              ;
 35754                                  find_exit: ; 16/04/2019
 35755 00003E65 C3                              retn			;
 35756                                  
 35757                                  ;----------------------------------------------------------------------------
 35758                                  ;
 35759                                  ;   find_block: searches rest of config.sys for block name @DS:DI
 35760                                  ;
 35761                                  ;   INPUT
 35762                                  ;    DS:DI -> block name to find
 35763                                  ;    ES:SI -> remainder of config.sys image
 35764                                  ;       CX == remaining size of config.sys image
 35765                                  ;
 35766                                  ;   OUTPUT
 35767                                  ;       ZF flag set, if found (also, CF set if EOF)
 35768                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 35769                                  ;       CX == # bytes remaining from that point
 35770                                  ;
 35771                                  ;   OTHER REGS USED
 35772                                  ;       AX
 35773                                  ;
 35774                                  ;   NOTES
 35775                                  ;       This differs from "srch_block" in that it searches only the
 35776                                  ;       remaining portion of the config.sys image and leaves SI and CX
 35777                                  ;       pointing to where the search left off, and that it takes a pointer
 35778                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 35779                                  ;
 35780                                  ;   HISTORY
 35781                                  ;       Created 16-Mar-1992 by JeffPar
 35782                                  ;
 35783                                  ;----------------------------------------------------------------------------
 35784                                  
 35785                                  find_block:
 35786 00003E66 E8CA02                          call    get_char        ; get line code
 35787 00003E69 72FA                            jc	short find_exit	; end of file
 35788 00003E6B 247F                            and     al,~CONFIG_OPTION_QUERY
 35789 00003E6D 3C5B                            cmp     al,CONFIG_BEGIN ; beginning of a block?
 35790 00003E6F 740C                            je	short check_line ; no
 35791 00003E71 3C4A                            cmp     al,CONFIG_INCLUDE
 35792 00003E73 7513                            jne	short next_line	;
 35793 00003E75 2E800E[DE14]01                  or	byte [cs:config_multi],1
 35794 00003E7B EB0B                            jmp     short next_line ;
 35795                                  check_line:
 35796 00003E7D 2E800E[DE14]01                  or      byte [cs:config_multi],1
 35797 00003E83 E80700                          call    comp_names      ; compare block names
 35798 00003E86 76DD                            jbe	short find_exit	; end of file, or names matched
 35799                                  next_line:
 35800 00003E88 E88202                          call    skip_opt_line   ; no, so skip to next line
 35801 00003E8B EBD9                            jmp	short find_block  ;
 35802                                  ;find_exit:
 35803                                  ;	retn
 35804                                  
 35805                                  ;----------------------------------------------------------------------------
 35806                                  ;
 35807                                  ;   comp_names: compares keyword @DS:DI to position in config.sys @ES:SI
 35808                                  ;
 35809                                  ;   INPUT
 35810                                  ;    DS:DI -> keyword to compare
 35811                                  ;    ES:SI -> position in config.sys
 35812                                  ;       CX == remaining bytes in config.sys
 35813                                  ;
 35814                                  ;   OUTPUT
 35815                                  ;       ZF flag set, if match (also, CF set if EOF)
 35816                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 35817                                  ;       CX == # bytes remaining from that point
 35818                                  ;
 35819                                  ;   OTHER REGS USED
 35820                                  ;       AX
 35821                                  ;
 35822                                  ;   NOTES
 35823                                  ;       None
 35824                                  ;
 35825                                  ;   HISTORY
 35826                                  ;       Created 16-Mar-1992 by JeffPar
 35827                                  ;
 35828                                  ;----------------------------------------------------------------------------
 35829                                  
 35830                                  comp_names:
 35831 00003E8D 57                              push    di              ;
 35832                                  comp_loop:                      ;
 35833 00003E8E E8A202                          call    get_char        ;
 35834 00003E91 7210                            jc	short comp_exit	;
 35835 00003E93 E80A04                          call    any_delim       ; is next character a delimiter?
 35836 00003E96 8A25                            mov     ah,[di]         ; (get next character we're supposed to match)
 35837 00003E98 740B                            je	short comp_almost ; yes, it *could* be a match
 35838 00003E9A 47                              inc     di              ;
 35839 00003E9B 25DFDF                          and     ax,~2020h ; 0DFDFh 
 35840                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 35841 00003E9E 38E0                            cmp     al,ah           ; match?
 35842 00003EA0 74EC                            je	short comp_loop ; yes, keep looking at the characters
 35843 00003EA2 F8                              clc                     ; prevent erroneous eof indication: clear carry
 35844                                  comp_exit:                      ;
 35845 00003EA3 5F                              pop     di              ;
 35846 00003EA4 C3                              retn			;
 35847                                  comp_almost:                    ;
 35848 00003EA5 86C4                            xchg    al,ah           ; we don't know for sure if it's a match
 35849 00003EA7 E8F603                          call    any_delim       ; until we verify that the second string has
 35850 00003EAA 86C4                            xchg    al,ah           ; been exhausted also...
 35851 00003EAC EBF5                            jmp     short comp_exit ; if we are, this call to any_delim will tell...
 35852                                  
 35853                                  ;----------------------------------------------------------------------------
 35854                                  
 35855                                  comp_names_safe:
 35856 00003EAE 50                              push    ax
 35857 00003EAF 51                              push    cx
 35858 00003EB0 56                              push	si
 35859 00003EB1 1E                              push    ds
 35860 00003EB2 0E                              push    cs
 35861 00003EB3 1F                              pop     ds
 35862 00003EB4 E8D6FF                          call    comp_names
 35863 00003EB7 1F                              pop     ds
 35864 00003EB8 5E                      	pop	si
 35865 00003EB9 59                              pop     cx
 35866 00003EBA 58                              pop     ax
 35867 00003EBB C3                              retn
 35868                                  
 35869                                  ;----------------------------------------------------------------------------
 35870                                  ;
 35871                                  ;   print_item: display menu item #BL
 35872                                  ;
 35873                                  ;   INPUT
 35874                                  ;       BL == menu item # to display
 35875                                  ;
 35876                                  ;   OUTPUT
 35877                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 35878                                  ;
 35879                                  ;   OTHER REGS USED
 35880                                  ;       None
 35881                                  ;
 35882                                  ;   NOTES
 35883                                  ;       This function saves/restores the current cursor position, so you
 35884                                  ;       needn't worry about it.
 35885                                  ;
 35886                                  ;   HISTORY
 35887                                  ;       Created 16-Mar-1992 by JeffPar
 35888                                  ;
 35889                                  ;----------------------------------------------------------------------------
 35890                                  
 35891                                  	; 04/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35892                                  	; (SYSINIT:485Ah)
 35893                                  
 35894                                  print_item:		; prints menu item #BL (1 to N)
 35895 00003EBC 50                              push    ax              ;
 35896 00003EBD 53                              push    bx              ;
 35897 00003EBE 51                              push    cx              ;
 35898 00003EBF 52                              push    dx              ;
 35899 00003EC0 56                              push    si              ;
 35900 00003EC1 B403                            mov     ah,03h          ; get cursor position
 35901 00003EC3 8A3E[A247]                      mov     bh,[bMenuPage]  ; always page zero
 35902 00003EC7 CD10                            int     10h             ; DH/DL = row/column
 35903 00003EC9 52                              push    dx              ; save it
 35904 00003ECA B402                            mov     ah,02h          ; set cursor position
 35905 00003ECC 88DE                            mov     dh,bl           ;
 35906 00003ECE 80C603                          add     dh,3            ;
 35907 00003ED1 B205                            mov     dl,5            ;
 35908 00003ED3 CD10                            int     10h             ; set cursor position for correct row/col
 35909 00003ED5 88D8                            mov     al,bl           ;
 35910 00003ED7 0430                            add     al,'0'          ; convert menu item # to ASCII digit
 35911 00003ED9 8A26[A147]                      mov     ah,[bMenuColor] ; normal attribute
 35912 00003EDD 3A1E[AB47]                      cmp     bl,[bDefBlock]  ; are we printing the current block?
 35913 00003EE1 7510                            jne	short print_other ; no
 35914 00003EE3 80CC70                          or      ah,70h          ; yes, set bgnd color to white
 35915 00003EE6 88E5                            mov     ch,ah           ;
 35916 00003EE8 B104                            mov     cl,4            ;
 35917 00003EEA D2C5                            rol     ch,cl           ;
 35918 00003EEC 38E5                            cmp     ch,ah           ; are fgnd/bgnd the same?
 35919 00003EEE 7503                            jne	short print_other ; no
 35920 00003EF0 80F408                          xor     ah,08h          ; yes, so modify the fgnd intensity
 35921                                  print_other:                    ;
 35922 00003EF3 B700                            mov     bh,0            ;
 35923 00003EF5 01DB                            add     bx,bx           ;
 35924 00003EF7 8BBF[CF47]                      mov     di,[aoffBlockDesc+bx]
 35925 00003EFB 88E3                            mov     bl,ah           ; put the attribute in the correct register now
 35926 00003EFD 8A3E[A247]                      mov     bh,[bMenuPage]  ; get correct video page #
 35927 00003F01 B409                            mov     ah,09h          ; write char/attr
 35928 00003F03 B90100                          mov     cx,1            ;
 35929 00003F06 CD10                            int     10h             ;
 35930 00003F08 FEC2                            inc     dl              ; increment column
 35931 00003F0A B402                            mov     ah,02h          ;
 35932 00003F0C CD10                            int     10h             ;
 35933                                          ;mov	ax,0900h+'.'    ;
 35934 00003F0E B82E09                          mov	ax,092Eh
 35935 00003F11 CD10                    	int     10h             ; display '.'
 35936 00003F13 FEC2                            inc     dl              ; increment column
 35937 00003F15 B402                            mov     ah,02h          ;
 35938 00003F17 CD10                            int     10h             ;
 35939                                          ;mov	ax,0900h+' '    ;
 35940 00003F19 B82009                          mov	ax,0920h
 35941 00003F1C CD10                    	int     10h             ; display ' '
 35942 00003F1E FEC2                            inc     dl              ; increment column
 35943 00003F20 B402                            mov     ah,02h          ;
 35944 00003F22 CD10                            int     10h             ;
 35945 00003F24 06                              push    es              ;
 35946                                  print_loop:                     ;
 35947 00003F25 268A05                          mov     al,[es:di]	; get a character of the description
 35948 00003F28 47                              inc     di              ;
 35949 00003F29 3C09                            cmp     al,TAB ; 9	; substitute spaces for tabs
 35950 00003F2B 7502                            jne	short print_nontab ;
 35951 00003F2D B020                            mov     al,' '          ;
 35952                                  print_nontab:                   ;
 35953 00003F2F 3C20                            cmp     al,' '          ;
 35954 00003F31 7215                            jb	short print_done ; stop at the 1st character < space
 35955 00003F33 3C24                            cmp     al,'$'          ;
 35956 00003F35 7411                            je	short print_done ; also stop on $
 35957 00003F37 B409                            mov     ah,09h          ; display function #
 35958 00003F39 CD10                            int     10h             ;
 35959 00003F3B FEC2                            inc     dl              ; increment column
 35960 00003F3D 80FA4E                          cmp     dl,78           ; far enough?
 35961 00003F40 7306                            jae	short print_done ; yes
 35962 00003F42 B402                            mov     ah,02h          ;
 35963 00003F44 CD10                            int     10h             ;
 35964 00003F46 EBDD                            jmp	short  print_loop
 35965                                  print_done:                     ;
 35966 00003F48 07                              pop     es              ;
 35967 00003F49 5A                              pop     dx              ;
 35968 00003F4A B402                            mov     ah,02h          ;
 35969 00003F4C CD10                            int     10h             ; restore previous row/col
 35970 00003F4E 5E                              pop     si              ;
 35971 00003F4F 5A                              pop     dx              ;
 35972 00003F50 59                              pop     cx              ;
 35973 00003F51 5B                              pop     bx              ;
 35974 00003F52 58                              pop     ax              ;
 35975 00003F53 C3                              retn			;
 35976                                  
 35977                                  ;----------------------------------------------------------------------------
 35978                                  ;
 35979                                  ;   select_item: wait for user to select menu item, with time-out
 35980                                  ;
 35981                                  ;   INPUT
 35982                                  ;       None
 35983                                  ;
 35984                                  ;   OUTPUT
 35985                                  ;       BX == menu item # (1-N), or -1 for clean boot
 35986                                  ;       Selected menu item highlighted
 35987                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 35988                                  ;
 35989                                  ;   OTHER REGS USED
 35990                                  ;       None
 35991                                  ;
 35992                                  ;   NOTES
 35993                                  ;       None
 35994                                  ;
 35995                                  ;   HISTORY
 35996                                  ;       Created 16-Mar-1992 by JeffPar
 35997                                  ;
 35998                                  ;----------------------------------------------------------------------------
 35999                                  
 36000                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 36001 00003F54 8A1E[AB47]                      mov     bl,[bDefBlock]  ; BL will be the default block #
 36002 00003F58 88D8                            mov     al,bl           ;
 36003 00003F5A E83701                          call    disp_num        ;
 36004 00003F5D E84401                          call    show_status     ; display current interactive status
 36005 00003F60 803E[AF47]FF                    cmp     byte [secTimeOut],-1
 36006 00003F65 7452                            je	short input_key	; no time-out, just go to input
 36007 00003F67 B42C                            mov     ah,GET_TIME ; 2Ch
 36008 00003F69 CD21                            int     21h             ;
 36009 00003F6B 88F7                            mov     bh,dh           ; BH = initial # of seconds
 36010                                  check_time:
 36011 00003F6D A0[AF47]                        mov     al,[secTimeOut] ;
 36012 00003F70 2A06[B047]                      sub     al,[secElapsed] ;
 36013 00003F74 730D                            jae	short show_time	;
 36014 00003F76 800E[AA47]02                    or      byte [bQueryOpt],2 ; disable all further prompting
 36015 00003F7B C606[B047]00                    mov     byte [secElapsed],0
 36016 00003F80 E9F600                          jmp	select_done	; time's up!
 36017                                  show_time:
 36018 00003F83 53                              push    bx              ;
 36019 00003F84 88C3                            mov     bl,al           ; save # in BL
 36020 00003F86 8A3E[A247]                      mov     bh,[bMenuPage]  ;
 36021 00003F8A B403                            mov     ah,03h          ; get cursor position
 36022 00003F8C CD10                            int     10h             ;
 36023 00003F8E 52                              push    dx              ;
 36024 00003F8F 80C208                  	add	dl,8		; move cursor to the right
 36025 00003F92 B402                            mov     ah,02h          ; set cursor position
 36026 00003F94 CD10                            int     10h             ;
 36027 00003F96 BA[644D]                        mov     dx,_$TimeOut
 36028 00003F99 E8DC05                          call    print           ; print the "Time remaining: " prompt
 36029 00003F9C 88D8                            mov     al,bl           ; recover # from BL
 36030 00003F9E 98                              cbw                     ; this works because AL is always <= 90
 36031 00003F9F B10A                            mov     cl,10           ;
 36032 00003FA1 F6F1                            div     cl              ; AL = tens digit, AH = ones digit
 36033 00003FA3 88E1                            mov     cl,ah           ;
 36034 00003FA5 0430                            add     al,'0'          ;
 36035 00003FA7 B40E                            mov     ah,0Eh          ;
 36036 00003FA9 CD10                            int     10h             ; write TTY tens digit
 36037 00003FAB 88C8                            mov     al,cl           ;
 36038 00003FAD 0430                            add     al,'0'          ;
 36039 00003FAF B40E                            mov     ah,0Eh          ;
 36040 00003FB1 CD10                            int     10h             ; write TTY ones digit
 36041 00003FB3 5A                              pop     dx
 36042 00003FB4 B402                            mov     ah,02h          ; set cursor position back to where it was
 36043 00003FB6 CD10                            int     10h             ;
 36044 00003FB8 5B                              pop     bx              ;
 36045                                  input_key:
 36046 00003FB9 B406                            mov     ah,RAW_CON_IO ; 6
 36047 00003FBB B2FF                            mov     dl,0FFh         ; input request
 36048 00003FBD CD21                            int     21h             ;
 36049 00003FBF 751F                            jnz	short got_key	;
 36050 00003FC1 803E[AF47]FF                    cmp     byte [secTimeOut],-1; is there a time-out?
 36051 00003FC6 74F1                            je	short input_key	; no, just go back to input
 36052 00003FC8 B42C                            mov     ah,GET_TIME     ;
 36053 00003FCA CD21                            int     21h             ; DH = seconds
 36054 00003FCC 88F4                            mov     ah,dh           ;
 36055 00003FCE 28FE                            sub     dh,bh           ; should generally be zero or one
 36056 00003FD0 88E7                            mov     bh,ah           ;
 36057 00003FD2 7302                            jnc	short got_time	;
 36058 00003FD4 B601                            mov     dh,1            ; it wrapped back to zero, so assume one
 36059                                  got_time:
 36060 00003FD6 08F6                            or      dh,dh           ; any change?
 36061 00003FD8 74DF                            jz	short input_key	; no
 36062 00003FDA 0036[B047]                      add     [secElapsed],dh ;
 36063 00003FDE EB8D                            jmp	short check_time ;
 36064                                  got_key:
 36065 00003FE0 50                              push    ax              ;
 36066 00003FE1 B8FFFF                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 36067 00003FE4 8706[AF47]                      xchg    [secTimeOut],ax
 36068 00003FE8 3CFF                            cmp     al,-1           ; was time-out already disabled?
 36069 00003FEA 740E                            je	short timeout_disabled ; yes
 36070 00003FEC 53                              push    bx              ; let's disable # seconds display
 36071 00003FED B8200A                          mov     ax,0A20h        ; write multiple spaces
 36072 00003FF0 8B1E[A147]                      mov     bx,[bMenuColor]
 36073 00003FF4 B95000                          mov     cx,80           ; 80 of them, to be safe
 36074 00003FF7 CD10                            int     10h             ; to completely obliterate # seconds display
 36075 00003FF9 5B                              pop     bx   		;
 36076                                  
 36077                                  timeout_disabled:
 36078 00003FFA 58                              pop     ax              ;
 36079 00003FFB 08C0                            or      al,al           ; extended key pressed?
 36080 00003FFD 755A                            jnz	short normal_key ; no
 36081 00003FFF CD21                            int     21h             ; get the next part of the key then
 36082 00004001 74B6                            jz	short input_key	; hmmm, what happened to the second part?
 36083                                  
 36084 00004003 3C48                            cmp     al,48h          ; up arrow?
 36085 00004005 7510                            jne	short not_up	; no
 36086 00004007 80FB01                          cmp     bl,1            ; are we as up as up can get?
 36087 0000400A 76AD                            jbe	short input_key	; yes, ignore it
 36088 0000400C FE0E[AB47]                      dec     byte [bDefBlock] ;
 36089 00004010 E8A9FE                          call    print_item      ; re-print the current item
 36090 00004013 FECB                            dec     bl              ; and then print the new current item
 36091 00004015 EB12                            jmp     short print1
 36092                                  not_up:
 36093 00004017 3C50                            cmp     al,50h          ; down arrow?
 36094 00004019 7518                            jne	short not_down	; no
 36095 0000401B 3A1E[AC47]                      cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 36096 0000401F 7310                            jae	short to_input_key ; yes, ignore it
 36097 00004021 FE06[AB47]                      inc     byte [bDefBlock] ;
 36098 00004025 E894FE                          call    print_item      ; re-print the current item
 36099 00004028 43                              inc     bx              ; and then print the new current item
 36100                                  print1: 
 36101 00004029 88D8                    	mov     al,bl           ;
 36102                                  print2: 
 36103 0000402B E88EFE                  	call    print_item      ;
 36104 0000402E E86300                          call    disp_num        ;
 36105                                  to_input_key:
 36106 00004031 EB86                            jmp     input_key       ;
 36107                                  not_down:
 36108 00004033 F606[A647]01                    test    byte [bDisableUI],1
 36109 00004038 75F7                            jnz	short to_input_key ; don't allow F8 or F5
 36110 0000403A 3C42                            cmp     al,42h          ; F8 function key?
 36111 0000403C 750B                            jne	short not_f8	; no
 36112 0000403E 8036[AA47]01                    xor     byte [bQueryOpt],1
 36113 00004043 E85E00                          call    show_status     ;
 36114 00004046 E970FF                          jmp     input_key	;
 36115                                  not_f8:
 36116 00004049 3C3F                            cmp     al,3Fh          ; F5 function key?
 36117 0000404B 75E4                            jne	short to_input_key ; no
 36118                                  	; 02/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 36119                                  	; MSDOS 6.21 IO.SYS - SYSINIT:49EBh
 36120                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4C32h)
 36121 0000404D 800E[AA47]04            	or	byte [bQueryOpt],4 ; no more queries
 36122 00004052 BBFFFF                          mov     bx,-1           ; special return code (-1) indicating clean boot
 36123 00004055 B020                            mov     al,' '          ; don't want to display anything really;
 36124 00004057 EB26                            jmp     short disp_input ; just want to display the cr/lf sequence...
 36125                                  
 36126                                  normal_key:
 36127 00004059 3C0D                            cmp     al,0Dh          ; Enter?
 36128 0000405B 741C                            je	short select_done ; yes
 36129 0000405D 3C08                            cmp     al,08h          ; backspace?
 36130 0000405F 7504                            jne	short not_backspace ; no
 36131 00004061 BBFEFF                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 36132 00004064 C3                              retn			;
 36133                                  not_backspace:
 36134 00004065 2C30                            sub     al,'0'          ; is greater than '0'?
 36135 00004067 76C8                            jbe	short to_input_key ; no
 36136 00004069 3A06[AC47]                      cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 36137 0000406D 77C2                            ja	short to_input_key ; no
 36138 0000406F A2[AB47]                        mov	[bDefBlock],al  ;
 36139 00004072 E847FE                          call    print_item      ; redisplay the current selection
 36140 00004075 88C3                            mov     bl,al           ; set new selection
 36141 00004077 EBB2                            jmp	short print2
 36142                                  
 36143                                  select_done:
 36144 00004079 B700                            mov     bh,0            ; return a full 16-bit value (for indexing)
 36145 0000407B 88D8                            mov     al,bl           ;
 36146 0000407D 0430                            add     al,'0'          ; convert it into a digit, then display it
 36147                                  
 36148                                  	; fall into disp_input
 36149                                  
 36150                                  ; 16/04/2019 - Retro DOS v4.0
 36151                                  
 36152                                  ;----------------------------------------------------------------------------
 36153                                  ;
 36154                                  ;   disp_input: display a single character + cr/lf
 36155                                  ;
 36156                                  ;   INPUT
 36157                                  ;       AL == character to display
 36158                                  ;
 36159                                  ;   OUTPUT
 36160                                  ;       None
 36161                                  ;
 36162                                  ;   OTHER REGS USED
 36163                                  ;       None
 36164                                  ;
 36165                                  ;   NOTES
 36166                                  ;       This function is used not only for the menu input selection but
 36167                                  ;       also for the interactive line prompting (the y/n/a thing).
 36168                                  ;
 36169                                  ;   HISTORY
 36170                                  ;       Created 16-Mar-1992 by JeffPar
 36171                                  ;
 36172                                  ;----------------------------------------------------------------------------
 36173                                  
 36174                                  disp_input:
 36175 0000407F 50                              push    ax
 36176 00004080 3C20                            cmp     al,' '
 36177 00004082 7302                            jae	short disp_ok
 36178 00004084 B020                            mov     al,' '
 36179                                  disp_ok:
 36180 00004086 88C2                            mov     dl,al
 36181 00004088 B402                            mov     ah,STD_CON_OUTPUT ; 2
 36182 0000408A CD21                            int     21h
 36183 0000408C BA[C44A]                        mov     dx,crlfm
 36184 0000408F E8E604                          call    print
 36185 00004092 58                              pop     ax
 36186 00004093 C3                              retn
 36187                                  
 36188                                  ;----------------------------------------------------------------------------
 36189                                  
 36190                                  disp_num:
 36191 00004094 53                              push    bx
 36192 00004095 0430                            add     al,'0'
 36193 00004097 B40A                            mov     ah,0Ah
 36194 00004099 8B1E[A147]                      mov     bx,[bMenuColor]
 36195 0000409D B90100                          mov     cx,1
 36196 000040A0 CD10                            int     10h
 36197 000040A2 5B                              pop     bx
 36198 000040A3 C3                              retn
 36199                                  
 36200                                  ;----------------------------------------------------------------------------
 36201                                  ;
 36202                                  ;   show_status: display current interactive mode setting (on/off/none)
 36203                                  ;
 36204                                  ;   INPUT
 36205                                  ;       None
 36206                                  ;
 36207                                  ;   OUTPUT
 36208                                  ;       None
 36209                                  ;
 36210                                  ;   OTHER REGS USED
 36211                                  ;       None
 36212                                  ;
 36213                                  ;   NOTES
 36214                                  ;       None
 36215                                  ;
 36216                                  ;   HISTORY
 36217                                  ;       Created 16-Mar-1992 by JeffPar
 36218                                  ;
 36219                                  ;----------------------------------------------------------------------------
 36220                                  
 36221                                  show_status:
 36222 000040A4 53                              push    bx              ; BL = video page #
 36223 000040A5 8B1E[A147]                      mov     bx,[bMenuColor]
 36224 000040A9 B403                            mov     ah,03h          ; get cursor position
 36225 000040AB CD10                            int     10h             ;
 36226 000040AD 52                              push    dx              ; save it
 36227 000040AE B402                            mov     ah,02h          ; set cursor position
 36228 000040B0 8B16[A447]                      mov     dx,[bLastCol]   ; set correct row/col
 36229 000040B4 F606[A647]01                    test    byte [bDisableUI],1
 36230 000040B9 740E                            jz	short show_onoff ; just show on/off
 36231 000040BB B200                            mov     dl,0            ;
 36232 000040BD CD10                            int     10h             ;
 36233 000040BF B8200A                          mov     ax,0A20h        ; write multiple spaces
 36234 000040C2 B95000                          mov     cx,80           ; 80 of them, to be exact
 36235 000040C5 CD10                            int     10h             ; to obliterate the status line
 36236 000040C7 EB13                            jmp     short show_done ;
 36237                                  show_onoff: 
 36238 000040C9 CD10                            int     10h
 36239                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 36240                                  		; AL = character, BH = display page - alpha mode
 36241                                  		; BL = color of character (graphics mode, PCjr only)
 36242                                  		; CX = number of times to write character
 36243                                  
 36244 000040CB A0[604D]                        mov     al,[_$NO]	; assume OFF
 36245 000040CE 803E[AA47]01                    cmp     byte [bQueryOpt],1 ; is interactive mode on?
 36246 000040D3 7503                            jne	short show_noton ; no
 36247 000040D5 A0[5C4D]                        mov     al,[_$YES]	; yes
 36248                                  show_noton:                     ;
 36249 000040D8 B40E                            mov     ah,0Eh          ; write TTY
 36250 000040DA CD10                            int     10h             ;
 36251                                  show_done:                      ;
 36252 000040DC 5A                              pop     dx              ;
 36253 000040DD B402                            mov     ah,02h          ;
 36254 000040DF CD10                            int     10h             ; restore original cursor position
 36255 000040E1 5B                              pop     bx              ;
 36256 000040E2 C3                              retn			;
 36257                                  
 36258                                  ; 16/04/2019 - Retro DOS v4.0
 36259                                  
 36260                                  ;----------------------------------------------------------------------------
 36261                                  ;
 36262                                  ;   skip_token: advances ES:SI/CX past the current token
 36263                                  ;
 36264                                  ;   INPUT
 36265                                  ;    ES:SI -> position in config.sys
 36266                                  ;       CX == remaining bytes in config.sys
 36267                                  ;
 36268                                  ;   OUTPUT
 36269                                  ;       CF set if EOL/EOF hit
 36270                                  ;       AL == 1st char of delimiter
 36271                                  ;    ES:SI -> just past the delimiter
 36272                                  ;       CX == # bytes remaining from that point
 36273                                  ;
 36274                                  ;   OTHER REGS USED
 36275                                  ;       AX
 36276                                  ;
 36277                                  ;   NOTES
 36278                                  ;       None
 36279                                  ;
 36280                                  ;   HISTORY
 36281                                  ;       Created 16-Mar-1992 by JeffPar
 36282                                  ;
 36283                                  ;----------------------------------------------------------------------------
 36284                                  
 36285                                  skip_token:
 36286 000040E3 E84D00                          call    get_char
 36287 000040E6 7210                            jc	short skip_token_done
 36288 000040E8 E8B501                          call    any_delim
 36289 000040EB 75F6                            jne	short skip_token
 36290                                  skip_check_eol:
 36291 000040ED 3C0D                            cmp     al,cr ; 0Dh
 36292 000040EF 7406                            je	short skip_token_eol
 36293 000040F1 3C0A                            cmp     al,lf ; 0Ah
 36294 000040F3 7402                            je	short skip_token_eol
 36295 000040F5 F8                              clc
 36296                                          ;jmp	short skip_token_done
 36297 000040F6 C3                      	retn
 36298                                  skip_token_eol:
 36299 000040F7 F9                              stc
 36300                                  skip_token_done:
 36301 000040F8 C3                              retn
 36302                                  
 36303                                  ;----------------------------------------------------------------------------
 36304                                  ;
 36305                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 36306                                  ;
 36307                                  ;   INPUT
 36308                                  ;    ES:SI -> position in config.sys
 36309                                  ;       CX == remaining bytes in config.sys
 36310                                  ;
 36311                                  ;   OUTPUT
 36312                                  ;       CF set if EOF hit
 36313                                  ;       AL == 1st char of token
 36314                                  ;    ES:SI -> just past the token
 36315                                  ;       CX == # bytes remaining from that point
 36316                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 36317                                  ;
 36318                                  ;   OTHER REGS USED
 36319                                  ;       AX
 36320                                  ;
 36321                                  ;   NOTES
 36322                                  ;       None
 36323                                  ;
 36324                                  ;   HISTORY
 36325                                  ;       Created 16-Mar-1992 by JeffPar
 36326                                  ;
 36327                                  ;----------------------------------------------------------------------------
 36328                                  
 36329                                  skip_delim:	; returns carry set if eol/eof
 36330 000040F9 E83700                          call    get_char        ;
 36331 000040FC 8D5CFF                          lea     bx,[si-1]       ; also returns BX -> next token
 36332 000040FF 72F7                            jc	short skip_token_done ;
 36333 00004101 E8AC01                          call    delim           ;
 36334 00004104 74F3                            je	short skip_delim ;
 36335 00004106 EBE5                            jmp	short skip_check_eol  ; 13/05/2019
 36336                                  
 36337                                  ;----------------------------------------------------------------------------
 36338                                  ;
 36339                                  ;   skip_opt_line: same as skip_line provided AL != LF
 36340                                  ;
 36341                                  ;   INPUT
 36342                                  ;       AL == last character read
 36343                                  ;    ES:SI -> position in config.sys
 36344                                  ;       CX == remaining bytes in config.sys
 36345                                  ;
 36346                                  ;   OUTPUT
 36347                                  ;       CF set if EOF hit
 36348                                  ;       AL == 1st char of new line
 36349                                  ;    ES:SI -> just past 1st char of new line
 36350                                  ;       CX == # bytes remaining from that point
 36351                                  ;
 36352                                  ;   OTHER REGS USED
 36353                                  ;       AX
 36354                                  ;
 36355                                  ;   NOTES
 36356                                  ;       In other words, the purpose here is to skip to the next line,
 36357                                  ;       unless ES:SI is already sitting at the front of the next line (which
 36358                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 36359                                  ;
 36360                                  ;   HISTORY
 36361                                  ;       Created 16-Mar-1992 by JeffPar
 36362                                  ;
 36363                                  ;----------------------------------------------------------------------------
 36364                                  
 36365                                  ; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 36366                                  ;skip_opt_line:
 36367                                  ;	cmp     al,lf ; 0Ah
 36368                                  ;	je	short skip_line_done
 36369                                       
 36370                                  	; fall into skip_line
 36371                                  
 36372                                  ;----------------------------------------------------------------------------
 36373                                  ;
 36374                                  ;   skip_line: skip to the next line
 36375                                  ;
 36376                                  ;   INPUT
 36377                                  ;    ES:SI -> position in config.sys
 36378                                  ;       CX == remaining bytes in config.sys
 36379                                  ;
 36380                                  ;   OUTPUT
 36381                                  ;       CF set if EOF hit
 36382                                  ;    ES:SI -> just past 1st char of new line
 36383                                  ;       CX == # bytes remaining from that point
 36384                                  ;
 36385                                  ;   OTHER REGS USED
 36386                                  ;       AX
 36387                                  ;
 36388                                  ;   NOTES
 36389                                  ;       None
 36390                                  ;
 36391                                  ;   HISTORY
 36392                                  ;       Created 16-Mar-1992 by JeffPar
 36393                                  ;
 36394                                  ;----------------------------------------------------------------------------
 36395                                  
 36396                                  skip_line:
 36397 00004108 E82800                          call    get_char
 36398 0000410B 7204                            jc	short skip_line_done
 36399                                  skip_opt_line:	; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 36400 0000410D 3C0A                            cmp     al,lf ; 0Ah
 36401 0000410F 75F7                            jne	short skip_line
 36402                                  skip_line_done:
 36403                                  num_done:	; 18/12/2022
 36404 00004111 C3                              retn
 36405                                  
 36406                                  ;----------------------------------------------------------------------------
 36407                                  ;
 36408                                  ;   get_number: return binary equivalent of numeric string
 36409                                  ;
 36410                                  ;   INPUT
 36411                                  ;    ES:SI -> position in config.sys
 36412                                  ;       CX == remaining bytes in config.sys
 36413                                  ;
 36414                                  ;   OUTPUT
 36415                                  ;       AL == non-digit encountered
 36416                                  ;       BX == binary #
 36417                                  ;    ES:SI -> just past 1st non-digit
 36418                                  ;       CX == # bytes remaining from that point
 36419                                  ;
 36420                                  ;   OTHER REGS USED
 36421                                  ;       AX
 36422                                  ;
 36423                                  ;   NOTES
 36424                                  ;       None
 36425                                  ;
 36426                                  ;   HISTORY
 36427                                  ;       Created 16-Mar-1992 by JeffPar
 36428                                  ;
 36429                                  ;----------------------------------------------------------------------------
 36430                                  
 36431                                  ; 13/05/2019
 36432                                  
 36433                                  get_number:
 36434 00004112 29DB                            sub     bx,bx           ; BX = result
 36435                                  num_loop:
 36436 00004114 E81C00                          call    get_char        ;
 36437 00004117 72F8                            jc	short num_done	;
 36438 00004119 3C30                            cmp     al,'0'          ; convert to value
 36439 0000411B 72F4                            jb	short num_done	; no more number
 36440 0000411D 3C39                            cmp     al,'9'          ;
 36441 0000411F 77F0                            ja	short num_done	;
 36442 00004121 50                              push    ax              ;
 36443 00004122 B80A00                          mov     ax,10           ;
 36444 00004125 52                              push    dx              ;
 36445 00004126 F7E3                            mul     bx              ;
 36446 00004128 5A                              pop     dx              ;
 36447 00004129 89C3                            mov     bx,ax           ;
 36448 0000412B 58                              pop     ax              ;
 36449 0000412C 2C30                            sub     al,'0'          ;
 36450 0000412E 98                              cbw                     ;
 36451 0000412F 01C3                            add     bx,ax           ;
 36452 00004131 EBE1                            jmp	short num_loop	;
 36453                                  
 36454                                  	; 18/12/2022
 36455                                  ;num_done:
 36456                                          ;retn
 36457                                  
 36458                                  ;----------------------------------------------------------------------------
 36459                                  ;
 36460                                  ;   get_char: return next character, advance ES:SI, and decrement CX
 36461                                  ;
 36462                                  ;   INPUT
 36463                                  ;    ES:SI -> position in config.sys
 36464                                  ;       CX == remaining bytes in config.sys
 36465                                  ;
 36466                                  ;   OUTPUT
 36467                                  ;       AL == next character
 36468                                  ;    ES:SI -> just past next character
 36469                                  ;       CX == # bytes remaining from that point
 36470                                  ;
 36471                                  ;   OTHER REGS USED
 36472                                  ;       AX
 36473                                  ;
 36474                                  ;   NOTES
 36475                                  ;       None
 36476                                  ;
 36477                                  ;   HISTORY
 36478                                  ;       Created 16-Mar-1992 by JeffPar
 36479                                  ;
 36480                                  ;----------------------------------------------------------------------------
 36481                                  
 36482                                  get_char:
 36483 00004133 83E901                          sub     cx,1            ; use SUB to set carry,zero
 36484 00004136 7205                            jb	short get_fail	; out of data
 36485                                          ;lods	byte ptr es:[si] ;
 36486 00004138 26                      	es	
 36487 00004139 AC                      	lodsb
 36488 0000413A 88C4                            mov     ah,al           ;
 36489 0000413C C3                              retn			;
 36490                                  get_fail:                       ; restore CX to zero
 36491 0000413D B90000                          mov     cx,0            ; leave carry set, zero not set
 36492                                  nearby_ret:
 36493 00004140 C3                              retn
 36494                                  
 36495                                  ;----------------------------------------------------------------------------
 36496                                  ;
 36497                                  ;   query_user: ask user whether to execute current config.sys command
 36498                                  ;
 36499                                  ;   INPUT
 36500                                  ;       AL == current command code
 36501                                  ;    ES:SI -> current command line in config.sys
 36502                                  ;    config_cmd == current command code, but with QUERY bit intact
 36503                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 36504                                  ;
 36505                                  ;   OUTPUT
 36506                                  ;       CF set if command should be ignored (it is also REM'ed out)
 36507                                  ;
 36508                                  ;   OTHER REGS USED
 36509                                  ;       BX, CX, DX, DI
 36510                                  ;
 36511                                  ;   NOTES
 36512                                  ;       None
 36513                                  ;
 36514                                  ;   HISTORY
 36515                                  ;       Created 16-Mar-1992 by JeffPar
 36516                                  ;
 36517                                  ;----------------------------------------------------------------------------
 36518                                  
 36519                                  	; 31/12/2022 - Retro UNIX 386 v4.2 (Modified MSDOS 6.21 IO.SYS)
 36520                                  	; (SYSINIT:4AE5h)
 36521                                  
 36522                                  	; 12/12/2022
 36523                                  query_user:
 36524 00004141 F606[AA47]04                    test    byte [bQueryOpt],4	; answer no to everything?
 36525                                  	; 01/01/2023
 36526 00004146 7403                    	jz	short qu_1		;
 36527 00004148 E9BA00                  	jmp	skip_all
 36528                                  	; 12/12/2022
 36529                                  	;;jmp	short skip_all		;
 36530                                  	;jnz	short skip_all
 36531                                  qu_1:
 36532 0000414B F606[AA47]02            	test    byte [bQueryOpt],2	; answer yes to everything?
 36533 00004150 75EE                            jnz	short nearby_ret	; yes (and return carry clear!)
 36534 00004152 50                              push    ax                      ;
 36535 00004153 A0[DD14]                        mov     al,[config_cmd]         ;
 36536 00004156 F606[AA47]01                    test    byte [bQueryOpt],1	; query every command?
 36537 0000415B 7506                            jnz	short query_all		; yes
 36538 0000415D A880                            test    al,CONFIG_OPTION_QUERY  ;
 36539                                  	; 01/01/2023
 36540 0000415F 7502                    	jnz	short query_all		;
 36541                                  	; 12/12/2022
 36542                                  	;;jmp	short do_cmd		;
 36543                                  	;jz	short do_cmd ; cf=0
 36544                                  
 36545                                  	; 01/01/2023
 36546 00004161 58                      	pop	ax
 36547 00004162 C3                      	retn
 36548                                  
 36549                                  query_all:
 36550                                  
 36551                                  ;   Search for the command code (AL) in "comtab", and then print
 36552                                  ;   out the corresponding keyword, followed by the rest of the actual
 36553                                  ;   line pointed to by ES:SI
 36554                                  
 36555 00004163 56                              push    si                      ; save pointer to rest of CONFIG.SYS line
 36556 00004164 BA[B64D]                        mov     dx,_$AutoPrmpt    	;
 36557 00004167 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 36558 00004169 7451                            jz	short generic_prompt	; config_cmd must have been 0
 36559                                  
 36560 0000416B 88C6                            mov     dh,al                   ; save config_cmd in DH
 36561 0000416D 29DB                            sub     bx,bx                   ;
 36562 0000416F BF[F747]                        mov     di,comtab		;
 36563                                  find_match:                             ;
 36564 00004172 8A1D                            mov     bl,[di]                 ; get size of current keyword
 36565 00004174 08DB                            or      bl,bl                   ;
 36566 00004176 7425                            jz	short line_print	; end of table
 36567 00004178 47                              inc     di                      ;
 36568 00004179 3A01                            cmp     al,[di+bx]              ; match?
 36569 0000417B 7405                            je	short cmd_match		; yes
 36570 0000417D 8D7901                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 36571                                  	; 13/05/2019	
 36572 00004180 EBF0                            jmp	short find_match	; loop
 36573                                  cmd_match:                              ;
 36574 00004182 8A4DFF                          mov     cl,[di-1]               ;
 36575 00004185 B500                            mov	ch,0                    ;
 36576 00004187 B402                            mov     ah,STD_CON_OUTPUT ; 2
 36577                                  cmd_print:                              ;
 36578 00004189 8A05                            mov     al,[di]                 ;
 36579 0000418B 47                              inc     di                      ;
 36580 0000418C 88C2                            mov     dl,al                   ;
 36581 0000418E CD21                            int     21h                     ;
 36582 00004190 E2F7                            loop    cmd_print               ;
 36583 00004192 B23D                            mov     dl,'='                  ;
 36584 00004194 80FE56                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 36585 00004197 7502                            jne	short cmd_notset	;
 36586 00004199 B220                            mov     dl,' '                  ;
 36587                                  cmd_notset:
 36588 0000419B CD21                            int     21h                     ; '=' looks funny on SET commands
 36589                                  line_print:                             ;
 36590                                  	;lods	byte ptr es:[si]        ;
 36591 0000419D 26                              es
 36592 0000419E AC                      	lodsb
 36593 0000419F 08C0                    	or      al,al                   ;
 36594 000041A1 7502                            jnz	short non_null		;
 36595 000041A3 B020                            mov     al,' '                  ;
 36596                                  non_null:                               ;
 36597 000041A5 3C20                            cmp     al,' '                  ; control code?
 36598 000041A7 7210                            jb	short prompt_user	; yes, assume end of line
 36599 000041A9 7506                            jne	short non_space		;
 36600 000041AB 26803C20                        cmp     byte [es:si],' '	;
 36601 000041AF 7208                            jb	short prompt_user	;
 36602                                  non_space:                              ;
 36603 000041B1 88C2                            mov     dl,al                   ;
 36604 000041B3 B402                            mov     ah,STD_CON_OUTPUT ; 2	;
 36605 000041B5 CD21                            int     21h                     ;
 36606 000041B7 EBE4                            jmp	short line_print	;
 36607                                  prompt_user:                            ;
 36608 000041B9 BA[544D]                        mov     dx,_$InterPrmpt		;
 36609                                  
 36610                                  generic_prompt:
 36611 000041BC E8B903                          call    print                   ;
 36612                                  input_loop:                             ;
 36613 000041BF B400                            mov     ah,0                    ; read a key
 36614 000041C1 CD16                            int     16h                     ;
 36615 000041C3 08C0                            or      al,al                   ; is it a function key?
 36616 000041C5 750F                            jnz	short not_func		; no
 36617 000041C7 80FC3F                          cmp     ah,3Fh                  ; F5 function key?
 36618 000041CA 75F3                            jne	short input_loop	; no
 36619 000041CC A0[604D]                        mov     al,[_$NO] 		;
 36620 000041CF 800E[AA47]04                    or      byte [bQueryOpt],4	; no more queries
 36621 000041D4 EB21                            jmp     short legal_char        ;
 36622                                  not_func:
 36623 000041D6 24DF                            and     al,~20h ; 0DFh		; converting to upper case
 36624 000041D8 3A06[604D]                      cmp     al,[_$NO]		; verify character is legal
 36625 000041DC 7419                            je	short legal_char	;
 36626 000041DE 3A06[5C4D]                      cmp     al,[_$YES]		;
 36627 000041E2 7413                            je	short legal_char	;
 36628 000041E4 803E[DD14]00                    cmp     byte [config_cmd],0	;
 36629 000041E9 74D4                            je	short input_loop	; don't allow Esc on this query
 36630 000041EB 3C1B                            cmp     al,1Bh                  ; Esc?
 36631 000041ED 75D0                            jne	short input_loop	;
 36632 000041EF 800E[AA47]02                    or      byte [bQueryOpt],2	; no more interactive boot prompts
 36633 000041F4 A0[5C4D]                        mov     al,[_$YES]
 36634                                  legal_char:                             ;
 36635 000041F7 E885FE                          call    disp_input              ;
 36636 000041FA 5E                              pop     si                      ; restore pointer to rest of CONFIG.SYS line
 36637                                  
 36638 000041FB 3A06[604D]                      cmp     al,[_$NO]		; process line?
 36639 000041FF 7403                            je	short skip_cmd		; no
 36640                                  	; 12/12/2022
 36641 00004201 F8                      	clc
 36642                                  do_cmd:
 36643 00004202 58                      	pop     ax			;
 36644                                  	; 12/12/2022
 36645                                  	; cf=0
 36646                                  	;clc				; just do the command
 36647 00004203 C3                      	retn
 36648                                  
 36649                                  skip_cmd:
 36650 00004204 58                      	pop     ax			;
 36651                                  skip_all:
 36652 00004205 B430                    	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 36653 00004207 F9                      	stc
 36654 00004208 C3                      	retn
 36655                                  
 36656                                  ;----------------------------------------------------------------------------
 36657                                  ;
 36658                                  ;   print_error: displays multi-config error conditions
 36659                                  ;
 36660                                  ;   INPUT
 36661                                  ;    Carry set to pause, clear to not
 36662                                  ;    ES:SI -> current command line in config.sys
 36663                                  ;
 36664                                  ;   OUTPUT
 36665                                  ;       None
 36666                                  ;
 36667                                  ;   OTHER REGS USED
 36668                                  ;       None
 36669                                  ;
 36670                                  ;   NOTES
 36671                                  ;       None
 36672                                  ;
 36673                                  ;   HISTORY
 36674                                  ;       Created 16-Mar-1992 by JeffPar
 36675                                  ;
 36676                                  ;----------------------------------------------------------------------------
 36677                                  
 36678                                  print_error:
 36679 00004209 50                              push    ax
 36680 0000420A 53                              push    bx
 36681 0000420B 51                              push    cx
 36682 0000420C 52                              push    dx
 36683 0000420D 1E                              push    ds
 36684 0000420E 0E                              push    cs
 36685 0000420F 1F                              pop     ds
 36686 00004210 9C                              pushf
 36687 00004211 E81DFC                          call    get_linenum
 36688 00004214 891E[AD02]                      mov     [linecount],bx
 36689 00004218 E88DE7                          call    error_line
 36690 0000421B 9D                              popf
 36691 0000421C 7319                            jnc	short pe_ret
 36692 0000421E BA[1B4C]                        mov     dx,_$PauseMsg
 36693 00004221 E85403                          call    print
 36694 00004224 B8070C                          mov     ax,0C07h		; flush input buffer, then wait for key
 36695 00004227 CD21                            int     21h			; wait for a key
 36696 00004229 08C0                            or      al,al			; extended key?
 36697 0000422B 7504                            jnz	short pe_1		; no
 36698 0000422D B407                            mov     ah,07h			; yes
 36699 0000422F CD21                            int     21h			; eat it too
 36700                                  pe_1:     
 36701 00004231 BA[C44A]                	mov     dx,crlfm
 36702 00004234 E84103                          call    print
 36703                                  pe_ret: 
 36704 00004237 1F                      	pop     ds
 36705 00004238 5A                              pop     dx
 36706 00004239 59                              pop     cx
 36707 0000423A 5B                              pop     bx
 36708 0000423B 58                              pop     ax
 36709 0000423C C3                      	retn
 36710                                  
 36711                                  ;----------------------------------------------------------------------------
 36712                                  
 36713                                  ;   This function is very simple: it merely prepends a "/D" to the
 36714                                  ;   command-line for the shell; this (undocumented) switch disables
 36715                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 36716                                  ;   displayed when there's no AUTOEXEC.BAT.
 36717                                  
 36718                                  disable_autoexec:
 36719                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 36720                                  	; 17/04/2019 - Retro DOS v4.0
 36721                                  
 36722 0000423D F606[AA47]04            	test	byte [bQueryOpt],4
 36723 00004242 7443                    	jz	short disable_exit
 36724 00004244 F606[A047]01            	test	byte [dae_flag],1
 36725 00004249 753C                    	jnz	short disable_exit
 36726 0000424B 800E[A047]01            	or	byte [dae_flag],1
 36727                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 36728 00004250 810E[AA47]0201          	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 36729 00004256 BA4420                  	mov     dx,'D ' ; 2044h
 36730                                  dae_1:
 36731                                  	; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 36732 00004259 A0[DF46]                        mov	al,[def_swchr]
 36733                                  	;mov	al,[command_line-1]     ; get default switchchar
 36734 0000425C 08C0                            or      al,al                   ; anything there?
 36735 0000425E 7427                            jz	short disable_exit	; no, disable_autoexec already called
 36736 00004260 8A1E[E046]                      mov     bl,[command_line]       ;
 36737 00004264 B700                            mov     bh,0                    ; BX == command-line length
 36738 00004266 89D9                            mov     cx,bx                   ;
 36739 00004268 80C303                          add     bl,3                    ;
 36740 0000426B 80FB7E                          cmp     bl,126                  ;
 36741 0000426E 7717                            ja	short disable_exit	;
 36742 00004270 881E[E046]                      mov     [command_line],bl       ; update length
 36743 00004274 81C3[E146]                      add     bx,command_line+1	; make sure we move the NULL too
 36744 00004278 41                              inc     cx                      ; (just for consistency sake)
 36745                                  disable_loop:                           ;
 36746 00004279 8A67FD                          mov     ah,[bx-3]               ;
 36747 0000427C 8827                            mov     [bx],ah                 ;
 36748 0000427E 4B                              dec     bx                      ;
 36749 0000427F E2F8                            loop    disable_loop            ;
 36750 00004281 8847FE                          mov     [bx-2],al               ;
 36751                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 36752 00004284 8957FF                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 36753                                          ;mov	byte [command_line-1],0 ;
 36754                                  disable_exit:                           ;
 36755 00004287 C3                              retn
 36756                                  
 36757                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 36758 00004288 803E[AA47]01            	cmp     byte [bQueryOpt],1
 36759 0000428D 75F8                    	jnz     short disable_exit
 36760 0000428F F606[A047]02            	test	byte [dae_flag],2
 36761 00004294 75F1                    	jnz     short disable_exit
 36762 00004296 800E[A047]02            	or      byte [dae_flag],2
 36763 0000429B BA2059                  	mov     dx,' Y'		; 2059h
 36764 0000429E EBB9                    	jmp     short dae_1
 36765                                  
 36766                                  ;endif  ;MULTI_CONFIG
 36767                                  
 36768                                  ;%endif	; 02/11/2022
 36769                                  
 36770                                  
 36771                                  ; 19/04/2019 - Retro DOS v4.0
 36772                                  
 36773                                  ;----------------------------------------------------------------------------
 36774                                  ;
 36775                                  ; procedure : delim
 36776                                  ;
 36777                                  ;----------------------------------------------------------------------------
 36778                                  
 36779                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36780                                  ; (SYSINIT:4C45h)
 36781                                  
 36782                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36783                                  ;%if 0
 36784                                  ;;ifdef	MULTI_CONFIG
 36785                                  ;
 36786                                  any_delim:
 36787 000042A0 3C0D                    	cmp	al,cr
 36788 000042A2 7427                    	je	short delim_ret
 36789 000042A4 3C0A                    	cmp	al,lf
 36790 000042A6 7423                    	je	short delim_ret
 36791 000042A8 3C5B                    	cmp	al,'['
 36792 000042AA 741F                    	je	short delim_ret
 36793 000042AC 3C5D                    	cmp	al,']'
 36794 000042AE 741B                    	je	short delim_ret
 36795                                  ;
 36796                                  ;;endif ;MULTI_CONFIG
 36797                                  ;%endif ; 02/11/2022
 36798                                  
 36799                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 36800                                  	; (SYSINIT:3450h)	
 36801                                  delim:
 36802 000042B0 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 36803 000042B2 7417                    	je	short delim_ret
 36804                                  
 36805 000042B4 3C00                    	cmp	al,0		; special case for sysinit!!!
 36806 000042B6 7413                    	je	short delim_ret
 36807                                  
 36808                                  org_delim:			; used by organize routine except for getting
 36809 000042B8 3C20                    	cmp	al,' '          ; the filename.
 36810 000042BA 740F                    	je	short delim_ret
 36811 000042BC 3C09                            cmp     al,tab ; 9
 36812 000042BE 740B                    	je	short delim_ret
 36813 000042C0 3C3D                    	cmp	al,'='
 36814 000042C2 7407                    	je	short delim_ret
 36815 000042C4 3C2C                    	cmp	al,','
 36816 000042C6 7403                    	je	short delim_ret
 36817 000042C8 3C3B                    	cmp	al,';'
 36818                                  
 36819                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36820                                  
 36821                                  ; 04/01/2023 - Retro DOS v4.2
 36822                                  ;ifdef	MULTI_CONFIG
 36823                                  ;   Make sure there's no chance of a false EOF indication
 36824 000042CA F8                      	clc
 36825                                  ;endif
 36826                                  	; 02/11/2022
 36827                                  delim_ret:
 36828                                  	; 04/01/2023
 36829                                  	; cf = 0
 36830 000042CB C3                      	retn
 36831                                  
 36832                                  ;----------------------------------------------------------------------------
 36833                                  ;
 36834                                  ; procedure : newline
 36835                                  ;
 36836                                  ;  newline returns with first character of next line
 36837                                  ;
 36838                                  ;----------------------------------------------------------------------------
 36839                                  
 36840                                  newline:
 36841 000042CC E8C2E6                  	call	getchr			;skip non-control characters
 36842 000042CF 7207                    	jc	short nl_ret
 36843 000042D1 3C0A                    	cmp	al,lf			;look for line feed
 36844 000042D3 75F7                    	jne	short newline
 36845 000042D5 E8B9E6                  	call	getchr
 36846                                  nl_ret:
 36847 000042D8 C3                      	retn
 36848                                  
 36849                                  ;----------------------------------------------------------------------------
 36850                                  ; 
 36851                                  ; procedure : mapcase
 36852                                  ;
 36853                                  ;----------------------------------------------------------------------------
 36854                                  
 36855                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 36856                                  
 36857                                  	; 04/01/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 36858                                  	; (SYSINIT:4C7Eh)
 36859                                  mapcase:
 36860 000042D9 51                      	push	cx
 36861 000042DA 56                      	push	si
 36862 000042DB 1E                      	push	ds
 36863                                  
 36864 000042DC 06                      	push	es
 36865 000042DD 1F                      	pop	ds
 36866                                  
 36867                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36868                                  
 36869                                  ; 04/01/2023 - Retro DOS 4.2
 36870                                  
 36871                                  ;ifdef	MULTI_CONFIG
 36872 000042DE 88C3                    	mov	bl,al			; same cmd code this line
 36873                                  ;else
 36874                                  ;	xor	si,si
 36875                                  ;endif
 36876                                  	; 02/11/2022
 36877                                  	; 04/01/2023 - Retro DOS 4.2
 36878                                  	;xor	si, si
 36879                                  
 36880                                  convloop:
 36881 000042E0 AC                      	lodsb
 36882 000042E1 3C61                    	cmp	al,'a'
 36883 000042E3 7209                    	jb	short noconv
 36884 000042E5 3C7A                    	cmp	al,'z'
 36885 000042E7 7705                    	ja	short noconv
 36886 000042E9 2C20                    	sub	al,20h
 36887 000042EB 8844FF                  	mov	[si-1],al
 36888                                  noconv:
 36889                                  
 36890                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36891                                  
 36892                                  ; 04/01/2023 - Retro DOS 4.2
 36893                                  ;ifdef	MULTI_CONFIG
 36894                                  
 36895                                  ;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 36896                                  ;   upper-case a line at a time, after we've been able to figure out whether
 36897                                  ;   the line is a SET command or not (since we don't want to upper-case
 36898                                  ;   anything after the "=" in a SET)
 36899                                  ;
 36900 000042EE 80FB56                  	cmp	bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 36901 000042F1 7504                    	jne	short check_eol		; no, just check for end-of-line
 36902 000042F3 3C3D                    	cmp	al,'='                  ; separator between SET var and value?
 36903 000042F5 740A                    	je	short convdone		; yes
 36904                                  check_eol:
 36905 000042F7 3C0D                    	cmp	al,cr
 36906 000042F9 7406                    	je	short convdone
 36907 000042FB 3C0A                    	cmp	al,lf
 36908 000042FD 7402                    	je	short convdone
 36909                                  ;endif
 36910                                  	; 02/11/2022
 36911 000042FF E2DF                    	loop	convloop
 36912                                  convdone:
 36913 00004301 1F                      	pop	ds
 36914 00004302 5E                      	pop	si
 36915 00004303 59                      	pop	cx
 36916 00004304 C3                      	retn
 36917                                  
 36918                                  ;----------------------------------------------------------------------------
 36919                                  ;
 36920                                  ; procedure : round
 36921                                  ;
 36922                                  ; round the values in memlo and memhi to paragraph boundary.
 36923                                  ; perform bounds check.
 36924                                  ;
 36925                                  ;----------------------------------------------------------------------------
 36926                                  
 36927                                  round:
 36928 00004305 50                      	push	ax
 36929 00004306 2EA1[6003]              	mov	ax,[cs:memlo]
 36930                                  
 36931 0000430A E85BCE                  	call	ParaRound		; para round up
 36932                                  
 36933 0000430D 2E0106[6203]            	add	[cs:memhi],ax
 36934 00004312 2EC706[6003]0000        	mov	word [cs:memlo],0
 36935 00004319 2EA1[6203]              	mov	ax,[cs:memhi]		; ax = new memhi
 36936 0000431D 2E3B06[A302]            	cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 36937 00004322 7322                    	jae	short mem_err
 36938 00004324 2EF606[E214]02          	test	byte [cs:setdevmarkflag],for_devmark ; 2
 36939 0000432A 7418                    	jz	short skip_set_devmarksize
 36940 0000432C 06                      	push	es
 36941 0000432D 56                      	push	si
 36942 0000432E 2E8B36[E014]            	mov	si,[cs:devmark_addr]
 36943 00004333 8EC6                    	mov	es,si
 36944 00004335 29F0                    	sub	ax,si
 36945 00004337 48                      	dec	ax
 36946                                  	;mov	[es:3],ax
 36947 00004338 26A30300                	mov	[es:devmark.size],ax	; paragraph
 36948 0000433C 2E8026[E214]FD          	and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 36949 00004342 5E                      	pop	si
 36950 00004343 07                      	pop	es
 36951                                  skip_set_devmarksize:
 36952 00004344 58                      	pop	ax
 36953                                  	; 11/12/2022
 36954                                  	; cf = 0
 36955                                  	; 02/11/2022
 36956                                  	;clc	; ? (not needed here)	; clear carry
 36957 00004345 C3                      	retn
 36958                                  
 36959                                  ;----------------------------------------------------------------------------
 36960                                  
 36961                                  mem_err:
 36962                                  	; 11/12/2022
 36963 00004346 0E                      	push	cs
 36964 00004347 1F                      	pop	ds
 36965                                  mem_err2:
 36966 00004348 BA[9D4B]                	mov	dx,badmem
 36967                                  	;push	cs
 36968                                  	;pop	ds
 36969 0000434B E82A02                  	call	print
 36970 0000434E E950CE                  	jmp	stall
 36971                                  
 36972                                  ;----------------------------------------------------------------------------
 36973                                  ;
 36974                                  ; procedure : calldev
 36975                                  ;
 36976                                  ;----------------------------------------------------------------------------
 36977                                  
 36978                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 36979                                  	; (SYSINIT:34E0h)
 36980                                  calldev:
 36981 00004351 2E8E1E[B11F]            	mov	ds,[cs:DevEntry+2]
 36982 00004356 2E031E[AF1F]            	add	bx,[cs:DevEntry]	; do a little relocation
 36983 0000435B 8B07                    	mov	ax,[bx]
 36984                                  
 36985 0000435D 2EFF36[AF1F]            	push	word [cs:DevEntry]
 36986 00004362 2EA3[AF1F]              	mov	word [cs:DevEntry],ax
 36987 00004366 BB[6803]                	mov	bx,packet
 36988 00004369 2EFF1E[AF1F]            	call	far [cs:DevEntry]
 36989 0000436E 2E8F06[AF1F]            	pop	word [cs:DevEntry]
 36990 00004373 C3                      	retn
 36991                                  
 36992                                  ;----------------------------------------------------------------------------
 36993                                  ;
 36994                                  ; procedure : todigit
 36995                                  ;
 36996                                  ;----------------------------------------------------------------------------
 36997                                  
 36998                                  todigit:
 36999 00004374 2C30                    	sub	al,'0'
 37000                                  	;jb	short notdig  ; 02/11/2022
 37001                                  	; 12/12/2022
 37002 00004376 7203                    	jb	short notdig2
 37003                                  	;cmp	al,9
 37004                                  	;ja	short notdig
 37005                                  	;clc
 37006                                  	;retn
 37007                                  	; 12/12/2022
 37008 00004378 3C0A                    	cmp	al,10
 37009 0000437A F5                      	cmc
 37010                                  notdig:
 37011                                  	;stc
 37012                                  notdig2:
 37013 0000437B C3                      	retn
 37014                                  
 37015                                  ;----------------------------------------------------------------------------
 37016                                  ;
 37017                                  ; procedure : getnum
 37018                                  ;
 37019                                  ; getnum parses a decimal number.
 37020                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 37021                                  ; error), if number is bad carry is set, zero is set, ax=0.
 37022                                  ;
 37023                                  ;----------------------------------------------------------------------------
 37024                                  
 37025                                  getnum:
 37026 0000437C 53                      	push	bx
 37027 0000437D 31DB                    	xor	bx,bx			; running count is zero
 37028                                  b2:
 37029 0000437F E8F2FF                  	call	todigit 		; do we have a digit ?
 37030 00004382 7247                    	jc	short badnum		; no, bomb
 37031                                  
 37032 00004384 93                      	xchg	ax,bx			; put total in ax
 37033 00004385 53                      	push	bx			; save digit (0 to 9)
 37034                                  	;mov	bx,10			; base of arithmetic
 37035                                  	; 12/12/2022
 37036 00004386 B30A                    	mov	bl,10
 37037 00004388 F7E3                    	mul	bx			; shift by one decimal digit
 37038 0000438A 5B                      	pop	bx			; get back digit (0 to 9)
 37039 0000438B 00D8                    	add	al,bl			; get total
 37040 0000438D 80D400                  	adc	ah,0			; make that 16 bits
 37041 00004390 7239                    	jc	short badnum		; too big a number
 37042                                  
 37043 00004392 93                      	xchg	ax,bx			; stash total
 37044                                  
 37045 00004393 E8FBE5                  	call	getchr			; get next digit
 37046 00004396 722D                    	jc	short b1		; no more characters
 37047 00004398 3C20                    	cmp	al,' ' 			; space?
 37048 0000439A 741F                    	je	short b15		; then end of digits
 37049 0000439C 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 37050 0000439E 741B                    	je	short b15		; then end of digits.
 37051 000043A0 3C09                    	cmp	al, tab ; 9		; tab
 37052 000043A2 7417                    	je	short b15
 37053 000043A4 2E3A06[AC02]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 37054 000043A9 7410                    	je	short b15
 37055 000043AB 3C2F                    	cmp	al,'/'			; see if another switch follows
 37056                                  	; 12/12/2022
 37057                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37058                                  	;nop				; cas - remnant of old bad code
 37059                                  	;nop
 37060 000043AD 740C                    	je	short b15
 37061 000043AF 3C0A                    	cmp	al,lf			; line-feed?
 37062 000043B1 7408                    	je	short b15
 37063 000043B3 3C0D                    	cmp	al,cr			; carriage return?
 37064 000043B5 7404                    	je	short b15
 37065 000043B7 08C0                    	or	al,al			; end of line separator?
 37066 000043B9 75C4                    	jnz	short b2		; no, try as a valid char...
 37067                                  b15:
 37068 000043BB 2EFF06[5403]            	inc	word [cs:count]		; one more character to s...
 37069 000043C0 2EFF0E[5803]            	dec	word [cs:chrptr]	; back up over separator
 37070                                  b1:
 37071 000043C5 89D8                    	mov	ax,bx			; get proper count
 37072 000043C7 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 37073 000043C9 5B                      	pop	bx
 37074 000043CA C3                      	retn
 37075                                  badnum:
 37076                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37077                                  	;mov	byte [cs:sepchr],0
 37078 000043CB 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 37079                                  	; 12 /12/2022
 37080 000043CD 2EA2[AC02]              	mov	[cs:sepchr],al ; 0
 37081 000043D1 5B                      	pop	bx
 37082 000043D2 F9                      	stc				; and carry set
 37083 000043D3 C3                      	retn
 37084                                  
 37085                                  ;****************************************************************************
 37086                                  
 37087                                  setdoscountryinfo:
 37088                                  
 37089                                  ;----------------------------------------------------------------------------
 37090                                  ;input: es:di -> pointer to dos_country_cdpg_info
 37091                                  ;	ds:0  -> buffer.
 37092                                  ;	si = 0
 37093                                  ;	ax = country id
 37094                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 37095                                  ;	bx = file handle
 37096                                  ;	this routine can handle maximum 438 country_data entries.
 37097                                  ;
 37098                                  ;output: dos_country_cdpg_info set.
 37099                                  ;	 carry set if any file read failure or wrong information in the file.
 37100                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 37101                                  ;	 codepage_id in the file.
 37102                                  ;----------------------------------------------------------------------------
 37103                                  
 37104                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 37105                                  	; (SYSINIT:4D83h)
 37106                                  
 37107 000043D4 57                      	push	di
 37108 000043D5 50                      	push	ax
 37109 000043D6 52                      	push	dx
 37110                                  
 37111 000043D7 31C9                    	xor	cx,cx
 37112 000043D9 31D2                    	xor	dx,dx
 37113 000043DB B80002                  	mov	ax,512			;read 512 bytes
 37114 000043DE E84F01                  	call	readincontrolbuffer	;read the file header
 37115 000043E1 724D                    	jc	short setdosdata_fail
 37116                                  
 37117 000043E3 06                      	push	es
 37118 000043E4 56                      	push	si
 37119                                  
 37120 000043E5 0E                      	push	cs
 37121 000043E6 07                      	pop	es
 37122                                  
 37123 000043E7 BF[4546]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 37124 000043EA B90800                  	mov	cx,8			;length of the signature
 37125 000043ED F3A6                    	repz	cmpsb
 37126                                  
 37127 000043EF 5E                      	pop	si
 37128 000043F0 07                      	pop	es
 37129 000043F1 753D                    	jnz	short setdosdata_fail 	;signature mismatch
 37130                                  
 37131 000043F3 83C612                  	add	si,18			;si -> county info type
 37132 000043F6 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 37133 000043F9 7535                    	jne	short setdosdata_fail 	;cannot proceed. error return
 37134                                  
 37135 000043FB 46                      	inc	si			;si -> file offset
 37136 000043FC 8B14                    	mov	dx,[si]			;get the info file offset.
 37137 000043FE 8B4C02                  	mov	cx,[si+2]
 37138 00004401 B80018                  	mov	ax,6144			;read 6144 bytes.
 37139 00004404 E82901                  	call	readincontrolbuffer	;read info
 37140 00004407 7227                    	jc	short setdosdata_fail
 37141                                  
 37142 00004409 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 37143 0000440B 81F9B601                	cmp	cx, 438			;cannot handle more than 438 entries.
 37144 0000440F 771F                    	ja	short setdosdata_fail
 37145                                  
 37146 00004411 46                      	inc	si
 37147 00004412 46                      	inc	si			;si -> entry information packet
 37148 00004413 5A                      	pop	dx			;restore code page id
 37149 00004414 58                      	pop	ax			;restore country id
 37150 00004415 5F                      	pop	di
 37151                                  
 37152                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 37153 00004416 3B4402                  	cmp	ax,[si+2]		;compare country_id
 37154 00004419 750A                    	jne	short setdoscntry_next
 37155                                  
 37156 0000441B 83FA00                  	cmp	dx,0			;no user specified code page ?
 37157 0000441E 7415                    	je	short setdoscntry_any_codepage ;then no need to match code page id.
 37158 00004420 3B5404                  	cmp	dx,[si+4]		;compare code page id
 37159 00004423 7413                    	je	short setdoscntry_got_it
 37160                                  
 37161                                  setdoscntry_next:
 37162 00004425 0334                    	add	si,[si]			;next entry
 37163 00004427 46                      	inc	si
 37164 00004428 46                      	inc	si			;take a word for size of entry itself
 37165 00004429 E2EB                    	loop	setdoscntry_find
 37166                                  
 37167 0000442B B9FFFF                  	mov	cx,-1			;signals that bad country id entered.
 37168                                  setdoscntry_fail:
 37169 0000442E F9                      	stc
 37170 0000442F C3                      	retn
 37171                                  
 37172                                  setdosdata_fail:
 37173 00004430 5E                      	pop	si
 37174 00004431 59                      	pop	cx
 37175 00004432 5F                      	pop	di
 37176 00004433 EBF9                    	jmp	short setdoscntry_fail
 37177                                  
 37178                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 37179 00004435 8B5404                  	mov	dx,[si+4]
 37180                                  
 37181                                  setdoscntry_got_it:			;found the matching entry
 37182 00004438 2E8916[4D46]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 37183 0000443D 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 37184 00004440 8B4C0C                  	mov	cx,[si+12]
 37185 00004443 B80002                  	mov	ax,512 			;read 512 bytes
 37186 00004446 E8E700                  	call	readincontrolbuffer
 37187 00004449 72E3                    	jc	short setdoscntry_fail
 37188                                  
 37189 0000444B 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 37190 0000444D 46                      	inc	si
 37191 0000444E 46                      	inc	si			;si -> first entry
 37192                                  
 37193                                  setdoscntry_data:
 37194 0000444F 57                      	push	di			;es:di -> dos_country_cdpg_info
 37195 00004450 51                      	push	cx			;save # of entry left
 37196 00004451 56                      	push	si			;si -> current entry in control buffer
 37197                                  
 37198 00004452 8A4402                  	mov	al,[si+2]		;get data entry id
 37199 00004455 E8AA00                  	call	getcountrydestination	;get the address of destination in es:di
 37200 00004458 727D                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 37201                                  
 37202 0000445A 8B5404                  	mov	dx,[si+4]		;get offset of data
 37203 0000445D 8B4C06                  	mov	cx,[si+6]
 37204 00004460 B80042                  	mov	ax,4200h
 37205 00004463 F9                      	stc
 37206 00004464 CD21                    	int	21h			;move pointer
 37207 00004466 72C8                    	jc	short setdosdata_fail
 37208                                  
 37209 00004468 BA0002                  	mov	dx,512			;start of data buffer
 37210 0000446B B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 37211 0000446E B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 37212 00004470 F9                      	stc
 37213 00004471 CD21                    	int	21h			;read the country.sys data
 37214 00004473 72BB                    	jc	short setdosdata_fail 	;read failure
 37215                                  
 37216 00004475 39C8                    	cmp	ax,cx
 37217 00004477 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 37218                                  
 37219 00004479 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 37220 0000447C 8B4C06                  	mov	cx,[si+6]
 37221 0000447F B80042                  	mov	ax,4200h
 37222 00004482 F9                      	stc
 37223 00004483 CD21                    	int	21h			;move pointer back again
 37224 00004485 72A9                    	jc	short setdosdata_fail
 37225                                  
 37226 00004487 56                      	push	si
 37227 00004488 BE0802                  	mov	si,(512+8)		;get length of the data from the file
 37228 0000448B 8B0C                    	mov	cx,[si]
 37229 0000448D 5E                      	pop	si
 37230 0000448E BA0002                  	mov	dx,512			;start of data buffer
 37231 00004491 83C10A                  	add	cx,10			;signature + a word for the length itself
 37232 00004494 B43F                    	mov	ah,3Fh			;read the data from the file.
 37233 00004496 F9                      	stc
 37234 00004497 CD21                    	int	21h
 37235 00004499 7295                    	jc	short setdosdata_fail
 37236                                  
 37237 0000449B 39C8                    	cmp	ax,cx
 37238 0000449D 7591                    	jne	short setdosdata_fail
 37239                                  
 37240 0000449F 8A4402                  	mov	al,[si+2]		;save data id for future use.
 37241 000044A2 BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 37242 000044A5 8B0C                    	mov	cx,[si]			;get the length of the file
 37243 000044A7 41                      	inc	cx			;take care of a word for lenght of tab
 37244 000044A8 41                      	inc	cx			;itself.
 37245 000044A9 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 37246 000044AD 7781                    	ja	short setdosdata_fail
 37247                                  
 37248                                  	;if	bugfix
 37249 000044AF E83500                  	call	setdbcs_before_copy
 37250                                  	;endif
 37251                                  
 37252 000044B2 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 37253 000044B4 7512                    	jne	short setdoscntry_mov 	;no, don't worry
 37254                                  
 37255 000044B6 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 37256                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 37257 000044BA 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 37258                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 37259                                  	
 37260 000044BE 57                      	push	di			;save di
 37261                                  
 37262 000044BF 50                      	push	ax
 37263 000044C0 2EA1[4D46]              	mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 37264 000044C4 894404                  	mov	[si+4],ax		;use the saved one for this !!!!
 37265 000044C7 58                      	pop	ax
 37266                                  
 37267                                  setdoscntry_mov:
 37268 000044C8 F3A4                    	rep	movsb			;copy the table into dos
 37269 000044CA 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 37270 000044CC 7509                    	jne	short setdoscntry_data_next
 37271                                  
 37272 000044CE 5F                      	pop	di			;restore di
 37273 000044CF 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 37274                                  	;pop	word [es:di+26]		;restore
 37275 000044D3 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 37276                                  	;pop	word [es:di+24]
 37277                                  
 37278                                  setdoscntry_data_next:
 37279 000044D7 5E                      	pop	si			;restore control buffer pointer
 37280 000044D8 59                      	pop	cx			;restore # of entries left
 37281 000044D9 5F                      	pop	di			;restore pointer to dso_country_cdpg
 37282 000044DA 0334                    	add	si,[si]			;try to get the next entry
 37283 000044DC 46                      	inc	si
 37284 000044DD 46                      	inc	si			;take a word of entry length itself
 37285 000044DE 49                      	dec	cx
 37286 000044DF 83F900                  	cmp	cx,0
 37287 000044E2 741D                    	je	short setdoscntry_ok
 37288 000044E4 E968FF                  	jmp	setdoscntry_data
 37289                                  
 37290                                  	; 18/12/2022
 37291                                  ;setdoscntry_ok:
 37292                                  	;retn
 37293                                  
 37294                                  ;----------------------------------------------------------------------------
 37295                                  
 37296                                  	;if	bugfix
 37297                                  
 37298                                  setdbcs_before_copy:
 37299 000044E7 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 37300 000044E9 7516                    	jne	short sdbcsbc		; jump if not
 37301 000044EB 26833D00                	cmp	word [es:di],0		; zero byte data block?
 37302 000044EF 7410                    	je	short sdbcsbc		; jump if so
 37303                                  
 37304 000044F1 57                      	push	di
 37305 000044F2 50                      	push	ax
 37306 000044F3 51                      	push	cx
 37307 000044F4 268B0D                  	mov	cx,[es:di]		; load block length
 37308 000044F7 83C702                  	add	di,2			; points actual data
 37309 000044FA 30C0                    	xor	al,al			; fill bytes
 37310 000044FC F3AA                    	rep	stosb			; clear data block
 37311 000044FE 59                      	pop	cx
 37312 000044FF 58                      	pop	ax
 37313 00004500 5F                      	pop	di
 37314                                  sdbcsbc:
 37315                                  setdoscntry_ok:	; 18/12/2022	
 37316 00004501 C3                      	retn
 37317                                  
 37318                                  	;endif
 37319                                  
 37320                                  ;----------------------------------------------------------------------------
 37321                                  
 37322                                  getcountrydestination:
 37323                                  
 37324                                  ;----------------------------------------------------------------------------
 37325                                  ;get the destination address in the dos country info table.
 37326                                  ;
 37327                                  ;input: al - data id
 37328                                  ;	es:di -> dos_country_cdpg_info
 37329                                  ;on return:
 37330                                  ;	es:di -> destination address of the matching data id
 37331                                  ;	carry set if no matching data id found in dos.
 37332                                  ;----------------------------------------------------------------------------
 37333                                  
 37334                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 37335                                  	; (SYSINIT:4EB2h)
 37336                                  
 37337 00004502 51                      	push	cx
 37338                                  	;add	di,74
 37339 00004503 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 37340                                  					;skip the reserved area, syscodepage etc.
 37341 00004506 268B0D                  	mov	cx,[es:di]		;get the number of entries
 37342 00004509 47                      	inc	di
 37343 0000450A 47                      	inc	di			;si -> the first start entry id
 37344                                  
 37345                                  getcntrydest:
 37346 0000450B 263805                  	cmp	byte [es:di],al
 37347 0000450E 7413                    	je	short getcntrydest_ok
 37348 00004510 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 37349 00004514 7405                    	je	short getcntrydest_1
 37350                                  
 37351 00004516 83C705                  	add	di,5			;next data id
 37352 00004519 EB03                    	jmp	short getcntrydest_loop
 37353                                  
 37354                                  getcntrydest_1:
 37355                                  	;add	di,41
 37356 0000451B 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 37357                                  getcntrydest_loop:
 37358 0000451E E2EB                    	loop	getcntrydest
 37359 00004520 F9                      	stc
 37360 00004521 EB0B                    	jmp	short getcntrydest_exit
 37361                                  
 37362                                  getcntrydest_ok:
 37363 00004523 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 37364 00004525 7503                    	jne	short getcntrydest_ok1
 37365                                  
 37366 00004527 47                      	inc	di			;now di -> cccountryinfolen
 37367 00004528 EB04                    	jmp	short getcntrydest_exit
 37368                                  
 37369                                  getcntrydest_ok1:
 37370 0000452A 26C47D01                	les	di,[es:di+1]		;get the destination in es:di
 37371                                  
 37372                                  getcntrydest_exit:
 37373 0000452E 59                      	pop	cx
 37374 0000452F C3                      	retn
 37375                                  
 37376                                  ;----------------------------------------------------------------------------
 37377                                  
 37378                                  readincontrolbuffer:
 37379                                  
 37380                                  ;----------------------------------------------------------------------------
 37381                                  ;move file pointer to cx:dx
 37382                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 37383                                  ;si will be set to 0 hence ds:si points to the control buffer.
 37384                                  ;
 37385                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 37386                                  ;	 be moved.
 37387                                  ;	 ax - # of bytes to read
 37388                                  ;	 bx - file handle
 37389                                  ;	 ds - buffer seg.
 37390                                  ;return: the control data information is read into ds:0 - ds:0200.
 37391                                  ;	 cx,dx value destroyed.
 37392                                  ;	 carry set if error in reading file.
 37393                                  ;----------------------------------------------------------------------------
 37394                                  
 37395 00004530 50                      	push	ax			;# of bytes to read
 37396 00004531 B80042                  	mov	ax,4200h
 37397 00004534 F9                      	stc
 37398 00004535 CD21                    	int	21h			;move pointer
 37399 00004537 59                      	pop	cx			;# of bytes to read
 37400 00004538 7209                    	jc	short ricb_exit
 37401                                  
 37402 0000453A 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 37403 0000453C 31F6                    	xor	si,si
 37404 0000453E B43F                    	mov	ah,3Fh			;read into the buffer
 37405 00004540 F9                      	stc
 37406 00004541 CD21                    	int	21h			;should be less than 1024 bytes.
 37407                                  ricb_exit:
 37408 00004543 C3                      	retn
 37409                                  
 37410                                  ;----------------------------------------------------------------------------
 37411                                  
 37412                                  ;! set_country_path procedure is not called from anywhere !
 37413                                  ; Erdogan Tan - 04/08/2023
 37414                                  %if 0
 37415                                  
 37416                                  set_country_path:
 37417                                  
 37418                                  ;----------------------------------------------------------------------------
 37419                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 37420                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 37421                                  ;     assumes current directory is the root directory.
 37422                                  ;out: ds:di -> full path (cntry_drv).
 37423                                  ;     set the cntry_drv string from the country=,,path command.
 37424                                  ;     ds, es, si value saved.
 37425                                  ;----------------------------------------------------------------------------
 37426                                  
 37427                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 37428                                  	; (SYSINIT:4EF4h)
 37429                                  
 37430                                  	push	si
 37431                                  
 37432                                  	push	ds			;switch ds, es
 37433                                  	push	es
 37434                                  	pop	ds
 37435                                  	pop	es			;now ds -> confbot, es -> sysinitseg
 37436                                  
 37437                                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 37438                                  	jc	short scp_default_drv 	;no, use current default drive.
 37439                                  
 37440                                  	mov	al,[si]
 37441                                  	inc	si
 37442                                  	inc	si			;si -> next char after ":"
 37443                                  	jmp	short scp_setdrv
 37444                                  
 37445                                  scp_default_drv:
 37446                                  	mov	ah,19h
 37447                                  	int	21h
 37448                                  	add	al,"A"			;convert it to a character.
 37449                                  
 37450                                  scp_setdrv:
 37451                                  	mov	[cs:cntry_drv],al	;set the drive letter.
 37452                                  	mov	di,cntry_path
 37453                                  	mov	al,[si]
 37454                                  	cmp	al, "\"
 37455                                  	je	short scp_root_dir
 37456                                  
 37457                                  	cmp	al,"/"			;let's accept "/" as an directory delim
 37458                                  	;je	short scp_root_dir
 37459                                  	;jmp	short scp_path
 37460                                  	; 04/01/2023
 37461                                  	jne	short scp_path
 37462                                  
 37463                                  scp_root_dir:
 37464                                  	dec	di			;di -> cntry_root
 37465                                  scp_path:
 37466                                  	call	move_asciiz		;copy it
 37467                                  
 37468                                  	mov	di,cntry_drv
 37469                                  scpath_exit:
 37470                                  
 37471                                  	push	ds			;switch ds, es
 37472                                  	push	es
 37473                                  	pop	ds
 37474                                  	pop	es			;ds, es value restored
 37475                                  
 37476                                  	pop	si
 37477                                  	retn
 37478                                  
 37479                                  ;----------------------------------------------------------------------------
 37480                                  
 37481                                  chk_drive_letter:
 37482                                  
 37483                                  ;check if ds:[si] is a drive letter followed by ":".
 37484                                  ;assume that every alpha character is already converted to upper case.
 37485                                  ;carry set if not.
 37486                                  
 37487                                  	; 04/01/2023 - Retrodos v4.2
 37488                                  
 37489                                  	push	ax
 37490                                  	cmp	byte [si],"A"
 37491                                  	;jb	short cdletter_no
 37492                                  	jb	short cdletter_exit
 37493                                  	cmp	byte [si],"Z"
 37494                                  	ja	short cdletter_no
 37495                                  	cmp	byte [si+1],":"
 37496                                  	;jne	short cdletter_no
 37497                                  	;jmp	short cdletter_exit
 37498                                  	; 04/01/2023
 37499                                  	je	short cdletter_exit
 37500                                  
 37501                                  cdletter_no:
 37502                                  	stc
 37503                                  cdletter_exit:
 37504                                  	pop	ax
 37505                                  	retn
 37506                                  
 37507                                  %endif
 37508                                  
 37509                                  ;----------------------------------------------------------------------------
 37510                                  
 37511                                  move_asciiz:
 37512                                  
 37513                                  ;in: ds:si -> source es:di -> target
 37514                                  ;out: copy the string until 0.
 37515                                  ;assumes there exists a 0.
 37516                                  
 37517                                  masciiz_loop:
 37518 00004544 A4                      	movsb
 37519 00004545 807CFF00                	cmp	byte [si-1],0	; was it 0?
 37520 00004549 75F9                    	jne	short masciiz_loop
 37521 0000454B C3                      	retn
 37522                                  
 37523                                  ;----------------------------------------------------------------------------
 37524                                  
 37525                                  ;	ds:dx points to string to output (asciz)
 37526                                  ;
 37527                                  ;	prints <badld_pre> <string> <badld_post>
 37528                                  
 37529                                  badfil:
 37530 0000454C 0E                      	push	cs
 37531 0000454D 07                      	pop	es
 37532                                  
 37533 0000454E 89D6                    	mov	si,dx
 37534                                  badload:
 37535 00004550 BA[074B]                	mov	dx,badld_pre	; want to print config error
 37536 00004553 BB[C44A]                	mov	bx,crlfm
 37537                                  prnerr:
 37538 00004556 0E                      	push	cs
 37539 00004557 1F                      	pop	ds ; *
 37540 00004558 E81D00                  	call	print
 37541                                  prn1:
 37542 0000455B 268A14                  	mov	dl,[es:si]
 37543 0000455E 08D2                    	or	dl,dl
 37544 00004560 7407                    	jz	short prn2
 37545 00004562 B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 37546 00004564 CD21                    	int	21h
 37547 00004566 46                      	inc	si
 37548 00004567 EBF2                    	jmp	short prn1
 37549                                  prn2:
 37550 00004569 89DA                    	mov	dx,bx
 37551 0000456B E80A00                  	call	print
 37552                                  	; 11/12/2022
 37553                                  	; ds = cs ; *
 37554 0000456E 803E[5303]01            	cmp	byte [donotshownum],1
 37555                                  				; suppress line number when handling command.com
 37556                                  	;cmp	byte [cs:donotshownum],1 
 37557 00004573 7407                    	je	short prnexit
 37558                                  	
 37559                                  	; 18/12/2022
 37560                                  	;call	error_line
 37561 00004575 E930E4                  	jmp	error_line
 37562                                  ;prnexit:
 37563                                  	;retn
 37564                                  
 37565                                  ;----------------------------------------------------------------------------
 37566                                  
 37567                                  print:
 37568 00004578 B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 37569 0000457A CD21                    	int	21h
 37570                                  prnexit:	; 18/12/2022
 37571 0000457C C3                      	retn
 37572                                  
 37573                                  ;----------------------------------------------------------------------------
 37574                                  
 37575                                  ;  open device pointed to by dx, al has access code
 37576                                  ;   if unable to open do a device open null device instead
 37577                                  
 37578                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 37579                                  	; (SYSINIT:3764h)
 37580                                  open_dev:
 37581 0000457D E80500                  	call	open_file
 37582 00004580 7309                    	jnc	short open_dev3
 37583                                  
 37584                                  open_dev1:
 37585 00004582 BA[E645]                	mov	dx,nuldev
 37586                                  	; 18/12/2022
 37587                                  	;call	open_file
 37588                                  ;of_retn:
 37589                                  	;retn
 37590                                  	; 18/12/2022
 37591                                  	;jmp	short open_file
 37592                                  open_file:
 37593 00004585 B43D                    	mov	ah,OPEN	; 3Dh
 37594 00004587 F9                      	stc
 37595 00004588 CD21                    	int	21h
 37596                                  of_retn:	; 18/12/2022
 37597 0000458A C3                      	retn
 37598                                  
 37599                                  open_dev3:
 37600 0000458B 89C3                    	mov	bx,ax			; handle from open to bx
 37601                                  	;;xor	ax,ax			; get device info
 37602                                  	;;mov	ah,IOCTL ; 44h
 37603                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 37604                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37605                                  	;xor	ax,ax
 37606                                  	;mov	ah,44h	; IOCTL
 37607                                  	; 11/12/2022
 37608 0000458D B80044                  	mov	ax,4400h ; IOCTL<<8 
 37609                                  
 37610 00004590 CD21                    	int	21h
 37611                                  
 37612 00004592 F6C280                  	test	dl,10000000b ; 80h
 37613 00004595 75F3                    	jnz	short of_retn
 37614                                  
 37615 00004597 B43E                    	mov	ah,CLOSE ; 3Eh
 37616 00004599 CD21                    	int	21h
 37617 0000459B EBE5                    	jmp	short open_dev1
 37618                                  
 37619                                  ;----------------------------------------------------------------------------
 37620                                  
 37621                                  ; 18/12/2022
 37622                                  %if 0
 37623                                  open_file:
 37624                                  	mov	ah,OPEN	; 3Dh
 37625                                  	stc
 37626                                  	int	21h
 37627                                  	retn
 37628                                  %endif
 37629                                  
 37630                                  ;----------------------------------------------------------------------------
 37631                                  
 37632                                  ; test int24. return back to dos with the fake user response of "fail"
 37633                                  
 37634                                  int24:
 37635 0000459D B003                    	mov	al,3			; fail the system call
 37636 0000459F CF                      	iret				; return back to dos.
 37637                                  
 37638                                  ; 19/04/2019 - Retro DOS v4.0
 37639                                  
 37640                                  ;----------------------------------------------------------------------------
 37641                                  ; DATA
 37642                                  ;----------------------------------------------------------------------------
 37643                                  
 37644                                  ;include copyrigh.inc			; copyright statement
 37645                                  
 37646                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 37647                                  
 37648                                  ;MsDosVersion6Copyr:
 37649                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 37650                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 37651                                  
 37652                                  ; 22/10/2022
 37653                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 37654                                  
 37655                                  ; 28/12/2022
 37656                                  %if 0
 37657                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37658                                  MsDosVersion5Copyr:
 37659                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 37660                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 37661                                  %endif
 37662                                  
 37663                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37664                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37665                                  ; 20/04/2019 - Retro DOS v4.0
 37666                                  ;BOOTMES:
 37667                                  ;	db      13
 37668                                  ;	db      10
 37669                                  ;	db      "MS-DOS version "
 37670                                  ;	db      MAJOR_VERSION + "0"
 37671                                  ;	db      "."
 37672                                  ;	db      (MINOR_VERSION / 10) + "0"
 37673                                  ;	db      (MINOR_VERSION % 10) + "0"
 37674                                  ;	db      13,10
 37675                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 37676                                  ;	; 22/10/2022
 37677                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 37678                                  ;	;
 37679                                  ;	db	0
 37680                                  
 37681                                  	; 01/01/2023 - Retro DOS v4.2
 37682                                  
 37683                                  	; 28/12/2022 - Retro DOS v4.1
 37684                                  ;MsDosVersion5Copyr:
 37685                                  ;  	db	13,10,"MS DOS Version 5.0"
 37686                                  ;	db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
 37687                                  
 37688                                  	; 12/12/2022
 37689 000045A0 00                      	db	0
 37690                                  ; 12/12/2022
 37691                                  BOOTMES:
 37692 000045A1 0D0A                    	db	13,10
 37693                                  	;;db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 37694                                  	; 28/12/2022
 37695                                  	;db 	"Retro DOS v4.1 (Modified MSDOS 5.0) "
 37696                                  	; 01/01/2023
 37697 000045A3 526574726F20444F53-     	db 	"Retro DOS v4.2 (Modified MSDOS 6.22) "
 37697 000045AC 2076342E3220284D6F-
 37697 000045B5 646966696564204D53-
 37697 000045BE 444F5320362E323229-
 37697 000045C7 20                 
 37698                                  	
 37699 000045C8 0D0A                    	db	13,10
 37700 000045CA 6279204572646F6761-     	db	"by Erdogan Tan [2023] "
 37700 000045D3 6E2054616E205B3230-
 37700 000045DC 32335D20           
 37701 000045E0 0D0A                    	db	13,10
 37702 000045E2 0D0A2400                	db	13,10,"$",0
 37703                                  
 37704 000045E6 4E554C00                nuldev:	db	"NUL",0
 37705 000045EA 434F4E00                condev:	db	"CON",0
 37706 000045EE 41555800                auxdev:	db	"AUX",0
 37707 000045F2 50524E00                prndev:	db	"PRN",0
 37708                                  
 37709                                  ;IFDEF	CONFIGPROC
 37710 000045F6 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 37710 000045FF 595300             
 37711                                  
 37712 00004602 413A                    cntry_drv:  db	"A:"
 37713 00004604 5C                      cntry_root: db	"\"
 37714 00004605 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 37714 0000460E 595300             
 37715                                  	    ;db	52 dup (0)
 37716 00004611 00<rep 34h>             	    times 52 db 0	
 37717                                  
 37718                                  country_file_signature:
 37719 00004645 FF434F554E545259        	db	0FFh,'COUNTRY'
 37720                                  
 37721                                  cntrycodepage_id: 
 37722 0000464D 0000                    	dw	0 	
 37723                                  
 37724                                  ;ENDIF ; CONFIGPROC
 37725                                  
 37726                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37727                                  ; (SYSINIT:5081h)
 37728                                  
 37729                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37730                                  ;ifdef	MULTI_CONFIG
 37731 0000464F 00                      newcmd:  db	0			; non-zero if non-std shell specified
 37732 00004650 40                      tmplate: db	64                      ; must precede commnd
 37733                                  ;endif
 37734                                  
 37735                                  ;ifdef ROMEXEC
 37736                                  ;	db      7                       ; size of commnd line (excl. null)
 37737                                  ;commnd: db	"COMMAND",0
 37738                                  ;	db	56 dup (0)
 37739                                  ;else
 37740                                  	; 02/11/2022
 37741 00004651 0C                      	db	12                      ; size of commnd line (excl. null)
 37742 00004652 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 37742 0000465B 434F4D00           
 37743                                  	;db	51 dup (0)
 37744 0000465F 00<rep 33h>             	times	51 db 0
 37745                                  ;endif
 37746                                  
 37747                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37748                                  ;ifdef	MULTI_CONFIG
 37749 00004692 5C434F4D4D414E442E-     commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 37749 0000469B 434F4D00           
 37750 0000469F 022F5000                	 db	2,"/P",0 		; followed by their respective alternate
 37751 000046A3 5C4D53444F535C434F-     commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 37751 000046AC 4D4D414E442E434F4D-
 37751 000046B5 00                 
 37752 000046B6 0B413A5C4D53444F53-     	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 37752 000046BF 202F5000           
 37753 000046C3 5C444F535C434F4D4D-     commnd4: db	"\DOS\COMMAND.COM",0 	;
 37753 000046CC 414E442E434F4D00   
 37754 000046D4 09413A5C444F53202F-     	 db	9,"A:\DOS /P",0		;
 37754 000046DD 5000               
 37755                                  def_swchr:	
 37756 000046DF 00                      	 db	0			; default switchchar (referenced as command_line-1)
 37757                                  ;endif
 37758                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37759                                  command_line:
 37760 000046E0 022F50                  	db	2,"/P"			; default command.com args
 37761                                  	;db	125 dup (0)
 37762 000046E3 00<rep 7Dh>             	times	125 db 0
 37763                                  
 37764                                  pathstring:
 37765                                  	;db	64 dup (0)
 37766 00004760 00<rep 40h>             	times	64 db 0
 37767                                  
 37768                                  
 37769                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37770                                  ; (SYSINIT:51D3h)
 37771                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37772                                  ;%if 0
 37773                                  
 37774                                  dae_flag:
 37775 000047A0 00                      	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 37776                                  
 37777                                  ;ifdef	MULTI_CONFIG
 37778                                  
 37779                                  ; 04/03/2022- Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 37780                                  MAX_MULTI_CONFIG equ 9	; max # of multi-config menu items supported
 37781                                  
 37782                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 37783                                  
 37784 000047A1 07                      bMenuColor:	db      07h ; 1Fh       ; default fgnd/bgnd color
 37785 000047A2 00                      bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 37786 000047A3 05                      		db      5               ; video page function # (KEEP AFTER bMenuPage)
 37787 000047A4 00                      bLastCol:	db      0               ; ending column on status line
 37788 000047A5 18                      bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 37789 000047A6 00                      bDisableUI:	db      0               ; 1=disable clean/interactive
 37790                                                                          ; 2=disable default 2-second delay
 37791 000047A7 00                      bCRTPage:	db      0               ; value saved from BIOS data area
 37792 000047A8 0000                    wCRTStart:	dw      0               ; value saved from BIOS data area
 37793 000047AA 00                      bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 37794 000047AB 01                      bDefBlock:	db      1               ; default block #
 37795 000047AC 00                      bMaxBlock:	db      0               ; maximum block #
 37796 000047AD 0000                    offDefBlock:	dw      0               ; offset of name of default block (if any)
 37797 000047AF FF                      secTimeOut:	db      -1 ; 0FFh       ; # of seconds for timeout (-1 == indefinite)
 37798 000047B0 00                      secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 37799 000047B1 00<rep Ah>              abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 37800 000047BB 0000<rep Ah>            aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 37801 000047CF 0000<rep Ah>            aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 37802                                  
 37803 000047E3 434F4E4649473D00        szBoot:		db      "CONFIG=",0
 37804 000047EB 4D454E5500              szMenu:		db      "MENU",0
 37805 000047F0 434F4D4D4F4E00          szCommon:	db      "COMMON",0
 37806                                  
 37807                                  ;endif	;MULTI_CONFIG
 37808                                  
 37809                                  comtab:	 ; label byte
 37810                                  
 37811                                  ;            cmd len    command         cmd code
 37812                                  ;            -------    -------         --------
 37813                                  
 37814                                  ;ifdef MULTI_CONFIG
 37815 000047F7 015B5B                          db      1,      "[",            CONFIG_BEGIN
 37816                                  ;endif
 37817 000047FA 05425245414B43                  db      5,      "BREAK",        CONFIG_BREAK
 37818 00004801 074255464645525342              db      7,      "BUFFERS",      CONFIG_BUFFERS
 37819 0000480A 07434F4D4D454E5459              db      7,      "COMMENT",      CONFIG_COMMENT
 37820 00004813 07434F554E54525951              db      7,      "COUNTRY",      CONFIG_COUNTRY
 37821 0000481C 0644455649434544                db      6,      "DEVICE",       CONFIG_DEVICE
 37822 00004824 0A4445564943454849-             db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 37822 0000482D 474855             
 37823 00004830 03444F5348                      db      3,      "DOS",          CONFIG_DOS
 37824 00004835 08445249565041524D-             db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 37824 0000483E 50                 
 37825 0000483F 044643425358                    db      4,      "FCBS",         CONFIG_FCBS
 37826 00004845 0546494C455346                  db      5,      "FILES",        CONFIG_FILES
 37827                                  ;ifdef MULTI_CONFIG
 37828 0000484C 07494E434C5544454A              db      7,      "INCLUDE",      CONFIG_INCLUDE
 37829                                  ;endif
 37830 00004855 07494E5354414C4C49              db      7,      "INSTALL",      CONFIG_INSTALL
 37831 0000485E 0B494E5354414C4C48-             db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 37831 00004867 49474857           
 37832 0000486B 094C41535444524956-             db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 37832 00004874 454C               
 37833                                  ;ifdef MULTI_CONFIG
 37834 00004876 075355424D454E554F              db      7,      "SUBMENU",      CONFIG_SUBMENU
 37835 0000487F 094D454E55434F4C4F-             db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 37835 00004888 5252               
 37836 0000488A 0B4D454E5544454641-             db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 37836 00004893 554C5441           
 37837 00004897 084D454E554954454D-             db      8,      "MENUITEM",     CONFIG_MENUITEM
 37837 000048A0 45                 
 37838                                  ;endif
 37839 000048A1 0A4D554C5449545241-             db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 37839 000048AA 434B4D             
 37840                                  ;ifdef MULTI_CONFIG
 37841 000048AD 074E554D4C4F434B4E              db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 37842                                  ;endif
 37843 000048B6 0352454D30                      db      3,      "REM",          CONFIG_REM
 37844                                  ;ifdef MULTI_CONFIG
 37845 000048BB 0353455456                      db      3,      "SET",          CONFIG_SET
 37846                                  ;endif
 37847 000048C0 055348454C4C53                  db      5,      "SHELL",        CONFIG_SHELL
 37848                                  ;if    STACKSW
 37849 000048C7 06535441434B534B                db      6,      "STACKS",       CONFIG_STACKS
 37850                                  ;endif
 37851 000048CF 085357495443484553-             db      8,      "SWITCHES",     CONFIG_SWITCHES
 37851 000048D8 31                 
 37852 000048D9 00                      	db	0
 37853                                  
 37854                                  ;%endif ; 02/11/2022
 37855                                  
 37856                                  ; 01/01/2023 - Retro DOS v4.2
 37857                                  %if 0
 37858                                  
 37859                                  comtab:
 37860                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37861                                  	; (SYSINIT:38EDh)
 37862                                  	db      7,      "BUFFERS",      CONFIG_BUFFERS
 37863                                  	db      5,      "BREAK",        CONFIG_BREAK
 37864                                  	db      6,      "DEVICE",       CONFIG_DEVICE
 37865                                  	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 37866                                  	db      5,      "FILES",        CONFIG_FILES
 37867                                  	db      4,      "FCBS",         CONFIG_FCBS
 37868                                  	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 37869                                  	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 37870                                  	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 37871                                  	db      6,      "STACKS",       CONFIG_STACKS
 37872                                  	db      7,      "COUNTRY",      CONFIG_COUNTRY
 37873                                  	db      5,      "SHELL",        CONFIG_SHELL
 37874                                  	db      7,      "INSTALL",      CONFIG_INSTALL
 37875                                  	db      7,      "COMMENT",      CONFIG_COMMENT
 37876                                  	db      3,      "REM",          CONFIG_REM
 37877                                  	db      8,      "SWITCHES",     CONFIG_SWITCHES
 37878                                  	db      3,      "DOS",          CONFIG_DOS
 37879                                  	db	0
 37880                                  
 37881                                  %endif
 37882                                  
 37883                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37884                                  ; (SYSINIT:530Ch)
 37885                                  
 37886                                  deviceparameters:	
 37887                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 37888                                  devp.specialfunc:	; deviceparameters +
 37889 000048DA 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 37890                                  devp.devtype:
 37891 000048DB 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 37892                                  devp.devattr:
 37893 000048DC 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 37894                                  devp.cylinders:
 37895 000048DE 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 37896                                  
 37897                                  ; 04/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 37898                                  
 37899                                  	;times	286	db 0
 37900                                  devp.mediatype:		; A_DEVICEPARAMETERS.DP_MEDIATYPE
 37901 000048E0 00                      	db	0
 37902                                  devp.bpb:		; A_DEVICEPARAMETERS.DP_BPB
 37903                                  devp.bps:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR
 37904 000048E1 0000                    	dw	0
 37905                                  devp.secperclus:	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER	
 37906 000048E3 00                      	db	0	
 37907 000048E4 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_RESERVEDSECTORS
 37908 000048E6 00                      	db	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_NUMBEROFFATS
 37909 000048E7 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_ROOTENTRIES
 37910                                  devp.totalsecs:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS
 37911 000048E9 0000                    	dw	0
 37912                                  devp.mediaid:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR
 37913 000048EB 00                      	db	0
 37914 000048EC 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERFAT
 37915                                  devp.spt:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK
 37916 000048EE 0000                    	dw	0
 37917                                  devp.heads:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS
 37918 000048F0 0000                    	dw	0	
 37919                                  
 37920                                  	;times	68 db 0	; PCDOS 7.1  (FAT32 BPB)
 37921                                  	;times	14 db 0	; MSDOS 6.21
 37922 000048F2 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HIDDENSECTORS
 37923 000048F4 0000                    	dw	0
 37924 000048F6 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BIGTOTALSECTORS
 37925 000048F8 0000                    	dw	0
 37926 000048FA 00<rep 6h>              	times	6 db 0	
 37927                                  
 37928                                  devp.trktblents:
 37929 00004900 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES
 37930                                  devp.sectbl:		; A_DEVICEPARAMETERS.DP_SECTORTABLE
 37931 00004902 00<rep FCh>             	times	252 db 0 ; MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 37932                                  			; 63*4 bytes		
 37933                                  
 37934                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37935                                  ; (SYSINIT:5430h)
 37936                                  	
 37937 000049FE 0200                    hlim:	dw	2
 37938 00004A00 0900                    slim:	dw	9
 37939                                  
 37940 00004A02 00                      drive:	db	0
 37941                                  
 37942                                  switches:
 37943 00004A03 0000                    	dw	0
 37944                                  
 37945                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37946                                  ; (SYSINIT:5437h)
 37947                                  
 37948                                  ; the following are the recommended bpbs for the media that
 37949                                  ; we know of so far.
 37950                                  
 37951                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37952                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 37953                                  
 37954                                  ; 48 tpi diskettes
 37955                                  
 37956 00004A05 0002                    bpb48t	dw	512
 37957 00004A07 02                      	db	2
 37958 00004A08 0100                    	dw	1
 37959 00004A0A 02                      	db	2
 37960 00004A0B 7000                    	dw	112
 37961 00004A0D D002                    	dw	2*9*40 ; 720
 37962 00004A0F FD                      	db	0FDh
 37963 00004A10 0200                    	dw	2
 37964 00004A12 0900                    	dw	9
 37965 00004A14 0200                    	dw	2
 37966 00004A16 00000000                	dd	0
 37967 00004A1A 00000000                        dd      0
 37968                                  
 37969                                  ; 96tpi diskettes
 37970                                  
 37971 00004A1E 0002                    bpb96t:	dw	512
 37972 00004A20 01                      	db	1
 37973 00004A21 0100                    	dw	1
 37974 00004A23 02                      	db	2
 37975 00004A24 E000                    	dw	224
 37976 00004A26 6009                    	dw	2*15*80 ; 2400
 37977 00004A28 F9                      	db	0F9h
 37978 00004A29 0700                    	dw	7
 37979 00004A2B 0F00                    	dw	15
 37980 00004A2D 0200                    	dw	2
 37981 00004A2F 00000000                	dd	0
 37982 00004A33 00000000                        dd      0
 37983                                  
 37984                                  ; 3 1/2 inch diskette bpb
 37985                                  
 37986 00004A37 0002                    bpb35:	dw	512
 37987 00004A39 02                      	db	2
 37988 00004A3A 0100                    	dw	1
 37989 00004A3C 02                      	db	2
 37990 00004A3D 7000                    	dw	112
 37991 00004A3F A005                    	dw	2*9*80 ; 1440
 37992 00004A41 F9                      	db	0F9h
 37993 00004A42 0300                    	dw	3
 37994 00004A44 0900                    	dw	9
 37995 00004A46 0200                    	dw	2
 37996 00004A48 00000000                	dd	0
 37997 00004A4C 00000000                        dd      0
 37998                                        
 37999 00004A50 0002                    bpb35h:	dw	512
 38000 00004A52 01                      	db	1
 38001 00004A53 0100                    	dw	1
 38002 00004A55 02                      	db	2
 38003 00004A56 E000                    	dw	224
 38004 00004A58 400B                    	dw	2*18*80 ; 2880
 38005 00004A5A F0                      	db	0F0h
 38006 00004A5B 0900                    	dw	9
 38007 00004A5D 1200                    	dw	18
 38008 00004A5F 0200                    	dw	2
 38009 00004A61 00000000                	dd	0
 38010 00004A65 00000000                        dd      0
 38011                                  
 38012                                  ; m037 - BEGIN
 38013                                  
 38014 00004A69 0002                    bpb288:	dw	512
 38015 00004A6B 02                      	db	2
 38016 00004A6C 0100                    	dw	1
 38017 00004A6E 02                      	db	2
 38018 00004A6F F000                    	dw	240
 38019 00004A71 8016                    	dw	2*36*80 ; 5760
 38020 00004A73 F0                      	db	0F0h
 38021 00004A74 0900                    	dw	9
 38022 00004A76 2400                    	dw	36
 38023 00004A78 0200                    	dw	2
 38024 00004A7A 00000000                	dd	0
 38025 00004A7E 00000000                        dd      0
 38026                                  
 38027                                  ; m037 - END
 38028                                  
 38029                                  ; 12/05/2019
 38030                                  
 38031                                  align 2
 38032                                  
 38033                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38034                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 38035                                  
 38036 00004A82 [054A]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 38037 00004A84 [1E4A]                  	    dw	    bpb96t		; 96tpi drives
 38038 00004A86 [374A]                  	    dw	    bpb35		; 3.5" drives
 38039                                  ; the following are not supported, so default to 3.5" media layout
 38040 00004A88 [374A]                  	    dw	    bpb35		; not used - 8" drives
 38041 00004A8A [374A]                  	    dw	    bpb35		; not used - 8" drives
 38042 00004A8C [374A]                  	    dw	    bpb35		; not used - hard files
 38043 00004A8E [374A]                  	    dw	    bpb35		; not used - tape drives
 38044 00004A90 [504A]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 38045 00004A92 [374A]                  	    dw	    bpb35		; ERIMO				m037
 38046 00004A94 [694A]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 38047                                  
 38048                                  switchlist: 
 38049 00004A96 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 38050                                  
 38051                                  ;----------------------------------------------------------------------------
 38052                                  ; Messages
 38053                                  ;----------------------------------------------------------------------------
 38054                                  
 38055                                  ; 19/04/2019 - Retro DOS v4.0
 38056                                  
 38057                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 38058                                  
 38059 00004A9F 00                      	db 	0
 38060                                  
 38061                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38062                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 38063                                  
 38064                                  badopm:
 38065 00004AA0 0D0A                    	db	0Dh,0Ah 
 38066 00004AA2 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 38066 00004AAB 7A656420636F6D6D61-
 38066 00004AB4 6E6420696E20434F4E-
 38066 00004ABD 4649472E535953     
 38067                                  crlfm:
 38068 00004AC4 0D0A24                  	db	0Dh,0Ah,'$'
 38069                                  badparm:
 38070 00004AC7 0D0A                    	db	0Dh,0Ah
 38071 00004AC9 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 38071 00004AD2 6E64206F7220706172-
 38071 00004ADB 616D6574657273202D-
 38071 00004AE4 2024               
 38072                                  badsiz_pre:
 38073 00004AE6 0D0A                    	db	0Dh,0Ah
 38074 00004AE8 536563746F72207369-     	db	'Sector size too large in file $'
 38074 00004AF1 7A6520746F6F206C61-
 38074 00004AFA 72676520696E206669-
 38074 00004B03 6C652024           
 38075                                  badld_pre:
 38076 00004B07 0D0A                    	db	0Dh,0Ah
 38077 00004B09 426164206F72206D69-     	db	'Bad or missing $'
 38077 00004B12 7373696E672024     
 38078                                  badcom:
 38079 00004B19 436F6D6D616E642049-     	db	'Command Interpreter',0
 38079 00004B22 6E7465727072657465-
 38079 00004B2B 7200               
 38080                                  badcountry:
 38081 00004B2D 0D0A                    	db	0Dh,0Ah
 38082 00004B2F 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 38082 00004B38 6F756E74727920636F-
 38082 00004B41 6465206F7220636F64-
 38082 00004B4A 6520706167650D0A24 
 38083                                  badcountrycom:
 38084 00004B53 0D0A                    	db	0Dh,0Ah
 38085 00004B55 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 38085 00004B5E 434F554E5452592063-
 38085 00004B67 6F6D6D616E640D0A24 
 38086                                  insufmemory:
 38087 00004B70 0D0A                    	db	0Dh,0Ah
 38088 00004B72 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 38088 00004B7B 656E74206D656D6F72-
 38088 00004B84 7920666F7220434F55-
 38088 00004B8D 4E5452592E53595320-
 38088 00004B96 66696C650D0A24     
 38089                                  badmem:
 38090 00004B9D 0D0A                    	db	0Dh,0Ah
 38091 00004B9F 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 38091 00004BA8 74696F6E20746F6F20-
 38091 00004BB1 6C6172676520666F72-
 38091 00004BBA 206D656D6F72790D0A-
 38091 00004BC3 24                 
 38092                                  badblock:
 38093 00004BC4 0D0A                    	db	0Dh,0Ah
 38094 00004BC6 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 38094 00004BCF 626C6F636B20646576-
 38094 00004BD8 696365730D0A24     
 38095                                  badstack:
 38096 00004BDF 0D0A                    	db	0Dh,0Ah
 38097 00004BE1 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 38097 00004BEA 5441434B2070617261-
 38097 00004BF3 6D65746572730D0A24 
 38098                                  	; 18/12/2022
 38099                                  ;badorder:
 38100                                  	;db	0Dh,0Ah
 38101                                  	;db	'Incorrect order in CONFIG.SYS line $'
 38102                                  errorcmd:
 38103 00004BFC 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 38103 00004C05 434F4E4649472E5359-
 38103 00004C0E 53206C696E652024   
 38104                                  
 38105                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38106                                  ; (SYSINIT:566Eh)
 38107                                  
 38108                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38109                                  ;%if 0
 38110                                  
 38111 00004C16 4F4E                    OnOff:	db	'ON'
 38112 00004C18 4F4646                  OnOff2:	db	'OFF'
 38113                                  
 38114                                  	; 04/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38115                                  	; (SYSINIT:5673h)
 38116                                  ;StartMsg:
 38117                                  ;	db	'Starting MS-DOS...',0Dh,0Ah
 38118                                  ;	db	0Ah,0
 38119                                  
 38120                                  _$PauseMsg:
 38121 00004C1B 507265737320616E79-     	db	'Press any key to continue . . .',0Dh,0Ah,'$'
 38121 00004C24 206B657920746F2063-
 38121 00004C2D 6F6E74696E7565202E-
 38121 00004C36 202E202E0D0A24     
 38122                                  	; 04/08/2023 (PCDOS 7.10 - IBMBIO.COM SYSINIT:590Dh)
 38123                                  	;db	'Press any key to continue...',0Dh,0Ah,'$'
 38124                                  _$CleanMsg:
 38125 00004C3D 4D532D444F53206973-     	db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 38125 00004C46 20627970617373696E-
 38125 00004C4F 6720796F757220434F-
 38125 00004C58 4E4649472E53595320-
 38125 00004C61 616E64204155544F45-
 38125 00004C6A 5845432E4241542066-
 38125 00004C73 696C65732E0D0A24   
 38126                                  _$InterMsg:
 38127 00004C7B 4D532D444F53207769-     	db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 38127 00004C84 6C6C2070726F6D7074-
 38127 00004C8D 20796F7520746F2063-
 38127 00004C96 6F6E6669726D206561-
 38127 00004C9F 636820434F4E464947-
 38127 00004CA8 2E53595320636F6D6D-
 38127 00004CB1 616E642E0D0A24     
 38128                                  _$MenuHeader:
 38129 00004CB8 0D0A                    	db	0Dh,0Ah
 38130 00004CBA 20204D532D444F5320-     	db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 38130 00004CC3 362E32205374617274-
 38130 00004CCC 7570204D656E750D0A 
 38131 00004CD5 2020                    	db	'  '
 38132 00004CD7 CD<rep 17h>             	times	23 db (0CDh)  ; ALT 205 ; '=======================' ; 06/08/2023
 38133 00004CEE 0D0A24                  	db 	0Dh,0Ah,'$'
 38134                                  	; 04/08/2023 (PCDOS 7.10 - IBMBIO.COM SYSINIT:59A7h)
 38135                                  	;db	'  PC DOS 7.1 Startup Menu',0Dh,0Ah
 38136                                  	;db	'  '
 38137                                  	;times	23 db (0CDh)  ; ALT 205 ; '=======================' ; 06/08/2023
 38138                                  	;db 	0Dh,0Ah,'$'
 38139                                  _$MenuPrmpt:
 38140 00004CF1 2020456E7465722061-     	db	'  Enter a choice: $'
 38140 00004CFA 2063686F6963653A20-
 38140 00004D03 24                 
 38141                                  _$StatusLine:
 38142 00004D04 46353D427970617373-     	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS '
 38142 00004D0D 207374617274757020-
 38142 00004D16 66696C65732046383D-
 38142 00004D1F 436F6E6669726D2065-
 38142 00004D28 616368206C696E6520-
 38142 00004D31 6F6620434F4E464947-
 38142 00004D3A 2E53595320         
 38143 00004D3F 616E64204155544F45-     	db	'and AUTOEXEC.BAT [ ]$'
 38143 00004D48 5845432E424154205B-
 38143 00004D51 205D24             
 38144                                  _$InterPrmpt:
 38145 00004D54 205B592C4E5D3F24        	db	' [Y,N]?$'
 38146                                  	; 04/08/2023
 38147                                  	;db	' [Y,N,ESC]?$' ; PCDOS 7.1 - IBMBIO.COM 
 38148 00004D5C 59455324                _$YES:	db	'YES$'
 38149 00004D60 4E4F2024                _$NO:	db	'NO $'
 38150                                  _$TimeOut:
 38151 00004D64 54696D652072656D61-     	db	'Time remaining: $'
 38151 00004D6D 696E696E673A2024   
 38152                                  badcomprmpt:
 38153 00004D75 456E74657220636F72-     	db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 38153 00004D7E 72656374206E616D65-
 38153 00004D87 206F6620436F6D6D61-
 38153 00004D90 6E6420496E74657270-
 38153 00004D99 726574657220286567-
 38153 00004DA2 2C20433A5C434F4D4D-
 38153 00004DAB 414E442E434F4D29   
 38154 00004DB3 0D0A24                  	db	0Dh,0Ah,'$'
 38155                                  _$AutoPrmpt:
 38156 00004DB6 50726F636573732041-     	db	'Process AUTOEXEC.BAT [Y,N]?$'
 38156 00004DBF 55544F455845432E42-
 38156 00004DC8 4154205B592C4E5D3F-
 38156 00004DD1 24                 
 38157                                  
 38158                                  ;%endif ; 02/11/2022
 38159                                  
 38160                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38161                                  ; (SYSINIT:5840h)
 38162                                  
 38163                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38164                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 38165                                  
 38166                                  TooManyDrivesMsg:
 38167 00004DD2 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 38167 00004DDB 4C6F676963616C2064-
 38167 00004DE4 726976657320706173-
 38167 00004DED 74205A3A2065786973-
 38167 00004DF6 7420616E642077696C-
 38167 00004DFF 6C2062652069676E6F-
 38167 00004E08 7265640D0A24       
 38168                                  
 38169                                  ;MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 38170                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 38171                                  	;db	7 dup(0)
 38172                                  
 38173                                  	;times	7 db 0
 38174                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38175                                  ;MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 38176                                  	; 09/12/2022
 38177                                  	;times 4 db 0
 38178                                  
 38179                                  ;----------------------------------------------------------------------------
 38180                                  		; 09/12/2022
 38181                                  		;db 0
 38182                                  
 38183                                  number3div	equ ($-SYSINIT$)
 38184                                  number3mod	equ (number3div % 16)
 38185                                  
 38186                                  %if number3mod>0 & number3mod<16
 38187 00004E0E 00<rep 2h>              		times (16-number3mod) db 0
 38188                                  %endif
 38189                                  
 38190                                  ;---------------------------------------------------------------------------- 
 38191                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS 
 38192                                  ;---------------------------------------------------------------------------- 
 38193                                  
 38194                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 38195                                  
 38196                                  ;----------------------------------------------------------------------------
 38197                                  ; 20/04/2019 - Retro DOS v4.0
 38198                                  
 38199                                  ; 09/12/2022
 38200                                  ;
 38201                                  ;bss_start:
 38202                                  ;
 38203                                  ;ABSOLUTE bss_start
 38204                                  ;
 38205                                  ;alignb 16
 38206                                  
 38207                                  SI_end:  ; SI_end equ $
 38208                                  
 38209                                  ;----------------------------------------------------------------------------
 38210                                  
 38211                                  ;sysinitseg	ends
 38212                                  
 38213                                  ; ***************************************************************************
 38214                                  
 38215                                  ; 04/01/2023 - MSDOS 6.21 SYSINIT:SI_end = SYSINIT:58A0h (IOSYS:9F46h)
 38216                                  ; 09/12/2022 - MSDOS 5.0 SYSINIT:SI_end = SYSINIT:3D20h
 38217                                  
 38218                                  SYSINITSIZE	equ SI_end - SYSINIT$
 38219                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 38220                                  
 38221                                  ;----------------------------------------------------------------------------
 38222                                  ; End of Retro DOS v4.2 IO.SYS source by Erdogan Tan - 04/01/2023 -
 38223                                  ;----------------------------------------------------------------------------
 38224                                  
 38225                                  ; 21/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 38226                                  ;----------------------------------------------------------------------------
 38227                                  ;----------------------------------------------------------------------------
 38228                                  
 38229                                  ; ----------------------------------------------------------------------------
 38230                                  ; START OF MSDOS 6.0 -IBMDOS.COM- KERNEL CODE (MSDOS.SYS) -will be relocated-
 38231                                  ; ----------------------------------------------------------------------------
 38232                                  ; 04/01/2023 - Retro DOS v4.2
 38233                                  ; 29/12/2022 - Retro DOS v4.1
 38234                                  ; 18/03/2019 - Retro DOS v4.0 
 38235                                  ; 11/06/2018 - Retro DOS v3.0 
 38236                                  
 38237                                  MSDOS_BIN_OFFSET: ; this offset must be paragraph aligned
 38238                                  		;; 28/06/2019 ('msdos6.s') 
 38239                                  		;incbin	'MSDOS6.BIN' ; Retro DOS 4.0 - MSDOS 6.21 KERNEL
 38240                                  		
 38241                                  		; 29/12/2022
 38242                                  		;incbin	'MSDOS51.BIN' ; Retro DOS 4.1 - MSDOS 5.0+ KERNEL
 38243                                  
 38244                                  		; 04/01/2023
 38245 00004E10 <bin 8EFAh>             		incbin	'MSDOS6.BIN' ; Retro DOS 4.2 - MSDOS 6.21+ KERNEL		
 38246                                  		
 38247                                  		;; 28/12/2022 (BugFix)
 38248                                  		;; 22/12/2022
 38249                                  		;; 21/12/2022 ('msdos5.s')
 38250                                  		;incbin 'MSDOS5.BIN'  ; Retro DOS 4.0 - MSDOS 5.0+ KERNEL
 38251                                  	
 38252                                  msdos_bin_size equ $ - MSDOS_BIN_OFFSET
 38253                                  
 38254                                  align 2
 38255                                  
 38256                                  ; 21/12/2022
 38257                                  ;END_OF_KERNEL:
 38258                                  END_OF_KERNEL equ $
 38259                                  
 38260                                  ;=============================================================================
 38261                                  ;	END
 38262                                  ;=============================================================================
 38263                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 38264                                  ; ------------------------------
 38265                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
