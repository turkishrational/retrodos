     1                                  ; ****************************************************************************
     2                                  ; RETRODOS.SYS (MSDOS 6.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 01/10/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 14/08/2023 - Retro DOS v4.2 (Modified MSDOS 6.22)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 26/12/2018 (Retro DOS 4.0), 28/12/2022 (Retro DOS 4.1, MSDOS 5.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15 (2.11)
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm retrodos.s -l retrodos.lst -o MSDOS.SYS -Z error.txt)) 
    11                                  ; ----------------------------------------------------------------------------
    12                                  
    13                                  ; 20/12/2022 - Modifications for initiating IO.SYS by Retro DOS v2 boot sector
    14                                  ;
    15                                  ;	       (Retro DOS v2 BS loads IO.SYS & MSDOS.SYS as single kernel file
    16                                  ;	       with name of 'MSDOS.SYS'. Retro DOS init code -for IO.SYS init-
    17                                  ;	       is different than original MSDOS IO.SYS LOADER and INIT code.)
    18                                  ;
    19                                  ;	       ((RETRODOS.SYS/MSDOS.SYS can be loaded by a fake IO.SYS for
    20                                  ;		using it with MSDOS 5.0 boot sector & as bootable MSDOS disk.
    21                                  ;		For that, fake IO.SYS must load 'MSDOS.SYS' at 1000h:0000h.))		-	
    22                                  ; 		
    23                                  ; 18/12/2022 - Modified MSDOS 5.0 IO.SYS (for using with MSDOS 5 boot sector)
    24                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    25                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    26                                  
    27                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    28                                  ;     (as included binary, 'IOSYS5.BIN') 
    29                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    30                                  ;						        (except MSLOAD code)
    31                                        
    32                                  ;------- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    33                                  ;	 at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    34                                  ;	 moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    35                                  ;	 Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    36                                  ;	 SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    37                                  ;	 (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    38                                  
    39                                  ; ----------------------------------------------------------------------------
    40                                  
    41                                  ;=============================================================================
    42                                  ; Modified from 'retrodos3.s', Retro DOS v3.0 Kernel (IBMBIO.COM) Source code
    43                                  ; by Erdogan Tan, 10/09/2018
    44                                  ;=============================================================================
    45                                  
    46                                  ; MSBIO (IO.SYS 6.0) source files:
    47                                  ; 	MSBIO1.ASM,MSCHAR.ASM,MSDISK.ASM,MSDIOCTL.ASM,MSINT13.ASM,MSBIO2.ASM
    48                                  ;	MSINIT.ASM,SYSINIT1.ASM,SYSCONF.ASM,SYSPRE.ASM,SYSINIT2.ASM 
    49                                  ;	SYSIMES.ASM,POWER.ASM,PTIME.ASM,MSEND.ASM
    50                                  
    51                                  ;=============================================================================
    52                                  ; MSBIO
    53                                  ;=============================================================================
    54                                  ;msbio1+mschar+msdisk+msdioctl+msint13+msbio2+
    55                                  ;msinit+sysinit1+sysconf+syspre+sysinit2+sysimes+power+ptime+
    56                                  ;msend,msbio,msbio;
    57                                  
    58                                  ;=============================================================================
    59                                  ; RETRO DOS kernel versions by Erdogan Tan (2018-2022)
    60                                  ;=============================================================================
    61                                  
    62                                  ;Retro DOS v1.0 == MSDOS 1.25 -- derived from MSDOS 1.25 source code 
    63                                  ;Retro DOS v2.0 == MSDOS 2.11 -- derived from MSDOS 2.11 source code 
    64                                  ;Retro DOS v3.0 == MSDOS 3.30 -- derived from MSDOS 3.3 & 6.0 source code 
    65                                  ;Retro DOS v4.0 == MSDOS 6.21 -- derived from MSDOS 6.0 source code (2019) (*)
    66                                  ;Retro DOS v4.0 == MSDOS 5.0+ -- derived from MSDOS 6.0 source code (2022) (**)
    67                                  ;Retro DOS v4.1 == MSDOS 5.0+ -- will be optimized -shortened- version (2023)
    68                                  ;Retro DOS v4.2 == MSDOS 6.21 -- will be MSDOS 6.21 (6.22) compatible (2023)(?)
    69                                  ;Retro DOS v5.0 == PCDOS 7.10 -- will be derived from IBM PCDOS 7.1 source code
    70                                  
    71                                  ;(*) unfinished, draft, canceled (failed in 2019)
    72                                  ;(**) MSDOS 5.0 IO.SYS & SYSINIT, MSDOS 5.0-6.22 mixed MSDOS.SYS (successed)
    73                                  ;(?) MSDOS 6.21 IO.SYS & SYSINIT, MSDOS 6.21 MSDOS.SYS except doublespace
    74                                  
    75                                  ;Disassembly: (reverse engineering via IDA Pro Free)
    76                                  
    77                                  ;Retro DOS v1.0 <-- IBM PCDOS 1.1
    78                                  ;Retro DOS v2.0 <-- IBM PCDOS 2.1 & MSDOS 2.11
    79                                  ;Retro DOS v3.0 <-- IBM PCDOS 3.3 & MSDOS 3.3
    80                                  ;Retro DOS v4.0 <-- MSDOS 6.21 ; 2018-2019 (*)
    81                                  ;Retro DOS v4.0 <-- MSDOS 5.0 ; 2022 (**)
    82                                  ;Retro DOS v5.0 <-- IBM PCDOS 7.1 
    83                                  
    84                                  ;-----------------------------------------------------------------------------
    85                                  ; MSDOS 6.21 IO.SYS (13/02/1994)
    86                                  ;-----------------------------------------------------------------------------
    87                                  
    88                                  SECTOR_SIZE     equ     0200h		; size of a sector
    89                                  PAUSE_KEY       equ     7200h		; scancode + charcode of PAUSE key
    90                                  KEYBUF_NEXT     equ     041Ah		; next character in keyboard buffer
    91                                  KEYBUF_FREE     equ     041Ch		; next free slot in keyboard buffer
    92                                  KEYBUF          equ     041Eh		; keyboard buffer data
    93                                  LOGICAL_DRIVE   equ     0504h		; linear address of logical drive byte
    94                                  ;DOS_SEGMENT	equ     00BFh ; v1.1	; segment in which DOS will run
    95                                  DOS_SEGMENT	equ     00C4h		; Retro DOS v1.0 - 13/02/2018
    96                                  BIO_SEGMENT     equ     0060h		; segment in which BIO is running
    97                                  
    98                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "DISKPRM.INC" - 24/07/1987)
    99                                  ; The following structure defines the disk parameter table
   100                                  ; pointed to by Interrupt vector 1EH (location 0:78H)
   101                                  
   102                                  struc	DISK_PARMS
   103 00000000 ??                      .DISK_SPECIFY_1:  resb	1
   104 00000001 ??                      .DISK_SPECIFY_2:  resb	1
   105 00000002 ??                      .DISK_MOTOR_WAIT: resb  1	; Wait till motor off
   106 00000003 ??                      .DISK_SECTOR_SIZ: resb 	1	; Bytes/Sector (2 = 512)
   107 00000004 ??                      .DISK_EOT:	  resb  1	; Sectors per track (MAX)
   108 00000005 ??                      .DISK_RW_GAP:	  resb  1	; Read Write Gap
   109 00000006 ??                      .DISK_DTL:	  resb	1
   110 00000007 ??                      .DISK_FORMT_GAP:  resb  1	; Format Gap Length
   111 00000008 ??                      .DISK_FILL:	  resb  1	; Format Fill Byte
   112 00000009 ??                      .DISK_HEAD_STTL:  resb  1	; Head Settle Time (MSec)
   113 0000000A ??                      .DISK_MOTOR_STRT: resb  1	; Motor start delay
   114                                  .size:
   115                                  endstruc
   116                                  
   117                                  ; 09/03/2019 - Retro DOS v4.0
   118                                  ; -------------------------------------------------------------------------
   119                                  ; MSEQU.INC, MSDOS 6.0, 1991
   120                                  
   121                                  ftoobig 	equ	80h
   122                                  fbig		equ	40h
   123                                  romstatus	equ	1
   124                                  romread 	equ	2
   125                                  romwrite	equ	3
   126                                  romverify	equ	4
   127                                  romformat	equ	5
   128                                  
   129                                  ; 26/12/2018 (Retro DOS 4.0 - MSDOS 6.0 "MSBDS.INC" - 1991)
   130                                  ; -------------------------------------------------------------------------
   131                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "MSBDS.INC" - 24/07/1987)
   132                                  ;
   133                                  ;  BDS is the Bios Data Structure.
   134                                  ;
   135                                  ;  There is one BDS for each logical drive in the system. All the BDS's
   136                                  ;  are linked together in a list with the pointer to the first BDS being
   137                                  ;  found in START_BDS. The BDS hold various values important to the disk
   138                                  ;  drive. For example there is a field for last time accesses. As actions
   139                                  ;  take place in the system the BDS are update to reflect the actions.
   140                                  ;  For example is there is a read to a disk the last access field for the
   141                                  ;  BDS for that drive is update to the current time.
   142                                  ;
   143                                  ; Values for various flags in BDS.flags.
   144                                  ;
   145                                  
   146                                  fnon_removable	    equ     01h 	;For non-removable media
   147                                  fchangeline	    equ     02h 	;If changeline supported on drive
   148                                  return_fake_bpb     equ     04h 	; When set, don't do a build BPB
   149                                  					; just return the fake one
   150                                  good_tracklayout    equ     08h 	; The track layout has no funny sectors
   151                                  fi_am_mult	    equ     10h 	;If more than one logical for this physical
   152                                  fi_own_physical     equ     20h 	;Signify logical owner of this physical
   153                                  fchanged	    equ     40h 	;Indicates media changed
   154                                  set_dasd_true	    equ     80h 	; Set DASD before next format
   155                                  fchanged_by_format  equ    100h		;Media changed by format
   156                                  ; MSDOS 6.0
   157                                  unformatted_media   equ    200h 	;Fixed disk only
   158                                  
   159                                  ;
   160                                  ; Various form factors to describe media
   161                                  ;
   162                                  
   163                                  ff48tpi 	    equ     0
   164                                  ff96tpi 	    equ     1
   165                                  ffSmall 	    equ     2
   166                                  ffHardFile	    equ     5
   167                                  ffOther 	    equ     7
   168                                  ; MSDOS 6.0 ("MSBDS.INC", 1991)
   169                                  ff288		    equ     9	; 2.88 MB drive
   170                                  ; Retro DOS v4.0 feature only !
   171                                  ;ff144		    equ	   10	; 1.44 MB drive			
   172                                  
   173                                  ; 26/05/2019
   174                                  
   175                                  struc	BDS	; BDS_Type
   176 00000000 ????????                .link:		resd 1		; Link to next BDS
   177 00000004 ??                      .drivenum:	resb 1		; Physical drive number
   178 00000005 ??                      .drivelet:	resb 1		; DOS drive number
   179                                  
   180                                  	;We want to embed a BPB declaration here, but we can't initialize
   181                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   182                                  	;of the BPB declaration.
   183                                  .BPB:	
   184 00000006 ????                    .bytespersec:	resw 1		; bytes per sectors ; def = 512
   185 00000008 ??                      .secperclus:	resb 1		; sectors per cluster
   186 00000009 ????                    .resectors:	resw 1		; reserved sectors
   187 0000000B ??                      .fats:		resb 1		; number of fats
   188 0000000C ????                    .direntries:	resw 1		; number of root directory entries
   189 0000000E ????                    .totalsecs16:	resw 1		; total sectors on medium
   190 00000010 ??                      .media:		resb 1		; media descriptor byte ; def = 0F8h
   191 00000011 ????                    .fatsecs: 	resw 1		; number of fat sectors
   192 00000013 ????                    .secpertrack:	resw 1		; sectors per track
   193 00000015 ????                    .heads:		resw 1		; number of heads
   194                                  ;.hiddensecs:	resw 1		; hidden sectors
   195                                  ; MSDOS 6.0
   196 00000017 ????????                .hiddensecs:	resd 1		; hidden sectors	
   197 0000001B ????????                .totalsecs32:	resd 1		; big total sectors		
   198                                  ;
   199 0000001F ??                      .fatsiz:	resb 1		; flags...
   200 00000020 ????                    .opcnt:		resw 1		; open ref. count
   201                                  ;.volid:	resb 12		; volume ID of medium
   202 00000022 ??                      .formfactor:	resb 1		; form factor index
   203 00000023 ????                    .flags:		resw 1		; various flags ; def: 0020h
   204 00000025 ????                    .cylinders:	resw 1		; number of cylinders
   205                                  ;
   206                                  .R_BPB:  			; recommended BPB
   207 00000027 ????                    .rbytespersec:	resw 1		
   208 00000029 ??                      .rsecperclus:	resb 1
   209 0000002A ????                    .rresectors: 	resw 1
   210 0000002C ??                      .rfats:		resb 1
   211 0000002D ????                    .rdirentries:	resw 1
   212 0000002F ????                    .rtotalsecs16:	resw 1
   213 00000031 ??                      .rmedia: 	resb 1
   214 00000032 ????                    .rfatsecs:	resw 1
   215 00000034 ????                    .rsecpertrack: 	resw 1
   216 00000036 ????                    .rheads:	resw 1
   217 00000038 ????????                .rhidsecs: 	resd 1
   218 0000003C ????????                .rtotalsecs32: 	resd 1
   219 00000040 ????????????            .rreserved:	resb 6		; not used (reserved)
   220                                  ;
   221 00000046 ??                      .track:		resb 1		; last track accessed on drive
   222                                  .bdsm_ismini:
   223 00000047 ????                    .tim_lo:	resw 1		; time of last access. keep
   224                                  .bdsm_hidden_trks:
   225 00000049 ????                    .tim_hi:	resw 1		; these contiguous.
   226 0000004B <res Ch>                .volid:		resb 12		; volume id of medium
   227                                  	       ;db "NO NAME    ",0
   228 00000057 ????????                .vol_serial:	resd 1	; current volume serial number from boot record
   229 0000005B <res 9h>                .filesys_id:	resb 9	; current file system id from boot record
   230                                  	       ;db "FAT12   ",0
   231                                  .size:			
   232                                  endstruc
   233                                  
   234                                  ;The assembler will generate bad data for "size bds_volid",
   235                                  ;so we'll define an equate here.
   236                                  
   237                                  VOLID_SIZ	equ	12
   238                                  
   239                                  ;bdsm_ismini	equ	bds_tim_lo	; overlapping bds_tim_lo
   240                                  ;bdsm_hidden_trks equ	bds_tim_hi	; overlapping bds_tim_hi
   241                                  
   242                                  max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
   243                                  
   244                                  ; 29/12/2018
   245                                  ; Retro DOS v4.0
   246                                  ;
   247                                  ; MSDOS 6.0 - BOOTFORM.INC
   248                                  
   249                                  BOOT_SIZE	    EQU	 512
   250                                  EXT_BOOT_SIGNATURE  EQU	 29h ; 41 ; Extended boot signature
   251                                  
   252                                  struc EBPB ; EXT_BPB_INFO
   253 00000000 ????                    .BYTESPERSECTOR:    resw 1
   254 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   255 00000003 ????                    .RESERVEDSECTORS:   resw 1
   256 00000005 ??                      .NUMBEROFFATS:	    resb 1
   257 00000006 ????                    .ROOTENTRIES:	    resw 1
   258 00000008 ????                    .TOTALSECTORS:	    resw 1
   259 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   260 0000000B ????                    .SECTORSPERFAT:	    resw 1
   261 0000000D ????                    .SECTORSPERTRACK:   resw 1
   262 0000000F ????                    .HEADS:		    resw 1
   263 00000011 ????????                .HIDDENSECTORS:	    resd 1
   264 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   265                                  .size:
   266                                  endstruc
   267                                  
   268                                  ;EXT_PHYDRV, EXT_CURHD included in the header for OS2.
   269                                  struc EXT_BOOT ; EXT_IBMBOOT_HEADER
   270 00000000 ??????                  .JUMP:		resb 3
   271 00000003 ????????????????        .OEM:		resb 8
   272 0000000B <res 19h>               .BPB:		resb EBPB.size
   273 00000024 ??                      .PHYDRV:	resb 1
   274 00000025 ??                      .CURHD:		resb 1
   275 00000026 ??                      .SIG:		resb 1
   276 00000027 ????????                .SERIAL:	resd 1
   277 0000002B <res Bh>                .VOL_LABEL:	resb 11
   278 00000036 ????????????????        .SYSTEM_ID:	resb 8
   279                                  .size:
   280                                  endstruc
   281                                  
   282                                  %define BOOT_SIGNATURE	[BOOT_SIZE-2]
   283                                  
   284                                  ; 23/03/2018
   285                                  
   286                                  ;STATIC REQUEST HEADER (DEVSYM.INC, MSDOS 6.0, 1991)
   287                                  STRUC SRHEAD
   288 00000000 ??                      .REQLEN:	resb 1		;LENGTH IN BYTES OF REQUEST BLOCK
   289 00000001 ??                      .REQUNIT:	resb 1		;DEVICE UNIT NUMBER
   290 00000002 ??                      .REQFUNC:	resb 1		;TYPE OF REQUEST
   291 00000003 ????                    .REQSTAT:	resw 1		;STATUS WORD
   292 00000005 ????????????????        	       	resb 8		;RESERVED FOR QUEUE LINKS
   293                                  .size:
   294                                  endstruc
   295                                  
   296                                  ; GENERIC IOCTL REQUEST STRUCTURE (DEVSYM.INC, MSDOS 6.0, 1991)
   297                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
   298                                  ;
   299                                  struc IOCTL_REQ
   300                                  	       ;DB   (SIZE SRHEAD) DUP(?)
   301 00000000 <res Dh>                		resb SRHEAD.size	
   302                                  			    	; GENERIC IOCTL ADDITION.
   303 0000000D ??                      .MAJORFUNCTION:	resb 1		;FUNCTION CODE
   304 0000000E ??                      .MINORFUNCTION:	resb 1		;FUNCTION CATEGORY
   305 0000000F ????                    .REG_SI:	resw 1
   306 00000011 ????                    .REG_DI:	resw 1
   307 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
   308                                  endstruc
   309                                  
   310                                  ; GENERIC IOCTL CATEGORY CODES  (IOCTL.INC, MSDOS 6.0, 1991)
   311                                  IOC_OTHER	EQU	0	; Other device control J.K. 4/29/86
   312                                  IOC_SE		EQU	1	; SERIAL DEVICE CONTROL
   313                                  IOC_TC		EQU	2	; TERMINAL CONTROL
   314                                  IOC_SC		EQU	3	; SCREEN CONTROL
   315                                  IOC_KC		EQU	4	; KEYBOARD CONTROL
   316                                  IOC_PC		EQU	5	; PRINTER CONTROL
   317                                  IOC_DC		EQU	8	; DISK CONTROL (SAME AS RAWIO)
   318                                  
   319                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
   320                                  GEN_IOCTL_WRT_TRK   EQU   40H
   321                                  GEN_IOCTL_RD_TRK    EQU   60H
   322                                  GEN_IOCTL_FN_TST    EQU   20H	; USED TO DIFF. BET READS AND WRTS
   323                                  
   324                                  ;struc A_RETRYCOUNT  ; (IOCTL.INC, MSDOS 6.0, 1991)
   325                                  ;.RC_COUNT:	resw 	1
   326                                  ;endstruc
   327                                  
   328                                  ; 29/05/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
   329                                  
   330                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   331                                  
   332                                  ;struc SYSDEV
   333                                  ; .NEXT:  resd 1	;POINTER TO NEXT DEVICE HEADER
   334                                  ; .ATT:	  resw 1	;ATTRIBUTES OF THE DEVICE
   335                                  ; .STRAT: resw 1	;STRATEGY ENTRY POINT
   336                                  ; .INT:	  resw 1	;INTERRUPT ENTRY POINT
   337                                  ; .NAME:  resb 8	;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   338                                  ; .size:
   339                                  ;endstruc
   340                                  
   341                                  ; 27/03/2018 - DEVSYM.INC - MSDOS 3.3 - 24/07/1987
   342                                  
   343                                  ;
   344                                  ; ATTRIBUTE BIT MASKS
   345                                  ;
   346                                  ; CHARACTER DEVICES:
   347                                  ;
   348                                  ; BIT 15 -> MUST BE 1
   349                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   350                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
   351                                  ;     12 -> UNUSED
   352                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
   353                                  ;     10 -> MUST BE 0
   354                                  ;      9 -> MUST BE 0
   355                                  ;      8 -> UNUSED
   356                                  ;      7 -> UNUSED
   357                                  ;      6 -> UNUSED
   358                                  ;      5 -> UNUSED
   359                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
   360                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
   361                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
   362                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
   363                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
   364                                  ;
   365                                  ; BLOCK DEVICES:
   366                                  ;
   367                                  ; BIT 15 -> MUST BE 0
   368                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   369                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
   370                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
   371                                  ;	    THE SAME PLACE.
   372                                  ;     12 -> UNUSED
   373                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
   374                                  ;     10 -> MUST BE 0
   375                                  ;      9 -> MUST BE 0
   376                                  ;      8 -> UNUSED
   377                                  ;      7 -> UNUSED
   378                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
   379                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
   380                                  ;      5 -> UNUSED
   381                                  ;      4 -> UNUSED
   382                                  ;      3 -> UNUSED
   383                                  ;      2 -> UNUSED
   384                                  ;      1 -> UNUSED
   385                                  ;      0 -> UNUSED
   386                                  ;
   387                                  
   388                                  DEVTYP	       EQU   8000H	    ; BIT 15 - 1 IF CHAR, 0 IF BLOCK
   389                                  CHARDEV        EQU   8000H
   390                                  DEVIOCTL       EQU   4000H	    ; BIT 14 - CONTROL MODE BIT
   391                                  ISFATBYDEV     EQU   2000H	    ; BIT 13 - DEVICE USES FAT ID BYTES,
   392                                  				    ;  COMP MEDIA.
   393                                  OUTTILBUSY     EQU   2000H	    ; OUTPUT UNTIL BUSY IS ENABLED
   394                                  ISNET	       EQU   1000H	    ; BIT 12 - 1 IF A NET DEVICE, 0 IF
   395                                  				    ;  NOT.  CURRENTLY BLOCK ONLY.
   396                                  DEVOPCL        EQU   0800H	    ; BIT 11 - 1 IF THIS DEVICE HAS
   397                                  				    ;  OPEN,CLOSE AND REMOVABLE MEDIA
   398                                  				    ;  ENTRY POINTS, 0 IF NOT
   399                                  
   400                                  EXTENTBIT      EQU   0400H	    ; BIT 10 - CURRENTLY 0 ON ALL DEVS
   401                                  				    ;  THIS BIT IS RESERVED FOR FUTURE USE
   402                                  				    ;  TO EXTEND THE DEVICE HEADER BEYOND
   403                                  				    ;  ITS CURRENT FORM.
   404                                  
   405                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
   406                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
   407                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
   408                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
   409                                  
   410                                  ; 18/03/2019 - Retro DOS v4.0
   411                                  IOQUERY	       EQU   0080H	    ;Bit 7 - Supports generic IOCtl query M017
   412                                  
   413                                  DEV320	       EQU   0040H	    ;BIT 6 - FOR BLOCK DEVICES, THIS
   414                                  				    ;DEVICE SUPPORTS SET/GET MAP OF
   415                                  				    ;LOGICAL DRIVES, AND SUPPORTS
   416                                  				    ;GENERIC IOCTL CALLS.
   417                                  				    ;FOR CHARACTER DEVICES, THIS
   418                                  				    ;DEVICE SUPPORTS GENERIC IOCTL.
   419                                  				    ;THIS IS A DOS 3.2 DEVICE DRIVER.
   420                                  ISSPEC	       EQU   0010H	    ;BIT 4 - THIS DEVICE IS SPECIAL
   421                                  ISCLOCK        EQU   0008H	    ;BIT 3 - THIS DEVICE IS THE CLOCK DEVICE.
   422                                  ISNULL	       EQU   0004H	    ;BIT 2 - THIS DEVICE IS THE NULL DEVICE.
   423                                  ISCOUT	       EQU   0002H	    ;BIT 1 - THIS DEVICE IS THE CONSOLE OUTPUT.
   424                                  ISCIN	       EQU   0001H	    ;BIT 0 - THIS DEVICE IS THE CONSOLE INPUT.
   425                                  ; 23/07/2019 - Retro DOS v4.0
   426                                  EXTDRVR	       EQU   0002h ; (MSDOS 6.0, DEVSYM.INC, 1991)
   427                                  
   428                                  ; 27/05/2018 - Retro DOS v3.0 
   429                                  ; [MSDOS 3.3, MSDISK.ASM]
   430                                  
   431                                  struc INT13FRAME
   432 00000000 ????                    .oldbp:	resw 1
   433 00000002 ????                    .oldax:	resw 1
   434 00000004 ????                    .oldbx:	resw 1
   435 00000006 ????                    .oldcx:	resw 1
   436 00000008 ????                    .olddx:	resw 1
   437 0000000A ????????                .olddd:	resd 1
   438 0000000E ????                    .oldf:	resw 1
   439                                  .size:
   440                                  endstruc
   441                                  
   442                                  ; 02/06/2018 - Retro DOS v3.0
   443                                  ; [MSDOS 3.3, BIOSTRUC.INC]
   444                                  
   445                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   446 00000000 ????                    .bios_sd_leng:		resw 1				  
   447 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
   448                                  .bios_sd_scnd_modelbyte: 
   449 00000003 ??                      			resb 1					  
   450 00000004 ??                      			resb 1					  
   451 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
   452 00000006 ????????                			resb 4					  
   453                                  endstruc
   454                                  
   455                                  ;-----------------------------------------------------------------------------
   456                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
   457                                  ;-----------------------------------------------------------------------------
   458                                  ; 11/03/2019 - Retro DOS v4.0
   459                                  
   460                                  ; 18/03/2019
   461                                  DSK_TIMEOUT_ERR 	EQU	80h	; Time out error (no media present).
   462                                  DSK_CHANGELINE_ERR	EQU	06h	; Change line error
   463                                  DSK_ILLEGAL_COMBINATION EQU	0Ch	; Return code of ah=18h function.
   464                                  MULTI_TRK_ON		EQU	10000000b ; User specified multitrack=on,
   465                                  					  ; or system turns
   466                                  ; IOCTL.INC - MSDOS 6.0 - 1991
   467                                  ; ............................................................................
   468                                  
   469                                  ;*** J.K.
   470                                  ;General Guide -
   471                                  ;Category Code:
   472                                  ; 0... .... DOS Defined
   473                                  ; 1... .... User defined
   474                                  ; .xxx xxxx Code
   475                                  
   476                                  ;Function Code:
   477                                  ; 0... .... Return error if unsupported
   478                                  ; 1... .... Ignore if unsupported
   479                                  ; .0.. .... Intercepted by DOS
   480                                  ; .1.. .... Passed to driver
   481                                  ; ..0. .... Sends data/commands to device
   482                                  ; ..1. .... Quries data/info from device
   483                                  ; ...x .... Subfunction
   484                                  ;
   485                                  ; Note that "Sends/queries" data bit is intended only to regularize the
   486                                  ; function set.  It plays no critical role; some functions may contain both
   487                                  ; command and query elements. The convention is that such commands are
   488                                  ; defined as "sends data".
   489                                  
   490                                  ;*****************************;*
   491                                  ; BLOCK DRIVERS 	      ;*
   492                                  ;*****************************;*
   493                                  
   494                                  ; IOCTL SUB-FUNCTIONS
   495                                  IOCTL_GET_DEVICE_INFO	EQU	0
   496                                  IOCTL_SET_DEVICE_INFO	EQU	1
   497                                  IOCTL_READ_HANDLE	EQU	2
   498                                  IOCTL_WRITE_HANDLE	EQU	3
   499                                  IOCTL_READ_DRIVE	EQU	4
   500                                  IOCTL_WRITE_DRIVE	EQU	5
   501                                  IOCTL_GET_INPUT_STATUS	EQU	6
   502                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   503                                  IOCTL_CHANGEABLE?	EQU	8
   504                                  IOCTL_DeviceLocOrRem?	EQU	9
   505                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
   506                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
   507                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
   508                                  GENERIC_IOCTL		EQU	0Dh   ;13
   509                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
   510                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
   511                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
   512                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
   513                                  
   514                                  ; GENERIC IOCTL SUB-FUNCTIONS
   515                                  RAWIO			EQU	8
   516                                  
   517                                  ; RAWIO SUB-FUNCTIONS
   518                                  GET_DEVICE_PARAMETERS	EQU	60H
   519                                  SET_DEVICE_PARAMETERS	EQU	40H
   520                                  READ_TRACK		EQU	61H
   521                                  WRITE_TRACK		EQU	41H
   522                                  VERIFY_TRACK		EQU	62H
   523                                  FORMAT_TRACK		EQU	42H
   524                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
   525                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
   526                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
   527                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
   528                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
   529                                  
   530                                  
   531                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
   532                                  BUILD_DEVICE_BPB	EQU	000000001B
   533                                  
   534                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
   535                                  INSTALL_FAKE_BPB	EQU	000000001B
   536                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
   537                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
   538                                  
   539                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
   540                                  STATUS_FOR_FORMAT	EQU	000000001B
   541                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
   542                                  ; CODES RETURNED FROM FORMAT STATUS CALL
   543                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
   544                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
   545                                  
   546                                  ; DEVICETYPE VALUES
   547                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
   548                                  DEV_5INCH		EQU	0
   549                                  DEV_5INCH96TPI		EQU	1
   550                                  DEV_3INCH720KB		EQU	2
   551                                  DEV_8INCHSS		EQU	3
   552                                  DEV_8INCHDS		EQU	4
   553                                  DEV_HARDDISK		EQU	5
   554                                  DEV_OTHER		EQU	7
   555                                  ;DEV_3INCH1440KB	EQU	7
   556                                  DEV_3INCH2880KB		EQU	9
   557                                  ; Retro DOS v2.0 - 26/03/2018
   558                                  ;;DEV_TAPE		EQU	6
   559                                  ;;DEV_ERIMO		EQU	8
   560                                  ;DEV_3INCH2880KB	EQU	9
   561                                  DEV_3INCH1440KB		EQU	10
   562                                  
   563                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   564                                  					; CURRENTLY SUPPORT.
   565                                  MAX_DEV_TYPE		EQU	10
   566                                  
   567                                  struc A_SECTORTABLE
   568 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   569 00000002 ????                    .ST_SECTORSIZE:		resw	1
   570                                  .size:
   571                                  endstruc
   572                                  
   573                                  ; MSDOS 6.0 - BPB.INC - 1991
   574                                  ; ####
   575                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   576                                  ;
   577                                  ;	The BPB contains information about the disk structure. It dates
   578                                  ;	back to the earliest FAT systems and so FAT information is
   579                                  ;	intermingled with physical driver information.
   580                                  ;
   581                                  ;	A boot sector contains a BPB for its device; for other disks
   582                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   583                                  ;	information in the DPB.
   584                                  ;
   585                                  ;	The BDS structure contains a BPB within it.
   586                                  ;
   587                                  
   588                                  struc A_BPB
   589 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   590 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   591 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   592 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   593 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   594 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   595 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   596 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   597 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   598 0000000F ????                    .BPB_HEADS:		resw	1
   599 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   600 00000013 ????                    			resw	1
   601 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   602 00000017 ????                    			resw	1
   603 00000019 ????????????            			resb	6	; NOTE:  many times these
   604                                  ;					; 	 6 bytes are omitted
   605                                  ;					;	 when BPB manipulations
   606                                  ;					;	 are performed!
   607                                  .size:
   608                                  endstruc
   609                                  ; ####
   610                                  
   611                                  struc A_DEVICEPARAMETERS
   612 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   613 00000001 ??                      .DP_DEVICETYPE:		resb	1
   614 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   615 00000004 ????                    .DP_CYLINDERS:		resw	1
   616 00000006 ??                      .DP_MEDIATYPE:		resb	1
   617 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
   618 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   619 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   620                                  endstruc
   621                                  
   622                                  struc A_TRACKREADWRITEPACKET
   623 00000000 ??                      .TRWP_SPECIALFUNCTIONS:	resb	1
   624 00000001 ????                    .TRWP_HEAD:		resw	1
   625 00000003 ????                    .TRWP_CYLINDER:		resw	1
   626 00000005 ????                    .TRWP_FIRSTSECTOR:	resw	1
   627 00000007 ????                    .TRWP_SECTORSTOREADWRITE: resw	1
   628 00000009 ????????                .TRWP_TRANSFERADDRESS:	resd	1
   629                                  endstruc
   630                                  
   631                                  ;AN001; - FP_TRACKCOUNT is only meaningful when FP_SPECIALFUNCTIONS bit 1 = 1.
   632                                  struc A_FORMATPACKET
   633 00000000 ??                      .FP_SPECIALFUNCTIONS:	resb	1  ; db ?
   634 00000001 ????                    .FP_HEAD: 		resw	1  ; dw ? 
   635 00000003 ????                    .FP_CYLINDER:		resw	1  ; dw ?
   636 00000005 ????                    .FP_TRACKCOUNT:		resw	1  ; dw 1 ; !
   637                                  endstruc
   638                                  
   639                                  struc A_VERIFYPACKET
   640 00000000 ??                      .VP_SPECIALFUNCTIONS:	resb	1
   641 00000001 ????                    .VP_HEAD: 		resw	1
   642 00000003 ????                    .VP_CYLINDER:		resw	1
   643                                  endstruc
   644                                  
   645                                  struc A_MEDIA_ID_INFO
   646 00000000 ????                    .MI_LEVEL:		resw	1  ; dw 0 ; !		;J.K. 87 Info. level
   647 00000002 ????????                .MI_SERIAL:		resd	1  ; dd ?		;J.K. 87 Serial #
   648 00000006 <res Bh>                .MI_LABEL:		resb	11 ; db 11 DUP (' ') ;!	;J.K. 87 volume label
   649 00000011 ????????????????        .MI_SYSTEM:		resb 	8  ; db 8 DUP (' ')  ;!	;J.K. 87 File system type
   650                                  endstruc
   651                                  
   652                                  struc A_DISKACCESS_CONTROL	   ;AN002; Unpublished function. Only for Hard file.
   653 00000000 ??                      .DAC_SPECIALFUNCTIONS:	resb 	1  ; db 0 ; ! ;AN002; Always 0
   654 00000001 ??                      .DAC_ACCESS_FLAG: 	resb 	1  ; db 0 ; ! 
   655                                  				   ; Non Zero - allow disk I/O to unformatted hard file
   656                                  endstruc			   ; 0 - Disallow disk I/O to unformatted hard file
   657                                  
   658                                  
   659                                  struc A_MEDIA_SENSE			; Media sense structure added 5.00
   660 00000000 ??                      .MS_ISDEFAULT:		resb	1	; If 1 type returned is drv default
   661 00000001 ??                      .MS_DEVICETYPE:		resb	1	; Drive type 
   662 00000002 ??                      .MS_RESERVED1:		resb	1	; RESERVED
   663 00000003 ??                      .MS_RESERVED2:		resb 	1	; RESERVED 
   664                                  endstruc
   665                                  
   666                                  ;********************************;*
   667                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
   668                                  ;********************************;*
   669                                  
   670                                  ;RAWIO SUB-FUNCTIONS
   671                                  GET_RETRY_COUNT 	EQU	65H
   672                                  SET_RETRY_COUNT 	EQU	45H
   673                                  
   674                                  struc A_RETRYCOUNT
   675 00000000 ????                    .RC_COUNT:		resw 1
   676                                  endstruc
   677                                  
   678                                  ;********************************;*		;J.K. 4/29/86
   679                                  ; CHARACTER DEVICES (SCREEN)	 ;*
   680                                  ;********************************;*		;J.K. 4/29/86
   681                                  ;
   682                                  ;SC_MODE_INFO	 struc
   683                                  ;SC_INFO_LENGTH 	 DW	 9
   684                                  ;SC_MODE		 DB	 0
   685                                  ;SC_COLORS		 DW	 0
   686                                  ;SC_WIDTH		 DW	 0
   687                                  ;SC_LENGTH		 DW	 0
   688                                  ;SC_MODE_INFO	 ends
   689                                  ;
   690                                  ;SC_INFO_PACKET_LENGTH	 EQU	 9		 ;LENGTH OF THE INFO PACKET.
   691                                  
   692                                  ;SUBFUNCTIONS FOR CON$GENIOCTL
   693                                  ;GET_SC_MODE		 EQU	 60h
   694                                  ;SET_SC_MODE		 EQU	 40h
   695                                  ;The following subfunctions are reserved for installable CODE PAGE switch
   696                                  ;console devices. - J.K. 4/29/86
   697                                  ;Get_active_codepage	 equ	 6Ah
   698                                  ;Invoke_active_codepage  equ	 4Ah
   699                                  ;Start_designate_codepage equ	 4Ch
   700                                  ;End_designate_codepage  equ	 4Dh
   701                                  ;Get_list_of_designated_codepage equ 6Bh
   702                                  ;J.K. 4/29/86 *** End of Con$genioctl equates & structures
   703                                  
   704                                  ;-----------------------------------------------------------------------------
   705                                  ; MULT.INC - MSDOS 6.0 - 1991
   706                                  ;-----------------------------------------------------------------------------
   707                                  ; 18/03/2019
   708                                  
   709                                  ; The current set of defined multiplex channels is (* means documented):
   710                                  ;
   711                                  ;   Channel(h)  Issuer          Receiver    Function
   712                                  ;      00       server          PSPRINT     print job control
   713                                  ;     *01       print/apps      PRINT       Queueing of files
   714                                  ;      02       BIOS            REDIR       signal open/close of printers
   715                                  ;
   716                                  ;      05       command         REDIR       obtain text of net int 24 message
   717                                  ;     *06       server/assign   ASSIGN      Install check
   718                                  ;
   719                                  ;      08       external driver IBMBIO      interface to internal routines
   720                                  ;
   721                                  ;      10       sharer/server   Sharer      install check
   722                                  ;      11       DOS/server      Redir       install check/redirection funcs
   723                                  ;      12       sharer/redir    DOS         dos functions and structure maint
   724                                  ;      13       MSNET           MSNET       movement of NCBs
   725                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
   726                                  ;                                           of alternative INT_13 drivers after
   727                                  ;                                           boot_up
   728                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
   729                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
   730                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
   731                                  ;      16       WIN386          WIN386      Windows communications
   732                                  ;      17       Clipboard       WINDOWS     Clipboard interface
   733                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
   734                                  ;      19       Shell
   735                                  ;      1A       Ansi.sys
   736                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
   737                                  ;
   738                                  ;      40h      OS/2
   739                                  ;      41h      Lanman
   740                                  ;      42h      Lanman
   741                                  ;      43h      Himem
   742                                  ;                               AL = 20h    reserved for Mach 20 Himem support
   743                                  ;                               AL = 30h    reserved for Himem external A20 code
   744                                  ;      44h      Dosextender
   745                                  ;      45H      Windows profiler
   746                                  ;      46h      Windows/286 DOS extender
   747                                  ;      47h      Basic Compiler Vn. 7.0
   748                                  ;      48h      Doskey
   749                                  ;      49h      DOS 5.x install 
   750                                  ;      4Ah      Multi Purpose
   751                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
   752                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
   753                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
   754                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
   755                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
   756                                  ;
   757                                  ;                multSmartdrv           10h
   758                                  ;                multMagicdrv           11h
   759                                  ;      4Bh      Task Switcher API
   760                                  ;
   761                                  ;      4Ch      APPS            APM             Advanced power management
   762                                  ;      4Dh      Kana Kanji Converter, MSKK
   763                                  ;
   764                                  ;      51h      ODI real mode support driver (for Chicago)
   765                                  ;
   766                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
   767                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
   768                                  ;
   769                                  ;      55h      COMMAND.COM
   770                                  ;                multCOMFIRST           0 - API to determine whether 1st
   771                                  ;                                           instance of command.com
   772                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
   773                                  ;                                           instance of ROM COMMAND
   774                                  ;      56h      Sewell Development
   775                                  ;               INTERLNK
   776                                  ;
   777                                  ;      57h      Iomega Corp.
   778                                  ;
   779                                  ;      AB       Unspecified IBM use
   780                                  ;      AC       Graphics
   781                                  ;      AD       NLS (toronto)
   782                                  ;      AE
   783                                  ;      AF       Mode
   784                                  ;      B0       GRAFTABL        GRAFTABL
   785                                  ;
   786                                  ;      D7       Banyan VINES
   787                                  
   788                                  multMULT	  equ	4Ah
   789                                  
   790                                  multMULTSWPDSK	  equ	0	; Swap Disk in drive A (BIOS)
   791                                  multMULTGETHMAPTR equ	1	; Get available HMA & ptr
   792                                  multMULTALLOCHMA  equ	2	; Allocate HMA (bx == no of bytes)
   793                                  multMULTTASKSHELL equ	5	; Shell/switcher API
   794                                  multMULTRPLTOM	  equ	6	; Top Of Memory for RPL support
   795                                  
   796                                  ;-----------------------------------------------------------------------------
   797                                  ; WIN386.INC - MSDOS 6.0 - 1991
   798                                  ;-----------------------------------------------------------------------------
   799                                  ; 18/03/2019
   800                                  
   801                                  ; WIN386.INC
   802                                  ;
   803                                  ;  Symbols and structures relating to WIN386 support.
   804                                  ;
   805                                  ;  Used by files in both the DOS and the BIOS.
   806                                  ;
   807                                  ;  Created: 7-13-89 by MRW
   808                                  ;
   809                                  
   810                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
   811                                  
   812                                  MultWin386		equ     16h	; Int 2f multiplex number
   813                                  
   814                                  Win386_Init		equ	05h	; Win386 initialization
   815                                  Win386_Exit		equ	06h	; Win386 exit
   816                                  Win386_Devcall		equ	07h	; Win386 device call out
   817                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
   818                                  
   819                                  ; ============================================================================
   820                                  
   821                                  ;bpbx		struc ;	(sizeof=0x19)	
   822                                  ;
   823                                  ;bytespersec	dw ?			; base 10
   824                                  ;secperclust	db ?			; base 10
   825                                  ;rsvdsecs	dw ?			; base 10
   826                                  ;numfats	db ?			; base 10
   827                                  ;rootdirents	dw ?			; base 10
   828                                  ;totalsize16	dw ?			; base 10
   829                                  ;mediaid	db ?
   830                                  ;fatsecs	dw ?			; base 10
   831                                  ;secpertrack	dw ?			; base 10
   832                                  ;heads		dw ?			; base 10
   833                                  ;hiddensecs_lw	dw ?			; base 10
   834                                  ;hiddensecs_hw	dw ?			; base 10
   835                                  ;totalsecs_lw	dw ?			; base 10
   836                                  ;totalsecs_hw	dw ?			; base 10
   837                                  ;
   838                                  ;bpbx		ends
   839                                  
   840                                  ;-----------------------------------------------------------------------------
   841                                  ;
   842                                  ; +-------------------------------------------------------------------------+
   843                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
   844                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
   845                                  ; |			 Licensed to: Freeware version			    |
   846                                  ; +-------------------------------------------------------------------------+
   847                                  ;
   848                                  ; Input	MD5   :	B2FA03653E5C5D545327EE28B8A24356
   849                                  ; Input	CRC32 :	20FC79BF
   850                                  
   851                                  ;-----------------------------------------------------------------------------
   852                                  
   853                                  ;		.386
   854                                  ;		.model flat
   855                                  
   856                                  ; ============================================================================
   857                                  
   858                                  ; 10/12/2022
   859                                  ; 09/12/2022
   860                                  ; 21/10/2022
   861                                  ; 19/10/2022
   862                                  ; 17/10/2022, 18/10/2022
   863                                  ; 15/10/2022, 16/10/2022
   864                                  ; 03/10/2022
   865                                  ; 02/10/2022
   866                                  ; 01/10/2022 - Erdogan Tan
   867                                  
   868                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
   869                                  
   870                                  ;-----------------------------------------------------------------------------
   871                                  ; Start of (MSDOS 5.0) IO.SYS (IBMBIO.COM)
   872                                  ;-----------------------------------------------------------------------------
   873                                  
   874                                  		; [ORG 0]		; segment 0x0070h
   875                                  
   876                                  ;=============================================================================
   877                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
   878                                  ;=============================================================================
   879                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
   880                                  
   881                                  section .BIOSDATA vstart=0
   882                                  
   883                                  ;--- DOSBIOS data segment ----------------------------------------------------
   884                                  ;-----------------------------------------------------------------------------
   885                                  
   886                                  ;Bios_Data segment
   887                                  
   888                                  BData_start:				
   889 00000000 E91C16                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
   890                                  ; ----------------------------------------------------------------------------
   891                                  
   892 00000003 0000                    DosDataSg:	dw 0
   893                                  
   894                                  ; DOS's int 2f handler will exit via a jump through here.
   895                                  ; This is how the BIOS hooks int2f
   896                                  
   897                                  ;BIOSDATA:0005h: ; 10/05/2023 (Note the 'bios_i2f equ 5' in 'msdos6.s')
   898                                  			
   899 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
   900                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
   901                                  		; PCDOS 7.1 IBMBIO.COM - BIODATA:0006h
   902                                  		;dw int_2f
   903                                  		;dw 70h			; BIOSDATA segment (KERNEL_SEGMENT)
   904 00000006 [5713]                  		dw i2f_handler	
   905                                  bios_i2f_seg:	; 10/08/2023
   906 00000008 8602                    		dw DOSBIOCODESEG	; 02CCh for MSDOS 6.21 IO.SYS (25Ch+070h)
   907                                  					; 0364h PCDOS 7.1 IBMBIO.COM  (2F4h+070h)
   908                                  
   909 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
   910                                  					; This is to maintain binary compatibility
   911                                  					; with DISK based DOS 5.0
   912                                  
   913                                  ; This is a byte used for special key handling in the resident
   914                                  ; console device driver. It must be here so that it can be included
   915                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
   916                                  
   917 0000000C 00                      altah:		db 0			; special key handling
   918                                  			
   919 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
   920 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
   921                                  
   922                                  ; PTRSAV - pointer save
   923                                  ;
   924                                  ; This variable holds the pointer to the Request Header passed by a program
   925                                  ; wishing to use a device driver. When the strategy routine is called it 
   926                                  ; puts the address of the Request header in this variable and returns.
   927                                  		
   928 00000012 00000000                ptrsav:		dd 0			
   929                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
   930 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
   931 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero			
   932 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through	
   933 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).			
   934 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
   935 00000021 0000                    auxnum:		dw 0			; which aux device was requested			
   936                                  
   937                                  ;-----------------------------------------------------------------------------
   938                                  
   939                                  res_dev_list:
   940                                  
   941                                  ; Device Header for the CON Device Driver
   942                                  
   943                                  CONHeader:				; HEADER FOR DEVICE "CON"
   944 00000023 [3500]                  		dw auxdev2
   945 00000025 7000                    		dw 70h	
   946 00000027 1380                    word_727:	dw 8013h
   947 00000029 [D006]                  		dw strategy
   948 0000002B [DB06]                  		dw con_entry
   949 0000002D 434F4E2020202020        aCon:		db 'CON     '           
   950 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"	
   951 00000037 7000                    		dw 70h
   952 00000039 0080                    		dw 8000h
   953 0000003B [D006]                  		dw strategy
   954 0000003D [FC06]                  		dw aux0_entry
   955 0000003F 4155582020202020        aAux:		db 'AUX     '
   956 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
   957 00000049 7000                    		dw 70h
   958 0000004B C0A0                    word_74B:	dw 0A0C0h
   959 0000004D [D006]                  		dw strategy
   960 0000004F [E006]                  		dw prn0_entry
   961 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
   962 00000059 [6B00]                  timdev:		dw dskdev	
   963 0000005B 7000                    		dw 70h
   964 0000005D 0880                    		dw 8008h
   965 0000005F [D006]                  		dw strategy
   966 00000061 [1407]                  		dw tim_entry
   967 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
   968 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
   969 0000006D 7000                    		dw 70h
   970 0000006F C208                    		dw 8C2h
   971                                  		;dw offset strategy
   972                                  		;dw offset dsk_entry
   973                                  		; 19/10/2022
   974 00000071 [D006]                  		dw strategy
   975 00000073 [1907]                  		dw dsk_entry
   976                                  
   977                                  ; maximum number of drives
   978                                  
   979 00000075 04                      drvmax:		db 4			
   980 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed		
   981 00000077 00                      fhave96:	db 0			; flag to indicate presence of
   982                                  					; 96tpi support		
   983 00000078 00                      single:		db 0			; used to detect single drive systems		
   984 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
   985                                  					; used by console driver.			
   986 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
   987                                  					; drive. (examined by checksingle).
   988                                  		
   989 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"	
   990 0000007D 7000                    		dw 70h
   991 0000007F 0080                    		dw 8000h
   992 00000081 [D006]                  		dw strategy
   993 00000083 [FC06]                  		dw aux0_entry
   994 00000085 434F4D3120202020        aCom1:		db 'COM1    '
   995 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1	
   996 0000008F 7000                    		dw 70h
   997 00000091 C0A0                    		dw 0A0C0h
   998 00000093 [D006]                  		dw strategy
   999 00000095 [E706]                  		dw prn1_entry
  1000 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
  1001 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2	
  1002 000000A1 7000                    		dw 70h
  1003 000000A3 C0A0                    		dw 0A0C0h
  1004 000000A5 [D006]                  		dw strategy
  1005 000000A7 [EE06]                  		dw prn2_entry
  1006 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
  1006 000000B2 0000               
  1007                                  
  1008                                  ;M058; Start of changes
  1009                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  1010                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  1011                                  ;cannot change for them to work. Even ProComm does this.
  1012                                  
  1013 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h		
  1014                                  
  1015 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  1016 000000BA 7000                    		dw 70h
  1017 000000BC C0A0                    		dw 0A0C0h
  1018 000000BE [D006]                  		dw strategy
  1019 000000C0 [F506]                  		dw prn3_entry
  1020 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  1021 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  1022 000000CC 7000                    		dw 70h
  1023 000000CE 0080                    		dw 8000h
  1024 000000D0 [D006]                  		dw strategy
  1025 000000D2 [0207]                  		dw aux1_entry
  1026                                  		; 19/10/2022
  1027 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  1028                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  1029 000000DC [EE00]                  		dw com4dev
  1030 000000DE 7000                    		dw 70h
  1031 000000E0 0080                    		dw 8000h
  1032                                  		;dw offset strategy
  1033                                  		;dw offset aux2_entry
  1034 000000E2 [D006]                  		dw strategy
  1035 000000E4 [0807]                  		dw aux2_entry	
  1036 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  1037 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"	
  1038 000000F0 7000                    		dw 70h
  1039 000000F2 0080                    		dw 8000h
  1040 000000F4 [D006]                  		dw strategy
  1041 000000F6 [0E07]                  		dw aux3_entry
  1042 000000F8 434F4D3420202020        		db 'COM4    '
  1043                                  
  1044                                  ;-----------------------------------------------------------------------------
  1045                                  
  1046 00000100 10                      RomVectors:	db 10h			
  1047 00000101 00000000                Old10:		dd 0
  1048 00000105 13                      		db 13h
  1049 00000106 00000000                Old13:		dd 0			
  1050 0000010A 15                      		db 15h
  1051 0000010B 00000000                Old15:		dd 0			
  1052 0000010F 19                      		db 19h
  1053 00000110 00000000                Old19:		dd 0
  1054 00000114 1B                      		db 1Bh
  1055 00000115 00000000                Old1B:		dd 0
  1056                                  
  1057                                  ;EndRomVectors	equ $
  1058                                  
  1059                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  1060                                  
  1061                                  ;-----------------------------------------------------------------------------
  1062                                  
  1063 00000119 [4E03]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  1064 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  1065                                  
  1066                                  ; (MSDOS 3.3) NOTE:
  1067                                  ; Some floppy drives do not have changeline support. The result is a
  1068                                  ; large amount of inefficiency in the code. A media-check always returns
  1069                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  1070                                  ; always discard any cached data.
  1071                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  1072                                  ; The following three items are used to do this. The logical door latch is
  1073                                  ; based on the premise that it is not physically possible to change floppy
  1074                                  ; disks in a drive in under two seconds (most people take about 10). The
  1075                                  ; logical door latch is implemented by saving the time of the last successful
  1076                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  1077                                  ; current time is compared to the saved time. If less than two seconds have
  1078                                  ; passed then the value "No Change" is returned. If more than two seconds
  1079                                  ; have passed the value "Don't Know" is returned.
  1080                                  ;    There is one complecation to this algorithm. Some programs change the
  1081                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  1082                                  ; This possibility is detected by counting the number of disk operations
  1083                                  ; which occur without any time passing. If this count exceeds the value of
  1084                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  1085                                  ; Know". The variable "AccessCount" is used to keep track of the number
  1086                                  ; of disk operation which occur without the time changing.
  1087                                  
  1088 0000011D 00                      accesscount:	db 0			
  1089 0000011E FF                      tim_drv:	db 0FFh			
  1090 0000011F 00                      medbyt:		db 0
  1091                                  wrtverify:	; 15/10/2022			
  1092 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  1093 00000121 00                      verify:		db 0			; 1 if verify after write
  1094 00000122 0000                    seccnt:		dw 0			
  1095 00000124 00                      		db 0			; -- pad where hardnum was
  1096 00000125 01                      dsktnum:	db 1			; number of diskette drives			
  1097                                  
  1098                                  ; (MSDOS 3.3) NOTE:
  1099                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  1100                                  ; have to be made to read the diskette. Consequently a large head settle
  1101                                  ; time was always used in the I/O operations. To get around this problem
  1102                                  ; we need to continually adjust the head settle time. The following
  1103                                  ; algorithm is used:
  1104                                  ;
  1105                                  ;   Get the current head settle value.
  1106                                  ;   If it is 1, then
  1107                                  ;	set slow = 15
  1108                                  ;   else
  1109                                  ;	set slow = value
  1110                                  ;   ...
  1111                                  ;   if we are seeking and writing then
  1112                                  ;	use slow
  1113                                  ;   else
  1114                                  ;	use fast
  1115                                  ;   ...
  1116                                  ;   restore current head settle value
  1117                                  
  1118 00000126 00                      motorstartup:	db 0			; value from table
  1119 00000127 00                      settlecurrent:	db 0			; value from table
  1120 00000128 00                      settleslow:	db 0			; slow settle value
  1121 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  1122 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  1123 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  1124 0000012C 09                      eot:		db 9			
  1125 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table
  1126 00000131 00                      cursec:		db 0			; current sector
  1127 00000132 00                      curhd:		db 0			; current head
  1128 00000133 0000                    curtrk:		dw 0			; current track
  1129 00000135 0000                    spsav:		dw 0			; save the stack pointer
  1130 00000137 08                      formt_eot:	db 8			; eot used for format
  1131 00000138 00                      hdnum:		db 0			; head number
  1132 00000139 0000                    trknum:		dw 0			; track	being manipulated
  1133 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  1134                                  
  1135                                  ;-----------------------------------------------------------------------------
  1136                                  
  1137                                  ; disk errors returned from the IBM rom
  1138                                  
  1139 0000013C CC                      errin:		db 0CCh			; write	fault error
  1140 0000013D 80                      		db 80h			; no response
  1141 0000013E 40                      		db 40h			; seek failure
  1142 0000013F 10                      		db 10h			; bad crc
  1143 00000140 08                      		db 8			; dma overrun
  1144 00000141 06                      		db 6			; media	change
  1145 00000142 04                      		db 4			; sector not found
  1146 00000143 03                      		db 3			; write	attempt	to write-protect disk
  1147 00000144 00                      lsterr:		db 0			; all other errors
  1148                                  
  1149                                  ; returned error codes corresponding to above
  1150                                  
  1151 00000145 0A                      errout:		db 10			; write	fault error
  1152 00000146 02                      		db 2			; no response
  1153 00000147 06                      		db 6			; seek failure
  1154 00000148 04                      		db 4			; bad crc
  1155 00000149 04                      		db 4			; dma overrun
  1156 0000014A 0F                      		db 15			; invalid media	change
  1157 0000014B 08                      		db 8			; sector not found
  1158 0000014C 00                      		db 0			; write	attempt	to write-protect disk
  1159 0000014D 0C                      		db 12			; general error
  1160                                  
  1161                                  ;-----------------------------------------------------------------------------
  1162                                  
  1163                                  ; 30/12/2018 - Retro DOS v4.0
  1164                                  
  1165                                  ; read in boot sector here, read done in readboot.
  1166                                  ; also read sector for dma check for hard disk.
  1167                                  ;
  1168                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  1169                                  ; in them which causes the byte after the buffer to be trashed
  1170                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  1171                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  1172                                  ; makes that system more-or-less work.
  1173                                  
  1174                                  disksector:	;db 512 dup(0)		; read in boot sector here
  1175                                  		; 19/10/2022
  1176 0000014E 00<rep 200h>            		times 512 db 0
  1177                                  
  1178                                  ;-----------------------------------------------------------------------------
  1179                                  
  1180                                  ; 30/12/2018 - Retro DOS v4.0
  1181                                  ;-----------------------------------------------------------------------------
  1182                                  ; 25/05/2018 (04/04/2018)
  1183                                  ;*****************************************************************************
  1184                                  ;	"bds" contains information for each drive in the system.
  1185                                  ;	various values are patched whenever actions are performed.
  1186                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  1187                                  ;	the bpb has not been filled. link also set to -1 to signify end
  1188                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  1189                                  ;	that the parameters have not been set.
  1190                                  
  1191                                  bds1:		;dw offset bds2
  1192 0000034E [B203]                  		dw bds2	; 19/10/2022
  1193 00000350 7000                    		dw 70h			; dword	link to	next structure
  1194 00000352 00                      		db 0			; int 13h drive	number
  1195 00000353 00                      		db 0			; logical drive	letter
  1196 00000354 0002                    fdrive1:	dw 512			
  1197                                  					; physical sector size in bytes
  1198 00000356 FF                      		db 0FFh			; sectors/allocation unit
  1199 00000357 0100                    		dw 1			; reserved sectors for dos
  1200 00000359 02                      		db 2			; no of	file allocation	tables
  1201 0000035A 4000                    		dw 64			; number of root directory entries
  1202 0000035C 6801                    		dw 360			; number sectors (at 512 bytes each)
  1203 0000035E 00                      		db 0			; media	descriptor, initially 0
  1204 0000035F 0200                    		dw 2			; number of fat	sectors
  1205 00000361 0900                    		dw 9			; sector limit (sectors	per track)
  1206 00000363 0100                    		dw 1			; head limit (number of	heads -	1)
  1207 00000365 0000                    		dw 0			; hidden sector	count (low word)
  1208 00000367 0000                    		dw 0			; hidden sector	(high)
  1209 00000369 0000                    		dw 0			; number sectors (low)
  1210 0000036B 0000                    		dw 0			; number sectors (high)
  1211 0000036D 00                      		db 0			; true => large	fats
  1212 0000036E 0000                    		dw 0			; open ref. count
  1213 00000370 03                      		db 3			; form factor
  1214 00000371 2000                    		dw 20h			; various flags
  1215 00000373 2800                    		dw 40			; number of cylinders
  1216 00000375 0002                    recommended_bps: dw 512			; recommended bps for this drive
  1217 00000377 01                      		db 1
  1218 00000378 0100                    		dw 1
  1219 0000037A 02                      		db 2
  1220 0000037B E000                    		dw 224			; number of root directory entries
  1221 0000037D 6801                    		dw 360
  1222 0000037F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  1223 00000380 0200                    		dw 2
  1224 00000382 0900                    		dw 9
  1225 00000384 0200                    		dw 2
  1226 00000386 0000                    		dw 0
  1227 00000388 0000                    		dw 0
  1228 0000038A 0000                    		dw 0
  1229 0000038C 0000                    		dw 0
  1230                                  		;db 6 dup(0)
  1231 0000038E 00<rep 6h>              		times 6 db 0		; 19/10/2022
  1232 00000394 FF                      		db 0FFh			; last track accessed on this drive
  1233 00000395 FFFF                    		dw 0FFFFh		; keep these two contiguous (?)
  1234 00000397 FFFF                    		dw 0FFFFh
  1235 00000399 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  1235 000003A2 202000             
  1236 000003A5 00000000                		dd 0			; current volume serial	from boot record
  1237 000003A9 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  1238                                  ; ----
  1239                                  
  1240 000003B2 [1604]                  bds2:		dw bds3		
  1241 000003B4 7000                    		dw 70h
  1242 000003B6 00                      		db 0
  1243 000003B7 00                      		db 0
  1244 000003B8 0002                    fdrive2:	dw 512			
  1245 000003BA FF0100024000680100-     		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1245 000003C3 020009000100       
  1246 000003C9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1246 000003D2 00000320002800     
  1247 000003D9 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1247 000003E2 01F002000900       
  1248 000003E8 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1248 000003F1 00000000000000FF   
  1249 000003F9 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1249 00000402 4D                 
  1250 00000403 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1250 0000040C 00464154           
  1251 00000410 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1252                                  ; ----
  1253                                  
  1254 00000416 [7A04]                  bds3:		dw bds4		
  1255 00000418 7000                    		dw 70h
  1256 0000041A 00                      		db 0
  1257 0000041B 00                      		db 0
  1258 0000041C 0002                    fdrive3:	dw 512			
  1259 0000041E FF0100024000680100-     		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1259 00000427 020009000100       
  1260 0000042D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1260 00000436 00000320002800     
  1261 0000043D 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1261 00000446 01F002000900       
  1262 0000044C 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1262 00000455 00000000000000FF   
  1263 0000045D FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1263 00000466 4D                 
  1264 00000467 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1264 00000470 00464154           
  1265 00000474 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1266                                  ; ----
  1267                                  
  1268 0000047A FFFF                    bds4:		dw 0FFFFh		
  1269 0000047C 7000                    		dw 70h
  1270 0000047E 00                      		db 0
  1271 0000047F 00                      		db 0
  1272 00000480 0002                    fdrive4:	dw 512			
  1273 00000482 FF0100024000680100-     		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1273 0000048B 020009000100       
  1274 00000491 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1274 0000049A 00000320002800     
  1275 000004A1 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1275 000004AA 01F002000900       
  1276 000004B0 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1276 000004B9 00000000000000FF   
  1277 000004C1 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1277 000004CA 4D                 
  1278 000004CB 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1278 000004D4 00464154           
  1279 000004D8 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1280                                  
  1281                                  ;-----------------------------------------------------------------------------
  1282                                  
  1283 000004DE 03                      sm92:		db 3			; .spf			
  1284 000004DF 09                      		db 9			; .spt
  1285 000004E0 70                      		db 112	; 70h		; .cdire
  1286 000004E1 A005                    		dw 1440	; 2*9*80	; .csec
  1287 000004E3 02                      		db 2			; .spau
  1288 000004E4 02                      		db 2			; .chead
  1289                                  
  1290 000004E5 00                      keyrd_func:	db 0			
  1291 000004E6 01                      keysts_func:	db 1			
  1292 000004E7 00                      printdev:	db 0			; printer device index
  1293                                  
  1294                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  1295 000004E8 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  1296                                  
  1297 000004F0 0000                    daycnt:		dw 0			
  1298 000004F2 00                      t_switch:	db 0			; flag for updating daycnt
  1299 000004F3 00                      havecmosclock:	db 0			
  1300 000004F4 13                      base_century:	db 19			
  1301 000004F5 50                      base_year:	db 80			
  1302                                  
  1303 000004F6 1F                      month_tab:	db 31
  1304 000004F7 1C                      february:	db 28 ; 08/08/2023
  1305 000004F8 1F1E1F1E1F1F1E1F1E-     		db 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
  1305 00000501 1F                 
  1306                                  
  1307                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1308                                  %if 0  
  1309                                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  1310                                  		dw 70h ; 17/10/2022	
  1311                                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  1312                                  		dw 70h ; 17/10/2022
  1313                                  %endif
  1314 00000502 00                      set_id_flag:	db 0			; flag for getbp routine
  1315 00000503 464154313220202000      fat_12_id:	db 'FAT12   ',0         
  1316 0000050C 464154313620202000      fat_16_id:	db 'FAT16   ',0         
  1317 00000515 4E4F204E414D452020-     vol_no_name:	db 'NO NAME    ',0      
  1317 0000051E 202000             
  1318                                  
  1319 00000521 0000                    temp_h:		dw 0			; temporary for	32 bit calculation
  1320 00000523 0000                    start_sec_h:	dw 0			; starting sector number high word
  1321 00000525 0000                    saved_word:	dw 0			; tempory saving place for a word
  1322 00000527 0000                    multrk_flag:	dw 0			
  1323 00000529 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  1324 0000052A 0000                    vretry_cnt:	dw 0			
  1325 0000052C 0000                    soft_ecc_cnt:	dw 0			
  1326 0000052E 00                      multitrk_format_flag: db 0		; multi	track format request flag
  1327 0000052F 0000                    xfer_seg:	dw 0			; temp for transfer segment
  1328                                  
  1329                                  ; variables for msdioctl.asm module
  1330                                  
  1331                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  1332                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  1333                                  ;	n	bytes per sector
  1334                                  ;      ---	----------------
  1335                                  ;	0	      128
  1336                                  ;	1	      256
  1337                                  ;	2	      512
  1338                                  ;	3	     1024
  1339                                  
  1340                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  1341                                  ;					; we support (was 40 in dos 3.2)
  1342                                  
  1343 00000531 2400                    sectorspertrack: dw 36			
  1344 00000533 00000102                tracktable:	db 0, 0, 1, 2		
  1345 00000537 00000202                		db 0, 0, 2, 2
  1346 0000053B 00000302                		db 0, 0, 3, 2
  1347 0000053F 00000402                		db 0, 0, 4, 2
  1348 00000543 00000502                		db 0, 0, 5, 2
  1349 00000547 00000602                		db 0, 0, 6, 2
  1350 0000054B 00000702                		db 0, 0, 7, 2
  1351 0000054F 00000802                		db 0, 0, 8, 2
  1352 00000553 00000902                		db 0, 0, 9, 2
  1353 00000557 00000A02                		db 0, 0, 10, 2
  1354 0000055B 00000B02                		db 0, 0, 11, 2
  1355 0000055F 00000C02                		db 0, 0, 12, 2
  1356 00000563 00000D02                		db 0, 0, 13, 2
  1357 00000567 00000E02                		db 0, 0, 14, 2
  1358 0000056B 00000F02                		db 0, 0, 15, 2
  1359 0000056F 00001002                		db 0, 0, 16, 2
  1360 00000573 00001102                		db 0, 0, 17, 2
  1361 00000577 00001202                		db 0, 0, 18, 2
  1362 0000057B 00001302                		db 0, 0, 19, 2
  1363 0000057F 00001402                		db 0, 0, 20, 2
  1364 00000583 00001502                		db 0, 0, 21, 2
  1365 00000587 00001602                		db 0, 0, 22, 2
  1366 0000058B 00001702                		db 0, 0, 23, 2
  1367 0000058F 00001802                		db 0, 0, 24, 2
  1368 00000593 00001902                		db 0, 0, 25, 2
  1369 00000597 00001A02                		db 0, 0, 26, 2
  1370 0000059B 00001B02                		db 0, 0, 27, 2
  1371 0000059F 00001C02                		db 0, 0, 28, 2
  1372 000005A3 00001D02                		db 0, 0, 29, 2
  1373 000005A7 00001E02                		db 0, 0, 30, 2
  1374 000005AB 00001F02                		db 0, 0, 31, 2
  1375 000005AF 00002002                		db 0, 0, 32, 2
  1376 000005B3 00002102                		db 0, 0, 33, 2
  1377 000005B7 00002202                		db 0, 0, 34, 2
  1378 000005BB 00002302                		db 0, 0, 35, 2
  1379 000005BF 00002402                		db 0, 0, 36, 2
  1380 000005C3 00<rep 6Ch>             		times 108 db 0		; 19/10/2022
  1381                                  		;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  1382                                  					; times	((4*63)	- 144) db 0
  1383                                  
  1384                                  ;-----------------------------------------------------------------------------
  1385                                  
  1386                                  ; this is a real ugly place to put this
  1387                                  ; it should really go in the bds
  1388                                  
  1389 0000062F 00                      mediatype:	db 0			
  1390 00000630 00                      media_set_for_format: db 0		; 1 if we have done an int 13h set media
  1391                                  					; type for format call
  1392 00000631 00                      had_format_error: db 0			; 1 if the previous format operation
  1393                                  					; failed.
  1394                                  
  1395                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  1396                                  ; the one passed by "new roms" before we perform a format operation. the old
  1397                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  1398                                  ; this table does not contain the previously saved dpt.
  1399                                  		
  1400 00000632 FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  1401 00000636 FF                      model_byte:	db 0FFh			; model	byte set at init time
  1402 00000637 00                      secondary_model_byte: db 0
  1403                                  		
  1404 00000638 00                      int19sem:	db 0			; indicate that all int 19h
  1405                                  					; initialization is complete
  1406                                  		
  1407                                  ;; we assume the following remain contiguous and their order doesn't change
  1408                                  ;i19_lst:
  1409                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  1410                                  ;	public	int19old&aa
  1411                                  ;		db	aa&h	; store the number as a byte
  1412                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  1413                                  ;	endm
  1414                                  
  1415                                  ; 21/10/2022
  1416                                  
  1417 00000639 02                      i19_lst:	db 2			
  1418                                  					; Int19old&aa
  1419 0000063A FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  1420 0000063E 08                      		db 8
  1421 0000063F FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  1422 00000643 09                      		db 9
  1423 00000644 FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  1424 00000648 0A                      		db 0Ah
  1425 00000649 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  1426 0000064D 0B                      		db 0Bh
  1427 0000064E FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  1428 00000652 0C                      		db 0Ch
  1429 00000653 FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  1430 00000657 0D                      		db 0Dh
  1431 00000658 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  1432 0000065C 0E                      		db 0Eh
  1433 0000065D FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  1434 00000661 70                      		db 70h
  1435 00000662 FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  1436 00000666 72                      		db 72h
  1437 00000667 FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  1438 0000066B 73                      		db 73h
  1439 0000066C FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  1440 00000670 74                      		db 74h
  1441 00000671 FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  1442 00000675 76                      		db 76h
  1443 00000676 FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  1444 0000067A 77                      		db 77h
  1445 0000067B FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  1446                                  
  1447                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  1448                                  
  1449                                  ;-----------------------------------------------------------------------------
  1450                                  
  1451 0000067F [5403]                  dskdrvs:	dw fdrive1	
  1452 00000681 [B803]                  		dw fdrive2
  1453 00000683 [1C04]                  		dw fdrive3
  1454 00000685 [8004]                  		dw fdrive4
  1455                                  
  1456                                  ;M011 -- made all hard drive stuff variable
  1457                                  		;dw 22 dup(0)		; up to	26 drives for mini disks
  1458 00000687 0000<rep 16h>           		times 22 dw 0	; 19/10/2022
  1459                                  
  1460                                  ;-----------------------------------------------------------------------------
  1461                                  
  1462                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  1463                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  1464                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  1465                                  
  1466                                  ;variables for dynamic relocatable modules
  1467                                  ;these should be stay resident.
  1468                                  
  1469 000006B3 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  1470                                  					; for p12 machine
  1471                                  
  1472                                  ; data structures for real-time date and time
  1473                                  			
  1474 000006B7 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  1475                                  
  1476                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1477                                  %if 0
  1478                                  month_table:	dw 0			; january
  1479                                  		dw 31			; february
  1480                                  		dw 59
  1481                                  		dw 90
  1482                                  		dw 120
  1483                                  		dw 151
  1484                                  		dw 181
  1485                                  		dw 212
  1486                                  		dw 243
  1487                                  		dw 273
  1488                                  		dw 304
  1489                                  		dw 334			; december
  1490                                  %endif
  1491                                  
  1492 000006BB 0000                    daycnt2:	dw 0			
  1493                                  ; 08/08/2023
  1494                                  ;feb29:		db 0			; february 29 in a leap	year flag
  1495                                  
  1496                                  ;-----------------------------------------------------------------------------
  1497                                  ;
  1498                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  1499                                  ; by Erdogan Tan (Istanbul) ! free source code !
  1500                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  1501                                  
  1502                                  ; ----------------------------------------------------------------------------
  1503                                  
  1504                                  ;************************************************************************
  1505                                  ;*									*
  1506                                  ;*	Entry points into Bios_Code routines. The segment values	*
  1507                                  ;*	  are plugged in by seg_reinit.					*
  1508                                  ;*									*
  1509                                  ;************************************************************************
  1510                                  
  1511                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  1512                                  ; BIOSCODE_SEGMENT equ 2C7h
  1513                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  1514                                  
  1515                                  ; 01/10/2022 - Erdogan Tan
  1516                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  1517                                  ;  addresses, they will be changed to table labels later)
  1518                                  
  1519                                  ; 09/12/2022
  1520                                  %if 0
  1521                                  cdev:		dw 43h,	2C7h		; chardev_entry
  1522                                  					; at 2C7h:43h =	70h:25B3h
  1523                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  1524                                  					; at 2C7h:396h = 70h:2906h
  1525                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  1526                                  					; at 2C7h:1302h	= 70h:3872h
  1527                                  i13x:		dw 154Bh, 2C7h		; i13z
  1528                                  					; at 2C7h:154Bh	= 70h:3ABBh
  1529                                  %endif
  1530                                  
  1531                                  ; 09/12/2022
  1532 000006BD [4700]8602              cdev:		dw chardev_entry, IOSYSCODESEG
  1533 000006C1 [8D03]8602              ttticks:	dw time_to_ticks, IOSYSCODESEG
  1534                                  ; 07/08/2023
  1535                                  ;bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  1536 000006C5 [9415]8602              i13x:		dw i13z, IOSYSCODESEG
  1537                                  
  1538                                  end_BC_entries:	; 15/10/2022
  1539                                  
  1540                                  ;************************************************************************
  1541                                  ;*									*
  1542                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  1543                                  ;*									*
  1544                                  ;************************************************************************
  1545                                  
  1546                                  cbreak:					
  1547 000006C9 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  1548                                  					; indicate break key set
  1549                                  intret:					
  1550 000006CF CF                      		iret
  1551                                  
  1552                                  ; =============== S U B	R O U T	I N E ========================================
  1553                                  
  1554                                  
  1555                                  ;************************************************************************
  1556                                  ;*									*
  1557                                  ;*	strategy - store es:bx (device driver request packet)		*
  1558                                  ;*		     away at [ptrsav] for next driver function call	*
  1559                                  ;*									*
  1560                                  ;************************************************************************
  1561                                  
  1562                                  strategy:	; proc far		
  1563 000006D0 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  1564                                  					; away at [ptrsav] for next driver function call
  1565 000006D5 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  1566 000006DA CB                      		retf
  1567                                  
  1568                                  ; ----------------------------------------------------------------------------
  1569                                  
  1570                                  ;************************************************************************
  1571                                  ;*									*
  1572                                  ;*	device driver entry points. these are the initial		*
  1573                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  1574                                  ;*	  in the case of our resident drivers, they'll just		*
  1575                                  ;*	  stick a fake return address on the stack which		*
  1576                                  ;*	  points to dispatch tables and possibly some unit		*
  1577                                  ;*	  numbers, and then call through a common entry point		*
  1578                                  ;*	  which can take care of a20 switching				*
  1579                                  ;*									*
  1580                                  ;************************************************************************
  1581                                  
  1582                                  ; 01/10/2022 - Erdogan Tan
  1583                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  1584                                  ;  addresses, they will be changed to table labels later)
  1585                                  
  1586                                  ; 09/12/2022
  1587                                  
  1588                                  con_entry:				
  1589 000006DB E84000                  		call	cdev_entry
  1590                                  ; ----------------------------------------------------------------------------
  1591                                  		;dw 0E4h		; con_table
  1592 000006DE [E700]                  		dw con_table	
  1593                                  					; 2C7h:0E4h = 70h:2654h
  1594                                  ; ----------------------------------------------------------------------------
  1595                                  
  1596                                  prn0_entry:				
  1597 000006E0 E83B00                  		call	cdev_entry
  1598                                  ; ----------------------------------------------------------------------------
  1599                                  		;dw 0FBh		; prn_table
  1600 000006E3 [FE00]                  		dw prn_table
  1601                                  					; 2C7h:0FBh = 70h:266Bh
  1602 000006E5 0000                    		db 0, 0
  1603                                  ; ----------------------------------------------------------------------------
  1604                                  
  1605                                  prn1_entry:				
  1606 000006E7 E83400                  		call	cdev_entry
  1607                                  ; ----------------------------------------------------------------------------
  1608                                  		;dw 0FBh		; prn_table
  1609 000006EA [FE00]                  		dw prn_table
  1610                                  					; 2C7h:0FBh = 70h:266Bh
  1611 000006EC 0001                    		db 0, 1
  1612                                  ; ----------------------------------------------------------------------------
  1613                                  
  1614                                  prn2_entry:				
  1615 000006EE E82D00                  		call	cdev_entry
  1616                                  ; ----------------------------------------------------------------------------
  1617                                  		;dw 0FBh		; prn_table
  1618 000006F1 [FE00]                  		dw prn_table
  1619                                  					; 2C7h:0FBh = 70h:266Bh
  1620 000006F3 0102                    		db 1, 2
  1621                                  ; ----------------------------------------------------------------------------
  1622                                  
  1623                                  prn3_entry:				
  1624 000006F5 E82600                  		call	cdev_entry
  1625                                  ; ----------------------------------------------------------------------------
  1626                                  		;dw 0FBh		; prn_table
  1627 000006F8 [FE00]                  		dw prn_table
  1628                                  					; 2C7h:0FBh = 70h:266Bh
  1629 000006FA 0203                    		db 2, 3
  1630                                  ; ----------------------------------------------------------------------------
  1631                                  
  1632                                  aux0_entry:				
  1633 000006FC E81F00                  		call	cdev_entry
  1634                                  ; ----------------------------------------------------------------------------
  1635                                  		;dw 130h		; aux_table
  1636 000006FF [3301]                  		dw aux_table
  1637                                  					; 2C7h:130h = 70h:26A0h
  1638 00000701 00                      		db 0
  1639                                  ; ----------------------------------------------------------------------------
  1640                                  
  1641                                  aux1_entry:				
  1642 00000702 E81900                  		call	cdev_entry
  1643                                  ; ----------------------------------------------------------------------------
  1644                                  		;dw 130h		; aux_table
  1645 00000705 [3301]                  		dw aux_table
  1646                                  					; 2C7h:130h = 70h:26A0h
  1647 00000707 01                      		db 1
  1648                                  ; ----------------------------------------------------------------------------
  1649                                  
  1650                                  aux2_entry:				
  1651 00000708 E81300                  		call	cdev_entry
  1652                                  ; ----------------------------------------------------------------------------
  1653                                  		;dw 130h		; aux_table
  1654 0000070B [3301]                  		dw aux_table
  1655                                  					; 2C7h:130h = 70h:26A0h
  1656 0000070D 02                      		db 2
  1657                                  ; ----------------------------------------------------------------------------
  1658                                  
  1659                                  aux3_entry:				
  1660 0000070E E80D00                  		call	cdev_entry
  1661                                  ; ----------------------------------------------------------------------------
  1662                                  		;dw 130h		; aux_table
  1663 00000711 [3301]                  		dw aux_table
  1664                                  					; 2C7h:130h = 70h:26A0h
  1665 00000713 03                      		db 3
  1666                                  ; ----------------------------------------------------------------------------
  1667                                  
  1668                                  tim_entry:				
  1669 00000714 E80700                  		call	cdev_entry
  1670                                  ; ----------------------------------------------------------------------------
  1671                                  		;dw 147h		; tim_table
  1672 00000717 [4A01]                  		dw tim_table
  1673                                  					; 2C7h:147h = 70h:26B7h
  1674                                  ; ----------------------------------------------------------------------------
  1675                                  
  1676                                  ; 15/10/2022
  1677                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  1678                                  ; 09/12/2022
  1679                                  DSKTBL equ dsktbl
  1680                                  
  1681                                  dsk_entry:				
  1682 00000719 E80200                  		call	cdev_entry
  1683                                  ; ----------------------------------------------------------------------------
  1684                                  		;dw 4A2h		; dsktbl
  1685 0000071C [3B05]                  		dw DSKTBL		; 09/12/2022
  1686                                  					; 2C7h:4A2h = 70h:2A12h
  1687                                  
  1688                                  ; =============== S U B	R O U T	I N E ========================================
  1689                                  
  1690                                  ;************************************************************************
  1691                                  ;*									*
  1692                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  1693                                  ;*	This code assumes that if Segment of Device request packet is	*
  1694                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  1695                                  ;*	A20 is already on.						*
  1696                                  ;*									*
  1697                                  ;************************************************************************
  1698                                  
  1699                                  cdev_entry:	; proc near		
  1700 0000071E 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1701 00000724 740D                    		jz	short ce_enter_codeseg
  1702                                  				; optimized for DOS in HMA
  1703 00000726 50                      		push	ax
  1704 00000727 2EA1[0300]              		mov	ax, [cs:DosDataSg]
  1705 0000072B 2E3906[1400]            		cmp	[cs:ptrsav+2], ax
  1706 00000730 58                      		pop	ax
  1707 00000731 7505                    		jnz	short not_from_dos
  1708                                  				; jump is coded this way to fall thru
  1709                                  				; in 99.99% of the cases
  1710                                  ce_enter_codeseg:
  1711 00000733 2EFF2E[BD06]            		jmp	far [cs:cdev]			
  1712                                  		;jmp	dword ptr cs:cdev
  1713                                  ;-----------------------------------------------------------------------------
  1714                                  
  1715                                  not_from_dos:				
  1716 00000738 E85500                  		call	EnsureA20On
  1717 0000073B EBF6                    		jmp	short ce_enter_codeseg
  1718                                  
  1719                                  ;************************************************************************
  1720                                  ;*									*
  1721                                  ;*	outchr - this is our int 29h handler. it writes the		*
  1722                                  ;*	   character in al on the display using int 10h ttywrite	*
  1723                                  ;*									*
  1724                                  ;************************************************************************
  1725                                  
  1726                                  outchr:					
  1727 0000073D 50                      		push	ax		; int 29h handler
  1728 0000073E 56                      		push	si
  1729 0000073F 57                      		push	di
  1730 00000740 55                      		push	bp
  1731 00000741 53                      		push	bx
  1732 00000742 B40E                    		mov	ah, 0Eh
  1733 00000744 BB0700                  		mov	bx, 7
  1734 00000747 CD10                    		int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  1735                                  					; AL = character, BH = display page (alpha modes)
  1736                                  					; BL = foreground color	(graphics modes)
  1737 00000749 5B                      		pop	bx
  1738 0000074A 5D                      		pop	bp
  1739 0000074B 5F                      		pop	di
  1740 0000074C 5E                      		pop	si
  1741 0000074D 58                      		pop	ax
  1742 0000074E CF                      		iret
  1743                                  ;-----------------------------------------------------------------------------
  1744                                  
  1745                                  ;************************************************************************
  1746                                  ;*									*
  1747                                  ;*	block13 - our int13 hooker					*
  1748                                  ;*									*
  1749                                  ;************************************************************************
  1750                                  
  1751                                  block13:				
  1752 0000074F 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1753 00000755 7408                    		jz	short skipa20
  1754 00000757 E84700                  		call	IsA20Off	; A20 Off?
  1755 0000075A 7503                    		jnz	short skipa20
  1756 0000075C E83600                  		call	EnableA20	; assure a20 enabled
  1757                                  
  1758                                  skipa20:				
  1759 0000075F 2E8C1E[1C00]            		mov	[cs:i13_ds], ds	; save caller's ds for call-through
  1760 00000764 9C                      		pushf			; fake interrupt
  1761 00000765 2EFF1E[C506]            		call	far [cs:i13x]
  1762                                  		;call	dword ptr cs:i13x
  1763                                  					; call through Bios_Code entry table
  1764 0000076A 2E8E1E[1C00]            		mov	ds, [cs:i13_ds]
  1765 0000076F CA0200                  		retf	2
  1766                                  
  1767                                  ; =============== S U B	R O U T	I N E =======================================
  1768                                  
  1769                                  ; the int13 hook calls back here to call-through to the ROM
  1770                                  ; this is necessary because some people have extended their
  1771                                  ; ROM BIOSs to use ds as a parameter/result register and
  1772                                  ; our int13 hook relies heavily on ds to access Bios_Data
  1773                                  
  1774                                  call_orig13:	; proc far		
  1775 00000772 8E1E[1C00]              		mov	ds, [i13_ds]	; get caller's ds register
  1776 00000776 9C                      		pushf			; simulate an int13
  1777 00000777 2EFF1E[B400]            		call	far [cs:Orig13]
  1778                                  		;call	cs:Orig13
  1779 0000077C 2E8C1E[1C00]            		mov	[cs:i13_ds], ds
  1780 00000781 0E                      		push	cs
  1781 00000782 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  1782                                  
  1783 00000783 9C                      		pushf
  1784                                  		; 10/12/2022
  1785                                  		; ds = cs
  1786 00000784 803E[0D00]00            		cmp	byte [inHMA], 0	; 16/10/2022
  1787                                  		;cmp	byte [cs:inHMA], 0
  1788 00000789 7403                    		jz	short corig13_popf_retf
  1789                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1790                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0725h	
  1791                                  		;call	IsA20Off
  1792                                  		;jnz	short corig13_popf_retf
  1793                                  		;call	EnableA20
  1794 0000078B E80200                  		call	EnsureA20On ; 07/08/2023
  1795                                  corig13_popf_retf:			
  1796 0000078E 9D                      		popf
  1797                                  re_init:	; 07/08/2023
  1798 0000078F CB                      		retf
  1799                                  
  1800                                  ;-----------------------------------------------------------------------------
  1801                                  
  1802                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  1803                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  1804                                  
  1805                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1806                                  ;HiMem:		dd 0FFFF0090h		
  1807                                  ;LoMem:		dd 80h
  1808                                  
  1809                                  ; ----------------------------------------------------------------------------			
  1810                                  
  1811                                  ; =============== S U B	R O U T	I N E ========================================
  1812                                  
  1813                                  
  1814                                  ;************************************************************************
  1815                                  ;*									*
  1816                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  1817                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  1818                                  ;*									*
  1819                                  ;************************************************************************
  1820                                  
  1821                                  EnsureA20On:	; proc near		
  1822 00000790 E80E00                  		call	IsA20Off
  1823                                  		;jz	short EnableA20
  1824                                  		;retn
  1825                                  		; 18/12/2022
  1826 00000793 750B                    		jnz	short A20On_retn	
  1827                                  
  1828                                  ; =============== S U B	R O U T	I N E ========================================
  1829                                  
  1830                                  
  1831                                  EnableA20:	; proc near		
  1832 00000795 50                      		push	ax
  1833 00000796 53                      		push	bx
  1834 00000797 B405                    		mov	ah, 5	 ; local enable a20
  1835                                  		;call	cs:xms
  1836 00000799 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  1837 0000079E 5B                      		pop	bx
  1838 0000079F 58                      		pop	ax
  1839                                  A20On_retn:	; 18/12/2022	
  1840 000007A0 C3                      		retn
  1841                                  
  1842                                  ; =============== S U B	R O U T	I N E ========================================
  1843                                  
  1844                                  
  1845                                  IsA20Off:	; proc near		
  1846 000007A1 1E                      		push	ds
  1847 000007A2 06                      		push	es
  1848 000007A3 51                      		push	cx
  1849 000007A4 56                      		push	si
  1850 000007A5 57                      		push	di
  1851                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1852                                  		;lds	si, [cs:HiMem]
  1853                                  		;les	di, [cs:LoMem]
  1854                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0740h
  1855 000007A6 31FF                    		xor	di, di
  1856 000007A8 8EC7                    		mov	es, di
  1857 000007AA 4F                      		dec	di
  1858 000007AB BE9000                  		mov	si, 90h	; 0FFFFh:0090h ; HiMem
  1859 000007AE 8EDF                    		mov	ds, di
  1860 000007B0 BF8000                  		mov	di, 80h ; 0000h:0080h ; LoMem
  1861 000007B3 B90800                  		mov	cx, 8
  1862 000007B6 F3A7                    		repe cmpsw
  1863                                  				; zf = 0 -> A20 line is ON
  1864                                  				; zf = 1 -> A20 line is OFF
  1865 000007B8 5F                      		pop	di
  1866 000007B9 5E                      		pop	si
  1867 000007BA 59                      		pop	cx
  1868 000007BB 07                      		pop	es
  1869 000007BC 1F                      		pop	ds
  1870 000007BD C3                      		retn
  1871                                  
  1872                                  ; ----------------------------------------------------------------------------
  1873                                  
  1874                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1875                                  %if 0
  1876                                  DisableA20:
  1877                                  		push	ax
  1878                                  		push	bx
  1879                                  		mov	ah, 6		; local disable A20
  1880                                  		call	far [cs:xms]
  1881                                  		;call	cs:xms
  1882                                  		pop	bx
  1883                                  		pop	ax
  1884                                  		retn
  1885                                  %endif
  1886                                  
  1887                                  ; ----------------------------------------------------------------------------
  1888                                  
  1889                                  ;************************************************************************
  1890                                  ;*									*
  1891                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  1892                                  ;*	  interrupt vectors before resuming the original int19 code	*
  1893                                  ;*									*
  1894                                  ;************************************************************************
  1895                                  
  1896                                  int19:					
  1897 000007BE 0E                      		push	cs
  1898 000007BF 1F                      		pop	ds
  1899                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1900                                  		;mov	es, [zeroseg]	; 16/10/2022
  1901                                  		;mov	cx, 5		; NUMROMVECTORS
  1902 000007C0 31C9                    		xor	cx, cx
  1903 000007C2 8EC1                    		mov	es, cx
  1904 000007C4 B105                    		mov	cl, 5
  1905                                  		;mov	si, offset RomVectors
  1906 000007C6 BE[0001]                		mov	si, RomVectors	; 19/10/2022
  1907                                  next_int:				
  1908 000007C9 AC                      		lodsb			; get int number
  1909 000007CA 98                      		cbw			; assume < 128
  1910 000007CB D1E0                    		shl	ax, 1
  1911 000007CD D1E0                    		shl	ax, 1		; int *	4
  1912                                  		; 07/08/2023
  1913                                  		;mov	di, ax
  1914                                  		;lodsw
  1915                                  		;stosw
  1916                                  		;lodsw
  1917                                  		;stosw			; install the saved vector
  1918                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:076Ah
  1919 000007CF 97                      		xchg	ax, di
  1920 000007D0 A5                      		movsw
  1921 000007D1 A5                      		movsw
  1922 000007D2 E2F5                    		loop	next_int
  1923                                  		;cmp	byte [int19sem], 0 ; 19/10/2022
  1924 000007D4 380E[3806]              		cmp	[int19sem], cl ; 0 ; 07/08/2023
  1925 000007D8 7419                    		jz	short doint19
  1926 000007DA BE[3906]                		mov	si, i19_lst	; stacks code has changed these hardware interrupt vectors
  1927                                  					; stkinit in sysinit1 will initialize int19oldxx values
  1928                                  		;mov	cx, 14		; num_i19
  1929                                  		; 07/08/2023
  1930 000007DD B10E                    		mov	cl, 14	
  1931                                  i19_restore_loop:			
  1932 000007DF AC                      		lodsb			; get interrupt	number
  1933 000007E0 98                      		cbw			; assume < 128
  1934                                  		;mov	di, ax
  1935                                  		;lodsw			; get original vector offset
  1936                                  		;mov	bx, ax		; save it
  1937                                  		;lodsw
  1938                                  		; 07/08/2023
  1939 000007E1 97                      		xchg	ax, di
  1940 000007E2 AD                      		lodsw
  1941 000007E3 93                      		xchg	ax, bx
  1942 000007E4 AD                      		lodsw
  1943                                  		;cmp	bx, 0FFFFh	; check	for 0ffffh (unlikely segment)
  1944 000007E5 43                      		inc	bx ; 07/08/2023
  1945 000007E6 7409                    		jz	short i19_restor_1 ; opt no need to check selector too
  1946                                  		;cmp	ax, 0FFFFh	; opt 0ffffh is	unlikely offset
  1947                                  		;jz	short i19_restor_1
  1948 000007E8 4B                      		dec	bx ; 07/08/2023
  1949 000007E9 01FF                    		add	di, di
  1950 000007EB 01FF                    		add	di, di
  1951 000007ED 93                      		xchg	ax, bx
  1952 000007EE AB                      		stosw
  1953 000007EF 93                      		xchg	ax, bx
  1954 000007F0 AB                      		stosw			; put the vector back
  1955                                  
  1956                                  i19_restor_1:				
  1957 000007F1 E2EC                    		loop	i19_restore_loop
  1958                                  
  1959                                  doint19:				
  1960                                  		;cmp	byte [inHMA], 0	; ; Is dos running from	HMA
  1961 000007F3 380E[0D00]              		cmp	[inHMA], cl ; 0 ; 07/08/2023
  1962 000007F7 7403                    		jz	short SkipVDisk
  1963 000007F9 E82800                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  1964                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  1965                                  					; the memory above 1MB during a	warm boot.
  1966                                  SkipVDisk:				
  1967 000007FC CD19                    		int	19h		; DISK BOOT
  1968                                  					; causes reboot	of disk	system
  1969                                  
  1970                                  ; =============== S U B	R O U T	I N E ========================================
  1971                                  
  1972                                  ;-----------------------------------------------------------------------------
  1973                                  ;
  1974                                  ; procedure : int15
  1975                                  ;
  1976                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  1977                                  ;		If it recognizes ctrl-alt-del and if DOS was
  1978                                  ;		is running high, it Erases the VDISK header
  1979                                  ;		present at 1MB boundary
  1980                                  ;
  1981                                  ;-----------------------------------------------------------------------------
  1982                                  
  1983                                  ; 16/10/2022
  1984                                  ;DELKEY		equ	53h
  1985                                  ;ROMDATASEG	equ	40h
  1986                                  KBFLAG		equ	17h
  1987                                  ;CTRLSTATE	equ	04h
  1988                                  ;ALTSTATE	equ	08h
  1989                                  
  1990                                  Int15:		; proc near		
  1991                                  		;cmp	ax, 4F00h+DELKEY
  1992 000007FE 3D534F                  		cmp	ax, 4F53h	; del keystroke ?
  1993                                  		; 07/08/2023
  1994                                  		;jz	short int15_1
  1995                                  		;jmp	far [cs:Old15]	; 16/10/2022
  1996                                  		;;jmp	cs:Old15
  1997 00000801 751C                    		jnz	short Old15_j	; 07/08/2023 
  1998                                  ; ----------------------------------------------------------------------------
  1999                                  int15_1:				
  2000 00000803 1E                      		push	ds
  2001 00000804 50                      		push	ax
  2002                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2003                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07A5h
  2004                                  		;mov	ax, 40h		; ROMDATASEG
  2005                                  		;mov	ds, ax
  2006                                  		;;mov	al, ds:17h	; [KBFLAG]
  2007                                  		;; 16/10/2022
  2008                                  		;mov	al, [KBFLAG]
  2009 00000805 31C0                    		xor	ax, ax
  2010 00000807 8ED8                    		mov	ds, ax
  2011 00000809 A01704                  		mov	al, [0417h]	; KBFLAG = 0417h (PCDOS 7.1 IBMBIO.COM)
  2012 0000080C 240C                    		and	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  2013 0000080E 3C0C                    		cmp	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  2014 00000810 750A                    		jnz	short int15_2
  2015                                  		; 07/08/2023
  2016                                  		;push	cs
  2017                                  		;pop	ds
  2018                                  		;cmp	byte [inHMA], 0	; is DOS running from HMA
  2019 00000812 2E3826[0D00]            		cmp	byte [cs:inHMA], ah ; 0
  2020 00000817 7403                    		jz	short int15_2
  2021 00000819 E80800                  		call	EraseVDiskHead
  2022                                  int15_2:				
  2023 0000081C 58                      		pop	ax
  2024 0000081D 1F                      		pop	ds
  2025 0000081E F9                      		stc
  2026                                  Old15_j:		; 07/08/2023
  2027 0000081F 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  2028                                  		;jmp	cs:Old15
  2029                                  	
  2030                                  ; =============== S U B	R O U T	I N E ========================================
  2031                                  
  2032                                  ;-----------------------------------------------------------------------------
  2033                                  ;
  2034                                  ; procedure : EraseVDiskHead
  2035                                  ;
  2036                                  ;		Erases the VDisk Header present in the 1MB boundary
  2037                                  ;
  2038                                  ;-----------------------------------------------------------------------------
  2039                                  
  2040                                  EraseVDiskHead:	; proc near		
  2041                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2042                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07C1h
  2043                                  		;push	ax
  2044 00000824 51                      		push	cx
  2045 00000825 57                      		push	di
  2046 00000826 06                      		push	es
  2047 00000827 E866FF                  		call	EnsureA20On
  2048 0000082A B8FFFF                  		mov	ax, 0FFFFh	; HMA seg
  2049 0000082D 8EC0                    		mov	es, ax
  2050 0000082F BF1000                  		mov	di, 10h		; point	to VDISK header
  2051                                  		; 07/08/2023
  2052                                  		;mov	cx, 10h		; size of vdisk	header
  2053 00000832 89F9                    		mov	cx, di ; 16
  2054                                  		;xor	ax, ax
  2055 00000834 40                      		inc	ax ; ax = 0
  2056 00000835 F3AB                    		rep stosw		; clear	it
  2057 00000837 07                      		pop	es
  2058 00000838 5F                      		pop	di
  2059 00000839 59                      		pop	cx
  2060                                  		;pop	ax ; 07/08/2023	
  2061 0000083A C3                      		retn
  2062                                  
  2063                                  ; ----------------------------------------------------------------------------
  2064                                  
  2065                                  ;************************************************************************
  2066                                  ;*									*
  2067                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  2068                                  ;*	  it returns through one of the three functions that follow.	*
  2069                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  2070                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  2071                                  ;*									*
  2072                                  ;************************************************************************
  2073                                  
  2074                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2075                                  %if 0
  2076                                  int_2f:		
  2077                                  		jmp	far [cs:bcode_i2f] ; 16/10/2022			
  2078                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  2079                                  
  2080                                  ; ----------------------------------------------------------------------------
  2081                                  
  2082                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  2083                                  ; note:  is it really necessary to transiton out and then back in?
  2084                                  ;	 It's not as if this is a really speed critical function.
  2085                                  ;	 might as well do whatever's most compact.
  2086                                  
  2087                                  i2f_dskentry:				
  2088                                  		jmp	dsk_entry
  2089                                  
  2090                                  ; ----------------------------------------------------------------------------
  2091                                  
  2092                                  ;************************************************************************
  2093                                  ;*									*
  2094                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  2095                                  ;*		is done. presently does nothing. affects no		*
  2096                                  ;*		registers!						*
  2097                                  ;*									*
  2098                                  ;************************************************************************
  2099                                  
  2100                                  ; 09/12/2022
  2101                                  ; re_init_:
  2102                                  re_init:				; called back by sysinit after
  2103                                  		retf			; a bunch of stuff is done.
  2104                                  					; presently does nothing
  2105                                  %endif
  2106                                  
  2107                                  ; ----------------------------------------------------------------------------
  2108                                  
  2109                                  ;SR; WIN386 support
  2110                                  
  2111                                  ; WIN386 instance data structure
  2112                                  ;
  2113                                  ; Here is a Win386 startup info structure which we set up and to which
  2114                                  ; we return a pointer when Win386 initializes.
  2115                                  
  2116 0000083B 0300                    Win386_SI:	db 3, 0			; SI_Version
  2117                                  					; Startup Info for Win386
  2118 0000083D 00000000                SI_Next:	dd 0			; pointer to next info structure
  2119 00000841 00000000                		dd 0			; a field we don't need
  2120 00000845 00000000                		dd 0			; another field	we don't need
  2121 00000849 [4D08]                  SI_Instance:	dw Instance_Table
  2122 0000084B 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  2123                                  
  2124                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  2125                                  ; areas. Note that the address and size of the hardware stacks must
  2126                                  ; be calculated and inserted at boot time.
  2127                                  
  2128 0000084D 00005000                Instance_Table:	dw 0, 50h		; print	screen status...
  2129 00000851 0200                    		dw 2			; ... 2	bytes
  2130 00000853 0E005000                		dw 0Eh,	50h		; ROM Basic data...
  2131 00000857 1400                    		dw 14h			; ... 14H bytes
  2132 00000859 [0C00]                  		dw altah		; a con	device buffer...
  2133 0000085B 7000                    		dw 70h			; Bios_Data segment
  2134 0000085D 0100                    		dw 1			; ... 1 byte
  2135                                  
  2136                                  NextStack:
  2137                                  
  2138                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  2139                                  ;	instance items WILL NOT be filled in by SYSINIT.
  2140                                  ;	That's just fine as long as these are the last items
  2141                                  ;	in the instance list since the first item is initialized
  2142                                  ;	to 0000 at load time.
  2143                                  
  2144 0000085F 00000000                		dw 0, 0			; pointer to next stack	to be used...
  2145 00000863 0200                    		dw 2			; ... 2 bytes
  2146 00000865 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  2147 00000869 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  2148 0000086B 00000000                		dd 0			; terminate the	instance table
  2149                                  
  2150                                  					;SR;
  2151 0000086F 00                      IsWin386:	db 0			; Flag to indicate whether
  2152                                  					; Win386 is running or not
  2153                                  ;-----------------------------------------------------------------------------
  2154                                  
  2155                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  2156                                  ;when we call it including checking of A20. The code being only about 
  2157                                  ;30 bytes, we might as well put it in BIOS_DATA
  2158                                  
  2159                                  V86_Crit_SetFocus:			
  2160 00000870 57                      		push	di
  2161 00000871 06                      		push	es
  2162 00000872 53                      		push	bx
  2163 00000873 50                      		push	ax
  2164 00000874 31FF                    		xor	di, di
  2165 00000876 8EC7                    		mov	es, di
  2166 00000878 BB1500                  		mov	bx, 15h		; Device ID of DOSMGR device
  2167 0000087B B88416                  		mov	ax, 1684h	; Get API entry	point
  2168 0000087E CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  2169                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  2170                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  2171 00000880 8CC0                    		mov	ax, es
  2172 00000882 09F8                    		or	ax, di
  2173 00000884 740B                    		jz	short Skip	; Here,	es:di is address of API	routine.
  2174                                  					; Set up stack frame to	simulate a call.
  2175 00000886 0E                      		push	cs
  2176                                  		;mov	ax, offset Skip
  2177 00000887 B8[9108]                		mov	ax, Skip
  2178 0000088A 50                      		push	ax
  2179 0000088B 06                      		push	es
  2180 0000088C 57                      		push	di		; API far call address
  2181 0000088D B80100                  		mov	ax, 1		; SetFocus function number
  2182 00000890 CB                      		retf			; do the call
  2183                                  ;-----------------------------------------------------------------------------
  2184                                  
  2185                                  Skip:					
  2186 00000891 58                      		pop	ax
  2187 00000892 5B                      		pop	bx
  2188 00000893 07                      		pop	es
  2189 00000894 5F                      		pop	di
  2190 00000895 CB                      		retf
  2191                                  
  2192                                  ;End WIN386 support
  2193                                  
  2194                                  ; ----------------------------------------------------------------------------
  2195                                  
  2196                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2197                                  
  2198                                  ; 09/12/2022
  2199                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  2200                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  2201                                  ; (followings are in sysinit segment)
  2202                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  2203                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  2204                                  ;DEVICELIST	equ 273h
  2205                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  2206                                  ;MEMORYSIZE	equ 292h	
  2207                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  2208                                  ;DEFAULTDRIVE	equ 296h
  2209                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  2210                                  ;;currentdoslocation equ 271h
  2211                                  ;CURRENTDOSLOCATION equ 271h
  2212                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  2213                                  ;SYSINITSTART	equ 267h
  2214                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  2215                                  ; 18/10/2022
  2216                                  ;toomanydrivesflag equ 3FFh 
  2217                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  2218                                  
  2219                                  ; ----------------------------------------------------------------------------
  2220                                  
  2221 00000896 FFFF                    FreeHMAPtr:	dw 0FFFFh		
  2222                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2223                                  					; (procedure in	SYSINIT	segment)
  2224                                  ; 17/10/2022
  2225 00000898 [BD0A]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2226 0000089A 3104                    		dw SYSINITSEG		; 08/08/2023
  2227                                  					; 0544h for PCDOS 7.1 IBMBIO.COM	
  2228                                  					; 0473h for MSDOS 6.21 IO.SYS
  2229                                  ;SR;
  2230                                  ; A communication block has been setup between the DOS and the BIOS. All
  2231                                  ;the data starting from SysinitPresent will be part of the data block. 
  2232                                  ;Right now, this is the only data being communicated. It can be expanded 
  2233                                  ;later to add more stuff
  2234                                  
  2235 0000089C 00                      SysinitPresent:	db 0			
  2236 0000089D 0000                    endfloppy:	db 0, 0
  2237                                  
  2238                                  ; ----------------------------------------------------------------------------			
  2239                                  
  2240                                  ; Bios_Data ends
  2241                                  	
  2242                                  ; Possibly disposable BIOS data
  2243                                  ; This data follows the	regular	BIOS data,
  2244                                  ; and is part of the same group.
  2245                                  
  2246 0000089F 4E4F204E414D452020-     nul_vid:	db 'NO NAME    ',0      
  2246 000008A8 202000             
  2247                                  					; null volume id
  2248 000008AB 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    ',0      
  2248 000008B4 202000             
  2249                                  					; vid scratch buffer
  2250 000008B7 80                      harddrv:	db 80h			
  2251                                  
  2252                                  end96tpi:
  2253                                  
  2254                                  ;;*********************************************************************
  2255                                  ;;memory allocation for bdss
  2256                                  ;;*********************************************************************
  2257                                  ;
  2258                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  2259                                  ;
  2260                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  2261                                  ;
  2262                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  2263                                  
  2264 000008B8 FFFF                    bdss:		dw 0FFFFh		
  2265 000008BA 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2265 000008C3 0210000000F8       
  2266 000008C9 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2266 000008D2 000000000000000003 
  2267 000008DB 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2267 000008E4 00000000000000     
  2268 000008EB 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2268 000008F4 000000000000000000 
  2269 000008FD 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2269 00000906 4E414D45           
  2270 0000090A 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2270 00000913 46415431           
  2271 00000917 3220202000              		db 32h,	20h, 20h, 20h, 0
  2272 0000091C FFFF                    		dw 0FFFFh
  2273 0000091E 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2273 00000927 0210000000F8       
  2274 0000092D 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2274 00000936 000000000000000003 
  2275 0000093F 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2275 00000948 00000000000000     
  2276 0000094F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2276 00000958 000000000000000000 
  2277 00000961 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2277 0000096A 4E414D45           
  2278 0000096E 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2278 00000977 46415431           
  2279 0000097B 3220202000              		db 32h,	20h, 20h, 20h, 0
  2280 00000980 FFFF                    		dw 0FFFFh
  2281 00000982 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2281 0000098B 0210000000F8       
  2282 00000991 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2282 0000099A 000000000000000003 
  2283 000009A3 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2283 000009AC 00000000000000     
  2284 000009B3 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2284 000009BC 000000000000000000 
  2285 000009C5 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2285 000009CE 4E414D45           
  2286 000009D2 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2286 000009DB 46415431           
  2287 000009DF 3220202000              		db 32h,	20h, 20h, 20h, 0
  2288 000009E4 FFFF                    		dw 0FFFFh
  2289 000009E6 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2289 000009EF 0210000000F8       
  2290 000009F5 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2290 000009FE 000000000000000003 
  2291 00000A07 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2291 00000A10 00000000000000     
  2292 00000A17 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2292 00000A20 000000000000000000 
  2293 00000A29 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2293 00000A32 4E414D45           
  2294 00000A36 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2294 00000A3F 46415431           
  2295 00000A43 3220202000              		db 32h,	20h, 20h, 20h, 0
  2296 00000A48 FFFF                    		dw 0FFFFh
  2297 00000A4A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2297 00000A53 0210000000F8       
  2298 00000A59 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2298 00000A62 000000000000000003 
  2299 00000A6B 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2299 00000A74 00000000000000     
  2300 00000A7B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2300 00000A84 000000000000000000 
  2301 00000A8D 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2301 00000A96 4E414D45           
  2302 00000A9A 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2302 00000AA3 46415431           
  2303 00000AA7 3220202000              		db 32h,	20h, 20h, 20h, 0
  2304 00000AAC FFFF                    		dw 0FFFFh
  2305 00000AAE 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2305 00000AB7 0210000000F8       
  2306 00000ABD 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2306 00000AC6 000000000000000003 
  2307 00000ACF 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2307 00000AD8 00000000000000     
  2308 00000ADF 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2308 00000AE8 000000000000000000 
  2309 00000AF1 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2309 00000AFA 4E414D45           
  2310 00000AFE 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2310 00000B07 46415431           
  2311 00000B0B 3220202000              		db 32h,	20h, 20h, 20h, 0
  2312 00000B10 FFFF                    		dw 0FFFFh
  2313 00000B12 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2313 00000B1B 0210000000F8       
  2314 00000B21 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2314 00000B2A 000000000000000003 
  2315 00000B33 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2315 00000B3C 00000000000000     
  2316 00000B43 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2316 00000B4C 000000000000000000 
  2317 00000B55 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2317 00000B5E 4E414D45           
  2318 00000B62 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2318 00000B6B 46415431           
  2319 00000B6F 3220202000              		db 32h,	20h, 20h, 20h, 0
  2320 00000B74 FFFF                    		dw 0FFFFh
  2321 00000B76 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2321 00000B7F 0210000000F8       
  2322 00000B85 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2322 00000B8E 000000000000000003 
  2323 00000B97 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2323 00000BA0 00000000000000     
  2324 00000BA7 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2324 00000BB0 000000000000000000 
  2325 00000BB9 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2325 00000BC2 4E414D45           
  2326 00000BC6 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2326 00000BCF 46415431           
  2327 00000BD3 3220202000              		db 32h,	20h, 20h, 20h, 0
  2328 00000BD8 FFFF                    		dw 0FFFFh
  2329 00000BDA 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2329 00000BE3 0210000000F8       
  2330 00000BE9 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2330 00000BF2 000000000000000003 
  2331 00000BFB 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2331 00000C04 00000000000000     
  2332 00000C0B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2332 00000C14 000000000000000000 
  2333 00000C1D 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2333 00000C26 4E414D45           
  2334 00000C2A 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2334 00000C33 46415431           
  2335 00000C37 3220202000              		db 32h,	20h, 20h, 20h, 0
  2336 00000C3C FFFF                    		dw 0FFFFh
  2337 00000C3E 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2337 00000C47 0210000000F8       
  2338 00000C4D 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2338 00000C56 000000000000000003 
  2339 00000C5F 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2339 00000C68 00000000000000     
  2340 00000C6F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2340 00000C78 000000000000000000 
  2341 00000C81 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2341 00000C8A 4E414D45           
  2342 00000C8E 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2342 00000C97 46415431           
  2343 00000C9B 3220202000              		db 32h,	20h, 20h, 20h, 0
  2344 00000CA0 FFFF                    		dw 0FFFFh
  2345 00000CA2 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2345 00000CAB 0210000000F8       
  2346 00000CB1 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2346 00000CBA 000000000000000003 
  2347 00000CC3 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2347 00000CCC 00000000000000     
  2348 00000CD3 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2348 00000CDC 000000000000000000 
  2349 00000CE5 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2349 00000CEE 4E414D45           
  2350 00000CF2 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2350 00000CFB 46415431           
  2351 00000CFF 3220202000              		db 32h,	20h, 20h, 20h, 0
  2352 00000D04 FFFF                    		dw 0FFFFh
  2353 00000D06 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2353 00000D0F 0210000000F8       
  2354 00000D15 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2354 00000D1E 000000000000000003 
  2355 00000D27 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2355 00000D30 00000000000000     
  2356 00000D37 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2356 00000D40 000000000000000000 
  2357 00000D49 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2357 00000D52 4E414D45           
  2358 00000D56 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2358 00000D5F 46415431           
  2359 00000D63 3220202000              		db 32h,	20h, 20h, 20h, 0
  2360 00000D68 FFFF                    		dw 0FFFFh
  2361 00000D6A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2361 00000D73 0210000000F8       
  2362 00000D79 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2362 00000D82 000000000000000003 
  2363 00000D8B 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2363 00000D94 00000000000000     
  2364 00000D9B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2364 00000DA4 000000000000000000 
  2365 00000DAD 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2365 00000DB6 4E414D45           
  2366 00000DBA 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2366 00000DC3 46415431           
  2367 00000DC7 3220202000              		db 32h,	20h, 20h, 20h, 0
  2368 00000DCC FFFF                    		dw 0FFFFh
  2369 00000DCE 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2369 00000DD7 0210000000F8       
  2370 00000DDD 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2370 00000DE6 000000000000000003 
  2371 00000DEF 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2371 00000DF8 00000000000000     
  2372 00000DFF 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2372 00000E08 000000000000000000 
  2373 00000E11 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2373 00000E1A 4E414D45           
  2374 00000E1E 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2374 00000E27 46415431           
  2375 00000E2B 3220202000              		db 32h,	20h, 20h, 20h, 0
  2376 00000E30 FFFF                    		dw 0FFFFh
  2377 00000E32 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2377 00000E3B 0210000000F8       
  2378 00000E41 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2378 00000E4A 000000000000000003 
  2379 00000E53 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2379 00000E5C 00000000000000     
  2380 00000E63 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2380 00000E6C 000000000000000000 
  2381 00000E75 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2381 00000E7E 4E414D45           
  2382 00000E82 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2382 00000E8B 46415431           
  2383 00000E8F 3220202000              		db 32h,	20h, 20h, 20h, 0
  2384 00000E94 FFFF                    		dw 0FFFFh
  2385 00000E96 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2385 00000E9F 0210000000F8       
  2386 00000EA5 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2386 00000EAE 000000000000000003 
  2387 00000EB7 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2387 00000EC0 00000000000000     
  2388 00000EC7 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2388 00000ED0 000000000000000000 
  2389 00000ED9 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2389 00000EE2 4E414D45           
  2390 00000EE6 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2390 00000EEF 46415431           
  2391 00000EF3 3220202000              		db 32h,	20h, 20h, 20h, 0
  2392 00000EF8 FFFF                    		dw 0FFFFh
  2393 00000EFA 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2393 00000F03 0210000000F8       
  2394 00000F09 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2394 00000F12 000000000000000003 
  2395 00000F1B 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2395 00000F24 00000000000000     
  2396 00000F2B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2396 00000F34 000000000000000000 
  2397 00000F3D 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2397 00000F46 4E414D45           
  2398 00000F4A 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2398 00000F53 46415431           
  2399 00000F57 3220202000              		db 32h,	20h, 20h, 20h, 0
  2400 00000F5C FFFF                    		dw 0FFFFh
  2401 00000F5E 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2401 00000F67 0210000000F8       
  2402 00000F6D 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2402 00000F76 000000000000000003 
  2403 00000F7F 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2403 00000F88 00000000000000     
  2404 00000F8F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2404 00000F98 000000000000000000 
  2405 00000FA1 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2405 00000FAA 4E414D45           
  2406 00000FAE 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2406 00000FB7 46415431           
  2407 00000FBB 3220202000              		db 32h,	20h, 20h, 20h, 0
  2408 00000FC0 FFFF                    		dw 0FFFFh
  2409 00000FC2 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2409 00000FCB 0210000000F8       
  2410 00000FD1 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2410 00000FDA 000000000000000003 
  2411 00000FE3 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2411 00000FEC 00000000000000     
  2412 00000FF3 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2412 00000FFC 000000000000000000 
  2413 00001005 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2413 0000100E 4E414D45           
  2414 00001012 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2414 0000101B 46415431           
  2415 0000101F 3220202000              		db 32h,	20h, 20h, 20h, 0
  2416 00001024 FFFF                    		dw 0FFFFh
  2417 00001026 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2417 0000102F 0210000000F8       
  2418 00001035 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2418 0000103E 000000000000000003 
  2419 00001047 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2419 00001050 00000000000000     
  2420 00001057 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2420 00001060 000000000000000000 
  2421 00001069 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2421 00001072 4E414D45           
  2422 00001076 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2422 0000107F 46415431           
  2423 00001083 3220202000              		db 32h,	20h, 20h, 20h, 0
  2424 00001088 FFFF                    		dw 0FFFFh
  2425 0000108A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2425 00001093 0210000000F8       
  2426 00001099 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2426 000010A2 000000000000000003 
  2427 000010AB 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2427 000010B4 00000000000000     
  2428 000010BB 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2428 000010C4 000000000000000000 
  2429 000010CD 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2429 000010D6 4E414D45           
  2430 000010DA 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2430 000010E3 46415431           
  2431 000010E7 3220202000              		db 32h,	20h, 20h, 20h, 0
  2432 000010EC FFFF                    		dw 0FFFFh
  2433 000010EE 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2433 000010F7 0210000000F8       
  2434 000010FD 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2434 00001106 000000000000000003 
  2435 0000110F 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2435 00001118 00000000000000     
  2436 0000111F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2436 00001128 000000000000000000 
  2437 00001131 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2437 0000113A 4E414D45           
  2438 0000113E 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2438 00001147 46415431           
  2439 0000114B 3220202000              		db 32h,	20h, 20h, 20h, 0
  2440 00001150 FFFF                    		dw 0FFFFh
  2441 00001152 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2441 0000115B 0210000000F8       
  2442 00001161 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2442 0000116A 000000000000000003 
  2443 00001173 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2443 0000117C 00000000000000     
  2444 00001183 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2444 0000118C 000000000000000000 
  2445 00001195 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2445 0000119E 4E414D45           
  2446 000011A2 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2446 000011AB 46415431           
  2447 000011AF 3220202000              		db 32h,	20h, 20h, 20h, 0
  2448 000011B4 FFFF                    		dw 0FFFFh
  2449 000011B6 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2449 000011BF 0210000000F8       
  2450 000011C5 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2450 000011CE 000000000000000003 
  2451 000011D7 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2451 000011E0 00000000000000     
  2452 000011E7 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2452 000011F0 000000000000000000 
  2453 000011F9 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2453 00001202 4E414D45           
  2454 00001206 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2454 0000120F 46415431           
  2455 00001213 3220202000              		db 32h,	20h, 20h, 20h, 0
  2456 00001218 FFFF                    		dw 0FFFFh
  2457 0000121A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2457 00001223 0210000000F8       
  2458 00001229 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2458 00001232 000000000000000003 
  2459 0000123B 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2459 00001244 00000000000000     
  2460 0000124B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2460 00001254 000000000000000000 
  2461 0000125D 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2461 00001266 4E414D45           
  2462 0000126A 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2462 00001273 46415431           
  2463 00001277 3220202000              		db 32h,	20h, 20h, 20h, 0
  2464 0000127C 00                      		db 0
  2465                                  
  2466                                  ;---------------------------------------------------------------------------
  2467                                  ; Possibly disposable data, goes at end of data group
  2468                                  ;***************************************************************************
  2469                                  
  2470                                  ; Possibly disposable data, goes at end of data group
  2471                                  
  2472                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  2473                                  ;
  2474                                  ;	entry:	(ah) = function, 02 or 0a for read.
  2475                                  ;		(dl) = drive number (80h or 81h).
  2476                                  ;		(dh) = head number.
  2477                                  ;		(ch) = cylinder number.
  2478                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  2479                                  ;		(al) = number of sectors.
  2480                                  ;		(es:bx) = address of read buffer.
  2481                                  ;		for more on register contents see rom bios listing.
  2482                                  ;		stack set up for return by an iret.
  2483                                  ;
  2484                                  ;	exit:	(ah) = status of current operation.
  2485                                  ;		(cy) = 1 if failed, 0 if successful.
  2486                                  ;		for other register contents see rom bios listing.
  2487                                  ;
  2488                                  ;	uses:	
  2489                                  ;
  2490                                  ;
  2491                                  ;	warning: uses old13 vector for non-read calls.
  2492                                  ;		does direct calls to the at rom.
  2493                                  ;		does segment arithmatic.
  2494                                  ;
  2495                                  ;	effects: performs disk i/o operation.
  2496                                  
  2497                                  ; 16/10/2022
  2498                                  ; 28/05/2019
  2499                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  2500                                  
  2501                                  ;* offsets into cmd_block for registers
  2502                                  
  2503                                  pre_comp equ 0	;write pre-compensation
  2504                                  sec_cnt	 equ 1	;sector count
  2505                                  sec_num	 equ 2	;sector number
  2506                                  cyl_low	 equ 3	;cylinder number, low part
  2507                                  cyl_high equ 4	;cylinder number, high part
  2508                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  2509                                  		;            bit 4 = drive number, bits 3-0 have head number)
  2510                                  cmd_reg  equ 6	;command register
  2511                                  
  2512                                  ; 01/10/2022
  2513                                  disk_status1	equ 74h
  2514                                  hf_num		equ 75h
  2515                                  control_byte	equ 76h
  2516                                  
  2517                                  ibm_disk_io:				
  2518 0000127D 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  2519 00001280 720A                    		jb	short atd1	; pass through floppy disk calls. 
  2520 00001282 80FC02                  		cmp	ah, 2
  2521 00001285 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  2522 00001287 80FC0A                  		cmp	ah, 0Ah
  2523 0000128A 7405                    		jz	short atd2	; and call 0Ah (read long).
  2524                                  atd1:
  2525 0000128C 2EFF2E[0601]            		jmp	far [cs:Old13]					
  2526                                  		;jmp	cs:Old13	; use rom int 13h handler
  2527                                  ;-----------------------------------------------------------------------------
  2528                                  
  2529                                  atd2:					
  2530 00001291 53                      		push	bx
  2531 00001292 51                      		push	cx
  2532 00001293 52                      		push	dx
  2533 00001294 57                      		push	di
  2534 00001295 1E                      		push	ds
  2535 00001296 06                      		push	es
  2536 00001297 50                      		push	ax
  2537 00001298 B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  2538                                  					; establish bios segment addressing
  2539 0000129B 8ED8                    		mov	ds, ax
  2540                                  		; 16/10/2022
  2541 0000129D C606740000              		mov	byte [disk_status1], 0
  2542                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  2543                                  					; initially no error code.
  2544 000012A2 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  2545 000012A5 3A167500                		cmp	dl, [hf_num]
  2546                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  2547 000012A9 7207                    		jb	short atd3	; disk number in range
  2548                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  2549 000012AB C606740001              		mov	byte [disk_status1], 1
  2550 000012B0 EB20                    		jmp	short atd4	; disk number out of range error,
  2551                                  					; return
  2552                                  ; ----------------------------------------------------------------------------
  2553                                  
  2554                                  atd3:					
  2555 000012B2 53                      		push	bx
  2556 000012B3 8CC0                    		mov	ax, es
  2557 000012B5 C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  2558 000012B8 01D8                    		add	ax, bx
  2559 000012BA 8EC0                    		mov	es, ax
  2560 000012BC 5B                      		pop	bx
  2561 000012BD 83E30F                  		and	bx, 0Fh
  2562 000012C0 0E                      		push	cs
  2563 000012C1 E8DF00                  		call	check_dma
  2564 000012C4 720C                    		jb	short atd4	; abort if dma across segment boundary
  2565 000012C6 58                      		pop	ax
  2566 000012C7 50                      		push	ax
  2567 000012C8 E81A00                  		call	setcmd		; set up command block for disk op
  2568 000012CB BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  2569 000012CE EE                      		out	dx, al		; write out command modifier
  2570 000012CF E86B00                  		call	docmd		; carry out command
  2571                                  ; ----------------------------------------------------------------------------
  2572                                  
  2573                                  atd4:	
  2574                                  
  2575                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  2576                                  ;	      and save a couple bytes while were at it.
  2577                                  				
  2578 000012D2 58                      		pop	ax
  2579                                  		;mov	ah, ds:74h	; [disk_status1]
  2580 000012D3 8A267400                		mov	ah, [disk_status1]
  2581 000012D7 08E4                    		or	ah, ah
  2582 000012D9 7401                    		jz	short atd5
  2583 000012DB F9                      		stc
  2584                                  atd5:					
  2585 000012DC 07                      		pop	es
  2586 000012DD 1F                      		pop	ds
  2587 000012DE 5F                      		pop	di
  2588 000012DF 5A                      		pop	dx
  2589 000012E0 59                      		pop	cx
  2590 000012E1 5B                      		pop	bx
  2591 000012E2 CA0200                  		retf	2		; far return, dropping flags
  2592                                  
  2593                                  ; =============== S U B	R O U T	I N E ========================================
  2594                                  
  2595                                  ;***	setcmd - set up cmd_block for the disk operation
  2596                                  ;
  2597                                  ;	entry:	(ds) = bios data segment.
  2598                                  ;		(es:bx) in seg:000x form.
  2599                                  ;		other registers as in int 13h call
  2600                                  ;	
  2601                                  ;	exit:	cmd_block set up for disk read call.
  2602                                  ;		control_byte set up for disk operation.
  2603                                  ;		(al) = control byte modifier
  2604                                  ;
  2605                                  ;	sets the fields of cmd_block using the register contents
  2606                                  ;	and the contents of the disk parameter block for the given drive.
  2607                                  ;
  2608                                  ;	warning: (ax) destroyed.
  2609                                  ;		does direct calls to the at rom.
  2610                                  
  2611                                  setcmd:		; proc near		
  2612                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  2613                                  		; 16/10/2022
  2614 000012E5 A24300                  		mov	[cmd_block+sec_cnt], al
  2615                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  2616 000012E8 C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  2617 000012ED 80FC02                  		cmp	ah, 2
  2618 000012F0 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  2619 000012F2 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  2620                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  2621                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  2622                                  setc1:					
  2623 000012F7 88C8                    		mov	al, cl
  2624 000012F9 243F                    		and	al, 3Fh		; mask sector number
  2625                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  2626                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  2627 000012FB A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  2628 000012FE 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  2629 00001302 88C8                    		mov	al, cl
  2630 00001304 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  2631                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  2632 00001307 A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  2633 0000130A 89D0                    		mov	ax, dx
  2634 0000130C C0E004                  		shl	al, 4		; drive	number
  2635 0000130F 80E40F                  		and	ah, 0Fh
  2636 00001312 08E0                    		or	al, ah		; head number
  2637 00001314 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  2638                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  2639 00001316 A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  2640 00001319 06                      		push	es
  2641 0000131A 53                      		push	bx
  2642 0000131B 0E                      		push	cs
  2643 0000131C E85C00                  		call	get_vec
  2644 0000131F 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  2645                                  			 		; write pre-comp from disk parameters
  2646 00001323 C1E802                  		shr	ax, 2
  2647                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  2648 00001326 A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  2649                                  					; only use low part
  2650 00001329 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  2651                                  					; control byte modifier
  2652 0000132D 5B                      		pop	bx
  2653 0000132E 07                      		pop	es
  2654                                  		;mov	ah, ds:76h	; [control_byte]
  2655 0000132F 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  2656 00001333 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  2657 00001336 08C4                    		or	ah, al
  2658                                  		;mov	ds:76h,	ah
  2659 00001338 88267600                		mov	[control_byte], ah ; mov [76h],al
  2660 0000133C C3                      		retn
  2661                                  
  2662                                  ; =============== S U B	R O U T	I N E ========================================
  2663                                  
  2664                                  ;***	docmd - carry out read operation to at hard disk
  2665                                  ;
  2666                                  ;	entry:	(es:bx) = address for read in data.
  2667                                  ;		cmd_block set up for disk read.
  2668                                  ;
  2669                                  ;	exit:	buffer at (es:bx) contains data read.
  2670                                  ;		disk_status1 set to error code (0 if success).
  2671                                  ;
  2672                                  ;	
  2673                                  ;
  2674                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  2675                                  ;		no check is made for dma boundary overrun.
  2676                                  ;
  2677                                  ;	effects: programs disk controller.
  2678                                  ;		performs disk input.
  2679                                  
  2680                                  docmd:		; proc near		
  2681 0000133D 89DF                    		mov	di, bx
  2682 0000133F 0E                      		push	cs
  2683 00001340 E84000                  		call	command
  2684 00001343 7535                    		jnz	short doc3
  2685                                  doc1:					
  2686 00001345 0E                      		push	cs
  2687 00001346 E84200                  		call	waitt		; wait for controller to complete read
  2688 00001349 752F                    		jnz	short doc3
  2689 0000134B B90001                  		mov	cx, 256		; 256 words per sector
  2690 0000134E BAF001                  		mov	dx, 1F0h	; hf_port
  2691 00001351 FC                      		cld			; string op goes up
  2692 00001352 FA                      		cli			; disable interrupts
  2693                                  					; (bug was forgetting this)
  2694                                  
  2695                                  ;	M062 -- some of these old machines have intermittent failures
  2696                                  ;		when the read is done at full speed. Instead of using
  2697                                  ;		a string rep instruction, we'll use a loop. There is
  2698                                  ;		a slight performance hit, but it only affects these
  2699                                  ;		very old machines with an exact date code match, and
  2700                                  ;		it makes said machines more reliable
  2701                                  ;
  2702                                  ;M062	repz	insw		;read in sector
  2703                                  
  2704                                  rsct_loop:				
  2705 00001353 6D                      		insw
  2706 00001354 E2FD                    		loop	rsct_loop
  2707 00001356 FB                      		sti
  2708                                  		; 16/10/2022
  2709 00001357 F606480002              		test	byte [cmd_block+cmd_reg], 02h
  2710                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  2711                                  					; (ds =	40h)
  2712 0000135C 7410                    		jz	short doc2	; no ecc bytes to read.
  2713 0000135E 0E                      		push	cs
  2714 0000135F E83100                  		call	wait_drq	; wait for controller to complete read
  2715 00001362 7216                    		jb	short doc3
  2716 00001364 B90400                  		mov	cx, 4		; 4 bytes of ecc
  2717 00001367 BAF001                  		mov	dx, 1F0h	; hf_port
  2718 0000136A FA                      		cli
  2719 0000136B F36C                    		rep insb		; read in ecc
  2720 0000136D FB                      		sti
  2721                                  doc2:					
  2722 0000136E 0E                      		push	cs
  2723 0000136F E82900                  		call	check_status
  2724 00001372 7506                    		jnz	short doc3	; operation failed
  2725                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  2726 00001374 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  2727 00001378 75CB                    		jnz	short doc1	; loop while more sectors to read
  2728                                  doc3:					
  2729 0000137A C3                      		retn
  2730                                  
  2731                                  ; =============== S U B	R O U T	I N E ========================================
  2732                                  
  2733                                  ;***	define where the rom routines are actually located
  2734                                  ;	   in the buggy old AT BIOS that we might need to
  2735                                  ;	   install a special level of int13 handler for
  2736                                  
  2737                                  ; 16/10/2022
  2738                                  
  2739                                  romsegment 	equ 0F000h  ; segment
  2740                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  2741                                  romwait		equ 2E7Fh   ; offset in romsegment
  2742                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  2743                                  romcheck_status equ 2EF8h   ; offset in romsegment
  2744                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  2745                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  2746                                  romfret		equ 0FF65h  ; far return in rom	
  2747                                  
  2748                                  ;***	get_vec - get pointer to hard disk parameters.
  2749                                  ;
  2750                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  2751                                  ;
  2752                                  ;	exit:	(es:bx) = address of disk parameters table.
  2753                                  ;
  2754                                  ;	uses:	ax for segment computation.
  2755                                  ;
  2756                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  2757                                  ;	or 70h (disk 1).
  2758                                  ;	
  2759                                  ;	warning: (ax) destroyed.
  2760                                  ;		this does a direct call to the at rom.
  2761                                  
  2762                                  get_vec:	; proc near		
  2763                                  		;push	0FF65h		; romfret ; far	return in rom
  2764                                  		;jmp	far ptr	0F000h:2F8Eh
  2765                                  		; 16/10/2022
  2766 0000137B 6865FF                  		push	romfret		; far return in rom
  2767 0000137E EA8E2F00F0              		jmp	romsegment:romget_vec
  2768                                  
  2769                                  ; =============== S U B	R O U T	I N E ========================================
  2770                                  
  2771                                  ;***	command - send contents of cmd_block to disk controller.
  2772                                  ;
  2773                                  ;	entry:	control_byte 
  2774                                  ;		cmd_block - set up with values for hard disk controller.
  2775                                  ;
  2776                                  ;	exit:	disk_status1 = error code.
  2777                                  ;		nz if error, zr for no error.
  2778                                  ;
  2779                                  ;
  2780                                  ;	warning: (ax), (cx), (dx) destroyed.
  2781                                  ;		does a direct call to the at rom.
  2782                                  ;
  2783                                  ;	effects: programs disk controller.
  2784                                  
  2785                                  command:	; proc near		
  2786                                  		;push	0FF65h		; romfret ; far	return in rom
  2787                                  		;jmp	far ptr	0F000h:2E1Eh
  2788                                  		; 16/10/2022
  2789 00001383 6865FF                  		push	romfret		; far return in rom
  2790 00001386 EA1E2E00F0              		jmp	romsegment:romcommand
  2791                                  
  2792                                  ; =============== S U B	R O U T	I N E ========================================
  2793                                  
  2794                                  ;***	waitt - wait for disk interrupt
  2795                                  ;
  2796                                  ;	entry:	nothing.
  2797                                  ;
  2798                                  ;	exit:	disk_status1 = error code.
  2799                                  ;		nz if error, zr if no error.
  2800                                  ;
  2801                                  ;
  2802                                  ;	warning: (ax), (bl), (cx) destroyed.
  2803                                  ;		does a direct call to the at rom.
  2804                                  ;		
  2805                                  ;	effects: calls int 15h, function 9000h.
  2806                                  
  2807                                  waitt:		; proc near		
  2808                                  		;push	0FF65h		; romfret ; far	return in rom
  2809                                  		;jmp	far ptr	0F000h:2E7Fh
  2810                                  		; 16/10/2022
  2811 0000138B 6865FF                  		push	romfret		; far return in rom
  2812 0000138E EA7F2E00F0              		jmp	romsegment:romwait
  2813                                  
  2814                                  ; =============== S U B	R O U T	I N E ========================================
  2815                                  
  2816                                  ;***	wait_drq - wait for data request.
  2817                                  ;
  2818                                  ;	entry:	nothing.
  2819                                  ;
  2820                                  ;	exit:	disk_status1 = error code.
  2821                                  ;		cy if error, nc if no error.
  2822                                  ;
  2823                                  ;	warning: (al), (cx), (dx) destroyed.
  2824                                  ;		does a direct call to the at rom.
  2825                                  
  2826                                  wait_drq:	; proc near		
  2827                                  		;push	0FF65h		; romfret ; far	return in rom
  2828                                  		;jmp	far ptr	0F000h:2EE2h
  2829                                  		; 16/10/2022
  2830 00001393 6865FF                  		push	romfret		; far return in rom
  2831 00001396 EAE22E00F0              		jmp	romsegment:romwait_drq
  2832                                  
  2833                                  ; =============== S U B	R O U T	I N E ========================================
  2834                                  
  2835                                  ;***	check_status - check hard disk status.
  2836                                  ;
  2837                                  ;	entry:	nothing.
  2838                                  ;
  2839                                  ;	exit:	disk_status1 = error code.
  2840                                  ;		nz if error, zr if no error.
  2841                                  ;
  2842                                  ;	warning: (ax), (cx), (dx) destroyed.
  2843                                  ;		does a direct call to the at rom.
  2844                                  
  2845                                  check_status:	; proc near		
  2846                                  		;push	0FF65h		; romfret ; far	return in rom
  2847                                  		;jmp	far ptr	0F000h:2EF8h
  2848                                  		; 16/10/2022
  2849 0000139B 6865FF                  		push	romfret		; far return in rom
  2850 0000139E EAF82E00F0              		jmp	romsegment:romcheck_status
  2851                                  
  2852                                  ; =============== S U B	R O U T	I N E ========================================
  2853                                  
  2854                                  ;***	check_dma - check for dma overrun 64k segment.
  2855                                  ;
  2856                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  2857                                  ;		cmd_block set up for operation.
  2858                                  ;
  2859                                  ;	exit:	disk_status1 - error code.
  2860                                  ;		cy if error, nc if no error.
  2861                                  ;
  2862                                  ;	warning: does a direct call to the at rom.
  2863                                  
  2864                                  check_dma:	; proc near		
  2865                                  		;push	0FF65h		; romfret ; far	return in rom
  2866                                  		;jmp	far ptr	0F000h:2F69h
  2867                                  		; 16/10/2022
  2868 000013A3 6865FF                  		push	romfret		; far return in rom
  2869 000013A6 EA692F00F0              		jmp	romsegment:romcheck_dma
  2870                                  
  2871                                  ;-----------------------------------------------------------------------------
  2872                                  
  2873                                  endatrom:
  2874                                  
  2875                                  ; ----------------------------------------------------------------------------
  2876                                  
  2877                                  ;; M015 -- begin changes
  2878                                  ;;
  2879                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  2880                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  2881                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  2882                                  ;; If our init code detects this error, it will install this
  2883                                  ;; special Int13 hook through the same mechanism that was set
  2884                                  ;; up for the IBM patch above. This code is also dynamically
  2885                                  ;; relocated by MSINIT.
  2886                                  
  2887                                  compaq_disk_io:
  2888 000013AB 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  2889                                  					;
  2890                                  					; the following	label defines the end of the at	rom patch.
  2891                                  					; this is used at configuration	time.
  2892                                  					;
  2893                                  					; warning!!!
  2894                                  					; this code will be dynamically	relocated by msinit
  2895 000013AE 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  2896                                  no_hookit:				
  2897                                  		;jmp	cs:Old13
  2898                                  		; 16/10/2022
  2899 000013B0 2EFF2E[0601]            		jmp	far [cs:Old13]
  2900                                  
  2901                                  ; ----------------------------------------------------------------------------
  2902                                  
  2903                                  mebbe_hookit:				
  2904 000013B5 80FA80                  		cmp	dl, 80h
  2905 000013B8 72F6                    		jb	short no_hookit
  2906 000013BA 1E                      		push	ds
  2907                                  		
  2908                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2909                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:1830h
  2910                                  		;push	ax
  2911                                  		;mov	ax, 40h
  2912                                  		;mov	ds, ax
  2913                                  		;pop	ax
  2914 000013BB 6A40                    		push	40h
  2915 000013BD 1F                      		pop	ds		
  2916                                  
  2917 000013BE 9C                      		pushf
  2918                                  		;call	cs:Old13
  2919                                  		; 16/10/2022
  2920 000013BF 2EFF1E[0601]            		call	far [cs:Old13]
  2921 000013C4 1F                      		pop	ds
  2922 000013C5 CA0200                  		retf	2
  2923                                  
  2924                                  ; ----------------------------------------------------------------------------
  2925                                  
  2926 000013C8 00                      end_compaq_i13hook: db 0			
  2927                                  
  2928                                  ; =============== S U B	R O U T	I N E ========================================
  2929                                  
  2930                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2931                                  %if 0  
  2932                                  
  2933                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  2934                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  2935                                  
  2936                                  daycnt_to_day:	; proc far
  2937                                  
  2938                                  ; entry: [daycnt] = number of days since 1-1-80
  2939                                  ;
  2940                                  ; return: ch - century in bcd
  2941                                  ;	  cl - year in bcd
  2942                                  ;	  dh - month in bcd
  2943                                  ;	  dl - day in bcd
  2944                                  
  2945                                  		; 16/10/2022		
  2946                                  		push	word [cs:daycnt] ; save daycnt
  2947                                  		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  2948                                  					; # days from 1-1-1980 to 1-1-2000
  2949                                  		jnb	short century20
  2950                                  		mov	byte [cs:base_century], 19
  2951                                  		mov	byte [cs:base_year], 80
  2952                                  		jmp	short years
  2953                                  ; ----------------------------------------------------------------------------
  2954                                  		
  2955                                  century20:				
  2956                                  		mov	byte [cs:base_century], 20
  2957                                  		mov	byte [cs:base_year], 0
  2958                                  		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  2959                                  					; adjust daycnt
  2960                                  years:					
  2961                                  		xor	dx, dx
  2962                                  		mov	ax, [cs:daycnt]
  2963                                  		mov	bx, 1461	; (366+365*3)
  2964                                  					; # of days in a Leap year block
  2965                                  		div	bx		; AX = # of leap block,	DX = daycnt
  2966                                  		mov	[cs:daycnt], dx	; save daycnt left
  2967                                  		mov	bl, 4
  2968                                  		mul	bl		; AX = # of years. Less	than 100
  2969                                  		add	[cs:base_year], al ; So, ah = 0. Adjust year
  2970                                  		inc	word [cs:daycnt]	; set daycnt to	1 base
  2971                                  		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  2972                                  		jbe	short leapyear	; within 366+355+355+355 days.
  2973                                  		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  2974                                  		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  2975                                  		mov	cx, 3		; And next three years are normal
  2976                                  regularyear:				
  2977                                  		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  2978                                  		jbe	short yeardone	; {if (daycnt >	365)
  2979                                  		inc	byte [cs:base_year]	;   { daycnt -=	365
  2980                                  		sub	word [cs:daycnt], 365	;   }
  2981                                  		loop	regularyear	; }
  2982                                  					;
  2983                                  					; should never fall through loop
  2984                                  leapyear:				
  2985                                  		mov	byte [cs:month_tab+1], 29 ; leap year.
  2986                                  					; change month table.
  2987                                  yeardone:				
  2988                                  		xor	bx, bx
  2989                                  		xor	dx, dx
  2990                                  		mov	ax, [cs:daycnt]
  2991                                  		;mov	si, offset month_tab
  2992                                  		mov	si, month_tab	; 19/10/2022
  2993                                  		mov	cx, 12
  2994                                  months:					
  2995                                  		inc	bl
  2996                                  
  2997                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  2998                                  		;mov	dl, [cs:si]
  2999                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  3000                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  3001                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  3002                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  3003                                  		
  3004                                  		mov	dl, [si] ; ?	; mov dl, [cs:si]
  3005                                  		cmp	ax, dx		; cmp daycnt for each month till fit
  3006                                  					; dh=0
  3007                                  		jbe	short month_done
  3008                                  		inc	si		; next month
  3009                                  		sub	ax, dx		; adjust daycnt
  3010                                  		loop	months		;
  3011                                  					; should never fall through loop
  3012                                  month_done:				
  3013                                  		mov	byte [cs:month_tab+1], 28
  3014                                  					; restore month table value
  3015                                  		mov	dl, bl
  3016                                  		mov	dh, [cs:base_year]
  3017                                  		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  3018                                  		call	far [cs:bintobcd]
  3019                                  		;call	cs:bintobcd	; convert "day"	to bcd
  3020                                  					; dl = bcd day,	al = month
  3021                                  		xchg	dl, al
  3022                                  		call	far [cs:bintobcd]
  3023                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  3024                                  		xchg	dh, al
  3025                                  		call	far [cs:bintobcd]
  3026                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  3027                                  		xchg	cl, al
  3028                                  		call	far [cs:bintobcd]
  3029                                  		;call	cs:bintobcd	; ch = bcd century
  3030                                  		mov	ch, al
  3031                                  		pop	word [cs:daycnt] ; restore original value
  3032                                  		retf
  3033                                  
  3034                                  enddaycnttoday:	
  3035                                  
  3036                                  %endif
  3037                                  
  3038                                  ; =============== S U B	R O U T	I N E ========================================
  3039                                  
  3040                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3041                                  %if 0  
  3042                                  
  3043                                  bin_to_bcd:	; proc far		; real time clock support
  3044                                  
  3045                                  ;convert a binary input in al (less than 63h or 99 decimal)
  3046                                  ;into a bcd value in al. ah destroyed.	
  3047                                  		
  3048                                  		push	cx		
  3049                                  		aam			; al=high digit	bcd, ah=low digit bcd
  3050                                  		mov	cl, 4
  3051                                  		shl	ah, cl		; mov the high digit to	high nibble
  3052                                  		or	al, ah
  3053                                  		pop	cx
  3054                                  		retf
  3055                                  %endif
  3056                                  
  3057                                  ; ----------------------------------------------------------------------------
  3058                                  
  3059                                  ; the k09 requires the routines for reading the clock because of the suspend/
  3060                                  ; resume facility. the system clock needs to be reset after resume.
  3061                                  
  3062                                  ; the following routine is executed at resume time when the system
  3063                                  ; powered on after suspension. it reads the real time clock and
  3064                                  ; resets the system time and date, and then irets.
  3065                                  
  3066                                  ; warning!!! this code will be dynamically relocated by msinit.
  3067                                  
  3068                                  	; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3069                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:183Eh
  3070                                  int_6Ch:
  3071 000013C9 0E                      		push	cs
  3072 000013CA 1F                      		pop	ds
  3073                                  		;cmp	byte [cs:inHMA], 0  
  3074 000013CB 803E[0D00]00            		cmp	byte [inHMA], 0
  3075 000013D0 7405                    		jz      short int6c
  3076 000013D2 BB[9007]                		mov     bx, EnsureA20On
  3077 000013D5 FFD3                    		call    bx
  3078                                  int6c:					
  3079                                  		;push	cs
  3080                                  		;pop	ds
  3081 000013D7 8F06[B306]              		pop	word [int6c_ret_addr]	; pop off return address
  3082 000013DB 8F06[B506]              		pop	word [int6c_ret_addr+2]
  3083 000013DF 9D                      		popf
  3084 000013E0 E81300                  		call	read_real_date	; get the date from the clock
  3085 000013E3 FA                      		cli
  3086 000013E4 8936[F004]              		mov	[daycnt], si	; update dos copy of date
  3087 000013E8 FB                      		sti
  3088 000013E9 E8B900                  		call	read_real_time	; get the time from the	rtc
  3089 000013EC FA                      		cli
  3090 000013ED B401                    		mov	ah, 1
  3091 000013EF CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  3092                                  					; CX:DX	= clock	count
  3093                                  					; Return: time of day set
  3094 000013F1 FB                      		sti
  3095                                  		;jmp	int6c_ret_addr	; long jump
  3096                                  		; 16/10/2022
  3097 000013F2 FF2E[B306]              		jmp	far [int6c_ret_addr] ; long jump
  3098                                  
  3099                                  ; =============== S U B	R O U T	I N E ========================================
  3100                                  
  3101                                  ;   read_real_date reads real-time clock for date and returns the number
  3102                                  ;   of days elapsed since 1-1-80 in si
  3103                                  
  3104                                  read_real_date:	; proc near		
  3105 000013F6 50                      		push	ax
  3106 000013F7 51                      		push	cx
  3107 000013F8 52                      		push	dx
  3108 000013F9 30E4                    		xor	ah, ah		; throw	away clock roll	over
  3109 000013FB CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  3110                                  					; Return: CX:DX	= clock	count
  3111                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  3112                                  					; midnight
  3113                                  					; Otherwise, AL	> 0
  3114 000013FD 5A                      		pop	dx
  3115 000013FE 59                      		pop	cx
  3116 000013FF 58                      		pop	ax
  3117 00001400 50                      		push	ax
  3118 00001401 53                      		push	bx
  3119 00001402 51                      		push	cx
  3120 00001403 52                      		push	dx
  3121                                  		;mov	word [cs:daycnt2], 1
  3122                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3123                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:187Ah
  3124 00001404 C706[BB06]0100          		mov	word [daycnt2], 1
  3125                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  3126 0000140A B404                    		mov	ah, 4
  3127 0000140C CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  3128                                  					; Return: DL = day in BCD
  3129                                  					; DH = month in	BCD
  3130                                  					; CL = year in BCD
  3131                                  					; CH = century (19h or 20h)
  3132 0000140E 7303                    		jnb	short read_ok
  3133 00001410 E98300                  		jmp	r_d_ret
  3134                                  ;-----------------------------------------------------------------------------
  3135                                  
  3136                                  read_ok:				
  3137 00001413 882E[B706]              		mov	[bin_date_time], ch
  3138 00001417 880E[B806]              		mov	[bin_date_time+1], cl
  3139 0000141B 8836[B906]              		mov	[bin_date_time+2], dh
  3140 0000141F 8816[BA06]              		mov	[bin_date_time+3], dl
  3141                                  		;mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  3142                                  		; 08/08/2023
  3143                                  		;mov	byte [daycnt2], 2
  3144 00001423 FE06[BB06]              		inc	byte [daycnt2] ; 2
  3145 00001427 E83401                  		call	bcd_verify	; verify bcd values in range
  3146 0000142A 726A                    		jb	short r_d_ret	; some value out of range
  3147                                  		;mov	word [cs:daycnt2], 3
  3148                                  		; 08/08/2023
  3149                                  		;mov	byte [daycnt2], 3
  3150 0000142C FE06[BB06]              		inc	byte [daycnt2] ; 3
  3151 00001430 E8DB00                  		call	date_verify
  3152 00001433 7261                    		jb	short r_d_ret
  3153                                  		;mov	word [cs:daycnt2], 0
  3154                                  		; 08/08/2023
  3155 00001435 C606[BB06]00            		mov	byte [daycnt2], 0
  3156 0000143A E8A100                  		call	in_bin
  3157 0000143D A0[B806]                		mov	al, [bin_date_time+1]
  3158 00001440 98                      		cbw
  3159 00001441 803E[B706]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  3160 00001446 7503                    		jnz	short century_19 ; no
  3161 00001448 83C064                  		add	ax, 100		; add in a century
  3162                                  century_19:				
  3163 0000144B 83E850                  		sub	ax, 80		; subtract off 1-1-80
  3164 0000144E B104                    		mov	cl, 4		; leap year every 4
  3165 00001450 F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  3166 00001452 88E3                    		mov	bl, ah		; save odd years
  3167 00001454 98                      		cbw			; zero ah
  3168 00001455 B9B505                  		mov	cx, 1461	; 366+(3*365)
  3169                                  					; # of days in leap year blocks
  3170 00001458 F7E1                    		mul	cx
  3171                                  		;mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  3172                                  		; 08/08/2023
  3173 0000145A A3[BB06]                		mov	[daycnt2], ax
  3174 0000145D 88D8                    		mov	al, bl		; get odd years	count
  3175 0000145F 98                      		cbw
  3176 00001460 09C0                    		or	ax, ax
  3177 00001462 740B                    		jz	short leap_year
  3178 00001464 B96D01                  		mov	cx, 365		; days in year
  3179 00001467 F7E1                    		mul	cx
  3180                                  		;add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  3181                                  		; 08/08/2023
  3182 00001469 0106[BB06]              		add	[daycnt2], ax
  3183 0000146D EB07                    		jmp	short leap_adjustment ;	account	for leap year
  3184                                  					; possibly account for a leap day
  3185                                  ;-----------------------------------------------------------------------------
  3186                                  
  3187                                  leap_year:				
  3188 0000146F 803E[B906]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  3189 00001474 7604                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  3190                                  leap_adjustment:			
  3191                                  		;inc	word [cs:daycnt2] ; account for leap day
  3192                                  		; 08/08/2023
  3193 00001476 FF06[BB06]              		inc	word [daycnt2]
  3194                                  no_leap_adjustment:			
  3195 0000147A 8A0E[BA06]              		mov	cl, [bin_date_time+3] ; get days of month
  3196 0000147E 30ED                    		xor	ch, ch
  3197 00001480 49                      		dec	cx		; because of offset from day 1,	not day	0
  3198                                  		;add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  3199                                  		; 08/08/2023
  3200 00001481 010E[BB06]              		add	[daycnt2], cx
  3201 00001485 8A0E[B906]              		mov	cl, [bin_date_time+2] ; get month
  3202                                  		; 08/08/2023
  3203                                  		;xor	ch, ch
  3204 00001489 49                      		dec	cx		; january starts at offset 0
  3205                                  		
  3206                                  		; 08/08/2023
  3207                                  		;shl	cx, 1		; word offset
  3208                                  		;;mov	si, month_table
  3209                                  		;add	si, cx
  3210                                  		;; 16/10/2022
  3211                                  		;; ds must be same with cs here, if so..
  3212                                  		;; what for cs: prefixes are used !?)
  3213                                  		;; mov	ax, [cs:si]
  3214                                  		;; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  3215                                  		;mov	ax, [si]	; mov ax, [cs:si]
  3216                                  		;			; get #	days in	previous months
  3217                                  		;add	[cs:daycnt2], ax
  3218                                  
  3219                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)		
  3220                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:1907h
  3221 0000148A B400                    		mov	ah, 0
  3222 0000148C BE[F604]                		mov	si, month_tab
  3223                                  r_d_sum_loop:
  3224 0000148F AC                      		lodsb
  3225 00001490 0106[BB06]              		add	[daycnt2], ax
  3226 00001494 E2F9                    		loop	r_d_sum_loop
  3227                                  r_d_ret:				
  3228                                  		;mov	si, [cs:daycnt2]
  3229                                  		; 08/08/2023
  3230 00001496 8B36[BB06]              		mov	si, [daycnt2]
  3231 0000149A 5A                      		pop	dx
  3232 0000149B 59                      		pop	cx
  3233 0000149C 5B                      		pop	bx
  3234 0000149D 58                      		pop	ax
  3235 0000149E C3                      		retn
  3236                                  
  3237                                  ;-----------------------------------------------------------------------------
  3238                                  
  3239                                  r_t_retj:				
  3240 0000149F 31C9                    		xor	cx, cx
  3241 000014A1 31D2                    		xor	dx, dx
  3242 000014A3 EB38                    		jmp	short r_t_ret
  3243                                  
  3244                                  ; =============== S U B	R O U T	I N E ========================================
  3245                                  
  3246                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  3247                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  3248                                  
  3249                                  read_real_time:	; proc near		
  3250 000014A5 B402                    		mov	ah, 2
  3251 000014A7 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  3252                                  					; Return: CH = hours in	BCD
  3253                                  					; CL = minutes in BCD
  3254                                  					; DH = seconds in BCD
  3255 000014A9 72F4                    		jb	short r_t_retj
  3256 000014AB 882E[B706]              		mov	[bin_date_time], ch ; hours
  3257 000014AF 880E[B806]              		mov	[bin_date_time+1], cl ; minutes
  3258 000014B3 8836[B906]              		mov	[bin_date_time+2], dh ; seconds
  3259 000014B7 C606[BA06]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  3260 000014BC E89F00                  		call	bcd_verify
  3261 000014BF 72DE                    		jb	short r_t_retj
  3262 000014C1 E88500                  		call	time_verify
  3263 000014C4 72D9                    		jb	short r_t_retj
  3264 000014C6 E81500                  		call	in_bin		; from bcd to bin
  3265 000014C9 8A2E[B706]              		mov	ch, [bin_date_time]
  3266 000014CD 8A0E[B806]              		mov	cl, [bin_date_time+1]
  3267 000014D1 8A36[B906]              		mov	dh, [bin_date_time+2]
  3268 000014D5 8A16[BA06]              		mov	dl, [bin_date_time+3]
  3269                                  		; 16/10/2022
  3270                                  		; 17/09/2022
  3271                                  		; 31/05/2019
  3272 000014D9 FF1E[C106]              		call	far [ttticks] 
  3273                                  		;call	dword ptr ttticks ; note: indirect far call
  3274                                  					; cx:dx	= number of ticks
  3275                                  					; (at 18.2 ticks per sec.)
  3276                                  r_t_ret:				
  3277 000014DD C3                      		retn
  3278                                  
  3279                                  ; =============== S U B	R O U T	I N E =======================================
  3280                                  
  3281                                  ;   in_bin converts bin_date_time values from bcd to bin
  3282                                  
  3283                                  in_bin:		; proc near		
  3284 000014DE A0[B706]                		mov	al, [bin_date_time] ; century or hours
  3285 000014E1 E81F00                  		call	bcd_to_bin
  3286 000014E4 A2[B706]                		mov	[bin_date_time], al
  3287 000014E7 A0[B806]                		mov	al, [bin_date_time+1] ; years or minutes
  3288 000014EA E81600                  		call	bcd_to_bin
  3289 000014ED A2[B806]                		mov	[bin_date_time+1], al
  3290 000014F0 A0[B906]                		mov	al, [bin_date_time+2] ; months or seconds
  3291 000014F3 E80D00                  		call	bcd_to_bin
  3292 000014F6 A2[B906]                		mov	[bin_date_time+2], al
  3293 000014F9 A0[BA06]                		mov	al, [bin_date_time+3] ; days (not used for time)
  3294 000014FC E80400                  		call	bcd_to_bin
  3295 000014FF A2[BA06]                		mov	[bin_date_time+3], al
  3296 00001502 C3                      		retn
  3297                                  
  3298                                  ; =============== S U B	R O U T	I N E =======================================
  3299                                  
  3300                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  3301                                  ;   a binary representation in al
  3302                                  ;   ah is destroyed
  3303                                  
  3304                                  bcd_to_bin:	; proc near		
  3305 00001503 88C4                    		mov	ah, al
  3306 00001505 240F                    		and	al, 0Fh
  3307 00001507 B104                    		mov	cl, 4
  3308 00001509 D2EC                    		shr	ah, cl
  3309 0000150B D50A                    		aad
  3310 0000150D C3                      		retn
  3311                                  
  3312                                  ; =============== S U B	R O U T	I N E ========================================
  3313                                  
  3314                                  ;   date_verify loosely checks bcd date values to be in range
  3315                                  ;   in bin_date_time
  3316                                  
  3317                                  date_verify:	; proc near		
  3318 0000150E 803E[B706]20            		cmp	byte [bin_date_time], 20h ; century check
  3319 00001513 7732                    		ja	short date_error
  3320 00001515 740E                    		jz	short century_20 ; jmp in 21th century
  3321 00001517 803E[B706]19            		cmp	byte [bin_date_time], 19h ; century check
  3322                                  		;jb	short date_error
  3323                                  		; 12/12/2022
  3324 0000151C 722A                    		jb	short date_err2
  3325 0000151E 803E[B806]80            		cmp	byte [bin_date_time+1], 80h ; year check
  3326                                  		;jb	short date_error
  3327                                  		; 12/12/2022
  3328 00001523 7223                    		jb	short date_err2
  3329                                  century_20:				
  3330 00001525 803E[B806]99            		cmp	byte [bin_date_time+1], 99h ; year check
  3331 0000152A 771B                    		ja	short date_error
  3332 0000152C 803E[B906]12            		cmp	byte [bin_date_time+2], 12h ; month check
  3333 00001531 7714                    		ja	short date_error
  3334 00001533 803E[B906]00            		cmp	byte [bin_date_time+2], 0
  3335                                  		;jbe	short date_error
  3336 00001538 760D                    		jna	short date_error
  3337 0000153A 803E[BA06]31            		cmp	byte [bin_date_time+3], 31h ; day check
  3338 0000153F 7706                    		ja	short date_error
  3339                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  3340                                  		;;jbe	short date_error
  3341                                  		;jna	short date_error
  3342                                  		; 12/12/2022
  3343                                  		; cf=0
  3344                                  		;clc
  3345                                  		; 12/12/2022
  3346 00001541 803E[BA06]01            		cmp	byte [bin_date_time+3], 1 ; day check
  3347 00001546 C3                      		retn
  3348                                  ;-----------------------------------------------------------------------------
  3349                                  
  3350                                  date_error:				
  3351 00001547 F9                      		stc
  3352                                  date_err2:
  3353 00001548 C3                      		retn
  3354                                  
  3355                                  ; =============== S U B	R O U T	I N E ========================================
  3356                                  
  3357                                  ; time_verify very loosely checks bcd date values to be in range
  3358                                  ; in bin_date_time
  3359                                  
  3360                                  time_verify:	; proc near		
  3361 00001549 803E[B706]24            		cmp	byte [bin_date_time], 24h ; hour check
  3362 0000154E 770C                    		ja	short time_error
  3363 00001550 803E[B806]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  3364 00001555 7705                    		ja	short time_error
  3365                                  		; 12/12/2022h
  3366                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  3367                                  		;ja	short time_error
  3368                                  		;clc
  3369                                  		;retn
  3370                                  		; 12/12/2022
  3371 00001557 803E[B906]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  3372                                  time_error:
  3373                                  bv_error:	
  3374 0000155C F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  3375 0000155D C3                      		retn
  3376                                  
  3377                                  ; ----------------------------------------------------------------------------
  3378                                  
  3379                                  ;time_error:				
  3380                                  		;stc
  3381                                  		;retn
  3382                                  
  3383                                  ; =============== S U B	R O U T	I N E ========================================
  3384                                  
  3385                                  ;   bcd_verify checks values in bin_date_time to be valid
  3386                                  ;   bcd numerals.  carry set if any nibble out of range
  3387                                  
  3388                                  bcd_verify:	; proc near		
  3389 0000155E B90400                  		mov	cx, 4		; 4 bytes to check
  3390 00001561 BB[B706]                		mov	bx, bin_date_time
  3391                                  bv_loop:				
  3392 00001564 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  3393 00001566 88C4                    		mov	ah, al
  3394 00001568 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  3395                                  					; is 1's place in range?
  3396 0000156B 3C0A                    		cmp	al, 10
  3397 0000156D 77ED                    		ja	short bv_error	; jmp out of range
  3398 0000156F D0EC                    		shr	ah, 1
  3399 00001571 D0EC                    		shr	ah, 1
  3400 00001573 D0EC                    		shr	ah, 1
  3401 00001575 D0EC                    		shr	ah, 1
  3402 00001577 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  3403 0000157A 80FC0A                  		cmp	ah, 10		; is 10's place in range
  3404 0000157D 77DD                    		ja	short bv_error	; jmp out of range
  3405 0000157F 43                      		inc	bx		; next byte
  3406 00001580 49                      		dec	cx
  3407 00001581 75E1                    		jnz	short bv_loop
  3408 00001583 F8                      		clc			; set success flag
  3409 00001584 C3                      		retn
  3410                                  ; ----------------------------------------------------------------------------
  3411                                  
  3412                                  		; 12/12/2022
  3413                                  ;bv_error:				
  3414                                  		;stc			; set error flag
  3415                                  		;retn
  3416                                  
  3417                                  ; ----------------------------------------------------------------------------
  3418                                  
  3419                                  endk09:
  3420                                  
  3421                                  ; ----------------------------------------------------------------------------
  3422                                  
  3423                                  ;------------------------------------------------------------------------
  3424                                  ;									:
  3425                                  ;	System initialization						:
  3426                                  ;									:
  3427                                  ;	The entry conditions are established by the bootstrap		:
  3428                                  ;	loader and are considered unknown. The following jobs		:
  3429                                  ;	will be performed by this module:				:
  3430                                  ;									:
  3431                                  ;	1.	All device initialization is performed			:
  3432                                  ;	2.	A local stack is set up and DS:SI are set		:
  3433                                  ;		to point to an initialization table. Then		:
  3434                                  ;		an inter-segment call is made to the first		:
  3435                                  ;		byte of the dos 					:
  3436                                  ;	3.	Once the dos returns from this call the ds		:
  3437                                  ;		register has been set up to point to the start		:
  3438                                  ;		of free memory. The initialization will then		:
  3439                                  ;		load the command program into this area 		:
  3440                                  ;		beginning at 100 hex and transfer control to		:
  3441                                  ;		this program.						:
  3442                                  ;									:
  3443                                  ;------------------------------------------------------------------------
  3444                                  
  3445                                  ; 01/10/2022
  3446                                  ; 08/01/2018 - Retro DOS v4.0
  3447                                  
  3448                                  ; drvfat must be the first location of freeable space!
  3449                                  
  3450 00001585 90                      align 2
  3451                                  		;db 90h
  3452                                  
  3453                                  ; 20/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  3454                                  ; ((no need to read/load 'MSDOS.SYS', it is already loaded))
  3455                                  ; (((bios_l,bios_h,doscnt,fatloc,md_sectorsize,temp_cluster,last_fat_sec_num
  3456                                  ;   would be used to read 'MSDOS.SYS' from disk, now they are not needed)))
  3457                                  	
  3458 00001586 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  3459                                  ;bios_l:	dw 0			; first	sector of data (low word)
  3460                                  ;bios_h:	dw 0			; first	sector of data (high word)
  3461                                  ;doscnt:	dw 0			; how many sectors to read
  3462 00001588 00                      fbigfat:	db 0			; flags	for drive
  3463                                  ;fatloc:	dw 0			; seg addr of fat sector
  3464 00001589 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  3465 0000158B 80                      rom_drv_num:	db 80h			; rom drive number
  3466                                  ;md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  3467                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  3468                                  ;last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  3469                                  
  3470                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  3471                                  ; call to determine drive parameters.
  3472                                  
  3473 0000158C 02                      num_heads:	db 2			; number of heads returned by rom
  3474                                  		;db 0	; 08/08/2023
  3475 0000158D 09                      sec_trk:	db 9			; sec/trk returned by rom
  3476 0000158E 28                      num_cyln:	db 40			; number of cylinders returned by rom
  3477                                  		;db 0	; 08/08/2023
  3478 0000158F 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  3479                                  
  3480                                  ; ----------------------------------------------------------------------------
  3481                                  
  3482 00001590 0002000140000000        disktable:	dw 512,	0100h, 64, 0	; warning !!! old values
  3483 00001598 0008010270000000        		dw 2048, 0201h, 112, 0
  3484 000015A0 0020020400010000        		dw 8192, 0402h, 256, 0
  3485 000015A8 A87F030800020000        		dw 32680, 0803h, 512, 0	; warning !!! old values
  3486 000015B0 FFFF041000040000        		dw 65535, 1004h, 1024, 0
  3487                                  					; default disktable under
  3488                                  					; the assumption of total fat size <= 128 kb,
  3489                                  					; and the maximum size of fat entry = 16 bit.
  3490                                  		; 08/08/2023
  3491                                  		; disktable.totalsectors: resd 1
  3492                                  		; disktable.shiftcount:   resb 1
  3493                                  		; disktable.secperclus:   resb 1
  3494                                  		; disktable.rdirentries:  resw 1
  3495                                  		; disktable.bigflag:      resw 1
  3496 000015B8 0000A87F0308000200-     disktable2:	dw 0, 32680, 0803h, 512, 0 ; for compatibility.
  3496 000015C1 00                 
  3497                                  					   ; (32680 sectors, 16340 KB)
  3498 000015C2 040000000204000240-     		dw 4, 0, 0402h, 512, 40h   ; covers upto 134 mb media.
  3498 000015CB 00                 
  3499                                  					   ; fbig = 40h  ; (40000h sectors = 128 MB)
  3500 000015CC 080000000308000240-     		dw 8, 0, 0803h, 512, 40h   ; upto 268 mb ; (80000h sectors = 256 MB)
  3500 000015D5 00                 
  3501 000015D6 100000000410000240-     		dw 16, 0, 1004h, 512, 40h  ; upto 536 mb ; (100000h sectors = 512 MB)
  3501 000015DF 00                 
  3502 000015E0 200000000520000240-     		dw 32, 0, 2005h, 512, 40h  ; upto 1072 mb ; (200000h sectors = 1024 MB)
  3502 000015E9 00                 
  3503 000015EA 400000000640000240-     		dw 64, 0, 4006h, 512, 40h  ; upto 2144 mb ; (400000h sectors = 2048 MB)
  3503 000015F3 00                 
  3504 000015F4 800000000780000240-     		dw 128,	0, 8007h, 512, 40h ; upto 4288 mb ; (800000h sectors = 4096 MB)
  3504 000015FD 00                 
  3505                                  					
  3506                                  ; ----------------------------------------------------------------------------
  3507                                  
  3508                                  ;******************************************************
  3509                                  ;variables for mini disk initialization
  3510                                  ;******************************************************
  3511                                  
  3512                                  ; 01/10/2022
  3513                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  3514                                  
  3515 000015FE 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  3516 000015FF 00                      hnum:		db 0			; real number of hardfiles
  3517 00001600 [7F06]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  3518 00001602 [B808]                  end_of_bdss:	dw bdss			; offset value of the ending address
  3519                                  					; of bds table. needed to figure out
  3520                                  					; the dosdatasg address.
  3521 00001604 0000                    mini_hdlim:	dw 0			
  3522 00001606 0000                    mini_seclim:	dw 0
  3523                                  
  3524                                  ;end of mini disk init variables **********************
  3525                                  
  3526                                  ; ----------------------------------------------------------------------------
  3527                                  			
  3528 00001608 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  3529                                  
  3530                                  ; 13/12/2022
  3531                                  %if 0
  3532                                  
  3533                                  ;align 2
  3534                                  		db  90h	
  3535                                  
  3536                                  ; the following are the recommended bpbs for the media that we know of so far.
  3537                                  
  3538                                  ;struc bpbx
  3539                                  ;   resw 1 ; 512
  3540                                  ;   resb 1
  3541                                  ;   resw 1 ; 1
  3542                                  ;   resb 1 ; 2
  3543                                  ;   resw 1
  3544                                  ;   resw 1
  3545                                  ;   resb 1
  3546                                  ;   resw 1
  3547                                  ;   resw 1
  3548                                  ;   resw 1 ; 2
  3549                                  ;   resw 1
  3550                                  ;   resw 1 ; hidden sector high
  3551                                  ;   resd 1 ; extended total sectors
  3552                                  ;.size:
  3553                                  ;endstruc
  3554                                  
  3555                                  ; 08/01/2019 - Retro DOS v4.0
  3556                                  
  3557                                  ; 20/04/2019
  3558                                  
  3559                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  3560                                  
  3561                                  ; 09/12/2022
  3562                                  BPB48T:
  3563                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  3564                                  		; 48 tpi diskettes	;
  3565                                  		dw	512		; physical sector size in bytes
  3566                                  		db	2		; sectors/allocation unit
  3567                                  		dw	1		; reserved sectors for dos
  3568                                  		db	2		; number of allocation tables
  3569                                  		dw	112		; number of directory entries
  3570                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  3571                                  		db	0FDh		; media descriptor
  3572                                  		dw	2		; number of fat sectors
  3573                                  		dw	9		; sectors per track
  3574                                  		dw	2		; heads
  3575                                  		dw	0		; hidden sector count (low word)
  3576                                  		dw	0		; hidden sector (high)
  3577                                  		dw	0		; number of sectors (low)
  3578                                  		dw	0		; number of sectors (high)					
  3579                                  
  3580                                  		db 90h
  3581                                  ;align 2
  3582                                  BPB96T:
  3583                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  3584                                  		; 96 tpi diskettes	;
  3585                                  		dw	512		; physical sector size in bytes
  3586                                  		db	1		; sectors/allocation unit
  3587                                  		dw	1		; reserved sectors for dos
  3588                                  		db	2		; number of allocation tables
  3589                                  		dw	224		; number of directory entries
  3590                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  3591                                  		db	0F9h		; media descriptor
  3592                                  		dw	7		; number of fat sectors
  3593                                  		dw	15		; sectors per track
  3594                                  		dw	2		; heads
  3595                                  		dw	0		; hidden sector count (low word)
  3596                                  		dw	0		; hidden sector (high)
  3597                                  		dw	0		; number of sectors (low)
  3598                                  		dw	0		; number of sectors (high)
  3599                                  
  3600                                  		db 90h
  3601                                  ;align 2
  3602                                  BPB35:
  3603                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  3604                                  		; 3.5" diskettes - 720 KB ;		
  3605                                  		dw	512		; physical sector size in bytes
  3606                                  		db	2		; sectors/allocation unit
  3607                                  		dw	1		; reserved sectors for dos
  3608                                  		db	2		; number of allocation tables
  3609                                  		dw	112		; number of directory entries
  3610                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  3611                                  		db	0F9h		; media descriptor
  3612                                  		dw	3		; number of fat sectors
  3613                                  		dw	9		; sectors per track
  3614                                  		dw	2		; heads
  3615                                  		dw	0		; hidden sector count (low word)
  3616                                  		dw	0		; hidden sector (high)
  3617                                  		dw	0		; number of sectors (low)
  3618                                  		dw	0		; number of sectors (high)
  3619                                  
  3620                                  		db 90h
  3621                                  ;align 2
  3622                                  
  3623                                  ;align 2
  3624                                  ;BPB144:
  3625                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  3626                                  ;
  3627                                  ;		dw	512		; physical sector size in bytes
  3628                                  ;		db	1		; sectors/allocation unit
  3629                                  ;		dw	1		; reserved sectors for dos
  3630                                  ;		db	2		; number of allocation tables
  3631                                  ;		dw	224		; number of directory entries
  3632                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  3633                                  ;		db	0F0h		; media descriptor
  3634                                  ;		dw	9		; number of fat sectors
  3635                                  ;		dw	18		; sectors per track
  3636                                  ;		dw	2		; heads
  3637                                  ;		dw	0		; hidden sector count (low word)
  3638                                  ;		dw	0		; hidden sector (high)
  3639                                  ;		dw	0		; number of sectors (low)
  3640                                  ;		dw	0		; number of sectors (high)
  3641                                  ;
  3642                                  ;		db 90h
  3643                                  ;align 2
  3644                                  
  3645                                  BPB288:
  3646                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  3647                                  		; 3.5" diskettes - 2.88 MB ;	 
  3648                                  		dw	512		; physical sector size in bytes
  3649                                  		db	2		; sectors/allocation unit
  3650                                  		dw	1		; reserved sectors for dos
  3651                                  		db	2		; number of allocation tables
  3652                                  		dw	240		; number of directory entries
  3653                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  3654                                  		db	0F0h		; media descriptor
  3655                                  		dw	3		; number of fat sectors
  3656                                  		dw	9		; sectors per track
  3657                                  		dw	2		; heads
  3658                                  		dw	0		; hidden sector count (low word)
  3659                                  		dw	0		; hidden sector (high)
  3660                                  		dw	0		; number of sectors (low)
  3661                                  		dw	0		; number of sectors (high)
  3662                                  
  3663                                  		db 90h			;
  3664                                  ;align 2
  3665                                  
  3666                                  %endif
  3667                                  
  3668                                  ; ----------------------------------------------------------------------------
  3669                                  					; align	2
  3670                                  ; 09/12/2022
  3671                                  %if 0
  3672                                  bpbtable:	dw bpb48t		; 48tpi	drives
  3673                                  		dw bpb96t		; 96tpi	drives
  3674                                  		dw bpb35		; 3.5" drives
  3675                                  		dw bpb35		; unused 8" diskette
  3676                                  		dw bpb35		; unused 8" diskette
  3677                                  		dw bpb35		; used for hard	disk
  3678                                  		dw bpb35		; used for tape	drive
  3679                                  		dw bpb35		; FFOTHER
  3680                                  		dw bpb35		; ERIMO
  3681                                  		dw bpb288		; 2.88MB drive
  3682                                  		;
  3683                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  3684                                  %endif
  3685                                  
  3686                                  ; 13/12/2022
  3687                                  %if 0
  3688                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  3689                                  		dw BPB96T		; 96tpi	drives
  3690                                  		dw BPB35		; 3.5" drives
  3691                                  		dw BPB35		; unused 8" diskette
  3692                                  		dw BPB35		; unused 8" diskette
  3693                                  		dw BPB35		; used for hard	disk
  3694                                  		dw BPB35		; used for tape	drive
  3695                                  		dw BPB35		; FFOTHER
  3696                                  		dw BPB35		; ERIMO
  3697                                  		dw BPB288		; 2.88MB drive
  3698                                  		;
  3699                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  3700                                  
  3701                                  %endif
  3702                                  
  3703                                  ; ----------------------------------------------------------------------------
  3704                                  
  3705                                  ;	entry point to call utility functions in Bios_Code. At this time,
  3706                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  3707                                  ;	  will not yet be moved to its final resting place, so we know
  3708                                  ;	  it'll be low.
  3709                                  ;
  3710                                  ;	to use this function, do a "push cs" and load bp with the offset of
  3711                                  ;	  the function you want to call in Bios_Code. This routine will
  3712                                  ;	  push the address of a retf in Bios_Code onto the stack which
  3713                                  ;	  will get executed when the utility function finishes. It will
  3714                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  3715                                  ;	  and a retf
  3716                                  
  3717                                  ; 16/10/2022
  3718                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  3719                                  ; 09/12/2022
  3720                                  BC_RETF equ bc_retf
  3721                                  
  3722                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  3723                                  					; 2C7h:0C8h = 70h:2638h
  3724 00001611 [CC00]                  		dw BC_RETF
  3725                                  
  3726                                  ; ----------------------------------------------------------------------------
  3727                                  
  3728                                  call_bios_code:	; proc far			
  3729 00001613 2EFF36[1116]            		push	word [cs:addr_of_bcretf] 
  3730                                  					; set up near return to far return
  3731 00001618 2EFF36[BF06]            		push	word [cs:cdev+2] ; push Bios_Code segment
  3732 0000161D 55                      		push	bp		; save offset of utility function
  3733 0000161E CB                      		retf			; far jump to (DOS)BIOS code
  3734                                  
  3735                                  ; ----------------------------------------------------------------------------
  3736                                  		
  3737                                  		; 20/12/2022
  3738                                  ;flp_drvs	db 0			
  3739                                  
  3740                                  ; ----------------------------------------------------------------------------
  3741                                  
  3742                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0, classic/old MICROSOFT DOS method)
  3743                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel files, original/new method) (*)
  3744                                  ;      (*) (for using Retro DOS kernel 'MSDOS.SYS' with Retro DOS boot sector)
  3745                                  
  3746                                  ;-----------------------------------------------------------------------------
  3747                                  ; entry point from boot sector
  3748                                  ;-----------------------------------------------------------------------------
  3749                                  
  3750                                  init:		; 27/12/2018
  3751                                  		; MSDOS 6.0 (MSINIT.ASM)
  3752                                  		;=============================================================
  3753                                  		;
  3754                                  		; entry from boot sector. the register contents are:
  3755                                  		;
  3756                                  		;   dl = int 13 drive number we booted from
  3757                                  		;   ch = media byte
  3758                                  		;   bx = first data sector on disk.
  3759                                  		;   ax = first data sector (high)
  3760                                  		;   di = sectors/fat for the boot media.
  3761                                  
  3762                                  		; 07/04/2018
  3763                                  		;=============================================================
  3764                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  3765                                                  ; DL = [bsDriveNumber]
  3766                                  		; DH = [bsMedia]
  3767                                  		; AX = [bsSectors] ; Total sectors
  3768                                  		; DS = 0, SS = 0
  3769                                  		; BP = 7C00h
  3770                                  	
  3771                                  ; 20/12/2022
  3772                                  ; Changing original MSDOS 5.0 IO.SYS init code with Retro DOS v4.0 init code.		
  3773                                  %if 0	
  3774                                  		cli
  3775                                  
  3776                                  		push	ax
  3777                                  		xor	ax, ax
  3778                                  		mov	ds, ax
  3779                                  		pop	ax
  3780                                  %endif
  3781                                  
  3782                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3783                                  
  3784                                  KERNEL_SEGMENT equ 70h	; (DOS BIOSDATA SEGMENT)
  3785                                  BSSECPERTRACK equ 18h	; boot sector offset 18h (for Retro DOS & MSDOS)	
  3786                                  
  3787                                  ;-----------------------------------------------------------------------------
  3788                                  ; initialization - stage 1
  3789                                  ;-----------------------------------------------------------------------------
  3790                                  ; 02/06/2018 - Retro DOS v3.0
  3791                                  		
  3792                                  		; 21/12/2022
  3793                                  		; Move Retro DOS v2.0 boot sector parameters to 0060h:0
  3794                                  		;mov	bx, 60h
  3795                                  		;mov	es, bx
  3796                                  		;mov	si, bp
  3797                                  		;sub	di, di
  3798                                  		;mov	cx, 35 ; 70 bytes, 35 words
  3799                                  		;;mov	cl, 35
  3800                                  		;rep	movsw
  3801                                  
  3802 0000161F 0E                      		push	cs
  3803 00001620 1F                      		pop	ds
  3804                                  
  3805                                  		; 20/03/2019 - Retro DOS v4.0
  3806                                  		;cli		; turn interrupts off while manupulating stack
  3807                                  		;mov	ss, cx	; set stack segment register
  3808 00001621 BC0007                  		mov	sp, 0700h ; move stack pointer to safe place
  3809                                  		;sti		; turn interrupts on
  3810                                  
  3811                                  		; 27/03/2018
  3812                                  		;mov	cx, KERNEL_SIZE	; words !
  3813                                  
  3814                                  		; 20/03/2019
  3815 00001624 B90080                  		mov	cx, 32768 ; 65536 bytes
  3816                                  
  3817                                  		; 21/12/2022
  3818                                  		; 07/04/2018
  3819 00001627 BB7000                  		mov	bx, KERNEL_SEGMENT ; 0070h
  3820                                  		;mov	bl, KERNEL_SEGMENT
  3821 0000162A 8EC3                    		mov	es, bx
  3822 0000162C 31FF                    		xor	di, di
  3823 0000162E 89FE                    		mov	si, di
  3824                                  		
  3825                                  		; Move KERNEL file from 1000h:0 to 0070h:0
  3826                                  		; (Retro DOS v2 BS loads 'MSDOS.SYS' at 1000h:0000h)
  3827 00001630 F3A5                    		rep	movsw
  3828                                  
  3829                                  		; 20/03/2019 - Retro DOS v4.0
  3830 00001632 53                      		push	bx
  3831 00001633 68[3716]                		push	init0
  3832 00001636 CB                      		retf
  3833                                  init0:	
  3834                                  		; 20/12/2022
  3835                                  		; (combined kernel file > 64KB)
  3836                                  
  3837                                  		; 20/03/2019
  3838 00001637 B520                    		mov	ch, 20h
  3839 00001639 8ED9                    		mov	ds, cx ; 2000h
  3840                                  		;mov	cx, 1070h
  3841 0000163B B97010                  		mov	cx, KERNEL_SEGMENT+1000h ; 20/12/2022
  3842 0000163E 8EC1                    		mov	es, cx
  3843                                  		
  3844                                  		; 21/12/2022
  3845                                  		KERNEL_SIZE equ END_OF_KERNEL - BData_start
  3846                                  
  3847 00001640 B9[0A5D]                		mov	cx, KERNEL_SIZE - 32768
  3848                                  		;xor	si, si
  3849                                  		;xor	di, di
  3850 00001643 F3A5                    		rep	movsw
  3851                                  
  3852                                  		; 17/06/2018 
  3853 00001645 8EDB                    		mov	ds, bx
  3854                                  		; 21/03/2019
  3855 00001647 8EC3                    		mov	es, bx
  3856                                  ;init0:
  3857                                  ;		;push	es
  3858                                  ;		push	bx ; 20/03/2019
  3859                                  ;		push	init1 ; 07/04/2018
  3860                                  ;		retf	; jump to 0070h:init1
  3861                                  ;init:
  3862                                  init1:
  3863                                  		; 20/12/2022
  3864                                  		; Change INT 1Eh diskette parameters table and INT 1Eh address
  3865                                  		; for full MSDOS compatibility.
  3866                                  
  3867 00001649 8EC1                    		mov	es, cx ; 0
  3868 0000164B 8ED9                    		mov	ds, cx ; 0
  3869                                  
  3870 0000164D B82205                  		mov	ax, SEC9
  3871                                  
  3872                                  		;mov	bx, 1Eh*4  ; [0078h] ; INT 1Eh vector/pointer
  3873 00001650 B378                    		mov	bl, 1Eh*4
  3874                                  				; INT 1Eh points to diskette parms table
  3875                                  
  3876                                  		; check if the table is already at 0:SEC9 (0:0522h)
  3877                                   		; (do not move the DPT if is not original ROMBIOS table)
  3878                                  
  3879                                  		;;or	[bx+2],cx [(1Eh*4)+2] ; [007Ah] ; segment
  3880                                  		;;jnz	short mov_dpt
  3881                                  
  3882                                  		;cmp	ax, [bx]  ; [1Eh*4] = 0522h ?
  3883                                  		;je	short dont_mov_dpt
  3884                                  
  3885                                  		;mov	si, [bx] ; [1Eh*4]		
  3886                                  ;mov_dpt:
  3887                                  		;mov	ds, [bx+2] ; [(1Eh*4)+2] ; [007Ah] ; segment
  3888 00001652 C537                    		lds	si, [bx]
  3889 00001654 89C7                    		mov	di, ax  ; SEC9
  3890 00001656 B10B                    		mov	cl, 11
  3891                                  		;cld
  3892 00001658 F3A4                    		rep	movsb
  3893                                  
  3894                                  		; Set INT 1Eh vector/pointer to the new DPT address
  3895 0000165A 8ED9                    		mov	ds, cx ; 0
  3896 0000165C 8907                    		mov	[bx], ax ; SEC9	; [007Eh] ; 1Eh*4  ; offset
  3897 0000165E 894F02                  		mov	[bx+2], cx ; 0  ; [007Ah] ; 1Eh*4+2 ; segment
  3898                                  ;dont_mov_dpt:
  3899                                  
  3900                                  ; 20/12/2022 - Retro DOS v4.0
  3901                                  %if 0
  3902                                  		; 27/12/2018 - Retro DOS v4.0
  3903                                  		; 'Starting MS-DOS...' message
  3904                                  		; (MSDOS 6.21, IO.SYS Segment: 423h, Offset: 5673h)
  3905                                  		; (0070h:96A3h)
  3906                                  
  3907                                    	    	mov     si, SYSINIT_START+StartMsg ; 18/03/2019
  3908                                  		mov     ah, 0Eh
  3909                                  		;bh = 0
  3910                                          	mov     bl, 7		; "normal" attribute and page
  3911                                  startmsg_nxt_chr:  
  3912                                  		lodsb
  3913                                  		or	al, al
  3914                                          	jz	short startmsg_ok
  3915                                         
  3916                                  		int	10h		; video write
  3917                                          	jmp	short startmsg_nxt_chr
  3918                                  
  3919                                  ;flp_drvs:	db  0 	; 27/12/2018 - Retro DOS v4.0
  3920                                  
  3921                                  startmsg_ok:
  3922                                  
  3923                                  %endif
  3924                                  
  3925                                  ;-----------------------------------------------------------------------------
  3926                                  ; initialization - stage 2
  3927                                  ;-----------------------------------------------------------------------------
  3928                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3929                                  
  3930                                  
  3931                                  ; 19/03/2018
  3932                                  ; Retro DOS v2.0 (24/02/2018)
  3933                                  ; [REF: MSDOS 3.3, MSBIO, "MSINIT.ASM"  (24/07/1987)]
  3934                                  
  3935                                  ;------------------------------------------------------------------------
  3936                                  ;									:
  3937                                  ;	System initialization						:
  3938                                  ;									:
  3939                                  ;	The entry conditions are established by the bootstrap		:
  3940                                  ;	loader and are considered unknown. The following jobs		:
  3941                                  ;	will be performed by this module:				:
  3942                                  ;									:
  3943                                  ;	1.	All device initialization is performed			:
  3944                                  ;	2.	A local stack is set up and DS:SI are set		:
  3945                                  ;		to point to an initialization table. Then		:
  3946                                  ;		an inter-segment call is made to the first		:
  3947                                  ;		byte of the dos 					:
  3948                                  ;	3.	Once the dos returns from this call the ds		:
  3949                                  ;		register has been set up to point to the start		:
  3950                                  ;		of free memory. The initialization will then		:
  3951                                  ;		load the command program into this area 		:
  3952                                  ;		beginning at 100 hex and transfer control to		:
  3953                                  ;		this program.						:
  3954                                  ;									:
  3955                                  ;------------------------------------------------------------------------
  3956                                  		
  3957                                  		; 20/12/2022
  3958                                  		; ----------------------
  3959                                  		; Registers
  3960                                  		; ----------------------
  3961                                  		; DL = [bsDriveNumber]
  3962                                  		; DH = [bsMedia]
  3963                                  		; DS = 0, ES = 0, SS = 0
  3964                                  		; BP = 7C00h
  3965                                  		; SP = 700h
  3966                                  		; ----------------------
  3967                                  		; CX = 0				
  3968                                  
  3969                                  ; 02/10/2022 - 20/12/2022
  3970                                  ; ------------------------------------------------------------------------------
  3971                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  3972                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  3973                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  3974                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  3975                                  ;	moves kernel to segment 70h at first, then sets diskette parameters
  3976                                  ;	at segment 50h (while MSDOS 5.0 boot sector and then MSLOAD sets this).
  3977                                  ; ------------------------------------------------------------------------------
  3978                                  
  3979                                  ; msload will check the extended boot record and set ax, bx accordingly.
  3980                                  ;
  3981                                  ;;	msload passes a 32 bit sector number hi word in ax and low in bx
  3982                                  ;;	save this in cs:bios_h and cs:bios_l. this is for the start of
  3983                                  ;;	data sector of the bios.
  3984                                  ;
  3985                                  ;		mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  3986                                  ;		mov	[cs:bios_l], bx
  3987                                  
  3988                                  ; with the following information from msload, we don't need the
  3989                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  3990                                  ;     limitation of msbio.com file.
  3991                                  
  3992                                  		; 21/12/2022
  3993 00001661 FA                      		cli
  3994                                  
  3995 00001662 0E                      		push	cs		; Save a peck of interrupt vectors...
  3996 00001663 07                      		pop	es
  3997                                  		;push	cx
  3998                                  		;push	di
  3999                                  		; 20/12/2022
  4000 00001664 B105                    		mov	cl, 5
  4001                                  		;mov	cx, 5		; NUMROMVECTORS
  4002                                  					; no. of rom vectors to	be saved
  4003                                  		;mov	si, offset RomVectors ; point to list of int vectors
  4004 00001666 BE[0001]                		mov	si, RomVectors
  4005                                  next_int_:		
  4006 00001669 2E                      		cs	; 16/10/2022
  4007 0000166A AC                      		lodsb		
  4008                                  		;lods	byte ptr cs:[si] ; cs lodsb
  4009 0000166B 98                      		cbw			; ax = interrupt number
  4010 0000166C D1E0                    		shl	ax, 1
  4011 0000166E D1E0                    		shl	ax, 1		; int no * 4
  4012 00001670 89C7                    		mov	di, ax		; interrupt vector address
  4013 00001672 87F7                    		xchg	si, di		; rombios interrupt vector address in si
  4014                                  					; saving address in di
  4015                                  		;lodsw			; movsw
  4016                                  		;stosw
  4017                                  		;lodsw			; movsw
  4018                                  		;stosw			; save the vector
  4019                                  		; 20/12/2022
  4020 00001674 A5                      		movsw
  4021 00001675 A5                      		movsw		
  4022                                  
  4023 00001676 87F7                    		xchg	si, di
  4024 00001678 E2EF                    		loop	next_int_
  4025                                  		
  4026                                  		;pop	di
  4027                                  		;pop	cx
  4028                                  
  4029                                  ; we need to save int13 in two places in case we are running on an at.
  4030                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  4031                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  4032                                  ; rom int13 routine, we must have that rom address also stored away.
  4033                                  
  4034                                  		; 20/12/2022
  4035                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  4036                                  		;mov	[cs:Orig13], ax
  4037                                  		;mov	ax, [cs:Old13+2]
  4038                                  		;mov	[cs:Orig13+2], ax
  4039                                  
  4040                                  		; 16/10/2022
  4041 0000167A C7064C00[4F07]          		mov	word [13h*4], block13
  4042                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  4043                                  					; set up int 13	for new	action
  4044 00001680 8C0E4E00                		mov	[13h*4+2], cs
  4045                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  4046 00001684 C7065400[FE07]          		mov	word [15h*4], Int15
  4047                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  4048                                  					; set up int 15	for new	action
  4049 0000168A 8C0E5600                		mov	[15h*4+2], cs
  4050                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  4051 0000168E C7066400[BE07]          		mov	word [19h*4], int19
  4052                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  4053                                  					; set up int 19	for new	action
  4054 00001694 8C0E6600                		mov	[19h*4+2], cs
  4055                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  4056                                  
  4057                                  		; 20/12/2022
  4058 00001698 0E                      		push	cs
  4059 00001699 1F                      		pop	ds
  4060                                  		
  4061 0000169A A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  4062 0000169D A3[B400]                		mov	[Orig13], ax
  4063 000016A0 A1[0801]                		mov	ax, [Old13+2]
  4064 000016A3 A3[B600]                		mov	[Orig13+2], ax
  4065                                  					; ;
  4066 000016A6 FB                      		sti
  4067 000016A7 CD11                    		int	11h		; EQUIPMENT DETERMINATION
  4068                                  					; Return: AX = equipment flag bits
  4069                                  
  4070                                  ; we have to support a system that does not have any diskette
  4071                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  4072                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  4073                                  ; otherwise, the system has only hardfiles.
  4074                                  ;
  4075                                  ; important thing is that still, for compatibility reason, the drive letter
  4076                                  ; for the hardfiles start from "c".  so, we still need to allocate dummy bds
  4077                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  4078                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  4079                                  ; drives will get "invalid drive letter ..." message. we are going to
  4080                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  4081                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  4082                                  
  4083                                  ; check the register returned by the equipment determination interrupt
  4084                                  ; we have to handle the case of no diskettes in the system by faking
  4085                                  ; two dummy drives.
  4086                                  ;
  4087                                  ; if the register indicates that we do have floppy drives we don't need
  4088                                  ; to do anything special.
  4089                                  ;
  4090                                  ; if the register indicates that we don't have any floppy drives then
  4091                                  ; what we need to do is set the fakefloppydrv variable, change the
  4092                                  ; register to say that we do have floppy drives and then go to execute
  4093                                  ; the code which starts at notsingle. this is because we can skip the
  4094                                  ; code given below which tries to find if there are one or two drives
  4095                                  ; since we already know about this.
  4096                                  
  4097                                  		; 06/05/2019 - Retro DOS v4.0
  4098 000016A9 88C1                    		mov	cl, al
  4099                                  
  4100                                  		; 12/12/2022
  4101 000016AB A801                    		test	al, 1
  4102                                  		;test	ax, 1		; floppy drives	present	?
  4103 000016AD 751F                    		jnz	short normalfloppydrv ;	yes.
  4104                                  
  4105                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  4106                                  ; whether it is an old ROM BIOS or a new one
  4107                                  ;
  4108                                  ; WARNING !!!
  4109                                  ;
  4110                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  4111                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  4112                                  
  4113                                  		; 20/12/2022
  4114                                  		;push	ax
  4115                                  		;push	bx
  4116                                  		;push	cx
  4117 000016AF 52                      		push	dx
  4118                                  		;push	di
  4119 000016B0 06                      		push	es
  4120 000016B1 B408                    		mov	ah, 8
  4121 000016B3 B200                    		mov	dl, 0
  4122 000016B5 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4123                                  					; DL = drive number
  4124                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4125                                  					; DL = number of consecutive drives
  4126                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4127 000016B7 7202                    		jc	short _gdskp_error
  4128                                  		;;mov	[cs:flp_drvs], dl
  4129                                  		; 20/12/2022
  4130                                  		; ds = cs
  4131                                  		;mov	[flp_drvs], dl
  4132 000016B9 88D1                    		mov	cl, dl
  4133                                  _gdskp_error:	
  4134                                  		; 20/12/2022			
  4135 000016BB 07                      		pop	es
  4136                                  		;pop	di
  4137 000016BC 5A                      		pop	dx
  4138                                  		;pop	cx
  4139                                  		;pop	bx
  4140                                  		;pop	ax
  4141                                  		
  4142 000016BD 720F                    		jc	short normalfloppydrv
  4143                                  					; if error it is an old ROM BIOS
  4144                                  					; so, lets assume that ROM BIOS lied
  4145                                  		; 20/12/2022
  4146                                  		; ds = cs
  4147                                  		;cmp	byte [flp_drvs], 0
  4148                                  		;;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  4149                                  		;jz	short _set_fake_flpdrv
  4150                                  		;;mov	al, [cs:flp_drvs]
  4151                                  		;mov	al, [flp_drvs]
  4152                                  		;;dec	al		; make it zero based
  4153                                  		;; 18/12/2022
  4154                                  		;dec	ax
  4155                                  		;jmp	short got_num_flp_drvs
  4156                                  		
  4157                                  		; 20/12/2022
  4158 000016BF 08C9                    		or	cl, cl ; [flp_drvs]
  4159 000016C1 7403                    		jz	short _set_fake_flpdrv		
  4160 000016C3 49                      		dec	cx	
  4161 000016C4 EB0C                    		jmp	short got_num_flp_drvs
  4162                                  ; ----------------------------------------------------------------------------
  4163                                  
  4164                                  _set_fake_flpdrv:
  4165                                  		;20/12/2022
  4166                                  		; ds = cs
  4167 000016C6 FEC1                    		inc	cl	; cl = 1
  4168 000016C8 880E[8F15]              		mov	[fakefloppydrv], cl ; 1
  4169                                  		;mov	byte [fakefloppydrv], 1		
  4170                                  		;;mov	byte [cs:fakefloppydrv], 1
  4171                                  					; we don't have any floppy drives.
  4172                                  		; 20/12/2022
  4173                                  		;mov	ax, 1
  4174 000016CC EB0A                    		jmp	short settwodrive ; well then set it for two drives!
  4175                                  ; ----------------------------------------------------------------------------
  4176                                  
  4177                                  normalfloppydrv:			; yes, bit 0 is 1.			
  4178                                  		; 20/12/2022
  4179                                  		;rol	al, 1		; there	exist floppy drives.
  4180                                  		;rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  4181 000016CE D0C1                    		rol	cl, 1
  4182 000016D0 D0C1                    		rol	cl, 1
  4183                                  got_num_flp_drvs:			
  4184                                  		;;and	ax, 3		; only look at bits 0 &	1
  4185                                  		; 18/12/2022
  4186                                  		;and	al, 3
  4187                                  		; 20/12/2022
  4188 000016D2 80E103                  		and	cl, 3
  4189 000016D5 7505                    		jnz	short notsingle	; zero means single drive system
  4190                                  		; 20/12/2022
  4191 000016D7 41                      		inc	cx
  4192                                  		;inc	ax		; pretend it's a two drive system
  4193                                  settwodrive:				; set this to two fakedrives
  4194                                  		; 20/12/2022
  4195                                  		; ds = cs
  4196 000016D8 FE06[7800]              		inc	byte [single]
  4197                                  		;inc	byte [cs:single] ; remember this
  4198                                  notsingle:	
  4199                                  		; 20/12/2022			
  4200                                  		;inc	ax		; ax has number	of drives, 2-4
  4201                                  		;			; is also 0 indexed boot drive if we
  4202                                  		;			; booted off hard file
  4203                                  		;mov	cl, al		; ch is	fat id,	cl # floppies
  4204                                  		; 20/12/2022
  4205 000016DC FEC1                    		inc	cl	; cl >= 2
  4206                                  
  4207                                  ; 16/10/2022
  4208                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  4209                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  4210                                  BRKADR	 EQU	1BH * 4	; 6CH, 1BH break vector address
  4211                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  4212                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  4213                                  SEC9	EQU	522h	; address of disk parameters
  4214                                  CHROUT	EQU	29h
  4215                                  LSTDRV	EQU     504h
  4216                                  
  4217                                  ; determine whether we booted from floppy or hard disk...
  4218                                  
  4219                                  		; 20/12/2022
  4220 000016DE 88C8                    		mov	al, cl	; 26/05/2019
  4221                                  
  4222 000016E0 F6C280                  		test	dl, 80h		; boot from floppy ?
  4223 000016E3 7502                    		jnz	short gothrd	; no.
  4224 000016E5 31C0                    		xor	ax, ax		; indicate boot	from drive a
  4225                                  gothrd:					
  4226                                  
  4227                                  ; MSDOS 6.0
  4228                                  ;   ax = 0-based drive we booted from
  4229                                  ;   bios_l, bios_h set.
  4230                                  ;   cl = number of floppies including fake one
  4231                                  ;   ch = media byte
  4232                                  
  4233                                  ; Retro DOS 4.0 - 27/12/2018 
  4234                                  ;  (from Retro DOS v2.0 boot sector)
  4235                                  ;   dl = int 13 drive number we booted from
  4236                                  ;   dh = media byte
  4237                                  
  4238                                  		; 20/12/2022
  4239 000016E7 88F5                    		mov	ch, dh		; 01/07/2018
  4240                                  
  4241                                  		; cl = number of floppies
  4242                                  		; ch = media byte
  4243                                  
  4244                                  		; set up local stack
  4245                                  
  4246                                  		; 20/12/2022
  4247                                  		;xor	dx, dx		; ax = 0-based drive we	booted from
  4248                                  					; bios_l, bios_h set.
  4249                                  					; cl = number of floppies including fake one
  4250                                  					; ch = media byte
  4251                                  		; 20/12/2022
  4252                                  		; es = ds = cs
  4253                                  		; ss = 0
  4254                                  		; sp = 700h
  4255                                  
  4256                                  		; 20/12/2022
  4257                                  		;cli
  4258                                  		;mov	ss, dx		; set stack segment and stack pointer
  4259                                  		;mov	sp, 700h
  4260                                  		;sti
  4261                                  
  4262 000016E9 51                      		push	cx ; (***) 	; save number of floppies and media byte
  4263                                  		
  4264 000016EA 88EC                    		mov	ah, ch		; FAT ID to AH
  4265 000016EC 50                      		push	ax ; (**)	; save boot drive number and media byte
  4266                                  		
  4267                                  ; let model_byte, secondary_model_byte be set here!!!
  4268                                  
  4269 000016ED B4C0                    		mov	ah, 0C0h
  4270 000016EF CD15                    		int	15h	; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  4271 000016F1 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  4272 000016F3 80FC00                  		cmp	ah, 0
  4273 000016F6 7510                    		jnz	short no_rom_system_conf
  4274                                  
  4275                                  ;		; 20/12/2022
  4276                                  ;		; (Programmer's Guide to the AMIBIOS, page 268)
  4277                                  ;		; (https://stanislavs.org/helppc/int_15-c0.html)
  4278                                  ;
  4279                                  ;		INT 15h, ah = C0h - Return System Configuration Parameters (PS/2 only)
  4280                                  ;
  4281                                  ;		on return:
  4282                                  ;		CF = 0 if successful
  4283                                  ;		   = 1 if error
  4284                                  ;		AH = when CF set, 80h for PC & PCjr, 86h for XT
  4285                                  ;	     	    (BIOS after 11/8/82) and AT (BIOS after 1/10/84)
  4286                                  ;
  4287                                  ;		ES:BX = pointer to system descriptor table in ROM of the format:
  4288                                  ;
  4289                                  ;		Offset Size	     Description
  4290                                  ;
  4291                                  ;		  00   word   length of descriptor (8 minimum)
  4292                                  ;		  02   byte   model byte (same as F000:FFFE, not reliable)
  4293                                  ;		  03   byte   secondary model byte
  4294                                  ;		  04   byte   BIOS revision level (zero based)
  4295                                  ;		  05   byte   feature information, see below
  4296                                  ;		  06   dword  reserved
  4297                                  
  4298                                  		; 20/12/2022
  4299                                  		; ds = cs
  4300 000016F8 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  4301 000016FC A2[3606]                		mov	[model_byte], al
  4302                                  		;mov	[cs:model_byte], al
  4303                                  					; get/save model byte
  4304 000016FF 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  4305 00001703 A2[3706]                		mov	[secondary_model_byte], al
  4306                                  		;mov	[cs:secondary_model_byte], al
  4307                                  					; get/save secondary model byte
  4308 00001706 EB0C                    		jmp	short turn_timer_on
  4309                                  ;-----------------------------------------------------------------------------
  4310                                  
  4311                                  no_rom_system_conf:			
  4312 00001708 BEFFFF                  		mov	si, 0FFFFh
  4313 0000170B 8EC6                    		mov	es, si
  4314                                  		; 20/12/2022
  4315 0000170D 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  4316 00001711 A2[3606]                		mov	[model_byte], al
  4317                                  		;mov	[cs:model_byte], al ; save model byte
  4318                                  turn_timer_on:				
  4319 00001714 B020                    		mov	al, 20h	; ' '   ; turn on the timer
  4320 00001716 E620                    		out	20h, al		; Interrupt controller,	8259A.
  4321                                  					; AKPORT
  4322                                  
  4323                                  ; some olivetti m24 machines have an 8530 serial communications
  4324                                  ; chip installed at io address 50h and 52h. if we're running
  4325                                  ; on one of those, we must inhibit the normal aux port initialization
  4326                                  
  4327                                  		; 20/12/2022
  4328                                  		; ds = cs
  4329 00001718 803E[3606]00            		cmp	byte [model_byte], 0
  4330                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  4331 0000171D 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  4332                                  					; (except olivetti m24)
  4333 0000171F E466                    		in	al, 66h		; is 8530 installed?
  4334 00001721 A820                    		test	al, 20h
  4335 00001723 740A                    		jz	short not_olivetti_m24 ; we're done if not
  4336 00001725 B00F                    		mov	al, 0Fh		; double check
  4337 00001727 E650                    		out	50h, al
  4338 00001729 E450                    		in	al, 50h
  4339 0000172B A801                    		test	al, 1		; this test was	copied from olivetti
  4340 0000172D 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  4341                                  
  4342                                  not_olivetti_m24:
  4343 0000172F B003                    		mov	al, 3		; init com4
  4344 00001731 E82D08                  		call	aux_init
  4345 00001734 B002                    		mov	al, 2		; init com3
  4346 00001736 E82808                  		call	aux_init
  4347 00001739 B001                    		mov	al, 1		; init com2
  4348 0000173B E82308                  		call	aux_init
  4349 0000173E 30C0                    		xor	al, al		; init com1
  4350 00001740 E81E08                  		call	aux_init
  4351                                  
  4352                                  skip_aux_port_init:			
  4353 00001743 B002                    		mov	al, 2		; init lpt3
  4354 00001745 E81108                  		call	print_init
  4355 00001748 B001                    		mov	al, 1		; init lpt2
  4356 0000174A E80C08                  		call	print_init
  4357 0000174D 30C0                    		xor	al, al		; init lpt1
  4358 0000174F E80708                  		call	print_init
  4359                                  
  4360 00001752 31D2                    		xor	dx, dx	; 0
  4361 00001754 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  4362 00001756 8EC2                    		mov	es, dx
  4363 00001758 31C0                    		xor	ax, ax
  4364                                  		; 16/10/2022
  4365 0000175A BF3405                  		mov	di, INITSPOT	; 0534h
  4366                                  		;mov	di, 534h	; INITSPOT (0000h:0534h)
  4367                                  					; IBM wants 4 zeros here
  4368 0000175D AB                      		stosw
  4369 0000175E AB                      		stosw
  4370 0000175F 8CC8                    		mov	ax, cs		; fetch	segment
  4371 00001761 C7066C00[C906]          		mov	word [BRKADR], cbreak
  4372                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  4373                                  					; break	entry point
  4374 00001767 A36E00                  		mov	[BRKADR+2], ax		
  4375                                  		;mov	ds:6Eh,	ax	; vector for break
  4376 0000176A C706A400[3D07]          		mov	word [CHROUT*4], outchr
  4377                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  4378 00001770 A3A600                  		mov	[CHROUT*4+2], ax
  4379                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  4380                                  
  4381 00001773 BF0400                  		mov	di, 4
  4382 00001776 BB[CF06]                		mov	bx, intret ; 19/10/2022
  4383                                  		;mov	bx, offset intret ; intret (cs:intret)
  4384                                  					; will initialize rest of interrupts
  4385 00001779 93                      		xchg	ax, bx
  4386 0000177A AB                      		stosw			; location 4
  4387 0000177B 93                      		xchg	ax, bx		; cs:
  4388 0000177C AB                      		stosw			; int 1	; location 6
  4389 0000177D 83C704                  		add	di, 4
  4390 00001780 93                      		xchg	ax, bx
  4391 00001781 AB                      		stosw			; location 12
  4392 00001782 93                      		xchg	ax, bx		; cs:
  4393 00001783 AB                      		stosw			; int 3	; location 14
  4394 00001784 93                      		xchg	ax, bx
  4395 00001785 AB                      		stosw			; location 16
  4396 00001786 93                      		xchg	ax, bx		; cs:
  4397 00001787 AB                      		stosw			; int 4	; location 18
  4398                                  
  4399                                  
  4400                                  ;		; 20/12/2022
  4401                                  ;		; (https://stanislavs.org/helppc/bios_data_area.html)
  4402                                  ;		Address Size	   Description	 (BIOS/DOS Data Area)
  4403                                  ;	
  4404                                  ;		50:00	byte	Print screen status byte
  4405                                  ;				 00 = PrtSc not active,
  4406                                  ;				 01 = PrtSc in progress
  4407                                  ;				 FF = error
  4408                                  ;		50:01  3 bytes	Used by BASIC
  4409                                  ;		50:04	byte	DOS single diskette mode flag, 0=A:, 1=B:
  4410                                  ;		50:05  10bytes	POST work area
  4411                                  ;		50:0F	byte	BASIC shell flag; set to 2 if current shell
  4412                                  ;		50:10	word	BASICs default DS value (DEF SEG)
  4413                                  ;		50:12	dword	Pointer to BASIC INT 1C interrupt handler
  4414                                  ;		50:16	dword	Pointer to BASIC INT 23 interrupt handler
  4415                                  ;		50:1A	dword	Pointer to BASIC INT 24 disk error handler
  4416                                  ;		50:20	word	DOS dynamic storage
  4417                                  ;		50:22  14bytes	DOS diskette initialization table (INT 1E)
  4418                                  ;		50:30	4bytes	MODE command
  4419                                  ;		70:00		I/O drivers from IO.SYS/IBMBIO.COM
  4420                                  
  4421 00001788 89160005                		mov	[0500h], dx ; 0
  4422                                  		;mov	ds:500h, dx	; set print screen & break = 0
  4423 0000178C 89160405                		mov	[LSTDRV], dx	; [0504h]
  4424                                  		;mov	ds:504h, dx	; clean	out last drive spec
  4425                                  
  4426                                  ; we need to initialize the cs:motorstartup variable from the disk
  4427                                  ; parameter table at sec9. the offsets in this table are defined in
  4428                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  4429                                  
  4430 00001790 A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  4431                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  4432                                  					; [522h+0Ah]
  4433                                  		; 20/12/2022
  4434                                  		; ds = 0
  4435                                  
  4436 00001793 2EA2[2601]              		mov	[cs:motorstartup], al
  4437 00001797 2E803E[3606]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  4438 0000179D 720B                    		jb	short no_diddle	; no
  4439 0000179F C7062B050F02            		mov	word [SEC9+09h], 20Fh
  4440                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  4441                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  4442 000017A5 C6062205DF              		mov	byte [SEC9+0], 0DFh
  4443                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  4444                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  4445                                  no_diddle:				
  4446 000017AA CD12                    		int	12h		; MEMORY SIZE -
  4447                                  					; Return: AX = number of contiguous 1K blocks of memory
  4448 000017AC B106                    		mov	cl, 6
  4449 000017AE D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  4450                                  		
  4451                                  		; 20/12/2022
  4452                                  		; 03/07/2018 - 27/12/2018
  4453                                  		;pop	cx ; (**)
  4454                                  		;mov	[cs:drvfat], cx
  4455                                  		
  4456 000017B0 50                      		push	ax ; (*)	; save real top	of memory
  4457                                  
  4458                                  		; 27/12/2018 - (MSDOS 6.0, 6.21)
  4459                                  
  4460                                  ;M068 - BEGIN
  4461                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  4462                                  
  4463                                  		; 20/12/2022
  4464                                  		; ds = 0
  4465                                  
  4466                                  		;push	ds
  4467                                  		;push	bx		; pushes not required but since this
  4468                                  					; happens to be a last minute change
  4469                                  					; & since it is only init code.
  4470                                  		;xor	bx, bx
  4471                                  		;mov	ds, bx
  4472                                  		
  4473                                  		;mov	bx, ds:0BCh	; [2Fh*4]
  4474 000017B1 8B1EBC00                		mov	bx, [2Fh*4]
  4475                                  		;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  4476 000017B5 8E1EBE00                		mov	ds, [2Fh*4+2]
  4477 000017B9 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  4478                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  4479 000017BE 750F                    		jnz	short SkipRPL
  4480 000017C0 807F054C                		cmp	byte [bx+5], 'L'
  4481                                  		;cmp	byte ptr [bx+5], 'L'
  4482 000017C4 7509                    		jnz	short SkipRPL
  4483 000017C6 89C2                    		mov	dx, ax		; get TOM into DX
  4484 000017C8 B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  4485 000017CB CD2F                    		int	2Fh		; Get new TOM from any RPL
  4486 000017CD 89D0                    		mov	ax, dx
  4487                                  SkipRPL:	
  4488                                  		; 20/12/2022		
  4489                                  		;pop	bx
  4490                                  		;pop	ds
  4491                                  
  4492                                  ;M068 - END
  4493                                  		; 20/12/2022
  4494                                  		; 27/12/2018
  4495 000017CF 0E                      		push	cs
  4496 000017D0 1F                      		pop	ds
  4497                                  
  4498                                  		; 18/03/2019 - Retro DOS v4.0
  4499                                  		;sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  4500                                  		;mov	[cs:fatloc], ax	; location to read fat
  4501                                  
  4502                                  		; 01/07/2018
  4503                                  		; 08/04/2018
  4504                                  		; 28/03/2018
  4505                                  		; MSDOS 6.0 - MSINIT.ASM, 1991
  4506 000017D1 83E840                  		sub	ax, 64
  4507 000017D4 A3[8915]                		mov	[init_bootseg], ax ; 20/12/2022
  4508                                  		;mov	[cs:init_bootseg], ax
  4509                                  
  4510                                  		; 27/12/2018 - Retro DOS v4.0
  4511                                  		;pop	ax ; (*)	; get back real top of memory
  4512 000017D7 5A                      		pop	dx ; (*)
  4513                                  
  4514                                  		; 20/12/2022
  4515                                  		; 27/12/2018
  4516 000017D8 59                      		pop	cx ; (**)
  4517 000017D9 890E[8615]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  4518                                  
  4519                                  		; 20/12/2022
  4520                                  
  4521                                  		;mov	dx, 46Dh	; SYSINIT segment
  4522 000017DD BA3104                  		mov	dx, SYSINITSEG	; 17/10/2022
  4523 000017E0 8EDA                    		mov	ds, dx
  4524                                  
  4525                                  ; set pointer to resident device driver chain
  4526                                  
  4527                                  		; 17/10/2022
  4528 000017E2 C706[7302][2300]        		mov	word [DEVICELIST], res_dev_list
  4529                                  		;mov	word [273h], res_dev_list
  4530                                  		;;mov	word ptr ds:273h, offset res_dev_list
  4531                                  					; [SYSINIT+DEVICE_LIST]
  4532 000017E8 8C0E[7502]              		mov	[DEVICELIST+2], cs		
  4533                                  		;mov	[275h], cs
  4534                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  4535                                  
  4536 000017EC A3[9202]                		mov	[MEMORYSIZE], ax
  4537                                  		;mov	[292h], ax
  4538                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  4539                                  
  4540 000017EF FEC1                    		inc	cl
  4541 000017F1 880E[9602]              		mov	[DEFAULTDRIVE], cl
  4542                                  		;mov	[296h], cl
  4543                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  4544                                  
  4545 000017F5 C706[7102]1209          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  4546                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  4547                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  4548                                  					; dos_load_seg
  4549                                  
  4550                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  4551                                  ; printer cards. we initialize this value to point to an iret only if
  4552                                  ;
  4553                                  ; 1) the original segment points to storage inside valid ram.
  4554                                  ;
  4555                                  ; 2) the original segment is 0F000:xxxx
  4556                                  
  4557                                  		;;mov	ax, 46Dh	; SYSINIT segment
  4558                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  4559                                  		;mov	es, ax
  4560                                  		; 20/12/2022
  4561                                  		;push	ds ; SYSINITSEG
  4562                                  		;pop	es
  4563 000017FB 8EC2                    		mov	es, dx ; SYSINITSEG
  4564 000017FD 31C0                    		xor	ax, ax ; 0
  4565 000017FF 8ED8                    		mov	ds, ax		; segment 0
  4566                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  4567 00001801 A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  4568                                  		; 18/10/2022
  4569 00001804 263B06[9202]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  4570                                  		;cmp	ax, es:292h	; [ES:MEMORY_SIZE]  ; (condition 1)
  4571 00001809 7605                    		jbe	short resetintf
  4572 0000180B 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  4573 0000180E 750A                    		jnz	short keepintf
  4574                                  resetintf:	
  4575 00001810 C7063C00[CF06]          		mov	word [0Fh*4], intret			
  4576                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  4577 00001816 8C0E3E00                		mov	word [0Fh*4+2], cs
  4578                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  4579                                  keepintf:				
  4580                                  ; end important
  4581                                  
  4582                                  ; 17/10/2022
  4583                                  ; 28/12/2018 - Retro DOS v4.0
  4584                                  
  4585                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  4586                                  ;
  4587                                  ; we will check if the system has ibm extended keyboard by
  4588                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  4589                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  4590                                  ; for the extended keyboard function. use cx as the temporary register.
  4591                                  
  4592                                  		; 20/12/2022
  4593                                  		; ds = 0
  4594                                  		;xor	cx, cx
  4595                                  		;mov	ds, cx
  4596                                  
  4597 0000181A 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  4598                                  
  4599                                  		; 20/12/2022
  4600                                  		; 20/03/2019
  4601 0000181E 0E                      		push	cs
  4602 0000181F 1F                      		pop	ds
  4603                                  
  4604                                  		;test	cl, 00010000b ; 10h
  4605 00001820 F6C110                  		test	cl, 10h		; extended keyboard ?
  4606 00001823 740A                    		jz	short org_key	; no, original keyboard
  4607                                  
  4608                                  		; 20/12/2022
  4609                                  		;  ds = cs
  4610 00001825 C606[E504]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  4611 0000182A C606[E604]11            		mov	byte [keysts_func], 11h
  4612                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  4613                                  		;mov	byte [cs:keysts_func], 11h
  4614                                  					; change for extended keyboard functions
  4615                                  org_key:
  4616                                  
  4617                                  ; 02/06/2018 - Retro DOS v3.0
  4618                                  
  4619                                  ;**************************************************************
  4620                                  ;	will initialize the number of drives
  4621                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  4622                                  ;	the indications are as follows:
  4623                                  ;
  4624                                  ;	bits	7	6	drives
  4625                                  ;		0	0	1
  4626                                  ;		0	1	2
  4627                                  ;		1	0	3
  4628                                  ;		1	1	4
  4629                                  ;**************************************************************
  4630                                  		
  4631                                  		; 20/12/2022
  4632                                  		; ds = cs		
  4633                                  		;push	cs
  4634                                  		;pop	ds
  4635                                  		; 21/12/2022
  4636                                  		;push	cs
  4637                                  		;pop	es
  4638                                  
  4639 0000182F E87708                  		call	cmos_clock_read	; If cmos clock	exists,
  4640                                  					; then set the system time according to	that.
  4641                                  					; also,	reset the cmos clock rate.
  4642                                  		; 18/10/2022
  4643                                  		;mov	word ptr BData_start, offset harddrv ;
  4644                                  					; set up pointer to hdrive
  4645                                  		; 02/10/2022
  4646 00001832 C706[0000][B708]        		mov	word [hdrv_pat], harddrv 
  4647                                  		
  4648                                  		; 20/12/2022
  4649                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)			
  4650 00001838 58                      		pop	ax ; (***)	; number of floppies and FAT ID
  4651 00001839 30E4                    		xor	ah, ah		; chuck	fat id byte
  4652 0000183B A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  4653 0000183E A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  4654 00001841 D1E0                    		shl	ax, 1
  4655 00001843 0106[0016]              		add	[last_dskdrv_table], ax
  4656                                  
  4657 00001847 B280                    		mov	dl, 80h
  4658 00001849 B408                    		mov	ah, 8
  4659 0000184B CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4660                                  					; DL = drive number
  4661                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4662                                  					; DL = number of consecutive drives
  4663                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4664 0000184D 7204                    		jc	short enddrv
  4665 0000184F 8816[FF15]              		mov	[hnum], dl	; save number of hard disk drives
  4666                                  enddrv:
  4667                                  		; 21/12/2022
  4668 00001853 0E                      		push	cs
  4669 00001854 07                      		pop	es
  4670                                  
  4671                                  ; scan the list of drives to determine their type. we have three flavors of
  4672                                  ; diskette drives:
  4673                                  ;
  4674                                  ;   48tpi drives    we do nothing special for them
  4675                                  ;   96tpi drives    mark the fact that they have changeline support.
  4676                                  ;   3.5"  drives    mark changeline support and small.
  4677                                  ;
  4678                                  ; the following code uses registers for certain values:
  4679                                  ;
  4680                                  ;   dl - physical drive
  4681                                  ;   ds:di - points to current bds
  4682                                  ;   cx - flag bits for bds
  4683                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  4684                                  					
  4685 00001855 30D2                    		xor	dl, dl
  4686                                  
  4687                                  		; 20/12/2022
  4688                                  		; ds = cs
  4689                                  		; 17/06/2018		 
  4690                                  		;push	cs
  4691                                  		;pop	ds
  4692                                  
  4693 00001857 C606[2C01]09            		mov	byte [eot], 9
  4694 0000185C BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  4695                                  					; to set aside two bdss	for the	two fake floppy	drives
  4696                                  
  4697                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  4698                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  4699                                  
  4700                                  ; check to see if we are faking floppy drives. if not we don't
  4701                                  ; do anything special. if we are faking floppy drives we need
  4702                                  ; to set aside two bdss for the two fake floppy drives. we
  4703                                  ; don't need to initalise any fields though. so starting at start_bds
  4704                                  ; use the link field in the bds structure to go to the second bds
  4705                                  ; in the list and initalise it's link field to -1 to set the end of
  4706                                  ; the list. then jump to the routine at dohard to allocate/initialise
  4707                                  ; the bds for harddrives.
  4708                                  
  4709 0000185F 803E[8F15]01            		cmp	byte [fakefloppydrv], 1
  4710 00001864 750B                    		jnz	short loop_drive
  4711 00001866 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4712                                  					; di <-	first bds link
  4713 00001868 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4714                                  					; di <-	second bds link
  4715 0000186A C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  4716 0000186E E90F01                  		jmp	dohard		; allocate/initialise bds for harddrives
  4717                                  ;-----------------------------------------------------------------------------
  4718                                  
  4719                                  loop_drive:				
  4720 00001871 3A16[7500]              		cmp	dl, [drvmax]
  4721 00001875 7203                    		jb	short got_more
  4722 00001877 E90201                  		jmp	done_drives
  4723                                  ;-----------------------------------------------------------------------------
  4724                                  
  4725                                  got_more:				
  4726 0000187A 31C9                    		xor	cx, cx		; zero all flags
  4727 0000187C 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4728                                  					; get next bds
  4729 0000187E B600                    		mov	dh, 0 ; ff48tpi
  4730                                  					; set form factor to 48	tpi
  4731 00001880 C606[8E15]28            		mov	byte [num_cyln], 40 ; 40 tracks per side
  4732                                  		
  4733                                  		; 20/12/2022
  4734                                  		;push	ds ; 11/05/2019	
  4735 00001885 57                      		push	di
  4736 00001886 52                      		push	dx
  4737 00001887 51                      		push	cx
  4738 00001888 06                      		push	es ; ((*)) ; 20/12/2022	
  4739                                  		
  4740 00001889 B408                    		mov	ah, 8
  4741 0000188B CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4742                                  					; DL = drive number
  4743                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4744                                  					; DL = number of consecutive drives
  4745                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4746 0000188D 7276                    		jc	short noparmsfromrom
  4747                                  
  4748                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  4749                                  ; in this case, we are going to put bogus informations to bds table.
  4750                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  4751                                  ; they are calculated at the later time. this is just for the diagnostic
  4752                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  4753                                  ; this should only happen with drive b.
  4754                                  
  4755 0000188F 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  4756 00001892 7505                    		jnz	short pfr_ok
  4757                                  
  4758                                  		;mov	ch, 39		; rom gave wrong info.
  4759                                  		;mov	cl, 9		; let's default to 360k.
  4760                                  		; 20/12/2022
  4761 00001894 B90927                  		mov	cx, 2709h
  4762                                  
  4763 00001897 B601                    		mov	dh, 1
  4764                                  pfr_ok:					
  4765 00001899 FEC6                    		inc	dh		; make number of heads 1-based
  4766 0000189B FEC5                    		inc	ch		; make number of cylinders 1-based
  4767 0000189D 8836[8C15]              		mov	[num_heads], dh	; save parms returned by rom
  4768 000018A1 80E13F                  		and	cl, 3Fh	; 00111111b ; extract sectors/track
  4769 000018A4 880E[8D15]              		mov	[sec_trk], cl
  4770 000018A8 882E[8E15]              		mov	[num_cyln], ch	; assume less than 256 cylinders!!
  4771                                  
  4772                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  4773                                  
  4774 000018AC 3A0E[2C01]              		cmp	cl, [eot]	; may set carry
  4775                                  		;jbe	short eot_ok
  4776                                  		; 09/12/2022
  4777                                  		;jne	short eotok  ; wrong ! 14/08/2023
  4778                                  		; 14/08/2023
  4779 000018B0 7604                    		jbe	short eotok
  4780 000018B2 880E[2C01]              		mov	[eot], cl
  4781                                  ;eot_ok:					
  4782                                  eotok:
  4783                                  		; 20/12/2022
  4784 000018B6 07                      		pop	es ; ((*)) es = cs = ds		
  4785 000018B7 59                      		pop	cx
  4786 000018B8 5A                      		pop	dx
  4787 000018B9 5F                      		pop	di
  4788                                  		;pop	ds ; 20/12/2022
  4789                                  
  4790                                  ; Check	for presence of	changeline
  4791                                  
  4792 000018BA B415                    		mov	ah, 15h
  4793 000018BC CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4794                                  					; DL = drive ID
  4795                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4796                                  					; CX:DX	= number of sectors on the media
  4797 000018BE 720D                    		jc	short changeline_done
  4798 000018C0 80FC02                  		cmp	ah, 2		; check	for presence of	changeline
  4799 000018C3 7508                    		jnz	short changeline_done
  4800                                  
  4801                                  ; we have a drive with change line support.
  4802                                  
  4803 000018C5 80C902                  		or	cl, 2		; fchangeline
  4804                                  					; signal type
  4805 000018C8 C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  4806                                  
  4807                                  ; we now try to set up the form factor for the types of media that we know
  4808                                  ; and can recognise. for the rest, we set the form factor as "other".
  4809                                  
  4810                                  changeline_done:
  4811                                  
  4812                                  ; 40 cylinders and 9 or less sec/trk, treat as 48 tpi medium.
  4813                                  			
  4814 000018CD 803E[8E15]28            		cmp	byte [num_cyln], 40
  4815 000018D2 750B                    		jnz	short try_80
  4816 000018D4 803E[8D15]09            		cmp	byte [sec_trk], 9
  4817 000018D9 7653                    		jbe	short nextdrive
  4818                                  gotother:				
  4819 000018DB B607                    		mov	dh, 7 ; ffOther ; we have a "strange" medium 
  4820 000018DD EB4F                    		jmp	short nextdrive
  4821                                  ;-----------------------------------------------------------------------------
  4822                                  
  4823                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  4824                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  4825                                  
  4826                                  try_80:					
  4827 000018DF 803E[8E15]50            		cmp	byte [num_cyln], 80
  4828 000018E4 75F5                    		jnz	short gotother
  4829 000018E6 B609                    		mov	dh, 9 ; ff288	; assume 2.88 MB drive
  4830 000018E8 803E[8D15]24            		cmp	byte [sec_trk], 36 ; is it ?
  4831 000018ED 743F                    		jz	short nextdrive	; yeah,	go update
  4832                                  
  4833                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  4834                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  4835                                  		;mov	dh, ff144
  4836                                  		;cmp	byte [sec_trk], 18
  4837                                  		;je	short nextdrive
  4838                                  
  4839 000018EF 803E[8D15]0F            		cmp	byte [sec_trk], 15
  4840 000018F4 740B                    		jz	short got96
  4841                                  		
  4842 000018F6 803E[8D15]09            		cmp	byte [sec_trk], 9
  4843 000018FB 75DE                    		jnz	short gotother
  4844                                  		
  4845 000018FD B602                    		mov	dh, 2 ; ffSmall
  4846 000018FF EB2D                    		jmp	short nextdrive
  4847                                  ; ----------------------------------------------------------------------------
  4848                                  
  4849                                  got96:					
  4850 00001901 B601                    		mov	dh, 1 ; ff96tpi
  4851 00001903 EB29                    		jmp	short nextdrive
  4852                                  ; ----------------------------------------------------------------------------
  4853                                  
  4854                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  4855                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  4856                                  
  4857                                  noparmsfromrom:				
  4858                                  		; 20/12/2022
  4859 00001905 07                      		pop	es ; ((*)) 
  4860 00001906 59                      		pop	cx
  4861 00001907 5A                      		pop	dx
  4862 00001908 5F                      		pop	di
  4863                                  		;pop	ds ; 20/12/2022
  4864                                  		
  4865 00001909 B415                    		mov	ah, 15h
  4866 0000190B CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4867                                  					; DL = drive ID
  4868                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4869                                  					; CX:DX	= number of sectors on the media
  4870 0000190D 721F                    		jc	short nextdrive
  4871                                  		
  4872 0000190F 80FC02                  		cmp	ah, 2		; is there changeline?
  4873 00001912 751A                    		jnz	short nextdrive
  4874                                  
  4875 00001914 80C902                  		or	cl, 2 ; fchangeline
  4876 00001917 C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi drives
  4877 0000191C C606[8E15]50            		mov	byte [num_cyln], 80
  4878 00001921 B601                    		mov	dh, 1 ; ff96tpi 
  4879 00001923 B00F                    		mov	al, 15
  4880 00001925 3A06[2C01]              		cmp	al, [eot]
  4881 00001929 7603                    		jbe	short nextdrive ; eot_ok2
  4882 0000192B A2[2C01]                		mov	[eot], al
  4883                                  ; ----------------------------------------------------------------------------
  4884                                  
  4885                                  ;eot_ok2:
  4886                                  nextdrive:				
  4887 0000192E 80C920                  		or	cl, 20h	; fi_own_physical
  4888                                  					; set this true	for all	drives
  4889 00001931 88D7                    		mov	bh, dl		; save int13 drive number
  4890                                  
  4891                                  ; we need to do special things if we have a single drive system and are setting
  4892                                  ; up a logical drive. it needs to have the same int13 drive number as its
  4893                                  ; counterpart, but the next drive letter. also reset ownership flag.
  4894                                  ; we detect the presence of this situation by examining the flag single for the
  4895                                  ; value 2.
  4896 00001933 803E[7800]02            		cmp	byte [single], 2
  4897 00001938 7505                    		jnz	short not_special
  4898 0000193A FECF                    		dec	bh		; int13	drive number same for logical drive
  4899 0000193C 80F120                  		xor	cl, 20h	; fi_own_physical
  4900                                  					; reset	ownership flag for logical drive
  4901                                  not_special:
  4902                                  
  4903                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  4904                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  4905                                  ; form factor is of type "ffother".
  4906                                  				
  4907 0000193F 31C0                    		xor	ax, ax		; fill BDS for drive
  4908 00001941 A0[8C15]                		mov	al, [num_heads]
  4909 00001944 894536                  		mov	[di+36h], ax	; [di+BDS.rheads]
  4910 00001947 A0[8D15]                		mov	al, [sec_trk]
  4911 0000194A 894534                  		mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  4912 0000194D 894D23                  		mov	[di+23h], cx	; [di+BDS.flags]
  4913 00001950 887522                  		mov	[di+22h], dh	; [di+BDS.formfactor]
  4914 00001953 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  4915 00001956 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  4916 00001959 8A1E[8E15]              		mov	bl, [num_cyln]
  4917 0000195D 885D25                  		mov	[di+25h], bl	; [di+BDS.cylinders]
  4918 00001960 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  4919 00001965 7511                    		jnz	short no_single
  4920 00001967 C606[7800]02            		mov	byte [single], 2 ; Don't forget we have
  4921                                  					; single drive system
  4922                                  		; 18/12/2022
  4923 0000196C 80C910                  		or	cl, 10h
  4924                                  		;or	cx, 10h	; fi_am_mult
  4925                                  					; set that this	is one of several drives
  4926 0000196F 094D23                  		or	[di+23h], cx	; [di+BDS.flags]
  4927                                  					; save flags
  4928 00001972 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4929                                  					; move to next BDS in list
  4930 00001974 FEC2                    		inc	dl		; add a	number
  4931 00001976 EBB6                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  4932                                  ; ----------------------------------------------------------------------------
  4933                                  
  4934                                  no_single:				
  4935                                  		;inc	dl
  4936                                  		; 18/12/2022
  4937 00001978 42                      		inc	dx
  4938 00001979 E9F5FE                  		jmp	loop_drive
  4939                                  ; ----------------------------------------------------------------------------
  4940                                  
  4941                                  done_drives:	
  4942                                  		;mov	word [di+BDS.link], -1
  4943 0000197C C705FFFF                		mov	word [di], -1	; set link to null
  4944                                  
  4945                                  ; set up all the hard drives in	the system
  4946                                  
  4947                                  		; 20/12/2022
  4948                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  4949                                  dohard:					
  4950 00001980 8A36[FF15]              		mov	dh, [hnum]
  4951 00001984 08F6                    		or	dh, dh		; done if no hardfiles
  4952 00001986 745B                    		jz	short static_configure
  4953 00001988 B280                    		mov	dl, 80h
  4954                                  dohard1:				
  4955 0000198A 52                      		push	dx
  4956 0000198B 8B3E[0216]              		mov	di, [end_of_bdss]
  4957 0000198F 8A1E[7500]              		mov	bl, [drvmax]
  4958 00001993 B700                    		mov	bh, 0		; first	primary	partition (or active)
  4959 00001995 E8A701                  		call	sethard
  4960 00001998 7208                    		jb	short hardfile_err
  4961 0000199A E8C206                  		call	dmax_check	; error	if already 26 drives
  4962 0000199D 7303                    		jnb	short hardfile_err
  4963 0000199F E8D206                  		call	xinstall_bds	; insert new bds into linked list
  4964                                  hardfile_err:				
  4965 000019A2 5A                      		pop	dx
  4966 000019A3 FEC2                    		inc	dl		; next hard drive
  4967 000019A5 FECE                    		dec	dh
  4968 000019A7 75E1                    		jnz	short dohard1
  4969                                  
  4970                                  ; end of physical drive	initialization
  4971                                  
  4972                                  ; *** do not change the position of the following statement.
  4973                                  ; *** domini routine will use [drvmax] value for the start of the logical
  4974                                  ; *** drive number of mini disk(s).
  4975                                  					
  4976 000019A9 E8BE05                  		call	domini		; for setting up mini disks, if found
  4977                                  
  4978                                  ; -- begin added section
  4979                                  
  4980 000019AC 8A36[FF15]              		mov	dh, [hnum]	; we already know this is >0
  4981 000019B0 B280                    		mov	dl, 80h
  4982                                  dohardx1:				
  4983 000019B2 B701                    		mov	bh, 1		; do all subsequent primary partitions
  4984                                  dohardx2:				
  4985 000019B4 52                      		push	dx
  4986 000019B5 53                      		push	bx
  4987 000019B6 8B3E[0216]              		mov	di, [end_of_bdss]
  4988 000019BA 8A1E[7500]              		mov	bl, [drvmax]
  4989 000019BE E87E01                  		call	sethard
  4990 000019C1 720E                    		jb	short dohardx4	; move to next hardfile if error
  4991 000019C3 E89906                  		call	dmax_check	; make sure <=26 drives
  4992 000019C6 7309                    		jnb	short dohardx4	; skip if error
  4993 000019C8 E8A906                  		call	xinstall_bds	; insert new bds into linked list
  4994 000019CB 5B                      		pop	bx		; get partition number
  4995 000019CC 5A                      		pop	dx		; restore physical drive counts
  4996 000019CD FEC7                    		inc	bh
  4997 000019CF EBE3                    		jmp	short dohardx2	; keep looping until we fail
  4998                                  ; ----------------------------------------------------------------------------
  4999                                  
  5000                                  dohardx4:				
  5001 000019D1 5B                      		pop	bx		; unjunk partition number from stack
  5002 000019D2 5A                      		pop	dx		; restore physical drive counts
  5003 000019D3 FEC2                    		inc	dl		; next hard drive
  5004 000019D5 FECE                    		dec	dh
  5005 000019D7 75D9                    		jnz	short dohardx1
  5006                                  
  5007                                  ; -- end changed section
  5008                                  
  5009                                  ;******************************************************************************
  5010                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  5011                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  5012                                  ; than two diskette drives
  5013                                  ;
  5014                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  5015                                  ;		as usual and then rescan the bds chain to adjust the  drive
  5016                                  ;		letters. to do this, scan for disk drives and assign logical
  5017                                  ;		drive number starting from 2 and then rescan diskette drives
  5018                                  ;		and assign next to the last logical drive number of last disk
  5019                                  ;		drive to the 3rd and 4th diskette drives.
  5020                                  ;******************************************************************************
  5021                                  
  5022 000019D9 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  5023                                  		;jbe	short static_configure ; no - no need for remapping
  5024 000019DE 7603                    		jbe	short no_remap
  5025 000019E0 E8D800                  		call	remap		; remap	bds chain to adjust driver letters
  5026                                  no_remap:
  5027                                  
  5028                                  ; End of drive initialization.
  5029                                  
  5030                                  ; ----------------------------------------------------------------------------
  5031                                  
  5032                                  ;we now decide, based on the configurations available so far, what
  5033                                  ;code or data we need to keep as a stay resident code. the following table
  5034                                  ;shows the configurations under consideration. they are listed in the order
  5035                                  ;of their current position memory.
  5036                                  ;
  5037                                  ;configuration will be done in two ways:
  5038                                  ;
  5039                                  ;first, we are going to set "static configuration". static configuration will
  5040                                  ;consider from basic configuration to endof96tpi configuration. the result
  5041                                  ;of static configuration will be the address the dynamic configuration will
  5042                                  ;use to start with.
  5043                                  ;
  5044                                  ;secondly, "dynamic configuration" will be performed. dynamic configuration
  5045                                  ;involves possible relocation of code or data. dynamic configuration routine
  5046                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  5047                                  ;code individually. after these operation, [dosdatasg] will be set.
  5048                                  ;this will be the place sysinit routine will relocate msdos module for good.
  5049                                  
  5050                                  ; -- begin changed section
  5051                                  ;
  5052                                  ;   1.	 basic configuration for msbio (endfloppy)
  5053                                  ;   2.   end96tpi	; a system that supports "change line error"
  5054                                  ;   3.	 end of bdss	; end of bdss for hard disks
  5055                                  ;   4.	 endatrom	;some of at rom fix module.
  5056                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  5057                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  5058                                  ;
  5059                                  
  5060                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  5061                                  
  5062                                  static_configure:			
  5063 000019E3 8B3E[0216]              		mov	di, [end_of_bdss]
  5064 000019E7 81FF[B808]              		cmp	di, bdss	; 19/10/2022
  5065                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  5066 000019EB 750D                    		jnz	short dynamic_configure	; that's the end, then
  5067                                  		; 18/10/2022
  5068 000019ED BF[B808]                		mov	di, end96tpi
  5069                                  		;mov	di, offset harddrv ; end96tpi
  5070                                  					; keep everything up to end96tpi
  5071 000019F0 803E[7700]00            		cmp	byte [fhave96], 0
  5072 000019F5 7503                    		jnz	short dynamic_configure
  5073                                  		
  5074 000019F7 BF[9D08]                		mov	di, endfloppy
  5075                                  dynamic_configure:
  5076                                  		; 20/12/2022
  5077                                  		;push	cs
  5078                                  		;pop	es
  5079                                  		
  5080 000019FA FC                      		cld			; clear direction
  5081                                  
  5082                                  ; -- end changed section
  5083                                  
  5084                                  		; 20/12/2022
  5085                                  		; ds = cs <> es
  5086                                  		; ss = 0
  5087                                  		; sp = 700h
  5088                                  
  5089 000019FB 803E[3606]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  5090 00001A00 7577                    		jnz	short checkcmosclock
  5091 00001A02 803E[FF15]00            		cmp	byte [hnum], 0	; No hard file?
  5092 00001A07 7470                    		jz	short checkcmosclock
  5093 00001A09 97                      		xchg	ax, di		; save allocation pointer in ax
  5094 00001A0A BE00F0                  		mov	si, 0F000h
  5095 00001A0D 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  5096 00001A0F BE[0816]                		mov	si, bios_date	; "01/10/84"
  5097 00001A12 BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  5098 00001A15 B90900                  		mov	cx, 9		; bdate_l
  5099                                  					; Only patch ROM for bios 01/10/84
  5100 00001A18 F3A6                    		repe cmpsb		; check	for date + zero	on end
  5101 00001A1A 97                      		xchg	ax, di		; restore allocation pointer
  5102                                  
  5103                                  ; M015 -- begin changes
  5104                                  
  5105                                  		;jnz	short checkcmosclock
  5106                                  		; 02/10/2022
  5107 00001A1B 7508                    		jnz	short checkcompaqbug
  5108                                  
  5109                                  ; install at rom fix
  5110                                  
  5111                                  		; 19/10/2022
  5112                                  		;mov	cx, offset endatrom
  5113 00001A1D B9[AB13]                		mov	cx, endatrom
  5114                                  		;mov	si, offset ibm_disk_io
  5115 00001A20 BE[7D12]                		mov	si, ibm_disk_io
  5116 00001A23 EB46                    		jmp	short install_int13_patch
  5117                                  ; ----------------------------------------------------------------------------
  5118                                  
  5119                                  ; M065 -- begin changes
  5120                                  ;
  5121                                  ; On certain systems with Western Digital disk controllers, the
  5122                                  ; following detection scheme caused an unpredictable and serious
  5123                                  ; failure. In particular, they've implemented a nonstandard
  5124                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  5125                                  ; what happens to be at es:[bx] and other memory locations indexed
  5126                                  ; off of it.
  5127                                  ;
  5128                                  ; Compaq was unable to tell us exactly which kind of systems have
  5129                                  ; the bug, except that they guarantee that the bug was fixed in
  5130                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  5131                                  ; string, and then look for date codes before 08/04/86 to decide
  5132                                  ; when to install the hook.
  5133                                  
  5134                                  ;checkcmosclock:
  5135                                  ; 02/10/2022				
  5136                                  checkcompaqbug:
  5137                                  		; 20/12/2022
  5138                                  		; es = 0F000h
  5139                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  5140                                  		;mov	es, ax
  5141                                  
  5142                                  		; 19/10/2022
  5143 00001A25 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  5144                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  5145 00001A2C 754B                    		jnz	short not_compaq_patch
  5146 00001A2E 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  5147                                  		;cmp	word ptr es:0FFECh, 'PM'
  5148 00001A35 7542                    		jnz	short not_compaq_patch
  5149 00001A37 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  5150                                  		;cmp	word ptr es:0FFEEh, 'QA'
  5151 00001A3E 7539                    		jnz	short not_compaq_patch
  5152                                  
  5153                                  ; We're running on a COMPAQ. Now look at the date code.
  5154                                  
  5155 00001A40 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  5156 00001A44 86E0                    		xchg	ah, al
  5157 00001A46 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  5158                                  		;cmp	ax, '86'        ; 3836h
  5159                                  					; is it	86?
  5160 00001A49 772E                    		ja	short not_compaq_patch
  5161 00001A4B 7218                    		jb	short do_compaq_patch
  5162 00001A4D 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  5163 00001A51 86E0                    		xchg	ah, al
  5164 00001A53 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  5165                                  		;cmp	ax, '08'        ; 3038h
  5166                                  					; is it	08?
  5167 00001A56 7721                    		ja	short not_compaq_patch
  5168 00001A58 720B                    		jb	short do_compaq_patch
  5169 00001A5A 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  5170 00001A5E 86E0                    		xchg	ah, al
  5171 00001A60 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  5172                                  		;cmp	ax, '04'        ; 3034h
  5173                                  					; is it	04?
  5174 00001A63 7314                    		jnb	short not_compaq_patch
  5175                                  
  5176                                  do_compaq_patch:			
  5177 00001A65 B9[C813]                		mov	cx, end_compaq_i13hook
  5178 00001A68 BE[AB13]                		mov	si, endatrom
  5179                                  
  5180                                  install_int13_patch:			
  5181 00001A6B 0E                      		push	cs
  5182 00001A6C 07                      		pop	es
  5183                                  		; 18/10/2022
  5184 00001A6D 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  5185 00001A71 8C0E[B600]              		mov	[Orig13+2], cs
  5186 00001A75 29F1                    		sub	cx, si		; size of rom fix module
  5187 00001A77 F3A4                    		rep movsb		; relocate it
  5188                                  
  5189                                  ; M065 -- end changes
  5190                                  
  5191                                  ; ----------------------------------------------------------------------------
  5192                                  not_compaq_patch:			; M065
  5193                                  		; 17/10/2022
  5194                                  checkcmosclock:	
  5195                                  		; 18/10/2022		
  5196 00001A79 0E                      		push	cs
  5197 00001A7A 07                      		pop	es
  5198                                  
  5199                                  		; 20/12/2022
  5200                                  		; ds = cs = es
  5201                                  		; ss = 0
  5202                                  		; sp = 700h
  5203                                  
  5204                                  ; 09/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  5205                                  %if 0
  5206                                  		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  5207                                  		jnz	short checkk09	; no
  5208                                  
  5209                                  		mov	word [daycnttoday], di
  5210                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  5211                                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  5212                                  		mov	si, daycnt_to_day
  5213                                  		rep movsb
  5214                                  		mov	word [bintobcd], di
  5215                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  5216                                  					; let original segment stay
  5217                                  		;mov	cx, 11	; endcmosclockset - bin_to_bcd
  5218                                  		; 08/08/2023
  5219                                  		mov	cl, 11
  5220                                  		mov	si, bin_to_bcd
  5221                                  		rep movsb
  5222                                  %endif
  5223                                  
  5224                                  ; 09/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  5225                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:22F4h
  5226                                  		;push	cs
  5227                                  		;pop	es
  5228                                  checkk09:				
  5229 00001A7B 57                      		push	di ; ? ; save ? ; 20/12/2022
  5230 00001A7C B80141                  		mov	ax, 4101h	; wait for bh=es:[di]
  5231 00001A7F B301                    		mov	bl, 1		; wait for 1 clock tick
  5232 00001A81 268A3D                  		mov	bh, [es:di]
  5233 00001A84 F9                      		stc			; Assume we will fail
  5234 00001A85 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  5235                                  					; AL = condition type, BH = condition compare or mask value
  5236                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  5237                                  					; DX = I/O port	address	if AL bit 4 set
  5238 00001A87 5F                      		pop	di ; ?
  5239 00001A88 721B                    		jc	short configdone ; 20/12/2022
  5240                                  
  5241 00001A8A C606[7900]01            		mov	byte [fhavek09], 1
  5242                                  					; remember we have a k09 type
  5243 00001A8F 1E                      		push	ds
  5244 00001A90 31C0                    		xor	ax, ax
  5245 00001A92 8ED8                    		mov	ds, ax
  5246                                  		
  5247 00001A94 893EB001                		mov	[6Ch*4], di
  5248                                  		;mov	ds:1B0h, di	; [6Ch*4]
  5249                                  					; new int 6ch handler
  5250                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  5251 00001A98 8C0EB201                		mov	word [6Ch*4+2], cs
  5252 00001A9C 1F                      		pop	ds
  5253                                  		; 20/12/2022
  5254                                  		; ds = cs = es
  5255                                  		;mov	si, int6c
  5256                                  		;mov	cx, endk09-int6c ; 459
  5257                                  		;;mov	cx, 459		; endk09 - int6c
  5258                                  					; size of k09 routine
  5259                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  5260                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2315h
  5261 00001A9D BE[C913]                		mov	si, int_6Ch
  5262 00001AA0 B9BC01                  		mov	cx, endk09-int_6Ch ; 461 in PCDOS 7.1 IBMBIO.COM
  5263 00001AA3 F3A4                    		rep movsb		;
  5264                                  					; set up config	stuff for sysinit
  5265                                  ; ----------------------------------------------------------------------------
  5266                                  ; Set up config stuff for SYSINIT
  5267                                  
  5268                                  ; 17/10/2022
  5269                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  5270                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  5271                                  ; 09/12/2022
  5272                                  SETDRIVE equ SetDrive
  5273                                  GETBP equ GetBp
  5274                                  		
  5275                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  5276                                  configdone:	
  5277                                  		; 21/12/2022			
  5278                                  		; 20/03/2019
  5279                                  		;push	cs		; di is	final ending address of	msbio.
  5280                                  		;pop	ds
  5281                                  		
  5282 00001AA5 83C70F                  		add	di, 15		; round	(up) to	paragraph
  5283                                  		; 10/12/2022
  5284                                  		;shr	di, 1
  5285                                  		;shr	di, 1
  5286                                  		;shr	di, 1
  5287                                  		;shr	di, 1
  5288 00001AA8 B104                    		mov	cl, 4
  5289 00001AAA D3EF                    		shr	di, cl		
  5290                                  		; 10/12/2022
  5291 00001AAC 83C770                  		add	di, 70h	 ; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  5292                                  		; 19/10/2022 - Temporary !
  5293                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  5294 00001AAF 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  5295                                  
  5296                                  ; 21/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  5297                                  
  5298                                  ; 19/03/2018 - No need to read remain clusters of MSDOS kernel because
  5299                                  	     ; Retro DOS v2.0 boot sector has loaded all of the kernel file before.
  5300                                  	     
  5301                                  	     ; ("MSINIT.ASM" contains kernel file reading code here, below...)
  5302                                  
  5303                                  ; ----------------------------------------------------------------------------
  5304                                  ; ----------------------------------------------------------------------------
  5305                                  %if 0
  5306                                  		mov	ax, [drvfat]	; get drive and	fat id
  5307                                  		; 22/12/2022
  5308                                  		; Note: SETDRIVES uses AL (drive number) only
  5309                                  		mov	bp, SETDRIVE
  5310                                  		;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  5311                                  					; at 2C7h:4D7h = 70h:2A47h
  5312                                  		push	cs		; simulate far call
  5313                                  		call	call_bios_code	; get bds for drive
  5314                                  		mov	bp, GETBP	; ensure valid bpb is present	
  5315                                  		;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h) 
  5316                                  		push	cs
  5317                                  		call	call_bios_code
  5318                                  
  5319                                  	; resort to funky old segment definitions for now
  5320                                  
  5321                                  		; 22/12/2022
  5322                                  		;push	es		; copy bds to ds:di
  5323                                  		;pop	ds
  5324                                  
  5325                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  5326                                  	;
  5327                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  5328                                  	;	  back. Apparently it was what actually setup es: for the following
  5329                                  	; cas----
  5330                                  
  5331                                  		; 22/12/2022
  5332                                  		;xor	di, di
  5333                                  		;mov	al, [es:di]	; get fat id byte
  5334                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  5335                                  		;mov	[es:drvfat+1], al
  5336                                  		;mov	ax, [es:drvfat]
  5337                                  		
  5338                                  		; 22/12/2022
  5339                                  		; ds = cs
  5340                                  	;;;	mov	al, [drvfat]
  5341                                  
  5342                                  	; cas -- why do a SECOND setdrive here???
  5343                                  
  5344                                  		; 22/12/2022
  5345                                  		;push	es		; save whatever's in es
  5346                                  		;push	ds		; copy bds to es:di
  5347                                  		;pop	es
  5348                                  		;push	cs		; copy Bios_Data to ds
  5349                                  		;pop	ds
  5350                                  	
  5351                                  	; 22/12/2022
  5352                                  	;;;	mov	bp, SETDRIVE
  5353                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  5354                                  	;;;	push	cs		; simulate far call
  5355                                  	;;;	call	call_bios_code	; get correct bds for this drive
  5356                                  	
  5357                                  		; 22/12/2022
  5358                                  		;push	es		; copy bds back to ds:di
  5359                                  		;pop	ds
  5360                                  		;pop	es		; pop whatever was in es
  5361                                  
  5362                                  	; Now we load in the MSDOS.SYS file
  5363                                  
  5364                                  	; 22/12/2022
  5365                                  	; -----
  5366                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5367                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  5368                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  5369                                  	;				; get size of fat on media
  5370                                  	;	;mov	es:16DEh, bl
  5371                                  	;	mov	[es:fbigfat], bl
  5372                                  	;	mov	cl, [di+8]
  5373                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5374                                  	;	;sub	es:16D8h, ax
  5375                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  5376                                  	;				; need a logical sector number that will
  5377                                  	;				; be used by getclus(diskrd procedure)
  5378                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5379                                  	;	;sbb	es:16DAh, ax
  5380                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  5381                                  	; -----
  5382                                  		
  5383                                  	; -----	; 22/12/2022
  5384                                  		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5385                                  		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  5386                                  		mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  5387                                  					; get size of fat on media
  5388                                  		mov	[fbigfat], bl
  5389                                  		mov	cl, [es:di+8]
  5390                                  		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5391                                  		sub	[bios_l], ax	; subtract hidden sectors since we
  5392                                  					; need a logical sector number that will
  5393                                  					; be used by getclus(diskrd procedure)
  5394                                  		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5395                                  		sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  5396                                  	; ------
  5397                                  
  5398                                  		xor	ch, ch	 ; cx = sectors/cluster
  5399                                  
  5400                                  	; the boot program has left the directory at 0:500h
  5401                                  
  5402                                  		push	ds
  5403                                  		xor	di, di
  5404                                  		mov	ds, di
  5405                                  		mov	bx, [53Ah]
  5406                                  		;mov	bx, ds:53Ah	; clus=*53Ah
  5407                                  					; (First cluster field of 2nd dir entry
  5408                                  					; of root directory in the buffer at 500h)
  5409                                  		pop	ds
  5410                                  loadit:
  5411                                  		mov	ax, SYSINITSEG	; 46Dh
  5412                                  		;mov	ax, 46Dh	; sysinit segment
  5413                                  		mov	es, ax
  5414                                  		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  5415                                  		;mov	es, [es:271h]
  5416                                  
  5417                                  		call	getclus		; read cluster at ES:DI (DI is updated)
  5418                                  ; ----------------------------------------------------------------------------
  5419                                  
  5420                                  		;test	byte [cs:fbigfat], fbig
  5421                                  		test	byte [cs:fbigfat], 40h ; fbig
  5422                                  		jnz	short eofbig
  5423                                  		cmp	bx, 0FF7h
  5424                                  		jmp	short iseofx
  5425                                  ; ----------------------------------------------------------------------------
  5426                                  
  5427                                  eofbig:
  5428                                  		cmp	bx, 0FFF7h
  5429                                  iseofx:
  5430                                  		jb	short loadit	; keep loading until cluster = eof
  5431                                  
  5432                                  %endif
  5433                                  ; ----------------------------------------------------------------------------
  5434                                  ; ----------------------------------------------------------------------------
  5435                                  
  5436 00001AB3 E8EE03                  		call	setdrvparms	; 
  5437                                  
  5438                                  		;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  5439                                  		;jmp	far 46Dh:267h
  5440 00001AB6 EA[6702]3104            		jmp	SYSINITSEG:SYSINITSTART
  5441                                  
  5442                                  ; =============== S U B	R O U T	I N E ========================================
  5443                                  
  5444                                  ; Following are subroutines to support resident device driver initialization
  5445                                  ;
  5446                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  5447                                  
  5448                                  ;	M035 -- begin changed section
  5449                                  
  5450                                  ;******************************************************************************
  5451                                  ; module name: remap
  5452                                  ;
  5453                                  ; descriptive name: all the code for himem that could be separated from msbio
  5454                                  ;
  5455                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  5456                                  ;	     letters) if more than two diskette drives on the system.
  5457                                  ;
  5458                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  5459                                  ;	       as usual and then rescan the bds chain to adjust the drive
  5460                                  ;	       letters. to do this, scan for disk drives and assign logical
  5461                                  ;	       drive number starting from 2 and then rescan diskette drives
  5462                                  ;	       and assign next to the last logical drive number of last disk
  5463                                  ;	       drive to the 3rd and 4th diskette drives.
  5464                                  
  5465                                  ; input:       none
  5466                                  ; exit:	drive letters have been remapped in bds chain
  5467                                  ; exit error:  none
  5468                                  ; called from: msinit
  5469                                  ;
  5470                                  ; notes:  this function  will be called only if more than 2 diskettes are
  5471                                  ;	  found in the system
  5472                                  ;	  this function assumes that there are no more than 26 drives assigned
  5473                                  ;	    this is guaranteed by the code that creates bdss for partitions
  5474                                  ;	  this function assumes that the first entries in the chain are
  5475                                  ;	   floppy drives, and all the rest are hard drives
  5476                                  ;	  will alter the boot drive if necessary to reflect remapping
  5477                                  ;
  5478                                  ;******************************************************************************
  5479                                  
  5480                                  ; 17/10/2022
  5481                                  ; 02/10/2022
  5482                                  
  5483                                  remap:		; proc near		
  5484 00001ABB 2E8B3E[1901]            		mov	di, [cs:start_bds] ; get first bds
  5485                                  
  5486                                  ; search for 1st fixed disk physical drive num
  5487                                  
  5488                                  drive_loop:				
  5489 00001AC0 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  5490                                  					; first	hard disk??
  5491 00001AC4 7409                    		jz	short fdrv_found ; yes,	continue
  5492 00001AC6 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5493                                  					; get next bds,	assume segment
  5494 00001AC8 83FFFF                  		cmp	di, -1		; last bds?
  5495 00001ACB 75F3                    		jnz	short drive_loop ; loop	if not
  5496 00001ACD EB4F                    		jmp	short rmap_exit	; yes, no hard drive on	system
  5497                                  
  5498                                  ;------------------------------------------------------------------------------
  5499                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  5500                                  ;logical drive nums to 3, 4, 5 etc.
  5501                                  ;------------------------------------------------------------------------------
  5502                                  
  5503                                  fdrv_found:				
  5504 00001ACF B002                    		mov	al, 2		; start	with logical drv num=2
  5505                                  fdrv_loop:				
  5506 00001AD1 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5507 00001AD4 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5508                                  					; ds:di--> next	bds
  5509                                  		;inc	al		; set num for next drive
  5510                                  		; 18/12/2022
  5511 00001AD6 40                      		inc	ax
  5512 00001AD7 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ?
  5513 00001ADA 75F5                    		jnz	short fdrv_loop	; no - assign more disk drives
  5514                                  
  5515                                  ;------------------------------------------------------------------------------
  5516                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  5517                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  5518                                  ; any more.
  5519                                  ;------------------------------------------------------------------------------
  5520                                  
  5521 00001ADC 2E8B3E[1901]            		mov	di, [cs:start_bds] ; [start_bds]
  5522                                  					; get first bds
  5523 00001AE1 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5524                                  					; ds:di-->bds2
  5525 00001AE3 2E8A26[2501]            		mov	ah, [cs:dsktnum] ; get number of floppies to remap
  5526 00001AE8 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  5527                                  remap_loop1:				
  5528 00001AEB 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5529                                  					; set new num to next floppy
  5530 00001AED 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5531 00001AF0 FEC0                    		inc	al		; new number for next floppy
  5532 00001AF2 FECC                    		dec	ah		; count down extra floppies
  5533 00001AF4 75F5                    		jnz	short remap_loop1
  5534                                  
  5535                                  ; now we've got to adjust the boot drive if we reassigned it
  5536                                  
  5537 00001AF6 2EA0[8615]              		mov	al, [cs:drvfat]
  5538 00001AFA 3C02                    		cmp	al, 2		; is it	a: or b: ?
  5539 00001AFC 7220                    		jb	short rmap_exit
  5540 00001AFE 2E2A06[2501]            		sub	al, [cs:dsktnum] ; is it one of the other floppies?
  5541 00001B03 7204                    		jb	short remap_boot_flop ;	brif so
  5542                                  
  5543                                  ; we've got to remap the boot hard drive
  5544                                  ; subtract the number of EXTRA floppies from it
  5545                                  
  5546 00001B05 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  5547 00001B07 EB05                    		jmp	short remap_change_boot_drv
  5548                                  ; ---------------------------------------------------------------------------
  5549                                  
  5550                                  ; we've got to remap the boot floppy.
  5551                                  ; add the number of hard drive partitions to it
  5552                                  
  5553                                  remap_boot_flop:			
  5554 00001B09 2E0206[7500]            		add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  5555                                  remap_change_boot_drv:			
  5556 00001B0E 2EA2[8615]              		mov	[cs:drvfat], al ; alter msdos.sys load drive
  5557 00001B12 FEC0                    		inc	al
  5558 00001B14 1E                      		push	ds
  5559 00001B15 BF3104                  		mov	di, SYSINITSEG	; 46Dh
  5560                                  		;mov	di, 46Dh	; SYSINIT segment
  5561 00001B18 8EDF                    		mov	ds, di
  5562 00001B1A A2[9602]                		mov	[DEFAULTDRIVE], al
  5563                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  5564                                  					; pass it to sysinit as	well
  5565 00001B1D 1F                      		pop	ds
  5566                                  rmap_exit:				
  5567 00001B1E C3                      		retn
  5568                                  
  5569                                  ; =============== S U B	R O U T	I N E =======================================
  5570                                  
  5571                                  ; 17/10/2022
  5572                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  5573                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  5574                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  5575                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  5576                                  ;**************************************************
  5577                                  ; getboot - get the boot sector for a hard disk
  5578                                  ;
  5579                                  ; Reads the boot sector from a specified drive into
  5580                                  ; a buffer at the top of memory.
  5581                                  ;
  5582                                  ; dl = int13 drive number to read boot sector for
  5583                                  ;**************************************************
  5584                                  
  5585                                  ; 17/10/2022
  5586                                  bootbias equ 200h
  5587                                  
  5588                                  getboot:	; proc near		
  5589                                  		
  5590                                  		; 08/04/2018
  5591                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  5592                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  5593                                  		; 02/10/2022 - Retro DOS v4.0
  5594                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  5595                                  
  5596 00001B1F 2EA1[8915]              		mov	ax, [cs:init_bootseg] ; 17/10/2022
  5597 00001B23 8EC0                    		mov	es, ax
  5598                                  		; 17/10/2022
  5599 00001B25 BB0002                  		mov	bx, bootbias ; 200h
  5600                                  		;mov	bx, 200h	; bootbias
  5601                                  					; load BX, ES:BX is where sector goes
  5602 00001B28 B80102                  		mov	ax, 201h
  5603 00001B2B 30F6                    		xor	dh, dh
  5604 00001B2D B90100                  		mov	cx, 1
  5605 00001B30 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5606                                  					; AL = number of sectors to read, CH = track, CL = sector
  5607                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5608                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5609 00001B32 7209                    		jb	short erret
  5610                                  		; 17/10/2022
  5611 00001B34 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  5612                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  5613                                  					; Dave Litton magic word?
  5614 00001B3B 7401                    		jz	short norm_ret	; yes
  5615                                  erret:					
  5616 00001B3D F9                      		stc
  5617                                  norm_ret:				
  5618 00001B3E C3                      		retn
  5619                                  
  5620                                  ; =============== S U B	R O U T	I N E =======================================
  5621                                  
  5622                                  ; 28/12/2018 - Retro DOS v4.0 
  5623                                  
  5624                                  ;***************************************************************************
  5625                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  5626                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  5627                                  ;   our own logical sectors start. we also read in our boot sector to
  5628                                  ;   determine version number
  5629                                  ;
  5630                                  ;   inputs:	dl is rom drive number (80...)
  5631                                  ;		bh is partition number (0....) 
  5632                                  ;		ds:di points to bds
  5633                                  ;   outputs:	carry clear -> bpb is filled in
  5634                                  ;		carry set   -> bpb is left uninitialized due to error
  5635                                  ;	trashes (at least) si, cx
  5636                                  ;	MUST PRESERVE ES:!!!!
  5637                                  ;***************************************************************************
  5638                                  
  5639                                  sethard:	; proc near		
  5640                                  		; 12/08/2023
  5641                                  		; ds = cs = BIOSDATA
  5642 00001B3F 57                      		push	di
  5643 00001B40 53                      		push	bx
  5644                                  		;push	ds  ; ds = cs = BIOSDATA ; 12/08/2023
  5645 00001B41 06                      		push	es
  5646 00001B42 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  5647 00001B45 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  5648 00001B48 804D2301                		or	byte [di+23h], 1 ; [di+BDS.flags]
  5649                                  					; fnon_removable
  5650 00001B4C C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  5651                                  					; ffHardFile
  5652 00001B50 C606[8815]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  5653 00001B55 88FE                    		mov	dh, bh		; partition number
  5654 00001B57 52                      		push	dx
  5655 00001B58 B408                    		mov	ah, 8
  5656 00001B5A CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5657                                  					; DL = drive number
  5658                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5659                                  					; DL = number of consecutive drives
  5660                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5661 00001B5C FEC6                    		inc	dh
  5662 00001B5E 887515                  		mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  5663 00001B61 5A                      		pop	dx
  5664 00001B62 7263                    		jb	short setret	; error	if no hard disk
  5665 00001B64 80E13F                  		and	cl, 3Fh
  5666 00001B67 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  5667 00001B6A 52                      		push	dx		; save partition number
  5668 00001B6B E8B1FF                  		call	getboot
  5669 00001B6E 5A                      		pop	dx		; restore partition number
  5670 00001B6F 7256                    		jb	short setret
  5671 00001B71 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5672                                  
  5673                                  ; The first 'active' partition is 00, the second is 01....
  5674                                  ;   then the remainder of the 'primary' but non-active partitions
  5675                                  
  5676                                  act_part:				
  5677 00001B74 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  5678 00001B79 7418                    		jz	short no_act	; no
  5679 00001B7B 26803F01                		cmp	byte [es:bx], 1 ; reject if partitiontype != 1, 4 or 6
  5680 00001B7F 740C                    		jz	short got_good_act
  5681 00001B81 26803F04                		cmp	byte [es:bx], 4
  5682 00001B85 7406                    		jz	short got_good_act
  5683 00001B87 26803F06                		cmp	byte [es:bx], 6
  5684 00001B8B 7506                    		jnz	short no_act
  5685                                  got_good_act:				; 11/08/2023
  5686 00001B8D 08F6                    		or	dh, dh		; is this our target partition #?
  5687                                  					; (0 = first primary dos or active partition)
  5688 00001B8F 743A                    		jz	short set2	; WE GOT THE ONE WANTED!!
  5689 00001B91 FECE                    		dec	dh		; count	down
  5690                                  no_act:					
  5691 00001B93 83C310                  		add	bx, 16
  5692 00001B96 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5693                                  					; last entry done?
  5694 00001B9A 75D8                    		jnz	short act_part	; no, process next entry
  5695 00001B9C BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5696                                  					; restore original value of bx
  5697                                  
  5698                                  ; Now scan the non-active partitions
  5699                                  
  5700                                  get_primary:				
  5701 00001B9F 26F647FC80              		test	byte [es:bx-4], 80h
  5702 00001BA4 7518                    		jnz	short not_prim	; we've already scanned
  5703                                  					; the ACTIVE ones
  5704 00001BA6 26803F01                		cmp	byte [es:bx], 1 ; see if partitiontype == 1, 4 or 6
  5705 00001BAA 740C                    		jz	short got_prim
  5706 00001BAC 26803F04                		cmp	byte [es:bx], 4
  5707 00001BB0 7406                    		jz	short got_prim
  5708 00001BB2 26803F06                		cmp	byte [es:bx], 6
  5709 00001BB6 7506                    		jnz	short not_prim
  5710                                  got_prim:				
  5711 00001BB8 08F6                    		or	dh, dh		; is this our target partition?
  5712 00001BBA 740F                    		jz	short set2
  5713 00001BBC FECE                    		dec	dh
  5714                                  not_prim:				
  5715 00001BBE 83C310                  		add	bx, 16
  5716 00001BC1 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5717 00001BC5 75D8                    		jnz	short get_primary ; loop till we've gone through table
  5718                                  setret:					
  5719 00001BC7 F9                      		stc			; error	return
  5720 00001BC8 E99602                  		jmp	ret_hard_err
  5721                                  
  5722                                  ; ---------------------------------------------------------------------------
  5723                                  
  5724                                  ;  until we get the real logical boot record and get the bpb,
  5725                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  5726                                  ;  for the convenience of the computation.
  5727                                  ;
  5728                                  ;  at the end of this procedure, if a bpb information is gotten from
  5729                                  ;  the valid boot record, then we are going to use those bpb information
  5730                                  ;  without change.
  5731                                  ;
  5732                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  5733                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  5734                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  5735                                  
  5736                                  set2:		
  5737                                  		; 12/08/2023
  5738                                  		; ds = cs = BIOSDATA segment (0070h)
  5739 00001BCB 8816[8B15]              		mov	[rom_drv_num], dl
  5740                                  		;mov	[cs:rom_drv_num], dl
  5741                                  			; save the rom bios drive number we are handling now.
  5742 00001BCF 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  5743 00001BD3 268B5706                		mov	dx, [es:bx+6]
  5744                                  
  5745                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  5746                                  ; sectors should be allowed	
  5747                                  
  5748 00001BD7 83E801                  		sub	ax, 1
  5749 00001BDA 83DA00                  		sbb	dx, 0
  5750 00001BDD 26034708                		add	ax, [es:bx+8]	; sectors in partition
  5751 00001BE1 2613570A                		adc	dx, [es:bx+10]
  5752 00001BE5 7305                    		jnb	short okdrive
  5753 00001BE7 800E[8815]80            		or	byte [fbigfat], 80h ; ftoobig
  5754                                  okdrive:				
  5755 00001BEC 268B4704                		mov	ax, [es:bx+4]
  5756 00001BF0 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  5757                                  					; BPB_HIDDENSECTORS = p->partitionbegin
  5758 00001BF3 268B4706                		mov	ax, [es:bx+6]
  5759 00001BF7 894519                  		mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  5760 00001BFA 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  5761 00001BFE 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  5762 00001C02 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  5763 00001C05 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  5764                                  					; bpb->maxsec =	p->partitionlength
  5765 00001C08 83FA00                  		cmp	dx, 0
  5766 00001C0B 7705                    		ja	short okdrive_1
  5767 00001C0D 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  5768 00001C10 72B5                    		jb	short setret	; return -1;
  5769                                  okdrive_1:				
  5770 00001C12 8B5519                  		mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  5771 00001C15 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  5772 00001C18 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  5773                                  					; usually equal	to the # of sec/trk.
  5774 00001C1A 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  5775 00001C1D 50                      		push	ax
  5776 00001C1E 89D0                    		mov	ax, dx
  5777 00001C20 31D2                    		xor	dx, dx
  5778 00001C22 F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  5779                                  					; (track)temp_h:ax + (sector)dx
  5780                                  		; 17/10/2022
  5781                                  		;mov	[cs:temp_h], ax
  5782                                  		; 12/08/2023 (ds=cs)
  5783 00001C24 A3[2105]                		mov	[temp_h], ax
  5784 00001C27 58                      		pop	ax
  5785 00001C28 F7F3                    		div	bx
  5786 00001C2A 88D1                    		mov	cl, dl
  5787 00001C2C FEC1                    		inc	cl
  5788 00001C2E 31DB                    		xor	bx, bx
  5789 00001C30 8A5D15                  		mov	bl, [di+15h]	; [di+BDS.heads]
  5790 00001C33 50                      		push	ax
  5791 00001C34 31D2                    		xor	dx, dx
  5792                                  		;mov	ax, [cs:temp_h]
  5793 00001C36 A1[2105]                		mov	ax, [temp_h] ; 12/08/2023
  5794 00001C39 F7F3                    		div	bx
  5795                                  		;mov	[cs:temp_h], ax
  5796 00001C3B A3[2105]                		mov	[temp_h], ax ; 12/08/2023
  5797 00001C3E 58                      		pop	ax
  5798 00001C3F F7F3                    		div	bx		; dl is head, ax is cylinder
  5799                                  		; 12/08/2023 (ds=cs)
  5800 00001C41 833E[2105]00            		cmp	word [temp_h], 0
  5801                                  		;cmp	word [cs:temp_h], 0
  5802 00001C46 775F                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5803 00001C48 3D0004                  		cmp	ax, 1024
  5804 00001C4B 775A                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5805                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  5806                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  5807                                  			; ('ja' must be 'jnb')
  5808                                  okdrive_2:
  5809                                   		; 28/07/2019
  5810                                  ; dl is head.
  5811                                  ; ax is cylinder
  5812                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  5813                                  
  5814                                  ;*** for mini disks ***
  5815                                  
  5816 00001C4D 837D4701                		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  5817                                  					; check for mini disk
  5818 00001C51 7503                    		jnz	short oknotmini	; not mini disk.
  5819 00001C53 034549                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  5820                                  					; set the physical track number
  5821                                  oknotmini:
  5822                                  ;*** end of added logic for mini disk
  5823                                  				
  5824 00001C56 D0CC                    		ror	ah, 1		; move high two bits of cyl to high
  5825 00001C58 D0CC                    		ror	ah, 1		; two bits of upper byte
  5826 00001C5A 80E4C0                  		and	ah, 0C0h	; turn off remainder of bits
  5827 00001C5D 08E1                    		or	cl, ah		; move two bits to correct spot
  5828 00001C5F 88C5                    		mov	ch, al		; ch iscylinder (low 8 bits)
  5829                                  					; cl is sector + 2 high bits of cylinder
  5830 00001C61 88D6                    		mov	dh, dl		; dh is	head
  5831                                  		
  5832                                  		; 12/08/2023 (ds=cs)
  5833 00001C63 8A16[8B15]              		mov	dl, [rom_drv_num]
  5834                                  		;mov	dl, [cs:rom_drv_num] ; dl is drive number
  5835                                  
  5836                                  ; cl is sector + 2 high bits of cylinder
  5837                                  ; ch is low 8 bits of cylinder
  5838                                  ; dh is head
  5839                                  ; dl is drive
  5840                                  
  5841                                  ; for convenience, we are going to read the logical boot sector
  5842                                  ; into cs:disksector area.
  5843                                  
  5844                                  ; read in boot sector using bios disk interrupt. the buffer where it
  5845                                  ; is to be read in is cs:disksector.
  5846                                  
  5847 00001C67 0E                      		push	cs
  5848 00001C68 07                      		pop	es
  5849 00001C69 BB[4E01]                		mov	bx, disksector	; for convenience,
  5850                                  					; we are going to read the logical boot sector
  5851                                  					; into cs:disksector area.
  5852 00001C6C B80102                  		mov	ax, 201h
  5853 00001C6F CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5854                                  					; AL = number of sectors to read, CH = track, CL = sector
  5855                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5856                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5857                                  
  5858                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  5859                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  5860                                  ; media if we recognize the version number.
  5861                                  
  5862                                  		; 11/08/2023
  5863                                  		;mov	bx, disksector	; BIOSDATA:014Eh ; MSDOS 6.21 ; 11/08/2023
  5864                                  					; BIOSDATA:0152h ; PCDOS 7.1 IBMBIO.COM
  5865 00001C71 53                      		push	bx
  5866 00001C72 50                      		push	ax
  5867                                  		; 12/08/2023
  5868                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  5869 00001C73 803FE9                  		cmp	byte [bx], 0E9h
  5870                                  		;cmp	byte [cs:bx], 0E9h ; is it a near jump?
  5871 00001C76 740B                    		jz	short check_1_ok ; yes
  5872 00001C78 803FEB                  		cmp	byte [bx], 0EBh
  5873                                  		;cmp	byte [cs:bx], 0EBh ; is it a short jump?
  5874 00001C7B 7525                    		jnz	short invalid_boot_record ; no
  5875 00001C7D 807F0290                		cmp	byte [bx+2], 90h
  5876                                  		;cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  5877 00001C81 751F                    		jnz	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  5878                                  check_1_ok:	
  5879                                  		; 11/08/2023
  5880 00001C83 BB[5901]                		mov	bx, disksector+EXT_BOOT.BPB ; disksector+11
  5881                                  		;mov	bx, 159h	; disksector+EXT_BOOT.BPB
  5882                                  					; point to the bpb in the boot record
  5883                                  		;mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  5884 00001C86 8A470A                  		mov	al, [bx+10] ; 12/08/2023 
  5885                                  					; get the mediadescriptor byte
  5886 00001C89 24F0                    		and	al, 0F0h	; mask off low nibble
  5887 00001C8B 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  5888 00001C8D 7513                    		jnz	short invalid_boot_record ; no, invalid boot record
  5889                                  		;cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  5890 00001C8F 813F0002                		cmp	word [bx], 512 ; 12/08/2023
  5891 00001C93 750D                    		jnz	short invalid_boot_record ; invalidate non 512 byte sectors
  5892                                  
  5893                                  check2_ok:				; yes, mediadescriptor ok.
  5894 00001C95 8A4702                  		mov	al, [bx+2] ; 12/08/2023
  5895                                  		;mov	al, [cs:bx+2]	; now make sure that
  5896                                  					; the sectorspercluster is
  5897                                  					; a power of 2
  5898                                  					;
  5899                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  5900                                  					; get the sectorspercluster
  5901 00001C98 08C0                    		or	al, al		; is it zero?
  5902 00001C9A 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  5903                                  
  5904                                  ck_power_of_two:			
  5905 00001C9C D0E8                    		shr	al, 1		; shift until first bit emerges
  5906 00001C9E 73FC                    		jnb	short ck_power_of_two
  5907 00001CA0 740B                    		jz	short valid_boot_record
  5908                                  
  5909                                  invalid_boot_record:			
  5910 00001CA2 58                      		pop	ax
  5911 00001CA3 5B                      		pop	bx
  5912 00001CA4 E90901                  		jmp	unknown		; jump to invalid boot record
  5913                                  					; unformatted or illegal media.
  5914                                  
  5915                                  ; ---------------------------------------------------------------------------
  5916                                  	; 12/08/2023
  5917                                  setret_brdg:				
  5918 00001CA7 E91DFF                  		jmp	setret
  5919                                  ; ---------------------------------------------------------------------------
  5920                                  
  5921                                  unknown3_0_j:				
  5922 00001CAA E90701                  		jmp	unknown3_0	; legally formatted media,
  5923                                  					; although, content might be bad.
  5924                                  ; ---------------------------------------------------------------------------
  5925                                  
  5926                                  valid_boot_record:			
  5927 00001CAD 58                      		pop	ax
  5928 00001CAE 5B                      		pop	bx
  5929                                  
  5930                                  ; Signature found. Now check version.
  5931                                  
  5932                                  		; 14/08/2023
  5933 00001CAF 817F08322E              		cmp	word [bx+8], '2.'
  5934                                  		;cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  5935                                  		;;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  5936 00001CB4 7506                    		jnz	short try5
  5937 00001CB6 807F0A30                		cmp	byte [bx+10], '0'
  5938                                  		;cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  5939                                  		;;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  5940                                  		; 12/08/2023
  5941                                  		;jnz	short try5
  5942                                  		;jmp	short copybpb
  5943 00001CBA 7425                    		jz	short copybpb
  5944                                  
  5945                                  ; ---------------------------------------------------------------------------
  5946                                  ;	; 12/08/2023
  5947                                  ;setret_brdg:
  5948                                  ;		jmp	setret
  5949                                  ; ---------------------------------------------------------------------------
  5950                                  ;
  5951                                  ;unknown3_0_j:				
  5952                                  ;		jmp	unknown3_0	; legally formatted media,
  5953                                  ;					; although, content might be bad.
  5954                                  ; ---------------------------------------------------------------------------
  5955                                  
  5956                                  try5:					
  5957 00001CBC E8A601                  		call	cover_fdisk_bug
  5958                                  
  5959                                  ; see if it is an os2 signature
  5960                                  
  5961                                  		; 12/08/2023
  5962                                  		; ds = cs = BIOSDATA segment
  5963 00001CBF 817F08302E              		cmp	word [bx+8], '0.'
  5964                                  		;cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  5965                                  		;;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  5966 00001CC4 750C                    		jnz	short no_os2
  5967 00001CC6 8A4707                  		mov	al, [bx+7] ; 12/08/2023
  5968                                  		;mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  5969 00001CC9 2C31                    		sub	al, '1'
  5970                                  		;sub	al, 31h		; '1'
  5971 00001CCB 24FE                    		and	al, 0FEh
  5972 00001CCD 7412                    		jz	short copybpb	; accept either	'1' or '2'
  5973 00001CCF E9DE00                  		jmp	unknown
  5974                                  ; ---------------------------------------------------------------------------
  5975                                  
  5976                                  ; no os2 signature, this is to check for real dos versions
  5977                                  
  5978                                  no_os2:		
  5979                                  		; 12/08/2023
  5980                                  		; ds = cs = BIOSDATA
  5981 00001CD2 817F08332E              		cmp	word [bx+8], '3.'			
  5982                                  		;cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  5983                                  		;;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  5984 00001CD7 72D1                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  5985                                  					; do not trust it, but still legal.
  5986 00001CD9 7506                    		jnz	short copybpb	; honor	os2 boot record
  5987                                  					; or dos 4.0 version
  5988 00001CDB 807F0A31                		cmp	byte [bx+10], '1' ; 12/08/2023
  5989                                  		;cmp	byte [cs:bx+10], '1'
  5990                                  		;;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  5991 00001CDF 72C9                    		jb	short unknown3_0_j ; if version >= 3.1, then o.k.
  5992                                  copybpb:
  5993                                  
  5994                                  ; 03/10/2022
  5995                                  
  5996                                  ; we have a valid boot sector. use the bpb in it to build the
  5997                                  ; bpb in bios. it is assumed that only
  5998                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  5999                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  6000                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  6001                                  ; need to be set (all other values in already). fbigfat is also set.
  6002                                  
  6003                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  6004                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  6005                                  ; and system id according to the boot record.
  6006                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  6007                                  
  6008                                  		; 10/12/2022
  6009                                  		; (number of FATs optimization)
  6010 00001CE1 BE[5901]                		mov	si, disksector+11 ; disksector+0Bh
  6011                                  		;;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  6012                                  		;mov	cl, [cs:si+05h]
  6013                                  		; 12/08/2023
  6014                                  		; ds = cs = BIOSDATA segment (0070h)
  6015 00001CE4 8A4C05                  		mov	cl, [si+05h] ; number of FATs
  6016                                  
  6017 00001CE7 807C1B29                		cmp	byte [si+1Bh], 29h ; 12/08/2023
  6018                                  		;cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  6019                                  		;;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  6020                                  					; [disksector+EXT_BOOT.SIG]
  6021                                  					; EXT_BOOT_SIGNATURE
  6022 00001CEB 753C                    		jnz	short copybpb_fat ; conventional fat system
  6023                                  
  6024                                  		; 03/10/2022
  6025                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  6026                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  6027                                  		;	     number of FATs must be 2 ; =*?=
  6028                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  6029                                  		;
  6030                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  6031                                  
  6032                                  		; 10/12/2022
  6033                                  		;cmp	byte [cs:disksector+10h], 0
  6034                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  6035                                  		;jnz	short copybpb_fat ; a fat system.
  6036 00001CED 08C9                    		or	cl, cl	 ; [cs:disksector+10h]
  6037 00001CEF 7538                    		jnz	short copybpb_fat ; a fat system.
  6038                                  
  6039                                  ; non fat based	media.
  6040                                  
  6041 00001CF1 57                      		push	di
  6042                                  		; 12/08/2023
  6043                                  		;push	ds  ; ds = cs = BIOSDATA segment
  6044 00001CF2 1E                      		push	ds
  6045 00001CF3 07                      		pop	es
  6046                                  		; 12/08/2023
  6047                                  		; ds = cs
  6048                                  		;push	cs
  6049                                  		;pop	ds
  6050                                  
  6051                                  		; 10/12/2022
  6052                                  		; (number of FATs optimization)
  6053                                  		; SI = disksector+11
  6054                                  		; 17/10/2022
  6055                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6056                                  		;mov	si, disksector+11
  6057 00001CF4 83C706                  		add	di, 6		; add di,BDS.BPB
  6058                                  
  6059                                  ; just for completeness, we'll make sure that total_sectors and
  6060                                  ; big_total_sectors aren't both zero. I've seen examples of
  6061                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  6062                                  ; got that way. If it occurs, then use the values from the
  6063                                  ; partition table.
  6064                                  
  6065                                  		; 18/12/2022
  6066 00001CF7 29C9                    		sub	cx, cx 
  6067                                  
  6068                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  6069                                  		;jnz	short already_nonz 
  6070                                  		;			; how about big_total?
  6071                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  6072                                  		;jnz	short already_nonz ; we're okay if any are != 0
  6073                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6074                                  		;jnz	short already_nonz
  6075                                  
  6076                                  		; 12/08/2023
  6077                                  		; ds = cs = BIOSDATA segment (0070h)
  6078                                  
  6079                                  		; 18/12/2022
  6080                                  		;cmp	[cs:si+8], cx ; 0	; [cs:si+EBPB.TOTALSECTORS]
  6081                                  		; 12/08/2023
  6082 00001CF9 394C08                  		cmp	[si+8], cx ; 0
  6083 00001CFC 751C                    		jnz	short already_nonz
  6084                                  					     	; how about big_total?
  6085                                  		;cmp	[cs:si+15h], cx ; 0 	; [cs:si+EBPB.BIGTOTALSECTORS]
  6086                                  		; 12/08/2023
  6087 00001CFE 394C15                  		cmp	[si+15h], cx ; 0
  6088 00001D01 7517                    		jnz	short already_nonz	; we're okay if any are != 0
  6089                                  		;cmp	[cs:si+17h], cx ; 0  	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6090 00001D03 394C17                  		cmp	[si+17h], cx ; 0
  6091 00001D06 7512                    		jnz	short already_nonz
  6092                                  
  6093                                  ; now let's copy the values from the partition table (now in the BDS)
  6094                                  ; into the BPB in the boot sector buffer, before they get copied back.
  6095                                  
  6096 00001D08 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  6097                                  		; 12/08/2023
  6098                                  		;mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  6099 00001D0B 894408                  		mov	[si+8], ax
  6100 00001D0E 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  6101                                  		;mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  6102 00001D11 894415                  		mov	[si+15h], ax
  6103 00001D14 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  6104                                  		;mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6105 00001D17 894417                  		mov	[si+17h], ax
  6106                                  
  6107                                  already_nonz:	
  6108                                  		; 18/12/2022
  6109                                  		; cx = 0
  6110 00001D1A B119                    		mov	cl, 25		
  6111                                  		;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  6112 00001D1C F3A4                    		rep movsb
  6113                                  		;pop	ds
  6114                                  		; 12/08/2023
  6115                                  		; ds = cs
  6116                                  		;pop	bp  ; ds (on top of stack) = BIOSDATA
  6117 00001D1E 5F                      		pop	di
  6118                                  		;push	es
  6119                                  		;push	ds
  6120                                  		;pop	es
  6121                                  		;push	cs
  6122                                  		;pop	ds
  6123                                  		; 12/08/2023
  6124                                  		;mov	es, bp
  6125                                  		; ds = cs = es
  6126                                  		
  6127                                  		; 14/08/2023
  6128 00001D1F BD[D607]                		mov	bp, MOVMEDIAIDS ; mov_media_ids
  6129                                  		; 18/12/2022
  6130                                  		;mov	bp, mov_media_ids
  6131                                  		;;mov	bp, 751h	; mov_media_ids
  6132                                  					; at 2C7h:751h = 70h:2CC1h
  6133                                  					; set volume id, systemid, serial.
  6134 00001D22 0E                      		push	cs		; simulate far call
  6135 00001D23 E8EDF8                  		call	call_bios_code
  6136                                  		; 12/08/2023
  6137                                  		; ds = cs = es
  6138                                  		;push	es
  6139                                  		;pop	ds
  6140                                  		;pop	es
  6141 00001D26 E93701                  		jmp	goodret
  6142                                  
  6143                                  ; ---------------------------------------------------------------------------
  6144                                  
  6145                                  ; ****** cas ---
  6146                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  6147                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  6148                                  ; happens with some frequency -- perhaps through some OS/2 setup
  6149                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  6150                                  ; from the boot sector into the DPB anyway, we've just been using
  6151                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  6152                                  ; we'll go ahead and copy it into the DPB, except in the case
  6153                                  ; that it equals zero, in which case we just use the values in
  6154                                  ; the DPB from the partition table.
  6155                                  
  6156                                  ; 17/10/2022
  6157                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  6158                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  6159                                  ; 09/12/2022
  6160                                  MOVMEDIAIDS equ mov_media_ids
  6161                                  CLEARIDS equ clear_ids
  6162                                  
  6163                                  copybpb_fat:
  6164                                  		; 10/12/2022
  6165                                  		; (number of FATs optimization)
  6166                                  		; SI = disksector+11				
  6167                                  		; 17/10/2022
  6168                                  		;mov	si, disksector+11
  6169                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6170                                  					; cs:si	-> bpb in boot
  6171 00001D29 31D2                    		xor	dx, dx
  6172                                  		; 12/08/2023
  6173                                  		; ds = cs = BIOSDATA segment (0070h)
  6174 00001D2B 8B4408                  		mov	ax, [si+8]
  6175                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6176                                  					; get totsec from boot sec
  6177 00001D2E 09C0                    		or	ax, ax
  6178 00001D30 7514                    		jnz	short copy_totsec ; if non zero, use that
  6179 00001D32 8B4415                  		mov	ax, [si+15h] ; 12/08/2023
  6180                                  		;mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  6181                                  					; get the big version
  6182                                  					; (32 bit total	sectors)
  6183 00001D35 8B5417                  		mov	dx, [si+17h] ; 12/08/2023
  6184                                  		;mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6185                                  		; 10/12/2022
  6186                                  		; (number of FATs optimization)
  6187                                  		; CL = number of FATs (2 or 1) 
  6188 00001D38 89D3                    		mov	bx, dx		; see if it is a big zero
  6189 00001D3A 09C3                    		or	bx, ax
  6190 00001D3C 7508                    		jnz	short copy_totsec
  6191                                  			; screw it. it was bogus.
  6192 00001D3E 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6193 00001D41 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6194 00001D44 EB06                    		jmp	short fat_big_small
  6195                                  
  6196                                  		;mov	cx, dx
  6197                                  		;or	cx, ax		; see if it is a big zero
  6198                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  6199                                  copy_totsec:				
  6200 00001D46 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  6201                                  					; make DPB match boot sec
  6202 00001D49 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  6203                                  
  6204                                  		; 10/12/2022
  6205                                  ;totsec_already_set:			
  6206                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6207                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6208                                  
  6209                                  ; determine fat entry size.
  6210                                  
  6211                                  fat_big_small:
  6212                                  
  6213                                  ;at this moment dx;ax = total sector number
  6214                                  
  6215                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  6216                                  ;from the BPB on the disk
  6217                                  		
  6218                                  		; 12/08/2023
  6219                                  		; ds = cs = BIOSDATA segment (0070h)
  6220                                  				
  6221 00001D4C 8B5C03                  		mov	bx, [si+3]
  6222                                  		;mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  6223                                  					; get #reserved_sectors	from BPB
  6224 00001D4F 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  6225                                  					; update BDS field
  6226 00001D52 29D8                    		sub	ax, bx
  6227 00001D54 83DA00                  		sbb	dx, 0		; update the count
  6228                                  		; 12/08/2023
  6229 00001D57 8B5C0B                  		mov	bx, [si+0Bh]
  6230                                  		;mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  6231                                  					; bx = sectors/fat
  6232 00001D5A 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  6233                                  					; set in bds bpb
  6234                                  		; 10/12/2022
  6235                                  		; (number of FATs optimization)
  6236                                  		; CL = number of FATs (2 or 1) 
  6237                                  		;dec	cl ; *
  6238                                  		; 18/12/2022
  6239 00001D5D 49                      		dec	cx ; *
  6240 00001D5E D3E3                    		shl	bx, cl
  6241                                  		;shl	bx, 1	; =*?=	; always 2 fats
  6242                                  		
  6243 00001D60 29D8                    		sub	ax, bx		; sub #	fat sectors
  6244 00001D62 83DA00                  		sbb	dx, 0
  6245 00001D65 8B5C06                  		mov	bx, [si+6] ; 12/08/2023
  6246                                  		;mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  6247                                  					; # root entries
  6248 00001D68 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  6249                                  					; set in bds bpb
  6250 00001D6B B104                    		mov	cl, 4
  6251 00001D6D D3EB                    		shr	bx, cl		; div by 16 ents/sector
  6252 00001D6F 29D8                    		sub	ax, bx		; sub #	dir sectors
  6253 00001D71 83DA00                  		sbb	dx, 0		;
  6254                                  					; dx:ax	now contains the
  6255                                  					; # of data sectors
  6256 00001D74 31C9                    		xor	cx, cx ; *
  6257 00001D76 8A4C02                  		mov	cl, [si+2] ; 12/08/2023
  6258                                  		;mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  6259                                  					; sectors per cluster
  6260 00001D79 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  6261                                  					; set in bios bpb
  6262 00001D7C 50                      		push	ax
  6263 00001D7D 89D0                    		mov	ax, dx
  6264 00001D7F 31D2                    		xor	dx, dx
  6265 00001D81 F7F1                    		div	cx		; cx = sectors per cluster
  6266                                  		; 12/08/2023 (ds=cs)
  6267 00001D83 A3[2105]                		mov	[temp_h], ax
  6268                                  		;mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  6269                                  					; # clusters.
  6270 00001D86 58                      		pop	ax
  6271 00001D87 F7F1                    		div	cx
  6272                                  		;cmp	word [cs:temp_h], 0
  6273 00001D89 833E[2105]00            		cmp	word [temp_h], 0  ; 12/08/2023
  6274 00001D8E 7718                    		ja	short toobig_ret ; too big cluster number
  6275 00001D90 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6276                                  					; is this 16-bit fat?
  6277 00001D93 7205                    		jb	short copymediaid ; no,	small fat
  6278                                  		; 17/10/2022
  6279 00001D95 800E[8815]40            		or	byte [fbigfat], 40h
  6280                                  		;or	ds:fbigfat, 40h	; fbig
  6281                                  					; 16 bit fat
  6282                                  copymediaid:				
  6283 00001D9A 06                      		push	es
  6284 00001D9B 1E                      		push	ds
  6285 00001D9C 07                      		pop	es
  6286                                  		; 12/08/2023
  6287                                  		; ds = cs = BIOSDATA
  6288                                  		;push	cs
  6289                                  		;pop	ds
  6290                                  		; 17/10/2022
  6291 00001D9D BD[D607]                		mov	bp, MOVMEDIAIDS
  6292                                  		;mov	bp, 751h	; mov_media_ids
  6293                                  					; at 2C7h:751h = 70h:2CC1h
  6294                                  					; copy filesys_id, volume label
  6295 00001DA0 0E                      		push	cs		; simulate far call
  6296 00001DA1 E86FF8                  		call	call_bios_code
  6297                                  		; 12/08/2023
  6298                                  		;push	es
  6299                                  		;pop	ds
  6300 00001DA4 07                      		pop	es
  6301 00001DA5 E99A00                  		jmp	massage_bpb	; now final check for bpb info
  6302                                  					; and return.
  6303                                  ; ---------------------------------------------------------------------------
  6304                                  
  6305                                  toobig_ret:	
  6306                                  		; 12/08/2023 (ds=cs=BIOSDATA)
  6307 00001DA8 800E[8815]80            		or	byte [fbigfat], 80h ; ftoobig
  6308                                  		;or	byte [cs:fbigfat], 80h ; ftoobig 
  6309                                  					; too big (32 bit clust #) for FAT16
  6310 00001DAD E9B000                  		jmp	goodret		; still	drive letter is	assigned
  6311                                  					; but useless. to big for
  6312                                  					; current pc dos fat file system
  6313                                  ; ---------------------------------------------------------------------------
  6314                                  
  6315                                  unknown:	
  6316                                  		; 12/12/2022
  6317 00001DB0 804D2402                		or	byte [di+24h], 02h			
  6318                                  		;or	word [di+23h], 200h ; [di+BDS.flags]
  6319                                  					; unformatted_media
  6320                                  					; Set unformatted media	flag.
  6321                                  
  6322                                  ; the boot signature may not be	recognizable,
  6323                                  ; but we should	try and	read it	anyway.
  6324                                  
  6325                                  unknown3_0:				
  6326 00001DB4 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  6327                                  					; [di+BDS.totalsecs32+2]
  6328 00001DB7 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6329 00001DBA BE[B815]                		mov	si, disktable2
  6330                                  scan:					; 08/08/2023
  6331                                  		;cmp	dx, [cs:si]	; total sectors hw
  6332                                  		; 12/08/2023 (ds=cs)
  6333 00001DBD 3B14                    		cmp	dx, [si] 
  6334 00001DBF 720C                     		jb	short gotparm
  6335 00001DC1 7705                    		ja	short scan_next
  6336                                  		;cmp	ax, [cs:si+2]	; total sectors lw
  6337 00001DC3 3B4402                  		cmp	ax, [si+2]
  6338 00001DC6 7605                    		jbe	short gotparm
  6339                                  scan_next:				
  6340 00001DC8 83C60A                  		add	si, 10		; 5*2
  6341 00001DCB EBF0                    		jmp	short scan	; covers upto 512 mb media
  6342                                  ; ---------------------------------------------------------------------------
  6343                                  
  6344                                  gotparm:				
  6345 00001DCD 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  6346                                  		;or	ds:fbigfat, cl
  6347                                  		; 17/10/2022
  6348 00001DD0 080E[8815]              		or	[fbigfat], cl	; (fbig flag, 40h or 0) ; 08/08/2023
  6349                                  		; 12/08/2023
  6350                                  		; ds = cs = BIOSDATA
  6351 00001DD4 8B4C04                  		mov	cx, [si+4]
  6352                                  		;mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  6353                                  					; cl = log base 2 of ch
  6354 00001DD7 8B5406                  		mov	dx, [si+6]
  6355                                  		;mov	dx, [cs:si+6]	; dx = number of root dir entries
  6356                                  
  6357                                  ; now calculate size of fat table
  6358                                  
  6359 00001DDA 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  6360                                  					; save number of (root)	dir entries
  6361 00001DDD 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6362 00001DE0 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6363 00001DE3 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  6364                                  					; save sectors per cluster
  6365                                  		
  6366                                  		; 05/08/2023 - Retro DOS v4.2 IO:SYS (optimization)
  6367 00001DE6 8A1E[8815]              		mov	bl, [fbigfat]
  6368 00001DEA 885D1F                  		mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  6369 00001DED F6C340                  		test	bl, 40h
  6370                                  		; 17/10/2022
  6371                                  		;test	byte [fbigfat], 40h
  6372                                  		;;test	ds:fbigfat, 40h	; fbig
  6373                                  					; if (fbigfat)
  6374 00001DF0 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  6375                                  
  6376                                  ; we don't need to change "small fat" logic since it is guaranteed
  6377                                  ; that double word total sector will not use 12 bit fat (unless
  6378                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  6379                                  ; so in this case we assume dx = 0 !!
  6380                                  
  6381 00001DF2 31DB                    		xor	bx, bx		; 12 bit fat (FAT12 fs)
  6382 00001DF4 88EB                    		mov	bl, ch
  6383 00001DF6 4B                      		dec	bx
  6384 00001DF7 01C3                    		add	bx, ax		; dx=0
  6385 00001DF9 D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  6386 00001DFB 43                      		inc	bx		; BDS.secperclus
  6387 00001DFC 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  6388 00001DFF 89DE                    		mov	si, bx
  6389 00001E01 D1EB                    		shr	bx, 1
  6390 00001E03 01F3                    		add	bx, si		; number of FAT bytes ; 08/08/2023
  6391 00001E05 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  6392 00001E09 D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  6393 00001E0B 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  6394                                  					; save number of fat sectors
  6395 00001E0E EB32                    		jmp	short massage_bpb
  6396                                  ; ---------------------------------------------------------------------------
  6397                                  
  6398                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  6399                                  
  6400                                  dobig:					
  6401 00001E10 B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  6402 00001E12 52                      		push	dx		; save total sectors (high)
  6403 00001E13 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  6404 00001E16 D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  6405 00001E18 29D0                    		sub	ax, dx
  6406 00001E1A 5A                      		pop	dx
  6407 00001E1B 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  6408 00001E1E 83E801                  		sub	ax, 1
  6409 00001E21 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  6410                                  					; total	secs - reserved	secs - root dir	secs
  6411 00001E24 B302                    		mov	bl, 2
  6412 00001E26 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  6413                                  					; bx = 256 * BDS.secperclus + 2
  6414                                  
  6415                                  ; I don't understand why to add bx here!!!
  6416                                  
  6417                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  6418                                  		; 27/09/2022
  6419                                  		; (Microsoft FAT32 File	System Specification,
  6420                                  		; December 2000, Page 21)
  6421                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  6422                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  6423                                  		; 8/8/2023 (Retro DOS v5.0)
  6424                                  		; If(FATType == FAT32)
  6425                                  		;   TmpVal2 = TmpVal2 / 2;
  6426                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  6427                                  		; 8/8/2023 (Retro DOS v5.0)
  6428                                  		; If(FATType == FAT32) {
  6429                                  		;   BPB_FATSz16 = 0;
  6430                                  		;   BPB_FATSz32 = FATSz;
  6431                                  		;} else {
  6432                                  		;   BPB_FATSz16 = LOWORD(FATSz);
  6433                                  		;/* there is no BPB_FATSz32 in a FAT16 BPB */
  6434                                  		;}
  6435                                  					; dx:ax = TmpVal1, bx = TmpVal2
  6436 00001E29 01D8                    		add	ax, bx		; 
  6437 00001E2B 83D200                  		adc	dx, 0		; dx:ax = TmpVal1+TmpVal2
  6438 00001E2E 83E801                  		sub	ax, 1		
  6439 00001E31 83DA00                  		sbb	dx, 0		; dx:ax = TmpVal1+TmpVal2-1
  6440                                  
  6441                                  ; assuming dx in the table will never be bigger than bx.
  6442                                  
  6443 00001E34 F7F3                    		div	bx		; BDS.fatsecs =
  6444                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  6445 00001E36 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  6446                                  					; number of fat	sectors
  6447                                  
  6448                                  ; now, set the default filesys_id, volume label, serial number
  6449                                  
  6450                                  		; 05/08/2023
  6451                                  		; [di+1Fh] = [fbigfat]
  6452                                  		;
  6453                                  		;;mov	bl, ds:fbigfat
  6454                                  		;; 17/10/2022
  6455                                  		;mov	bl, [fbigfat]
  6456                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  6457                                  
  6458                                  		; 12/08/2023
  6459                                  		;push	ds ; ds = cs = BIOSDATA
  6460 00001E39 1E                      		push	ds
  6461 00001E3A 07                      		pop	es
  6462                                  		; 12/08/2023 
  6463                                  		; ds = cs = BIOSDATA
  6464                                  		;push	cs
  6465                                  		;pop	ds
  6466                                  		; 17/10/2022
  6467 00001E3B BD[6A06]                		mov	bp, CLEARIDS
  6468                                  		;mov	bp, 5D9h	; clear_ids
  6469                                  					; at 2C7h:5D9h = 70h:2B49h
  6470                                  					; at BIOSCODE:06ABh
  6471                                  					;	in PCDOS 7.1 IBMBIO.COM
  6472 00001E3E 0E                      		push	cs
  6473 00001E3F E8D1F7                  		call	call_bios_code
  6474                                  
  6475                                  		; 12/08/2023
  6476                                  		;pop	ds ; ds = cs = BIOSDATA
  6477                                  
  6478                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  6479                                  ; set according to the partition information. we are going to
  6480                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  6481                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  6482                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  6483                                  ; we don't do this for the bpb information from the boot record. we
  6484                                  ; are not going to change the bpb information from the boot record.
  6485                                  
  6486                                  massage_bpb:
  6487                                  		; 05/08/2023
  6488                                  		; [di+1Fh] = [fbigfat]
  6489                                  		;
  6490                                  		;; 12/12/2022
  6491                                  		;mov	bl, [fbigfat]
  6492                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6493                                  		;			; set size of fat on media
  6494                                  		;
  6495 00001E42 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6496 00001E45 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6497 00001E48 83FA00                  		cmp	dx, 0		; double word total sectors?
  6498                                  		;ja	short goodret	; don't have to change it.
  6499                                  		; 12/12/2022
  6500 00001E4B 7714                    		ja	short short goodret2
  6501                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  6502                                  		;ja	short goodret	; don't have to change it.
  6503                                  		; 12/12/2022
  6504 00001E4D 395519                  		cmp	[di+19h], dx ; 0
  6505 00001E50 770F                    		ja	short goodret2
  6506 00001E52 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  6507                                  		;jb	short goodret
  6508                                  		; 12/12/2022
  6509 00001E55 7209                    		jc	short goodret
  6510 00001E57 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6511 00001E5A 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  6512                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  6513                                  		; 12/12/2022
  6514 00001E5D 89551B                  		mov	[di+1Bh], dx ; 0 
  6515                                  goodret:				
  6516                                  		;;mov	bl, ds:fbigfat
  6517                                  		; 12/12/2022
  6518                                  		;; 17/10/2022
  6519                                  		;mov	bl, [fbigfat]
  6520                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6521                                  		;			; set size of fat on media
  6522 00001E60 F8                      		clc
  6523                                  ret_hard_err:
  6524                                  		; 12/12/2022
  6525                                  goodret2:					
  6526 00001E61 07                      		pop	es
  6527                                  		;pop	ds	; ds = cs = BIOSDATA ; 12/08/2023
  6528 00001E62 5B                      		pop	bx
  6529 00001E63 5F                      		pop	di
  6530 00001E64 C3                      		retn
  6531                                  
  6532                                  ; =============== S U B	R O U T	I N E =======================================
  6533                                  
  6534                                  ; 15/10/2022
  6535                                  
  6536                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  6537                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  6538                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  6539                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  6540                                  ;then subtract 1 from BPB_TOTALSECTORS.
  6541                                  
  6542                                  		; 17/10/2022
  6543                                  cover_fdisk_bug:
  6544                                  		; 12/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  6545                                  		; ds = cs
  6546 00001E65 50                      		push	ax
  6547 00001E66 52                      		push	dx
  6548 00001E67 56                      		push	si
  6549                                  		; 12/08/2023
  6550 00001E68 803E[7401]29            		cmp	byte [disksector+26h], 29h
  6551                                  		;cmp	byte [cs:disksector+26h], 29h
  6552                                  					; [disksector+EXT_BOOT.SIG],
  6553                                  					; EXT_BOOT_SIGNATURE
  6554 00001E6D 742B                    		jz	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
  6555 00001E6F 817F073130              		cmp	word [bx+7], 3031h
  6556                                  		;cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
  6557 00001E74 7506                    		jnz	short cfb_chk_totalsecs ; 11/08/2023
  6558 00001E76 807F0A30                		cmp	byte [bx+10], '0'
  6559                                  		;cmp	byte [cs:bx+10], '0'
  6560 00001E7A 751E                    		jnz	short cfb_retit
  6561                                  cfb_chk_totalsecs:	; 11/08/2023
  6562                                  		; 17/10/2022		
  6563 00001E7C BE[5901]                		mov	si, disksector+11 ; 14Eh+0Bh
  6564                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6565                                  		; 12/08/2023
  6566 00001E7F 837C0800                		cmp	word [si+8], 0
  6567                                  		;cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
  6568                                  					; just to make sure.
  6569 00001E83 7415                    		jz	short cfb_retit
  6570                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6571                                  		;add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
  6572                                  		; 12/08/2023
  6573 00001E85 8B4408                  		mov	ax, [si+8]
  6574 00001E88 034411                  		add	ax, [si+11h]
  6575                                  
  6576 00001E8B 730D                    		jnb	short cfb_retit
  6577 00001E8D 750B                    		jnz	short cfb_retit
  6578                                  					; if carry set and ax=0
  6579 00001E8F FF4C08                  		dec	word [si+8]
  6580                                  		;dec	word [cs:si+8]	; 0 -> 0FFFFh
  6581                                  					; then decrease	BPB_TOTALSECTORS by 1
  6582 00001E92 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
  6583 00001E96 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
  6584                                  cfb_retit:				
  6585 00001E9A 5E                      		pop	si
  6586 00001E9B 5A                      		pop	dx
  6587 00001E9C 58                      		pop	ax
  6588 00001E9D C3                      		retn
  6589                                  
  6590                                  ; ---------------------------------------------------------------------------
  6591                                  
  6592 00001E9E 0200                    word2:		dw 2			
  6593 00001EA0 0300                    word3:		dw 3			
  6594 00001EA2 0002                    word512:	dw 512			
  6595                                  
  6596                                  ; =============== S U B	R O U T	I N E =======================================
  6597                                  
  6598                                  ; 15/10/2022
  6599                                  
  6600                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
  6601                                  ; the form factor. it is assumed that the bpbs for the various form factors
  6602                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
  6603                                  ; as the bpb on the drive.
  6604                                  ;
  6605                                  ; no attempt is made to preserve registers since we are going to jump to
  6606                                  ; sysinit straight after this routine.
  6607                                  
  6608                                  setdrvparms:
  6609 00001EA4 31DB                    		xor	bx, bx
  6610                                  		; 18/10/2022
  6611 00001EA6 C43E[1901]              		les	di, [start_bds] ; get first bds in list
  6612                                  _next_bds:				
  6613 00001EAA 06                      		push	es
  6614 00001EAB 57                      		push	di
  6615 00001EAC 268A5D22                		mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
  6616 00001EB0 80FB05                  		cmp	bl, 5		; ffHardFile
  6617 00001EB3 753E                    		jnz	short nothardff
  6618 00001EB5 31D2                    		xor	dx, dx
  6619 00001EB7 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  6620 00001EBB 09C0                    		or	ax, ax
  6621 00001EBD 7508                    		jnz	short get_ccyl
  6622 00001EBF 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  6623 00001EC3 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  6624                                  
  6625                                  get_ccyl:				
  6626 00001EC7 52                      		push	dx
  6627 00001EC8 50                      		push	ax
  6628 00001EC9 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
  6629 00001ECD 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
  6630                                  					; assume sectors per cyl. < 64k.
  6631 00001ED1 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
  6632 00001ED3 58                      		pop	ax
  6633 00001ED4 5A                      		pop	dx		; dx:ax = total sectors
  6634 00001ED5 50                      		push	ax
  6635 00001ED6 89D0                    		mov	ax, dx
  6636 00001ED8 31D2                    		xor	dx, dx
  6637 00001EDA F7F1                    		div	cx
  6638 00001EDC 2EA3[2105]              		mov	[cs:temp_h], ax
  6639 00001EE0 58                      		pop	ax
  6640 00001EE1 F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
  6641 00001EE3 09D2                    		or	dx, dx
  6642 00001EE5 7401                    		jz	short no_cyl_rnd ; came out even
  6643 00001EE7 40                      		inc	ax		; round up
  6644                                  
  6645                                  no_cyl_rnd:				
  6646 00001EE8 26894525                		mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
  6647 00001EEC 06                      		push	es
  6648 00001EED 1F                      		pop	ds
  6649 00001EEE 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
  6650                                  					; ds:si -> bpb for hard file
  6651 00001EF1 EB51                    		jmp	short set_recbpb
  6652                                  ; ---------------------------------------------------------------------------
  6653                                  
  6654                                  nothardff:				
  6655 00001EF3 0E                      		push	cs
  6656 00001EF4 1F                      		pop	ds
  6657                                  
  6658                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
  6659                                  ; we can just go and deal with the next bds at label go_to_next_bds.
  6660                                  
  6661                                  		; 10/12/2022
  6662                                  		; ds = cs
  6663                                  		; 17/10/2022 (ds=cs)
  6664 00001EF5 803E[8F15]01            		cmp	byte [fakefloppydrv], 1
  6665                                  		;cmp	byte [cs:fakefloppydrv], 1
  6666 00001EFA 7450                    		jz	short go_to_next_bds
  6667 00001EFC 80FB07                  		cmp	bl, 7		; ffother
  6668                                  					; special case "other" type of medium
  6669 00001EFF 753D                    		jnz	short not_process_other
  6670                                  process_other:
  6671 00001F01 31D2                    		xor	dx, dx
  6672 00001F03 8B4525                  		mov	ax, [di+25h]	; [di+BDS.cylinders]
  6673 00001F06 F76536                  		mul	word [di+36h]	; [di+BDS.rheads]
  6674 00001F09 F76534                  		mul	word [di+34h]	; [di+BDS.rsecpertrack]
  6675 00001F0C 89452F                  		mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
  6676                                  					; have the total number of sectors
  6677 00001F0F 48                      		dec	ax
  6678 00001F10 B201                    		mov	dl, 1
  6679                                  _again:					
  6680 00001F12 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6681 00001F15 7206                    		jb	short _@@
  6682 00001F17 D1E8                    		shr	ax, 1
  6683 00001F19 D0E2                    		shl	dl, 1
  6684 00001F1B EBF5                    		jmp	short _again
  6685                                  ; ---------------------------------------------------------------------------
  6686                                  
  6687                                  _@@:					
  6688 00001F1D 80FA01                  		cmp	dl, 1		; is it a small disk ?
  6689 00001F20 7405                    		jz	short __@@	; yes, 224 root entries is enuf
  6690 00001F22 C7452DF000              		mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
  6691                                  __@@:					
  6692 00001F27 885529                  		mov	[di+29h], dl	; [di+BDS.rsecperclus]
  6693                                  
  6694                                  ; logic to get the sectors/fat area.
  6695                                  ; fat entry is assumed to be 1.5 bytes!!!
  6696                                  
  6697                                  		; 10/12/2022
  6698                                  		; ds = cs
  6699                                  		; 17/10/2022 (ds=cs)
  6700 00001F2A F726[A01E]              		mul	word [word3]
  6701 00001F2E F736[9E1E]              		div	word [word2]
  6702 00001F32 31D2                    		xor	dx, dx
  6703 00001F34 F736[A21E]              		div	word [word512]
  6704                                  		;
  6705                                  		; 10/12/2022
  6706                                  		;mul	word [cs:word3]	; * 3 ; mul word [cs:word3]
  6707                                  		;div	word [cs:word2]	; / 2 ; div word [cs:word2]
  6708                                  		;xor	dx, dx
  6709                                  		;div	word [cs:word512] ; / 512 ; div word [cs:word512]
  6710                                  		;
  6711 00001F38 40                      		inc	ax		; + 1
  6712                                  no_round_up:
  6713 00001F39 894532                  		mov	[di+32h], ax	; [di+BDS.rfatsecs]
  6714 00001F3C EB0E                    		jmp	short go_to_next_bds
  6715                                  ; ---------------------------------------------------------------------------
  6716                                  
  6717                                  not_process_other:			
  6718 00001F3E D1E3                    		shl	bx, 1		; bx is word index into table of bpbs
  6719                                  		;mov	si, bpbtable
  6720                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
  6721                                  		; 09/12/2022
  6722                                  		;mov	si, BPBTABLE
  6723                                  		;mov	si, [bx+si]	; get address of bpb
  6724                                  		; 10/12/2022
  6725                                  		;mov	si, [BPBTABLE+bx]
  6726                                  		; 13/12/2022
  6727 00001F40 8BB7[3265]              		mov	si, [SYSINITOFFSET+bpbtable+bx]
  6728                                  set_recbpb:				
  6729 00001F44 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB]
  6730                                  					; es:di -> recbpb
  6731 00001F47 B91900                  		mov	cx, 25		; bpbx.size
  6732 00001F4A F3A4                    		rep movsb		; move (size bpbx) bytes	
  6733                                  go_to_next_bds:				
  6734 00001F4C 5F                      		pop	di
  6735 00001F4D 07                      		pop	es		; restore pointer to bds
  6736 00001F4E 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
  6737 00001F51 83FFFF                  		cmp	di, 0FFFFh	; -1
  6738 00001F54 740A                    		jz	short got_end_of_bds_chain
  6739 00001F56 E951FF                  		jmp	_next_bds
  6740                                  ; ---------------------------------------------------------------------------
  6741                                  
  6742                                  		; 18/12/2022
  6743                                  ;got_end_of_bds_chain:			
  6744                                  		;retn
  6745                                  
  6746                                  ; =============== S U B	R O U T	I N E =======================================
  6747                                  
  6748                                  ; 15/10/2022
  6749                                  ; 30/12/2018 - Retro DOS v4.0
  6750                                  
  6751                                  ; al = device number
  6752                                  
  6753                                  print_init:	
  6754 00001F59 98                      		cbw
  6755 00001F5A 89C2                    		mov	dx, ax
  6756 00001F5C B401                    		mov	ah, 1
  6757 00001F5E CD17                    		int	17h		; PRINTER - INITIALIZE
  6758                                  					; DX = printer port (0-3)
  6759                                  					; Return: AH = status
  6760                                  got_end_of_bds_chain:	; 18/12/2022
  6761 00001F60 C3                      		retn
  6762                                  
  6763                                  ; =============== S U B	R O U T	I N E =======================================
  6764                                  
  6765                                  ; al = device number
  6766                                  
  6767                                  aux_init:
  6768 00001F61 98                      		cbw
  6769 00001F62 89C2                    		mov	dx, ax
  6770                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
  6771                                  					; 2400,n,1,8 (msequ.inc)
  6772                                  		;mov	ah, 0
  6773                                  		; 10/12/2022
  6774 00001F64 B8A300                  		mov	ax, 00A3h
  6775 00001F67 CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
  6776                                  					; 	AL = initializing parameters,
  6777                                  					;	DX = port number (0-3)
  6778                                  					; Return: AH = RS-232 status code bits,
  6779                                  					;	  AL = modem status bits
  6780 00001F69 C3                      		retn
  6781                                  
  6782                                  ; =============== S U B	R O U T	I N E =======================================
  6783                                  
  6784                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6785                                  ; 30/12/2018 - Retro DOS v4.0
  6786                                  ; 03/06/2018 - Retro DOS v3.0
  6787                                  ; (19/03/2018 - Retro DOS v2.0)
  6788                                  
  6789                                  ; domini **********************************************************************
  6790                                  ;
  6791                                  ;mini disk initialization routine. called right after dohard
  6792                                  ;modified for >2 hardfile support
  6793                                  ;
  6794                                  ; **cs=ds=es=datagrp
  6795                                  ;
  6796                                  ; **domini will search for every extended partition in the system, and
  6797                                  ;   initialize it.
  6798                                  ;
  6799                                  ; **bdsm stands for bds table for mini disk and located right after the label
  6800                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
  6801                                  ;   address of bdsm table.
  6802                                  ;
  6803                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
  6804                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
  6805                                  ;   right now, they are called as ismini, hidden_trks respectively.
  6806                                  ;
  6807                                  ; **domini will use the same routine in sethard routine after label set2 to
  6808                                  ;   save coding.
  6809                                  ;
  6810                                  ; **drvmax determined in dohard routine will be used for the next
  6811                                  ;   available logical mini disk drive number.
  6812                                  ;
  6813                                  ; input: drvmax, dskdrvs
  6814                                  ;
  6815                                  ; output: minidisk installed. bdsm table established and installed to bds.
  6816                                  ;	  end_of_bdsm - ending offset address of bdsm.
  6817                                  ;
  6818                                  ; called modules:
  6819                                  ;		  getboot
  6820                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
  6821                                  ;
  6822                                  ;		  setmini (new, it will use set2 routine)
  6823                                  ;
  6824                                  ; variables used: end_of_bdsm
  6825                                  ;		  rom_minidisk_num
  6826                                  ;		  mini_hdlim, mini_seclim
  6827                                  ;		  BDS_STRUC, start_bds
  6828                                  ;
  6829                                  ;******************************************************************************
  6830                                  
  6831                                  		; 19/10/2022
  6832                                  domini:	
  6833 00001F6A 8A36[FF15]              		mov	dh, [hnum]	; get number of hardfiles
  6834                                  		; 10/12/2022
  6835 00001F6E 20F6                    		and	dh, dh
  6836                                  		;cmp	dh, 0
  6837 00001F70 7430                    		jz	short dominiret	; no hard file?	then exit.
  6838 00001F72 B280                    		mov	dl, 80h		; start	with hardfile 80h
  6839                                  domini_loop:				
  6840 00001F74 52                      		push	dx
  6841 00001F75 8816[FE15]              		mov	[rom_minidisk_num], dl
  6842 00001F79 B408                    		mov	ah, 8
  6843 00001F7B CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6844                                  					; DL = drive number
  6845                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6846                                  					; DL = number of consecutive drives
  6847                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6848                                  		
  6849                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  6850                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2B36h
  6851                                  		;inc	dh
  6852                                  		;xor	ax, ax
  6853                                  		;mov	al, dh
  6854 00001F7D 31C0                    		xor	ax, ax
  6855 00001F7F 88F0                    		mov	al, dh	; <= 255
  6856 00001F81 40                      		inc	ax	; (0FFh -> 100h)
  6857 00001F82 A3[0416]                		mov	[mini_hdlim], ax ; # of heads
  6858                                  		;and	cl, 3Fh
  6859                                  		;mov	al, cl
  6860                                  		; 08/08/2023
  6861 00001F85 88C8                    		mov	al, cl
  6862 00001F87 83E03F                  		and	ax, 3Fh
  6863 00001F8A A3[0616]                		mov	[mini_seclim], ax ; # of sectors/track
  6864 00001F8D 06                      		push	es
  6865 00001F8E 8A16[FE15]              		mov	dl, [rom_minidisk_num]
  6866 00001F92 E88AFB                  		call	getboot		; read master boot record into
  6867                                  					; initbootsegment:bootbias
  6868 00001F95 7203                    		jb	short domininext
  6869 00001F97 E80900                  		call	find_mini_partition
  6870                                  domininext:				
  6871 00001F9A 07                      		pop	es
  6872 00001F9B 5A                      		pop	dx
  6873 00001F9C FEC2                    		inc	dl		; next hard file
  6874 00001F9E FECE                    		dec	dh
  6875 00001FA0 75D2                    		jnz	short domini_loop
  6876                                  dominiret:				
  6877 00001FA2 C3                      		retn
  6878                                  
  6879                                  ; =============== S U B	R O U T	I N E =======================================
  6880                                  
  6881                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6882                                  ; 30/12/2018 - Retro DOS v4.0
  6883                                  
  6884                                  ;find_mini_partition tries to find every extended partition on a disk.
  6885                                  ;at entry:	di -> bdsm entry
  6886                                  ;		es:bx -> 07c0:bootbias - master boot record
  6887                                  ;		rom_minidisk_num - rom drive number
  6888                                  ;		drvmax - logical drive number
  6889                                  ;		mini_hdlim, mini_seclim
  6890                                  ;
  6891                                  ;called routine: setmini which uses set2 (in sethard routine)
  6892                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
  6893                                  
  6894                                  find_mini_partition:	
  6895 00001FA3 81C3C201                		add	bx, 1C2h	; bx ->	file system id
  6896                                  fmpnext:				
  6897 00001FA7 26803F05                		cmp	byte [es:bx], 5 ; 5 = extended partition id.
  6898 00001FAB 740A                    		jz	short fmpgot
  6899 00001FAD 83C310                  		add	bx, 16
  6900 00001FB0 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6901 00001FB4 75F1                    		jnz	short fmpnext
  6902                                  		;jmp	short fmpnextfound ; extended partition	not found
  6903                                  		; 18/12/2022
  6904                                  fmpnextfound:
  6905 00001FB6 C3                      		retn
  6906                                  
  6907                                  ;		; 30/07/2019 - Retro DOS v3.2
  6908                                  ;		jb	short fmpnext
  6909                                  ;fmpret:
  6910                                  ;		retn	; 29/05/2019
  6911                                  
  6912                                  ; ---------------------------------------------------------------------------
  6913                                  
  6914                                  		; 19/10/2022
  6915                                  fmpgot:					; found my partition.				
  6916 00001FB7 E8A500                  		call	dmax_check	; check	for drvmax already 26
  6917 00001FBA 73FA                    		jnb	short fmpnextfound ; done if too many
  6918 00001FBC 8B3E[0216]              		mov	di, [end_of_bdss] ; get next free bds
  6919 00001FC0 C745470100              		mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  6920                                  		; 10/12/2022
  6921 00001FC5 804D2301                		or	byte [di+23h], 1
  6922                                  		;or	word [di+23h], 1 ; [di+BDS.flags]
  6923                                  					; fNon_Removable
  6924 00001FC9 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  6925                                  					; ffHardFile
  6926 00001FCD C606[8815]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
  6927 00001FD2 A1[0416]                		mov	ax, [mini_hdlim]
  6928 00001FD5 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
  6929 00001FD8 A1[0616]                		mov	ax, [mini_seclim]
  6930 00001FDB 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
  6931 00001FDE A0[FE15]                		mov	al, [rom_minidisk_num]
  6932 00001FE1 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
  6933                                  					; set physical number
  6934 00001FE4 A0[7500]                		mov	al, [drvmax]
  6935 00001FE7 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  6936                                  					; set logical number
  6937 00001FEA 26837F0A00              		cmp	word [es:bx+10], 0
  6938 00001FEF 7707                    		ja	short fmpgot_cont
  6939 00001FF1 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
  6940                                  					; only lower word is meaningful.
  6941 00001FF6 72BE                    		jb	short fmpnextfound
  6942                                  					; should be bigger than 64 sectors at least
  6943                                  fmpgot_cont:				
  6944 00001FF8 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
  6945 00001FFB 268A7702                		mov	dh, [es:bx+2]	; cylinder
  6946 00001FFF 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
  6947 00002002 D0C6                    		rol	dh, 1
  6948 00002004 D0C6                    		rol	dh, 1
  6949 00002006 268A5703                		mov	dl, [es:bx+3]	; cyl byte
  6950 0000200A 895549                  		mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
  6951                                  					; set hidden trks
  6952 0000200D 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
  6953 00002011 268A7701                		mov	dh, [es:bx+1]	; head
  6954 00002015 8A16[FE15]              		mov	dl, [rom_minidisk_num]
  6955 00002019 BB0002                  		mov	bx, 200h	; bootbias
  6956 0000201C B80102                  		mov	ax, 201h
  6957 0000201F CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  6958                                  					; AL = number of sectors to read, CH = track, CL = sector
  6959                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  6960                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  6961 00002021 7293                    		jc	short fmpnextfound
  6962 00002023 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  6963                                  
  6964                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  6965                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2C7Ch
  6966 00002026 26817F3C55AA            		cmp	word [es:bx+3Ch], 0AA55h ; 03C2h+03Ch = 3FEh
  6967 0000202C 7588                    		jne	short fmpnextfound ; not a valid boot sector !
  6968                                  
  6969                                  		; 13/08/2023
  6970                                  		;push	es
  6971 0000202E E80800                  		call	setmini		; install a mini disk.
  6972                                  					; bx value saved.
  6973                                  		;pop	es  ; 13/08/2023
  6974 00002031 7203                    		jc	short fmpnextchain
  6975 00002033 E83E00                  		call	xinstall_bds	; -- install the bdsm into table
  6976                                  fmpnextchain:				
  6977 00002036 E96EFF                  		jmp	fmpnext		; let's find out
  6978                                  					; if we	have any chained partition
  6979                                  ; ---------------------------------------------------------------------------
  6980                                  
  6981                                  		; 18/12/2022
  6982                                  ;fmpnextfound:				
  6983                                  		;retn
  6984                                  
  6985                                  ; =============== S U B	R O U T	I N E =======================================
  6986                                  
  6987                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  6988                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  6989                                  
  6990                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
  6991                                  	
  6992 00002039 57                      		push	di
  6993 0000203A 53                      		push	bx
  6994                                  		; 12/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  6995                                  		; ds = cs = BIOSDATA segment
  6996                                  		;push	ds
  6997 0000203B 06                      		push	es
  6998                                  setmini_1:				
  6999 0000203C 26803F01                		cmp	byte [es:bx], 1 ; FAT12 partition
  7000 00002040 741A                    		jz	short setmini_2
  7001 00002042 26803F04                		cmp	byte [es:bx], 4 ; FAT16 partition
  7002 00002046 7414                    		jz	short setmini_2
  7003 00002048 26803F06                		cmp	byte [es:bx], 6 ; FAT16 BIG partition
  7004 0000204C 740E                    		jz	short setmini_2
  7005 0000204E 83C310                  		add	bx, 16
  7006 00002051 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  7007 00002055 75E5                    		jnz	short setmini_1
  7008 00002057 F9                      		stc
  7009 00002058 07                      		pop	es
  7010                                  		; 12/08/2023
  7011                                  		;pop	ds
  7012 00002059 5B                      		pop	bx
  7013 0000205A 5F                      		pop	di
  7014 0000205B C3                      		retn
  7015                                  
  7016                                  ; ---------------------------------------------------------------------------
  7017                                  setmini_2:				
  7018 0000205C E96CFB                  		jmp	set2		; branch into middle of sethard
  7019                                  
  7020                                  ; =============== S U B	R O U T	I N E =======================================
  7021                                  
  7022                                  ; 15/10/2022
  7023                                  ; 28/12/2018 - Retro DOS v4.0
  7024                                  ;
  7025                                  ; dmax_check --- call this when we want to install a new drive.
  7026                                  ;		it checks for drvmax < 26 to see if there is
  7027                                  ;		a drive letter left.
  7028                                  ;
  7029                                  ;	drvmax < 26 : carry SET!
  7030                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
  7031                                  ;			trash ax
  7032                                  
  7033                                  dmax_check:	
  7034 0000205F 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
  7035 00002064 720D                    		jb	short dmax_ok	; return with carry if okay
  7036 00002066 06                      		push	es
  7037                                  		;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
  7038 00002067 B83104                  		mov	ax, SYSINITSEG	; 17/10/2022	
  7039 0000206A 8EC0                    		mov	es, ax
  7040                                  		; 18/10/2022
  7041 0000206C 26C606[8103]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
  7042                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
  7043                                  					; set message flag
  7044                                  					; [SYSINIT+toomanydrivesflag]
  7045 00002072 07                      		pop	es
  7046                                  
  7047                                  		;;push	es
  7048                                  		;;mov	ax,SYSINIT_SEG
  7049                                  		;;mov	es,ax
  7050                                  		;;mov	byte [es:toomanydrivesflag],1
  7051                                  					; set message flag
  7052                                  		;;pop	es
  7053                                  		;
  7054                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
  7055                                  dmax_ok:				
  7056 00002073 C3                      		retn
  7057                                  
  7058                                  ; =============== S U B	R O U T	I N E =======================================
  7059                                  
  7060                                  ; 18/10/2022
  7061                                  ; 15/10/2022
  7062                                  ; 28/12/2018 - Retro DOS v4.0						
  7063                                  ;								 
  7064                                  ;	link next bds (at ds:di) into the chain. assume that the
  7065                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
  7066                                  ;	  dskdrv_table, and end_of_bdss.	
  7067                                  
  7068                                  xinstall_bds:		
  7069 00002074 56                      		push	si
  7070 00002075 53                      		push	bx
  7071 00002076 8B36[1901]              		mov	si, [start_bds]	; get first bds
  7072                                  xinstall_bds_1:				
  7073 0000207A 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
  7074 0000207D 7404                    		jz	short xinstall_bds_2 ; skip ahead if so
  7075                                  		;mov	si, [si+BDS.link]
  7076 0000207F 8B34                    		mov	si, [si]	; chain	through	list
  7077 00002081 EBF7                    		jmp	short xinstall_bds_1
  7078                                  ; ---------------------------------------------------------------------------
  7079                                  
  7080                                  xinstall_bds_2:				
  7081                                  		;mov	[si+BDS.link], di
  7082 00002083 893C                    		mov	[si], di
  7083                                  		;mov	[si+BDS.link+2], ds
  7084 00002085 8C5C02                  		mov	[si+2], ds
  7085                                  		;mov	word [di+BDS.link], -1
  7086 00002088 C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
  7087                                  		;mov	[di+BDS.link+2], ds
  7088 0000208C 8C5D02                  		mov	[di+2], ds ; might as well plug segment
  7089                                  		; 20/03/2019 - Retro DOS v4.0
  7090                                  		;lea	bx, [di+BDS.BPB]
  7091 0000208F 8D5D06                  		lea	bx, [di+6]
  7092 00002092 8B36[0016]              		mov	si, [last_dskdrv_table]
  7093 00002096 891C                    		mov	[si], bx
  7094 00002098 8306[0016]02            		add	word [last_dskdrv_table], 2
  7095 0000209D FE06[7500]              		inc	byte [drvmax]
  7096 000020A1 8306[0216]64            		add	word [end_of_bdss], 100 ; BDS.size = 100
  7097 000020A6 5B                      		pop	bx
  7098 000020A7 5E                      		pop	si
  7099 000020A8 C3                      		retn
  7100                                  
  7101                                  ; =============== S U B	R O U T	I N E =======================================
  7102                                  
  7103                                  ; 17/10/2022
  7104                                  ; 15/10/2022
  7105                                  ; 28/12/2018 - Retro DOS v4.0
  7106                                  ; 03/06/2018 - Retro DOS v3.0
  7107                                  
  7108                                  cmos_clock_read:	
  7109 000020A9 50                      		push	ax
  7110 000020AA 51                      		push	cx
  7111 000020AB 52                      		push	dx
  7112 000020AC 55                      		push	bp
  7113 000020AD 31ED                    		xor	bp, bp
  7114                                  loop_clock:				
  7115 000020AF 31C9                    		xor	cx, cx
  7116 000020B1 31D2                    		xor	dx, dx
  7117 000020B3 B402                    		mov	ah, 2
  7118 000020B5 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  7119                                  					; Return: CH = hours in	BCD
  7120                                  					; CL = minutes in BCD
  7121                                  					; DH = seconds in BCD
  7122 000020B7 83F900                  		cmp	cx, 0
  7123 000020BA 7512                    		jnz	short clock_present
  7124 000020BC 83FA00                  		cmp	dx, 0
  7125 000020BF 750D                    		jnz	short clock_present
  7126 000020C1 83FD01                  		cmp	bp, 1		; read again after a slight delay, in case clock
  7127 000020C4 741C                    		jz	short no_readdate ; was at zero setting.
  7128 000020C6 45                      		inc	bp		; only perform delay once.
  7129 000020C7 B90040                  		mov	cx, 4000h	; 16384
  7130                                  delay:					
  7131 000020CA E2FE                    		loop	delay
  7132 000020CC EBE1                    		jmp	short loop_clock
  7133                                  ; ---------------------------------------------------------------------------
  7134                                  
  7135                                  clock_present:				
  7136 000020CE 2EC606[F304]01          		mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
  7137 000020D4 E81000                  		call	cmosck		; reset	cmos clock rate	that may be
  7138                                  					; possibly destroyed by	cp dos and
  7139                                  					; post routine did not restore that.
  7140 000020D7 56                      		push	si
  7141 000020D8 E81BF3                  		call	read_real_date	; read real-time clock for date
  7142 000020DB FA                      		cli
  7143                                  		;mov	ds:daycnt, si	; set system date
  7144 000020DC 8936[F004]              		mov	[daycnt], si
  7145 000020E0 FB                      		sti
  7146 000020E1 5E                      		pop	si
  7147                                  
  7148                                  no_readdate:				
  7149 000020E2 5D                      		pop	bp
  7150 000020E3 5A                      		pop	dx
  7151 000020E4 59                      		pop	cx
  7152 000020E5 58                      		pop	ax
  7153 000020E6 C3                      		retn
  7154                                  
  7155                                  ; ---------------------------------------------------------------------------
  7156                                  
  7157                                  ; the following code is written by jack gulley in engineering group.
  7158                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
  7159                                  ; and if the use cold boot the system to use pc dos while running cp dos,
  7160                                  ; the cmos clock rate are still slow which slow down disk operations
  7161                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
  7162                                  ; to fix this problem at the request of cp dos.
  7163                                  ;
  7164                                  ; the program is modified to be run on msinit. equates are defined
  7165                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
  7166                                  ;
  7167                                  ;  the following code cmosck is used to insure that the cmos has not
  7168                                  ;	had its rate controls left in an invalid state on older at's.
  7169                                  ;
  7170                                  ;	it checks for an at model byte "fc" with a submodel type of
  7171                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
  7172                                  ;	bits in case post has not done it. this initilization routine
  7173                                  ;	is only needed once when dos loads. it should be run as soon
  7174                                  ;	as possible to prevent slow diskette access.
  7175                                  ;
  7176                                  ;	this code exposes one to dos clearing cmos setup done by a
  7177                                  ;	resident program that hides and re-boots the system.
  7178                                  
  7179                                  cmosck:					; check and reset rtc rate bits
  7180                                  
  7181                                  ;model byte and submodel byte were already determined in msinit.
  7182                                  
  7183                                  	; 16/06/2018 - Retro DOS v3.0
  7184                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
  7185                                  			
  7186 000020E7 50                      		push	ax
  7187 000020E8 2E803E[3606]FC          		cmp	byte [cs:model_byte], 0FCh
  7188 000020EE 7525                    		jnz	short cmosck9	; Exit if not an AT model
  7189 000020F0 2E803E[3706]06          		cmp	byte [cs:secondary_model_byte], 6
  7190                                  					; Is it 06 for the industral AT ?
  7191 000020F6 7408                    		jz	short cmosck4	; Go reset CMOS periodic rate if 06
  7192 000020F8 2E803E[3706]04          		cmp	byte [cs:secondary_model_byte], 4
  7193                                  					; Is it 00, 01, 02, or 03 ?
  7194 000020FE 7315                    		jnb	short cmosck9	; EXIT if problem fixed by POST
  7195                                  					; Also,Secondary_model_byte = 0
  7196                                  					;   when AH=0C0h, int 15h failed.
  7197                                  					;	RESET THE CMOS PERIODIC RATE
  7198                                  					;  Model=FC submodel=00,01,02,03 or 06
  7199                                  cmosck4:				
  7200 00002100 B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
  7201                                  					; NMI disabled on return
  7202 00002102 B426                    		mov	ah, 26h		; 00100110b
  7203                                  					; Set divider & rate selection
  7204 00002104 E83000                  		call	cmos_write
  7205 00002107 B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
  7206                                  					; NMI disabled on return
  7207 00002109 E80B00                  		call	cmos_read
  7208 0000210C 2407                    		and	al, 7		; 00000111b
  7209                                  					; clear SET,PIE,AIE,UIE,SQWE
  7210 0000210E 88C4                    		mov	ah, al
  7211 00002110 B00B                    		mov	al, 0Bh		; cmos_reg_b
  7212                                  					; NMI enabled on return
  7213 00002112 E82200                  		call	cmos_write
  7214                                  cmosck9:				
  7215 00002115 58                      		pop	ax
  7216 00002116 C3                      		retn
  7217                                  
  7218                                  ; =============== S U B	R O U T	I N E =======================================
  7219                                  
  7220                                  ;--- CMOS_READ -----------------------------------------------------------------
  7221                                  ;		read byte from cmos system clock configuration table	       :
  7222                                  ;									       :
  7223                                  ; input: (al)=	cmos table address to be read				       :
  7224                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7225                                  ;		bits 6-0 = address of table location to read		       :
  7226                                  ;									       :
  7227                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
  7228                                  ;		on then nmi left disabled.  during the cmos read both nmi and  :
  7229                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7230                                  ;		the cmos address register is pointed to a default value and    :
  7231                                  ;		the interrupt flag restored to the entry state on return.      :
  7232                                  ;		only the (al) register and the nmi state is changed.	       :
  7233                                  ;-------------------------------------------------------------------------------
  7234                                  
  7235                                  cmos_read:				; read location (al) into (al)	
  7236 00002117 9C                      		pushf
  7237 00002118 FA                      		cli
  7238 00002119 53                      		push	bx
  7239 0000211A 50                      		push	ax		; AL = cmos table address to be read
  7240 0000211B 0C80                    		or	al, 80h
  7241 0000211D E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7242                                  					; RTC Seconds
  7243 0000211F 90                      		nop			; (undocumented delay needed)
  7244 00002120 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7245 00002122 89C3                    		mov	bx, ax
  7246 00002124 58                      		pop	ax
  7247 00002125 2480                    		and	al, 80h
  7248 00002127 0C0F                    		or	al, 0Fh
  7249 00002129 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7250                                  					; RTC Seconds
  7251 0000212B 90                      		nop
  7252 0000212C E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7253 0000212E 89D8                    		mov	ax, bx
  7254 00002130 5B                      		pop	bx
  7255 00002131 0E                      		push	cs		; *place code segment in stack and
  7256 00002132 E80100                  		call	cmos_popf	; *handle popf for b- level 80286
  7257 00002135 C3                      		retn			; return with flags restored
  7258                                  
  7259                                  ; ---------------------------------------------------------------------------
  7260                                  
  7261                                  cmos_popf:				
  7262 00002136 CF                      		iret			; popf for level b- parts
  7263                                  					; return far and restore flags
  7264                                  
  7265                                  ; =============== S U B	R O U T	I N E =======================================
  7266                                  
  7267                                  ;--- cmos_write ----------------------------------------------------------------
  7268                                  ;		write byte to cmos system clock configuration table	       :
  7269                                  ;									       :
  7270                                  ; input: (al)=	cmos table address to be written to			       :
  7271                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7272                                  ;		bits 6-0 = address of table location to write		       :
  7273                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
  7274                                  ;									       :
  7275                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
  7276                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
  7277                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7278                                  ;		the cmos address register is pointed to a default value and    :
  7279                                  ;		the interrupt flag restored to the entry state on return.      :
  7280                                  ;		only the cmos location and the nmi state is changed.	       :
  7281                                  ;-------------------------------------------------------------------------------
  7282                                  
  7283                                  cmos_write:				; write (ah) to location (al)
  7284 00002137 9C                      		pushf			;
  7285 00002138 50                      		push	ax		; save work register values
  7286 00002139 FA                      		cli
  7287 0000213A 50                      		push	ax		; save user nmi	state
  7288 0000213B 0C80                    		or	al, 80h		; disable nmi for us
  7289 0000213D E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7290                                  					; RTC Seconds
  7291 0000213F 90                      		nop
  7292 00002140 88E0                    		mov	al, ah
  7293 00002142 E671                    		out	71h, al		; CMOS Memory/RTC Data Register
  7294 00002144 58                      		pop	ax		; get user nmi
  7295 00002145 2480                    		and	al, 80h
  7296 00002147 0C0F                    		or	al, 0Fh
  7297 00002149 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7298                                  					; RTC Seconds
  7299 0000214B 90                      		nop
  7300 0000214C E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7301 0000214E 58                      		pop	ax		; restore work registers
  7302 0000214F 0E                      		push	cs		; *place code segment in stack and
  7303 00002150 E8E3FF                  		call	cmos_popf	; *handle popf for b- level 80286
  7304 00002153 C3                      		retn
  7305                                  
  7306                                  ; 21/12/2022
  7307                                  ; ---------------------------------------------------------------------------
  7308                                  ; ---------------------------------------------------------------------------
  7309                                  %if 0
  7310                                  
  7311                                  ; ---------------------------------------------------------------------------
  7312                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
  7313                                  ; ---------------------------------------------------------------------------
  7314                                  ; The following routines provide support for reading in the file MSDOS.SYS.
  7315                                  ; ---------------------------------------------------------------------------
  7316                                  
  7317                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7318                                  ;
  7319                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
  7320                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
  7321                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
  7322                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.) 
  7323                                  
  7324                                  ; =============== S U B	R O U T	I N E =======================================
  7325                                  
  7326                                  ; GetClus, read in a cluster at a specified address
  7327                                  ;
  7328                                  ;  bx = cluster to read
  7329                                  ;  cx = sectors per cluster
  7330                                  ;  es:di = load location
  7331                                  
  7332                                  ; 17/10/2022
  7333                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
  7334                                  ; 09/12/2022
  7335                                  DISKRD equ diskrd
  7336                                  
  7337                                  		; 17/10/2022
  7338                                  getclus:				
  7339                                  		push	cx
  7340                                  		push	di
  7341                                  		mov	[cs:doscnt], cx
  7342                                  		mov	ax, bx
  7343                                  		dec	ax
  7344                                  		dec	ax
  7345                                  		mul	cx		; convert to logical sector
  7346                                  					; dx:ax	= matching logical sector number
  7347                                  					;	  starting from the data sector
  7348                                  		add	ax, [cs:bios_l]
  7349                                  		adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
  7350                                  unpack:					
  7351                                  		push	ds
  7352                                  		push	ax
  7353                                  		push	bx
  7354                                  		mov	si, [cs:fatloc]
  7355                                  		mov	ds, si
  7356                                  		mov	si, bx		; next cluster
  7357                                  		test	byte [cs:fbigfat], 40h	; fbig
  7358                                  					; 16 bit fat?
  7359                                  		jnz	short unpack16	; yes
  7360                                  		shr	si, 1		; 12 bit fat. si=si/2
  7361                                  					; si = clus + clus/2
  7362                                  		add	si, bx		;
  7363                                  					; (si =	byte offset of the cluster in the FAT)
  7364                                  		push	dx
  7365                                  		xor	dx, dx
  7366                                  		call	get_fat_sector
  7367                                  		pop	dx
  7368                                  		mov	ax, [bx]	; save it into ax
  7369                                  		jnz	short even_odd	; if not a splitted fat, check even-odd.
  7370                                  		; 25/06/2023	
  7371                                  		;mov	al, [bx]	; splitted fat
  7372                                  		mov	[cs:temp_cluster], al
  7373                                  		inc	si		; (next	byte)
  7374                                  		push	dx
  7375                                  		xor	dx, dx
  7376                                  		call	get_fat_sector
  7377                                  		pop	dx
  7378                                  		;mov	al, ds:0
  7379                                  		mov	al, [0] ; 19/10/2022
  7380                                  		mov	[cs:temp_cluster+1], al
  7381                                  		mov	ax, [cs:temp_cluster]
  7382                                  even_odd:				
  7383                                  		pop	bx		; restore old fat entry	value
  7384                                  		push	bx		; save it right	away.
  7385                                  		shr	bx, 1		; was it even or odd?
  7386                                  		jnb	short havclus	; it was even.
  7387                                  		shr	ax, 1		; odd. massage fat value and keep
  7388                                  					; the highest 12 bits.
  7389                                  		shr	ax, 1
  7390                                  		shr	ax, 1
  7391                                  		shr	ax, 1
  7392                                  havclus:				
  7393                                  		mov	bx, ax		; now bx = new fat entry.
  7394                                  		and	bx, 0FFFh	; keep low 12 bits.
  7395                                  		jmp	short unpackx
  7396                                  ; ---------------------------------------------------------------------------
  7397                                  
  7398                                  unpack16:				
  7399                                  		push	dx
  7400                                  		xor	dx, dx
  7401                                  		shl	si, 1		; extend to 32 bit offset
  7402                                  		adc	dx, 0
  7403                                  		call	get_fat_sector
  7404                                  		pop	dx
  7405                                  		mov	bx, [bx]	;
  7406                                  					; bx = new fat entry.
  7407                                  unpackx:				
  7408                                  		pop	si		; restore old bx value into si
  7409                                  		pop	ax		; restore logical sector (low)
  7410                                  		pop	ds
  7411                                  		sub	si, bx
  7412                                  		cmp	si, -1		; one apart?
  7413                                  		jnz	short getcl2
  7414                                  		add	[cs:doscnt], cx
  7415                                  		jmp	short unpack
  7416                                  ; ---------------------------------------------------------------------------
  7417                                  
  7418                                  getcl2:					
  7419                                  		push	bx
  7420                                  		push	dx		; sector to read (high)
  7421                                  		push	ax		; sector to read (low)
  7422                                  		mov	ax, [cs:drvfat]	; get drive and	fat spec
  7423                                  		mov	cx, [cs:doscnt]
  7424                                  		pop	dx		; sector to read for diskrd (low)
  7425                                  		pop	word [cs:start_sec_h]
  7426                                  					; sector to read for diskrd (high)
  7427                                  		push	ds
  7428                                  		push	cs
  7429                                  		pop	ds
  7430                                  		push	cs		; simulate far call
  7431                                  		; 17/10/2022
  7432                                  		mov	bp, DISKRD	; 8E5h
  7433                                  		;mov	bp, 8E5h	; offset diskrd
  7434                                  					; 2C7h:8E5h = 70h:2E55h
  7435                                  		call	call_bios_code	; read the clusters
  7436                                  		pop	ds
  7437                                  		pop	bx
  7438                                  		pop	di
  7439                                  		mov	ax, [cs:doscnt]	; get number of	sectors	read
  7440                                  		xchg	ah, al		; multiply by 256
  7441                                  		shl	ax, 1		; times	2 equal	512
  7442                                  		add	di, ax		; update load location
  7443                                  		pop	cx		; restore sectors/cluster
  7444                                  		retn
  7445                                  
  7446                                  ; =============== S U B	R O U T	I N E =======================================
  7447                                  
  7448                                  
  7449                                  ;function: find and read the corresponding fat sector into ds:0
  7450                                  ;
  7451                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
  7452                                  ;     ds - fatloc segment
  7453                                  ;     cs:drvfat - logical drive number, fat id
  7454                                  ;     cs:md_sectorsize
  7455                                  ;     cs:last_fat_secnum - last fat sector number read in.
  7456                                  ;
  7457                                  ;out). corresponding fat sector read in.
  7458                                  ;      bx = offset value from fatlog segment.
  7459                                  ;      other registera saved.
  7460                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
  7461                                  ;      starts at the last byte of the fat sector. in this case, the caller
  7462                                  ;      should save this byte, and read the next fat sector to get the rest
  7463                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
  7464                                  
  7465                                  		; 17/10/2022
  7466                                  get_fat_sector:	
  7467                                  		push	ax
  7468                                  		push	cx
  7469                                  		push	di
  7470                                  		push	si
  7471                                  		push	es
  7472                                  		push	ds
  7473                                  		mov	ax, si
  7474                                  		mov	cx, [cs:md_sectorsize] ; 512
  7475                                  		div	cx		; ax = sector number, dx = offset
  7476                                  		nop
  7477                                  
  7478                                  		; Get rid of the assumption that
  7479                                  		; there	is only	one reserved sector
  7480                                  
  7481                                  		push	es
  7482                                  		push	ds
  7483                                  		push	di
  7484                                  		push	ax
  7485                                  		push	cs
  7486                                  		pop	ds
  7487                                  
  7488                                  		mov	ax, [cs:drvfat]	; get drive # and FAT id
  7489                                  		mov	bp, SETDRIVE
  7490                                  		;mov	bp, 4D7h	; setdrive
  7491                                  					; at 2C7h:4D7h = 70h:2A47h
  7492                                  		push	cs		; simulate far call
  7493                                  		call	call_bios_code	; get bds for drive
  7494                                  		pop	ax		; (sector number -without reserved and hidden sectors-)
  7495                                  		add	ax, [es:di+9]	; [es:di+BDS.resectors]
  7496                                  					; add #reserved_sectors
  7497                                  		pop	di
  7498                                  		pop	ds
  7499                                  		pop	es
  7500                                  		cmp	ax, [cs:last_fat_sec_num]
  7501                                  		jz	short gfs_split_chk ; don't need to read it again.
  7502                                  		mov	[cs:last_fat_sec_num], ax 
  7503                                  					; sector number
  7504                                  					; (in the partition, without hidden sectors)
  7505                                  		push	dx
  7506                                  		mov	word [cs:start_sec_h], 0 
  7507                                  					; prepare to read the fat sector
  7508                                  					; start_sec_h is always	0 for fat sector.
  7509                                  		mov	dx, ax
  7510                                  		mov	cx, 1		; 1 sector read
  7511                                  		mov	ax, [cs:drvfat]
  7512                                  		push	ds
  7513                                  		pop	es
  7514                                  		xor	di, di		; es:di	-> fatloc segment:0
  7515                                  		push	ds
  7516                                  		push	cs
  7517                                  		pop	ds
  7518                                  		push	cs		; simulate far call
  7519                                  		mov	bp, DISKRD	; 8E5h
  7520                                  		;mov	bp, 8E5h	; offset diskrd
  7521                                  					; 2C7h:8E5h = 70h:2E55h
  7522                                  		call	call_bios_code
  7523                                  		pop	ds
  7524                                  		pop	dx
  7525                                  		mov	cx, [cs:md_sectorsize] ; 512
  7526                                  
  7527                                  gfs_split_chk:				
  7528                                  		dec	cx		; 511
  7529                                  		cmp	dx, cx		; if offset points to the
  7530                                  					; last byte of this sector,
  7531                                  					; then splitted	entry.
  7532                                  		mov	bx, dx		; set bx to dx
  7533                                  		pop	ds
  7534                                  		pop	es
  7535                                  		pop	si
  7536                                  		pop	di
  7537                                  		pop	cx
  7538                                  		pop	ax
  7539                                  		retn
  7540                                  
  7541                                  ; 15/10/2022
  7542                                  ;Bios_Data_Init	ends
  7543                                  
  7544                                  %endif
  7545                                  ; ---------------------------------------------------------------------------
  7546                                  ; ---------------------------------------------------------------------------
  7547                                  
  7548                                  		; 09/12/2022
  7549                                  		;db 0
  7550                                  
  7551                                  numbertodiv	equ ($-BData_start)
  7552                                  numbertomod	equ (numbertodiv % 16)
  7553                                  
  7554                                  %if numbertomod>0 & numbertomod<16
  7555 00002154 00<rep Ch>              		times (16-numbertomod) db 0
  7556                                  %endif
  7557                                  
  7558                                  ;align 16
  7559                                  
  7560                                  ; 09/12/2022
  7561                                  IOSYSCODESEGOFF	equ $ - BData_start
  7562                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
  7563                                  
  7564                                  ;--- End of DOSBIOS data segment --------------------------------------------
  7565                                  ; ---------------------------------------------------------------------------
  7566                                  		;db 4 dup(0)
  7567                                  ; 09/12/2022		
  7568                                  ;		times 4 db 0	; 19/10/2022
  7569                                  ; ---------------------------------------------------------------------------
  7570                                  
  7571                                  ;============================================================================
  7572                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
  7573                                  ;============================================================================
  7574                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7575                                  
  7576                                  section .BIOSCODE vstart=0  
  7577                                  
  7578                                  BCode_start:	 ; 09/12/2022
  7579                                   
  7580                                  ; 02/10/2022
  7581                                  
  7582                                  ;--- DOSBIOS code segment ---------------------------------------------------
  7583                                  ;----------------------------------------------------------------------------
  7584                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
  7585                                  ;----------------------------------------------------------------------------
  7586                                  
  7587                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
  7588 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
  7589 00000030 7000                    BiosDataWord:	dw 70h
  7590                                  
  7591                                  ; 15/10/2022
  7592                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
  7593                                  ; 09/12/2022
  7594                                  BIOSDATAWORD	equ BiosDataWord
  7595                                  
  7596                                  ; ---------------------------------------------------------------------------
  7597                                  
  7598                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS) 
  7599                                  
  7600                                  ;************************************************************************
  7601                                  ;*									*
  7602                                  ;*	seg_reinit is called with ax = our new code segment value,	*
  7603                                  ;*	  trashes di, cx, es						*
  7604                                  ;*									*
  7605                                  ;*	cas -- should be made disposable!				*
  7606                                  ;*									*
  7607                                  ;************************************************************************
  7608                                  
  7609                                  	; 10/08/2023 - Retro DOS v4.2 IO:SYS (optimization)
  7610                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0032h 
  7611                                  
  7612                                  _seg_reinit:
  7613 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
  7614                                  					; at 2C7h:30h or 70h:25A0h
  7615                                  		;mov	di, (offset cdev+2)
  7616 00000037 BF[BF06]                		mov	di, cdev+2	; 19/10/2022
  7617                                  		;mov	cx, 4		; (end_BC_entries - cdev)/4
  7618                                  		; 10/08/2023
  7619 0000003A B90300                  		mov	cx, 3 ; (PCDOS 7.1)
  7620                                  _seg_reinit_1:				
  7621 0000003D AB                      		stosw			; modify Bios_Code entry points
  7622 0000003E 47                      		inc	di
  7623 0000003F 47                      		inc	di
  7624 00000040 E2FB                    		loop	_seg_reinit_1
  7625                                  		; 10/08/2023 (PCDOS 7.1)
  7626                                  		; (direct jump to i2f_handler from BIOSDATA:bios_i2f)
  7627                                  		; (instead of 'bcode_i2f: dw i2f_handler, IOSYSCODESEG')
  7628 00000042 26A3[0800]              		mov     [es:bios_i2f_seg], ax ; actual BIOSCODE segment
  7629 00000046 CB                      		retf
  7630                                  
  7631                                  ; ---------------------------------------------------------------------------
  7632                                  
  7633                                  ; 15/10/2022
  7634                                  
  7635                                  ;************************************************************************
  7636                                  ;*									*
  7637                                  ;*	chardev_entry - main device driver dispatch routine		*
  7638                                  ;*	   called with a dummy parameter block on the stack		*
  7639                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
  7640                                  ;*									*
  7641                                  ;*	will eventually take care of doing the transitions in		*
  7642                                  ;*	   out of Bios_Code						*
  7643                                  ;*									*
  7644                                  ;************************************************************************
  7645                                  
  7646                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
  7647 00000047 56                      		push	si
  7648 00000048 50                      		push	ax
  7649 00000049 51                      		push	cx
  7650 0000004A 52                      		push	dx
  7651 0000004B 57                      		push	di
  7652 0000004C 55                      		push	bp
  7653 0000004D 1E                      		push	ds
  7654 0000004E 06                      		push	es
  7655 0000004F 53                      		push	bx
  7656 00000050 89E5                    		mov	bp, sp
  7657 00000052 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
  7658                                  		;;mov	ds, word [cs:0030h]
  7659                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7660 00000055 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7661 0000005A 8B4402                  		mov	ax, [si+2]	; get the device number	if present
  7662 0000005D A2[2100]                		mov	[auxnum], al
  7663 00000060 8826[E704]              		mov	[printdev], ah
  7664 00000064 8B34                    		mov	si, [si]	; point	to the device dispatch table
  7665 00000066 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
  7666 0000006A 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
  7667 0000006E 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
  7668 00000072 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
  7669 00000076 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
  7670                                  		; 17/10/2022
  7671 0000007A 81FE[3B05]              		cmp	si, DSKTBL
  7672                                  		;cmp	si, 4A2h	; dsktbl
  7673                                  					; at 2C7h:4A2h = 70h:2A12h
  7674 0000007E 7517                    		jnz	short no_sector32_mapping
  7675                                  
  7676                                  ; Special case for 32-bit start sector number:
  7677                                  ;   if (si==dsktbl) /* if this is a disk device call */
  7678                                  ;      set high 16 bits of secnum to 0
  7679                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
  7680                                  ;
  7681                                  ; pass high word of sector number in start_sec_h, low word in dx
  7682                                  ;
  7683                                  ; note: start_l and start_h are the offsets within the io_request packet
  7684                                  ;	  which contain the low and hi words of the 32 bit start sector if
  7685                                  ;	  it has been used.
  7686                                  ;
  7687                                  ; note: remember not to destroy the registers which have been set up before
  7688                                  
  7689                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
  7690 00000080 C706[2305]0000          		mov	word [start_sec_h], 0
  7691 00000086 83FAFF                  		cmp	dx, 0FFFFh
  7692 00000089 750C                    		jnz	short no_sector32_mapping
  7693 0000008B 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
  7694                                  					; 32 bits dsk req
  7695                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
  7696 0000008F 8916[2305]              		mov	[start_sec_h], dx
  7697 00000093 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
  7698                                  					; dx = packet.start_l
  7699                                  no_sector32_mapping:			
  7700 00000097 97                      		xchg	ax, di
  7701 00000098 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
  7702 0000009C 2E3A04                  		cmp	al, cs:[si]
  7703 0000009F 732C                    		jnb	short command_error
  7704 000000A1 98                      		cbw			; note that al <= 15 means ok
  7705 000000A2 D1E0                    		shl	ax, 1
  7706 000000A4 01C6                    		add	si, ax
  7707 000000A6 97                      		xchg	ax, di
  7708 000000A7 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
  7709 000000AB FC                      		cld
  7710                                  		; 17/10/2022
  7711 000000AC 2EFF5401                		call	near [cs:si+1]
  7712                                  		;call	word ptr cs:si+1
  7713 000000B0 7202                    		jb	short already_got_ah_status
  7714 000000B2 B401                    		mov	ah, 1
  7715                                  already_got_ah_status:
  7716                                  		;;mov	ds, [cs:0030h]	; 15/10/2022			
  7717                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7718                                  					; cas note: shouldn't be needed!
  7719 000000B4 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7720                                  		;lds	bx, ds:ptrsav
  7721 000000B9 C51E[1200]              		lds	bx, [ptrsav]
  7722 000000BD 894703                  		mov	[bx+3],	ax	; [bx+status]
  7723                                  					; mark operation complete
  7724 000000C0 5B                      		pop	bx
  7725 000000C1 07                      		pop	es
  7726 000000C2 1F                      		pop	ds
  7727 000000C3 5D                      		pop	bp
  7728 000000C4 5F                      		pop	di
  7729 000000C5 5A                      		pop	dx
  7730 000000C6 59                      		pop	cx
  7731 000000C7 58                      		pop	ax
  7732 000000C8 5E                      		pop	si
  7733 000000C9 83C402                  		add	sp, 2		; get rid of fake return address
  7734                                  	
  7735                                  		; fall through into bc_retf
  7736                                  ; ---------------------------------------------------------------------------	
  7737                                  bc_retf:
  7738 000000CC CB                      		retf
  7739                                  ; ---------------------------------------------------------------------------
  7740                                  
  7741                                  command_error:				
  7742 000000CD E80900                  		call	bc_cmderr
  7743 000000D0 EBE2                    		jmp	short already_got_ah_status
  7744                                  ; 15/10/2022
  7745                                  ; 01/05/2019
  7746                                  
  7747                                  ;----------------------------------------------------------------------------
  7748                                  ; The following piece of hack is for supporting CP/M compatibility
  7749                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
  7750                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
  7751                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
  7752                                  ; high.
  7753                                  ;----------------------------------------------------------------------------
  7754                                  
  7755                                  		;db 7 dup(0)
  7756                                  
  7757                                  		; 15/10/2022
  7758                                  
  7759 000000D2 0000                    		dw 0		; pad to bring offset to 0D0h
  7760                                  
  7761 000000D4 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
  7762                                  				;  which is the CP/M call 5 entry point
  7763                                  		
  7764                                  
  7765                                  ; ---------------------------------------------------------------------------
  7766                                  
  7767                                  ;	exit - all routines return through this path
  7768                                  
  7769                                  bc_cmderr:				
  7770 000000D9 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
  7771                                  					; unknown command error
  7772                                  
  7773                                  ; =============== S U B	R O U T	I N E =======================================
  7774                                  
  7775                                  ;	now zero the count field by subtracting its current value,
  7776                                  ;	  which is still in cx, from itself.
  7777                                  
  7778                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
  7779                                  ;	  in order to return the number actually complete
  7780                                  
  7781                                  bc_err_cnt:	
  7782                                  		;les	bx, ds:ptrsav
  7783                                  		; 19/10/2022
  7784 000000DB C41E[1200]              		les	bx, [ptrsav]
  7785 000000DF 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
  7786                                  					; # of successful i/o's
  7787 000000E3 B481                    		mov	ah, 81h		; mark error return
  7788 000000E5 F9                      		stc			; indicate abnormal end
  7789 000000E6 C3                      		retn
  7790                                  
  7791                                  ; 15/10/2022
  7792                                  
  7793                                  ;Bios_Code ends
  7794                                  
  7795                                  ;----------------------------------------------------------------------------
  7796                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
  7797                                  ;----------------------------------------------------------------------------
  7798                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7799                                  ; 10/01/2019 - Retro DOS v4.0
  7800                                  
  7801                                  ; 30/04/2019
  7802                                  
  7803                                  ;title	mschar - character and clock devices
  7804                                  
  7805                                  ;MODE_CTRLBRK	equ	0FFh
  7806                                  
  7807                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
  7808                                  
  7809                                  ;************************************************************************
  7810                                  ;*									*
  7811                                  ;*	device driver dispatch tables					*
  7812                                  ;*									*
  7813                                  ;*	each table starts with a byte which lists the number of		*
  7814                                  ;*	legal functions, followed by that number of words. Each		*
  7815                                  ;*	word represents an offset of a routine in Bios_Code which	*
  7816                                  ;*	handles the function. The functions are terminated with		*
  7817                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
  7818                                  ;*	to the caller. If carry is set, the ah/al registers are		*
  7819                                  ;*	returned as abnormal completion status. Notice that ds		*
  7820                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
  7821                                  ;*									*
  7822                                  ;************************************************************************
  7823                                  
  7824                                  		; 13/12/2022
  7825                                  		;db 0
  7826                                  
  7827                                  		; 13/12/202
  7828 000000E7 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
  7829                                  					; 2C7h:0E4h = 70h:2654h
  7830 000000E8 [FD01]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7831                                  					; 00 init
  7832 000000EA [FD01]                  		dw bc_exvec  ; 1FBh	; 01
  7833 000000EC [FD01]                  		dw bc_exvec  ; 1FBh	; 02
  7834 000000EE [D900]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
  7835                                  					; 03
  7836 000000F0 [5F01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
  7837                                  					; 04
  7838 000000F2 [A201]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
  7839                                  					; 05
  7840 000000F4 [FD01]                  		dw bc_exvec  ; 1FBh	; 06
  7841 000000F6 [0B02]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
  7842                                  					; 07
  7843 000000F8 [FF01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
  7844                                  					; 08
  7845 000000FA [FF01]                  		dw con_writ  ; 1FDh	; 09
  7846 000000FC [FD01]                  		dw bc_exvec  ; 1FBh	; 0A
  7847                                  con_table_end:
  7848 000000FE 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
  7849                                  					; 2C7h:0FBh = 70h:266Bh
  7850 000000FF [FD01]                  		dw bc_exvec   ; 1FBh	; bc_exvec
  7851 00000101 [FD01]                  		dw bc_exvec   ; 1FBh	; 01
  7852 00000103 [FD01]                  		dw bc_exvec   ; 1FBh	; 02
  7853 00000105 [D900]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
  7854 00000107 [1C02]                  		dw prn_input  ;	21Ah	; prn_input
  7855                                  					; 04 indicate zero chars read
  7856 00000109 [CA01]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7857                                  					; 05 read non-destructive
  7858 0000010B [FD01]                  		dw bc_exvec   ; 1FBh	; 06
  7859 0000010D [FD01]                  		dw bc_exvec   ; 1FBh	; 07
  7860 0000010F [2102]                  		dw prn_writ   ;	21Fh	; prn_writ
  7861 00000111 [2102]                  		dw prn_writ   ; 21Fh	; 09
  7862 00000113 [5202]                  		dw prn_stat   ; 251h	; prn_stat
  7863 00000115 [FD01]                  		dw bc_exvec   ; 1FBh	; 0B
  7864 00000117 [FD01]                  		dw bc_exvec   ; 1FBh	; 0C
  7865 00000119 [FD01]                  		dw bc_exvec   ; 1FBh	; 0D
  7866 0000011B [FD01]                  		dw bc_exvec   ; 1FBh	; 0E
  7867 0000011D [FD01]                  		dw bc_exvec   ; 1FBh	; 0F
  7868 0000011F [8C02]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
  7869 00000121 [FD01]                  		dw bc_exvec   ; 1FBh	; 11
  7870 00000123 [FD01]                  		dw bc_exvec   ; 1FBh	; 12
  7871 00000125 [BA02]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
  7872 00000127 [FD01]                  		dw bc_exvec   ; 1FBh	; 14
  7873 00000129 [FD01]                  		dw bc_exvec   ; 1FBh	; 15
  7874 0000012B [FD01]                  		dw bc_exvec   ; 1FBh	; 16
  7875 0000012D [FD01]                  		dw bc_exvec   ; 1FBh	; 17
  7876 0000012F [FD01]                  		dw bc_exvec   ; 1FBh	; 18
  7877 00000131 [EF02]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
  7878                                  prn_table_end:
  7879 00000133 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
  7880                                  					; 2C7h:130h = 70h:26A0h
  7881 00000134 [FD01]                  		dw bc_exvec   ; 1FBh	; 00 - init
  7882 00000136 [FD01]                  		dw bc_exvec   ; 1FBh	; 01
  7883 00000138 [FD01]                  		dw bc_exvec   ; 1FBh	; 02
  7884 0000013A [D900]                  		dw bc_cmderr  ;	0D5h	; 03
  7885 0000013C [0A03]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
  7886 0000013E [2F03]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
  7887 00000140 [FD01]                  		dw bc_exvec   ; 1FBh	; 06
  7888 00000142 [6503]                  		dw aux_flsh   ;	36Ch	; aux_flsh
  7889 00000144 [6C03]                  		dw aux_writ   ;	374h	; aux_writ
  7890 00000146 [6C03]                  		dw aux_writ   ;	374h	; 09
  7891 00000148 [4F03]                  		dw aux_wrst   ;	355h	; aux_wrst
  7892                                  aux_table_end:
  7893 0000014A 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
  7894                                  					; 2C7h:147h = 70h:26B7h
  7895 0000014B [FD01]                  		dw bc_exvec   ; 1FBh	; 00
  7896 0000014D [FD01]                  		dw bc_exvec   ; 1FBh	; 01
  7897 0000014F [FD01]                  		dw bc_exvec   ; 1FBh	; 02
  7898 00000151 [D900]                  		dw bc_cmderr  ;	0D5h	; 03
  7899 00000153 [D104]                  		dw tim_read   ;	435h	; tim_read
  7900 00000155 [CA01]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7901 00000157 [FD01]                  		dw bc_exvec   ; 1FBh	; 06
  7902 00000159 [FD01]                  		dw bc_exvec   ; 1FBh	; 07
  7903 0000015B [D203]                  		dw tim_writ   ; 3DBh	; tim_writ
  7904 0000015D [D203]                  		dw tim_writ   ; 3DBh	; 09
  7905                                  tim_table_end:
  7906                                  
  7907                                  ; ---------------------------------------------------------------------------
  7908                                  
  7909                                  ;************************************************************************
  7910                                  ;*									*
  7911                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
  7912                                  ;*									*
  7913                                  ;************************************************************************
  7914                                  
  7915                                  con_read:				; 2C7h:15Ch = 70h:26CCh
  7916                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
  7917 0000015F E306                    		jcxz	con_exit	; 19/10/2022
  7918                                  con_loop:				
  7919 00000161 E80500                  		call	chrin		; get char in al
  7920 00000164 AA                      		stosb			; store	char at	es:di
  7921 00000165 E2FA                    		loop	con_loop
  7922                                  con_exit:				
  7923 00000167 F8                      		clc
  7924 00000168 C3                      		retn
  7925                                  
  7926                                  ; =============== S U B	R O U T	I N E =======================================
  7927                                  
  7928                                  ;************************************************************************
  7929                                  ;*									*
  7930                                  ;*	chrin - input single char from keyboard into al			*
  7931                                  ;*									*
  7932                                  ;*	  we are going to issue extended keyboard function, if		*
  7933                                  ;*	  supported. the returning value of the extended keystroke	*
  7934                                  ;*	  of the extended keyboard function uses 0E0h in al		*
  7935                                  ;*	  instead of 00h as in the conventional keyboard function.	*
  7936                                  ;*	  this creates a conflict when the user entered real		*
  7937                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
  7938                                  ;*	  keystroke and the greek alpha. this case will be handled	*
  7939                                  ;*	  in the following manner:					*
  7940                                  ;*									*
  7941                                  ;*	      ah = 16h							*
  7942                                  ;*	      int 16h							*
  7943                                  ;*	      if al == 0, then extended code (in ah)			*
  7944                                  ;*	      else if al == 0E0h, then					*
  7945                                  ;*	      if ah <> 0, then extended code (in ah)			*
  7946                                  ;*		else greek_alpha character.				*
  7947                                  ;*									*
  7948                                  ;*	also, for compatibility reason, if an extended code is		*
  7949                                  ;*	  detected, then we are going to change the value in al		*
  7950                                  ;*	  from 0E0h to 00h.						*
  7951                                  ;*									*
  7952                                  ;************************************************************************
  7953                                  
  7954                                  		; 19/10/2022
  7955                                  chrin:		
  7956 00000169 8A26[E504]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
  7957 0000016D 30C0                    		xor	al, al
  7958 0000016F 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
  7959 00000173 08C0                    		or	al, al
  7960 00000175 752A                    		jnz	short keyret
  7961 00000177 CD16                    		int	16h		; KEYBOARD -
  7962 00000179 09C0                    		or	ax, ax
  7963 0000017B 74EC                    		jz	short chrin
  7964 0000017D 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7965 00000180 7504                    		jnz	short alt_ext_chk
  7966 00000182 B010                    		mov	al, 10h
  7967 00000184 EB1B                    		jmp	short keyret
  7968                                  ; ---------------------------------------------------------------------------
  7969                                  
  7970                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
  7971                                  ;    if character read was 0E0h then
  7972                                  ;      if extended byte was zero (i.e. ah == 0) then
  7973                                  ;	 goto keyret
  7974                                  ;      else
  7975                                  ;	 set al to zero
  7976                                  ;	 goto alt_save
  7977                                  ;      endif
  7978                                  ;    endif
  7979                                  ;  endif
  7980                                  
  7981                                  alt_ext_chk:
  7982 00000186 803E[E504]00            		cmp	byte [keyrd_func], 0
  7983 0000018B 740C                    		jz	short not_ext
  7984 0000018D 3CE0                    		cmp	al, 0E0h
  7985 0000018F 7508                    		jnz	short not_ext
  7986 00000191 08E4                    		or	ah, ah
  7987 00000193 740C                    		jz	short keyret
  7988 00000195 30C0                    		xor	al, al
  7989 00000197 EB04                    		jmp	short alt_save
  7990                                  ; ---------------------------------------------------------------------------
  7991                                  
  7992                                  not_ext:				
  7993 00000199 08C0                    		or	al, al		; special case?
  7994 0000019B 7504                    		jnz	short keyret
  7995                                  alt_save:				
  7996 0000019D 8826[0C00]              		mov	[altah], ah	; store	special	key
  7997                                  keyret:					
  7998 000001A1 C3                      		retn
  7999                                  
  8000                                  ; ---------------------------------------------------------------------------
  8001                                  
  8002                                  ;************************************************************************
  8003                                  ;*									*
  8004                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
  8005                                  ;*									*
  8006                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
  8007                                  ;*	in the status word of the request packet, and there is no	*
  8008                                  ;*	character in the input buffer, the driver issues a system	*
  8009                                  ;*	wait request to the rom. on return from the rom, it returns	*
  8010                                  ;*	a 'char-not-found' to the dos.					*
  8011                                  ;*									*
  8012                                  ;************************************************************************
  8013                                  
  8014                                  		; 19/10/2022
  8015                                  con_rdnd:				
  8016 000001A2 A0[0C00]                		mov	al, [altah]
  8017 000001A5 08C0                    		or	al, al
  8018 000001A7 754C                    		jnz	short rdexit
  8019 000001A9 8A26[E604]              		mov	ah, [keysts_func]
  8020 000001AD CD16                    		int	16h		; KEYBOARD -
  8021 000001AF 751D                    		jnz	short gotchr
  8022 000001B1 803E[7900]00            		cmp	byte [fhavek09], 0
  8023 000001B6 7412                    		jz	short z_bus_exit
  8024 000001B8 C41E[1200]              		les	bx, [ptrsav]
  8025                                  		; 12/12/2022
  8026 000001BC 26F6470404              		test	byte [es:bx+4], 04h
  8027                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
  8028 000001C1 7407                    		jz	short z_bus_exit
  8029 000001C3 B80041                  		mov	ax, 4100h
  8030 000001C6 30DB                    		xor	bl, bl
  8031 000001C8 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  8032                                  					; AL = condition type, BH = condition compare or mask value
  8033                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  8034                                  					; DX = I/O port	address	if AL bit 4 set
  8035                                  z_bus_exit:				
  8036 000001CA F9                      		stc			; 2C7h:1C8h = 70h:2738h
  8037 000001CB B403                    		mov	ah, 3		; indicate busy	status
  8038 000001CD C3                      		retn
  8039                                  ; ---------------------------------------------------------------------------
  8040                                  
  8041                                  gotchr:					
  8042 000001CE 09C0                    		or	ax, ax
  8043 000001D0 7508                    		jnz	short notbrk	; check	for null after break
  8044 000001D2 8A26[E504]              		mov	ah, [keyrd_func] ; issue keyboard read function
  8045 000001D6 CD16                    		int	16h		; KEYBOARD -
  8046 000001D8 EBC8                    		jmp	short con_rdnd	; get a	real status
  8047                                  ; ---------------------------------------------------------------------------
  8048                                  
  8049                                  notbrk:					
  8050 000001DA 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  8051 000001DD 7504                    		jnz	short rd_ext_chk
  8052 000001DF B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
  8053 000001E1 EB12                    		jmp	short rdexit
  8054                                  ; ---------------------------------------------------------------------------
  8055                                  
  8056                                  rd_ext_chk:				
  8057 000001E3 803E[E504]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
  8058 000001E8 740B                    		jz	short rdexit
  8059 000001EA 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
  8060 000001EC 7507                    		jnz	short rdexit
  8061 000001EE 80FC00                  		cmp	ah, 0		; scan code exist?
  8062 000001F1 7402                    		jz	short rdexit	; yes. greek alpha char.
  8063 000001F3 B000                    		mov	al, 0		; no. extended key stroke.
  8064                                  					; change it for	compatibility
  8065                                  rdexit:					
  8066 000001F5 C41E[1200]              		les	bx, [ptrsav]
  8067 000001F9 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
  8068                                  					; return keyboard character here
  8069                                  bc_exvec:				
  8070 000001FD F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  8071                                  					; indicate normal termination
  8072 000001FE C3                      		retn
  8073                                  ; ---------------------------------------------------------------------------
  8074                                  
  8075                                  ;************************************************************************
  8076                                  ;*									*
  8077                                  ;*	con_write - console write routine				*
  8078                                  ;*									*
  8079                                  ;*	entry:	es:di -> buffer						*
  8080                                  ;*		cx    =  count						*
  8081                                  ;*									*
  8082                                  ;************************************************************************
  8083                                  
  8084                                  con_writ:
  8085                                  		;jcxz	short bc_exvec
  8086 000001FF E3FC                    		jcxz	bc_exvec	; 19/10/2022
  8087                                  		; 12/12/2022
  8088                                  		;jcxz	cc_ret
  8089                                  con_lp:					
  8090 00000201 268A05                  		mov	al, [es:di]
  8091 00000204 47                      		inc	di
  8092 00000205 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
  8093                                  					; AL = character to display
  8094 00000207 E2F8                    		loop	con_lp
  8095                                  cc_ret:					
  8096 00000209 F8                      		clc
  8097 0000020A C3                      		retn
  8098                                  
  8099                                  ; =============== S U B	R O U T	I N E =======================================
  8100                                  
  8101                                  ;************************************************************************
  8102                                  ;*									*
  8103                                  ;*	con_flush - flush out keyboard queue				*
  8104                                  ;*									*
  8105                                  ;************************************************************************
  8106                                  
  8107                                  con_flush:
  8108 0000020B C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
  8109                                  flloop:					; while	(charavail()) charread();	
  8110 00000210 B401                    		mov	ah, 1
  8111 00000212 CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
  8112                                  					; Return: ZF clear if character	in buffer
  8113                                  					; AH = scan code, AL = character
  8114                                  					; ZF set if no character in buffer
  8115 00000214 74F3                    		jz	short cc_ret
  8116 00000216 30E4                    		xor	ah, ah
  8117 00000218 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  8118                                  					; Return: AH = scan code, AL = character
  8119 0000021A EBF4                    		jmp	short flloop
  8120                                  
  8121                                  ; ---------------------------------------------------------------------------
  8122                                  
  8123                                  ; 15/10/2022
  8124                                  
  8125                                  ;************************************************************************
  8126                                  ;*									*
  8127                                  ;*	some equates for rom bios printer i/o				*
  8128                                  ;*									*
  8129                                  ;************************************************************************
  8130                                  
  8131                                  ; ibm rom status bits (i don't trust them, neither should you)
  8132                                  ; warning!!! the ibm rom does not return just one bit. it returns a
  8133                                  ; whole slew of bits, only one of which is correct.
  8134                                  
  8135                                  ;notbusystatus	equ 10000000b		; not busy
  8136                                  ;nopaperstatus	equ 00100000b		; no more paper
  8137                                  ;prnselected	equ 00010000b		; printer selected
  8138                                  ;ioerrstatus	equ 00001000b		; some kinda error
  8139                                  ;timeoutstatus	equ 00000001b		; time out.
  8140                                  ;
  8141                                  ;noprinter	equ 00110000b		; no printer attached
  8142                                  
  8143                                  ; 18/03/2019 - Retro DOS v4.0
  8144                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
  8145                                  
  8146                                  ; ---------------------------------------------------------------------------
  8147                                  
  8148                                  ;************************************************************************
  8149                                  ;*									*
  8150                                  ;*	prn_input - return with no error but zero chars read		*
  8151                                  ;*									*
  8152                                  ;*	enter with cx = number of characters requested			*
  8153                                  ;*									*
  8154                                  ;************************************************************************
  8155                                  
  8156                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
  8157 0000021C E8BCFE                  		call	bc_err_cnt	; reset	count to zero
  8158                                  					; (sub reqpkt.count,cx)
  8159                                  		; 12/12/2022
  8160                                  prn_done:
  8161 0000021F F8                      		clc			; but return with carry	reset for no error
  8162 00000220 C3                      		retn
  8163                                  ; ---------------------------------------------------------------------------
  8164                                  
  8165                                  ;************************************************************************
  8166                                  ;*									*
  8167                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
  8168                                  ;*									*
  8169                                  ;*	auxnum has printer number					*
  8170                                  ;*									*
  8171                                  ;************************************************************************
  8172                                  
  8173                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
  8174                                  		;jcxz	short prn_done	; no chars to output
  8175 00000221 E3FC                    		jcxz	prn_done	; 19/10/2022
  8176                                  prn_loop:				
  8177 00000223 BB0200                  		mov	bx, 2		; retry	count
  8178                                  prn_out:				
  8179 00000226 E83600                  		call	prnstat		; get status
  8180 00000229 751D                    		jnz	short TestPrnError
  8181 0000022B 268A05                  		mov	al, [es:di]	; get character	to print
  8182 0000022E 30E4                    		xor	ah, ah
  8183 00000230 E82E00                  		call	prnop		; print	to printer
  8184 00000233 7419                    		jz	short prn_con	; no error - continue
  8185 00000235 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
  8186 00000238 7509                    		jnz	short _prnwf
  8187 0000023A B00C                    		mov	al, 0Ch		; error_I24_gen_failure
  8188 0000023C C606[0C00]00            		mov	byte [altah], 0
  8189 00000241 EB08                    		jmp	short pmessg
  8190                                  ; ---------------------------------------------------------------------------
  8191                                  
  8192                                  _prnwf:					
  8193 00000243 F6C401                  		test	ah, 1		; timeoutstatus
  8194 00000246 7406                    		jz	short prn_con
  8195                                  TestPrnError:				
  8196 00000248 4B                      		dec	bx		; retry	until count is exhausted.
  8197 00000249 75DB                    		jnz	short prn_out
  8198                                  pmessg:					
  8199 0000024B E98DFE                  		jmp	bc_err_cnt
  8200                                  ; ---------------------------------------------------------------------------
  8201                                  
  8202                                  prn_con:				
  8203 0000024E 47                      		inc	di		; point	to next	char and continue
  8204 0000024F E2D2                    		loop	prn_loop
  8205                                  ;prn_done:				
  8206                                  		; 12/12/2022
  8207                                  prn_done2:
  8208                                  		;clc
  8209                                  		; cf=0
  8210 00000251 C3                      		retn
  8211                                  ; ---------------------------------------------------------------------------
  8212                                  
  8213                                  ;************************************************************************
  8214                                  ;*									*
  8215                                  ;*	prn_stat - device driver entry to return printer status		*
  8216                                  ;*									*
  8217                                  ;************************************************************************
  8218                                  
  8219                                  prn_stat:				; 2C7h:251h = 70h:27C1h
  8220 00000252 E80A00                  		call	prnstat		; device in dx
  8221 00000255 75F4                    		jnz	short pmessg
  8222 00000257 F6C480                  		test	ah, 80h		; notbusystatus
  8223                                  		;jnz	short prn_done
  8224                                  		; 12/12/2022
  8225 0000025A 75F5                    		jnz	short prn_done2 ; cf=0
  8226 0000025C E96BFF                  		jmp	z_bus_exit
  8227                                  ; ---------------------------------------------------------------------------
  8228                                  
  8229                                  ;************************************************************************
  8230                                  ;*									*
  8231                                  ;*	prnstat - utility function to call ROM BIOS to check		*
  8232                                  ;*		 printer status. Return meaningful error code		*
  8233                                  ;*									*
  8234                                  ;************************************************************************
  8235                                  
  8236                                  prnstat:				
  8237 0000025F B402                    		mov	ah, 2		; set command for get status
  8238                                  					; PRINTER - GET	STATUS
  8239                                  					; DX = printer port (0-3)
  8240                                  					; Return: AH = status
  8241                                  
  8242                                  ; =============== S U B	R O U T	I N E =======================================
  8243                                  
  8244                                  ;************************************************************************
  8245                                  ;*									*
  8246                                  ;*	prnop - call ROM BIOS printer function in ah			*
  8247                                  ;*		return zero true if no error				*
  8248                                  ;*		return zero false if error, al = error code		*
  8249                                  ;*									*
  8250                                  ;************************************************************************
  8251                                  
  8252                                  prnop:	
  8253 00000261 8B16[2100]              		mov	dx, [auxnum]	; get printer number
  8254 00000265 CD17                    		int	17h		
  8255                                  
  8256                                  	; This check was added to see if this is a case of no
  8257                                  	; printer being installed. This tests checks to be sure
  8258                                  	; the error is noprinter (30h)
  8259                                  
  8260 00000267 50                      		push	ax
  8261 00000268 80E430                  		and	ah, 30h
  8262 0000026B 80FC30                  		cmp	ah, 30h		; noprinter
  8263 0000026E 58                      		pop	ax
  8264 0000026F 7506                    		jnz	short NextTest
  8265 00000271 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
  8266 00000274 80CC08                  		or	ah, 8		; ioerrstatus
  8267                                  
  8268                                  ; examine the status bits to see if an error occurred. unfortunately, several
  8269                                  ; of the bits are set so we have to pick and choose. we must be extremely
  8270                                  ; careful about breaking basic.
  8271                                  
  8272                                  NextTest:				
  8273 00000277 F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
  8274                                  					; i/o error?
  8275 0000027A 740A                    		jz	short checknotready ; no, try not ready
  8276                                  
  8277                                  ; at this point, we know we have an error. the converse is not true
  8278                                  
  8279 0000027C B009                    		mov	al, 9		; error_I24_out_of_paper
  8280                                  					; first, assume	out of paper
  8281 0000027E F6C420                  		test	ah, 20h		; out of paper set?
  8282 00000281 7502                    		jnz	short ret1	; yes, error is	set
  8283 00000283 FEC0                    		inc	al		; return al=10 (i/o error)
  8284                                  ret1:					
  8285 00000285 C3                      		retn
  8286                                  ; ---------------------------------------------------------------------------
  8287                                  
  8288                                  checknotready:				
  8289 00000286 B002                    		mov	al, 2		; assume not-ready
  8290 00000288 F6C401                  		test	ah, 1
  8291 0000028B C3                      		retn
  8292                                  
  8293                                  ; ---------------------------------------------------------------------------
  8294                                  
  8295                                  ;************************************************************************
  8296                                  ;*									*
  8297                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
  8298                                  ;*		     this entry point should never block waiting for	*
  8299                                  ;*		     device to come ready.				*
  8300                                  ;*									*
  8301                                  ;*	inputs:	cx = count, es:di -> buffer				*
  8302                                  ;*	outputs: set the number of bytes transferred in the		*
  8303                                  ;*		 device driver request packet				*
  8304                                  ;*									*
  8305                                  ;************************************************************************
  8306                                  
  8307                                  		; 19/10/2022
  8308                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
  8309 0000028C 89FE                    		mov	si, di		; everything is	set for	lodsb
  8310                                  prn_tilbloop:				
  8311 0000028E 51                      		push	cx
  8312 0000028F 53                      		push	bx
  8313 00000290 30FF                    		xor	bh, bh
  8314 00000292 8A1E[E704]              		mov	bl, [printdev]
  8315 00000296 D1E3                    		shl	bx, 1
  8316                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
  8317 00000298 8B8F[E804]              		mov	cx, [wait_count+bx]
  8318 0000029C 5B                      		pop	bx
  8319                                  prn_getstat:				
  8320 0000029D E8BFFF                  		call	prnstat		; get status
  8321 000002A0 7514                    		jnz	short prn_bperr	; error
  8322 000002A2 F6C480                  		test	ah, 80h		; ready	yet?
  8323 000002A5 E1F6                    		loope	prn_getstat	; no, go for more
  8324 000002A7 59                      		pop	cx		; get original count
  8325 000002A8 740D                    		jz	short prn_berr	; still	not ready => done
  8326 000002AA 26                      		es
  8327 000002AB AC                      		lodsb
  8328                                  		;lods	byte ptr es:[si] ; es
  8329                                  					; lodsb
  8330 000002AC 30E4                    		xor	ah, ah
  8331 000002AE E8B0FF                  		call	prnop
  8332 000002B1 7504                    		jnz	short prn_berr	; error
  8333 000002B3 E2D9                    		loop	prn_tilbloop
  8334                                  		; 12/12/2022
  8335                                  		; cf=0 (prnop)
  8336                                  		;clc			; normal no-error return
  8337 000002B5 C3                      		retn			;   from device driver
  8338                                  
  8339                                  ; ---------------------------------------------------------------------------
  8340                                  
  8341                                  prn_bperr:				
  8342 000002B6 59                      		pop	cx		; restore transfer count from stack
  8343                                  prn_berr:				
  8344 000002B7 E921FE                  		jmp	bc_err_cnt
  8345                                  ; ---------------------------------------------------------------------------
  8346                                  
  8347                                  ; 15/10/2022
  8348                                  
  8349                                  ;************************************************************************
  8350                                  ;*									*
  8351                                  ;*	prn_genioctl - get/set printer retry count			*
  8352                                  ;*									*
  8353                                  ;************************************************************************
  8354                                  
  8355                                  ; IOCTL.INC (MSDOS 6.0, 1991)
  8356                                  ; 11/01/2019
  8357                                  
  8358                                  ;********************************;*
  8359                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
  8360                                  ;********************************;*
  8361                                  
  8362                                  ;;RAWIO SUB-FUNCTIONS
  8363                                  ;;get_retry_count equ 65h
  8364                                  ;;set_retry_count equ 45h
  8365                                  
  8366                                  ;;struc A_RETRYCOUNT
  8367                                  ;;.rc_count: resw 1
  8368                                  ;;endstruc
  8369                                  
  8370                                  ;ioc_pc equ 5
  8371                                  
  8372                                  ; ---------------------------------------------------------------------------
  8373                                  
  8374                                  		; 19/10/2022
  8375                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
  8376 000002BA C43E[1200]              		les	di, [ptrsav]
  8377 000002BE 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8378                                  					; ioc_pc
  8379 000002C3 7403                    		jz	short prnfunc_ok
  8380                                  
  8381                                  prnfuncerr:				
  8382 000002C5 E911FE                  		jmp	bc_cmderr
  8383                                  ; ---------------------------------------------------------------------------
  8384                                  
  8385                                  prnfunc_ok:				
  8386 000002C8 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8387 000002CC 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
  8388 000002D0 30FF                    		xor	bh, bh
  8389                                  		;mov	bl, ds:printdev	; get index into retry counts
  8390 000002D2 8A1E[E704]              		mov	bl, [printdev]
  8391 000002D6 D1E3                    		shl	bx, 1
  8392                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
  8393 000002D8 8B8F[E804]              		mov	cx, [wait_count+bx]
  8394 000002DC 3C65                    		cmp	al, 65h		; get_retry_count
  8395 000002DE 7407                    		jz	short prngetcount
  8396 000002E0 3C45                    		cmp	al, 45h		; set_retry_count
  8397 000002E2 75E1                    		jnz	short prnfuncerr
  8398 000002E4 268B0D                  		mov	cx, [es:di]
  8399                                  prngetcount:				
  8400                                  		;mov	ds:wait_count[bx], cx
  8401 000002E7 898F[E804]              		mov	[wait_count+bx], cx
  8402 000002EB 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
  8403                                  					; return current retry count
  8404                                  		; 12/12/2022
  8405                                  		; cf=0
  8406                                  		;clc
  8407 000002EE C3                      		retn
  8408                                  ; ---------------------------------------------------------------------------
  8409                                  
  8410                                  ;************************************************************************
  8411                                  ;*									*
  8412                                  ;*  prn_ioctl_query							*
  8413                                  ;*									*
  8414                                  ;*  Added for 5.00							*
  8415                                  ;************************************************************************
  8416                                  
  8417                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
  8418 000002EF C43E[1200]              		les	di, [ptrsav]
  8419 000002F3 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8420                                  					; ioc_pc
  8421 000002F8 750D                    		jnz	short prn_query_err
  8422 000002FA 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8423 000002FE 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
  8424 00000300 7404                    		jz	short IOCtlSupported
  8425 00000302 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
  8426 00000304 7501                    		jnz	short prn_query_err
  8427                                  IOCtlSupported:	
  8428                                  		; 12/12/2022
  8429                                  		; cf=0		
  8430                                  		;clc
  8431 00000306 C3                      		retn
  8432                                  ; ---------------------------------------------------------------------------
  8433                                  
  8434                                  prn_query_err:
  8435                                  		; 12/12/2022				
  8436                                  		;stc
  8437 00000307 E9CFFD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
  8438                                  ; ---------------------------------------------------------------------------
  8439                                  
  8440                                  ;************************************************************************
  8441                                  ;*									*
  8442                                  ;*	aux port driver code -- "aux" == "com1"				*
  8443                                  ;*									*
  8444                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
  8445                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
  8446                                  ;*									*
  8447                                  ;************************************************************************
  8448                                  
  8449                                  ;	values in ah, requesting function of int 14h in rom bios
  8450                                  
  8451                                  ;auxfunc_send	 equ	1	;transmit
  8452                                  ;auxfunc_receive equ	2	;read
  8453                                  ;auxfunc_status	 equ	3	;request status
  8454                                  
  8455                                  ;	error flags, reported by int 14h, reported in ah:
  8456                                  
  8457                                  ;flag_data_ready equ	01h	;data ready
  8458                                  ;flag_overrun	 equ	02h	;overrun error
  8459                                  ;flag_parity	 equ	04h	;parity error
  8460                                  ;flag_frame	 equ	08h	;framing error
  8461                                  ;flag_break	 equ	10h	;break detect
  8462                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
  8463                                  ;flag_timeout	 equ	80h	;timeout
  8464                                  
  8465                                  ;	these flags reported in al:
  8466                                  
  8467                                  ;flag_cts	 equ	10h	;clear to send
  8468                                  ;flag_dsr	 equ	20h	;data set ready
  8469                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
  8470                                  
  8471                                  ; ---------------------------------------------------------------------------
  8472                                  
  8473                                  ;************************************************************************
  8474                                  ;*									*
  8475                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
  8476                                  ;*		   at es:di						*
  8477                                  ;*									*
  8478                                  ;************************************************************************
  8479                                  
  8480                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
  8481                                  		;jcxz	short exvec2
  8482 0000030A E311                    		jcxz	exvec2		; 19/10/2022
  8483 0000030C E87500                  		call	getbx		; put address of auxbuf	in bx
  8484 0000030F 30C0                    		xor	al, al
  8485 00000311 8607                    		xchg	al, [bx]
  8486 00000313 08C0                    		or	al, al
  8487 00000315 7503                    		jnz	short aux2
  8488                                  aux1:					
  8489 00000317 E80500                  		call	auxin		; get character	from port
  8490                                  					; won't return if error
  8491                                  aux2:					
  8492 0000031A AA                      		stosb
  8493 0000031B E2FA                    		loop	aux1		; if more characters, go around	again
  8494                                  exvec2:					
  8495 0000031D F8                      		clc			; all done, successful exit
  8496                                  auxin_retn:	; 18/12/2022
  8497 0000031E C3                      		retn
  8498                                  ; ---------------------------------------------------------------------------
  8499                                  
  8500                                  ;************************************************************************
  8501                                  ;*									*
  8502                                  ;*	auxin - call rom bios to read character from aux port		*
  8503                                  ;*		if error occurs, map the error and return one		*
  8504                                  ;*		level up to device driver exit code, setting		*
  8505                                  ;*		the number of bytes transferred appropriately		*
  8506                                  ;*									*
  8507                                  ;************************************************************************
  8508                                  
  8509                                  auxin:					
  8510 0000031F B402                    		mov	ah, 2		; auxfunc_receive
  8511 00000321 E83A00                  		call	auxop
  8512 00000324 F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
  8513                                  		;jnz	short arbad	; skip if any error bits set
  8514                                  		;retn
  8515                                  		; 25/06/2023 (BugFix)
  8516 00000327 74F5                    		jz	short auxin_retn
  8517                                  ; ---------------------------------------------------------------------------
  8518                                  
  8519                                  arbad:					
  8520 00000329 58                      		pop	ax		; remove return	address	(near call)
  8521                                  		;xor	al, al
  8522                                  		;or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
  8523                                  		; 11/08/2023
  8524 0000032A B0B0                    		mov	al, 0B0h	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0334h
  8525 0000032C E9ACFD                  		jmp	bc_err_cnt
  8526                                  
  8527                                  ; ---------------------------------------------------------------------------
  8528                                  
  8529                                  ;************************************************************************
  8530                                  ;*									*
  8531                                  ;*	aux_rdnd - non-destructive aux port read			*
  8532                                  ;*									*
  8533                                  ;************************************************************************
  8534                                  
  8535                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
  8536 0000032F E85200                  		call	getbx
  8537 00000332 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
  8538 00000334 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
  8539 00000336 7511                    		jnz	short auxdrx	; then return character
  8540 00000338 E82100                  		call	auxstat		; if not, get status of	aux device
  8541 0000033B F6C401                  		test	ah, 1		; flag_data_ready - test data ready
  8542 0000033E 740C                    		jz	short auxbus	; then device is busy (not ready)
  8543 00000340 A820                    		test	al, 20h		; flag_dsr - test data set ready
  8544 00000342 7408                    		jz	short auxbus	; then device is busy (not ready)
  8545 00000344 E8D8FF                  		call	auxin		; else aux is ready, get character
  8546 00000347 8807                    		mov	[bx], al
  8547                                  auxdrx:					
  8548 00000349 E9A9FE                  		jmp	rdexit		; return busy status
  8549                                  ; ---------------------------------------------------------------------------
  8550                                  
  8551                                  auxbus:					
  8552 0000034C E97BFE                  		jmp	z_bus_exit
  8553                                  ; ---------------------------------------------------------------------------
  8554                                  
  8555                                  ;************************************************************************
  8556                                  ;*									*
  8557                                  ;*	aux_wrst - return aux port write status				*
  8558                                  ;*									*
  8559                                  ;************************************************************************
  8560                                  
  8561                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
  8562 0000034F E80A00                  		call	auxstat		; get status of	aux in ax
  8563 00000352 A820                    		test	al, 20h		; test data set	ready
  8564 00000354 74F6                    		jz	short auxbus	; then device is busy (not ready)
  8565 00000356 F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
  8566 00000359 74F1                    		jz	short auxbus	; then device is busy (not ready)
  8567                                  		; 12/12/2022
  8568                                  		; cf=0	; (test instruction resets cf)
  8569                                  		;clc
  8570 0000035B C3                      		retn
  8571                                  ; ---------------------------------------------------------------------------
  8572                                  
  8573                                  ;************************************************************************
  8574                                  ;*									*
  8575                                  ;*	auxstat - call rom bios to determine aux port status		*
  8576                                  ;*									*
  8577                                  ;*	exit:	ax = status						*
  8578                                  ;*		dx = [auxnum]						*
  8579                                  ;*									*
  8580                                  ;************************************************************************
  8581                                  
  8582                                  auxstat:				
  8583 0000035C B403                    		mov	ah, 3		; auxfunc_status
  8584                                  
  8585                                  		; fall into auxop
  8586                                  
  8587                                  ; =============== S U B	R O U T	I N E =======================================
  8588                                  
  8589                                  ;************************************************************************
  8590                                  ;*									*
  8591                                  ;*	auxop - perform rom-biox aux port interrupt			*
  8592                                  ;*									*
  8593                                  ;*	entry:	ah = int 14h function number				*
  8594                                  ;*	exit:	ax = results						*
  8595                                  ;*		dx = [auxnum]						*
  8596                                  ;*									*
  8597                                  ;************************************************************************
  8598                                  
  8599                                  auxop:		; proc near		
  8600 0000035E 8B16[2100]              		mov	dx, [auxnum]	; ah=function code
  8601                                  					; 0=init, 1=send, 2=receive, 3=status
  8602                                  					; get port number
  8603 00000362 CD14                    		int	14h		; SERIAL I/O - GET USART STATUS
  8604                                  					; DX = port number (0-3)
  8605                                  					; Return: AX = port status code
  8606 00000364 C3                      		retn
  8607                                  
  8608                                  ; ---------------------------------------------------------------------------
  8609                                  
  8610                                  ;************************************************************************
  8611                                  ;*									*
  8612                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
  8613                                  ;*		   auxbuf [auxnum] to zero				*
  8614                                  ;*									*
  8615                                  ;*	cas - shouldn't this code call the rom bios input function	*
  8616                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
  8617                                  ;*	      pending serial input queue if there's a tsr like MODE	*
  8618                                  ;*	      which is providing interrupt-buffering of aux port?	*
  8619                                  ;*									*
  8620                                  ;************************************************************************
  8621                                  
  8622                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
  8623 00000365 E81C00                  		call	getbx		; flush	aux input buffer
  8624 00000368 C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
  8625                                  					; zero out buffer
  8626                                  		;clc			; all done, successful return
  8627                                  		; 12/12/2022
  8628                                  		; cf=0 ('add' instruction in 'getbx')
  8629 0000036B C3                      		retn
  8630                                  ; ---------------------------------------------------------------------------
  8631                                  
  8632                                  ;************************************************************************
  8633                                  ;*									*
  8634                                  ;*	aux_writ - write to aux device					*
  8635                                  ;*									*
  8636                                  ;************************************************************************
  8637                                  
  8638                                  aux_writ:				; 2C7h:374h = 70h:28E4h
  8639                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
  8640 0000036C E3AF                    		jcxz	exvec2		; 19/10/2022
  8641                                  aux_loop:				
  8642 0000036E 268A05                  		mov	al, [es:di]	; get character	to be written
  8643                                  					; move di pointer to next character
  8644 00000371 47                      		inc	di
  8645 00000372 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
  8646 00000374 E8E7FF                  		call	auxop		; send character over aux port
  8647 00000377 F6C480                  		test	ah, 80h		; check	for error
  8648 0000037A 7405                    		jz	short awok	; then no error
  8649 0000037C B00A                    		mov	al, 10		; else indicate	write fault
  8650 0000037E E95AFD                  		jmp	bc_err_cnt	; call error routines
  8651                                  ; ---------------------------------------------------------------------------
  8652                                  
  8653                                  awok:					
  8654 00000381 E2EB                    		loop	aux_loop	; if cx	is non-zero,
  8655                                  					; still	more character to print
  8656                                  		;clc			; all done, successful return
  8657                                  		; 12/12/2022
  8658                                  		; cf=0 (test instruction above)	
  8659 00000383 C3                      		retn
  8660                                  
  8661                                  ; =============== S U B	R O U T	I N E =======================================
  8662                                  
  8663                                  ;************************************************************************
  8664                                  ;*									*
  8665                                  ;*	getbx - return bx -> single byte input buffer for		*
  8666                                  ;*		selected aux port ([auxnum])				*
  8667                                  ;*									*
  8668                                  ;************************************************************************
  8669                                  
  8670                                  getbx:	
  8671 00000384 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
  8672                                  					; for selected aux port	([auxnum])
  8673                                  		;add	bx, offset auxbuf
  8674 00000388 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
  8675                                  		; 12/12/2022
  8676                                  		; cf=0 (if [uaxnum] is valid number) 
  8677 0000038C C3                      		retn
  8678                                  
  8679                                  ; ---------------------------------------------------------------------------
  8680                                  
  8681                                  ; 15/10/2022
  8682                                  
  8683                                  ;----------------------------------------------------------------
  8684                                  ;								:
  8685                                  ;		    clock device driver 			:
  8686                                  ;								:
  8687                                  ;								:
  8688                                  ;   this file contains the clock device driver. 		:
  8689                                  ;								:
  8690                                  ;   the routines in this files are:				:
  8691                                  ;								:
  8692                                  ;	routine 		function			:
  8693                                  ;	------- 		--------			:
  8694                                  ;	tim_writ		set the current time		:
  8695                                  ;	tim_read		read the current time		:
  8696                                  ;	time_to_ticks		convert time to corresponding	:
  8697                                  ;				  number of clock ticks 	:
  8698                                  ;								:
  8699                                  ; the clock ticks at the rate of:				:
  8700                                  ;								:
  8701                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
  8702                                  ; see each routine for information on the use.			:
  8703                                  ;								:
  8704                                  ;----------------------------------------------------------------
  8705                                  
  8706                                  ; convert time to ticks
  8707                                  ; input : time in cx and dx
  8708                                  ; ticks returned in cx:dx
  8709                                  
  8710                                  ;19/07/2019
  8711                                  ;09/03/2019
  8712                                  
  8713                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
  8714                                  
  8715                                  ; first convert from hour,min,sec,hund. to
  8716                                  ; total number of 100th of seconds
  8717                                  
  8718 0000038D B03C                    		mov	al, 60
  8719 0000038F F6E5                    		mul	ch		; hours	to minutes
  8720 00000391 B500                    		mov	ch, 0
  8721 00000393 01C8                    		add	ax, cx		; total	minutes
  8722 00000395 B97017                  		mov	cx, 6000	; 60*100
  8723 00000398 89D3                    		mov	bx, dx		; get out of the way of	the multiply
  8724 0000039A F7E1                    		mul	cx		; convert to 1/100 sec
  8725 0000039C 89C1                    		mov	cx, ax
  8726 0000039E B064                    		mov	al, 100
  8727 000003A0 F6E7                    		mul	bh		; convert seconds to 1/100 sec
  8728 000003A2 01C1                    		add	cx, ax		; combine seconds with hours and min
  8729 000003A4 83D200                  		adc	dx, 0		; ripple carry
  8730 000003A7 B700                    		mov	bh, 0
  8731 000003A9 01D9                    		add	cx, bx		; combine 1/100	sec
  8732 000003AB 83D200                  		adc	dx, 0
  8733                                  
  8734                                  	; dx:cx is time in 1/100 sec
  8735                                  
  8736 000003AE 92                      		xchg	ax, dx
  8737 000003AF 91                      		xchg	ax, cx		; now time is in cx:ax
  8738 000003B0 BB0BE9                  		mov	bx, 59659
  8739 000003B3 F7E3                    		mul	bx		; multiply low half
  8740 000003B5 87D1                    		xchg	dx, cx
  8741 000003B7 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
  8742 000003B8 F7E3                    		mul	bx		; multiply high	half
  8743 000003BA 01C8                    		add	ax, cx		; combine overlapping products
  8744 000003BC 83D200                  		adc	dx, 0
  8745 000003BF 92                      		xchg	ax, dx		; ax:dx=time*59659
  8746 000003C0 BB0500                  		mov	bx, 5
  8747 000003C3 F6F3                    		div	bl		; divide high half by 5
  8748 000003C5 88C1                    		mov	cl, al
  8749 000003C7 B500                    		mov	ch, 0
  8750 000003C9 88E0                    		mov	al, ah		; remainder of divide-by-5
  8751 000003CB 98                      		cbw
  8752 000003CC 92                      		xchg	ax, dx		; use it to extend low half
  8753 000003CD F7F3                    		div	bx		; divide low half by 5
  8754 000003CF 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
  8755 000003D1 CB                      		retf			; far return
  8756                                  
  8757                                  ; ---------------------------------------------------------------------------
  8758                                  
  8759                                  ; 17/10/2022
  8760                                  ; 15/10/2022
  8761                                  
  8762                                  ;--------------------------------------------------------------------
  8763                                  ;
  8764                                  ; tim_writ sets the current time
  8765                                  ;
  8766                                  ; on entry es:[di] has the current time:
  8767                                  ;
  8768                                  ;	number of days since 1-1-80	(word)
  8769                                  ;	minutes (0-59)			(byte)
  8770                                  ;	hours (0-23)			(byte)
  8771                                  ;	hundredths of seconds (0-99)	(byte)
  8772                                  ;	seconds (0-59)			(byte)
  8773                                  ;
  8774                                  ; each number has been checked for the correct range.
  8775                                  ;
  8776                                  ;	NOTE: Any changes in this routine probably require corresponding
  8777                                  ;	changes in the version that is built with the power manager driver.
  8778                                  ;	See ptime.asm.
  8779                                  ;
  8780                                  ;--------------------------------------------------------------------
  8781                                  
  8782                                  	; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  8783                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:03EAh
  8784                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
  8785 000003D2 268B05                  		mov	ax, [es:di]
  8786 000003D5 50                      		push	ax		; daycnt. we need to set this at the very
  8787                                  					; end to avoid tick windows.
  8788 000003D6 803E[F304]00            		cmp	byte [havecmosclock], 0
  8789                                  		;cmp	ds:havecmosclock, 0
  8790 000003DB 7423                    		jz	short no_cmos_1
  8791 000003DD 268A4503                		mov	al, [es:di+3]	; near indirect	calls
  8792                                  					; get binary hours
  8793                                  					; convert to bcd
  8794                                  		;call	far [bintobcd]
  8795                                  		;;call	ds:bintobcd	; call far [bintobcd]
  8796                                  		; 08/08/2023
  8797 000003E1 E8E800                  		call	bintobcd
  8798 000003E4 88C5                    		mov	ch, al		; ch = bcd hours
  8799 000003E6 268A4502                		mov	al, [es:di+2]	; get binary minutes
  8800                                  		;call	far [bintobcd]
  8801                                  		;;call	ds:bintobcd	; convert to bcd
  8802 000003EA E8DF00                  		call	bintobcd
  8803 000003ED 88C1                    		mov	cl, al		; cl = bcd minutes
  8804 000003EF 268A4505                		mov	al, [es:di+5]	; get binary seconds
  8805                                  		;call	far [bintobcd]
  8806                                  		;;call	ds:bintobcd
  8807 000003F3 E8D600                  		call	bintobcd
  8808                                  
  8809 000003F6 88C6                    		mov	dh, al		; dh = bcd seconds
  8810 000003F8 B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
  8811 000003FA FA                      		cli
  8812 000003FB B403                    		mov	ah, 3
  8813 000003FD CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8814                                  					; CH = hours in	BCD, CL	= minutes in BCD
  8815                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
  8816                                  					; Return: CMOS clock set
  8817 000003FF FB                      		sti
  8818                                  no_cmos_1:				
  8819 00000400 268B4D02                		mov	cx, [es:di+2]
  8820 00000404 268B5504                		mov	dx, [es:di+4]
  8821                                  		; 17/10/2022
  8822 00000408 FF1E[C106]              		call	far [ttticks]
  8823                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
  8824                                  					; convert time to ticks
  8825                                  					; cx:dx	now has	time in	ticks
  8826 0000040C FA                      		cli			; turn off timer
  8827 0000040D B401                    		mov	ah, 1
  8828 0000040F CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  8829                                  					; CX:DX	= clock	count
  8830                                  					; Return: time of day set
  8831                                  		;pop	ds:daycnt
  8832 00000411 8F06[F004]              		pop	word [daycnt]
  8833 00000415 FB                      		sti
  8834                                  		;cmp	ds:havecmosclock, 0
  8835 00000416 803E[F304]00            		cmp	byte [havecmosclock], 0
  8836 0000041B 7409                    		jz	short no_cmos_2
  8837                                  
  8838                                  		; 08/08/2023
  8839                                  		;call	far [daycnttoday]
  8840                                  		;;call	ds:daycnttoday	; call far [daycnttoday]
  8841                                  					; convert to bcd format
  8842 0000041D E80700                  		call	daycnttoday
  8843                                  
  8844 00000420 FA                      		cli
  8845 00000421 B405                    		mov	ah, 5
  8846 00000423 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8847                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
  8848                                  					; CH = century (19h or 20h)
  8849                                  					; Return: CMOS clock set
  8850 00000425 FB                      		sti
  8851                                  no_cmos_2:
  8852                                  		; 12/12/2022
  8853                                  		; cf=0				
  8854                                  		;clc
  8855 00000426 C3                      		retn
  8856                                  
  8857                                  ; ---------------------------------------------------------------------------
  8858                                  
  8859                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  8860                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0440h
  8861                                  %if 1 
  8862                                  
  8863                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  8864                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  8865                                  
  8866                                  daycnttoday:	; proc near
  8867                                  
  8868                                  ; entry: [daycnt] = number of days since 1-1-80
  8869                                  ;
  8870                                  ; return: ch - century in bcd
  8871                                  ;	  cl - year in bcd
  8872                                  ;	  dh - month in bcd
  8873                                  ;	  dl - day in bcd
  8874                                  
  8875                                  		; 08/08/2023 (ds:) (near proc)
  8876                                  		; 16/10/2022 (cs:) (far proc)		
  8877 00000427 FF36[F004]              		push	word [daycnt] ; save daycnt
  8878 0000042B 813E[F004]891C          		cmp	word [daycnt], 7305 ; (365*20+(20/4))
  8879                                  					; # days from 1-1-1980 to 1-1-2000
  8880 00000431 7308                    		jnb	short century20
  8881                                  		;mov	byte [base_century], 19
  8882                                  		;mov	byte [base_year], 80
  8883                                  		; 08/08/2023
  8884 00000433 C706[F404]1350          		mov	word [base_century], 5013h
  8885 00000439 EB0C                    		jmp	short years
  8886                                  ; ----------------------------------------------------------------------------
  8887                                  		
  8888                                  century20:				
  8889                                  		;mov	byte [base_century], 20
  8890                                  		;mov	byte [base_year], 0
  8891                                  		; 08/08/2023
  8892 0000043B C706[F404]1400          		mov	word [base_century], 20
  8893 00000441 812E[F004]891C          		sub	word [daycnt], 7305 ; (365*20+(20/4))
  8894                                  					; adjust daycnt
  8895                                  years:					
  8896 00000447 31D2                    		xor	dx, dx
  8897 00000449 A1[F004]                		mov	ax, [daycnt]
  8898 0000044C BBB505                  		mov	bx, 1461	; (366+365*3)
  8899                                  					; # of days in a Leap year block
  8900 0000044F F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
  8901 00000451 8916[F004]              		mov	[daycnt], dx	; save daycnt left
  8902 00000455 B304                    		mov	bl, 4
  8903 00000457 F6E3                    		mul	bl		; AX = # of years. Less	than 100
  8904 00000459 0006[F504]              		add	[base_year], al ; So, ah = 0. Adjust year
  8905 0000045D FF06[F004]              		inc	word [daycnt]	; set daycnt to	1 base
  8906                                  		; 08/08/2023
  8907 00000461 BB6E01                  		mov	bx, 366
  8908 00000464 B90300                  		mov	cx, 3
  8909                                  		;cmp	word [daycnt], 366 ; daycnt=remainder of leap year
  8910 00000467 391E[F004]              		cmp	[daycnt], bx ; 366
  8911 0000046B 7619                    		jbe	short leapyear	; within 366+355+355+355 days.
  8912 0000046D FE06[F504]              		inc	byte [base_year] ; if daycnt <= 366, then leap year
  8913                                  		;sub	word [daycnt], 366 ; else daycnt--, base_year++ ;
  8914 00000471 291E[F004]              		sub	[daycnt], bx ; 366 ; 08/08/2023
  8915                                  		;mov	cx, 3		; And next three years are normal
  8916                                  regularyear:	
  8917                                  		; 08/08/2023
  8918 00000475 4B                      		dec	bx ; 365			
  8919                                  		;cmp	word [daycnt], 365 ; for(i=1; i>3 or daycnt <=365; i++)
  8920 00000476 391E[F004]              		cmp	[daycnt], bx ; 365 ; 08/08/2023
  8921 0000047A 760F                    		jbe	short yeardone	; {if (daycnt >	365)
  8922 0000047C FE06[F504]              		inc	byte [base_year] ; { daycnt -=	365
  8923                                  		;sub	word [daycnt], 365 ; }
  8924 00000480 291E[F004]              		sub	[daycnt], bx ; 365 ; 08/08/2023 
  8925 00000484 E2EF                    		loop	regularyear	; }
  8926                                  					;
  8927                                  					; should never fall through loop
  8928                                  leapyear:	
  8929 00000486 C606[F704]1D            		mov	byte [february], 29 ; 08/08/2023			
  8930                                  		;mov	byte [month_tab+1], 29 ; leap year.
  8931                                  					; change month table.
  8932                                  yeardone:				
  8933 0000048B 31DB                    		xor	bx, bx
  8934 0000048D 31D2                    		xor	dx, dx
  8935 0000048F A1[F004]                		mov	ax, [daycnt]
  8936                                  		;mov	si, offset month_tab
  8937 00000492 BE[F604]                		mov	si, month_tab	; 19/10/2022
  8938                                  		;mov	cx, 12
  8939                                  		; 08/08/2023
  8940 00000495 B10C                    		mov	cl, 12
  8941                                  months:					
  8942 00000497 FEC3                    		inc	bl
  8943                                  		; 08/08/2023
  8944 00000499 8A14                    		mov	dl, [si]	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:04B7h
  8945 0000049B 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
  8946                                  					; dh=0
  8947 0000049D 7605                    		jbe	short month_done
  8948 0000049F 46                      		inc	si		; next month
  8949 000004A0 29D0                    		sub	ax, dx		; adjust daycnt
  8950 000004A2 E2F3                    		loop	months		;
  8951                                  					; should never fall through loop
  8952                                  month_done:	
  8953 000004A4 C606[F704]1C            		mov	byte [february], 28 ; 08/08/2023
  8954                                  		;mov	byte [month_tab+1], 28
  8955                                  					; restore month table value
  8956 000004A9 88DA                    		mov	dl, bl
  8957 000004AB 8A36[F504]              		mov	dh, [base_year]
  8958 000004AF 8A0E[F404]              		mov	cl, [base_century] ; al=day,dl=month,dh=year,cl=cntry
  8959 000004B3 E81600                  		call	bintobcd	; convert "day"	to bcd
  8960                                  					; dl = bcd day,	al = month
  8961 000004B6 86D0                    		xchg	dl, al
  8962 000004B8 E81100                  		call	bintobcd	; dh = bcd month, al = year
  8963 000004BB 86F0                    		xchg	dh, al
  8964 000004BD E80C00                  		call	bintobcd	; cl = bcd year, al = century
  8965 000004C0 86C8                    		xchg	cl, al
  8966 000004C2 E80700                  		call	bintobcd	; ch = bcd century
  8967 000004C5 88C5                    		mov	ch, al
  8968 000004C7 8F06[F004]              		pop	word [daycnt] ; restore original value
  8969 000004CB C3                      		retn
  8970                                  
  8971                                  ;----------------------------------------------------------------------------
  8972                                  
  8973                                  bintobcd:	; proc near		; real time clock support
  8974                                  
  8975                                  ;convert a binary input in al (less than 63h or 99 decimal)
  8976                                  ;into a bcd value in al. ah destroyed.	
  8977                                  		
  8978 000004CC D40A                    		aam			; AH = AL/10, AL = AL MOD 10
  8979 000004CE D510                    		aad     10h             ; db 0D5h,10h
  8980                                  					; AL = (AH*10H)+AL, AH = 0
  8981 000004D0 C3                      		retn
  8982                                  %endif
  8983                                  
  8984                                  ;----------------------------------------------------------------------------
  8985                                  
  8986                                  ; 15/10/2022
  8987                                  
  8988                                  ;----------------------------------------------------------------------------
  8989                                  ; gettime reads date and time
  8990                                  ; and returns the following information:
  8991                                  ;
  8992                                  ;	es:[di]  =count of days since 1-1-80
  8993                                  ;	es:[di+2]=hours
  8994                                  ;	es:[di+3]=minutes
  8995                                  ;	es:[di+4]=seconds
  8996                                  ;	es:[di+5]=hundredths of seconds
  8997                                  ;
  8998                                  ;	NOTE:  Any changes in this routine probably require corresponding
  8999                                  ;	changes in the version that is built with the power manager driver.
  9000                                  ;	See ptime.asm.
  9001                                  ;----------------------------------------------------------------------------
  9002                                  
  9003                                  tim_read:				; 2C7h:435h = 70h:29A5h
  9004 000004D1 E84B00                  		call	GetTickCnt
  9005 000004D4 8B36[F004]              		mov	si, [daycnt]
  9006                                  
  9007                                  ; we now need to convert the time in tick to the time in 100th of
  9008                                  ; seconds. the relation between tick and seconds is:
  9009                                  ;
  9010                                  ;		 65,536 seconds
  9011                                  ;	       ----------------
  9012                                  ;		1,193,180 tick
  9013                                  ;
  9014                                  ; to get to 100th of second we need to multiply by 100. the equation is:
  9015                                  ;
  9016                                  ;	ticks from clock  * 65,536 * 100
  9017                                  ;      --------------------------------- = time in 100th of seconds
  9018                                  ;		1,193,180
  9019                                  ;
  9020                                  ; fortunately this formula simplifies to:
  9021                                  ;
  9022                                  ;	ticks from clock * 5 * 65,536
  9023                                  ;      --------------------------------- = time in 100th of seconds
  9024                                  ;		59,659
  9025                                  ;
  9026                                  ; the calculation is done by first multipling tick by 5. next we divide by
  9027                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
  9028                                  ; my 16 bits to the left.
  9029                                  ;
  9030                                  ; start with ticks in cx:dx
  9031                                  ; multiply by 5
  9032                                  
  9033 000004D8 89C8                    		mov	ax, cx
  9034 000004DA 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
  9035                                  					; multiply by 5
  9036 000004DC D1E2                    		shl	dx, 1
  9037 000004DE D1D1                    		rcl	cx, 1		; times	2
  9038 000004E0 D1E2                    		shl	dx, 1
  9039 000004E2 D1D1                    		rcl	cx, 1		; times	4
  9040 000004E4 01DA                    		add	dx, bx
  9041 000004E6 11C8                    		adc	ax, cx		; times	5
  9042 000004E8 92                      		xchg	ax, dx
  9043                                  
  9044                                  ; now have ticks * 5 in	dx:ax
  9045                                  ; we now need to multiply by 65536 and divide by 59659 d.
  9046                                  
  9047 000004E9 B90BE9                  		mov	cx, 59659	; get divisor
  9048 000004EC F7F1                    		div	cx		; dx now has remainder
  9049                                  					; ax has high word of final quotient
  9050                                  
  9051                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  9052                                  		;mov	bx, ax		; put high word	in safe	place
  9053 000004EE 93                      		xchg	bx, ax
  9054 000004EF 31C0                    		xor	ax, ax		; this is the multiply by 65536
  9055 000004F1 F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
  9056                                  
  9057                                  ; rounding based on the	remainder may be added here
  9058                                  ; the result in	bx:ax is time in 1/100 second.
  9059                                  
  9060 000004F3 89DA                    		mov	dx, bx		
  9061 000004F5 B9C800                  		mov	cx, 200		; extract 1/100's
  9062                                  
  9063                                  ; division by 200 is necessary to ensure no overflow--max result
  9064                                  ; is number of seconds in a day/2 = 43200.
  9065                                  
  9066 000004F8 F7F1                    		div	cx
  9067 000004FA 80FA64                  		cmp	dl, 100		; remainder over 100?
  9068 000004FD 7203                    		jb	short noadj
  9069 000004FF 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
  9070                                  noadj:					
  9071 00000502 F5                      		cmc			; if we	subtracted 100,	carry is now set
  9072 00000503 88D3                    		mov	bl, dl		; save 1/100's
  9073                                  
  9074                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
  9075                                  ; by two, shifting a one in if the remainder had exceeded 100.
  9076                                  
  9077 00000505 D1D0                    		rcl	ax, 1		
  9078 00000507 B200                    		mov	dl, 0
  9079 00000509 D1D2                    		rcl	dx, 1
  9080 0000050B B93C00                  		mov	cx, 60		; divide out seconds
  9081 0000050E F7F1                    		div	cx
  9082 00000510 88D7                    		mov	bh, dl		; save the seconds
  9083 00000512 F6F1                    		div	cl		; break	into hours and minutes
  9084 00000514 86C4                    		xchg	al, ah
  9085                                  
  9086                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
  9087                                  
  9088                                  		; 08/08/2023
  9089                                  		;push	ax
  9090                                  		;mov	ax, si		; daycnt
  9091 00000516 96                      		xchg	ax, si
  9092 00000517 AB                      		stosw
  9093                                  		;pop	ax
  9094 00000518 96                      		xchg	ax, si		; al = hours, ah = minutes
  9095 00000519 AB                      		stosw
  9096 0000051A 89D8                    		mov	ax, bx
  9097 0000051C AB                      		stosw
  9098 0000051D F8                      		clc			; [es:di] = count of days since 1-1-80
  9099                                  					;   [es:di+2] = hours
  9100                                  					;   [es:di+3] = minutes
  9101                                  					;   [es:di+4] = seconds
  9102                                  					;   [es:di+5] = hundredths of seconds
  9103 0000051E C3                      		retn
  9104                                  
  9105                                  ; =============== S U B	R O U T	I N E =======================================
  9106                                  
  9107                                  ; 15/10/2022
  9108                                  
  9109                                  ;----------------------------------------------------------------------------
  9110                                  ;
  9111                                  ; procedure : GetTickCnt
  9112                                  ;
  9113                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
  9114                                  ;		of rollover [except when power management driver is in use]. 
  9115                                  ;		Uses the following logic for updating Daycnt
  9116                                  ;
  9117                                  ;		if ( rollover ) {
  9118                                  ;			if ( t_switch )
  9119                                  ;				daycnt++ ;
  9120                                  ;			else
  9121                                  ;				daycnt += rollover ;
  9122                                  ;		}
  9123                                  ;
  9124                                  ; USES : AX
  9125                                  ;
  9126                                  ; RETURNS : CX:DX - tick count
  9127                                  ; MODIFIES : daycnt
  9128                                  ;
  9129                                  ;----------------------------------------------------------------------------
  9130                                  
  9131                                  		; 17/10/2022
  9132                                  GetTickCnt:	
  9133 0000051F 30E4                    		xor	ah, ah
  9134 00000521 CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  9135                                  					; Return: CX:DX	= clock	count
  9136                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  9137                                  					; midnight
  9138                                  					; Otherwise, AL	> 0
  9139 00000523 803E[F204]00            		cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
  9140 00000528 7507                    		jnz	short inc_case	; old method assumes  that Int 1Ah returns rollover flag
  9141 0000052A 30E4                    		xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
  9142                                  					; and not flag
  9143 0000052C 0106[F004]              		add	[daycnt], ax
  9144 00000530 C3                      		retn
  9145                                  ; ---------------------------------------------------------------------------
  9146                                  
  9147                                  inc_case:				
  9148 00000531 08C0                    		or	al, al
  9149 00000533 7404                    		jz	short no_rollover
  9150 00000535 FF06[F004]              		inc	word [daycnt]
  9151                                  no_rollover:				
  9152 00000539 C3                      		retn
  9153                                  
  9154                                  ;----------------------------------------------------------------------------
  9155                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
  9156                                  ;----------------------------------------------------------------------------
  9157                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9158                                  ; 09/03/2019 - Retro DOS v4.0
  9159                                  
  9160                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
  9161                                  ; 26/05/2018 - Retro DOS v3.0
  9162                                  ; 23/03/2018 - Retro DOS v2.0
  9163                                  
  9164                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
  9165                                  
  9166                                  ;struc BPB_TYPE
  9167                                  ;.SECSIZE:	resw 1
  9168                                  ;.SECALL:	resb 1
  9169                                  ;.RESNUM:	resw 1
  9170                                  ;.FATNUM:	resb 1
  9171                                  ;.DIRNUM:	resw 1
  9172                                  ;.SECNUM:	resw 1
  9173                                  ;.FATID:	resb 1
  9174                                  ;.FATSIZE:	resw 1
  9175                                  ;.SLIM:		resw 1
  9176                                  ;.HLIM:		resw 1
  9177                                  ;.HIDDEN:	resw 1
  9178                                  ;.size:
  9179                                  ;endstruc
  9180                                  
  9181                                  ;-----------------------------------------------------------------
  9182                                  ;	disk interface routines
  9183                                  ;-----------------------------------------------------------------
  9184                                  
  9185                                  ; device attribute bits:
  9186                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
  9187                                  
  9188                                  ;MAXERR		equ	5
  9189                                  ;MAX_HD_FMT_ERR	equ	2
  9190                                  
  9191                                  ;LSTDRV	equ 504h
  9192                                  
  9193                                  ; some floppies do not have changeline. as a result, media-check would
  9194                                  ; normally return i-don't-know, the dos would continually reread the fat and
  9195                                  ; discard cached data. we optimize this by implementing a logical door-latch:
  9196                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
  9197                                  ; the time of the last successful disk operation and compare it with the current
  9198                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
  9199                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
  9200                                  ; since we cannot trust the timer to be always available, we record the number 
  9201                                  ; of media checks that have occurred when no apparent time has elapsed. while
  9202                                  ; this number is < a given threshold, we say no change. when it exceeds that
  9203                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
  9204                                  ; the time of last successful access, if we see that time has passed too,
  9205                                  ; we reset the counter.
  9206                                  
  9207                                  accessmax	equ	5
  9208                                  
  9209                                  ; due to various bogosities, we need to continually adjust what the head
  9210                                  ; settle time is.  the following algorithm is used:
  9211                                  ;
  9212                                  ;   get the current head settle value.
  9213                                  ;   if it is 0, then
  9214                                  ;	set slow = 15
  9215                                  ;   else
  9216                                  ;	set slow = value
  9217                                  ;   ...
  9218                                  ;*********************************************
  9219                                  ;************ old algorithm ******************
  9220                                  ;*   if we are seeking and writing then
  9221                                  ;*	 use slow
  9222                                  ;*   else
  9223                                  ;*	 use fast
  9224                                  ;*********************************************
  9225                                  ;*********** ibm's requested logic ***********
  9226                                  ;   if we are seeking and writing and not on an at then
  9227                                  ;	use slow
  9228                                  ;   else
  9229                                  ;	use fast
  9230                                  ;   ...
  9231                                  ;   restore current head settle value
  9232                                  ;
  9233                                  ;
  9234                                  ;---------------------------------------
  9235                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
  9236                                  					; it on after handling config.sys file as a
  9237                                  					; default value, if multrk_flag = multrk_off1.
  9238                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
  9239                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
  9240                                  
  9241                                  ; close data segment, open Bios_Code segment
  9242                                  
  9243                                  ; 15/10/2022
  9244                                  
  9245                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
  9246                                  
  9247                                  ;-----------------------------------------------------------------
  9248                                  ;	command jump table
  9249                                  ;-----------------------------------------------------------------
  9250                                  
  9251 0000053A 00                      		db 0
  9252                                  ; 11/12/2022
  9253                                  %if 0
  9254                                  
  9255                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
  9256                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
  9257                                  		dw 1742h		; dsk_init
  9258                                  		dw 4EBh			; media_chk
  9259                                  		dw 592h			; get_bpb
  9260                                  		dw 0D5h			; bc_cmderr
  9261                                  		dw 857h			; dsk_read
  9262                                  		dw 83Dh			; x_bus_exit
  9263                                  		dw 558h			; ret_carry_clear
  9264                                  		dw 558h			; ret_carry_clear
  9265                                  		dw 849h			; dsk_writ
  9266                                  		dw 841h			; dsk_writv
  9267                                  		dw 558h			; ret_carry_clear
  9268                                  		dw 558h			; ret_carry_clear
  9269                                  		dw 0D5h			; bc_cmderr
  9270                                  		dw 80Ah			; dsk_open
  9271                                  		dw 81Ah			; dsk_close
  9272                                  		dw 831h			; dsk_rem
  9273                                  		dw 558h			; ret_carry_clear
  9274                                  		dw 558h			; ret_carry_clear
  9275                                  		dw 558h			; ret_carry_clear
  9276                                  		dw 0C6Bh		; do_generic_ioctl
  9277                                  		dw 558h			; ret_carry_clear
  9278                                  		dw 558h			; ret_carry_clear
  9279                                  		dw 558h			; ret_carry_clear
  9280                                  		dw 1124h		; ioctl_getown
  9281                                  		dw 1142h		; ioctl_setown
  9282                                  		dw 129Ah		; ioctl_support_query
  9283                                  
  9284                                  ;dtbl_siz equ $-dsktbl
  9285                                  
  9286                                  %endif
  9287                                  		; 11/12/2022
  9288 0000053B 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
  9289 0000053C [8717]                  		dw dsk_init
  9290 0000053E [8405]                  		dw media_chk
  9291 00000540 [2306]                  		dw get_bpb
  9292 00000542 [D900]                  		dw bc_cmderr
  9293 00000544 [D508]                  		dw dsk_read
  9294 00000546 [BB08]                  		dw x_bus_exit
  9295 00000548 [EE05]                  		dw ret_carry_clear
  9296 0000054A [EE05]                  		dw ret_carry_clear
  9297 0000054C [C708]                  		dw dsk_writ
  9298 0000054E [BF08]                  		dw dsk_writv
  9299 00000550 [EE05]                  		dw ret_carry_clear
  9300 00000552 [EE05]                  		dw ret_carry_clear
  9301 00000554 [D900]                  		dw bc_cmderr
  9302 00000556 [8B08]                  		dw dsk_open
  9303 00000558 [9A08]                  		dw dsk_close
  9304 0000055A [B008]                  		dw dsk_rem
  9305 0000055C [EE05]                  		dw ret_carry_clear
  9306 0000055E [EE05]                  		dw ret_carry_clear
  9307 00000560 [EE05]                  		dw ret_carry_clear
  9308 00000562 [E40C]                  		dw do_generic_ioctl
  9309 00000564 [EE05]                  		dw ret_carry_clear
  9310 00000566 [EE05]                  		dw ret_carry_clear
  9311 00000568 [EE05]                  		dw ret_carry_clear
  9312 0000056A [8A11]                  		dw ioctl_getown
  9313 0000056C [A711]                  		dw ioctl_setown
  9314 0000056E [F612]                  		dw ioctl_support_query
  9315                                  
  9316                                  dtbl_siz equ $-dsktbl
  9317                                  
  9318                                  ; =============== S U B	R O U T	I N E =======================================
  9319                                  
  9320                                  ; ---------------------------------------------------------------------------
  9321                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
  9322                                  ; the one that belongs to the drive specified. carry is set if none exists
  9323                                  ; for the drive. Pointer is returned in es:[di]
  9324                                  ;
  9325                                  ;  AL contains the logical drive number.
  9326                                  ; ---------------------------------------------------------------------------
  9327                                  
  9328                                  SetDrive:	
  9329                                  		;les	di, ds:start_bds ; Point es:di to first bds	
  9330 00000570 C43E[1901]              		les	di, [start_bds] ; 19/10/2022
  9331                                  X_Scan_Loop:				
  9332 00000574 26384505                		cmp	[es:di+5], al	
  9333 00000578 7409                    		jz	short X_SetDrv
  9334 0000057A 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
  9335 0000057D 83FFFF                  		cmp	di, 0FFFFh
  9336 00000580 75F2                    		jnz	short X_Scan_Loop
  9337 00000582 F9                      		stc
  9338                                  X_SetDrv:				
  9339 00000583 C3                      		retn
  9340                                  
  9341                                  ; ---------------------------------------------------------------------------
  9342                                  
  9343                                  ; 15/10/2022
  9344                                  
  9345                                  ; ---------------------------------------------------------------------
  9346                                  ; if id is f9, have a 96tpi disk else
  9347                                  ; if bit 2 is 0 then media is not removable and could not have changed
  9348                                  ;  otherwise if within 2 secs of last disk operation media could not
  9349                                  ;    have changed, otherwise dont know if media has changed
  9350                                  ; ---------------------------------------------------------------------
  9351                                  
  9352                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
  9353 00000584 E8E9FF                  		call	SetDrive
  9354 00000587 BE0100                  		mov	si, 1
  9355 0000058A 26F6452401              		test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
  9356                                  					; fchanged_by_format
  9357 0000058F 7415                    		jz	short WeAreNotFakingIt
  9358                                  		; 12/12/2022
  9359 00000591 26806524FE              		and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
  9360                                  		;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
  9361                                  					; ~fchanged_by_format ;	reset flag
  9362 00000596 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9363                                  					; Ensure that we ask the rom if media has changed
  9364 0000059B 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9365                                  					; fnon_removable
  9366 000005A0 740B                    		jz	short wehaveafloppy
  9367                                  		;mov	si, 0FFFFh	; Indicate media changed
  9368                                  		; 11/08/2023
  9369 000005A2 F7DE                    		neg	si		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05E0h
  9370 000005A4 EB2B                    		jmp	short Media_Done ; Media_Done
  9371                                  ; ---------------------------------------------------------------------------
  9372                                  
  9373                                  WeAreNotFakingIt:
  9374                                  		;test	byte [es:di+BDS.flags], fnon_removable			
  9375 000005A6 26F6452301              		test	byte [es:di+23h], 1
  9376 000005AB 7524                    		jnz	short Media_Done
  9377                                  wehaveafloppy:				
  9378                                  		;xor	si, si ; 0	; Presume "I don't know"
  9379                                  		; 11/08/2023
  9380 000005AD 4E                      		dec	si ; 0 		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05EBh
  9381                                  
  9382                                  		; If we have a floppy with changeline support, we ask the ROM
  9383                                  		; to determine if media has changed. We do not perform the
  9384                                  		; 2 second check for these drives.
  9385                                  
  9386 000005AE 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
  9387 000005B3 740A                    		jz	short mChk_NoChangeLine	; Brif not
  9388 000005B5 E8A712                  		call	mediacheck	;  Call	into removable routine
  9389 000005B8 7236                    		jb	short err_exitj
  9390 000005BA E8FF13                  		call	haschange
  9391 000005BD 7512                    		jnz	short Media_Done
  9392                                  mChk_NoChangeLine:
  9393                                  		; If we come here, we have a floppy with no changeline support
  9394                                  			
  9395 000005BF BE0100                  		mov	si, 1		; Presume no change
  9396 000005C2 A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
  9397 000005C5 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
  9398                                  					; Is drive of last access the same?
  9399 000005C9 7505                    		jnz	short Media_Unk	; No, then "i don't know"
  9400 000005CB E82800                  		call	Check_Time_Of_Access
  9401 000005CE EB01                    		jmp	short Media_Done
  9402                                  ; ---------------------------------------------------------------------------
  9403                                  
  9404                                  Media_Unk:				
  9405 000005D0 4E                      		dec	si		; ; Return "I don't know"
  9406                                  
  9407                                  		; SI now contains the correct value for media change.
  9408                                  		; Clean up the left overs
  9409                                  Media_Done:	
  9410                                  		; 19/10/2022			
  9411 000005D1 06                      		push	es
  9412 000005D2 C41E[1200]              		les	bx, [ptrsav]
  9413 000005D6 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
  9414 000005DA 07                      		pop	es
  9415 000005DB 09F6                    		or	si, si
  9416 000005DD 790F                    		jns	short ret_carry_clear ;	volidok
  9417 000005DF 803E[7700]00            		cmp	byte [fhave96], 0
  9418 000005E4 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
  9419 000005E6 E85F13                  		call	media_set_vid
  9420                                  mChk1_NoChangeLine:			
  9421 000005E9 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9422                                  					; Make sure we ask rom for media check
  9423                                  ret_carry_clear:			
  9424 000005EE F8                      		clc			; volidok
  9425 000005EF C3                      		retn
  9426                                  ; ---------------------------------------------------------------------------
  9427                                  
  9428                                  err_exitj:				
  9429 000005F0 E87C06                  		call	maperror	; guaranteed to	set carry
  9430                                  ret81:					
  9431 000005F3 B481                    		mov	ah, 81h		; return error status
  9432 000005F5 C3                      		retn			; return with carry set
  9433                                  
  9434                                  ; =============== S U B	R O U T	I N E =======================================
  9435                                  
  9436                                  ; ---------------------------------------------------------------------------
  9437                                  ; perform a check on the time passed since the last access for this physical
  9438                                  ; drive.
  9439                                  ; we are accessing the same drive. if the time of last successful access was
  9440                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
  9441                                  ; returns in si:
  9442                                  ;	0 - if time of last access was >= 2 seconds
  9443                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
  9444                                  ; registers affected ax,cx,dx, flags.
  9445                                  ;
  9446                                  ;	assume es:di -> bds, ds->Bios_Data
  9447                                  ; ---------------------------------------------------------------------------
  9448                                  
  9449                                  		; 19/10/2022
  9450                                  Check_Time_Of_Access:
  9451 000005F6 BE0100                  		mov	si, 1		; presume no change.
  9452 000005F9 E823FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
  9453 000005FC 268B4547                		mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
  9454                                  					; get stored time
  9455 00000600 29C2                    		sub	dx, ax
  9456 00000602 268B4549                		mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
  9457 00000606 19C1                    		sbb	cx, ax
  9458                                  		; 11/08/2023
  9459                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0646h
  9460                                  		;mov	al, [accesscount]
  9461 00000608 7515                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
  9462 0000060A 09D2                    		or	dx, dx		; time must pass
  9463 0000060C 750C                    		jnz	short timepassed ; yes, examine max value
  9464                                  		; 11/08/2023
  9465                                  		;inc	al
  9466                                  		;cmp	al, 5
  9467                                  		;;inc	byte [accesscount]
  9468                                  		;;cmp	byte [accesscount], 5 
  9469                                  		;			; if count is less than threshold, ok
  9470                                  		;jb	short timecheck_ret
  9471                                  		;;dec	byte [accesscount] ; don't let the count wrap
  9472                                  		; 11/08/2023
  9473                                  		;dec	al
  9474                                  		;jmp	short timecheck_unk ; "i don't know" if media changed
  9475                                  		; 11/08/2023
  9476 0000060E 803E[1D01]04            		cmp	byte [accesscount], 4
  9477 00000613 730A                    		jnb	short timecheck_unk
  9478 00000615 FE06[1D01]              		inc	byte [accesscount]
  9479 00000619 C3                      		retn
  9480                                  
  9481                                  ; ---------------------------------------------------------------------------
  9482                                  
  9483                                  timepassed:				
  9484 0000061A 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
  9485                                  					; min elapsed time? (2 seconds)
  9486 0000061D 7601                    		jbe	short timecheck_ret ; yes, presume no change
  9487                                  
  9488                                  		; everything indicates that we do not know what has happened.
  9489                                  timecheck_unk:				
  9490 0000061F 4E                      		dec	si		; presume i don't know
  9491                                  timecheck_ret:				
  9492                                  		; 11/08/2023
  9493                                  		;mov	[accesscount], al
  9494 00000620 C3                      		retn
  9495                                  
  9496                                  ; ---------------------------------------------------------------------------
  9497                                  ; 15/10/2022
  9498                                  Err_Exitj2:
  9499 00000621 EBCD                    		jmp	short err_exitj
  9500                                  
  9501                                  ; ---------------------------------------------------------------------------
  9502                                  
  9503                                  ; 15/10/2022
  9504                                  
  9505                                  ; ==========================================================================
  9506                                  ; Build a valid bpb for the disk in the drive.
  9507                                  ; ==========================================================================
  9508                                  
  9509                                  		; 19/10/2022
  9510                                  get_bpb:				; 2C7h:592h = 70h:2B02h
  9511 00000623 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
  9512 00000626 E847FF                  		call	SetDrive	; get the correct bds for the drive
  9513 00000629 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9514                                  					; fnon_removable
  9515 0000062E 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
  9516                                  
  9517                                  		; let's set the default value for volid,vol_serial,
  9518                                  		; filesys_id in bds table
  9519                                  
  9520 00000630 E83700                  		call	clear_ids
  9521                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
  9522 00000633 C606[0205]01            		mov	byte [set_id_flag], 1
  9523 00000638 E85B00                  		call	GetBp		; build	a bpb if necessary
  9524 0000063B 72B6                    		jb	short ret81
  9525                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
  9526 0000063D 803E[0205]02            		cmp	byte [set_id_flag], 2
  9527                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
  9528 00000642 C606[0205]00            		mov	byte [set_id_flag], 0
  9529 00000647 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
  9530                                  					; otherwise, conventional boot record
  9531                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
  9532 00000649 803E[7700]00            		cmp	byte [fhave96], 0
  9533 0000064E 7403                    		jz	short already_gotbpb ; brif not
  9534 00000650 E86F13                  		call	set_volume_id
  9535                                  already_gotbpb:				
  9536 00000653 83C706                  		add	di, 6		; BDS.BPB
  9537                                  					; return the bpb from the current bds
  9538                                  
  9539                                  ;		 fall into setptrsav, es:di -> result
  9540                                  
  9541                                  ; ---------------------------------------------------------------------------
  9542                                  
  9543                                  ; 15/10/2022
  9544                                  
  9545                                  ; ==========================================================================
  9546                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
  9547                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
  9548                                  ;Note that this works in most cases because most pointers are in Bios_Data.
  9549                                  ;It fails, for instance, when we install an external drive using driver.sys
  9550                                  ;because then the BDS segment is no longer Bios_Data. 
  9551                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
  9552                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
  9553                                  ;restored before returning to the caller.
  9554                                  ; ==========================================================================
  9555                                  
  9556                                  		; 19/10/2022
  9557                                  SetPtrSav:	; return point for dsk_init				
  9558 00000656 8CC1                    		mov	cx, es		; save es
  9559                                  		;les	bx, ds:ptrsav
  9560 00000658 C41E[1200]              		les	bx, [ptrsav]
  9561 0000065C 2688670D                		mov	[es:bx+0Dh], ah	; [es:bx+media]
  9562 00000660 26897F12                		mov	[es:bx+12h], di	; [es:bx+count]
  9563 00000664 26894F14                		mov	[es:bx+14h], cx	; [es:bx+count+2]
  9564 00000668 F8                      		clc
  9565 00000669 C3                      		retn
  9566                                  
  9567                                  ; =============== S U B	R O U T	I N E =======================================
  9568                                  
  9569                                  ; 15/10/2022
  9570                                  
  9571                                  ; -----------------------------------------------------
  9572                                  ; clear ids in bds table. only applied for floppies.
  9573                                  ;input:  es:di -> bds table
  9574                                  ;	assumes ds: -> Bios_Data
  9575                                  ;output: volid set to "NO NAME    "
  9576                                  ;	 vol_serial set to 0.
  9577                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
  9578                                  ;	   depending on the flag fatsize in bds.
  9579                                  ;
  9580                                  ;	trashes si, cx
  9581                                  ; -----------------------------------------------------
  9582                                  
  9583                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
  9584                                  ;size_of_EXT_SYSTEM_ID equ 8
  9585                                  
  9586                                  clear_ids:		
  9587 0000066A 57                      		push	di
  9588 0000066B 31C9                    		xor	cx, cx		; no serial number
  9589 0000066D 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9590 00000671 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9591                                  
  9592                                  		; BUGBUG - there's a lot in common here and with
  9593                                  		; mov_media_ids.. see if we can save some space by
  9594                                  		; merging them... jgl
  9595                                  
  9596                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9597                                  		; 10/12/2022
  9598 00000675 B10B                    		mov	cl, 11 ; cx = 11		
  9599                                  
  9600                                  		;mov	si, offset vol_no_name ; "NO NAME    "
  9601 00000677 BE[1505]                		mov	si, vol_no_name	; 19/10/2022
  9602 0000067A 83C74B                  		add	di, 75		; BDS.volid
  9603 0000067D F3A4                    		rep movsb
  9604                                  		;;test	byte [es:di+BDS.fatsiz], fbig
  9605                                  		;test	byte [es:di+1Fh], 40h
  9606                                  		; 11/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  9607 0000067F 26F6061F0040            		test	byte [es:BDS.fatsiz], fbig
  9608                                  			; ! NOTE - 11/08/2023 - Erdogan Tan
  9609                                  			; Microsoft/IBM code has a bug here because the BDS's
  9610                                  			; .volid and .filesys_id fields will be reset
  9611                                  			; (to their default text) according to 'BDS.fatsiz' flags
  9612                                  			; at the BDS offset 31 but current (this) code checks flags
  9613                                  			; at ES:DI+31 while DI points the BDS offset 86!?
  9614                                  			;
  9615                                  			; Correct Code:
  9616                                  			; test byte [ES:31],40h or [ES:BDS.fatsiz],fbig
  9617                                  			;
  9618                                  			; Same BUG is existing in PCDOS 7.1 IBMBIO.COM - BIOSCODE:06C3h
  9619                                  			; and in Windows ME IO.SYS - BIOSCODE:0E1Ah as 'test byte [es:di+59],20h'
  9620                                  			; (PCDOS 7.1 BUG note: 26/06/2023)
  9621                                  			;
  9622                                  			; (Why this bug did not affect MSDOS and PCDOS 7.x applications:
  9623                                  			; 'clear_ids' is used for floppy disks only and the default
  9624                                  			; option of 'clear_ids' is FAT12 volid and filesys_id text
  9625                                  			; when the flag bit has wrong value for FAT16/40h or FAT32/20h.)
  9626                                  
  9627                                  		;mov	si, offset fat_16_id ; "FAT16	"
  9628 00000685 BE[0C05]                		mov	si, fat_16_id	; 19/10/2022
  9629 00000688 7503                    		jnz	short ci_bigfat
  9630                                  		;mov	si, offset fat_12_id ; "FAT12	"
  9631 0000068A BE[0305]                		mov	si, fat_12_id	 ; 19/10/2022
  9632                                  ci_bigfat:				
  9633                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9634                                  		; 10/12/2022
  9635 0000068D B108                    		mov	cl, 8 ; cx = 8 
  9636 0000068F 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9637                                  					; 11/08/2023
  9638                                  					; di points to filesys_id field (BDS offset 91)
  9639 00000692 F3A4                    		rep movsb
  9640 00000694 5F                      		pop	di		; restore bds pointer
  9641 00000695 C3                      		retn
  9642                                  
  9643                                  ; =============== S U B	R O U T	I N E =======================================
  9644                                  
  9645                                  ; 15/10/2022
  9646                                  
  9647                                  ; ---------------------------------------------------------------------------
  9648                                  ;	getbp - return bpb from the drive specified by the bds.
  9649                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
  9650                                  ;	    note that we never come here for fixed disks.
  9651                                  ;	    for all other cases,
  9652                                  ;	      - it reads boot sector to pull out the bpb
  9653                                  ;	      - if no valid bpb is found, it then reads the fat sector,
  9654                                  ;		to get the fat id byte to build the bpb from there.
  9655                                  ;
  9656                                  ;   inputs:	es:di point to correct bds.
  9657                                  ;
  9658                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
  9659                                  ;		carry set, and al=7 if invalid disk.
  9660                                  ;		carry set and error code in al if other error.
  9661                                  ;		if failed to recognize the boot record, then will set the
  9662                                  ;		set_id_flag to 0.
  9663                                  ;		this routine will only work for a floppy diskette.
  9664                                  ;		     for a fixed disk, it will just return.
  9665                                  ;
  9666                                  ;	****** Note: getbp is a clone of getbp which uses the newer
  9667                                  ;	  segment definitions. It should be migrated towards.
  9668                                  ;	   now es:di has the bds, ds: has Bios_Data
  9669                                  ; ---------------------------------------------------------------------------
  9670                                  
  9671                                  GetBp:		; if returning fake bpb then return bpb as is.
  9672                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable		
  9673 00000696 26F6452305              		test	byte [es:di+23h], 5
  9674 0000069B 7403                    		jz	short getbp1	; getbp1
  9675 0000069D E99500                  		jmp	getret_exit
  9676                                  ; ---------------------------------------------------------------------------
  9677                                  
  9678                                  getbp1:					
  9679 000006A0 51                      		push	cx
  9680 000006A1 52                      		push	dx
  9681 000006A2 53                      		push	bx
  9682                                  
  9683                                  		; attempt to read in boot sector and determine bpb.
  9684                                  		; we assume that the 2.x and greater dos disks all
  9685                                  		; have a valid boot sector.
  9686                                  
  9687 000006A3 E8A400                  		call	readbootsec
  9688 000006A6 7209                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
  9689 000006A8 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
  9690 000006AA 7508                    		jnz	short dofatbpb
  9691 000006AC E8F000                  		call	movbpb		; move bpb into	registers
  9692 000006AF EB57                    		jmp	short Has1
  9693                                  ; ---------------------------------------------------------------------------
  9694                                  
  9695                                  getbp_err_ret_brdg:			
  9696 000006B1 E98200                  		jmp	getbp_err_ret
  9697                                  ; ---------------------------------------------------------------------------
  9698                                  
  9699                                  		; we have a 1.x diskette. In this case read in the fat ID byte
  9700                                  		; and fill in bpb from there.
  9701                                  dofatbpb:				
  9702 000006B4 E85401                  		call	readfat		; puts media descriptor	byte in	ah
  9703 000006B7 72F8                    		jb	short getbp_err_ret_brdg
  9704                                  		;cmp	ds:fhave96, 0	;  changeline support available?
  9705 000006B9 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
  9706 000006BE 7403                    		jz	short bpb_nochangeline ; brif not
  9707 000006C0 E89A12                  		call	hidensity	; may not return! May add sp, 2	and
  9708                                  					; jump to has1!!!!!! or	has720K
  9709                                  bpb_nochangeline:		; test for a valid 3.5" medium			
  9710 000006C3 26807D2202              		cmp	byte [es:di+22h], 2	; [es:di+BDS.formfactor]
  9711                                  					; ffSmall
  9712 000006C8 7515                    		jnz	short is_floppy
  9713 000006CA 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
  9714 000006CD 7571                    		jnz	short got_unknown_medium
  9715                                  Has720K:				
  9716                                  		;mov	bx, offset sm92 ; pointer to correct bpb
  9717 000006CF BB[DE04]                		mov	bx, sm92	; 19/10/2022
  9718                                  
  9719                                  		; es points to segment of bds. the following should be modified
  9720                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
  9721                                  		; driver.sys is loaded since the bds is inside the driver.sys.
  9722                                  
  9723                                  		; 10/12/2022
  9724                                  		;mov	al, [bx+0]	; [bx+bpbtype.spf]
  9725                                  		; 21/12/2022
  9726 000006D2 8A07                    		mov	al, [bx]
  9727 000006D4 8B4F03                  		mov	cx, [bx+3]	; [bx+bpbtype.csec]
  9728 000006D7 8B5705                  		mov	dx, [bx+5]	; [bx+bpbtype.spau]
  9729 000006DA 8B5F01                  		mov	bx, [bx+1]	; [bx+bpbtype.spt]
  9730                                  		; 19/10/2022 - Temporary !
  9731                                  		;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
  9732                                  		;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
  9733                                  		;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
  9734                                  		;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]	
  9735                                  
  9736 000006DD EB29                    		jmp	short Has1
  9737                                  ; ---------------------------------------------------------------------------
  9738                                  
  9739                                  is_floppy:			; must be a 5.25" floppy if we come here
  9740 000006DF 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
  9741 000006E2 725C                    		jb	short got_unknown_medium
  9742 000006E4 B001                    		mov	al, 1		; set number of	fat sectors
  9743 000006E6 BB0840                  		mov	bx, 16392	; 64*256+8
  9744                                  					; set dir entries and sector max
  9745 000006E9 B94001                  		mov	cx, 320		; 40*8
  9746                                  					; set size of drive
  9747 000006EC BA0101                  		mov	dx, 257		; 01*256+1
  9748                                  					; set head limit and sec/all unit
  9749 000006EF F6C402                  		test	ah, 2		; test for 8 or	9 sector
  9750 000006F2 7507                    		jnz	short has8	; nz = has 8 sectors
  9751 000006F4 FEC0                    		inc	al		; inc number of	fat sectors
  9752 000006F6 FEC3                    		inc	bl		; inc sector max
  9753                                  		;add	cx, 40		; increase size	(to 360)
  9754                                  		; 18/12/2022
  9755 000006F8 80C128                  		add	cl, 40
  9756                                  has8:					
  9757 000006FB F6C401                  		test	ah, 1		; test for 1 or	2 heads
  9758 000006FE 7408                    		jz	short Has1	; jz = 1 head
  9759 00000700 01C9                    		add	cx, cx		; double size of disk
  9760 00000702 B770                    		mov	bh, 112		; increase number of directory entries
  9761 00000704 FEC6                    		inc	dh		; inc sec/all unit
  9762 00000706 FEC2                    		inc	dl		; inc head limit
  9763                                  Has1:					
  9764 00000708 26887508                		mov	[es:di+8], dh	; [es:di+BDS.secperclus]
  9765 0000070C 26887D0C                		mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
  9766 00000710 26894D0E                		mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
  9767 00000714 26886510                		mov	[es:di+10h], ah	; [es:di+BDS.media]
  9768 00000718 26884511                		mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
  9769 0000071C 26885D13                		mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
  9770 00000720 26885515                		mov	[es:di+15h], dl	; [es:di+BDS.heads]
  9771                                  
  9772                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
  9773                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
  9774                                  		; to 0 since this code is for floppies
  9775                                  
  9776                                  		; 18/12/2022
  9777                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
  9778                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
  9779                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
  9780                                  		; 18/12/2022
  9781 00000724 29C9                    		sub	cx, cx
  9782 00000726 26894D19                		mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
  9783 0000072A 26894D17                		mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
  9784 0000072E 26894D1D                		mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
  9785                                  getret:					
  9786 00000732 5B                      		pop	bx
  9787 00000733 5A                      		pop	dx
  9788 00000734 59                      		pop	cx
  9789                                  getret_exit:				
  9790 00000735 C3                      		retn
  9791                                  ; ---------------------------------------------------------------------------
  9792                                  
  9793                                  getbp_err_ret:	; before doing anything else, set set_id_flag	to 0.			
  9794                                  		;mov	ds:set_id_flag,	0
  9795                                  		; 19/10/2022
  9796 00000736 C606[0205]00            		mov	byte [set_id_flag], 0
  9797 0000073B E83105                  		call	maperror
  9798 0000073E EBF2                    		jmp	short getret
  9799                                  ; ---------------------------------------------------------------------------
  9800                                  
  9801                                  		; we have a 3.5" diskette for	which we cannot	build a	bpb.
  9802                                  		; we do	not assume any type of bpb for this medium.
  9803                                  
  9804                                  got_unknown_medium:			
  9805                                  		;mov	ds:set_id_flag,	0 
  9806 00000740 C606[0205]00            		mov	byte [set_id_flag], 0
  9807 00000745 B007                    		mov	al, 7
  9808 00000747 F9                      		stc
  9809 00000748 EBE8                    		jmp	short getret
  9810                                  
  9811                                  ; =============== S U B	R O U T	I N E =======================================
  9812                                  
  9813                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
  9814                                  
  9815                                  ; ----------------------------------------------------------------
  9816                                  ; read in the boot sector. set carry if error in reading sector.
  9817                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
  9818                                  ;
  9819                                  ;	assumes es:di -> bds, ds-> Bios_Data
  9820                                  ; ----------------------------------------------------------------
  9821                                  
  9822                                  ; 10/03/2019 - Retro DOS v4.0
  9823                                  
  9824                                  readbootsec:	
  9825 0000074A B600                    		mov	dh, 0		; head 0
  9826 0000074C B90100                  		mov	cx, 1		; cylinder 0, sector 1
  9827 0000074F E8C600                  		call	read_sector
  9828 00000752 724A                    		jb	short err_ret
  9829 00000754 31DB                    		xor	bx, bx		; assume valid boot sector
  9830                                  
  9831                                  		; put a sanity check for the boot sector in here to detect
  9832                                  		; boot sectors that do not have valid bpbs. we examine the
  9833                                  		; first two bytes - they must contain a long jump (69h) or a
  9834                                  		; short jump (EBh) followed by a nop (90h), or a short jump
  9835                                  		; (E9h). if this test is passed, we further check by examining
  9836                                  		; the signature at the end of the boot sector for the word
  9837                                  		; AA55h. if the signature is not present, we examine the media
  9838                                  		; descriptor byte to see if it is valid. for dos 3.3, this
  9839                                  		; logic is modified a little bit. we are not going to check
  9840                                  		; signature. instead we are going to sanity check the media
  9841                                  		; byte in bpb regardless of the validity of signature. this is
  9842                                  		; to save the already developed commercial products that have
  9843                                  		; good jump instruction and signature but with the false bpb
  9844                                  		; informations
  9845                                  
  9846                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
  9847                                  
  9848                                  		; 19/10/2022
  9849 00000756 803E[4E01]69            		cmp	byte [disksector], 69h ; is it a direct jump?
  9850 0000075B 7415                    		jz	short check_bpb_mediabyte ; don't need to find a nop
  9851 0000075D 803E[4E01]E9            		cmp	byte [disksector], 0E9h ; dos 2.0 jump?
  9852 00000762 740E                    		jz	short check_bpb_mediabyte ; no need for	nop
  9853 00000764 803E[4E01]EB            		cmp	byte [disksector], 0EBh ; how about a short jump?
  9854 00000769 7531                    		jnz	short invalidbootsec
  9855 0000076B 803E[5001]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
  9856 00000770 752A                    		jnz	short invalidbootsec
  9857                                  
  9858                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9859                                  ;
  9860                                  ;; 10/03/2019
  9861                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
  9862                                  ;;
  9863                                  ;; Don't have to perform the following signature check since
  9864                                  ;; we need to check the media byte even with the good signatured diskette.
  9865                                  ;;
  9866                                  ;;check_signature:
  9867                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
  9868                                  ;;							 ; disk or 1.x media.
  9869                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
  9870                                  ;;					       ; may need some special handling
  9871                                  
  9872                                  ; check for non-ibm disks which do not have the signature AA55h at the
  9873                                  ; end of the boot sector, but still have a valid boot sector. this is done
  9874                                  ; by examining the media descriptor in the boot sector.
  9875                                  
  9876                                  		; 19/10/2022
  9877                                  check_bpb_mediabyte:			
  9878 00000772 A0[6301]                		mov	al, [disksector+15h]
  9879                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9880 00000775 24F0                    		and	al, 0F0h
  9881 00000777 3CF0                    		cmp	al, 0F0h	; allow	for strange media
  9882 00000779 7521                    		jnz	short invalidbootsec
  9883                                  
  9884                                  ; there were some (apparently a lot of them) diskettes that had been formatted
  9885                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
  9886                                  ; sectors. these are specifically diskettes that were formatted in drives
  9887                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
  9888                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
  9889                                  ; in dos. in order to support them, we have to introduce a "hack" that will
  9890                                  ; help our build bpb routine to recognise these specific cases, and to
  9891                                  ; set up out copy of the bpb accordingly.
  9892                                  ; we do this by checking to see if the boot sector is off a diskette that
  9893                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
  9894                                  ; sec/clus field to 1. if not, we carry on as normal.
  9895                                  
  9896                                  checksinglesided:
  9897 0000077B A0[6301]                		mov	al, [disksector+15h]
  9898 0000077E 3CF0                    		cmp	al, 0F0h
  9899 00000780 741B                    		jz	short gooddsk
  9900 00000782 A801                    		test	al, 1
  9901 00000784 7517                    		jnz	short gooddsk
  9902 00000786 813E[5601]332E          		cmp	word [disksector+8], 2E33h ; "3."
  9903 0000078C 7507                    		jnz	short mustbeearlier
  9904 0000078E 803E[5801]32            		cmp	byte [disksector+0Ah], 32h ; "2"
  9905 00000793 7308                    		jnb	short gooddsk
  9906                                  
  9907                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
  9908                                  
  9909                                  mustbeearlier:				
  9910 00000795 C606[5B01]01            		mov	byte [disksector+0Dh], 1
  9911                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9912 0000079A EB01                    		jmp	short gooddsk
  9913                                  ; ---------------------------------------------------------------------------
  9914                                  
  9915                                  invalidbootsec:				
  9916 0000079C 43                      		inc	bx		; indicate that boot sector invalid
  9917                                  		; 10/12/2022
  9918                                  movbpb_ret:
  9919                                  gooddsk:				
  9920 0000079D F8                      		clc
  9921                                  err_ret:
  9922 0000079E C3                      		retn
  9923                                  ; ---------------------------------------------------------------------------
  9924                                  
  9925                                  		; 10/12/2022
  9926                                  ;err_ret:				
  9927                                  		;retn
  9928                                  
  9929                                  ; =============== S U B	R O U T	I N E =======================================
  9930                                  
  9931                                  ; 15/10/2022
  9932                                  ; ---------------------------------------------------------------------------
  9933                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
  9934                                  ; getbp routine at has1
  9935                                  ;
  9936                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
  9937                                  ; serial number, volume label, file system id in bds according to
  9938                                  ; the boot record.  after that, this routine will set the set_id_flag to 2
  9939                                  ; to signal that volume label is set already from the extended boot record
  9940                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
  9941                                  ; the volume label in the root directory.)
  9942                                  ; ---------------------------------------------------------------------------
  9943                                  
  9944                                  ; 10/03/2019 - Retro DOS v4.0
  9945                                  
  9946                                  		; 19/10/2022
  9947                                  movbpb:	
  9948 0000079F 8A36[5B01]              		mov	dh, [disksector+0Dh]
  9949                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9950                                  					; sectors per unit
  9951 000007A3 8A3E[5F01]              		mov	bh, [disksector+11h]
  9952                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
  9953                                  					; number of directory entries
  9954 000007A7 8B0E[6101]              		mov	cx, [disksector+13h]
  9955                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
  9956                                  					; size of drive
  9957 000007AB 8A26[6301]              		mov	ah, [disksector+15h]
  9958                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9959                                  					; media	descriptor
  9960 000007AF A0[6401]                		mov	al, [disksector+16h];
  9961                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
  9962                                  					; number of fat	sectors
  9963 000007B2 8A1E[6601]              		mov	bl, [disksector+18h]
  9964                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
  9965                                  					; sectors per track
  9966 000007B6 8A16[6801]              		mov	dl, [disksector+1Ah]
  9967                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
  9968                                  					; number of heads
  9969 000007BA 803E[0205]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
  9970 000007BF 75DC                    		jnz	short movbpb_ret
  9971 000007C1 E81200                  		call	mov_media_ids
  9972 000007C4 7205                    		jb	short movbpb_conv ; conventional boot record?
  9973 000007C6 C606[0205]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
  9974                                  movbpb_conv:				
  9975 000007CB 803E[7700]01            		cmp	byte [fhave96], 1
  9976 000007D0 75CB                    		jnz	short movbpb_ret
  9977 000007D2 E8E111                  		call	resetchanged	; reset	flags in bds to	not fchanged.
  9978                                  		; 10/12/2022
  9979                                  		; cf = 0
  9980                                  ;movbpb_ret:				
  9981                                  		;clc
  9982 000007D5 C3                      		retn
  9983                                  
  9984                                  ; =============== S U B	R O U T	I N E =======================================
  9985                                  
  9986                                  ;copy the boot_serial number, volume id, and filesystem id from the
  9987                                  ;***extended boot record*** in ds:disksector to the bds table pointed
  9988                                  ;by es:di.
  9989                                  
  9990                                  ;in.) es:di -> bds
  9991                                  ;     ds:disksector = valid extended boot record.
  9992                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
  9993                                  ;      the boot record information.
  9994                                  ;     carry flag set if not an extended bpb.
  9995                                  ;     all registers saved except the flag.
  9996                                  
  9997                                  		; 19/10/2022
  9998                                  mov_media_ids:		
  9999 000007D6 803E[7401]29            		cmp	byte [disksector+26h], 29h
 10000                                  					; [disksector+EXT_BOOT.SIG],
 10001                                  					; EXT_BOOT_SIGNATURE
 10002 000007DB 752C                    		jnz	short mmi_not_ext
 10003 000007DD 51                      		push	cx
 10004 000007DE 8B0E[7501]              		mov	cx, [disksector+27h]
 10005                                  					; [disksector+EXT_BOOT.SERIAL]
 10006 000007E2 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
 10007 000007E6 8B0E[7701]              		mov	cx, [disksector+29h]
 10008                                  					; [disksector+EXT_BOOT.SERIAL+2]
 10009 000007EA 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
 10010 000007EE 57                      		push	di
 10011 000007EF 56                      		push	si
 10012 000007F0 B90B00                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
 10013 000007F3 BE[7901]                		mov	si, disksector+2Bh
 10014                                  		;mov	si, (offset disksector+2Bh) ;
 10015                                  					; disksector+EXT_BOOT.VOL_LABEL
 10016 000007F6 83C74B                  		add	di, 75		; BDS.volid
 10017 000007F9 F3A4                    		rep movsb
 10018                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
 10019                                  		; 10/12/2022
 10020 000007FB B108                    		mov	cl, 8 ; cx = 8
 10021 000007FD BE[8401]                		mov	si, disksector+36h
 10022                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
 10023 00000800 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
 10024 00000803 F3A4                    		rep movsb
 10025 00000805 5E                      		pop	si
 10026 00000806 5F                      		pop	di
 10027 00000807 59                      		pop	cx
 10028                                  		; 10/12/2022
 10029                                  		; cf = 0
 10030                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
 10031                                  				; (20/09/2022)
 10032 00000808 C3                      		retn
 10033                                  ; ---------------------------------------------------------------------------
 10034                                  
 10035                                  mmi_not_ext:				
 10036 00000809 F9                      		stc
 10037 0000080A C3                      		retn
 10038                                  
 10039                                  ; =============== S U B	R O U T	I N E =======================================
 10040                                  
 10041                                  ; 15/10/2022
 10042                                  ; --------------------------------------------------------------
 10043                                  ; read in the fat sector and get the media byte from it.
 10044                                  ; input : es:di -> bds
 10045                                  ; output:
 10046                                  ;	  carry set if an error occurs, ax contains error code.
 10047                                  ;	  otherwise, ah contains media byte on exit
 10048                                  ; --------------------------------------------------------------
 10049                                  
 10050                                  readfat:	
 10051                                  		;mov	dh, 0
 10052                                  		; 10/12/2022
 10053 0000080B 30F6                    		xor	dh, dh
 10054 0000080D B90200                  		mov	cx, 2		; head 0
 10055                                  					; cylinder 0, sector 2
 10056 00000810 E80500                  		call	read_sector
 10057 00000813 7202                    		jb	short bad_fat_ret
 10058 00000815 8A27                    		mov	ah, [bx]	; media	byte
 10059                                  bad_fat_ret:				
 10060 00000817 C3                      		retn
 10061                                  
 10062                                  ; =============== S U B	R O U T	I N E =======================================
 10063                                  
 10064                                  ; 15/10/2022
 10065                                  
 10066                                  ; ---------------------------------------------------------------------------
 10067                                  ; read a single sector into the temp buffer.
 10068                                  ; perform three retries in case of error.
 10069                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
 10070                                  ;		cx has sector and cylinder
 10071                                  ;		dh has head
 10072                                  ;		es:di has bds
 10073                                  ;		ds has Bios_Data
 10074                                  ;
 10075                                  ;   outputs:	carry clear
 10076                                  ;		    Bios_Data:bx point to sector
 10077                                  ;		       (note: some callers assume location of buffer)
 10078                                  ;
 10079                                  ;		carry set
 10080                                  ;		    ax has rom error code
 10081                                  ;
 10082                                  ; register bp is preserved.
 10083                                  ; ---------------------------------------------------------------------------
 10084                                  
 10085                                  ; 10/03/2019 - Retro DOS v4.0
 10086                                  
 10087                                  		; 19/10/2022
 10088                                  read_sector:	
 10089 00000818 55                      		push	bp
 10090 00000819 BD0300                  		mov	bp, 3		; make 3 attempts
 10091 0000081C 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 10092 00000820 BB[4E01]                		mov	bx, disksector	; get es:bx to point to	buffer
 10093                                  rd_ret:					
 10094 00000823 06                      		push	es
 10095 00000824 1E                      		push	ds
 10096 00000825 07                      		pop	es
 10097 00000826 B80102                  		mov	ax, 201h
 10098 00000829 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 10099                                  					; AL = number of sectors to read, CH = track, CL = sector
 10100                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 10101                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 10102 0000082B 07                      		pop	es
 10103 0000082C 734A                    		jnb	short okret2
 10104                                  rd_rty:					
 10105 0000082E E87604                  		call	again		; reset	disk, decrement	bp, preserve ax
 10106 00000831 7442                    		jz	short err_rd_ret
 10107 00000833 26F6452301              		test	byte [es:di+23h], 1
 10108                                  		;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
 10109                                  					; fnon_removable
 10110 00000838 75E9                    		jnz	short rd_ret
 10111 0000083A 803E[3006]00            		cmp	byte [media_set_for_format], 0
 10112 0000083F 7510                    		jnz	short rd_skip1_dpt
 10113 00000841 50                      		push	ax
 10114 00000842 1E                      		push	ds		; for retry, set the head settle time to 0Fh
 10115 00000843 C536[2D01]              		lds	si, [dpt]
 10116                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10117                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
 10118                                  		;			; NORMSETTLE
 10119                                  		; 12/12/2022
 10120 00000847 B00F                    		mov	al, 15
 10121 00000849 864409                  		xchg	al, [si+9]
 10122                                  		; 
 10123 0000084C 1F                      		pop	ds
 10124 0000084D A2[2A01]                		mov	[save_head_sttl], al
 10125 00000850 58                      		pop	ax
 10126                                  rd_skip1_dpt:				
 10127 00000851 06                      		push	es
 10128 00000852 1E                      		push	ds
 10129 00000853 07                      		pop	es
 10130 00000854 B80102                  		mov	ax, 201h
 10131 00000857 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 10132                                  					; AL = number of sectors to read, CH = track, CL = sector
 10133                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 10134                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 10135 00000859 07                      		pop	es
 10136 0000085A 9C                      		pushf
 10137 0000085B 803E[3006]00            		cmp	byte [media_set_for_format], 0
 10138 00000860 750E                    		jnz	short rd_skip2_dpt
 10139 00000862 50                      		push	ax
 10140 00000863 A0[2A01]                		mov	al, [save_head_sttl]
 10141 00000866 1E                      		push	ds
 10142 00000867 C536[2D01]              		lds	si, [dpt]
 10143 0000086B 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10144 0000086E 1F                      		pop	ds
 10145 0000086F 58                      		pop	ax
 10146                                  rd_skip2_dpt:				
 10147 00000870 9D                      		popf
 10148 00000871 7305                    		jnb	short okret2
 10149 00000873 EBB9                    		jmp	short rd_rty
 10150                                  ; ---------------------------------------------------------------------------
 10151                                  
 10152                                  err_rd_ret:				
 10153 00000875 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
 10154                                  					; return error
 10155 00000877 F9                      		stc
 10156                                  
 10157                                  ; update information pertaining to last drive accessed, time of access, last
 10158                                  ; track accessed in that drive.
 10159                                  
 10160                                  okret2:					
 10161 00000878 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
 10162 0000087C 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
 10163 00000880 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 10164                                  					; save last track accessed on this drive
 10165                                  					; preserve flags in case error occurred
 10166 00000884 9C                      		pushf
 10167 00000885 E8FF03                  		call	set_tim
 10168 00000888 9D                      		popf			; restore flags
 10169 00000889 5D                      		pop	bp
 10170 0000088A C3                      		retn
 10171                                  
 10172                                  ;----------------------------------------------------------------------------
 10173                                  ;	disk open/close routines
 10174                                  ;----------------------------------------------------------------------------
 10175                                  
 10176                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
 10177 0000088B 803E[7700]00            		cmp	byte [fhave96], 0
 10178 00000890 7407                    		jz	short dsk_open_exit ; done if no changeline support
 10179 00000892 E8DBFC                  		call	SetDrive	; get bds for drive
 10180 00000895 26FF4520                		inc	word [es:di+20h] ; [es:di+BDS.opcnt]
 10181                                  dsk_open_exit:	
 10182                                  		; 10/12/2022
 10183                                  		; cf = 0			
 10184                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 10185                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 10186 00000899 C3                      		retn
 10187                                  ; ---------------------------------------------------------------------------
 10188                                  
 10189                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
 10190 0000089A 803E[7700]00            		cmp	byte [fhave96], 0
 10191 0000089F 740E                    		jz	short exitjx	; done if no changeline	support
 10192 000008A1 E8CCFC                  		call	SetDrive	; get bds for drive
 10193 000008A4 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 10194 000008A9 7404                    		jz	short exitjx	; watch	out for	wrap
 10195 000008AB 26FF4D20                		dec	word [es:di+20h]
 10196                                  exitjx:					
 10197                                  		; 10/12/2022
 10198                                  		; cf = 0
 10199                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 10200                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 10201 000008AF C3                      		retn
 10202                                  
 10203                                  ;----------------------------------------------------------------------------
 10204                                  ;		disk removable routine
 10205                                  ;----------------------------------------------------------------------------
 10206                                  
 10207                                  		; al is	unit #
 10208                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
 10209 000008B0 E8BDFC                  		call	SetDrive	; get bds for this drive
 10210                                  		;test	byte [es:di+BDS.flags], fnon_removable
 10211 000008B3 26F6452301              		test	byte [es:di+23h], 1
 10212                                  		;jnz	short x_bus_exit ; non_rem
 10213 000008B8 7501                    		jnz	short non_rem	; 15/10/2022
 10214                                  		; 10/12/2022
 10215                                  		; cf = 0
 10216                                  		;clc			; CF is already ZERO here
 10217                                  					; 15/10/2022
 10218 000008BA C3                      		retn
 10219                                  ; ---------------------------------------------------------------------------
 10220                                  
 10221                                  non_rem:
 10222                                  x_bus_exit:				
 10223 000008BB B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
 10224                                  					; return busy status
 10225 000008BD F9                      		stc
 10226                                  dsk_ret:				
 10227 000008BE C3                      		retn
 10228                                  
 10229                                  ;----------------------------------------------------------------------------
 10230                                  ;		disk i/o routines
 10231                                  ;----------------------------------------------------------------------------
 10232                                  
 10233                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
 10234                                  		;mov	word [wrtverify], 103h
 10235                                  		; 19/10/2022
 10236 000008BF C706[2001]0301          		mov	word [rflag], 103h
 10237                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
 10238 000008C5 EB06                    		jmp	short dsk_cl
 10239                                  ; ---------------------------------------------------------------------------
 10240                                  
 10241                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
 10242                                  		;mov	word [wrtverify], 3
 10243                                  		; 19/10/2022
 10244 000008C7 C706[2001]0300          		mov	word [rflag], 3
 10245                                  		;mov	word ptr ds:rflag, 3 ; romwrite
 10246                                  
 10247                                  dsk_cl:					
 10248 000008CD E89800                  		call	diskio		; romwrite
 10249                                  ; ---------------------------------------------------------------------------
 10250                                  
 10251                                  dsk_io:					
 10252 000008D0 73EC                    		jnb	short dsk_ret
 10253 000008D2 E906F8                  		jmp	bc_err_cnt
 10254                                  ; ---------------------------------------------------------------------------
 10255                                  
 10256                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
 10257 000008D5 E88B00                  		call	diskrd
 10258 000008D8 EBF6                    		jmp	short dsk_io
 10259                                  
 10260                                  ; =============== S U B	R O U T	I N E =======================================
 10261                                  
 10262                                  ; 15/10/2022
 10263                                  ; 10/03/2019 - Retro DOS v4.0
 10264                                  
 10265                                  ;-----------------------------------------------------------
 10266                                  ; miscellaneous odd jump routines. 
 10267                                  ; moved out of mainline for speed.
 10268                                  
 10269                                  ; if we have a system where we have virtual drives, we need 
 10270                                  ; to prompt the user to place the correct disk in the drive.
 10271                                  ;
 10272                                  ;	assume es:di -> bds, ds:->Bios_Data
 10273                                  ;-----------------------------------------------------------
 10274                                  
 10275                                  		; 19/10/2022
 10276                                  checksingle:		
 10277 000008DA 50                      		push	ax
 10278 000008DB 53                      		push	bx
 10279 000008DC 268B5D23                		mov	bx, [es:di+23h]	; [es:di+BDS.flags]
 10280                                  
 10281                                  ; if hard drive, cannot change disk.
 10282                                  ; if current owner of physical drive, no need to change diskette.
 10283                                  
 10284 000008E0 F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
 10285 000008E3 7573                    		jnz	short singleret
 10286 000008E5 F6C310                  		test	bl, 10h		; fi_am_mult
 10287                                  					; is there a drive sharing this	physical drive?
 10288 000008E8 746E                    		jz	short singleret
 10289                                  
 10290                                  
 10291                                  ; look for the previous owner of this physical drive
 10292                                  ; and reset its ownership flag.
 10293                                  
 10294 000008EA 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10295                                  					; get physical drive number
 10296 000008EE 06                      		push	es		; preserve pointer to current bds
 10297 000008EF 57                      		push	di
 10298 000008F0 C43E[1901]              		les	di, [start_bds] ; get first bds
 10299                                  scan_list:				
 10300 000008F4 26384504                		cmp	[es:di+4], al
 10301 000008F8 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
 10302 000008FA B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
 10303 000008FC 26845D23                		test	[es:di+23h], bl
 10304 00000900 744B                    		jz	short scan_skip	; he doesn't own it either. continue
 10305 00000902 26305D23                		xor	[es:di+23h], bl	; reset	ownership flag
 10306 00000906 5F                      		pop	di		; restore pointer to current bds
 10307 00000907 07                      		pop	es
 10308 00000908 26085D23                		or	[es:di+23h], bl	; ; set	ownership flag
 10309                                  
 10310                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
 10311                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
 10312                                  ; in this case.
 10313 0000090C 803E[7A00]01            		cmp	byte [fsetowner], 1
 10314 00000911 7517                    		jnz	short not_fsetowner
 10315                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
 10316 00000913 26807D0400              		cmp	byte [es:di+4], 0
 10317 00000918 753E                    		jnz	short singleret
 10318 0000091A 268A4505                		mov	al, [es:di+5]
 10319                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
 10320                                  					; get the DOS drive letter
 10321 0000091E 06                      		push	es
 10322 0000091F 8E06[1A00]              		mov	es, [zeroseg]
 10323 00000923 26A20405                		mov	[es:LSTDRV], al
 10324                                  		;mov	es:504h, al	; [es:LSTDRV]
 10325                                  					; set up sdsb
 10326 00000927 07                      		pop	es		; restore bds pointer
 10327 00000928 EB2E                    		jmp	short singleret
 10328                                  ; ---------------------------------------------------------------------------
 10329                                  
 10330                                  ; to support "backward" compatibility with ibm's "single drive status byte"
 10331                                  ; we now check to see if we are in a single drive system and the application
 10332                                  ; has "cleverly" diddled the sdsb
 10333                                  
 10334                                  not_fsetowner:				
 10335 0000092A 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
 10336 0000092F 7517                    		jnz	short ignore_sdsb
 10337 00000931 50                      		push	ax
 10338 00000932 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
 10339 00000936 88C4                    		mov	ah, al
 10340 00000938 06                      		push	es
 10341 00000939 8E06[1A00]              		mov	es, [zeroseg]
 10342 0000093D 2686060405              		xchg	al, [es:LSTDRV]
 10343                                  		;xchg	al, es:504h	; [es:LSTDRV]
 10344                                  					; then swap(curr_drv,req_drv)
 10345 00000942 07                      		pop	es
 10346 00000943 38C4                    		cmp	ah, al		; else
 10347 00000945 58                      		pop	ax		; swap(curr_drv,req_drv)
 10348 00000946 7410                    		jz	short singleret	; issue	swap_dsk_msg
 10349                                  ignore_sdsb:				
 10350 00000948 E88D0E                  		call	swpdsk
 10351 0000094B EB0B                    		jmp	short singleret
 10352                                  ; ---------------------------------------------------------------------------
 10353                                  
 10354                                  scan_skip:	
 10355 0000094D 26C43D                  		les	di, [es:di]			
 10356                                  		;les	di, es:[di]	; [es:di+BDS.link]
 10357                                  					; go to	next bds
 10358 00000950 83FFFF                  		cmp	di, 0FFFFh	; end of list?
 10359 00000953 759F                    		jnz	short scan_list	; ontinue until	hit end	of list
 10360 00000955 F9                      		stc
 10361 00000956 5F                      		pop	di		; restore current bds
 10362 00000957 07                      		pop	es
 10363                                  
 10364                                  singleret:				
 10365 00000958 5B                      		pop	bx
 10366 00000959 58                      		pop	ax
 10367 0000095A C3                      		retn
 10368                                  
 10369                                  ; ---------------------------------------------------------------------------
 10370                                  
 10371                                  baddrive:				
 10372 0000095B B008                    		mov	al, 8		; sector not found
 10373 0000095D EB02                    		jmp	short baddrive_ret
 10374                                  ; ---------------------------------------------------------------------------
 10375                                  
 10376                                  unformatteddrive:				
 10377 0000095F B007                    		mov	al, 7		; unknown media
 10378                                  baddrive_ret:				
 10379 00000961 F9                      		stc
 10380                                  ; ---------------------------------------------------------------------------
 10381                                  
 10382                                  ioret:		
 10383 00000962 C3                      		retn
 10384                                  
 10385                                  ; ---------------------------------------------------------------------------
 10386                                  
 10387                                  ; 15/10/52022
 10388                                  
 10389                                  ; ---------------------------------------------------------------------------
 10390                                  ;	disk i/o handler
 10391                                  ;
 10392                                  ;	al = drive number (0-6)
 10393                                  ;	ah = media descriptor
 10394                                  ;	cx = sector count
 10395                                  ;	dx = first sector (low)
 10396                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
 10397                                  ;	ds = cs
 10398                                  ;	es:di = transfer address
 10399                                  ;	[rflag]=operation (2=read, 3=write)
 10400                                  ;	[verify]=1 for verify after write
 10401                                  ;
 10402                                  ;	if successful carry flag = 0
 10403                                  ;	  else cf=1 and al contains error code
 10404                                  ; ---------------------------------------------------------------------------
 10405                                  
 10406                                  diskrd:	
 10407                                  		;mov	ds:rflag, 2	; romread
 10408                                  		; 19/10/2022
 10409 00000963 C606[2001]02            		mov	byte [rflag], 2 ; romread
 10410                                  
 10411                                  ; =============== S U B	R O U T	I N E =======================================
 10412                                  
 10413                                  		; 19/10/2022
 10414                                  diskio:
 10415 00000968 89FB                    		mov	bx, di		; es:bx	= transfer address
 10416 0000096A 8C06[2F05]              		mov	[xfer_seg], es	; save transfer	segment
 10417 0000096E E8FFFB                  		call	SetDrive
 10418 00000971 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
 10419 00000975 A2[1F01]                		mov	[medbyt], al
 10420                                  		;jcxz	short ioret
 10421 00000978 E3E8                    		jcxz	ioret
 10422                                  
 10423                                  ; see if the media is formatted or not by checking the flags field in
 10424                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 10425                                  ; go to the error exit at label unformatteddrive.
 10426                                  
 10427 0000097A 26F6452402              		test	byte [es:di+24h], 2
 10428                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
 10429                                  					; unformatted_media
 10430 0000097F 75DE                    		jnz	short unformatteddrive
 10431 00000981 890E[2201]              		mov	[seccnt], cx	; save sector count
 10432 00000985 8926[3501]              		mov	[spsav], sp	; save sp
 10433                                  
 10434                                  ; ensure that we are trying to access valid sectors on the drive
 10435                                  
 10436 00000989 89D0                    		mov	ax, dx
 10437 0000098B 31F6                    		xor	si, si
 10438 0000098D 01CA                    		add	dx, cx
 10439 0000098F 83D600                  		adc	si, 0
 10440 00000992 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 10441                                  					; > 32 bit sector ?
 10442 00000997 740D                    		jz	short sanity32
 10443 00000999 83FE00                  		cmp	si, 0
 10444 0000099C 75BD                    		jnz	short baddrive
 10445 0000099E 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 10446 000009A2 77B7                    		ja	short baddrive
 10447 000009A4 EB12                    		jmp	short sanityok
 10448                                  ; ---------------------------------------------------------------------------
 10449                                  
 10450                                  sanity32:				
 10451 000009A6 0336[2305]              		add	si, [start_sec_h]
 10452 000009AA 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 10453 000009AE 7208                    		jb	short sanityok
 10454 000009B0 77A9                    		ja	short baddrive
 10455 000009B2 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 10456 000009B6 77A3                    		ja	short baddrive
 10457                                  
 10458                                  sanityok:				
 10459 000009B8 8B16[2305]              		mov	dx, [start_sec_h]
 10460 000009BC 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 10461 000009C0 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 10462                                  
 10463                                  ; now dx;ax have the physical first sector.
 10464                                  ; since the following procedures is going to destroy ax, let's
 10465                                  ; save it temporarily to saved_word.
 10466                                  
 10467 000009C4 A3[2505]                		mov	[saved_word], ax ; save the sector number (low)
 10468                                  
 10469                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 10470                                  ; will do it because we will skip the set up stuff with hard disks.
 10471                                  
 10472 000009C7 06                      		push	es
 10473 000009C8 8E06[1A00]              		mov	es, [zeroseg]
 10474 000009CC 26C4367800              		les	si, [es:DSKADR]
 10475                                  		;les	si, es:78h	; [es:DSKADR]
 10476                                  					; current disk parm table
 10477 000009D1 8936[2D01]              		mov	[dpt], si
 10478 000009D5 8C06[2F01]              		mov	[dpt+2], es
 10479 000009D9 07                      		pop	es
 10480 000009DA 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10481                                  					; fnon_removable
 10482 000009DF 7510                    		jnz	short skip_setup
 10483 000009E1 E8F6FE                  		call	checksingle
 10484                                  
 10485                                  ; check to see if we have previously noted a change line. the routine
 10486                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 10487                                  ; the proper error code.
 10488                                  
 10489 000009E4 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 10490 000009E9 7403                    		jz	short diskio_nochangeline ; brif not
 10491 000009EB E8B80E                  		call	checklatchio	; will do a sneaky pop stack return
 10492                                  					; if a disk error occurs
 10493                                  diskio_nochangeline:			
 10494 000009EE E84700                  		call	iosetup		; set up tables	and variables for i/o
 10495                                  
 10496                                  ; now the settle values are correct for the following code
 10497                                  
 10498                                  skip_setup:
 10499                                  
 10500                                  ; 32 bit sector calculation.
 10501                                  ; dx:[saved_word] = starting sector number.
 10502                                  				
 10503 000009F1 89D0                    		mov	ax, dx
 10504 000009F3 31D2                    		xor	dx, dx
 10505 000009F5 26F77513                		div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10506                                  					 ; divide by sec per track
 10507 000009F9 A3[2105]                		mov	[temp_h], ax
 10508 000009FC A1[2505]                		mov	ax, [saved_word]
 10509 000009FF 26F77513                		div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10510                                  					; now, [temp_h]:ax = track #, dx = sector
 10511                                  		;inc	dl		; sector number	is 1 based.
 10512                                  		; 18/12/2022
 10513 00000A03 42                      		inc	dx
 10514 00000A04 8816[3101]              		mov	[cursec], dl	; save current sector
 10515 00000A08 268B4D15                		mov	cx, [es:di+15h]	; es:di+BDS.heads]
 10516                                  					; get number of	heads
 10517 00000A0C 50                      		push	ax
 10518 00000A0D 31D2                    		xor	dx, dx
 10519 00000A0F A1[2105]                		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
 10520 00000A12 F7F1                    		div	cx
 10521 00000A14 A3[2105]                		mov	[temp_h], ax
 10522 00000A17 58                      		pop	ax
 10523 00000A18 F7F1                    		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 10524 00000A1A 833E[2105]00            		cmp	word [temp_h], 0
 10525 00000A1F 7714                    		ja	short baddrive_brdg
 10526 00000A21 3D0004                  		cmp	ax, 1024	; 2^10 currently maxium	for track #.
 10527 00000A24 770F                    		ja	short baddrive_brdg
 10528 00000A26 8816[3201]              		mov	[curhd], dl	; save current head
 10529 00000A2A A3[3301]                		mov	[curtrk], ax	; save current track
 10530                                  
 10531                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 10532                                  ; violations here. not true. we perform the operation as if everything is
 10533                                  ; symmetric; let the int 13 handler worry about the dma violations.
 10534                                  
 10535 00000A2D A1[2201]                		mov	ax, [seccnt]
 10536 00000A30 E88400                  		call	block		; (cas - call/ret)
 10537                                  		;call	done
 10538                                  		;retn
 10539                                  		; 18/12/2022
 10540 00000A33 EB4B                    		jmp	done
 10541                                  
 10542                                  ; ---------------------------------------------------------------------------
 10543                                  
 10544                                  baddrive_brdg:				
 10545 00000A35 E923FF                  		jmp	baddrive
 10546                                  
 10547                                  ; =============== S U B	R O U T	I N E =======================================
 10548                                  
 10549                                  ;--------------------------------------------------------------
 10550                                  ; set the drive-last-accessed flag for diskette only. 
 10551                                  ; we know that the hard disk will not be removed.
 10552                                  ; es:di -> current bds.
 10553                                  ; ds -> Bios_Data
 10554                                  ; ax,cx,si are destroyed.
 10555                                  ;--------------------------------------------------------------
 10556                                  
 10557                                  		; 19/10/2022
 10558                                  iosetup:	
 10559 00000A38 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10560 00000A3C A2[1E01]                		mov	[tim_drv], al	; save drive letter
 10561                                  
 10562                                  ; determine proper head settle values
 10563                                  
 10564 00000A3F 803E[3006]00            		cmp	byte [media_set_for_format], 0
 10565 00000A44 7539                    		jnz	short skip_dpt_setting
 10566 00000A46 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 10567 00000A49 1E                      		push	ds
 10568 00000A4A C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10569 00000A4E 884404                  		mov	[si+4],	al
 10570 00000A51 8A440A                  		mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10571 00000A54 8A6404                  		mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 10572 00000A57 1F                      		pop	ds
 10573 00000A58 A2[2601]                		mov	[motorstartup], al
 10574 00000A5B 8826[2B01]              		mov	[save_eot], ah
 10575                                  
 10576                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 10577                                  ; motor start time to 4. this checking for every i/o is going to affect
 10578                                  ; performance across the board, but is necessary!!
 10579                                  
 10580 00000A5F 1E                      		push	ds
 10581 00000A60 C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10582 00000A64 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 10583                                  					; ffSmall
 10584 00000A69 7505                    		jnz	short motor_start_ok
 10585 00000A6B B004                    		mov	al, 4
 10586 00000A6D 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10587                                  motor_start_ok:
 10588                                  
 10589                                  ; ds:si now points to disk parameter table.
 10590                                  ; get current settle and set fast settle
 10591                                  				
 10592                                  		;xor	al, al
 10593                                  		;inc	al		; ibm wants fast settle	to be 1
 10594                                  		; 18/12/2022
 10595 00000A70 31C0                    		xor	ax, ax
 10596 00000A72 40                      		inc	ax
 10597 00000A73 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10598                                  					; get settle and set up	for fast
 10599 00000A76 1F                      		pop	ds
 10600 00000A77 A2[2701]                		mov	[settlecurrent], al
 10601 00000A7A B00F                    		mov	al, 15		; NORMSETTLE
 10602                                  					; someone has diddled the settle
 10603 00000A7C A2[2801]                		mov	[settleslow], al
 10604                                  skip_dpt_setting:			
 10605 00000A7F C3                      		retn
 10606                                  
 10607                                  ; =============== S U B	R O U T	I N E =======================================
 10608                                  
 10609                                  ;--------------------------------------------------------------
 10610                                  ; set time of last access, and reset default values in the dpt.
 10611                                  ;
 10612                                  ;	  note: trashes (at least) si
 10613                                  ;--------------------------------------------------------------
 10614                                  
 10615                                  		; 19/10/2022
 10616                                  done:
 10617 00000A80 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10618                                  					; fnon_removable
 10619 00000A85 752F                    		jnz	short ddbx	; do not set for non-removable media
 10620 00000A87 E8FD01                  		call	set_tim
 10621                                  ;diddleback:
 10622                                  ; 09/12/2022
 10623                                  diddle_back:				
 10624 00000A8A 9C                      		pushf
 10625 00000A8B 803E[3006]00            		cmp	byte [media_set_for_format], 0
 10626 00000A90 7523                    		jnz	short nodiddleback
 10627 00000A92 50                      		push	ax
 10628 00000A93 06                      		push	es
 10629 00000A94 C436[2D01]              		les	si, [dpt]
 10630 00000A98 A0[2B01]                		mov	al, [save_eot]
 10631 00000A9B 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 10632 00000A9F A0[2701]                		mov	al, [settlecurrent]
 10633 00000AA2 8A26[2601]              		mov	ah, [motorstartup]
 10634 00000AA6 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10635 00000AAA 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 10636 00000AAF 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 10637 00000AB3 07                      		pop	es
 10638 00000AB4 58                      		pop	ax
 10639                                  nodiddleback:				
 10640 00000AB5 9D                      		popf
 10641                                  ddbx:					
 10642 00000AB6 C3                      		retn
 10643                                  
 10644                                  ; =============== S U B	R O U T	I N E =======================================
 10645                                  
 10646                                  ;--------------------------------------------------------------
 10647                                  ;read the number of sectors specified in ax, 
 10648                                  ;handling track boundaries
 10649                                  ;es:di -> bds for this drive
 10650                                  ;--------------------------------------------------------------
 10651                                  
 10652                                  		 ; 19/10/2022
 10653                                  block:	
 10654 00000AB7 09C0                    		or	ax, ax
 10655 00000AB9 74FB                    		jz	short ddbx
 10656 00000ABB 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10657                                  					; fnon_removable
 10658 00000AC0 740D                    		jz	short block_floppy ;
 10659                                  
 10660                                  ; check	to see if multi	track operation	is allowed. if not
 10661                                  ; we have to go	to the block_floppy below to break up the operation.
 10662                                  
 10663 00000AC2 F606[2705]80            		test	byte [multrk_flag], 80h
 10664                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 10665 00000AC7 7406                    		jz	short block_floppy
 10666 00000AC9 E82900                  		call	Disk
 10667 00000ACC 31C0                    		xor	ax, ax
 10668 00000ACE C3                      		retn
 10669                                  ; ---------------------------------------------------------------------------
 10670                                  
 10671                                  block_floppy:
 10672                                  
 10673                                  ; read at most 1 track worth. perform minimization at sector / track
 10674                                  				
 10675 00000ACF 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 10676 00000AD3 FEC1                    		inc	cl
 10677 00000AD5 2A0E[3101]              		sub	cl, [cursec]
 10678 00000AD9 30ED                    		xor	ch, ch
 10679 00000ADB 39C8                    		cmp	ax, cx
 10680 00000ADD 7302                    		jnb	short gotmin
 10681 00000ADF 89C1                    		mov	cx, ax
 10682                                  
 10683                                  gotmin:
 10684                                  
 10685                                  ; ax is the requested number of sectors to read
 10686                                  ; cx is the number that we can do on this track
 10687                                  					
 10688 00000AE1 50                      		push	ax
 10689 00000AE2 51                      		push	cx
 10690 00000AE3 89C8                    		mov	ax, cx
 10691 00000AE5 E80D00                  		call	Disk
 10692 00000AE8 59                      		pop	cx
 10693 00000AE9 58                      		pop	ax
 10694                                  
 10695                                  ; cx is the number of sectors just transferred
 10696                                  
 10697 00000AEA 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 10698 00000AEC D0E1                    		shl	cl, 1
 10699 00000AEE 00CF                    		add	bh, cl		; adjust transfer address
 10700 00000AF0 EBC5                    		jmp	short block
 10701                                  dskerr_brdg:				
 10702 00000AF2 E9EC00                  		jmp	dskerr
 10703                                  
 10704                                  ; =============== S U B	R O U T	I N E =======================================
 10705                                  
 10706                                  ; 15/10/2022
 10707                                  
 10708                                  ;--------------------------------------------------------------
 10709                                  ;perform disk i/o with retries
 10710                                  ; al = number of sectors (1-8, all on one track)
 10711                                  ; es:di point to drive parameters
 10712                                  ; xfer_seg:bx = transfer address 
 10713                                  ;		(must not cross a 64k physical boundary)
 10714                                  ; [rflag] = 2 if read, 3 if write
 10715                                  ; [verify] = 0 for normal, 1 for verify after write
 10716                                  ;--------------------------------------------------------------
 10717                                  
 10718                                  		 ; 19/10/2022
 10719                                  Disk:
 10720                                  
 10721                                  ; Check for hard disk format and
 10722                                  ; if TRUE then set max error count to 2
 10723                                  
 10724 00000AF5 BD0500                  		mov	bp, 5		; MAXERR
 10725                                  					; set up retry count
 10726 00000AF8 26F6452301              		test	byte [es:di+23h], 1	;
 10727                                  					; [es:di+BDS.flags], fnon_removable
 10728 00000AFD 7408                    		jz	short GetRdWrInd
 10729 00000AFF 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 10730 00000B02 7403                    		jz	short GetRdWrInd
 10731 00000B04 BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 10732                                  GetRdWrInd:				
 10733 00000B07 892E[2A05]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 10734 00000B0B 892E[2C05]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 10735 00000B0F 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 10736                                  ;retry:
 10737                                  ; 09/12/2022
 10738                                  _retry:					
 10739 00000B13 50                      		push	ax
 10740 00000B14 8B16[3301]              		mov	dx, [curtrk]
 10741 00000B18 26F6452301              		test	byte [es:di+23h], 1
 10742 00000B1D 740B                    		jz	short disk_not_mini
 10743 00000B1F 26837D4701              		cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 10744                                  					; is this a mini disk? ((logical dos partition))
 10745 00000B24 7504                    		jnz	short disk_not_mini ; no. continue to next.
 10746 00000B26 26035549                		add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 10747                                  					; add hidden trks.
 10748                                  disk_not_mini:				
 10749 00000B2A D0CE                    		ror	dh, 1
 10750 00000B2C D0CE                    		ror	dh, 1
 10751 00000B2E 0A36[3101]              		or	dh, [cursec]
 10752 00000B32 89D1                    		mov	cx, dx
 10753 00000B34 86E9                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 10754 00000B36 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 10755 00000B3A 268A5504                		mov	dl, [es:di+4]	; physical drive number
 10756                                  					; [es:di+BDS.drivenum]
 10757 00000B3E 26807D2205              		cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 10758 00000B43 7413                    		jz	short do_fast	; hard files use fast speed
 10759                                  
 10760                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 10761                                  ; this helps when we have just done a reset disk operation and the head has
 10762                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 10763                                  
 10764 00000B45 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 10765 00000B4A 740A                    		jz	short do_writej
 10766 00000B4C 80FC02                  		cmp	ah, 2		; romread
 10767 00000B4F 7407                    		jz	short do_fast
 10768 00000B51 80FC04                  		cmp	ah, 4		; romverify
 10769 00000B54 7402                    		jz	short do_fast
 10770                                  do_writej:	
 10771                                  
 10772                                  ; reads always fast, unless we have just done a disk reset operation
 10773                                  			
 10774 00000B56 EB56                    		jmp	short do_write	; reads	always fast
 10775                                  ; ---------------------------------------------------------------------------
 10776                                  
 10777                                  do_fast:				
 10778 00000B58 E8FC00                  		call	fastspeed	; change settle	mode
 10779                                  
 10780                                  testerr:				
 10781 00000B5B 7295                    		jb	short dskerr_brdg
 10782                                  
 10783                                  ; set drive and track of last access
 10784                                  
 10785 00000B5D 8816[7600]              		mov	[step_drv], dl
 10786 00000B61 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 10787                                  no_set:
 10788                                  		;cmp	word [wrtverify], 103h
 10789 00000B65 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 10790 00000B6B 7452                    		jz	short doverify
 10791                                  noverify:				
 10792 00000B6D 58                      		pop	ax
 10793                                  
 10794                                  ; check the flags word in the bds to see if the drive is non removable
 10795                                  ; if not we needn't do anything special
 10796                                  ; if it is a hard disk then check to see if multi-track operation
 10797                                  ; is specified. if specified we don't have to calculate for the next
 10798                                  ; track since we are already done. so we can go to the exit of this routine.
 10799                                  
 10800 00000B6E 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10801                                  					; fnon_removable
 10802 00000B73 7407                    		jz	short its_removable
 10803 00000B75 F606[2705]80            		test	byte [multrk_flag], 80h ; multrk_on
 10804 00000B7A 7530                    		jnz	short disk_ret
 10805                                  its_removable:				
 10806 00000B7C 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 10807 00000B7F 30E4                    		xor	ah, ah
 10808 00000B81 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 10809 00000B85 00C1                    		add	cl, al
 10810 00000B87 880E[3101]              		mov	[cursec], cl
 10811 00000B8B 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 10812                                  					; see if sector/track limit reached
 10813 00000B8F 761B                    		jbe	short disk_ret
 10814 00000B91 C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 10815 00000B96 8A36[3201]              		mov	dh, [curhd]
 10816 00000B9A FEC6                    		inc	dh
 10817 00000B9C 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 10818 00000BA0 7206                    		jb	short noxor
 10819 00000BA2 30F6                    		xor	dh, dh
 10820 00000BA4 FF06[3301]              		inc	word [curtrk]
 10821                                  noxor:					
 10822 00000BA8 8836[3201]              		mov	[curhd], dh
 10823                                  disk_ret:				
 10824 00000BAC F8                      		clc
 10825 00000BAD C3                      		retn
 10826                                  ; ---------------------------------------------------------------------------
 10827                                  
 10828                                  ; 15/10/2022
 10829                                  
 10830                                  ;--------------------------------------------------------------
 10831                                  ; the request is for write. determine if we are talking about
 10832                                  ; the same track and drive. if so, use the fast speed.
 10833                                  ;--------------------------------------------------------------
 10834                                  
 10835                                  do_write:				
 10836 00000BAE 3A16[7600]              		cmp	dl, [step_drv]
 10837 00000BB2 7506                    		jnz	short do_norm	; we have changed drives
 10838 00000BB4 263A6D46                		cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 10839 00000BB8 749E                    		jz	short do_fast	; we are still on the same track
 10840                                  
 10841                                  do_norm:				
 10842 00000BBA E87500                  		call	normspeed
 10843 00000BBD EB9C                    		jmp	short testerr
 10844                                  ; ---------------------------------------------------------------------------
 10845                                  
 10846                                  ;--------------------------------------------------------------
 10847                                  ; we have a verify request also. get state info and go verify
 10848                                  ;--------------------------------------------------------------
 10849                                  
 10850                                  doverify:				
 10851 00000BBF 58                      		pop	ax
 10852 00000BC0 50                      		push	ax
 10853 00000BC1 B404                    		mov	ah, 4
 10854 00000BC3 E89100                  		call	fastspeed
 10855 00000BC6 73A5                    		jnb	short noverify
 10856                                  
 10857                                  ; check the error returned in ah to see if it is a soft ecc error.
 10858                                  ; if it is not we needn't do anything special. if it is a soft
 10859                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 10860                                  ; this retry count becomes 0 then we just ignore the error and go to
 10861                                  ; no_verify but if we can still try then we call the routine to reset
 10862                                  ; the disk and go to dskerr1 to retry the operation.
 10863                                  
 10864 00000BC8 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 10865 00000BCB 750B                    		jnz	short not_softecc_err
 10866 00000BCD FF0E[2C05]              		dec	word [soft_ecc_cnt]
 10867 00000BD1 749A                    		jz	short noverify	; no more retry
 10868 00000BD3 E84405                  		call	ResetDisk	; reset	disk
 10869 00000BD6 EB3E                    		jmp	short dskerr1	; retry
 10870                                  ; ---------------------------------------------------------------------------
 10871                                  
 10872                                  not_softecc_err:			; other error.			
 10873 00000BD8 E83F05                  		call	ResetDisk
 10874 00000BDB FF0E[2A05]              		dec	word [vretry_cnt]
 10875 00000BDF EB1C                    		jmp	short dskerr0
 10876                                  ; ---------------------------------------------------------------------------
 10877                                  
 10878                                  ;--------------------------------------------------------------
 10879                                  ; need to special case the change-line error ah=06h.
 10880                                  ; if we get this, we need to return it.
 10881                                  ;--------------------------------------------------------------
 10882                                  
 10883                                  dskerr:					
 10884 00000BE1 803E[7700]00            		cmp	byte [fhave96], 0	; do we	have changeline	support?
 10885 00000BE6 7403                    		jz	short dskerr_nochangeline ; brif not
 10886 00000BE8 E82F0D                  		call	checkio
 10887                                  dskerr_nochangeline:			
 10888 00000BEB 803E[2E05]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 10889 00000BF0 7508                    		jnz	short dochkagain ; no more retry.
 10890 00000BF2 BD0100                  		mov	bp, 1
 10891 00000BF5 C606[2E05]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 10892                                  dochkagain:				
 10893 00000BFA E8AA00                  		call	again
 10894                                  dskerr0:				
 10895 00000BFD 7420                    		jz	short harderr
 10896 00000BFF 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10897                                  					; fnon_removable
 10898 00000C04 7505                    		jnz	short skip_timeout_chk
 10899 00000C06 80FC80                  		cmp	ah, 80h		; timeout?
 10900 00000C09 7414                    		jz	short harderr
 10901                                  skip_timeout_chk:			
 10902 00000C0B 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 10903 00000C0E 740A                    		jz	short write_fault_err ;	then, don't retry.
 10904 00000C10 C706[2C05]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 10905                                  					; set soft_ecc_cnt back	to maxerr
 10906                                  dskerr1:				
 10907 00000C16 58                      		pop	ax		; restore sector count
 10908                                  		;jmp	retry
 10909                                  		; 09/12/2022
 10910 00000C17 E9F9FE                  		jmp	_retry
 10911                                  ; ---------------------------------------------------------------------------
 10912                                  
 10913                                  write_fault_err:			
 10914 00000C1A BD0100                  		mov	bp, 1		; just retry only once
 10915                                  					; for write fault error.
 10916 00000C1D EBF7                    		jmp	short dskerr1
 10917                                  
 10918                                  		; fall into harderr
 10919                                  ; ---------------------------------------------------------------------------
 10920                                  
 10921                                  ; entry point for routines that call maperror themselves
 10922                                  
 10923                                  harderr:				
 10924 00000C1F E84D00                  		call	maperror
 10925                                  harderr2:				
 10926 00000C22 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 10927                                  					; force a media check through rom
 10928 00000C27 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 10929 00000C2B 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 10930                                  
 10931                                  ; since we are performing a non-local goto, restore the disk parameters
 10932                                  
 10933                                  		;jmp	diddleback
 10934                                  		; 09/12/2022
 10935 00000C2F E958FE                  		jmp	diddle_back
 10936                                  
 10937                                  ; =============== S U B	R O U T	I N E =======================================
 10938                                  
 10939                                  ; change settle value from settlecurrent to whatever is appropriate
 10940                                  ; note that this routine is never called for a fixed disk.
 10941                                  
 10942                                  		; 19/10/2022
 10943                                  normspeed:
 10944 00000C32 803E[3006]00            		cmp	byte [media_set_for_format], 0
 10945 00000C37 751E                    		jnz	short fastspeed
 10946 00000C39 06                      		push	es
 10947 00000C3A 50                      		push	ax
 10948 00000C3B A0[2801]                		mov	al, [settleslow]
 10949 00000C3E C436[2D01]              		les	si, [dpt]	; current disk parm table
 10950 00000C42 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10951 00000C46 58                      		pop	ax
 10952 00000C47 07                      		pop	es
 10953 00000C48 E80C00                  		call	fastspeed
 10954 00000C4B 06                      		push	es
 10955 00000C4C C436[2D01]              		les	si, [dpt]
 10956 00000C50 26C6440901              		mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10957                                  					; 1 is fast settle value
 10958 00000C55 07                      		pop	es
 10959 00000C56 C3                      		retn
 10960                                  
 10961                                  ; =============== S U B	R O U T	I N E =======================================
 10962                                  
 10963                                  ; if the drive has been marked as too big (i.e. starting sector of the
 10964                                  ; partition is > 16 bits, then always return drive not ready.
 10965                                  
 10966                                  fastspeed:		
 10967 00000C57 26F6451F80              		test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 10968                                  					; ftoobig
 10969 00000C5C 750D                    		jnz	short notready
 10970 00000C5E 06                      		push	es
 10971 00000C5F 8E06[2F05]              		mov	es, [xfer_seg]
 10972 00000C63 CD13                    		int	13h		; DISK -
 10973 00000C65 8C06[2F05]              		mov	[xfer_seg], es
 10974 00000C69 07                      		pop	es
 10975 00000C6A C3                      		retn
 10976                                  ; ---------------------------------------------------------------------------
 10977                                  
 10978                                  notready:				
 10979 00000C6B F9                      		stc
 10980 00000C6C B480                    		mov	ah, 80h
 10981 00000C6E C3                      		retn
 10982                                  
 10983                                  ; =============== S U B	R O U T	I N E =======================================
 10984                                  
 10985                                  ; map error returned by rom in ah into corresponding code to be returned to
 10986                                  ; dos in al. trashes di. guaranteed to set carry.
 10987                                  
 10988                                  maperror:	
 10989 00000C6F 51                      		push	cx
 10990 00000C70 06                      		push	es
 10991 00000C71 1E                      		push	ds		; set es=Bios_Data
 10992 00000C72 07                      		pop	es
 10993 00000C73 88E0                    		mov	al, ah		; put error code in al
 10994 00000C75 A2[4401]                		mov	[lsterr], al	; terminate list with error code
 10995 00000C78 B90900                  		mov	cx, 9		; numerr (= errout-errin)
 10996                                  					; number of possible error conditions
 10997 00000C7B BF[3C01]                		mov	di, errin	; point to error conditions
 10998 00000C7E F2AE                    		repne scasb
 10999                                  		; 10/12/2022
 11000 00000C80 8A4508                  		mov	al, [di+8]	; [di+numerr-1]
 11001                                  					; get translation
 11002                                  		; 19/10/2022 - Temporary ! 
 11003                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 11004 00000C83 07                      		pop	es
 11005 00000C84 59                      		pop	cx
 11006 00000C85 F9                      		stc			; flag error condition
 11007 00000C86 C3                      		retn
 11008                                  
 11009                                  ; =============== S U B	R O U T	I N E =======================================
 11010                                  
 11011                                  ; set the time of last access for this drive.
 11012                                  ; this is done only for removable media. es:di -> bds
 11013                                  
 11014                                  set_tim:		
 11015 00000C87 50                      		push	ax
 11016 00000C88 E894F8                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 11017                                  
 11018                                  ; we have the new time. if we see that the time has passed,
 11019                                  ; then we reset the threshold counter...
 11020                                  
 11021 00000C8B 263B5547                		cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 11022 00000C8F 7506                    		jnz	short setaccess
 11023 00000C91 263B4D49                		cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 11024                                  		;jz	short done_set
 11025                                  		; 12/12/2022
 11026 00000C95 740E                    		je	short done_set2
 11027                                  setaccess:				
 11028 00000C97 C606[1D01]00            		mov	byte [accesscount], 0
 11029 00000C9C 26895547                		mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 11030 00000CA0 26894D49                		mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 11031                                  done_set:				
 11032 00000CA4 F8                      		clc
 11033                                  done_set2:		; 12/12/2022
 11034 00000CA5 58                      		pop	ax
 11035 00000CA6 C3                      		retn
 11036                                  
 11037                                  ; =============== S U B	R O U T	I N E =======================================
 11038                                  
 11039                                  ; this routine is called if an error occurs while formatting or verifying.
 11040                                  ; it resets the drive,and decrements the retry count.
 11041                                  ; on entry - ds:di - points to bds for the drive
 11042                                  ;	     bp    - contains retry count
 11043                                  ; on exit    flags indicate result of decrementing retry count
 11044                                  
 11045                                  again:	
 11046 00000CA7 E87004                  		call	ResetDisk
 11047 00000CAA 80FC06                  		cmp	ah, 6
 11048 00000CAD 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 11049                                  					; do not decrement retry count.
 11050 00000CAF 4D                      		dec	bp		; decrement retry count
 11051 00000CB0 C3                      		retn
 11052                                  ; ---------------------------------------------------------------------------
 11053                                  
 11054                                  dont_dec_retry_count:			
 11055 00000CB1 08E4                    		or	ah, ah
 11056 00000CB3 C3                      		retn
 11057                                  
 11058                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 11059                                  
 11060                                  ;----------------------------------------------------------------------------
 11061                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 11062                                  ;----------------------------------------------------------------------------
 11063                                  ; 11/03/2019 - Retro DOS v4.0
 11064                                  
 11065                                  ; 18/03/2019
 11066                                  
 11067                                  ; ==========================================================================
 11068                                  ;
 11069                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 11070                                  ;
 11071                                  ;      This function is intended to give the user to control the
 11072                                  ;      bds table flags of unformatted_media bit.
 11073                                  ;      GetAccessFlag will show the status -
 11074                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 11075                                  ;						1 disk i/o allowed
 11076                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 11077                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 11078                                  ;						1 disallow disk i/o
 11079                                  ; ==========================================================================
 11080                                  
 11081                                  		; generic ioctl dispatch tables
 11082                                  
 11083                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 11084                                  
 11085                                  ; ---------------------------------------------------------------------------
 11086 00000CB4 00                      		db 0
 11087                                  
 11088                                  ; 09/12/2022 
 11089                                  %if 0
 11090                                  
 11091                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 11092                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 11093                                  		dw 0EE8h	; 61h	; ReadTrack
 11094                                  		dw 0E86h	; 62h	; VerifyTrack
 11095                                  		dw 0CA3h	 	; Cmd_Error_Proc
 11096                                  		dw 0CA3h		; Cmd_Error_Proc
 11097                                  		dw 0CA3h		; Cmd_Error_Proc
 11098                                  		dw 119Ah	; 66h	; GetMediaId
 11099                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 11100                                  		dw 12C1h	; 68h	; SenseMediaType
 11101                                  
 11102                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 11103                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 11104                                  		dw 0EEFh	; 41h	; WriteTrack
 11105                                  		dw 0DC1h	; 42h	; FormatTrack
 11106                                  		dw 0CA3h		; Cmd_Error_Proc
 11107                                  		dw 0CA3h		; Cmd_Error_Proc
 11108                                  		dw 0CA3h		; Cmd_Error_Proc
 11109                                  		dw 11D2h	; 46h	; SetMediaId
 11110                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 11111                                  
 11112                                  %endif
 11113                                  
 11114                                  		; 09/12/2022
 11115 00000CB5 09                      IoReadJumpTable: db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 8
 11116 00000CB6 [200D]                  		dw GetDeviceParameters	; 60h
 11117 00000CB8 [5B0F]                  		dw ReadTrack		; 61h
 11118 00000CBA [FB0E]                  		dw VerifyTrack		; 62h
 11119 00000CBC [1C0D]                  		dw Cmd_Error_Proc
 11120 00000CBE [1C0D]                  		dw Cmd_Error_Proc
 11121 00000CC0 [1C0D]                  		dw Cmd_Error_Proc
 11122 00000CC2 [FC11]                  		dw GetMediaId		; 66h
 11123 00000CC4 [C812]                  		dw GetAccessFlag	; 67h ; unpublished function
 11124 00000CC6 [1A13]                  		dw SenseMediaType	; 68h
 11125                                  
 11126 00000CC8 08                      IoWriteJumpTable: db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 7
 11127 00000CC9 [6B0D]                  		dw SetDeviceParameters	; 40h
 11128 00000CCB [620F]                  		dw WriteTrack		; 41h
 11129 00000CCD [360E]                  		dw FormatTrack		; 42h
 11130 00000CCF [1C0D]                  		dw Cmd_Error_Proc
 11131 00000CD1 [1C0D]                  		dw Cmd_Error_Proc
 11132 00000CD3 [1C0D]                  		dw Cmd_Error_Proc
 11133 00000CD5 [3212]                  		dw SetMediaId		; 46h
 11134 00000CD7 [DE12]                  		dw SetAccessFlag	; 47h ; unpublished function
 11135                                  
 11136                                  ; ==========================================================================
 11137                                  ; IOC_DC_Table
 11138                                  ;
 11139                                  ; This table contains all of the valid generic IOCtl Minor codes for
 11140                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 11141                                  ; Added for 5.00
 11142                                  ; ==========================================================================
 11143                                  
 11144 00000CD9 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 11145 00000CDA 40                      		db 40h			; SET_DEVICE_PARAMETERS
 11146 00000CDB 61                      		db 61h			; READ_TRACK
 11147 00000CDC 41                      		db 41h			; WRITE_TRACK
 11148 00000CDD 62                      		db 62h			; VERIFY_TRACK
 11149 00000CDE 42                      		db 42h			; FORMAT_TRACK
 11150 00000CDF 66                      		db 66h			; GET_MEDIA_ID
 11151 00000CE0 46                      		db 46h			; SET_MEDIA_ID
 11152 00000CE1 67                      		db 67h			; GET_ACCESS_FLAG
 11153 00000CE2 47                      		db 47h			; SET_ACCESS_FLAG
 11154 00000CE3 68                      		db 68h			; SENSE_MEDIA_TYPE
 11155                                  
 11156                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 11157                                  
 11158                                  ; ---------------------------------------------------------------------------
 11159                                  
 11160                                  ; 16/10/2022
 11161                                  
 11162                                  ; ==========================================================================
 11163                                  ; Do_Generic_IOCtl: perform generic ioctl request
 11164                                  ;
 11165                                  ;    input: AL contains logical drive
 11166                                  ;
 11167                                  ;	functions are dispatched through a call. On return, carry indicates
 11168                                  ;	error code in al. Note::bES:b& ds undefined on return from
 11169                                  ;	subfunctions.
 11170                                  ;
 11171                                  ; ==========================================================================
 11172                                  
 11173                                  ; 11/03/2019
 11174                                  		; 19/10/2022
 11175                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 11176 00000CE4 E889F8                  		call	SetDrive	; ES:DI	Points to bds for drive
 11177 00000CE7 06                      		push	es
 11178 00000CE8 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 11179 00000CEC 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 11180                                  					; RAWIO
 11181 00000CF1 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 11182 00000CF5 07                      		pop	es
 11183 00000CF6 7525                    		jnz	short IoctlFuncErr
 11184                                  
 11185                                  		; cas note: Could do the above two blocks in reverse order.
 11186                                  		; Would have to preserve al for SetDrive
 11187                                  
 11188                                  		; 10/12/2022
 11189 00000CF8 BE[B50C]                		mov	si, IoReadJumpTable
 11190                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 11191                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 11192 00000CFB A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 11193 00000CFD 7503                    		jnz	short NotGenericWrite ; function is a read.
 11194                                  		; 10/12/2022
 11195 00000CFF BE[C80C]                		mov	si, IoWriteJumpTable
 11196                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 11197                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 11198                                  NotGenericWrite:			
 11199 00000D02 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 11200 00000D04 2C40                    		sub	al, 40h		; offset for base function
 11201 00000D06 2E3A04                  		cmp	al, [cs:si]
 11202 00000D09 7712                    		ja	short IoctlFuncErr
 11203 00000D0B 98                      		cbw
 11204 00000D0C D1E0                    		shl	ax, 1
 11205 00000D0E 46                      		inc	si
 11206 00000D0F 01C6                    		add	si, ax
 11207 00000D11 2EFF14                  		call	near [cs:si]
 11208                                  		;call	word ptr cs:[si]
 11209 00000D14 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11210                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11211                                  					; 2C7h:30h = 70h:25A0h
 11212 00000D19 B481                    		mov	ah, 81h		; Return this status in	case of	carry
 11213 00000D1B C3                      		retn			; Pass carry flag through to exit code
 11214                                  ; ---------------------------------------------------------------------------
 11215                                  
 11216                                  		; Cmd_Error_Proc is called as a procedure and also use
 11217                                  		; as a fall through from above
 11218                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 11219 00000D1C 5A                      		pop	dx
 11220                                  
 11221                                  IoctlFuncErr:				
 11222 00000D1D E9B9F3                  		jmp	bc_cmderr
 11223                                  ; ---------------------------------------------------------------------------
 11224                                  
 11225                                  ; 16/10/2022
 11226                                  
 11227                                  ; ==========================================================================
 11228                                  ;**	GetDeviceParameters:
 11229                                  ;
 11230                                  ;	GetDeviceParameters implements the generic ioctl function:
 11231                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 11232                                  ;
 11233                                  ;	ENTRY	(ES:di) = BDS for drive
 11234                                  ;		PtrSav = long pointer to request header
 11235                                  ;	EXIT	??? BUGBUG
 11236                                  ;	USES	??? BUGBUG
 11237                                  ; ==========================================================================
 11238                                  
 11239                                  		; 19/10/2022
 11240                                  GetDeviceParameters:
 11241                                  		; Copy info from bds to the device parameters packet
 11242                                  
 11243 00000D20 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 11244 00000D24 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11245                                  					; (DS:BX) = return buffer
 11246 00000D27 268A4522                		mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 11247 00000D2B 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 11248 00000D2E 268B4523                		mov	ax, [es:di+35]	; [es:di+BDS.flags]
 11249 00000D32 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 11250                                  					; Mask off other bits
 11251 00000D35 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 11252 00000D38 268B4525                		mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 11253 00000D3C 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 11254 00000D3F 30C0                    		xor	al, al		; Set media type to default
 11255 00000D41 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 11256                                  					
 11257                                  		; copy recommended bpb
 11258 00000D44 8D7527                  		lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 11259 00000D47 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11260                                  					; BUILD_DEVICE_BPB
 11261 00000D4A 7412                    		jz	short UseBpbPresent
 11262 00000D4C 1E                      		push	ds		; Save request packet segment
 11263 00000D4D 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11264                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11265                                  					; 2C7h:30h = 70h:25A0h
 11266                                  					; Point back to Bios_Data
 11267 00000D52 E885FB                  		call	checksingle
 11268 00000D55 E83EF9                  		call	GetBp		; Build	the bpb	from scratch
 11269 00000D58 1F                      		pop	ds		; Restore request packet segment
 11270 00000D59 720F                    		jb	short GetParmRet
 11271 00000D5B 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 11272                                  					; Use this subfield of bds instead
 11273                                  UseBpbPresent:				
 11274 00000D5E 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 11275                                  					; This is where	the result goes
 11276 00000D61 B91900                  		mov	cx, 25		; A_BPB.size - 6
 11277                                  					; For now use 'small' bpb
 11278 00000D64 1E                      		push	ds		; reverse segments for copy
 11279 00000D65 06                      		push	es
 11280 00000D66 1F                      		pop	ds
 11281 00000D67 07                      		pop	es
 11282 00000D68 F3A4                    		rep movsb
 11283                                  		
 11284                                  		; 12/12/2022
 11285                                  		; cf=0 (test instruction -above- resets cf) 	
 11286                                  		;clc
 11287                                  GetParmRet:				
 11288 00000D6A C3                      		retn
 11289                                  ; ---------------------------------------------------------------------------
 11290                                  
 11291                                  ; 17/10/2022
 11292                                  ; 16/10/2022
 11293                                  
 11294                                  ; ==========================================================================
 11295                                  ; SetDeviceParameters:
 11296                                  ;
 11297                                  ; input: ES:di points to bds for drive
 11298                                  ; ==========================================================================
 11299                                  
 11300                                  		; 19/10/2022
 11301                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 11302 00000D6B C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 11303 00000D6F C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11304 00000D72 26814D234001            		or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 11305                                  					; fchanged_by_format|fchanged
 11306 00000D78 F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11307                                  					; ONLY_SET_TRACKLAYOUT
 11308 00000D7B 7579                    		jnz	short setTrackTable
 11309 00000D7D 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 11310 00000D80 26884522                		mov	[es:di+34], al	; [es:di+BDS.formfactor]
 11311 00000D84 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 11312 00000D87 26894525                		mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 11313 00000D8B 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 11314 00000D8E 1E                      		push	ds
 11315                                  		; 17/10/2022
 11316 00000D8F 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11317                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11318                                  					; 2C7h:30h = 70h:25A0h
 11319                                  		;cmp	byte [fhave96], 0
 11320 00000D94 803E[7700]00            		cmp	byte [fhave96], 0
 11321 00000D99 1F                      		pop	ds
 11322 00000D9A 7502                    		jnz	short HaveChange ; we have changeline support
 11323                                  		; 10/12/2022
 11324 00000D9C 24FD                    		and	al, 0FDh
 11325                                  		;and	ax, 0FFFDh	; ~fchangeline
 11326                                  
 11327                                  		; Ignore all bits except non_removable and changeline
 11328                                  HaveChange:				
 11329 00000D9E 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 11330 00000DA1 268B4D23                		mov	cx, [es:di+35]	; [es:di+BDS.flags]
 11331 00000DA5 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 11332 00000DA9 09C8                    		or	ax, cx
 11333 00000DAB 26894523                		mov	[es:di+35], ax	; [es:di+BDS.flags]
 11334 00000DAF 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 11335                                  					; Set media type
 11336 00000DB2 1E                      		push	ds
 11337 00000DB3 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11338                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11339 00000DB8 A2[2F06]                		mov	[mediatype], al
 11340                                  		;mov	ds:mediatype, al
 11341 00000DBB 1F                      		pop	ds
 11342                                  
 11343                                  		; The media changed (maybe) so we will have to do a set dasd
 11344                                  		; the next time we format a track
 11345                                  
 11346                                  		; 10/12/2022
 11347 00000DBC 26804D2380              		or	byte [es:di+35], 80h
 11348                                  		;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 11349                                  					; set_dasd_true
 11350 00000DC1 57                      		push	di		; Save bds pointer
 11351                                  
 11352                                  		; Figure out what we are supposed to do with the bpb
 11353                                  		; were we asked to install a fake bpb?
 11354                                  
 11355 00000DC2 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11356                                  					; INSTALL_FAKE_BPB
 11357 00000DC5 7514                    		jnz	short InstallFakeBpb
 11358                                  
 11359                                  		; were we returning a fake bpb when asked to build a bpb?
 11360                                  
 11361                                  		; 10/12/2022
 11362 00000DC7 26F6452304              		test	byte [es:di+35], 4
 11363                                  		;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 11364                                  					; return_fake_bpb
 11365 00000DCC 7405                    		jz	short InstallRecommendedBpb
 11366                                  
 11367                                  		; we were returning a fake bpb but we can stop now
 11368                                  
 11369                                  		; 10/12/2022
 11370 00000DCE 26806523FB              		and	byte [es:di+35], 0FBh
 11371                                  		;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 11372                                  					; ~return_fake_bpb
 11373                                  InstallRecommendedBpb:			
 11374 00000DD3 B91F00                  		mov	cx, 31		; A_BPB.size
 11375 00000DD6 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 11376 00000DD9 EB0B                    		jmp	short CopyTheBpb
 11377                                  ; ---------------------------------------------------------------------------
 11378                                  
 11379                                  InstallFakeBpb:
 11380                                  		; 10/12/2022
 11381 00000DDB 26804D2304              		or	byte [es:di+35], 4				
 11382                                  		;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 11383                                  					; return_fake_bpb
 11384 00000DE0 B91900                  		mov	cx, 25		; A_BPB.size - 6
 11385                                  					; move 'smaller' bpb
 11386 00000DE3 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 11387                                  
 11388                                  CopyTheBpb:				
 11389 00000DE6 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 11390 00000DE9 F3A4                    		rep movsb
 11391 00000DEB 1E                      		push	ds		; Save packet segment
 11392                                  		; 17/10/2022
 11393 00000DEC 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11394                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11395                                  					; Setup	for ds -> Bios_Data
 11396 00000DF1 E8DA03                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 11397 00000DF4 1F                      		pop	ds		; Restore packet segment
 11398 00000DF5 5F                      		pop	di		; Restore bds pointer
 11399                                  setTrackTable:				
 11400 00000DF6 8B4F26                  		mov	cx, [bx+38]
 11401 00000DF9 1E                      		push	ds
 11402 00000DFA 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11403 00000DFF 890E[3105]              		mov	[sectorspertrack], cx
 11404 00000E03 1F                      		pop	ds
 11405                                  		; 10/12/2022
 11406 00000E04 26806523F7              		and	byte [es:di+35], 0F7h
 11407                                  		;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 11408                                  					; ~good_tracklayout
 11409 00000E09 F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11410                                  					; TRACKLAYOUT_IS_GOOD
 11411 00000E0C 7405                    		jz	short UglyTrackLayOut
 11412                                  		; 10/12/2022
 11413 00000E0E 26804D2308              		or	byte [es:di+35], 8
 11414                                  		;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 11415                                  					; good_tracklayout
 11416                                  UglyTrackLayOut:			
 11417 00000E13 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 11418 00000E16 771A                    		ja	short TooManyPerTrack
 11419                                  		;jcxz	short SectorInfoSaved
 11420 00000E18 E316                    		jcxz	SectorInfoSaved	; 19/10/2022
 11421 00000E1A BF[3305]                		mov	di, tracktable
 11422 00000E1D 8D7728                  		lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 11423                                  		; 17/10/2022
 11424 00000E20 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 11425                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11426                                  					; Trash	our bds	pointer
 11427                                  StoreSectorInfo:			
 11428 00000E25 47                      		inc	di
 11429 00000E26 47                      		inc	di		; Skip over cylinder and head
 11430 00000E27 AD                      		lodsw			; Get sector id
 11431 00000E28 AA                      		stosb			; Copy it
 11432 00000E29 AD                      		lodsw			; Get sector size
 11433 00000E2A E8E301                  		call	SectSizeToSectIndex
 11434 00000E2D AA                      		stosb			; Store	sector SIZE index
 11435 00000E2E E2F5                    		loop	StoreSectorInfo
 11436                                  SectorInfoSaved:			
 11437 00000E30 F8                      		clc
 11438 00000E31 C3                      		retn
 11439                                  ; ---------------------------------------------------------------------------
 11440                                  
 11441                                  TooManyPerTrack:			
 11442 00000E32 B00C                    		mov	al, 0Ch
 11443 00000E34 F9                      		stc
 11444 00000E35 C3                      		retn
 11445                                  ; ---------------------------------------------------------------------------
 11446                                  
 11447                                  ; 16/10/2022
 11448                                  
 11449                                  ; ==========================================================================
 11450                                  ; FormatTrack:
 11451                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 11452                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 11453                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 11454                                  ;
 11455                                  ; input: ES:di points to bds for drive
 11456                                  ;
 11457                                  ; output:
 11458                                  ;	for status call:
 11459                                  ;	specialfunction byte set to:
 11460                                  ;		0 - rom support + legal combination
 11461                                  ;		1 - no rom support
 11462                                  ;		2 - illegal combination
 11463                                  ;		3 - no media present
 11464                                  ;	carry cleared.
 11465                                  ;
 11466                                  ;	for format track:
 11467                                  ;		carry set if error
 11468                                  ;
 11469                                  ; ==========================================================================
 11470                                  
 11471                                  ; 16/03/2019
 11472                                  
 11473                                  		; 19/10/2022
 11474                                  FormatTrack:
 11475 00000E36 C51E[1200]              		lds	bx, [ptrsav]
 11476 00000E3A C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 11477 00000E3D F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11478                                  					; STATUS_FOR_FORMAT
 11479 00000E40 740E                    		jz	short DoFormatTrack
 11480 00000E42 1E                      		push	ds
 11481                                  		; 17/10/2022
 11482 00000E43 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11483                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11484 00000E48 E83902                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11485 00000E4B 1F                      		pop	ds
 11486 00000E4C 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11487 00000E4E F8                      		clc
 11488 00000E4F C3                      		retn
 11489                                  ; ---------------------------------------------------------------------------
 11490                                  
 11491                                  DoFormatTrack:				
 11492 00000E50 26807D2205              		cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 11493                                  					; DEV_HARDDISK
 11494 00000E55 7508                    		jnz	short DoFormatDiskette
 11495                                  		; 17/10/2022
 11496 00000E57 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11497                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11498                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 11499 00000E5C E99C00                  		jmp	VerifyTrack
 11500                                  ; ---------------------------------------------------------------------------
 11501                                  
 11502                                  DoFormatDiskette:			
 11503 00000E5F 8B4F01                  		mov	cx, [bx+1]
 11504 00000E62 8B5703                  		mov	dx, [bx+3]
 11505 00000E65 F60702                  		test	byte [bx], 2
 11506                                  		; 17/10/2022
 11507 00000E68 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11508                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11509                                  					; Setup	ds-> Bios_Data for verify
 11510 00000E6D 7403                    		jz	short DoFormatDiskette_1
 11511 00000E6F E9E400                  		jmp	VerifyTrack_Err
 11512                                  ; ---------------------------------------------------------------------------
 11513                                  
 11514                                  DoFormatDiskette_1:			
 11515 00000E72 E80F02                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11516 00000E75 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 11517 00000E77 7406                    		jz	short NeedToSetDasd ; Old rom
 11518 00000E79 3C03                    		cmp	al, 3		; Time out error?
 11519 00000E7B 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 11520                                  					; about	the illegal combination)
 11521 00000E7D EB67                    		jmp	short FormatFailed
 11522                                  ; ---------------------------------------------------------------------------
 11523                                  
 11524                                  NeedToSetDasd:				
 11525 00000E7F 52                      		push	dx
 11526 00000E80 E8A001                  		call	SetDasd		; INT 13h, AH=17h
 11527 00000E83 5A                      		pop	dx
 11528                                  NoSetDasd:				
 11529 00000E84 E853FA                  		call	checksingle	; Do any needed	diskette swapping
 11530 00000E87 89D0                    		mov	ax, dx		; Get track from packet
 11531 00000E89 A3[3901]                		mov	[trknum], ax
 11532 00000E8C 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 11533 00000E90 88CC                    		mov	ah, cl
 11534 00000E92 BB[3305]                		mov	bx, tracktable
 11535 00000E95 8B0E[3105]              		mov	cx, [sectorspertrack]
 11536                                  
 11537                                  StoreCylinderHead:			
 11538 00000E99 8907                    		mov	[bx], ax	; Store	into TrackTable
 11539 00000E9B 83C304                  		add	bx, 4		; Skip to next sector field
 11540 00000E9E E2F9                    		loop	StoreCylinderHead
 11541 00000EA0 B90500                  		mov	cx, 5		; MAXERR - Set up retry	count
 11542                                  FormatRetry:				
 11543 00000EA3 51                      		push	cx
 11544 00000EA4 BB[3305]                		mov	bx, tracktable
 11545 00000EA7 A0[3105]                		mov	al, [sectorspertrack]
 11546 00000EAA B405                    		mov	ah, 5		; romformat
 11547 00000EAC 8C1E[2F05]              		mov	[xfer_seg], ds
 11548 00000EB0 E87F02                  		call	ToRom
 11549 00000EB3 59                      		pop	cx
 11550 00000EB4 7216                    		jb	short FormatError
 11551 00000EB6 51                      		push	cx		; Now verify the sectors just formatted.
 11552                                  					; NOTE:	because	of bug in some BIOSes we have to
 11553                                  					;	set ES:BX to 00:00
 11554 00000EB7 53                      		push	bx
 11555 00000EB8 31DB                    		xor	bx, bx
 11556 00000EBA 891E[2F05]              		mov	[xfer_seg], bx
 11557 00000EBE A0[3105]                		mov	al, [sectorspertrack]
 11558 00000EC1 B404                    		mov	ah, 4		; romverify
 11559 00000EC3 B101                    		mov	cl, 1
 11560 00000EC5 E86A02                  		call	ToRom
 11561 00000EC8 5B                      		pop	bx
 11562 00000EC9 59                      		pop	cx
 11563 00000ECA 7329                    		jnb	short FormatOk
 11564                                  FormatError:				
 11565 00000ECC E84B02                  		call	ResetDisk
 11566 00000ECF C606[3106]01            		mov	byte [had_format_error], 1
 11567 00000ED4 50                      		push	ax
 11568 00000ED5 51                      		push	cx
 11569 00000ED6 52                      		push	dx
 11570 00000ED7 E8AA01                  		call	SetMediaForFormat
 11571 00000EDA 3C01                    		cmp	al, 1
 11572 00000EDC 7503                    		jnz	short WhileErr
 11573 00000EDE E84201                  		call	SetDasd
 11574                                  WhileErr:				
 11575 00000EE1 5A                      		pop	dx
 11576 00000EE2 59                      		pop	cx
 11577 00000EE3 58                      		pop	ax
 11578 00000EE4 E2BD                    		loop	FormatRetry
 11579                                  FormatFailed:				
 11580 00000EE6 C606[3106]01            		mov	byte [had_format_error], 1
 11581                                  					; Set the format error flag
 11582 00000EEB 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 11583 00000EEE 7502                    		jnz	short DoMapIt	; Error	to time	out error
 11584 00000EF0 B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 11585                                  DoMapIt:				
 11586 00000EF2 E97AFD                  		jmp	maperror
 11587                                  ; ---------------------------------------------------------------------------
 11588                                  
 11589                                  FormatOk:				
 11590 00000EF5 C606[3106]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 11591 00000EFA C3                      		retn
 11592                                  ; ---------------------------------------------------------------------------
 11593                                  
 11594                                  ; 16/10/2022
 11595                                  
 11596                                  ; ==========================================================================
 11597                                  ;
 11598                                  ; VerifyTrack:
 11599                                  ;
 11600                                  ; input: ES:di points to bds for drive
 11601                                  ; ==========================================================================
 11602                                  
 11603                                  VerifyTrack:				
 11604 00000EFB 1E                      		push	ds
 11605 00000EFC C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 11606 00000F00 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11607                                  
 11608                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 11609                                  
 11610 00000F03 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 11611 00000F06 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 11612 00000F09 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 11613 00000F0C 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 11614                                  					; Get option flag word
 11615 00000F0E 1F                      		pop	ds
 11616 00000F0F C606[2001]04            		mov	byte [rflag], 4	; romverify
 11617 00000F14 890E[3301]              		mov	[curtrk], cx
 11618 00000F18 A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 11619 00000F1B 8B0E[3105]              		mov	cx, [sectorspertrack]
 11620                                  
 11621                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 11622                                  		; specified if not we should go to the normal track verification
 11623                                  		; routine. If fast format has been specified we should get the
 11624                                  		; number of tracks to be verified and check it to see if it is
 11625                                  		; > 255. If it is then it is an error and we should go to
 11626                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 11627                                  		; sectors per track to get the total number of sectors to be
 11628                                  		; verified. This should also be less than equal to 255
 11629                                  		; otherwise we go to same error exit. If everything is okay
 11630                                  		; we initalise cx to the total sectors. use ax as a temporary
 11631                                  		; register.
 11632                                  
 11633                                  					; Special function requested?	
 11634 00000F1F F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 11635 00000F22 7421                    		jz	short NormVerifyTrack
 11636 00000F24 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 11637 00000F26 08E4                    		or	ah, ah
 11638 00000F28 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 11639 00000F2A F6E1                    		mul	cl
 11640 00000F2C 08E4                    		or	ah, ah
 11641 00000F2E 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 11642 00000F30 89C1                    		mov	cx, ax
 11643                                  		; 10/12/2022
 11644 00000F32 26F6452301              		test	byte [es:di+35], 1
 11645                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11646                                  					; fnon_removable
 11647 00000F37 740C                    		jz	short NormVerifyTrack
 11648                                  					; Multitrack operation = on?
 11649                                  		; 10/12/2022
 11650                                  		; 19/10/2022
 11651 00000F39 F606[2705]80            		test	byte [multrk_flag], 80h
 11652                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11653                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 11654 00000F3E 7405                    		jz	short NormVerifyTrack
 11655 00000F40 C606[2E05]01            		mov	byte [multitrk_format_flag], 1
 11656                                  NormVerifyTrack:			
 11657 00000F45 31C0                    		xor	ax, ax		; 1st sector
 11658 00000F47 31DB                    		xor	bx, bx
 11659 00000F49 891E[2F05]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 11660 00000F4D E83F00                  		call	TrackIo
 11661 00000F50 C606[2E05]00            		mov	byte [multitrk_format_flag], 0
 11662 00000F55 C3                      		retn
 11663                                  ; ---------------------------------------------------------------------------
 11664                                  
 11665                                  VerifyTrack_Err:			
 11666 00000F56 B401                    		mov	ah, 1
 11667 00000F58 E914FD                  		jmp	maperror
 11668                                  ; ---------------------------------------------------------------------------
 11669                                  
 11670                                  ; 16/10/2022
 11671                                  
 11672                                  ; ==========================================================================
 11673                                  ;
 11674                                  ; ReadTrack:
 11675                                  ;
 11676                                  ; input: ES:di points to bds for drive
 11677                                  ;
 11678                                  ; ==========================================================================
 11679                                  
 11680                                  ReadTrack:				
 11681 00000F5B C606[2001]02            		mov	byte [rflag], 2	; romread
 11682 00000F60 EB05                    		jmp	short ReadWriteTrack
 11683                                  ; ---------------------------------------------------------------------------
 11684                                  
 11685                                  WriteTrack:
 11686                                  
 11687                                  ; ==========================================================================
 11688                                  ;
 11689                                  ; WriteTrack:
 11690                                  ;
 11691                                  ; input: ES:di points to bds for drive
 11692                                  ;
 11693                                  ; ==========================================================================
 11694                                  				
 11695 00000F62 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 11696                                  
 11697                                  		; Fall into ReadWriteTrack
 11698                                  
 11699                                  ; ==========================================================================
 11700                                  ;
 11701                                  ; readWriteTrack:
 11702                                  ;
 11703                                  ; input:
 11704                                  ;    ES:di points to bds for drive
 11705                                  ;    rFlag - 2 for read,3 for write
 11706                                  ;
 11707                                  ; ==========================================================================
 11708                                  
 11709                                  ReadWriteTrack:	
 11710                                  		; save bds pointer segment so we can use it to access
 11711                                  		; our packet. Notice that this is not the standard register
 11712                                  		; assignment for accessing packets
 11713                                  		
 11714                                  		; 19/10/2022	
 11715 00000F67 06                      		push	es
 11716 00000F68 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 11717 00000F6C 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11718 00000F70 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 11719 00000F74 A3[3301]                		mov	[curtrk], ax
 11720 00000F77 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 11721 00000F7B A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 11722 00000F7E 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 11723 00000F82 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 11724 00000F86 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 11725                                  					; Get transfer address
 11726                                  
 11727                                  		; we just trashed our packet address, but we no longer care
 11728                                  
 11729 00000F8A 8C06[2F05]              		mov	[xfer_seg], es	; Pass transfer	segment
 11730 00000F8E 07                      		pop	es
 11731                                  
 11732                                  		; Fall into TrackIo
 11733                                  
 11734                                  ; =============== S U B	R O U T	I N E =======================================
 11735                                  
 11736                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11737                                  
 11738                                  ; ==========================================================================
 11739                                  ;
 11740                                  ; TrackIo:
 11741                                  ;    performs track read/write/verify
 11742                                  ;
 11743                                  ;   input:
 11744                                  ;      rFlag	- 2 = read
 11745                                  ;		  3 = write
 11746                                  ;		  4 = verify
 11747                                  ;      AX	- Index into track table of first sector to io
 11748                                  ;      CX	- Number of sectors to io
 11749                                  ;      Xfer_Seg:BX - Transfer address
 11750                                  ;      ES:DI	- Pointer to bds
 11751                                  ;      CurTrk	- Current cylinder
 11752                                  ;      CurHd	- Current head
 11753                                  ;
 11754                                  ; ==========================================================================
 11755                                  
 11756                                  ; 16/03/2019 - Retro DOS v4.0
 11757                                  		
 11758                                  		; 19/10/2022
 11759                                  TrackIo:	
 11760                                  					; Procedure `disk' will pop stack to
 11761 00000F8F 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 11762 00000F93 E844F9                  		call	checksingle	; Ensure correct disk is in drv
 11763 00000F96 803E[3006]01            		cmp	byte [media_set_for_format], 1
 11764                                  					; See if we have already set	disk
 11765 00000F9B 7407                    		jz	short Dptalreadyset ; base table
 11766 00000F9D 50                      		push	ax		; set up tables	and variables for i/o
 11767 00000F9E 51                      		push	cx
 11768 00000F9F E896FA                  		call	iosetup
 11769 00000FA2 59                      		pop	cx
 11770 00000FA3 58                      		pop	ax
 11771                                  Dptalreadyset:				; Point si at the table entry of the			
 11772 00000FA4 BE[3305]                		mov	si, tracktable	; first sector to be io'd
 11773 00000FA7 D1E0                    		shl	ax, 1
 11774 00000FA9 D1E0                    		shl	ax, 1
 11775 00000FAB 01C6                    		add	si, ax
 11776                                  
 11777                                  		; WE WANT:
 11778                                  		; CX to	be the number of times we have to loop
 11779                                  		; DX to	be the number of sectors we read on each iteration
 11780                                  		
 11781 00000FAD BA0100                  		mov	dx, 1
 11782                                  		; 12/12/2022
 11783 00000FB0 26F6452308              		test	byte [es:di+23h], 8
 11784                                  		;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 11785                                  					; good_tracklayout
 11786 00000FB5 7402                    		jz	short ionextsector
 11787                                  		
 11788 00000FB7 87D1                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 11789                                  ionextsector:				
 11790 00000FB9 51                      		push	cx
 11791 00000FBA 52                      		push	dx
 11792 00000FBB 46                      		inc	si
 11793 00000FBC 46                      		inc	si		; Skip over the	cylinder and head in
 11794                                  					; the track table
 11795 00000FBD AC                      		lodsb			; Get sector ID	from track table
 11796 00000FBE A2[3101]                		mov	[cursec], al
 11797                                  
 11798                                  		; assumptions for a fixed disk multi-track disk	i/o
 11799                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 11800                                  		;     only CL is valid.
 11801                                  		; 2). Sector size should be set	to 512 bytes.
 11802                                  		; 3). Good track layout
 11803                                  		
 11804                                  		; 12/12/2022
 11805 00000FC1 26F6452301              		test	byte [es:di+23h], 1
 11806                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11807                                  					; fnon_removable ; Fixed disk?
 11808 00000FC6 7414                    		jz	short IoRemovable ; No
 11809                                  		; 12/12/2022
 11810 00000FC8 F606[2705]80            		test	byte [multrk_flag], 80h
 11811                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11812                                  						; Allow multi-track operation?
 11813 00000FCD 740D                    		jz	short IoRemovable ; No,don't do that.
 11814 00000FCF 8916[2201]              		mov	[seccnt], dx
 11815 00000FD3 89D0                    		mov	ax, dx
 11816 00000FD5 E81DFB                  		call	Disk
 11817 00000FD8 5A                      		pop	dx
 11818 00000FD9 59                      		pop	cx
 11819 00000FDA F8                      		clc
 11820 00000FDB C3                      		retn
 11821                                  ; ---------------------------------------------------------------------------
 11822                                  
 11823                                  IoRemovable:				
 11824 00000FDC AC                      		lodsb			; Get sector size index	from track
 11825                                  					; table	and save it
 11826 00000FDD 50                      		push	ax
 11827 00000FDE 56                      		push	si
 11828 00000FDF 1E                      		push	ds		; Save Bios_Data
 11829 00000FE0 50                      		push	ax
 11830 00000FE1 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 11831                                  					; Fetch	EOT while ds-> Bios_Data
 11832 00000FE5 C536[2D01]              		lds	si, [dpt]
 11833 00000FE9 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 11834 00000FEC 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 11835 00000FEF 58                      		pop	ax
 11836 00000FF0 1F                      		pop	ds
 11837 00000FF1 88D0                    		mov	al, dl
 11838 00000FF3 A3[2201]                		mov	[seccnt], ax
 11839 00000FF6 E8FCFA                  		call	Disk
 11840 00000FF9 5E                      		pop	si		; Advance buffer pointer by adding
 11841                                  					; sector size
 11842 00000FFA 58                      		pop	ax
 11843 00000FFB E81D00                  		call	SectorSizeIndexToSectorSize
 11844 00000FFE 01C3                    		add	bx, ax
 11845 00001000 5A                      		pop	dx
 11846 00001001 59                      		pop	cx
 11847 00001002 E2B5                    		loop	ionextsector
 11848 00001004 803E[3006]01            		cmp	byte [media_set_for_format], 1
 11849                                  		;jz	short NoNeedDone
 11850                                  		; 12/12/2022
 11851 00001009 7404                    		je	short NoNeedDone2
 11852 0000100B E872FA                  		call	done		; set time of last access, and reset
 11853                                  					; entries in Dpt.
 11854                                  NoNeedDone:				
 11855 0000100E F8                      		clc
 11856                                  NoNeedDone2:
 11857 0000100F C3                      		retn
 11858                                  
 11859                                  ; =============== S U B	R O U T	I N E =======================================
 11860                                  
 11861                                  ; ---------------------------------------------------------------------------
 11862                                  ;
 11863                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 11864                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 11865                                  ; are permissible.
 11866                                  ;
 11867                                  ; On Input   AX contains sector size in bytes
 11868                                  ; On Output  AL Contains index
 11869                                  ; All other registers preserved
 11870                                  ;
 11871                                  ; ---------------------------------------------------------------------------
 11872                                  
 11873                                  SectSizeToSectIndex:	
 11874 00001010 80FC02                  		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 11875                                  					; examine upper	byte only
 11876 00001013 7703                    		ja	short OneK
 11877 00001015 88E0                    		mov	al, ah		; value	in AH is the index!
 11878 00001017 C3                      		retn
 11879                                  ; ---------------------------------------------------------------------------
 11880                                  
 11881                                  OneK:					
 11882 00001018 B003                    		mov	al, 3
 11883 0000101A C3                      		retn
 11884                                  
 11885                                  ; =============== S U B	R O U T	I N E =======================================
 11886                                  
 11887                                  
 11888                                  SectorSizeIndexToSectorSize:
 11889 0000101B 88C1                    		mov	cl, al
 11890 0000101D B88000                  		mov	ax, 128
 11891 00001020 D3E0                    		shl	ax, cl
 11892 00001022 C3                      		retn
 11893                                  
 11894                                  ; =============== S U B	R O U T	I N E =======================================
 11895                                  
 11896                                  ; 16/10/2022
 11897                                  
 11898                                  ; ---------------------------------------------------------------------------
 11899                                  ;
 11900                                  ; SetDASD
 11901                                  ;
 11902                                  ; Set up the rom for formatting.
 11903                                  ; we have to tell the rom bios what type of disk is in the drive.
 11904                                  ;
 11905                                  ; On Input   - ES:di - Points to bds
 11906                                  ;
 11907                                  ; ---------------------------------------------------------------------------
 11908                                  
 11909                                  		; 19/10/2022
 11910                                  SetDasd:	
 11911 00001023 803E[3106]01            		cmp	byte [had_format_error], 1 ;
 11912                                  					; See if we've previously set dasd type
 11913 00001028 740C                    		jz	short DoSetDasd
 11914                                  		; 10/12/2022
 11915 0000102A 26F6452380              		test	byte [es:di+23h], 80h
 11916                                  		;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 11917                                  					; set_dasd_true
 11918 0000102F 744A                    		jz	short DasdHasBeenSet
 11919                                  		; 10/12/2022
 11920 00001031 268065237F              		and	byte [es:di+23h], 7Fh
 11921                                  		;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 11922                                  					; ~set_dasd_true
 11923                                  DoSetDasd:				
 11924 00001036 C606[3106]00            		mov	byte [had_format_error], 0 ; Reset it
 11925 0000103B C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 11926 00001040 B004                    		mov	al, 4
 11927 00001042 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11928                                  					; DEV_3INCH720KB
 11929 00001047 741A                    		jz	short DoSet
 11930 00001049 26807D2201              		cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 11931                                  					; DEV_5INCH96TPI
 11932 0000104E 7404                    		jz	short GotBig
 11933 00001050 B001                    		mov	al, 1
 11934 00001052 EB0F                    		jmp	short DoSet
 11935                                  ; ---------------------------------------------------------------------------
 11936                                  
 11937                                  GotBig:					
 11938 00001054 B002                    		mov	al, 2		; 160/320k in a	1.2 meg	drive
 11939 00001056 803E[2F06]00            		cmp	byte [mediatype], 0
 11940 0000105B 7506                    		jnz	short DoSet
 11941                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 11942                                  		; 10/12/2022
 11943                                  		;inc	al  ; al = 3
 11944                                  		; 18/12/2022
 11945 0000105D 40                      		inc	ax  ; al = 3
 11946 0000105E C606[3B01]54            		mov	byte [gap_patch], 54h
 11947                                  DoSet:					
 11948 00001063 1E                      		push	ds
 11949 00001064 56                      		push	si
 11950 00001065 8E1E[1A00]              		mov	ds, [zeroseg]	; Point	to interrupt vectors
 11951                                  
 11952 00001069 C5367800                		lds	si, [DSKADR]
 11953                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 11954                                  		;;lds	si, ds:78h		
 11955                                  
 11956 0000106D C644090F                		mov	byte [si+9], 0Fh ;
 11957                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 11958 00001071 5E                      		pop	si
 11959 00001072 1F                      		pop	ds
 11960 00001073 B417                    		mov	ah, 17h
 11961 00001075 268A5504                		mov	dl, [es:di+4]
 11962 00001079 CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 11963                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 11964                                  DasdHasBeenSet:				
 11965 0000107B 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 11966 0000107F 8826[3701]              		mov	[formt_eot], ah
 11967 00001083 C3                      		retn
 11968                                  
 11969                                  ; =============== S U B	R O U T	I N E =======================================
 11970                                  
 11971                                  ; 16/10/2022
 11972                                  
 11973                                  ; ---------------------------------------------------------------------------
 11974                                  ;
 11975                                  ; Set Media Type for Format
 11976                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 11977                                  ; BPB area in the BDS can be handled by the rom.
 11978                                  ; On Input, ES:DI -> current BDS.
 11979                                  ; The status of the operation is returned in AL
 11980                                  ;
 11981                                  ;	- 0 - if the support is available,and the combination is valid.
 11982                                  ;	- 1 - no rom support
 11983                                  ;	- 2 - illegal combination
 11984                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 11985                                  ;
 11986                                  ; Flags also may be altered. All other registers preserved.
 11987                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 11988                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 11989                                  ; to the one returned. the original pointer to the disk base table is stored
 11990                                  ; in TempDpt, until it is restored.
 11991                                  ;
 11992                                  ; ---------------------------------------------------------------------------
 11993                                  
 11994                                  		; 19/10/2022
 11995                                  SetMediaForFormat:	
 11996 00001084 51                      		push	cx
 11997 00001085 52                      		push	dx
 11998                                  
 11999                                  		; If we have a format error, then do not change Dpt, TempDpt.
 12000                                  		; but we need to call int 13h, ah=18h again.
 12001                                  
 12002 00001086 803E[3106]01            		cmp	byte [had_format_error], 1
 12003 0000108B 7425                    		jz	short SkipSaveDskAdr
 12004 0000108D 30C0                    		xor	al, al		; If already done return 0
 12005 0000108F 803E[3006]01            		cmp	byte [media_set_for_format], 1
 12006 00001094 7502                    		jnz	short DoSetMediaForFormat
 12007 00001096 EB7F                    		jmp	SetMediaRet	; Media	already	set
 12008                                  ; ---------------------------------------------------------------------------
 12009                                  
 12010                                  DoSetMediaForFormat:			
 12011 00001098 06                      		push	es
 12012 00001099 56                      		push	si
 12013 0000109A 8E06[1A00]              		mov	es, [zeroseg]	; Point to interrupt vectors
 12014 0000109E 26C4367800              		les	si, [es:DSKADR]
 12015                                  		;les	si, es:78h	; [es:DSKADR]
 12016                                  					; Get pointer to disk base table
 12017 000010A3 8936[2D01]              		mov	[dpt], si
 12018 000010A7 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 12019                                  
 12020                                  		; Initialize the head settle time to 0Fh. See the offsets
 12021                                  		; given in dskprm.inc.
 12022                                  
 12023 000010AB 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 12024 000010B0 5E                      		pop	si
 12025 000010B1 07                      		pop	es
 12026                                  
 12027                                  SkipSaveDskAdr:				
 12028 000010B2 268B4D25                		mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 12029 000010B6 49                      		dec	cx
 12030 000010B7 80E503                  		and	ch, 3
 12031 000010BA D0CD                    		ror	ch, 1
 12032 000010BC D0CD                    		ror	ch, 1
 12033 000010BE 86E9                    		xchg	ch, cl
 12034 000010C0 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 12035 000010C4 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12036 000010C8 06                      		push	es
 12037 000010C9 1E                      		push	ds
 12038 000010CA 56                      		push	si
 12039 000010CB 57                      		push	di
 12040 000010CC B418                    		mov	ah, 18h
 12041 000010CE CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 12042                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 12043 000010D0 7233                    		jb	short FormaStatErr
 12044 000010D2 803E[3106]01            		cmp	byte [had_format_error], 1
 12045 000010D7 7425                    		jz	short skip_disk_base_setting
 12046 000010D9 06                      		push	es		; Save segment returned	by the rom
 12047 000010DA 8E06[1A00]              		mov	es, [zeroseg]	; Point	to interrupt vector segment
 12048 000010DE 26C4367800              		les	si, [es:DSKADR]
 12049                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 12050                                  					; Get current disk base	table
 12051 000010E3 8936[3206]              		mov	[tempdpt], si
 12052 000010E7 8C06[3406]              		mov	[tempdpt+2], es ; Save it
 12053 000010EB 8E06[1A00]              		mov	es, [zeroseg]
 12054                                  		;mov	es:78h,	di
 12055 000010EF 26893E7800              		mov	[es:DSKADR], di
 12056                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 12057 000010F4 268F067A00              		pop	word [es:DSKADR+2]
 12058 000010F9 C606[3006]01            		mov	byte [media_set_for_format], 1
 12059                                  skip_disk_base_setting:			
 12060 000010FE 30C0                    		xor	al, al		; Legal	combination + rom support code
 12061                                  		;mov	ds:had_format_error, al	; Reset	the flag
 12062 00001100 A2[3106]                		mov	[had_format_error], al
 12063 00001103 EB0E                    		jmp	short PopStatRet
 12064                                  ; ---------------------------------------------------------------------------
 12065                                  
 12066                                  FormaStatErr:
 12067                                  		; 10/12/2022
 12068 00001105 B003                    		mov	al, 3
 12069                                  				
 12070 00001107 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 12071                                  					; Illegal combination =	0Ch
 12072 0000110A 7406                    		jz	short FormatStatIllegalComb
 12073 0000110C 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 12074 0000110F 7402                    		jz	short FormatStatTimeOut
 12075                                  		; 10/12/2022
 12076                                  		;dec	al
 12077                                  		; 18/12/2022
 12078 00001111 48                      		dec	ax
 12079                                  		; al = 2
 12080                                  		;mov	al, 1		; Function not supported.
 12081                                  		;jmp	short PopStatRet
 12082                                  ; ---------------------------------------------------------------------------
 12083                                  
 12084                                  FormatStatIllegalComb:
 12085                                  		; 10/12/2022
 12086                                  		;dec	al	; 3 -> 2 or 2 -> 1
 12087                                  		; 18/12/2022
 12088 00001112 48                      		dec	ax
 12089                                  		; al = 2				
 12090                                  		;mov	al, 2		; Function supported, but
 12091                                  					; Illegal sect/trk,trk combination.
 12092                                  		; 10/12/2022
 12093                                  		;jmp	short PopStatRet
 12094                                  ; ---------------------------------------------------------------------------
 12095                                  
 12096                                  FormatStatTimeOut:			
 12097                                  		; 10/12/2022
 12098                                  		; al = 3
 12099                                  		;mov	al, 3		; Function supported, but
 12100                                  					; Media	not present.
 12101                                  PopStatRet:				
 12102 00001113 5F                      		pop	di
 12103 00001114 5E                      		pop	si
 12104 00001115 1F                      		pop	ds
 12105 00001116 07                      		pop	es
 12106                                  SetMediaRet:				
 12107 00001117 5A                      		pop	dx
 12108 00001118 59                      		pop	cx
 12109 00001119 C3                      		retn
 12110                                  
 12111                                  ; =============== S U B	R O U T	I N E =======================================
 12112                                  
 12113                                  ; 16/10/2022
 12114                                  
 12115                                  ; ---------------------------------------------------------------------------
 12116                                  ;
 12117                                  ; RESET THE DRIVE
 12118                                  ;
 12119                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 12120                                  ; slow head settle time for the next operation. this is because the reset
 12121                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 12122                                  ; time around - there is a problem with 3.5" drives in that the head does
 12123                                  ; not settle down in time,even for read operations!!
 12124                                  ;
 12125                                  ; ---------------------------------------------------------------------------
 12126                                  
 12127                                  ResetDisk:	
 12128 0000111A 50                      		push	ax
 12129 0000111B 803E[3006]01            		cmp	byte [media_set_for_format], 1
 12130                                  					; Reset while formatting?
 12131 00001120 7505                    		jnz	short ResetDisk_cont
 12132                                  					; Then verify operation in "fmt & vrfy"
 12133 00001122 C606[3106]01            		mov	byte [had_format_error], 1 ; Might have failed.
 12134                                  ResetDisk_cont:				
 12135 00001127 30E4                    		xor	ah, ah		; So signals that we had a format error
 12136 00001129 CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 12137                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 12138 0000112B C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 12139                                  					; Zap up the speed
 12140 00001130 58                      		pop	ax
 12141 00001131 C3                      		retn
 12142                                  
 12143                                  ; =============== S U B	R O U T	I N E =======================================
 12144                                  
 12145                                  ; 16/10/2022
 12146                                  
 12147                                  ; ---------------------------------------------------------------------------
 12148                                  ;
 12149                                  ; This routine sets up the drive parameter table with the values needed for
 12150                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 12151                                  ;
 12152                                  ; on entry  -	ES:DI - points to bds for the drive
 12153                                  ;		Xfer_Seg:BX - points to trkbuf
 12154                                  ;		AL    - number of sectors
 12155                                  ;		AH    - int 13 function code
 12156                                  ;		CL    - sector number for verify
 12157                                  ;		DS    - Bios_Data
 12158                                  ;
 12159                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 12160                                  ;		AX and flags are the results of the int 13
 12161                                  ;
 12162                                  ; ---------------------------------------------------------------------------
 12163                                  
 12164                                  		; 19/10/2022
 12165                                  ToRom:	
 12166 00001132 53                      		push	bx
 12167 00001133 56                      		push	si
 12168                                  
 12169                                  		; Compaq bug fix - check whether we are using new ROM
 12170                                  		; functionality to set up format, not merely if it exists.
 12171                                  		; This was formerly a check against [new_rom]
 12172                                  
 12173 00001134 F606[3006]01            		test	byte [media_set_for_format], 1
 12174 00001139 7536                    		jnz	short GotValidDpt
 12175 0000113B 50                      		push	ax
 12176 0000113C 06                      		push	es		; Save bds segment
 12177 0000113D 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 12178                                  					; ffSmall ; is it a 3.5" drive?
 12179 00001142 9C                      		pushf			; (Save	the cmp	result)
 12180 00001143 8E06[1A00]              		mov	es, [zeroseg]
 12181                                  		;les	si, es:78h	; Get pointer to disk base table
 12182 00001147 26C4367800              		les	si, [es:DSKADR]
 12183                                  		;mov	word ptr ds:dpt, si
 12184                                  		;mov	word ptr ds:dpt+2, es ;	 Save pointer to table
 12185 0000114C 8936[2D01]              		mov	[dpt], si
 12186 00001150 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 12187                                  		
 12188 00001154 A0[3701]                		mov	al, [formt_eot]
 12189 00001157 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 12190 0000115B A0[3B01]                		mov	al, [gap_patch]
 12191 0000115E 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 12192                                  					; Important for	format
 12193 00001162 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 12194                                  					; Assume we are	doing a	seek operation
 12195                                  					; Setup	motor start correctly for 3.5" drives
 12196 00001167 9D                      		popf			; Get result of	earlier	cmp
 12197 00001168 7505                    		jnz	short MotorStrtOK
 12198 0000116A 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 12199                                  MotorStrtOK:				
 12200 0000116F 07                      		pop	es		; Restore bds segment
 12201 00001170 58                      		pop	ax
 12202                                  GotValidDpt:				
 12203 00001171 8B16[3901]              		mov	dx, [trknum]	; Set track number
 12204 00001175 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 12205 00001177 268A5504                		mov	dl, [es:di+4]	; Set drive number
 12206 0000117B 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 12207 0000117F 06                      		push	es		; Save bds segment
 12208 00001180 8E06[2F05]              		mov	es, [xfer_seg]
 12209 00001184 CD13                    		int	13h		; DISK -
 12210 00001186 07                      		pop	es		; Restore bds segment
 12211 00001187 5E                      		pop	si
 12212 00001188 5B                      		pop	bx
 12213 00001189 C3                      		retn
 12214                                  
 12215                                  ; ---------------------------------------------------------------------------
 12216                                  
 12217                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12218                                  
 12219                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 12220                                  
 12221                                  ; ==========================================================================
 12222                                  ;
 12223                                  ; get the owner of the physical drive represented by the logical drive in al.
 12224                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 12225                                  ; if this is not the case, the system may hang, just following the linked list.
 12226                                  ;
 12227                                  ; ==========================================================================
 12228                                  
 12229                                  		; 19/10/2022
 12230                                  ioctl_getown:
 12231 0000118A E8E3F3                  		call	SetDrive
 12232 0000118D 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 12233                                  					; Get physical drive number
 12234 00001191 C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 12235                                  ownloop:				
 12236 00001195 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 12237 00001199 7507                    		jnz	short getnextBDS
 12238                                  		; 10/12/2022
 12239 0000119B 26F6452320              		test	byte [es:di+23h], 20h
 12240                                  		;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 12241                                  					; fi_own_physical
 12242 000011A0 7515                    		jnz	short exitown
 12243                                  getnextBDS:				
 12244 000011A2 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 12245 000011A5 EBEE                    		jmp	short ownloop
 12246                                  ; ---------------------------------------------------------------------------
 12247                                  
 12248                                  ; ==========================================================================
 12249                                  ;
 12250                                  ; set the ownership of the physical drive represented by the logical drive
 12251                                  ; in al to al.
 12252                                  ;
 12253                                  ; ==========================================================================
 12254                                  
 12255                                  		; 19/10/2022
 12256                                  ioctl_setown:
 12257 000011A7 E8C6F3                  		call	SetDrive
 12258 000011AA C606[7A00]01            		mov	byte [fsetowner], 1
 12259                                  					; set flag for CheckSingle to look at.
 12260 000011AF E828F7                  		call	checksingle
 12261 000011B2 C606[7A00]00            		mov	byte [fsetowner], 0
 12262                                  					; set ownership	of drive reset flag
 12263                                  		; Fall into ExitOwn
 12264                                  
 12265                                  ; ==========================================================================
 12266                                  ;
 12267                                  ; if there is only one logical drive assigned to this physical drive, return
 12268                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 12269                                  ;
 12270                                  ; ==========================================================================
 12271                                  
 12272                                  exitown:				
 12273 000011B7 30C9                    		xor	cl, cl
 12274                                  		; 12/12/2022
 12275 000011B9 26F6452310              		test	byte [es:di+23h], 10h
 12276                                  		;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 12277                                  					; fi_am_mult
 12278 000011BE 7406                    		jz	short exitnomult
 12279 000011C0 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 12280                                  					; Get logical drive number
 12281                                  					; Get it 1-based
 12282 000011C4 FEC1                    		inc	cl
 12283                                  exitnomult:				
 12284 000011C6 C51E[1200]              		lds	bx, [ptrsav]
 12285 000011CA 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 12286                                  					; Exit normal termination
 12287                                  		; 12/12/2022
 12288                                  		; cf=0
 12289                                  		;clc
 12290 000011CD C3                      		retn
 12291                                  
 12292                                  ; =============== S U B	R O U T	I N E =======================================
 12293                                  
 12294                                  ; 16/10/2022
 12295                                  
 12296                                  ; ---------------------------------------------------------------------------
 12297                                  ;
 12298                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 12299                                  ; only if the first byte of TempDpt is not -1.
 12300                                  ; all registers (including flags) are preserved.
 12301                                  ;
 12302                                  ; ---------------------------------------------------------------------------
 12303                                  
 12304                                  		; 19/10/2022
 12305                                  RestoreOldDpt:
 12306                                  		; if we have already restored the disk base table earlier,
 12307                                  		; do not do it again.
 12308                                  	
 12309 000011CE 50                      		push	ax
 12310 000011CF 30C0                    		xor	al, al
 12311 000011D1 A2[3106]                		mov	[had_format_error], al	; Reset flag and 
 12312 000011D4 8606[3006]              		xchg	al, [media_set_for_format] ; get current flag setting
 12313 000011D8 08C0                    		or	al, al
 12314 000011DA 741E                    		jz	short DontRestore
 12315 000011DC 56                      		push	si
 12316 000011DD 1E                      		push	ds
 12317 000011DE 06                      		push	es
 12318 000011DF C536[3206]              		lds	si, [tempdpt]
 12319                                  
 12320                                  		; 17/10/2022
 12321 000011E3 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 12322                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12323 000011E8 268E06[1A00]            		mov	es, [es:zeroseg]
 12324                                  		;mov	es, es:zeroseg	; CAS -- bleeeech!
 12325                                  
 12326                                  		;mov	es:78h,	si	; [es:DSKADR]
 12327 000011ED 2689367800              		mov	[es:DSKADR], si
 12328                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 12329 000011F2 268C1E7A00              		mov	[es:DSKADR+2], ds
 12330 000011F7 07                      		pop	es
 12331 000011F8 1F                      		pop	ds
 12332 000011F9 5E                      		pop	si
 12333                                  DontRestore:				
 12334 000011FA 58                      		pop	ax
 12335                                  		; 12/12/2022
 12336                                  		; cf=0
 12337                                  		;clc			;  Clear carry
 12338 000011FB C3                      		retn
 12339                                  
 12340                                  ; ---------------------------------------------------------------------------
 12341                                  
 12342                                  ; 16/10/2022
 12343                                  
 12344                                  ; ==========================================================================
 12345                                  ;	get media id
 12346                                  ; ==========================================================================
 12347                                  ;
 12348                                  ; FUNCTION: get the volume label,the system id and the serial number from
 12349                                  ;	    the media that has the extended boot record.
 12350                                  ;	    for the conventional media,this routine will return "unknown
 12351                                  ;	    media type" error to dos.
 12352                                  ;
 12353                                  ; INPUT :   ES:di -> bds table for this drive.
 12354                                  ;
 12355                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 12356                                  ;	    if carry set,then al contains the device driver error number
 12357                                  ;	    that will be returned to dos.
 12358                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 12359                                  ;
 12360                                  ; SUBROUTINES TO BE CALLED:
 12361                                  ;	BootIo:NEAR
 12362                                  ;
 12363                                  ; LOGIC:
 12364                                  ;	to recognize the extended boot record,this logic will actually
 12365                                  ;	access the boot sector even if it is a hard disk.
 12366                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 12367                                  ;	field of bpb and the extended boot signature.
 12368                                  ;
 12369                                  ; {
 12370                                  ;	get logical drive number from bds table;
 12371                                  ;	rFlag = read operation;
 12372                                  ;	BootIo;		 /*get the media boot record into the buffer
 12373                                  ;	if (no error) then
 12374                                  ;	     if (extended boot record) then
 12375                                  ;		{ set volume label,volume serial number and system id
 12376                                  ;		  of the request packet to those of the boot record;
 12377                                  ;		};
 12378                                  ;	     else		  /*not an extended bpb */
 12379                                  ;		{ set register al to "unknown media.." error code;
 12380                                  ;		  set carry bit;
 12381                                  ;		};
 12382                                  ;	else
 12383                                  ;	     ret;	/*already error code is set in the register al
 12384                                  ;
 12385                                  ; ==========================================================================
 12386                                  
 12387                                  ;size_of_EXT_BOOT_SERIAL equ 4
 12388                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 12389                                  ;;size_of_EXT_SYSTEM_ID equ 8
 12390                                  
 12391                                  		; 19/10/2022
 12392                                  GetMediaId:
 12393 000011FC E89F00                  		call	ChangeLineChk
 12394 000011FF 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 12395 00001203 C606[2001]02            		mov	byte [rflag], 2	; Read operation
 12396 00001208 E87B00                  		call	BootIo		; Read boot sector into	DiskSector
 12397 0000120B 7224                    		jb	short IOCtl_If1
 12398                                  					; Valid? (0F0h-0FFh?)
 12399 0000120D 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12400                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12401 00001212 721A                    		jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 12402                                  		; 10/12/2022
 12403 00001214 BE[7401]                		mov	si, disksector+26h
 12404 00001217 803C29                  		cmp	byte [si], 29h
 12405                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12406                                  					; EXT_BOOT_SIGNATURE
 12407 0000121A 7512                    		jnz	short IOCtl_If2	; not extended boot record
 12408 0000121C C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 12409 00001220 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12410                                  		; 10/12/2022
 12411 00001224 46                      		inc	si
 12412                                  		; si = disksector+27h 
 12413                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12414 00001225 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12415 00001228 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12416                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 12417                                  					; +size_of_EXT_SYSTEM_ID
 12418 0000122B F3A4                    		rep movsb		; Move from Bios_Data into request packet
 12419                                  	
 12420                                  		; 10/12/2022
 12421                                  		; cf = 0
 12422                                  		;clc
 12423                                  
 12424 0000122D C3                      		retn
 12425                                  ; ---------------------------------------------------------------------------
 12426                                  
 12427                                  IOCtl_If2:				
 12428 0000122E B007                    		mov	al, 7		; error_unknown_media
 12429 00001230 F9                      		stc
 12430                                  IOCtl_If1:				
 12431 00001231 C3                      		retn
 12432                                  ; ---------------------------------------------------------------------------
 12433                                  
 12434                                  ; 16/10/2022
 12435                                  
 12436                                  ; ==========================================================================
 12437                                  ;  set media id
 12438                                  ; ==========================================================================
 12439                                  
 12440                                  ; function: set the volume label, the system id and the serial number of
 12441                                  ;	    the media that has the extended boot record.
 12442                                  ;	    for the conventional media, this routine will return "unknown
 12443                                  ;	    media.." error to dos.
 12444                                  ;	    this routine will also set the corresponding informations in
 12445                                  ;	    the bds table.
 12446                                  ;
 12447                                  ; input :   ES:di -> bds table for this drive.
 12448                                  ;
 12449                                  ; output:   the extended boot record in the media will be set according to
 12450                                  ;	    the request packet.
 12451                                  ;	    if carry set, then al contains the device driver error number
 12452                                  ;	    that will be returned to dos.
 12453                                  ;
 12454                                  ; subroutines to be called:
 12455                                  ;	BootIo:NEAR
 12456                                  ;
 12457                                  ; logic:
 12458                                  ;
 12459                                  ; {
 12460                                  ;	get drive_number from bds;
 12461                                  ;	rFlag = "read operation";
 12462                                  ;	BootIo;
 12463                                  ;	if (no error) then
 12464                                  ;	     if (extended boot record) then
 12465                                  ;		{ set volume label,volume serial number and system id
 12466                                  ;		  of the boot record to those of the request packet;
 12467                                  ;		  rFlag = "write operation";
 12468                                  ;		  get drive number from bds;
 12469                                  ;		  BootIo;	  /*write it back*/
 12470                                  ;		};
 12471                                  ;	     else		  /*not an extended bpb */
 12472                                  ;		{ set register al to "unknown media.." error code;
 12473                                  ;		  set carry bit;
 12474                                  ;		  ret;	 /*return back to caller */
 12475                                  ;		};
 12476                                  ;	else
 12477                                  ;	     ret;		 /*already error code is set */
 12478                                  ;
 12479                                  ; ==========================================================================
 12480                                  
 12481                                  		; 19/10/2022
 12482                                  SetMediaId:
 12483 00001232 E86900                  		call	ChangeLineChk
 12484 00001235 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 12485                                  					; Logical drive	number
 12486 00001239 88C2                    		mov	dl, al
 12487 0000123B C606[2001]02            		mov	byte [rflag], 2	; romread
 12488 00001240 52                      		push	dx
 12489 00001241 E84200                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 12490 00001244 5A                      		pop	dx
 12491 00001245 723E                    		jb	short IOCtl_If6
 12492                                  					; Valid? (0F0h-0FFh?)
 12493 00001247 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12494                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12495 0000124C 7234                    		jb	short IOCtl_If7	; Brif not
 12496 0000124E 803E[7401]29            		cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12497                                  					; EXT_BOOT_SIGNATURE
 12498 00001253 752D                    		jnz	short IOCtl_If7	; not extended boot record
 12499 00001255 06                      		push	es		; Save BDS pointer
 12500 00001256 57                      		push	di
 12501 00001257 1E                      		push	ds		; Point	ES To boot record
 12502 00001258 07                      		pop	es
 12503 00001259 BF[7501]                		mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12504 0000125C C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 12505 00001260 C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 12506 00001263 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12507 00001266 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12508                                  					; +size_of_EXT_BOOT_VOL_LABEL
 12509                                  					; +size_of_EXT_SYSTEM_ID
 12510 00001269 F3A4                    		rep movsb
 12511 0000126B 06                      		push	es		; point	ds back	to Bios_Data
 12512 0000126C 1F                      		pop	ds
 12513 0000126D 5F                      		pop	di		; restore bds pointer
 12514 0000126E 07                      		pop	es
 12515 0000126F E864F5                  		call	mov_media_ids	; update the bds media id info.
 12516 00001272 88D0                    		mov	al, dl
 12517 00001274 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 12518 00001279 E80A00                  		call	BootIo		; write	it back.
 12519 0000127C C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 12520                                  					; make sure chk_media check the driver
 12521                                  					; return with error code from BootIo
 12522 00001281 C3                      		retn
 12523                                  ; ---------------------------------------------------------------------------
 12524                                  
 12525                                  IOCtl_If7:				
 12526 00001282 B007                    		mov	al, 7		; error_unknown_media
 12527 00001284 F9                      		stc
 12528                                  IOCtl_If6:				
 12529 00001285 C3                      		retn
 12530                                  
 12531                                  ; =============== S U B	R O U T	I N E =======================================
 12532                                  
 12533                                  ; 16/10/2022
 12534                                  
 12535                                  ; ---------------------------------------------------------------------------
 12536                                  ;	BootIo
 12537                                  ; ---------------------------------------------------------------------------
 12538                                  ;
 12539                                  ; function: read/write the boot record into boot sector.
 12540                                  ;
 12541                                  ; input :
 12542                                  ;	    al=logical drive number
 12543                                  ;	    rFlag = operation (read/write)
 12544                                  ;
 12545                                  ; output:   for read operation,the boot record of the drive specified in bds
 12546                                  ;	    be read into the DiskSector buffer.
 12547                                  ;	    for write operation,the DiskSector buffer image will be written
 12548                                  ;	    to the drive specified in bds.
 12549                                  ;	    if carry set,then al contains the device driver error number
 12550                                  ;	    that will be returned to dos.
 12551                                  ;	    AX,CX,DX register destroyed.
 12552                                  ;	    if carry set,then al will contain the error code from DiskIO.
 12553                                  ;
 12554                                  ; subroutines to be called:
 12555                                  ;	DiskIO:NEAR
 12556                                  ;
 12557                                  ; logic:
 12558                                  ;
 12559                                  ; {
 12560                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 12561                                  ;	sectorcount = 1;	 /*read 1 sector only */
 12562                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 12563                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 12564                                  ; }
 12565                                  ; ==========================================================================
 12566                                  
 12567                                  		; 19/10/2022
 12568                                  BootIo:	
 12569 00001286 06                      		push	es
 12570 00001287 57                      		push	di
 12571 00001288 53                      		push	bx
 12572 00001289 1E                      		push	ds
 12573 0000128A 07                      		pop	es		; Point ES: to Bios_Data
 12574                                  
 12575                                  		; Call DiskIO to read/write the boot sec. The parameters which
 12576                                  		; need to be initialized for this subroutine out here are
 12577                                  		; - Transfer address to Bios_Data:DiskSector
 12578                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 12579                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 12580                                  		; - Number of sectors <-- 1
 12581                                  
 12582 0000128B BF[4E01]                		mov	di, disksector	; es:di -> transfer address
 12583 0000128E 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 12584 00001290 8916[2305]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 12585 00001294 B90100                  		mov	cx, 1
 12586 00001297 E8CEF6                  		call	diskio
 12587 0000129A 5B                      		pop	bx
 12588 0000129B 5F                      		pop	di
 12589 0000129C 07                      		pop	es
 12590 0000129D C3                      		retn
 12591                                  
 12592                                  ; =============== S U B	R O U T	I N E =======================================
 12593                                  
 12594                                  ; 16/10/2022
 12595                                  
 12596                                  ; ---------------------------------------------------------------------------
 12597                                  ;	ChangeLineChk
 12598                                  ; ---------------------------------------------------------------------------
 12599                                  ;
 12600                                  ; when the user calls get/set media id call before dos establishes the media
 12601                                  ; by calling "media_chk",the change line activity of the drive is going to be
 12602                                  ; lost.	this routine will check the change line activity and will save the
 12603                                  ; history in the flags.
 12604                                  ;
 12605                                  ; FUNCTION: check the change line error activity
 12606                                  ;
 12607                                  ; INPUT :  ES:di -> bds table.
 12608                                  ;
 12609                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 12610                                  ;
 12611                                  ; SUBROUTINES TO BE CALLED:
 12612                                  ;	Set_Changed_DL
 12613                                  ;
 12614                                  ; ---------------------------------------------------------------------------
 12615                                  
 12616                                  ChangeLineChk:	
 12617 0000129E 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12618 000012A2 08D2                    		or	dl, dl		; Fixed	disk?
 12619 000012A4 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 12620                                  		; 12/12/2022
 12621 000012A6 26F6452304              		test	byte [es:di+23h], 4
 12622                                  		;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 12623                                  					; return_fake_bpb
 12624 000012AB 751A                    		jnz	short ChangeLnChkRet
 12625 000012AD 803E[7700]01            		cmp	byte [fhave96], 1	; This rom support change line?
 12626 000012B2 7513                    		jnz	short ChangeLnChkRet
 12627 000012B4 E80507                  		call	haschange	; This drive support change line?
 12628 000012B7 740E                    		jz	short ChangeLnChkRet ; Do nothing
 12629                                  
 12630                                  		; Execute the rom disk interrupt to check changeline activity.
 12631                                  
 12632 000012B9 B416                    		mov	ah, 16h
 12633 000012BB CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 12634                                  					; DL = drive to	check
 12635                                  					; Return: AH = disk change status
 12636 000012BD 7308                    		jnb	short ChangeLnChkRet
 12637 000012BF 53                      		push	bx
 12638 000012C0 BB4000                  		mov	bx, 40h		; fchanged
 12639                                  					; Update flag in BDS for this
 12640                                  					; physical drive
 12641 000012C3 E8CF06                  		call	set_changed_dl
 12642 000012C6 5B                      		pop	bx
 12643                                  ChangeLnChkRet:				
 12644 000012C7 C3                      		retn
 12645                                  
 12646                                  ; ---------------------------------------------------------------------------
 12647                                  
 12648                                  ; 16/10/2022
 12649                                  
 12650                                  ; ==========================================================================
 12651                                  ;	GetAccessFlag
 12652                                  ; ==========================================================================
 12653                                  ;
 12654                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 12655                                  ;
 12656                                  ; INPUT :
 12657                                  ;	    ES:di -> bds table
 12658                                  ;
 12659                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 12660                                  ;						 = 1 if disk i/o allowed.
 12661                                  ; ==========================================================================
 12662                                  
 12663                                  		; 19/10/2022
 12664                                  GetAccessFlag:				
 12665 000012C8 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 12666 000012CC C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12667                                  		;mov	al, 0		; Assume result	is unformatted
 12668                                  		; 10/12/2022
 12669 000012CF 28C0                    		sub	al, al
 12670                                  		; 10/12/2022
 12671 000012D1 26F6452402              		test	byte [es:di+36], 02h
 12672                                  		;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 12673                                  					; unformatted_media
 12674 000012D6 7502                    		jnz	short GafDone	; Done if unformatted
 12675 000012D8 FEC0                    		inc	al		; Return true for formatted
 12676                                  
 12677                                  GafDone:				
 12678 000012DA 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12679 000012DD C3                      		retn
 12680                                  ; ---------------------------------------------------------------------------
 12681                                  
 12682                                  ; 16/10/2022
 12683                                  
 12684                                  ; ==========================================================================
 12685                                  ;	SetAccessFlag
 12686                                  ; ==========================================================================
 12687                                  ;
 12688                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 12689                                  ;
 12690                                  ; input :
 12691                                  ;	    ES:di -> bds table
 12692                                  ;
 12693                                  ; output:   unformtted_media bit modified according to the user request
 12694                                  ; ==========================================================================
 12695                                  
 12696                                  		; 19/10/2022
 12697                                  SetAccessFlag:				
 12698 000012DE C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 12699 000012E2 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12700                                  		; 10/12/2022
 12701 000012E5 26806524FD              		and	byte [es:di+36], 0FDh
 12702                                  		;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 12703                                  					; ~unformatted_media
 12704 000012EA 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12705 000012EE 7505                    		jnz	short saf_Done
 12706                                  		; 10/12/2022
 12707 000012F0 26804D2402              		or	byte [es:di+36], 02h
 12708                                  		;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 12709                                  					; unformatted_media
 12710                                  saf_Done:				
 12711 000012F5 C3                      		retn
 12712                                  ; ---------------------------------------------------------------------------
 12713                                  
 12714                                  ; 16/10/2022
 12715                                  
 12716                                  ; ==========================================================================
 12717                                  ; Ioctl_Support_Query
 12718                                  ; ==========================================================================
 12719                                  ;
 12720                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 12721                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 12722                                  ; device attributes specifies if this function is supported.
 12723                                  ;
 12724                                  ; ==========================================================================
 12725                                  
 12726                                  		; 19/10/2022
 12727                                  ioctl_support_query:
 12728 000012F6 06                      		push	es
 12729 000012F7 C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 12730 000012FB 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 12731                                  					; AL ==	Major, AH == Minor
 12732 000012FF 3C08                    		cmp	al, 8		; IOC_DC
 12733                                  					; See if major code is 8
 12734 00001301 7513                    		jnz	short nosupport
 12735 00001303 0E                      		push	cs
 12736 00001304 07                      		pop	es
 12737 00001305 B90B00                  		mov	cx, 11		; IOC_DC_TABLE_LEN
 12738                                  		; 10/12/2022
 12739 00001308 BF[D90C]                		mov	di, IOC_DC_Table
 12740                                  		;mov	di, 0C60h	; IOC_DC_Table
 12741                                  					; at 2C7h:0C60h	= 70h:31D0h
 12742 0000130B 86C4                    		xchg	al, ah		; Put minor code in AL
 12743 0000130D F2AE                    		repne scasb		; Scan for minor code in AL
 12744 0000130F 7505                    		jnz	short nosupport	; it was not found
 12745 00001311 B80001                  		mov	ax, 100h
 12746                                  		; 10/12/2022
 12747                                  		; (jump to ioctlsupexit is not required)
 12748                                  		;jmp	short $+2	; ioctlsupexit
 12749                                  					; Signal ioctl is supported
 12750                                  		;;jmp	short ioctlsupexit
 12751                                  ; ---------------------------------------------------------------------------
 12752                                  ioctlsupexit:				
 12753 00001314 07                      		pop	es
 12754                                  		; 10/12/2022
 12755                                  		; cf = 0
 12756                                  		;clc
 12757 00001315 C3                      		retn
 12758                                  ; ---------------------------------------------------------------------------
 12759                                  nosupport:				
 12760 00001316 07                      		pop	es
 12761 00001317 E9BFED                  		jmp	bc_cmderr
 12762                                  ; ---------------------------------------------------------------------------
 12763                                  
 12764                                  ; 16/10/2022
 12765                                  
 12766                                  ; ==========================================================================
 12767                                  ;	GetMediaSenseStatus
 12768                                  ; ==========================================================================
 12769                                  ;
 12770                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 12771                                  ;	    diskette drive and whether the media is the default type
 12772                                  ;	    for that drive. (default type means the max size for that
 12773                                  ;	    drive)
 12774                                  ;
 12775                                  ; INPUT :   ES:DI -> BDS table
 12776                                  ; OUTPUT:   If carry clear
 12777                                  ;	    DS:BX -> Updated IOCtlPacket
 12778                                  ;
 12779                                  ;			 Special Function at offset 0:
 12780                                  ;				0	- Media detected is not default type
 12781                                  ;				1	- Media detected is default type
 12782                                  ;
 12783                                  ;			 Device Type at offset 1:
 12784                                  ;				2       - 720K 3.5" 80 tracks
 12785                                  ;				7	- 1.44M 3.5" 80 tracks
 12786                                  ;				9	- 2.88M 3.5" 80 tracks
 12787                                  ;
 12788                                  ; Error Codes returned in AX if carry set:
 12789                                  ;
 12790                                  ; 8102 - Drive not ready	- No disk is in the drive.
 12791                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 12792                                  ;				  the media is really unkown, any error
 12793                                  ;				  other than "media not present"
 12794                                  ; 
 12795                                  ; ==========================================================================
 12796                                  
 12797                                  		; 19/10/2022
 12798                                  SenseMediaType:				
 12799 0000131A C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 12800 0000131E C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12801                                  		; 10/10/2022
 12802                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 12803 00001321 31D2                    		xor	dx, dx
 12804 00001323 8917                    		mov	[bx], dx ; 0
 12805                                  		;
 12806 00001325 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12807                                  					; Get int 13h drive number from	BDS
 12808                                  		; 10/12/2022
 12809                                  		;xor	dh, dh		; DX = physical	drive number
 12810 00001329 B420                    		mov	ah, 20h		; Get Media Type function
 12811                                  					; If no	carry media type in AL
 12812 0000132B CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 12813 0000132D 7216                    		jb	short MediaSenseEr ; error code	in AH
 12814 0000132F FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 12815                                  DetermineMediaType:			
 12816 00001331 FEC8                    		dec	al
 12817 00001333 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 12818 00001335 740A                    		jz	short GotMediaType
 12819 00001337 0404                    		add	al, 4
 12820 00001339 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 12821 0000133B 7404                    		jz	short GotMediaType
 12822 0000133D 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 12823 0000133F 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 12824                                  GotMediaType:				
 12825 00001341 884701                  		mov	[bx+1],	al	; Save the return value
 12826                                  		; 10/12/2022
 12827                                  		; cf = 0
 12828                                  		;clc			; Signal success
 12829 00001344 C3                      		retn
 12830                                  ; ---------------------------------------------------------------------------
 12831                                  
 12832                                  MediaSenseEr:				
 12833 00001345 80FC32                  		cmp	ah, 32h		; See if not default media error
 12834 00001348 74E7                    		jz	short DetermineMediaType ; Not really an error
 12835 0000134A B002                    		mov	al, 2		; Now assume drive not ready
 12836 0000134C 80FC31                  		cmp	ah, 31h		; See if media was present
 12837 0000134F 7402                    		jz	short SenseErrExit ; Return drive not ready
 12838                                  UnknownMediaType:			
 12839 00001351 B007                    		mov	al, 7		; Just don't know the media type
 12840                                  SenseErrExit:				
 12841 00001353 B481                    		mov	ah, 81h		; Signal error return
 12842 00001355 F9                      		stc
 12843 00001356 C3                      		retn
 12844                                  
 12845                                  ; ---------------------------------------------------------------------------
 12846                                  		; 10/12/2022
 12847                                  		;db    0
 12848                                  ; ---------------------------------------------------------------------------
 12849                                  
 12850                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12851                                  
 12852                                  ;-----------------------------------------------------------------------------
 12853                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 12854                                  ;-----------------------------------------------------------------------------
 12855                                  ; 16/03/2019 - Retro DOS v4.0
 12856                                  
 12857                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 12858                                  ;	after booting. this allows testing and implementation of custom int_13
 12859                                  ;	handlers, without giving up ms-dos error recovery
 12860                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 12861                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 12862                                  ;	exit:	orig13	== address of new int_13 handler
 12863                                  ;		ds:dx	== old orig13 value
 12864                                  ;		es:bx	== old old13  value
 12865                                  ;
 12866                                  ; int 2f handler for external block drivers to communicate with the internal
 12867                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 12868                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 12869                                  ; dsk_entry, the entry point for all disk requests.
 12870                                  ;
 12871                                  ; on exit from this driver, we will return to the external driver
 12872                                  ; that issued this int 2f, and can then remove the flags from the stack.
 12873                                  ; this scheme allows us to have a small external device driver, and makes
 12874                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 12875                                  ; since we only need to make changes in one place (most of the time).
 12876                                  ;
 12877                                  ;   ax=800h - check for installed handler - reserved
 12878                                  ;   ax=801h - install the bds into the linked list
 12879                                  ;   ax=802h - dos request
 12880                                  ;   ax=803h - return bds table starting pointer in ds:di
 12881                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 12882                                  ;	    problem. bds table is going to be used to get head/sector
 12883                                  ;	    informations without calling generic ioctl get device parm call.)
 12884                                  
 12885                                  ;BIOSSEGMENT equ 70h
 12886                                  DOSBIOSSEG equ 0070h ; 17/10/2022	
 12887                                  
 12888                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 12889                                  
 12890                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 12891 00001357 80FC13                  		cmp	ah, 13h
 12892 0000135A 7413                    		jz	short int2f_replace_int13
 12893 0000135C 80FC08                  		cmp	ah, 8
 12894 0000135F 743B                    		jz	short mine
 12895                                  
 12896                                  ; Check for WIN386 startup and return the BIOS instance data
 12897                                  
 12898 00001361 80FC16                  		cmp	ah, 16h		; MultWin386
 12899 00001364 7479                    		jz	short win386call
 12900 00001366 80FC4A                  		cmp	ah, 4Ah		; multMULT
 12901 00001369 7503                    		jnz	short i2f_handler_iret
 12902 0000136B E9A500                  		jmp	handle_multmult
 12903                                  ; ---------------------------------------------------------------------------
 12904                                  
 12905                                  i2f_handler_iret:			
 12906 0000136E CF                      		iret
 12907                                  ; ---------------------------------------------------------------------------
 12908                                  
 12909                                  int2f_replace_int13:			
 12910 0000136F 50                      		push	ax	; free up a register for caller's ds
 12911 00001370 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 12912                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 12913                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 12914                                  					; = [02C7h:0030h] = [0070h:25A0h]
 12915 00001372 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 12916                                  		; 19/10/2022
 12917                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 12918                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 12919                                  		;push	word ptr ds:Old13	; return them to caller
 12920                                  		;push	word ptr ds:Old13+2
 12921 00001377 FF36[B400]              		push	word [Orig13]
 12922 0000137B FF36[B600]              		push	word [Orig13+2]
 12923 0000137F FF36[0601]              		push	word [Old13]
 12924 00001383 FF36[0801]              		push	word [Old13+2]
 12925                                  
 12926                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 12927                                  		;mov	word ptr ds:Orig13+2, ax
 12928                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 12929                                  		;mov	word ptr ds:Old13+2, es
 12930 00001387 8916[B400]              		mov	[Orig13], dx
 12931 0000138B A3[B600]                		mov	[Orig13+2], ax
 12932 0000138E 891E[0601]              		mov	[Old13], bx
 12933 00001392 8C06[0801]              		mov	[Old13+2], es
 12934                                  
 12935 00001396 07                      		pop	es			; es:bx := old old13 vector
 12936 00001397 5B                      		pop	bx
 12937 00001398 1F                      		pop	ds			; ds:dx := old orig13 vector
 12938 00001399 5A                      		pop	dx
 12939 0000139A 58                      		pop	ax
 12940                                  i2f_iret:				
 12941 0000139B CF                      		iret
 12942                                  ; ---------------------------------------------------------------------------
 12943                                  
 12944                                  mine:					
 12945 0000139C 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 12946 0000139E 73FB                    		jnb	short i2f_iret
 12947 000013A0 08C0                    		or	al, al			; a get installed state request?
 12948 000013A2 7504                    		jnz	short disp_func
 12949 000013A4 B0FF                    		mov	al, 0FFh
 12950 000013A6 EBF3                    		jmp	short i2f_iret
 12951                                  ; ---------------------------------------------------------------------------
 12952                                  
 12953                                  disp_func:				
 12954 000013A8 3C01                    		cmp	al, 1			; request for installing bds?
 12955 000013AA 7418                    		jz	short do_subfun_01
 12956 000013AC 3C03                    		cmp	al, 3			; get bds vector?
 12957 000013AE 7424                    		jz	short do_get_bds_vector
 12958                                  
 12959                                  ; set up pointer to request packet
 12960                                  
 12961 000013B0 1E                      		push	ds
 12962 000013B1 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022	
 12963                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12964                                  					; = [0070h:25A0h] = [02C7h:0030h]
 12965                                  		; 19/10/2022
 12966                                  		;mov	word ptr ds:ptrsav, bx
 12967                                  		;mov	word ptr ds:ptrsav+2, es
 12968 000013B6 891E[1200]              		mov	[ptrsav], bx
 12969 000013BA 8C06[1400]              		mov	[ptrsav+2], es
 12970 000013BE 1F                      		pop	ds
 12971                                  		;jmp	far ptr	i2f_dskentry
 12972                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 12973                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1708h
 12974 000013BF EA[1907]7000            		jmp	DOSBIOSSEG:dsk_entry ; BIOSDATA:dsk_entry
 12975                                  		;; 17/10/2022
 12976                                  		;;jmp	far DOSBIOSSEG:dsk_entry		
 12977                                  		;jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 12978                                  					; NOTE: jump to a FAR function, not an
 12979                                  					;  IRET type function. Callers of
 12980                                  					;  this int2f subfunction will have
 12981                                  					;  to be careful to do a popf
 12982                                  
 12983                                  ; ---------------------------------------------------------------------------
 12984                                  
 12985                                  do_subfun_01:				
 12986 000013C4 06                      		push	es
 12987 000013C5 1E                      		push	ds
 12988 000013C6 1E                      		push	ds
 12989 000013C7 07                      		pop	es
 12990                                  		; 17/10/2022
 12991 000013C8 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]	
 12992                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12993                                  					; point	ds: -> Bios_Data
 12994 000013CD E8C303                  		call	install_bds
 12995 000013D0 1F                      		pop	ds
 12996 000013D1 07                      		pop	es
 12997 000013D2 EBC7                    		jmp	short i2f_iret
 12998                                  ; ---------------------------------------------------------------------------
 12999                                  
 13000                                  do_get_bds_vector:
 13001                                  		; 17/10/2022
 13002 000013D4 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]			
 13003                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13004 000013D9 C53E[1901]              		lds	di, [start_bds]
 13005                                  		;lds	di, ds:start_bds
 13006                                  ;ii2f_iret:	; 10/12/2022				
 13007 000013DD EBBC                    		jmp	short i2f_iret
 13008                                  ; ---------------------------------------------------------------------------
 13009                                  
 13010                                  ; 17/10/2022
 13011                                  ; 16/10/2022
 13012                                  
 13013                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 13014                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 13015                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 13016                                  
 13017                                  win386call:				
 13018 000013DF 1E                      		push	ds
 13019 000013E0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13020                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13021                                  					; at 2C7h:30h =	70h:25A0h
 13022 000013E5 3C05                    		cmp	al, 5		; Win386_Init
 13023                                  					; is it	win386 initializing?
 13024 000013E7 7410                    		jz	short Win386Init
 13025 000013E9 3C06                    		cmp	al, 6		; Win386_Exit
 13026                                  					; is it	win386 exiting?
 13027 000013EB 7523                    		jnz	short win_iret	; if not, continue int2f chain
 13028                                  		; 12/12/2022
 13029 000013ED F6C201                  		test	dl, 1
 13030                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 13031 000013F0 751E                    		jnz	short win_iret	; if not win386, then continue
 13032                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 13033 000013F2 8026[6F08]00            		and	byte [IsWin386], 0 
 13034 000013F7 EB17                    		jmp	short win_iret
 13035                                  ; ---------------------------------------------------------------------------
 13036                                  
 13037                                  Win386Init:	
 13038                                  		; 12/12/2022
 13039 000013F9 F6C201                  		test	dl, 1			
 13040                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 13041 000013FC 7512                    		jnz	short win_iret	; if not win386, then continue
 13042                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 13043 000013FE 800E[6F08]01            		or	byte [IsWin386], 1
 13044                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 13045                                  		;mov	word ptr ds:SI_Next+2, es
 13046 00001403 891E[3D08]              		mov	[SI_Next], bx
 13047 00001407 8C06[3F08]              		mov	[SI_Next+2], es
 13048                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 13049 0000140B BB[3B08]                		mov	bx, Win386_SI	; 19/10/2022
 13050 0000140E 1E                      		push	ds
 13051 0000140F 07                      		pop	es
 13052                                  win_iret:				
 13053 00001410 1F                      		pop	ds
 13054                                  ii2f_iret:	; 10/12/2022	
 13055 00001411 EB88                    		jmp	short i2f_iret	; return back up the chain
 13056                                  ; ---------------------------------------------------------------------------
 13057                                  
 13058                                  handle_multmult:			
 13059 00001413 3C01                    		cmp	al, 1
 13060 00001415 7515                    		jnz	short try_2
 13061 00001417 1E                      		push	ds
 13062 00001418 E84700                  		call	HMAPtr		; get offset of free HMA
 13063                                  		; 10/12/2022
 13064                                  		;xor	bx, bx
 13065                                  		;dec	bx
 13066 0000141B BBFFFF                  		mov	bx, 0FFFFh
 13067 0000141E 8EC3                    		mov	es, bx		; seg of HMA
 13068 00001420 89FB                    		mov	bx, di
 13069 00001422 F7D3                    		not	bx
 13070 00001424 09DB                    		or	bx, bx
 13071 00001426 7401                    		jz	short try_1
 13072 00001428 43                      		inc	bx
 13073                                  try_1:					
 13074 00001429 1F                      		pop	ds
 13075 0000142A EBE5                    		jmp	short ii2f_iret
 13076                                  ; ---------------------------------------------------------------------------
 13077                                  
 13078                                  try_2:					
 13079 0000142C 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 13080 0000142E 7530                    		jnz	short try_3
 13081 00001430 1E                      		push	ds
 13082                                  		; 10/12/2022
 13083                                  		;xor	di, di
 13084                                  		;dec	di
 13085 00001431 BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 13086 00001434 8EC7                    		mov	es, di
 13087 00001436 E82900                  		call	HMAPtr		; get offset of free HMA
 13088 00001439 83FFFF                  		cmp	di, 0FFFFh
 13089 0000143C 7421                    		jz	short InsuffHMA
 13090 0000143E F7DF                    		neg	di		; free space in HMA
 13091 00001440 39FB                    		cmp	bx, di
 13092 00001442 7605                    		jbe	short try_4
 13093                                  		; 10/12/2022
 13094                                  		;sub	di, di
 13095                                  		;dec	di
 13096 00001444 BFFFFF                  		mov	di, 0FFFFh
 13097 00001447 EB16                    		jmp	short InsuffHMA
 13098                                  ; ---------------------------------------------------------------------------
 13099                                  
 13100                                  try_4:					
 13101                                  		;mov	di, ds:FreeHMAPtr
 13102 00001449 8B3E[9608]              		mov	di, [FreeHMAPtr]
 13103 0000144D 83C30F                  		add	bx, 15
 13104                                  		;and	bx, 0FFF0h
 13105                                  		; 10/12/2022
 13106 00001450 80E3F0                  		and	bl, 0F0h
 13107                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer	
 13108 00001453 011E[9608]              		add	[FreeHMAPtr], bx
 13109 00001457 7506                    		jnz	short InsuffHMA
 13110 00001459 C706[9608]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 13111                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 13112                                  					; no more HMA if we have wrapped
 13113                                  InsuffHMA:				
 13114 0000145F 1F                      		pop	ds
 13115                                  		; 10/12/2022
 13116                                  try_3:		
 13117 00001460 EBAF                    		jmp	short ii2f_iret
 13118                                  ; ---------------------------------------------------------------------------
 13119                                  
 13120                                  		; 10/12/2022
 13121                                  ;try_3:					
 13122                                  		;jmp	ii2f_iret
 13123                                  
 13124                                  ; =============== S U B	R O U T	I N E =======================================
 13125                                  
 13126                                  ; 16/10/2022
 13127                                  
 13128                                  ;--------------------------------------------------------------------------
 13129                                  ;
 13130                                  ; procedure : HMAPtr
 13131                                  ;
 13132                                  ;		Gets the offset of the free HMA area ( with respect to
 13133                                  ;							seg ffff )
 13134                                  ;		If DOS has not moved high, tries to move DOS high.
 13135                                  ;		In the course of doing this, it will allocate all the HMA
 13136                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 13137                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 13138                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 13139                                  ;
 13140                                  ;	RETURNS : offset of free HMA in DI
 13141                                  ;		  BIOS_DATA, seg in DS
 13142                                  ;
 13143                                  ;--------------------------------------------------------------------------
 13144                                  
 13145                                  		; 17/10/2022
 13146                                  HMAPtr:
 13147 00001462 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13148                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13149 00001467 8B3E[9608]              		mov	di, [FreeHMAPtr]
 13150                                  		;mov	di, ds:FreeHMAPtr
 13151 0000146B 83FFFF                  		cmp	di, 0FFFFh
 13152 0000146E 750F                    		jnz	short HMAPtr_retn
 13153 00001470 803E[9C08]00            		cmp	byte [SysinitPresent], 0
 13154                                  		;cmp	ds:SysinitPresent, 0
 13155 00001475 7408                    		jz	short HMAPtr_retn
 13156 00001477 FF1E[9808]              		call	far [MoveDOSIntoHMA]
 13157                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 13158 0000147B 8B3E[9608]              		mov	di, [FreeHMAPtr]
 13159                                  		;mov	di, ds:FreeHMAPtr
 13160                                  HMAPtr_retn:				
 13161 0000147F C3                      		retn
 13162                                  
 13163                                  ; =============== S U B	R O U T	I N E =======================================
 13164                                  
 13165                                  ; 16/10/2022
 13166                                  
 13167                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 13168                                  ; but go ahead and update direction flag, si, & di
 13169                                  
 13170                                  move_sector:
 13171                                  
 13172                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 13173                                  ; any segment to be a fault. Theoretically, this could be handled
 13174                                  ; by the fault handler and the behavior of an 8086 could be emulated
 13175                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 13176                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 13177                                  ; also handles the fault incorrectly in their ROM BIOS for real
 13178                                  ; mode. Their fault handler was only designed to deal with one
 13179                                  ; special case which occurred in a magazine benchmark, but didn't
 13180                                  ; handle the general case worth beans.
 13181                                  ;
 13182                                  ; Simply changing this code to do a byte loop would work okay but
 13183                                  ; would involve a general case performance hit. Therefore, we'll
 13184                                  ; check for either source or destination offsets being within one
 13185                                  ; sector of the end of their segments and only in that case fall
 13186                                  ; back to a byte move.
 13187                                  
 13188 00001480 FC                      		cld
 13189 00001481 51                      		push	cx
 13190 00001482 B90001                  		mov	cx, 256
 13191 00001485 81FE00FE                		cmp	si, 0FE00h
 13192 00001489 770A                    		ja	short movsec_bytes
 13193 0000148B 81FF00FE                		cmp	di, 0FE00h
 13194 0000148F 7704                    		ja	short movsec_bytes
 13195 00001491 F3A5                    		rep movsw
 13196 00001493 59                      		pop	cx
 13197 00001494 C3                      		retn
 13198                                  ; ---------------------------------------------------------------------------
 13199                                  
 13200                                  movsec_bytes:				
 13201 00001495 D1E1                    		shl	cx, 1
 13202 00001497 F3A4                    		rep movsb
 13203 00001499 59                      		pop	cx
 13204 0000149A C3                      		retn
 13205                                  
 13206                                  ; =============== S U B	R O U T	I N E =======================================
 13207                                  
 13208                                  ; 16/10/2022
 13209                                  
 13210                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 13211                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 13212                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 13213                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 13214                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 13215                                  ; but we break down a request when we get an ecc or dma error into several
 13216                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 13217                                  ; number of sectors on a track on the medium, and the request would fail.
 13218                                  ;
 13219                                  ; input conditions:
 13220                                  ;	all registers set up for an int 13 request.
 13221                                  ;
 13222                                  ; output:
 13223                                  ;	dh - contains starting head number for request
 13224                                  ;	cx - contains starting sector and cylinder numbers
 13225                                  ;	(the above may or may not have been changed, and are 0-based)
 13226                                  ;	all other registers preserved.
 13227                                  
 13228                                  check_wrap:	
 13229 0000149B 50                      		push	ax
 13230 0000149C 53                      		push	bx
 13231 0000149D 06                      		push	es
 13232 0000149E 57                      		push	di
 13233 0000149F E86E00                  		call	find_bds	; get pointer to bds for drive in dl
 13234 000014A2 7260                    		jb	short no_wrap	; finished if DOS doesn't use it
 13235                                  		; 12/12/2022
 13236 000014A4 26F6452301              		test	byte [es:di+23h], 1
 13237                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13238 000014A9 7459                    		jz	short no_wrap	; no wrapping for removable media
 13239 000014AB 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13240 000014AF 89C8                    		mov	ax, cx
 13241 000014B1 83E03F                  		and	ax, 3Fh		; extract sector number
 13242 000014B4 39D8                    		cmp	ax, bx		; are we going to wrap?
 13243 000014B6 764C                    		jbe	short no_wrap
 13244 000014B8 F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 13245                                  
 13246                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 13247                                  ; last sector on that track.
 13248                                  
 13249 000014BA 08E4                    		or	ah, ah
 13250 000014BC 7503                    		jnz	short not_on_bound
 13251                                  		; 18/12/2022
 13252 000014BE 48                      		dec	ax ; *
 13253 000014BF 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 13254                                  					; if on	boundary
 13255                                  		;dec	al ; *		; also decrement # of head wraps
 13256                                  not_on_bound:				
 13257 000014C1 80E1C0                  		and	cl, 0C0h	; zero out sector #
 13258 000014C4 08E1                    		or	cl, ah		; or in	new sector #
 13259 000014C6 30E4                    		xor	ah, ah		; ax = # of head wraps
 13260 000014C8 40                      		inc	ax
 13261 000014C9 00F0                    		add	al, dh		; add in starting head #
 13262 000014CB 80D400                  		adc	ah, 0		; catch	any carry
 13263 000014CE 263B4515                		cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 13264                                  					; are we going to wrap around a	head?
 13265 000014D2 7636                    		jbe	short no_wrap_head ; do	not lose new head number!!
 13266 000014D4 52                      		push	dx		; preserve drive number and head number
 13267 000014D5 31D2                    		xor	dx, dx
 13268 000014D7 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 13269 000014DB F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 13270                                  
 13271                                  ; careful here! if new head # is 0, then we are on the last head.
 13272                                  
 13273 000014DD 09D2                    		or	dx, dx
 13274 000014DF 7507                    		jnz	short no_head_bound
 13275 000014E1 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 13276                                  
 13277                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 13278                                  
 13279 000014E3 09C0                    		or	ax, ax
 13280 000014E5 7401                    		jz	short no_head_bound
 13281 000014E7 48                      		dec	ax		; reduce number	of cylinder wraps
 13282                                  no_head_bound:				
 13283 000014E8 88D7                    		mov	bh, dl		; bh has new head number
 13284 000014EA 5A                      		pop	dx		; restore drive number and head number
 13285 000014EB FECF                    		dec	bh		; get it 0-based
 13286 000014ED 88FE                    		mov	dh, bh		; set up new head number in dh
 13287 000014EF 88CF                    		mov	bh, cl
 13288 000014F1 80E73F                  		and	bh, 3Fh		; preserve sector number
 13289 000014F4 B306                    		mov	bl, 6
 13290 000014F6 86CB                    		xchg	cl, bl
 13291 000014F8 D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 13292 000014FA 00C5                    		add	ch, al		; add in cylinder wrap
 13293 000014FC 10E3                    		adc	bl, ah		; add in high byte
 13294 000014FE D2E3                    		shl	bl, cl		; move up to ms	end
 13295 00001500 86D9                    		xchg	bl, cl		; restore cylinder bits	into cl
 13296 00001502 08F9                    		or	cl, bh		; or in	sector number
 13297                                  no_wrap:				
 13298 00001504 F8                      		clc
 13299 00001505 5F                      		pop	di
 13300 00001506 07                      		pop	es
 13301 00001507 5B                      		pop	bx
 13302 00001508 58                      		pop	ax
 13303 00001509 C3                      		retn
 13304                                  ; ---------------------------------------------------------------------------
 13305                                  
 13306                                  no_wrap_head:				
 13307 0000150A 88C6                    		mov	dh, al		; do not lose new head number
 13308 0000150C FECE                    		dec	dh		; get it 0-based
 13309 0000150E EBF4                    		jmp	short no_wrap
 13310                                  
 13311                                  ; =============== S U B	R O U T	I N E =======================================
 13312                                  
 13313                                  ; 16/10/2022
 13314                                  
 13315                                  ; this is a special version of the bds lookup code which is
 13316                                  ; based on physical drives rather than the usual logical drives
 13317                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 13318                                  ; otherwise carry is clear
 13319                                  ;
 13320                                  ; guaranteed to trash no registers except es:di
 13321                                  
 13322                                  		; 19/10/2022
 13323                                  find_bds:	
 13324 00001510 C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 13325                                  fbds_1:					
 13326 00001514 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 13327 00001518 7409                    		jz	short fdbs_2
 13328 0000151A 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 13329                                  					; go to next bds
 13330 0000151D 83FFFF                  		cmp	di, 0FFFFh
 13331 00001520 75F2                    		jnz	short fbds_1
 13332 00001522 F9                      		stc
 13333                                  fdbs_2:					
 13334 00001523 C3                      		retn
 13335                                  
 13336                                  ; =============== S U B	R O U T	I N E =======================================
 13337                                  
 13338                                  ; 16/10/2022
 13339                                  		; 17/10/2022
 13340                                  doint:
 13341                                  		; 10/12/2022
 13342 00001524 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13343                                  					; get physical drive number
 13344                                  		; 19/10/2022 - Temporary !
 13345                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 13346                                  		
 13347 00001527 30E4                    		xor	ah, ah
 13348 00001529 08C0                    		or	al, al
 13349 0000152B 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 13350                                  		; 10/12/2022
 13351 0000152D 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13352                                  					; get request code
 13353                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 13354 00001530 FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 13355                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 13356 00001533 9D                      		popf
 13357                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 13358                                  		; 17/10/2022
 13359 00001534 9A[7207]7000            		call	DOSBIOSSEG:call_orig13
 13360                                  		;;call	call_orig13	; call far 70h:797h
 13361                                  					; call far KERNEL_SEGMENT:call_orig13
 13362 00001539 9C                      		pushf
 13363                                  		; 10/12/2022
 13364 0000153A 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 13365                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 13366                                  dointdone:				
 13367 0000153D C3                      		retn
 13368                                  
 13369                                  ;----------------------------------------------------------------------------
 13370                                  
 13371                                  ; 16/10/2022
 13372                                  
 13373                                  ; this is the true int 13 handler. we parse the request to see if there is
 13374                                  ; a dma violation. if so, depending on the function, we:
 13375                                  ;   read/write break the request into three pieces and move the middle one
 13376                                  ;	       into our internal buffer.
 13377                                  ;
 13378                                  ;   format     copy the format table into the buffer
 13379                                  ;   verify     point the transfer address into the buffer
 13380                                  ;
 13381                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 13382                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 13383                                  ; the offending sector into the buffer below and do the i/o from there.
 13384                                  
 13385                                  ;struc INT13FRAME
 13386                                  ;.oldbp: resw
 13387                                  ;.oldax: resw 
 13388                                  ;.oldbx: resw
 13389                                  ;.oldcx: resw
 13390                                  ;.olddx: resw
 13391                                  ;.oldds: resw	; now we save caller's ds, too
 13392                                  ;.olddd: resd
 13393                                  ;.oldf:	resw
 13394                                  ;end struc
 13395                                  
 13396                                  ;----------------------------------------------------------------------------
 13397                                  
 13398                                  ;   entry conditions:
 13399                                  ;	ah = function
 13400                                  ;	al = number of sectors
 13401                                  ;	es:bx = dma address
 13402                                  ;	cx = packed track and sector
 13403                                  ;	dx = head and drive
 13404                                  ;   output conditions:
 13405                                  ;	no dma violation.
 13406                                  
 13407                                  ;	use extreme caution when working with this code. In general,
 13408                                  ;	  all registers are hot at all times.
 13409                                  ;
 13410                                  ;	question:  does this code handle cases where dma errors
 13411                                  ;	  occur during ecc retries, and where ecc errors occur during
 13412                                  ;	  dma breakdowns???? Hmmmmm.
 13413                                  
 13414                                  ;----------------------------------------------------------------------------
 13415                                  
 13416                                  ; ---------------------------------------------------------------------------
 13417                                  
 13418 0000153E 90004000                dtype_array:	dd 400090h		; 40:90	is drive type array
 13419                                  
 13420                                  ; 17/10/2022
 13421                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 13422                                  ; 09/12/2022
 13423                                  DTYPEARRAY equ dtype_array
 13424                                  
 13425                                  ; ---------------------------------------------------------------------------
 13426                                  
 13427                                  ; stick some special stuff out of mainline
 13428                                  
 13429                                  ; we know we're doing a format command. if we have changeline
 13430                                  ; support, then flag some special changed stuff and set changed
 13431                                  ; by format bit for all logical drives using this physical drive
 13432                                  
 13433                                  format_special_stuff:			
 13434 00001542 803E[7700]00            		cmp	byte [fhave96], 0	; do we have changeline support?
 13435 00001547 7459                    		jz	short format_special_stuff_done ; brif not
 13436 00001549 53                      		push	bx
 13437 0000154A BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 13438 0000154D E84504                  		call	set_changed_dl	; indicate that media changed by format
 13439 00001550 5B                      		pop	bx
 13440 00001551 EB4F                    		jmp	short format_special_stuff_done
 13441                                  ; ---------------------------------------------------------------------------
 13442                                  
 13443                                  ; 16/10/2022
 13444                                  
 13445                                  ; we know we've got ec35's on the system. Now see if we're doing
 13446                                  ; a floppy. If so, create a mask and see if this particular
 13447                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 13448                                  
 13449                                  		; 19/10/2022
 13450                                  ec35_special_stuff:			
 13451 00001553 84D2                    		test	dl, dl		; floppy or hard disk?
 13452 00001555 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 13453 00001557 50                      		push	ax		; see if this PARTICULAR drive is ec35
 13454 00001558 51                      		push	cx
 13455 00001559 88D1                    		mov	cl, dl		; turn drive number into bit map
 13456 0000155B B001                    		mov	al, 1		; assume drive 0
 13457 0000155D D2E0                    		shl	al, cl		; shift	over correct number of times
 13458 0000155F 8406[2905]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 13459 00001563 59                      		pop	cx
 13460 00001564 58                      		pop	ax
 13461 00001565 7442                    		jz	short ec35_special_stuff_done
 13462                                  					; done if this floppy is not an	ec35
 13463 00001567 53                      		push	bx		; free up a far	pointer	(es:bx)
 13464 00001568 06                      		push	es
 13465                                  		; 17/10/2022
 13466 00001569 2EC41E[3E15]            		les	bx, [cs:DTYPEARRAY]
 13467                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 13468                                  					; 0070h:3A65h =	2C7h:14F5h
 13469 0000156E 00D3                    		add	bl, dl
 13470 00001570 80D700                  		adc	bh, 0		; find entry for this drive
 13471 00001573 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 13472                                  					; (360k	disk in	360k drive,
 13473                                  					; no double-stepping, 250 kbs transfer rate)
 13474 00001577 07                      		pop	es
 13475 00001578 5B                      		pop	bx
 13476 00001579 EB2E                    		jmp	short ec35_special_stuff_done
 13477                                  ; ---------------------------------------------------------------------------
 13478                                  
 13479                                  ; 16/10/2022
 13480                                  
 13481                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 13482                                  ; this function does not reset the common buses after the execution.
 13483                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 13484                                  ; will issue ah=1 (read status) call to reset the buses.
 13485                                  
 13486                                  ps2_special_stuff:			
 13487 0000157B 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 13488                                  					; read driver parm ?
 13489 00001580 7407                    		jz	short ps2_30_problem
 13490 00001582 803E[1E00]15            		cmp	byte [prevoper], 15h
 13491                                  					; apparently function 15h fails, too
 13492 00001587 752D                    		jnz	short ps2_special_stuff_done
 13493                                  ps2_30_problem:				
 13494 00001589 50                      		push	ax
 13495 0000158A B401                    		mov	ah, 1
 13496                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 13497                                  		; 17/10/2022
 13498 0000158C 9A[7207]7000            		call	DOSBIOSSEG:call_orig13
 13499                                  		;call	call_orig13	; call far 70:797h
 13500                                  					; call far KERNEL_SEGMENT:call_orig13
 13501 00001591 58                      		pop	ax
 13502 00001592 EB22                    		jmp	short ps2_special_stuff_done
 13503                                  ; ---------------------------------------------------------------------------
 13504                                  
 13505                                  ; 17/10/2022
 13506                                  ; 16/10/2022
 13507                                  
 13508                                  ; here is the actual int13 handler
 13509                                  
 13510                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 13511                                  
 13512                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 13513                                  ; vectoring up here from Bios_Data
 13514                                  
 13515                                  		; 19/10/2022
 13516 00001594 1E                      		push	ds		; save caller's ds register first thing
 13517                                  		;;mov	ds, word [cs:0030h]
 13518                                  					; and set up our own ds -> Bios_Data
 13519 00001595 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13520                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 13521                                  					; = [02C7h:0030h] = [0070h:25A0h]
 13522                                  
 13523                                  ; let the operation proceed. if there is a dma violation, then we do things
 13524                                  
 13525 0000159A A3[1E00]                		mov	[prevoper], ax	; save request
 13526 0000159D 80FC05                  		cmp	ah, 5		; romformat
 13527 000015A0 74A0                    		jz	short format_special_stuff
 13528                                  					; go do special stuff for format
 13529                                   format_special_stuff_done:		
 13530 000015A2 803E[2905]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 13531 000015A7 75AA                    		jnz	short ec35_special_stuff
 13532                                  					; go handle it out of line if so
 13533                                  ec35_special_stuff_done:
 13534                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h		
 13535 000015A9 9A[7207]7000            		call	DOSBIOSSEG:call_orig13
 13536                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13537                                  		
 13538 000015AE 9C                      		pushf			; save result flags
 13539                                  		
 13540 000015AF 803E[3606]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 13541                                  					; mdl_ps2_30
 13542 000015B4 74C5                    		jz	short ps2_special_stuff
 13543                                  					; exit mainline to address special
 13544                                  ps2_special_stuff_done:			; ps2/30 problem if so		
 13545 000015B6 9D                      		popf
 13546 000015B7 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 13547                                  ret_from_i13:				
 13548 000015B9 1F                      		pop	ds
 13549 000015BA CA0200                  		retf	2		; restore ds &	iret w/flags
 13550                                  ; ---------------------------------------------------------------------------
 13551                                  
 13552                                  ; most of our code exits through here. If carry isn't set, then
 13553                                  ; just do a simple exit. Else doublecheck that we aren't getting
 13554                                  ; a changeline error.
 13555                                  
 13556                                  i13ret_ck_chglinerr:			
 13557 000015BD 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 13558                                  i13_ret_error:				
 13559 000015BF 80FC06                  		cmp	ah, 6		; did i	see a change event?
 13560 000015C2 7513                    		jnz	short int13b	; skip if wrong	error
 13561 000015C4 08D2                    		or	dl, dl		; is this for the hard disk?
 13562 000015C6 780F                    		js	short int13b	; yes, ignore
 13563 000015C8 803E[7700]00            		cmp	byte [fhave96], 0
 13564 000015CD 7408                    		jz	short int13b	; just in case ROM returned this
 13565                                  					; error	even though it told us it
 13566                                  					; never	would
 13567 000015CF 53                      		push	bx
 13568 000015D0 BB4000                  		mov	bx, 40h		; fchanged
 13569 000015D3 E8BF03                  		call	set_changed_dl
 13570 000015D6 5B                      		pop	bx
 13571                                  int13b:					
 13572 000015D7 F9                      		stc			; now return the error
 13573 000015D8 EBDF                    		jmp	short ret_from_i13
 13574                                  ; ---------------------------------------------------------------------------
 13575                                  
 13576                                  ; some kind of error occurred. see if it is dma violation
 13577                                  
 13578                                  goterr13:				
 13579 000015DA 80FC09                  		cmp	ah, 9		; dma error?
 13580 000015DD 747C                    		jz	short gotdmaerr
 13581                                  goterr13_xxxx:				
 13582 000015DF 80FC11                  		cmp	ah, 11h		; ecc error?
 13583 000015E2 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 13584 000015E4 803E[3006]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 13585 000015E9 74D4                    		jz	short i13_ret_error
 13586                                  
 13587 000015EB 803E[1F00]02            		cmp	byte [prevoper+1], 2
 13588                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 13589                                  					; (2 = romread)
 13590                                  					; ECC correction only applies to reads
 13591 000015F0 75CD                    		jnz	short i13_ret_error
 13592                                  
 13593 000015F2 30E4                    		xor	ah, ah
 13594                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 13595                                  		; 17/10/2022
 13596 000015F4 9A[7207]7000            		call	DOSBIOSSEG:call_orig13
 13597                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13598                                  					; call far 70:797h
 13599 000015F9 A1[1E00]                		mov	ax, [prevoper]
 13600 000015FC 30E4                    		xor	ah, ah		; return code =	no error
 13601 000015FE 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 13602 00001600 74B7                    		jz	short ret_from_i13 ; return with carry clear
 13603 00001602 53                      		push	bx
 13604 00001603 51                      		push	cx
 13605 00001604 52                      		push	dx
 13606 00001605 A2[2000]                		mov	[number_of_sec], al
 13607                                  loop_ecc:				
 13608 00001608 B80102                  		mov	ax, 201h	; read one sector
 13609                                  
 13610                                  ; we do reads one sector at a time. this ensures that we will eventually
 13611                                  ; finish the request since ecc errors on one sector do read in that sector.
 13612                                  ;
 13613                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 13614                                  ; that attempt to read more sectors than are available on a particular
 13615                                  ; track.
 13616                                  ;
 13617                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 13618                                  ; this request.
 13619                                  ;
 13620                                  ; at this point, all registers are set up for the call to orig13, except
 13621                                  ; that there may be a starting sector number that is bigger than the number
 13622                                  ; of sectors on a track.
 13623                                  ;
 13624 0000160B E88DFE                  		call	check_wrap	; get correct parameters for int 13
 13625                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 13626                                  		; 17/10/2022
 13627 0000160E 9A[7207]7000            		call	DOSBIOSSEG:call_orig13
 13628                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13629 00001613 730C                    		jnb	short ok11_op
 13630 00001615 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 13631 00001618 741B                    		jz	short handle_dma_during_ecc
 13632 0000161A 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 13633 0000161D 7510                    		jnz	short ok11_exit_err
 13634                                  		; 10/12/2022
 13635                                  		; xor ax ax -> ah = 0
 13636                                  		;mov	ah, 0		; ecc error. reset the system again.
 13637 0000161F 31C0                    		xor	ax, ax		; clear	the error code so that if this
 13638                                  					; was the last sector, no error	code
 13639                                  					; will be returned for the corrected
 13640                                  					; read.	(clear carry too.)
 13641                                  ok11_op:				
 13642 00001621 FE0E[2000]              		dec	byte [number_of_sec]
 13643 00001625 7409                    		jz	short ok11_exit	; all done?
 13644 00001627 FEC1                    		inc	cl		; advance sector number
 13645                                  					; add 200h to address
 13646 00001629 FEC7                    		inc	bh
 13647 0000162B FEC7                    		inc	bh
 13648 0000162D EBD9                    		jmp	short loop_ecc
 13649                                  ; ---------------------------------------------------------------------------
 13650                                  
 13651                                  ; locate error returns centrally
 13652                                  
 13653                                  ok11_exit_err:				
 13654 0000162F F9                      		stc			; set carry bit again.
 13655                                  ok11_exit:				
 13656 00001630 5A                      		pop	dx
 13657 00001631 59                      		pop	cx
 13658 00001632 5B                      		pop	bx
 13659 00001633 EB88                    		jmp	short i13ret_ck_chglinerr
 13660                                  ; ---------------------------------------------------------------------------
 13661                                  
 13662                                  ; do the single sector read again, this time into our temporary
 13663                                  ; buffer, which is guaranteed not to have a DMA error, then
 13664                                  ; move the data to its proper location and proceed
 13665                                  
 13666                                  handle_dma_during_ecc:			
 13667 00001635 06                      		push	es
 13668 00001636 53                      		push	bx
 13669 00001637 BB[4E01]                		mov	bx, disksector
 13670 0000163A 1E                      		push	ds
 13671 0000163B 07                      		pop	es		; point es:bx to buffer
 13672 0000163C B80102                  		mov	ax, 201h	; read one sector
 13673                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 13674                                  		; 17/10/2022
 13675 0000163F 9A[7207]7000            		call	DOSBIOSSEG:call_orig13
 13676                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13677 00001644 5B                      		pop	bx
 13678 00001645 07                      		pop	es
 13679 00001646 7305                    		jnb	short handle_dma_during_ecc_noerr
 13680 00001648 80FC11                  		cmp	ah, 11h
 13681 0000164B 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 13682                                  
 13683                                  ; now we're kosher. Copy the data to where it belongs and resume
 13684                                  ; the ECC looping code.
 13685                                  
 13686                                  handle_dma_during_ecc_noerr:		
 13687 0000164D 56                      		push	si
 13688 0000164E 57                      		push	di
 13689 0000164F 89DF                    		mov	di, bx
 13690 00001651 BE[4E01]                		mov	si, disksector
 13691 00001654 E829FE                  		call	move_sector
 13692 00001657 5F                      		pop	di
 13693 00001658 5E                      		pop	si
 13694 00001659 EBC6                    		jmp	short ok11_op
 13695                                  ; ---------------------------------------------------------------------------
 13696                                  
 13697                                  ; we truly have a dma violation. restore register ax and retry the
 13698                                  ; operation as best we can.
 13699                                  
 13700                                  gotdmaerr:				
 13701 0000165B A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 13702 0000165E FB                      		sti
 13703 0000165F 80FC02                  		cmp	ah, 2		; romread
 13704 00001662 723B                    		jb	short i13_done_dmaerr
 13705                                  					; just pass dma error thru for
 13706                                  					; functions we don't handle
 13707 00001664 80FC04                  		cmp	ah, 4		; romverify
 13708 00001667 743C                    		jz	short intverify
 13709 00001669 80FC05                  		cmp	ah, 5		; romformat
 13710 0000166C 7448                    		jz	short intformat
 13711 0000166E 772F                    		ja	short i13_done_dmaerr
 13712                                  
 13713                                  ; we are doing a read/write call. check for dma problems
 13714                                  
 13715                                  ;	******** set up stack frame here!!! ********
 13716                                  
 13717 00001670 52                      		push	dx
 13718 00001671 51                      		push	cx
 13719 00001672 53                      		push	bx
 13720 00001673 50                      		push	ax
 13721 00001674 55                      		push	bp
 13722 00001675 89E5                    		mov	bp, sp
 13723 00001677 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 13724 00001679 D1E2                    		shl	dx, 1
 13725 0000167B D1E2                    		shl	dx, 1
 13726 0000167D D1E2                    		shl	dx, 1
 13727 0000167F D1E2                    		shl	dx, 1		; segment converted to absolute	address
 13728 00001681 01DA                    		add	dx, bx		; combine with offset
 13729 00001683 81C2FF01                		add	dx, 511		; simulate a transfer
 13730                                  
 13731                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 13732                                  ; we skip the first transfer and perform the remaining buffering and transfer
 13733                                  
 13734 00001687 7303                    		jnb	short no_skip_first
 13735 00001689 E98300                  		jmp	bufferx		; restore dh=head & do buffer
 13736                                  ; ---------------------------------------------------------------------------
 13737                                  
 13738                                  no_skip_first:				
 13739 0000168C D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 13740 0000168E B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 13741 00001690 28F4                    		sub	ah, dh
 13742                                  
 13743                                  ; ah is now the number of sectors that we can successfully write in this
 13744                                  ; segment. if this number is above or equal to the requested number, then we
 13745                                  ; continue the operation as normal. otherwise, we break it into pieces.
 13746                                  ;
 13747                                  ; wait a sec. this is goofy. the whole reason we got here in the
 13748                                  ; first place is because we got a dma error. so it's impossible
 13749                                  ; for the whole block to fit, unless the dma error was returned
 13750                                  ; in error.
 13751                                  
 13752 00001692 38C4                    		cmp	ah, al		; can we fit it	in?
 13753 00001694 7236                    		jb	short doblock	; no, perform blocking.
 13754                                  
 13755                                  ; yes, the request fits. let it happen.
 13756                                  
 13757 00001696 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13758                                  					; set up head number
 13759 00001699 E888FE                  		call	doint
 13760 0000169C E9D900                  		jmp	bad13		; and return from this place
 13761                                  ; ---------------------------------------------------------------------------
 13762                                  
 13763                                  i13_done_dmaerr:			
 13764 0000169F B409                    		mov	ah, 9		; pass dma error thru to caller
 13765 000016A1 F9                      		stc
 13766 000016A2 E914FF                  		jmp	ret_from_i13	; return with error,
 13767                                  					; we know it's not a changeline error
 13768                                  ; ---------------------------------------------------------------------------
 13769                                  
 13770                                  ; verify the given sectors. place the buffer pointer into our space.
 13771                                  
 13772                                  intverify:				
 13773 000016A5 06                      		push	es		; save caller's dma address
 13774 000016A6 53                      		push	bx
 13775 000016A7 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 13776 000016A8 07                      		pop	es
 13777                                  dosimple:				
 13778 000016A9 BB[4E01]                		mov	bx, disksector
 13779                                  					; do the i/o from Bios_Data:disksector
 13780                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 13781                                  		; 17/10/2022
 13782 000016AC 9A[7207]7000            		call	DOSBIOSSEG:call_orig13
 13783                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13784 000016B1 5B                      		pop	bx
 13785 000016B2 07                      		pop	es
 13786 000016B3 E907FF                  		jmp	i13ret_ck_chglinerr
 13787                                  ; ---------------------------------------------------------------------------
 13788                                  
 13789                                  ; format operation. copy the parameter table into Bios_Data:disksector
 13790                                  
 13791                                  intformat:				
 13792 000016B6 06                      		push	es
 13793 000016B7 53                      		push	bx
 13794 000016B8 56                      		push	si
 13795 000016B9 57                      		push	di
 13796 000016BA 1E                      		push	ds
 13797                                  
 13798                                  ; point ds to the caller's dma buffer, es to Bios_Data
 13799                                  ; in other words, swap (ds, es)
 13800                                  
 13801 000016BB 06                      		push	es
 13802 000016BC 1E                      		push	ds
 13803 000016BD 07                      		pop	es
 13804 000016BE 1F                      		pop	ds
 13805 000016BF 89DE                    		mov	si, bx
 13806 000016C1 BF[4E01]                		mov	di, disksector
 13807 000016C4 E8B9FD                  		call	move_sector	; user's data into Bios_Data:disksector
 13808 000016C7 1F                      		pop	ds
 13809 000016C8 5F                      		pop	di
 13810 000016C9 5E                      		pop	si		; do the i/o from
 13811 000016CA EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 13812                                  ; ---------------------------------------------------------------------------
 13813                                  
 13814                                  ; we can't fit the request into the entire block. perform the operation on
 13815                                  ; the first block.
 13816                                  ;
 13817                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 13818                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 13819                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 13820                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 13821                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 13822                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 13823                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 13824                                  ; doblock will handle the first block of requested sectors within the
 13825                                  ; boundary of this safe value.
 13826                                  
 13827                                  doblock:
 13828                                  
 13829                                  ; try to get the # of sectors/track from bds via rom drive number.
 13830                                  ; for any mini disks installed, here we have to pray that they have the
 13831                                  ; same # of sector/track as the main dos partition disk drive.
 13832                                  				
 13833 000016CC 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 13834                                  					; get head #, drive #
 13835 000016CF 51                      		push	cx
 13836 000016D0 06                      		push	es
 13837 000016D1 57                      		push	di		; ah - # of sectors before dma boundary
 13838                                  					; al - requested # of sectors for i/o.
 13839 000016D2 E83BFE                  		call	find_bds
 13840 000016D5 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13841                                  		; 12/12/2022
 13842 000016D9 26F6452301              		test	byte [es:di+23h], 1
 13843                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13844 000016DE 5F                      		pop	di
 13845 000016DF 07                      		pop	es
 13846 000016E0 88E0                    		mov	al, ah		; set al=ah for	floppies
 13847 000016E2 7404                    		jz	short doblockflop ; they are track by track operation
 13848 000016E4 B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 13849 000016E6 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 13850                                  doblockflop:				
 13851 000016E8 59                      		pop	cx
 13852                                  doblockcontinue:			
 13853 000016E9 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 13854 000016EB 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 13855 000016ED 50                      		push	ax
 13856 000016EE 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 13857 000016F0 EB03                    		jmp	short doblockdoint
 13858                                  ; ---------------------------------------------------------------------------
 13859                                  
 13860                                  doblocklast:				
 13861 000016F2 88C4                    		mov	ah, al
 13862 000016F4 50                      		push	ax
 13863                                  doblockdoint:				; let ah = al =	# of sectors for this shot	
 13864 000016F5 E82CFE                  		call	doint
 13865 000016F8 727E                    		jb	short bad13	; something happened, bye!
 13866 000016FA 58                      		pop	ax
 13867 000016FB 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 13868                                  					; decrement by the successful operation
 13869 000016FE 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 13870 00001700 00E7                    		add	bh, ah		; advance dma addres
 13871 00001702 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 13872 00001704 38C4                    		cmp	ah, al		; check	the previous value
 13873 00001706 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 13874                                  					; then we are done already.
 13875 00001708 28E0                    		sub	al, ah		; otherwise,
 13876                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 13877 0000170A E88EFD                  		call	check_wrap	; get new cx, dh for the next operation.
 13878 0000170D EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 13879                                  ; ---------------------------------------------------------------------------
 13880                                  
 13881                                  bufferx:				
 13882 0000170F 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13883                                  					; set up head number
 13884                                  buffer:					
 13885 00001712 53                      		push	bx
 13886 00001713 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13887 00001716 80FC03                  		cmp	ah, 3		; romwrite
 13888 00001719 7525                    		jnz	short doread	;
 13889                                  					
 13890                                  ; copy the offending sector into local buffer
 13891                                  
 13892 0000171B 06                      		push	es
 13893 0000171C 1E                      		push	ds
 13894 0000171D 56                      		push	si
 13895 0000171E 57                      		push	di
 13896 0000171F 1E                      		push	ds		; exchange segment registers
 13897 00001720 06                      		push	es
 13898 00001721 1F                      		pop	ds
 13899 00001722 07                      		pop	es
 13900 00001723 BF[4E01]                		mov	di, disksector	; where to move
 13901 00001726 57                      		push	di		; save it
 13902 00001727 89DE                    		mov	si, bx		; source
 13903 00001729 E854FD                  		call	move_sector	; move sector into local buffer
 13904 0000172C 5B                      		pop	bx		; new transfer address
 13905                                  					; (es:bx = Bios_Data:diskbuffer)
 13906 0000172D 5F                      		pop	di		; restore caller's di & si
 13907 0000172E 5E                      		pop	si
 13908 0000172F 1F                      		pop	ds		; restore Bios_Data
 13909                                  
 13910                                  ; see if we are wrapping around a track or head
 13911                                  
 13912 00001730 B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 13913                                  					; get drive number
 13914 00001732 8A5608                  		mov	dl, [bp+8]
 13915 00001735 E863FD                  		call	check_wrap	; sets up registers if wrap-around
 13916                                  					;
 13917                                  					; ah is	function
 13918                                  					; al is	1 for single sector transfer
 13919                                  					; es:bx	is local transfer addres
 13920                                  					; cx is	track/sector number
 13921                                  					; dx is	head/drive number
 13922                                  					; si,di	unchanged
 13923 00001738 E8E9FD                  		call	doint
 13924 0000173B 07                      		pop	es		; restore caller's dma segment
 13925 0000173C 723A                    		jb	short bad13	; go clean up
 13926 0000173E EB22                    		jmp	short dotail
 13927                                  ; ---------------------------------------------------------------------------
 13928                                  
 13929                                  ; reading a sector. do int first, then move things around
 13930                                  
 13931                                  doread:					
 13932 00001740 06                      		push	es
 13933 00001741 53                      		push	bx
 13934 00001742 1E                      		push	ds		; es = Bios_Code
 13935 00001743 07                      		pop	es
 13936 00001744 BB[4E01]                		mov	bx, disksector
 13937 00001747 B001                    		mov	al, 1
 13938 00001749 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13939                                  					; get drive number
 13940 0000174C E84CFD                  		call	check_wrap	;
 13941                                  					; ah = function
 13942                                  					; al = 1 for single sector
 13943                                  					; es:bx	points to local	buffer
 13944                                  					; cx, dx are track/sector, head/drive
 13945 0000174F E8D2FD                  		call	doint
 13946 00001752 5B                      		pop	bx
 13947 00001753 07                      		pop	es
 13948 00001754 7222                    		jb	short bad13
 13949 00001756 56                      		push	si
 13950 00001757 57                      		push	di
 13951 00001758 89DF                    		mov	di, bx
 13952 0000175A BE[4E01]                		mov	si, disksector
 13953 0000175D E820FD                  		call	move_sector
 13954 00001760 5F                      		pop	di
 13955 00001761 5E                      		pop	si
 13956                                  
 13957                                  ; note the fact that we've done 1 more sector
 13958                                  
 13959                                  dotail:					
 13960 00001762 5B                      		pop	bx		; retrieve new dma area
 13961 00001763 80C702                  		add	bh, 2		; advance over sector
 13962 00001766 41                      		inc	cx
 13963 00001767 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 13964 0000176A F8                      		clc
 13965 0000176B FEC8                    		dec	al
 13966 0000176D 7409                    		jz	short bad13	; no more i/o
 13967                                  
 13968                                  ; see if we wrap around a track or head boundary with starting sector
 13969                                  ; we already have the correct head number to pass to check_wrap
 13970                                  
 13971 0000176F 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13972 00001772 E826FD                  		call	check_wrap
 13973 00001775 E8ACFD                  		call	doint
 13974                                  
 13975                                  ; we are done. ax has the final code; we throw away what we got before
 13976                                  
 13977                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 13978                                  ;	   or we've finished. If carry is set now, our only
 13979                                  ;	   hope for salvation is that it was a read operation
 13980                                  ;	   and the error code is ECC error. In that case, we'll
 13981                                  ;	   just pop the registers and go do the old ECC thing.
 13982                                  ;	   When the DMA error that got us here in the first
 13983                                  ;	   place occurs, it'll handle it.
 13984                                  
 13985                                  bad13:					
 13986 00001778 89EC                    		mov	sp, bp
 13987 0000177A 5D                      		pop	bp
 13988 0000177B 5B                      		pop	bx
 13989 0000177C 5B                      		pop	bx
 13990 0000177D 59                      		pop	cx
 13991 0000177E 5A                      		pop	dx
 13992 0000177F 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 13993 00001781 E935FE                  		jmp	ret_from_i13	; non-error exit
 13994                                  ; ---------------------------------------------------------------------------
 13995                                  
 13996                                  xgoterr13_xxxx:				
 13997 00001784 E958FE                  		jmp	goterr13_xxxx
 13998                                  
 13999                                  ; ---------------------------------------------------------------------------
 14000                                  		; 10/12/2022
 14001                                  		;db 	0
 14002                                  ; ---------------------------------------------------------------------------
 14003                                  
 14004                                  ;Bios_Code ends
 14005                                  
 14006                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14007                                  
 14008                                  ;-----------------------------------------------------------------------------
 14009                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 14010                                  ;-----------------------------------------------------------------------------
 14011                                  ; 17/03/2019 - Retro DOS v4.0
 14012                                  
 14013                                  		; 19/10/2022
 14014                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 14015 00001787 8A26[7500]              		mov	ah, [drvmax]
 14016 0000178B BF[7F06]                		mov	di, dskdrvs
 14017 0000178E 1E                      		push	ds		; pass result in es:di
 14018 0000178F 07                      		pop	es
 14019 00001790 E9C3EE                  		jmp	SetPtrSav
 14020                                  
 14021                                  ; =============== S U B	R O U T	I N E =======================================
 14022                                  
 14023                                  ;---------------------------------------------------------------------------
 14024                                  ; install_bds installs a bds at location es:di into the current linked list of
 14025                                  ; bds maintained by this device driver. it places the bds at the end of the
 14026                                  ; list. Trashes (at least) ax, bx, di, si
 14027                                  ;---------------------------------------------------------------------------
 14028                                  
 14029                                  install_bds:		
 14030 00001793 1E                      		push	ds		; save Bios_Data segment
 14031 00001794 BE[1901]                		mov	si, start_bds	; beginning of chain
 14032                                  
 14033                                  		; ds:si now points to link to first bds
 14034                                  		; assume bds list is non-empty
 14035                                  loop_next_bds:				
 14036 00001797 C534                    		lds	si, [si]	; [si+BDS.link]
 14037                                  					; fetch	next bds
 14038 00001799 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 14039 0000179D 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 14040                                  					; drive	with new one?
 14041 000017A0 7518                    		jnz	short next_bds
 14042 000017A2 B310                    		mov	bl, 10h		; fi_am_mult
 14043 000017A4 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 14044                                  					; set both of them to i_am_mult	if so
 14045 000017A8 085C23                  		or	[si+23h], bl	; [si+BDS.flags]
 14046 000017AB 26806523DF              		and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 14047                                  					; we don't own it
 14048 000017B0 8A5C23                  		mov	bl, [si+23h]	; [si+BDS.flags]
 14049                                  					; determine if changeline available
 14050 000017B3 80E302                  		and	bl, 2		; fchangeline
 14051 000017B6 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 14052                                  next_bds:				
 14053 000017BA 833CFF                  		cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 14054                                  					; are we at end	of list?
 14055 000017BD 75D8                    		jnz	short loop_next_bds
 14056 000017BF 8C4402                  		mov	word [si+2], es ; [si+BDS.link+2],es
 14057                                  					; install bds
 14058 000017C2 893C                    		mov	[si], di
 14059 000017C4 26C705FFFF              		mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 14060                                  					; set next pointer to null
 14061 000017C9 1F                      		pop	ds
 14062                                  
 14063                                  ; 01/07/2023 - Retro DOS v4.2 (MSDOS 6.22 IO.SYS - BIOSCODE:1785h)
 14064                                  ; 16/10/2022 (MSDOS 6.0 Code)
 14065                                  
 14066                                  ; **** If the new drive has a higher EOT value, we must alter the
 14067                                  ;      'eot' variable appropriately.
 14068                                  
 14069                                  		; 01/06/2019
 14070                                  		;mov	al,[es:di+52]
 14071 000017CA 268A4534                		mov	al,[es:di+BDS.rsecpertrack]
 14072 000017CE 3A06[2C01]              		cmp	al,[eot]
 14073 000017D2 7603                    		jbe	short _eot_ok
 14074 000017D4 A2[2C01]                		mov	[eot],al
 14075                                  _eot_ok:
 14076 000017D7 C3                      		retn
 14077                                  
 14078                                  ; ---------------------------------------------------------------------------
 14079                                  
 14080                                  ; 17/10/2022
 14081                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 14082                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h	
 14083                                  ; 09/12/2022
 14084                                  DRVLET equ drvlet
 14085                                  SNGMSG equ sngmsg
 14086                                  
 14087                                  ; 16/10/2022
 14088                                  
 14089                                  ;---------------------------------------------------------------------------
 14090                                  ;  ask to swap the disk in drive a:
 14091                                  ;	es:di -> bds
 14092                                  ;	ds -> Bios_Data
 14093                                  ;---------------------------------------------------------------------------
 14094                                  
 14095                                  		; 19/10/2022
 14096 000017D8 F606[6F08]01            swpdsk:		test	byte [IsWin386], 1			
 14097                                  		;test	ds:IsWin386, 1	; Is win386 present?
 14098 000017DD 7405                    		jz	short no_win386	; no, skip SetFocus
 14099                                  		
 14100                                  		; set focus to the correct VM
 14101                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 14102                                  		; 17/10/2022
 14103 000017DF 9A[7008]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus
 14104                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 14105                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 14106                                  no_win386:				
 14107 000017E4 51                      		push	cx
 14108 000017E5 52                      		push	dx
 14109 000017E6 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 14110                                  					; get the drive	letter
 14111                                  
 14112                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 14113                                  ;           then existing dsk is drive A & vice versa
 14114                                  
 14115 000017EA 88D6                    		mov	dh, dl
 14116 000017EC 80F601                  		xor	dh, 1
 14117 000017EF 29C9                    		sub	cx, cx		; nobody has handled swap disk
 14118 000017F1 B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 14119                                  					; broad	cast code for swap disk
 14120                                  					; Broadcast it
 14121 000017F4 CD2F                    		int	2Fh	
 14122 000017F6 41                      		inc	cx		; cx == -1 ?
 14123 000017F7 741E                    		jz	short swpdsk9	; somebody has handled it
 14124                                  
 14125                                  ; using a different drive in a one drive system so request the user change disks
 14126                                  
 14127 000017F9 80C241                  		add	dl, 'A'
 14128                                  		; 17/10/2022
 14129 000017FC 2E8816[3618]            		mov	[cs:DRVLET], dl
 14130                                  		; 16/10/2022
 14131                                  		;;mov	byte [cs:drvlet], dl
 14132                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 14133                                  					; 0070h:3D54h =	2C7h:17E4h
 14134 00001801 BE[1A18]                		mov	si, SNGMSG
 14135                                  		;mov	si, 17C8h	; sngmsg
 14136                                  					; 0070h:3D38h =	2C7h:17C8h
 14137 00001804 53                      		push	bx
 14138 00001805 2E                      		cs
 14139 00001806 AC                      		lodsb			; get the next character of the message
 14140                                  		;lods	byte ptr cs:[si]
 14141                                  wrmsg_loop:				
 14142 00001807 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 14143                                  					; AL = character to display
 14144 00001809 2E                      		cs
 14145 0000180A AC                      		lodsb
 14146                                  		;lods	byte ptr cs:[si] ; cs lodsb
 14147                                  					; get the next character of the	message
 14148 0000180B 08C0                    		or	al, al
 14149 0000180D 75F8                    		jnz	short wrmsg_loop
 14150 0000180F E8F9E9                  		call	con_flush	; flush out keyboard queue
 14151                                  					; call rom-bios
 14152 00001812 30E4                    		xor	ah, ah
 14153 00001814 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 14154                                  					; Return: AH = scan code, AL = character
 14155 00001816 5B                      		pop	bx
 14156                                  swpdsk9:				
 14157 00001817 5A                      		pop	dx
 14158 00001818 59                      		pop	cx
 14159 00001819 C3                      		retn
 14160                                  
 14161                                  ; ---------------------------------------------------------------------------
 14162                                  
 14163                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14164                                  
 14165                                  ;--------------------------------------------------------
 14166                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 14167                                  ;--------------------------------------------------------
 14168                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 14169                                  ;--------------------------------------------------------
 14170                                  ; 17/03/2019 - Retro DOS v4.0
 14171                                  
 14172                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 14173 0000181A 0D0A                    sngmsg:		db 0Dh,0Ah
 14174 0000181C 496E73657274206469-     		db 'Insert diskette for drive '
 14174 00001825 736B6574746520666F-
 14174 0000182E 7220647269766520   
 14175                                  
 14176                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 14177 00001836 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 14177 0000183F 65737320616E79206B-
 14177 00001848 6579207768656E2072-
 14177 00001851 656164790D0A       
 14178 00001857 0A00                    		db 0Ah,0
 14179                                  
 14180                                  ; =============== S U B	R O U T	I N E =======================================
 14181                                  
 14182                                  ;---------------------------------------------------------------------------
 14183                                  ; input : es:di points to current bds for drive.
 14184                                  ; return : zero set if no open files
 14185                                  ;	   zero reset if open files
 14186                                  ;---------------------------------------------------------------------------
 14187                                  
 14188                                  chkopcnt:		
 14189 00001859 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 14190 0000185E C3                      		retn
 14191                                  
 14192                                  ; =============== S U B	R O U T	I N E =======================================
 14193                                  
 14194                                  ;---------------------------------------------------------------------------
 14195                                  ; at media check time, we need to really get down and check what the change is.
 14196                                  ; this is guaranteed to be expensive.
 14197                                  ;
 14198                                  ;	es:di -> bds, ds -> Bios_Data
 14199                                  ;---------------------------------------------------------------------------
 14200                                  
 14201                                  mediacheck:	
 14202 0000185F E878F0                  		call	checksingle	; make sure correct disk is in place
 14203 00001862 31F6                    		xor	si, si
 14204 00001864 E85501                  		call	haschange
 14205 00001867 742F                    		jz	short mediaret
 14206 00001869 E84401                  		call	checkromchange
 14207 0000186C 752B                    		jnz	short mediadovolid
 14208 0000186E 50                      		push	ax
 14209 0000186F 52                      		push	dx
 14210 00001870 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 14211                                  					; set logical drive number
 14212 00001874 B416                    		mov	ah, 16h
 14213 00001876 CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 14214                                  					; DL = drive to	check
 14215                                  					; Return: AH = disk change status
 14216 00001878 5A                      		pop	dx
 14217 00001879 58                      		pop	ax
 14218 0000187A 721D                    		jb	short mediadovolid
 14219 0000187C BE0100                  		mov	si, 1		; signal no change
 14220                                  
 14221                                  ; there are some drives with changeline that "lose" the changeline indication
 14222                                  ; if a different drive is accessed after the current one. in order to avoid
 14223                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 14224                                  ; is not active and we are accessing a different drive from the last one.
 14225                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 14226                                  ; status.
 14227                                  		; 19/10/2022
 14228 0000187F 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 14229 00001883 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 14230                                  					; (If the last drive accessed is not current drive
 14231                                  					; media	change status may be incorrect.	So,
 14232                                  					; "I don't now" will be returned even if it is indicated
 14233                                  					; as media is not changed.)
 14234 00001887 740F                    		jz	short mediaret	; (same	drive,
 14235                                  					; media	changeline indication is reliable)
 14236                                  
 14237                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 14238                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 14239                                  ; "not changed" here since the 2 second test said no change.)
 14240                                  
 14241 00001889 50                      		push	ax
 14242 0000188A 51                      		push	cx
 14243 0000188B 52                      		push	dx
 14244 0000188C E867ED                  		call	Check_Time_Of_Access
 14245 0000188F 5A                      		pop	dx
 14246 00001890 59                      		pop	cx
 14247 00001891 58                      		pop	ax
 14248 00001892 09F6                    		or	si, si
 14249 00001894 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 14250                                  					; (volume id will be checked)
 14251 00001896 31F6                    		xor	si, si		; return "i don't know"
 14252                                  mediaret:				
 14253 00001898 C3                      		retn
 14254                                  ; ---------------------------------------------------------------------------
 14255                                  
 14256                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 14257                                  ; because this may be different since we only set medbyt when doing a read
 14258                                  ; or write.
 14259                                  
 14260                                  mediadovolid:				
 14261 00001899 E8FAED                  		call	GetBp		; build	a new bpb in current bds
 14262 0000189C 72FA                    		jb	short mediaret
 14263 0000189E E82D00                  		call	check_vid
 14264 000018A1 73F5                    		jnb	short mediaret
 14265 000018A3 E9C9F3                  		jmp	maperror	; fix up al for	return to dos
 14266                                  ; ---------------------------------------------------------------------------
 14267                                  
 14268                                  ; simple, quick check of latched change. if no indication, then return
 14269                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 14270                                  ; return and set al = 15 (for invalid media change) which will be returned to
 14271                                  ; dos.
 14272                                  ;
 14273                                  ; for dos 3.3, this will work only for the drive that has changeline.
 14274                                  
 14275                                  ;	call with es:di -> bds, ds -> Bios_Data
 14276                                  ;	***** warning:  this routine will return one level up on the stack
 14277                                  ;			if an error occurs!
 14278                                  
 14279                                  checklatchio:	
 14280                                  
 14281                                  ; if returning fake bpb then assume the disk has not changed
 14282                                  			
 14283 000018A6 E8B0FF                  		call	chkopcnt
 14284 000018A9 741B                    		jz	short checkret	; done if zero
 14285                                  
 14286                                  ; check for past rom indications. if no rom change indicated, then return ok.
 14287                                  
 14288 000018AB E80201                  		call	checkromchange
 14289 000018AE 7416                    		jz	short checkret
 14290                                  
 14291                                  ; we now see that a change line has been seen in the past. let's do the
 14292                                  ; expensive verification.
 14293                                  
 14294 000018B0 E8E3ED                  		call	GetBp		; build	bpb in current bds
 14295 000018B3 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 14296 000018B5 E81600                  		call	check_vid
 14297 000018B8 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 14298 000018BA 09F6                    		or	si, si		; is changed for sure?
 14299 000018BC 7908                    		jns	short checkret
 14300 000018BE E87D00                  		call	returnvid
 14301                                  checklatchret:				
 14302 000018C1 E8ABF3                  		call	maperror	; fix up al for	return to dos
 14303                                  ret_no_error_map:			
 14304 000018C4 F9                      		stc
 14305 000018C5 5E                      		pop	si		; pop off return address
 14306                                  checkret:				
 14307 000018C6 C3                      		retn
 14308                                  ; ---------------------------------------------------------------------------
 14309                                  
 14310                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 14311                                  ; only if there was a disk error. return that error code in ax.
 14312                                  ;
 14313                                  ;	called with es:di -> bds, ds -> Bios_Data
 14314                                  
 14315                                  checkfatvid:				
 14316 000018C7 E8CD01                  		call	fat_check	; check	the fat	and the	vid
 14317 000018CA 09F6                    		or	si, si
 14318 000018CC 7827                    		js	short changed_drv ;
 14319                                  
 14320                                  ; the fat was the same. fall into check_vid and check volume id.
 14321                                  
 14322                                  		; fall into check_vid
 14323                                  
 14324                                  ; =============== S U B	R O U T	I N E =======================================
 14325                                  
 14326                                  ; now with the extended boot record, the logic should be enhanced.
 14327                                  ;
 14328                                  ; if it is the extended boot record, then we check the volume serial
 14329                                  ; number instead of volume id. if it is different, then set si to -1.
 14330                                  ;
 14331                                  ; if it is same, then si= 1 (no change).
 14332                                  ;
 14333                                  ; if it is not the extended boot record, then just follows the old
 14334                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 14335                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 14336                                  ; should have already covered by extended boot structure checking.
 14337                                  ; so, we will return "i don't know" by setting si to 0.
 14338                                  ;
 14339                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 14340                                  ; (this will be gauranteed by a successful getbp call right before this
 14341                                  ; routine.)
 14342                                  ;
 14343                                  ;	called with es:di -> bds, ds -> bds
 14344                                  
 14345                                  		; 19/10/2022
 14346                                  check_vid:
 14347                                  
 14348                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 14349                                  ; boot signature. if it is set then go to do the extended
 14350                                  ; id check otherwise continue with code below
 14351                                  
 14352 000018CE 803E[7401]29            		cmp	byte [disksector+26h], 29h
 14353                                  					; [disksector+EXT_BOOT.SIG],
 14354                                  					; EXT_BOOT_SIGNATURE
 14355 000018D3 7427                    		jz	short do_ext_check_id
 14356 000018D5 E8E400                  		call	haschange
 14357 000018D8 74EC                    		jz	short checkret
 14358 000018DA 31F6                    		xor	si, si
 14359 000018DC 803E[5E01]00            		cmp	byte [disksector+10h], 0 
 14360                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 14361 000018E1 7411                    		jz	short checkfatret ; don't read vol id
 14362                                  					; if not fat system
 14363 000018E3 E8F600                  		call	read_volume_id
 14364 000018E6 720C                    		jb	short checkfatret
 14365 000018E8 E89B01                  		call	check_volume_id
 14366 000018EB BEFFFF                  		mov	si, 0FFFFh	; -1
 14367                                  					; definitely changed
 14368 000018EE 7505                    		jnz	short changed_drv
 14369                                  
 14370 000018F0 46                      		inc	si		; not changed
 14371                                  vid_no_changed:				
 14372 000018F1 E8C200                  		call	resetchanged
 14373                                  		; 12/12/2022
 14374                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 14375                                  		;clc
 14376                                  checkfatret:				
 14377 000018F4 C3                      		retn
 14378                                  ; ---------------------------------------------------------------------------
 14379                                  
 14380                                  		; 12/12/2022
 14381                                  changed_drv:
 14382 000018F5 F8                      		clc			; cas -- return	no error
 14383 000018F6 C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 14384                                  					; ensure that we ask rom for media
 14385 000018FB C3                      		retn			; check	next time round
 14386                                  ; ---------------------------------------------------------------------------
 14387                                  
 14388                                  ; extended id check
 14389                                  
 14390                                  ; 16/10/2022
 14391                                  
 14392                                  ; the code to check extended id is basically a check to see if the
 14393                                  ; volume serial number is still the same. the volume serial number
 14394                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 14395                                  ; ds:di points to the bds of the drive under consideration.
 14396                                  ; the bds has fields containing the high and low words 
 14397                                  ; of the volume serial number of the media in the drive.
 14398                                  ; compare these fields to the fields mentioned above. if these fields
 14399                                  ; do not match the media has changed and so we should jump to the code
 14400                                  ; starting at ext_changed else return "i don't know" status
 14401                                  ; in the register used for the changeline status and continue executing
 14402                                  ; the code given below. for temporary storage use the register which
 14403                                  ; has been saved and restored around this block.
 14404                                  ;
 14405                                  ; bds fields in inc\msbds.inc
 14406                                  
 14407                                  		; 19/10/2022
 14408                                  do_ext_check_id:			
 14409 000018FC 50                      		push	ax
 14410                                  		;mov	ax, word ptr ds:disksector+27h
 14411                                  					; [DiskSector+EXT_BOOT.SERIAL]
 14412 000018FD A1[7501]                		mov	ax, [disksector+27h]
 14413 00001900 263B4557                		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 14414 00001904 750E                    		jnz	short ext_changed
 14415 00001906 A1[7701]                		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 14416 00001909 263B4559                		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 14417 0000190D 7505                    		jnz	short ext_changed
 14418 0000190F 31F6                    		xor	si, si		; 0
 14419                                  					; don't know
 14420 00001911 58                      		pop	ax
 14421 00001912 EBDD                    		jmp	short vid_no_changed
 14422                                  					; reset the flag
 14423                                  ; ---------------------------------------------------------------------------
 14424                                  
 14425                                  ext_changed:				
 14426 00001914 58                      		pop	ax
 14427 00001915 BEFFFF                  		mov	si, 0FFFFh	; -1
 14428                                  					; disk changed!
 14429                                  		; 12/12/2022
 14430                                  		; ('changed_drv' clears cf)
 14431                                  		;clc
 14432 00001918 EBDB                    		jmp	short changed_drv
 14433                                  
 14434                                  ; ---------------------------------------------------------------------------
 14435                                  
 14436                                  ; at i/o time, we detected the error. now we need to determine whether the
 14437                                  ; media was truly changed or not. we return normally if media change unknown.
 14438                                  ; and we pop off the call and jmp to harderr if we see an error.
 14439                                  ;
 14440                                  ; es:di -> bds
 14441                                  
 14442                                  checkio:				
 14443 0000191A 80FC06                  		cmp	ah, 6
 14444 0000191D 75D5                    		jnz	short checkfatret
 14445 0000191F E837FF                  		call	chkopcnt
 14446 00001922 74D0                    		jz	short checkfatret
 14447 00001924 E86FED                  		call	GetBp
 14448 00001927 7212                    		jb	short no_error_map
 14449 00001929 E89BFF                  		call	checkfatvid
 14450 0000192C 7209                    		jb	short checkioret ; disk	error trying to	read in.
 14451 0000192E 09F6                    		or	si, si		; is changed for sure?
 14452 00001930 7802                    		js	short checkioerr ; yes changed
 14453 00001932 45                      		inc	bp		; allow	a retry
 14454 00001933 C3                      		retn
 14455                                  ; ---------------------------------------------------------------------------
 14456                                  
 14457                                  checkioerr:				
 14458 00001934 E80700                  		call	returnvid
 14459                                  
 14460                                  checkioret:				
 14461 00001937 F9                      		stc			; make sure carry gets passed through
 14462 00001938 E9E4F2                  		jmp	harderr
 14463                                  ; ---------------------------------------------------------------------------
 14464                                  
 14465                                  no_error_map:				
 14466 0000193B E9E4F2                  		jmp	harderr2
 14467                                  
 14468                                  ; =============== S U B	R O U T	I N E =======================================
 14469                                  
 14470                                  ; return vid sets up the vid for a return to dos.
 14471                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 14472                                  ;  **** trashes si! ****
 14473                                  
 14474                                  returnvid:		
 14475 0000193E BE1600                  		mov	si, 22		; extra
 14476                                  					; offset into pointer to return	value
 14477 00001941 E80700                  		call	vid_into_packet
 14478 00001944 B406                    		mov	ah, 6
 14479 00001946 F9                      		stc
 14480 00001947 C3                      		retn
 14481                                  
 14482                                  ; ---------------------------------------------------------------------------
 14483                                  
 14484                                  ; moves the pointer to the volid for the drive into the original request packet
 14485                                  ; no attempt is made to preserve registers.
 14486                                  ;
 14487                                  ; assumes es:di -> bds
 14488                                  ; **trashes si**
 14489                                  
 14490                                  media_set_vid:				
 14491 00001948 BE0F00                  		mov	si, 15		; trans+1
 14492                                  					; return the value here	in packet
 14493                                  
 14494                                  		; fall into vid_into_packet
 14495                                  
 14496                                  ; =============== S U B	R O U T	I N E =======================================
 14497                                  
 14498                                  ; return pointer to vid in bds at es:di in packet[si]
 14499                                  
 14500                                  		; 19/10/2022
 14501                                  vid_into_packet:
 14502 0000194B 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 14503 0000194C C51E[1200]              		lds	bx, [ptrsav]
 14504 00001950 83C74B                  		add	di, 75		; BDS.volid
 14505 00001953 8938                    		mov	[bx+si], di
 14506 00001955 83EF4B                  		sub	di, 75		; BDS.volid
 14507 00001958 8C4002                  		mov	[bx+si+2], es
 14508 0000195B 1F                      		pop	ds
 14509                                  dofloppy:	; 18/12/2022
 14510 0000195C C3                      		retn
 14511                                  
 14512                                  ; ---------------------------------------------------------------------------
 14513                                  
 14514                                  ;----------------------------------------------------------------------------
 14515                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 14516                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 14517                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 14518                                  ;   of getbp. for 3.5" media, we just return.
 14519                                  ;
 14520                                  ;   inputs:	es:di point to correct bds for this drive
 14521                                  ;		ah has media byte
 14522                                  ;
 14523                                  ;   outputs:	carry clear
 14524                                  ;		    no registers modified
 14525                                  ;		carry set
 14526                                  ;		    al = sectors/fat
 14527                                  ;		    bh = number of root directory entries
 14528                                  ;		    bl = sectors per track
 14529                                  ;		    cx = number of sectors
 14530                                  ;		    dh = sectors per allocation unit
 14531                                  ;		    dl = number of heads
 14532                                  ;
 14533                                  ;----------------------------------------------------------------------------
 14534                                  
 14535                                  hidensity:
 14536                                  
 14537                                  ; check for correct drive
 14538                                  		
 14539                                  		; 12/12/2022
 14540 0000195D 26F6452302              		test	byte [es:di+23h], 2		
 14541                                  		;test	word [es:di+23h], 2 ; is it special?	
 14542                                  					; [es:di+BDS.flags], fchangeline
 14543 00001962 74F8                    		jz	short dofloppy	; no, do normal floppy test
 14544                                  
 14545                                  ; we have a media byte that is pretty complex. examine drive information
 14546                                  ; table to see what kind it is.
 14547                                  
 14548 00001964 26807D2202              		cmp	byte [es:di+22h], 2 ; is it single-media?
 14549 00001969 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 14550                                  					; yes, use fatid...
 14551                                  ; 96 tpi drive?
 14552 0000196B 80FCF9                  		cmp	ah, 0F9h
 14553 0000196E 75EC                    		jnz	short dofloppy
 14554                                  
 14555                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 14556                                  ;------ a 720K diskette
 14557                                  
 14558 00001970 26807D2207              		cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 14559                                  					; ffOther
 14560 00001975 7418                    		jz	short Is720K
 14561 00001977 26807D2209              		cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 14562                                  					; ff288
 14563 0000197C 7411                    		jz	short Is720K
 14564 0000197E B007                    		mov	al, 7		; seven	sectors	/ fat
 14565 00001980 BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 14566                                  					; 224 root dir entries
 14567                                  					; & 0Fh sector max
 14568 00001983 B96009                  		mov	cx, 2400	; 80*15*2
 14569                                  					; 80 tracks, 15 sectors/track,
 14570                                  					; 2 sides
 14571 00001986 BA0201                  		mov	dx, 258		; 1*256+2
 14572                                  					; sectors/allocation unit
 14573                                  					; & head max
 14574 00001989 83C402                  		add	sp, 2		; pop off return address
 14575 0000198C E979ED                  		jmp	Has1		; return to tail of getbp
 14576                                  ; ---------------------------------------------------------------------------
 14577                                  
 14578                                  Is720K:					
 14579 0000198F 83C402                  		add	sp, 2		; pop off return address
 14580 00001992 E93AED                  		jmp	Has720K		; return to 720K code
 14581                                  ; ---------------------------------------------------------------------------
 14582                                  
 14583                                  		; 18/12/2022
 14584                                  ;dofloppy:				
 14585                                  		;retn
 14586                                  
 14587                                  ; =============== S U B	R O U T	I N E =======================================
 14588                                  
 14589                                  ; 16/10/2022
 14590                                  
 14591                                  ;---------------------------------------------------------------------------
 14592                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 14593                                  ;		   essentially used to indicate changeline, or format.
 14594                                  ;
 14595                                  ;   inputs:	dl contains physical drive number
 14596                                  ;		bx contains bits to set in the flag field in the bdss
 14597                                  ;   outputs:	none
 14598                                  ;   registers modified: flags
 14599                                  ;
 14600                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 14601                                  ;
 14602                                  ; in the virtual drive system we *must* flag the other drives as being changed
 14603                                  ;---------------------------------------------------------------------------
 14604                                  
 14605                                  set_changed_dl:	
 14606 00001995 06                      		push	es
 14607 00001996 57                      		push	di
 14608                                  		;les	di, ds:start_bds
 14609                                  		; 19/10/2022
 14610 00001997 C43E[1901]              		les	di, [start_bds]
 14611                                  
 14612                                  ; note: we assume that the list is non-empty
 14613                                  
 14614                                  scan_bds:				
 14615 0000199B 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 14616 0000199F 7504                    		jnz	short get_next_bds
 14617                                  
 14618                                  ; someone may complain, but this *always* must be done when a disk change is
 14619                                  ; noted. there are *no* other compromising circumstances.
 14620                                  
 14621 000019A1 26095D23                		or	[es:di+23h], bx	; [es:di+BDS.flags]
 14622                                  					; signal change	on other drive
 14623                                  get_next_bds:				
 14624 000019A5 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 14625                                  					; go to	next bds
 14626 000019A8 83FFFF                  		cmp	di, 0FFFFh
 14627 000019AB 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 14628 000019AD 5F                      		pop	di
 14629 000019AE 07                      		pop	es
 14630 000019AF C3                      		retn
 14631                                  
 14632                                  ; =============== S U B	R O U T	I N E =======================================
 14633                                  
 14634                                  ;---------------------------------------------------------------------------
 14635                                  ; checkromchange - see if external program has diddled rom change line.
 14636                                  ;
 14637                                  ;   inputs:	es:di points to current bds.
 14638                                  ;   outputs:	zero set - no change
 14639                                  ;		zero reset - change
 14640                                  ;   registers modified: none
 14641                                  ;---------------------------------------------------------------------------
 14642                                  
 14643                                  checkromchange:	
 14644                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 14645                                  		; 10/12/2022
 14646 000019B0 26F6452340              		test	byte [es:di+23h], 40h
 14647                                  		;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 14648                                  					; fchanged
 14649 000019B5 C3                      		retn
 14650                                  
 14651                                  ; =============== S U B	R O U T	I N E =======================================
 14652                                  
 14653                                  ;---------------------------------------------------------------------------
 14654                                  ; resetchanged - restore value of change line
 14655                                  ;
 14656                                  ;   inputs:	es:di points to current bds
 14657                                  ;   outputs:	none
 14658                                  ;   registers modified: none
 14659                                  ;---------------------------------------------------------------------------
 14660                                  
 14661                                  resetchanged:	
 14662                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh	
 14663                                  		; 10/12/2022
 14664 000019B6 26806523BF              		and	byte [es:di+23h], 0BFh
 14665                                  		;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 14666                                  					; ~fchanged
 14667 000019BB C3                      		retn
 14668                                  
 14669                                  ; =============== S U B	R O U T	I N E =======================================
 14670                                  
 14671                                  ;---------------------------------------------------------------------------
 14672                                  ; haschange - see if drive can supply change line
 14673                                  ;
 14674                                  ;   inputs:	es:di points to current bds
 14675                                  ;   outputs:	zero set - no change line available
 14676                                  ;		zero reset - change line available
 14677                                  ;   registers modified: none
 14678                                  ;---------------------------------------------------------------------------
 14679                                  
 14680                                  haschange:
 14681                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 14682                                  		; 10/12/2022
 14683 000019BC 26F6452302              		test	byte [es:di+23h], 2		
 14684                                  		;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 14685                                  					; fchangeline
 14686 000019C1 C3                      		retn
 14687                                  
 14688                                  ; ---------------------------------------------------------------------------
 14689                                  
 14690                                  ; 16/10/2022
 14691                                  
 14692                                  ;-------------------------------------------------------------------------
 14693                                  ; set_volume_id      -	main routine, calls other routines.
 14694                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 14695                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 14696                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 14697                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 14698                                  ;-------------------------------------------------------------------------
 14699                                  
 14700                                  ; set_volume_id
 14701                                  ;   if drive has changeline support, read in and set the volume_id
 14702                                  ; and the last fat_id byte. if no change line support then do nothing.
 14703                                  ;
 14704                                  ;   on entry:
 14705                                  ;	es:di points to the bds for this disk.
 14706                                  ;	ah contains media byte
 14707                                  ;
 14708                                  ;   on exit:
 14709                                  ;	carry clear:
 14710                                  ;	   successful call
 14711                                  ;	carry set
 14712                                  ;	   error and ax has error code
 14713                                  
 14714                                  set_volume_id:				
 14715 000019C2 52                      		push	dx		; save registers
 14716 000019C3 50                      		push	ax
 14717 000019C4 E8F5FF                  		call	haschange	; does drive have changeline support?
 14718 000019C7 740B                    		jz	short setvret	; no, get out
 14719 000019C9 E81000                  		call	read_volume_id
 14720 000019CC 7209                    		jb	short seterr
 14721 000019CE E8A200                  		call	transfer_volume_id ; copy the volume id	to special drive
 14722 000019D1 E8E2FF                  		call	resetchanged	; restore value	of change line
 14723                                  setvret:				
 14724                                  		; 10/12/2022
 14725                                  		; cf = 0
 14726                                  		;clc			; no error, clear carry flag
 14727 000019D4 58                      		pop	ax		; restore registers
 14728 000019D5 5A                      		pop	dx
 14729 000019D6 C3                      		retn
 14730                                  ; ---------------------------------------------------------------------------
 14731                                  
 14732                                  seterr:					
 14733 000019D7 5A                      		pop	dx		; pop stack but don't overwrite ax
 14734 000019D8 5A                      		pop	dx		; restore dx
 14735 000019D9 C3                      		retn
 14736                                  ; ---------------------------------------------------------------------------
 14737 000019DA 0000                    root_sec:	dw 0			; root sector #
 14738                                  
 14739                                  ; 16/10/2022
 14740                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 14741                                  ; 09/12/2022
 14742                                  ROOTSEC equ root_sec
 14743                                  
 14744                                  ; =============== S U B	R O U T	I N E =======================================
 14745                                  
 14746                                  ; 16/10/2022
 14747                                  
 14748                                  ; read_volume_id read the volume id and tells if it has been changed.
 14749                                  ;
 14750                                  ;   on entry:
 14751                                  ;	es:di points to current bds for drive.
 14752                                  ;
 14753                                  ;   on exit:
 14754                                  ;	carry clear
 14755                                  ;	    si = 1  no change
 14756                                  ;	    si = 0  ?
 14757                                  ;	    si = -1 change
 14758                                  ;
 14759                                  ;	carry set:
 14760                                  ;	    error and ax has error code.
 14761                                  
 14762                                  read_volume_id:
 14763 000019DC 52                      		push	dx		; preserve registers
 14764 000019DD 51                      		push	cx
 14765 000019DE 53                      		push	bx
 14766 000019DF 50                      		push	ax
 14767 000019E0 06                      		push	es		; stack the bds last
 14768 000019E1 57                      		push	di
 14769 000019E2 1E                      		push	ds		; point es to Bios_Data
 14770 000019E3 07                      		pop	es
 14771 000019E4 BF[AB08]                		mov	di, tmp_vid	; "NO NAME	 "
 14772 000019E7 BE[9F08]                		mov	si, nul_vid	; "NO NAME	 "
 14773 000019EA B90C00                  		mov	cx, 12		; initialize tmp_vid to	null vi_id
 14774 000019ED F3A4                    		rep movsb
 14775 000019EF 5F                      		pop	di
 14776 000019F0 07                      		pop	es
 14777 000019F1 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 14778                                  					; # of fats
 14779 000019F5 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 14780                                  					; sectors / fat
 14781 000019F9 F6E1                    		mul	cl		; size taken by	fats
 14782 000019FB 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 14783                                  					; add on reserved sectors
 14784                                  					;
 14785                                  					; ax is	now sector # (0	based)
 14786                                  		; 17/10/2022
 14787 000019FF 2EA3[DA19]              		mov	[cs:ROOTSEC], ax
 14788                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 14789                                  					; 0070h:3EFFh =	2C7h:198Fh
 14790 00001A03 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 14791                                  					; # root dir entries
 14792 00001A07 B104                    		mov	cl, 4		; 16 entries/sector
 14793 00001A09 D3E8                    		shr	ax, cl		; divide by 16
 14794 00001A0B 89C1                    		mov	cx, ax		; cx is	# of sectors to	scan
 14795                                  next_sec:				
 14796 00001A0D 51                      		push	cx		; save outer loop counter
 14797 00001A0E 2EA1[DA19]              		mov	ax, [cs:ROOTSEC]
 14798                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 14799                                  					; get sector #
 14800 00001A12 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 14801                                  					; sectors / track
 14802 00001A16 31D2                    		xor	dx, dx
 14803 00001A18 F7F1                    		div	cx
 14804                                  
 14805                                  ; set up registers for call to read_sector
 14806                                  
 14807 00001A1A 42                      		inc	dx		; dx= sectors into track
 14808                                  					; ax= track count from 0
 14809 00001A1B 88D1                    		mov	cl, dl		; sector to read
 14810 00001A1D 31D2                    		xor	dx, dx
 14811 00001A1F 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 14812                                  					; # heads on this disc
 14813 00001A23 88D6                    		mov	dh, dl		; head number
 14814 00001A25 88C5                    		mov	ch, al		; track	#
 14815 00001A27 E8EEED                  		call	read_sector	; get first sector of the root directory,
 14816                                  					; ds:bx	-> directory sector
 14817 00001A2A 7243                    		jb	short readviderr
 14818 00001A2C B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 14819 00001A2F B008                    		mov	al, 8		; volume label bit
 14820                                  fvid_loop:				
 14821 00001A31 803F00                  		cmp	byte [bx], 0 ; end of dir?
 14822 00001A34 7436                    		jz	short no_vid	; yes, no vol id
 14823 00001A36 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 14824 00001A39 7405                    		jz	short ent_loop	; yes, skip
 14825 00001A3B 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 14826 00001A3E 7511                    		jnz	short found_vid	; jmp yes
 14827                                  ent_loop:				
 14828 00001A40 83C320                  		add	bx, 32		; add length of	directory entry
 14829 00001A43 E2EC                    		loop	fvid_loop
 14830 00001A45 59                      		pop	cx		; outer loop
 14831 00001A46 2EFF06[DA19]            		inc	word [cs:ROOTSEC]
 14832                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 14833                                  					; next sector
 14834 00001A4B E2C0                    		loop	next_sec	; continue
 14835                                  notfound:				
 14836 00001A4D 31F6                    		xor	si, si
 14837 00001A4F EB16                    		jmp	short fvid_ret
 14838                                  ; ---------------------------------------------------------------------------
 14839                                  
 14840                                  found_vid:				
 14841 00001A51 59                      		pop	cx		; clean stack of outer loop counter
 14842 00001A52 89DE                    		mov	si, bx		; point	to volume_id
 14843 00001A54 06                      		push	es		; preserve current bds
 14844 00001A55 57                      		push	di
 14845 00001A56 1E                      		push	ds
 14846 00001A57 07                      		pop	es		; point es to Bios_Data
 14847 00001A58 BF[AB08]                		mov	di, tmp_vid	; "NO NAME	 "
 14848 00001A5B B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 14849                                  					; length of string minus nul
 14850 00001A5E F3A4                    		rep movsb		; mov volume label to tmp_vid
 14851 00001A60 30C0                    		xor	al, al
 14852 00001A62 AA                      		stosb			; null terminate
 14853 00001A63 31F6                    		xor	si, si
 14854 00001A65 5F                      		pop	di		; restore current bds
 14855 00001A66 07                      		pop	es
 14856                                  fvid_ret:				
 14857 00001A67 58                      		pop	ax
 14858                                  		; 10/12/2022
 14859                                  		; cf = 0
 14860                                  		;clc
 14861                                  rvidret:				
 14862 00001A68 5B                      		pop	bx		; restore registers
 14863 00001A69 59                      		pop	cx
 14864 00001A6A 5A                      		pop	dx
 14865 00001A6B C3                      		retn
 14866                                  ; ---------------------------------------------------------------------------
 14867                                  
 14868                                  no_vid:					
 14869 00001A6C 59                      		pop	cx		; clean stack of outer loop counter
 14870 00001A6D EBDE                    		jmp	short notfound	; not found
 14871                                  ; ---------------------------------------------------------------------------
 14872                                  
 14873                                  readviderr:				
 14874 00001A6F 5E                      		pop	si		; trash the outer loop counter
 14875 00001A70 5E                      		pop	si		; caller's ax, return error code instead 
 14876 00001A71 EBF5                    		jmp	short rvidret
 14877                                  
 14878                                  ; =============== S U B	R O U T	I N E =======================================
 14879                                  
 14880                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 14881                                  ;
 14882                                  ; inputs:	es:di has current bds
 14883                                  ; outputs:	bds for drive has volume id from tmp
 14884                                  
 14885                                  transfer_volume_id:	
 14886 00001A73 57                      		push	di		; copy the volume id from tmp to special drive
 14887 00001A74 56                      		push	si
 14888 00001A75 51                      		push	cx
 14889 00001A76 BE[AB08]                		mov	si, tmp_vid	; "NO NAME	 "
 14890                                  		;add	di, BDS.volid
 14891 00001A79 83C74B                  		add	di, 75		; BDS.volid
 14892                                  		;mov	cx, VOLID_SIZ
 14893 00001A7C B90C00                  		mov	cx, 12		; VOLID_SIZ
 14894 00001A7F FC                      		cld
 14895 00001A80 F3A4                    		rep movsb
 14896 00001A82 59                      		pop	cx
 14897 00001A83 5E                      		pop	si
 14898 00001A84 5F                      		pop	di
 14899 00001A85 C3                      		retn
 14900                                  
 14901                                  ; =============== S U B	R O U T	I N E =======================================
 14902                                  
 14903                                  ;  check_volume_id - compare volume id in tmp area with
 14904                                  ;		     one expected for drive
 14905                                  ;
 14906                                  ;   inputs:	es:di has current bds for drive
 14907                                  ;   outputs:	zero true means it matched
 14908                                  
 14909                                  check_volume_id:	
 14910 00001A86 57                      		push	di
 14911 00001A87 51                      		push	cx
 14912 00001A88 BE[AB08]                		mov	si, tmp_vid	; "NO NAME	 "
 14913                                  		;add	di, BDS.volid
 14914 00001A8B 83C74B                  		add	di, 75		; BDS.volid
 14915                                  		;mov	cx, VOLID_SIZ
 14916 00001A8E B90C00                  		mov	cx, 12		; VOLID_SIZ
 14917 00001A91 FC                      		cld
 14918 00001A92 F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 14919 00001A94 59                      		pop	cx
 14920 00001A95 5F                      		pop	di
 14921 00001A96 C3                      		retn
 14922                                  
 14923                                  ; =============== S U B	R O U T	I N E =======================================
 14924                                  
 14925                                  ;   fat_check - see of the fatid has changed in the specified drive.
 14926                                  ;	      - uses the fat id obtained from the boot sector.
 14927                                  ;
 14928                                  ;   inputs:	medbyt is expected fat id
 14929                                  ;		es:di points to current bds
 14930                                  ;
 14931                                  ;   output:	si = -1 if fat id different,
 14932                                  ;		si = 0 otherwise
 14933                                  ;
 14934                                  ;   no other registers changed.
 14935                                  
 14936                                  fat_check:		
 14937 00001A97 50                      		push	ax
 14938 00001A98 31F6                    		xor	si, si		; say fat id's are same.
 14939 00001A9A A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 14940 00001A9D 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 14941                                  					; compare it with the bds medbyte
 14942 00001AA1 7401                    		jz	short okret1	; carry	clear
 14943 00001AA3 4E                      		dec	si
 14944                                  okret1:					
 14945 00001AA4 58                      		pop	ax
 14946 00001AA5 C3                      		retn
 14947                                  
 14948                                  ; ---------------------------------------------------------------------------
 14949                                  
 14950                                  ; BIOSCODE:1A69h (MSDOS 6.21, IO.SYS)
 14951                                  		;times 7 db 0
 14952                                  
 14953                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)	
 14954                                  
 14955                                  		; 09/12/2022
 14956                                  		;times 4 db 0	; 17/10/2022
 14957                                  		;db 4 dup(0)	; times 4 db 0
 14958                                  
 14959                                  ; ---------------------------------------------------------------------------
 14960                                  
 14961                                  		; 09/12/2022
 14962                                  		;db 0
 14963                                  
 14964                                  number2div	equ ($-BCode_start)
 14965                                  number2mod	equ (number2div % 16)
 14966                                  
 14967                                  %if number2mod>0 & number2mod<16
 14968 00001AA6 00<rep Ah>              		times (16-number2mod) db 0
 14969                                  %endif
 14970                                  
 14971                                  ;align 16
 14972                                  
 14973                                  ; 09/12/2022
 14974                                  BCODE_END	equ $ - BCode_start
 14975                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 14976                                  ; 13/12/2022
 14977                                  SYSINITOFFSET	equ BCODE_END
 14978                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 14979                                  
 14980                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 14981                                  
 14982                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14983                                  ; 01/05/2019 - Retro DOS v4.0 
 14984                                  ; ============================================================================
 14985                                  ; end of BIOSCODE
 14986                                  
 14987                                  ; ----------------------------------------------------------------------------
 14988                                  ; %include sysinit5.s	; 09/12/2022
 14989                                  ; ----------------------------------------------------------------------------
 14990                                  
 14991                                  ;=============================================================================
 14992                                  ; (IO.SYS) SYSINIT SEGMENT 
 14993                                  ;=============================================================================
 14994                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14995                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 14996                                  
 14997                                  section .SYSINIT vstart=0
 14998                                  
 14999                                  ; ****************************************************************************
 15000                                  ; SYSINIT.BIN (MSDOS 6.21 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 15001                                  ; ----------------------------------------------------------------------------
 15002                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 30/12/2022))
 15003                                  ; ----------------------------------------------------------------------------
 15004                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 15005                                  ; ----------------------------------------------------------------------------
 15006                                  ; Assembler: NASM version 2.15
 15007                                  ; ----------------------------------------------------------------------------
 15008                                  ;	   ((nasm sysinit6.s -l sysinit6.lst -o SYSINIT6.BIN -Z error.txt)) 	
 15009                                  ; ----------------------------------------------------------------------------
 15010                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 15011                                  ; ----------------------------------------------------------------------------
 15012                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 15013                                  ; source code by Microsoft, 1991 
 15014                                  ; ----------------------------------------------------------------------------
 15015                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 15016                                  ; by Microsoft, 12/10/1983
 15017                                  ; ****************************************************************************
 15018                                  ; main file: 'retrodos4.s'
 15019                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 15020                                  
 15021                                  ; 30/12/2022 - Retro DOS v4.2 
 15022                                  ; Retro DOS v4.0 - 2019
 15023                                  ; SYSINIT (MSDOS 6.21 IO.SYS) draft: 'sysinit3.s' (01/07/2019)
 15024                                   
 15025                                  ; 21/10/2022
 15026                                  ; ----------------------------------------------------------------------------
 15027                                  ; This source code (version) is based on SYSINIT source code of disassembled
 15028                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 15029                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 15030                                  ; ----------------------------------------------------------------------------
 15031                                  ; Binary file splitter & joiner: FFSJ v3.3
 15032                                  
 15033                                  ;--------------------------------------------------------------
 15034                                  ; SYSINIT.TXT (27/01/1983)
 15035                                  ;--------------------------------------------------------------
 15036                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 15037                                  ;over  the  system  initialization  after  the  OEM  bios   has
 15038                                  ;performed any  initialization  it  needs  to  do.   Control is
 15039                                  ;transfered with a long jump to the external  variable  SYSINIT
 15040                                  ;
 15041                                  ;
 15042                                  ;   The OEM  has  the  following  variables declared external:
 15043                                  ;
 15044                                  ;   CURRENT_DOS_LOCATION    WORD
 15045                                  ;
 15046                                  ;This word  contains  the  segment  number of the DOS before it
 15047                                  ;is relocated.  The OEM bios must set this value.
 15048                                  ;
 15049                                  ;   FINAL_DOS_LOCATION      WORD
 15050                                  ;
 15051                                  ;This word contains the segment number of the DOS after SYSINIT
 15052                                  ;moves it.  The OEM bios must set this value.
 15053                                  ;
 15054                                  ;   DEVICE_LIST             DWORD
 15055                                  ;
 15056                                  ;This  double  word  pointer  points  to  the  linked  list  of
 15057                                  ;character and block device drivers.  The  OEM  must  set  this
 15058                                  ;value.
 15059                                  ;
 15060                                  ;   MEMORY_SIZE             WORD
 15061                                  ;
 15062                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 15063                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 15064                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 15065                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 15066                                  ;and read it back until it gets a mismatch.
 15067                                  ;
 15068                                  ;   DEFAULT_DRIVE           BYTE
 15069                                  ;
 15070                                  ;This is  the initial default drive when the system first comes
 15071                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 15072                                  ;it then drive a is assumed.
 15073                                  ;
 15074                                  ;   BUFFERS                 BYTE
 15075                                  ;
 15076                                  ;This is  the  default  number of buffers for the system.  This
 15077                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 15078                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 15079                                  ;
 15080                                  ;   FILES                   BYTE
 15081                                  ;
 15082                                  ;This is  the  default  number  of  files for the system.  This
 15083                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 15084                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 15085                                  ;
 15086                                  ;   SYSINIT                 FAR
 15087                                  ;
 15088                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 15089                                  ;this label at the end of its INIT code.
 15090                                  ;
 15091                                  ;   The OEM  has  the  following  variables declared public:
 15092                                  ;
 15093                                  ;   RE_INIT                 FAR
 15094                                  ;
 15095                                  ;This is an entry point which allows the BIOS to do some INIT
 15096                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 15097                                  ;PRESERVED.  On entry DS points to the first available memory
 15098                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 15099                                  ;prefix which represents  the  "program"  currently  running.
 15100                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 15101                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 15102                                  ;that  no  memory  is  allocated to it, it is running in free
 15103                                  ;memory.
 15104                                  ;NOTES:
 15105                                  ;     At the time this routine is called SYSINIT occupies the
 15106                                  ;highest 10K of memory ("highest" is determined by the  value
 15107                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 15108                                  ;     Since this is called AFTER DOS is initialized, you can
 15109                                  ;make system calls.  This also implies that the code for this
 15110                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 15111                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 15112                                  ;     If you don't want  anything done just set this to point
 15113                                  ;at a FAR RET instruction.
 15114                                  
 15115                                  ; ----------------------------------------------------------------------
 15116                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 15117                                  ; ----------------------------------------------------------------------
 15118                                  
 15119                                  ;include version.inc
 15120                                  ; ----------------------------------------------------------------------
 15121                                  
 15122                                  ;FALSE   EQU     0
 15123                                  ;TRUE    EQU     0FFFFh
 15124                                  
 15125                                  ;IBMVER	    EQU     TRUE
 15126                                  ;IBMCOPYRIGHT EQU   FALSE
 15127                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 15128                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 15129                                  ;MSVER      EQU     FALSE
 15130                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 15131                                  ;KANJI      EQU     FALSE
 15132                                  
 15133                                  ;(MSDOS 6.0, versiona.inc, 1991)
 15134                                  ; ----------------------------------------------------------------------
 15135                                  ;MAJOR_VERSION  EQU	6
 15136                                  ;;MINOR_VERSION	EQU	0	;6.00
 15137                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 15138                                  
 15139                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 15140                                  ; ----------------------------------------------------------------------
 15141                                  ;MAJOR_VERSION   EQU	5
 15142                                  ;MINOR_VERSION   EQU	0
 15143                                  
 15144                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21)
 15145                                  MAJOR_VERSION   EQU	6
 15146                                  MINOR_VERSION   EQU	22
 15147                                  
 15148                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 15149                                  
 15150                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 15151                                  				; currently 0.
 15152                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 15153                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 15154                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 15155                                  
 15156                                  ;      if1
 15157                                  ;      %OUT  ... for DOS Version 5.00 ...
 15158                                  ;      endif
 15159                                  
 15160                                         ;******************************
 15161                                         ;Each assembler program should:
 15162                                         ;  mov ah,030h                   ;DOS Get Version function
 15163                                         ;  int 021h                      ;Version ret. in AX,minor version first
 15164                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 15165                                         ;  jne error_handler             ; EXACT version match.
 15166                                         ;******************************
 15167                                  
 15168                                  ; ----------------------------------------------------------------------
 15169                                  ; device definitions
 15170                                  
 15171                                  ;Attribute bit masks
 15172                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 15173                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 15174                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 15175                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 15176                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 15177                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 15178                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 15179                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 15180                                  
 15181                                  ; The device table list has the form:
 15182                                  struc	SYSDEV
 15183 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 15184 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 15185 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 15186 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 15187 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 15188                                  .size:
 15189                                  endstruc
 15190                                  
 15191                                  ;Static Reguest Header
 15192                                  struc	SRHEAD
 15193 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 15194 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 15195 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 15196 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 15197 00000005 ????????????????                	resb 8		;Reserved for queue links
 15198                                  .size:
 15199                                  endstruc
 15200                                  
 15201                                  ;Status word masks
 15202                                  STERR   EQU     8000H           ;Bit 15 - Error
 15203                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 15204                                  STDON   EQU     0100H           ;Bit 8 - Done
 15205                                  STECODE EQU     00FFH           ;Error code
 15206                                  WRECODE EQU     0
 15207                                  
 15208                                  ;Function codes
 15209                                  DEVINIT EQU     0               ;Initialization
 15210                                  DINITHL EQU     26              ;Size of init header
 15211                                  DEVMDCH EQU     1               ;Media check
 15212                                  DMEDHL  EQU     15              ;Size of media check header
 15213                                  DEVBPB  EQU     2               ;Get BPB
 15214                                  DEVRDIOCTL EQU  3               ;IOCTL read
 15215                                  DBPBHL  EQU     22              ;Size of Get BPB header
 15216                                  DEVRD   EQU     4               ;Read
 15217                                  DRDWRHL EQU     22              ;Size of RD/WR header
 15218                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 15219                                  DRDNDHL EQU     14              ;Size of non destructive read header
 15220                                  DEVIST  EQU     6               ;Input status
 15221                                  DSTATHL EQU     13              ;Size of status header
 15222                                  DEVIFL  EQU     7               ;Input flush
 15223                                  DFLSHL  EQU     15              ;Size of flush header
 15224                                  DEVWRT  EQU     8               ;Write
 15225                                  DEVWRTV EQU     9               ;Write with verify
 15226                                  DEVOST  EQU     10              ;Output status
 15227                                  DEVOFL  EQU     11              ;Output flush
 15228                                  DEVWRIOCTL EQU  12              ;IOCTL write
 15229                                  
 15230                                  ; ----------------------------------------------------------------------
 15231                                  struc	SYS_FCB
 15232 00000000 ??                      .fcb_drive:	resb 1
 15233 00000001 ????????????????        .fcb_name:	resb 8
 15234 00000009 ??????                  .fcb_ext:	resb 3
 15235 0000000C ????                    .fcb_EXTENT:	resw 1
 15236 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 15237 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 15238                                                          ; word
 15239 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 15240 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 15241 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 15242 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 15243                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 15244                                                          ; If file, bit 6=0 if dirty
 15245                                                          ; If I/O device, bit 6=0 if EOF (input)
 15246                                                          ;               Bit 5=1 if Raw mode
 15247                                                          ;               Bit 0=1 if console input device
 15248                                                          ;               Bit 1=1 if console output device
 15249                                                          ;               Bit 2=1 if null device
 15250                                                          ;               Bit 3=1 if clock device
 15251 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 15252 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 15253 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 15254 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 15255 00000020 ??                      .fcb_NR:	resb 1	; Next record
 15256 00000021 ????????                .fcb_RR:	resb 4	; Random record
 15257                                  .size:
 15258                                  endstruc
 15259                                  
 15260                                  ; ----------------------------------------------------------------------
 15261                                  ; Field definition for I/O buffer information
 15262                                  
 15263                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 15264                                  
 15265                                  struc buffinfo
 15266 00000000 ????                    .buf_next:	resw 1	; Pointer to next buffer in list
 15267 00000002 ????                    .buf_prev:	resw 1	; Pointer to previous buffer in list
 15268 00000004 ??                      .buf_ID:	resb 1	; Drive of buffer (bit 7 = 0)
 15269                                  			; SFT table index (bit 7 = 1)
 15270                                  			; = FFh if buffer free
 15271 00000005 ??                      .buf_flags:	resb 1	; Bit 7 = 1 if Remote file buffer
 15272                                  			;	= 0 if Local device buffer
 15273                                  			; Bit 6 = 1 if buffer dirty
 15274                                  			; Bit 5 = Reserved
 15275                                  			; Bit 4 = Search bit (bit 7 = 1)
 15276                                  			; Bit 3 = 1 if buffer is DATA
 15277                                  			; Bit 2 = 1 if buffer is DIR
 15278                                  			; Bit 1 = 1 if buffer is FAT
 15279                                  			; Bit 0 = Reserved
 15280 00000006 ????????                .buf_sector:	resd 1	; Sector number of buffer (bit 7 = 0)
 15281                                  ; The next two items are often refed as a word (bit 7 = 0)
 15282 0000000A ??                      .buf_wrtcnt:	resb 1	; For FAT sectors, # times sector written out
 15283 0000000B ????                    .buf_wrtcntinc:	resw 1	; "   "     "   , # sectors between each write
 15284 0000000D ????????                .buf_DPB :	resd 1	; Pointer to drive parameters
 15285 00000011 ????                    .buf_fill:	resw 1	; How full buffer is (bit 7 = 1)
 15286 00000013 ??                      .buf_reserved:	resb 1	; make DWORD boundary for 386
 15287                                  .size:
 15288                                  endstruc
 15289                                  
 15290                                  %define buf_offset	dword [buf_sector]
 15291                                  			;For bit 7 = 1, this is the byte
 15292                                  			;offset of the start of the buffer in
 15293                                  			;the file pointed to by buf_ID.  Thus
 15294                                  			;the buffer starts at location
 15295                                  			;buf_offset in the file and contains
 15296                                  			;buf_fill bytes.
 15297                                  
 15298                                  bufinsiz	equ	buffinfo.size ; ; Size of structure in bytes
 15299                                  
 15300                                  
 15301                                  buf_Free	equ	0FFh		; buf_id of free buffer
 15302                                  
 15303                                  ;Flag byte masks
 15304                                  buf_isnet	EQU	10000000B
 15305                                  buf_dirty	EQU	01000000B
 15306                                  ;***
 15307                                  buf_visit	EQU	00100000B
 15308                                  ;***
 15309                                  buf_snbuf	EQU	00010000B
 15310                                  
 15311                                  buf_isDATA	EQU	00001000B
 15312                                  buf_isDIR	EQU	00000100B
 15313                                  buf_isFAT	EQU	00000010B
 15314                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 15315                                  
 15316                                  buf_NetID	EQU	bufinsiz
 15317                                  
 15318                                  ; ----------------------------------------------------------------------
 15319                                  
 15320                                  ; ----------------------------------------------------------------------
 15321                                  ;**	DPB - Drive Parameter Block
 15322                                  
 15323                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 15324                                  
 15325                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 15326                                  ;	possibly inaccurate deductions from code study... - jgl
 15327                                  ;
 15328                                  ;	The DPB is DOS's main structure for describing block devices.
 15329                                  ;	It contains info about the "Drive" intermingled with info about
 15330                                  ;	the FAT file system which is presumably on the drive.  I don't know
 15331                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 15332                                  ;
 15333                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 15334                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 15335                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 15336                                  
 15337                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 15338                                  
 15339                                  ; 12/05/2019 - Retro DOS v4.0
 15340                                  
 15341                                  struc	DPB
 15342 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 15343 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
 15344 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 15345 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 15346 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 15347 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
 15348 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
 15349 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
 15350 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
 15351 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 15352                                  ;.FAT_SIZE:	resb 1  ; MSDOS 3.3
 15353 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 15354 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
 15355 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
 15356 00000017 ??                      .MEDIA:		resb 1		; Media byte
 15357 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 15358                                  				; check the first time this DPB is used
 15359 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 15360 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 15361 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 15362                                  .size:
 15363                                  endstruc
 15364                                  
 15365                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 15366                                  
 15367                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 15368                                  
 15369                                  ; ----------------------------------------------------------------------
 15370                                  ; 26/03/2018
 15371                                  
 15372                                  ; IOCTL SUB-FUNCTIONS
 15373                                  IOCTL_GET_DEVICE_INFO	EQU	0
 15374                                  IOCTL_SET_DEVICE_INFO	EQU	1
 15375                                  IOCTL_READ_HANDLE	EQU	2
 15376                                  IOCTL_WRITE_HANDLE	EQU	3
 15377                                  IOCTL_READ_DRIVE	EQU	4
 15378                                  IOCTL_WRITE_DRIVE	EQU	5
 15379                                  IOCTL_GET_INPUT_STATUS	EQU	6
 15380                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 15381                                  IOCTL_CHANGEABLE?	EQU	8
 15382                                  IOCTL_SHARING_RETRY	EQU	11
 15383                                  GENERIC_IOCTL_HANDLE	EQU	12
 15384                                  GENERIC_IOCTL		EQU	13
 15385                                  
 15386                                  ; GENERIC IOCTL SUB-FUNCTIONS
 15387                                  RAWIO			EQU	8
 15388                                  
 15389                                  ; RAWIO SUB-FUNCTIONS
 15390                                  GET_DEVICE_PARAMETERS	EQU	60H
 15391                                  SET_DEVICE_PARAMETERS	EQU	40H
 15392                                  READ_TRACK		EQU	61H
 15393                                  WRITE_TRACK		EQU	41H
 15394                                  VERIFY_TRACK		EQU	62H
 15395                                  FORMAT_TRACK		EQU	42H
 15396                                  
 15397                                  ; DEVICETYPE VALUES
 15398                                  MAX_SECTORS_IN_TRACK	EQU	63
 15399                                  DEV_5INCH		EQU	0
 15400                                  DEV_5INCH96TPI		EQU	1
 15401                                  DEV_3INCH720KB		EQU	2
 15402                                  DEV_8INCHSS		EQU	3
 15403                                  DEV_8INCHDS		EQU	4
 15404                                  DEV_HARDDISK		EQU	5
 15405                                  DEV_OTHER		EQU	7
 15406                                  ;DEV_3INCH1440KB	EQU	7
 15407                                  DEV_3INCH2880KB		EQU	9
 15408                                  ; Retro DOS v2.0 - 26/03/2018
 15409                                  ;;DEV_TAPE		EQU	6
 15410                                  ;;DEV_ERIMO		EQU	8
 15411                                  ;DEV_3INCH2880KB	EQU	9
 15412                                  DEV_3INCH1440KB		EQU	10
 15413                                  
 15414                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 15415                                  					; CURRENTLY SUPPORT.
 15416                                  MAX_DEV_TYPE		EQU	10
 15417                                  
 15418                                  struc A_SECTORTABLE
 15419 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 15420 00000002 ????                    .ST_SECTORSIZE:		resw	1
 15421                                  .size:
 15422                                  endstruc
 15423                                  
 15424                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
 15425                                  
 15426                                  ;**	BIOS PARAMETER BLOCK DEFINITION
 15427                                  ;
 15428                                  ;	The BPB contains information about the disk structure.  It dates
 15429                                  ;	back to the earliest FAT systems and so FAT information is
 15430                                  ;	intermingled with physical driver information.
 15431                                  ;
 15432                                  ;	A boot sector contains a BPB for its device; for other disks
 15433                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
 15434                                  ;	information in the DPB.
 15435                                  ;
 15436                                  ;	The BDS structure contains a BPB within it.
 15437                                  
 15438                                  struc A_BPB
 15439 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
 15440 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
 15441 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
 15442 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
 15443 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
 15444 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
 15445 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
 15446 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
 15447 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
 15448 0000000F ????                    .BPB_HEADS:		resw	1
 15449 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
 15450 00000013 ????                    			resw	1
 15451 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
 15452 00000017 ????                    			resw	1
 15453 00000019 ????????????            			resb	6	; NOTE:  many times these
 15454                                  ;					; 	 6 bytes are omitted
 15455                                  ;					;	 when BPB manipulations
 15456                                  ;					;	 are performed!
 15457                                  .size:
 15458                                  endstruc
 15459                                  
 15460                                  struc A_DEVICEPARAMETERS
 15461 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
 15462 00000001 ??                      .DP_DEVICETYPE:		resb	1
 15463 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
 15464 00000004 ????                    .DP_CYLINDERS:		resw	1
 15465 00000006 ??                      .DP_MEDIATYPE:		resb	1
 15466 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
 15467 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
 15468 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 15469                                  endstruc
 15470                                  
 15471                                  ; ----------------------------------------------------------------------
 15472                                  ; structure, equates for devmark for mem command.
 15473                                  
 15474                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 15475                                  
 15476                                  struc devmark
 15477 00000000 ??                       .id:	    resb 1
 15478 00000001 ????                     .seg:	    resw 1
 15479 00000003 ????                     .size:	    resw 1
 15480 00000005 ??????                   .dum:	    resb 3
 15481 00000008 ????????????????         .filename: resb 8
 15482                                  endstruc
 15483                                  
 15484                                  devmark_stk	equ	'S'
 15485                                  devmark_device	equ	'D'
 15486                                  devmark_ifs	equ	'I'
 15487                                  devmark_buf	equ	'B'
 15488                                  devmark_cds	equ	'L' ; lastdrive
 15489                                  devmark_files	equ	'F'
 15490                                  devmark_fcbs	equ	'X'
 15491                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 15492                                  devmark_ems_stub equ	'E'
 15493                                  
 15494                                  setbrkdone	equ	00000001b
 15495                                  for_devmark	equ	00000010b
 15496                                  not_for_devmark equ	11111101b
 15497                                  
 15498                                  ; ----------------------------------------------------------------------
 15499                                  ; Memory arena structure
 15500                                  
 15501                                  ; 24/03/2019 - Retro DOS v4.0 
 15502                                  ; (MSDOS 6.0, ARENA.INC)
 15503                                  
 15504                                  ;** Arena Header
 15505                                  
 15506                                  struc ARENA
 15507 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 15508 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 15509 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 15510 00000005 ??????                  .RESERVED	resb 3		; reserved
 15511 00000008 ????????????????        .NAME:		resb 8		; owner file name
 15512                                  endstruc
 15513                                  
 15514                                  ; 12/04/2019
 15515                                  
 15516                                  arena_owner_system	EQU 0	; free block indication
 15517                                  
 15518                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 15519                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 15520                                  
 15521                                  ; ----------------------------------------------------------------------
 15522                                  ; Process data block (otherwise known as program header)
 15523                                  
 15524                                  ; 23/03/2019 - Retro DOS v4.0
 15525                                  
 15526                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 15527                                  
 15528                                  FILPERPROC	EQU     20
 15529                                  
 15530                                  struc PDB	; Process_data_block
 15531 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 15532 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 15533 00000004 ??                                      resb 1
 15534 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 15535 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 15536 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 15537 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 15538 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 15539 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 15540 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 15541 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 15542 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 15543 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 15544 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 15545 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 15546 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 15547 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 15548 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 15549 00000042 <res Eh>                .PAD1:		resb 14		; 	
 15550 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 15551 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 15552 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 15553 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 15554 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 15555 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 15556                                  ;.size:
 15557                                  endstruc
 15558                                  
 15559                                  ; ----------------------------------------------------------------------
 15560                                  ; <system call definitions>
 15561                                  
 15562                                  ; 23/03/2019 - Retro DOS v4.0
 15563                                  
 15564                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 15565                                  
 15566                                  ABORT                           EQU 0   ;  0      0
 15567                                  STD_CON_INPUT                   EQU 1   ;  1      1
 15568                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 15569                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 15570                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 15571                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 15572                                  RAW_CON_IO                      EQU 6   ;  6      6
 15573                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 15574                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 15575                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 15576                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 15577                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 15578                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 15579                                  DISK_RESET                      EQU 13  ; 13      D
 15580                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 15581                                  FCB_OPEN                        EQU 15  ; 15      F
 15582                                  FCB_CLOSE                       EQU 16  ; 16     10
 15583                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 15584                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 15585                                  FCB_DELETE                      EQU 19  ; 19     13
 15586                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 15587                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 15588                                  FCB_CREATE                      EQU 22  ; 22     16
 15589                                  FCB_RENAME                      EQU 23  ; 23     17
 15590                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 15591                                  SET_DMA                         EQU 26  ; 26     1A
 15592                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 15593                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 15594                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 15595                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 15596                                  GET_FCB_POSITION                EQU 36  ; 36     24
 15597                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 15598                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 15599                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 15600                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 15601                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 15602                                  GET_DATE                        EQU 42  ; 42     2A
 15603                                  SET_DATE                        EQU 43  ; 43     2B
 15604                                  GET_TIME                        EQU 44  ; 44     2C
 15605                                  SET_TIME                        EQU 45  ; 45     2D
 15606                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 15607                                  ; Extended functionality group
 15608                                  GET_DMA                         EQU 47  ; 47     2F
 15609                                  GET_VERSION                     EQU 48  ; 48     30
 15610                                  KEEP_PROCESS                    EQU 49  ; 49     31
 15611                                  GET_DPB                         EQU 50  ; 50     32
 15612                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 15613                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 15614                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 15615                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 15616                                  CHAR_OPER                       EQU 55  ; 55     37
 15617                                  INTERNATIONAL                   EQU 56  ; 56     38
 15618                                  ;   Directory Group
 15619                                  MKDIR                           EQU 57  ; 57     39
 15620                                  RMDIR                           EQU 58  ; 58     3A
 15621                                  CHDIR                           EQU 59  ; 59     3B
 15622                                  ;   File Group
 15623                                  CREAT                           EQU 60  ; 60     3C
 15624                                  OPEN                            EQU 61  ; 61     3D
 15625                                  CLOSE                           EQU 62  ; 62     3E
 15626                                  READ                            EQU 63  ; 63     3F
 15627                                  WRITE                           EQU 64  ; 64     40
 15628                                  UNLINK                          EQU 65  ; 65     41
 15629                                  LSEEK                           EQU 66  ; 66     42
 15630                                  CHMOD                           EQU 67  ; 67     43
 15631                                  IOCTL                           EQU 68  ; 68     44
 15632                                  XDUP                            EQU 69  ; 69     45
 15633                                  XDUP2                           EQU 70  ; 70     46
 15634                                  CURRENT_DIR                     EQU 71  ; 71     47
 15635                                  ;    Memory Group
 15636                                  ALLOC                           EQU 72  ; 72     48
 15637                                  DEALLOC                         EQU 73  ; 73     49
 15638                                  SETBLOCK                        EQU 74  ; 74     4A
 15639                                  ;    Process Group
 15640                                  EXEC                            EQU 75  ; 75     4B
 15641                                  EXIT                            EQU 76  ; 76     4C
 15642                                  WAITPROCESS			EQU 77  ; 77     4D
 15643                                  FIND_FIRST                      EQU 78  ; 78     4E
 15644                                  ;   Special Group
 15645                                  FIND_NEXT                       EQU 79  ; 79     4F
 15646                                  ; SPECIAL SYSTEM GROUP
 15647                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 15648                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 15649                                  GET_IN_VARS                     EQU 82  ; 82     52
 15650                                  SETDPB                          EQU 83  ; 83     53
 15651                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 15652                                  DUP_PDB                         EQU 85  ; 85     55
 15653                                  RENAME                          EQU 86  ; 86     56
 15654                                  FILE_TIMES                      EQU 87  ; 87     57
 15655                                  ;
 15656                                  ALLOCOPER			EQU 88	; 88     58	
 15657                                  ; Network extention system calls
 15658                                  GetExtendedError		EQU 89	; 89	 59
 15659                                  CreateTempFile			EQU 90	; 90	 5A
 15660                                  CreateNewFile			EQU 91	; 91	 5B
 15661                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 15662                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 15663                                  					;	    CloseByName, CloseUser,
 15664                                  					;	    CloseUserProcess,
 15665                                  					;	    GetOpenFileList
 15666                                  UserOper			EQU 94	; 94	 5E Get and Set
 15667                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 15668                                  xNameTrans			EQU 96	; 96	 60
 15669                                  PathParse			EQU 97	; 97	 61
 15670                                  GetCurrentPSP			EQU 98	; 98	 62
 15671                                  Hongeul 			EQU 99	; 99	 63
 15672                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 15673                                  Set_Printer_Flag		EQU 100 ; 100	 64
 15674                                  GetExtCntry			EQU 101 ; 101	 65
 15675                                  GetSetCdPg			EQU 102 ; 102	 66
 15676                                  ExtHandle			EQU 103 ; 103	 67
 15677                                  Commit				EQU 104 ; 104	 68
 15678                                  GetSetMediaID			EQU 105 ; 105	 69
 15679                                  IFS_IOCTL			EQU 107 ; 107	 6B
 15680                                  ExtOpen 			EQU 108 ; 108	 6C
 15681                                  ;
 15682                                  ;ifdef ROMEXEC
 15683                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 15684                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 15685                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 15686                                  ;endif
 15687                                  ;
 15688                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 15689                                  OEM_C1				EQU 249 ; 249	 F9
 15690                                  OEM_C2				EQU 250 ; 250	 FA
 15691                                  OEM_C3				EQU 251 ; 251	 FB
 15692                                  OEM_C4				EQU 252 ; 252	 FC
 15693                                  OEM_C5				EQU 253 ; 253	 FD
 15694                                  OEM_C6				EQU 254 ; 254	 FE
 15695                                  OEM_C7				EQU 255 ; 255	 FF
 15696                                  
 15697                                  ; ----------------------------------------------------------------------
 15698                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 15699                                  ; ----------------------------------------------------------------------
 15700                                  
 15701                                  ;;	IF	STACKSW
 15702                                  
 15703                                  ;;
 15704                                  ;; Internal Stack Parameters
 15705                                  ;EntrySize		equ	8
 15706                                  ;
 15707                                  ;MinCount		equ	8
 15708                                  ;DefaultCount		equ	9
 15709                                  ;MaxCount		equ	64
 15710                                  ;
 15711                                  ;MinSize 		equ	32
 15712                                  ;DefaultSize		equ	128
 15713                                  ;MaxSize 		equ	512
 15714                                  
 15715                                  ;;	ENDIF
 15716                                  
 15717                                  ; ----------------------------------------------------------------------
 15718                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 15719                                  ; ----------------------------------------------------------------------
 15720                                  					  ;;Rev 3.30 Modification
 15721                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 15722                                  									  
 15723                                  ;*******************************					  
 15724                                  ;System Service call ( Int 15h )					  
 15725                                  ;*******************************					  
 15726                                  ;Function AH = 0C0h, Return system configuration			  
 15727                                  ;For PC and PCJR on return:						  
 15728                                  ;	(AH)	= 80h							  
 15729                                  ;	(CY)	= 1							  
 15730                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 15731                                  ;	(AH)	= 86h							  
 15732                                  ;	(CY)	= 1							  
 15733                                  ;For all others:							  
 15734                                  ;	(AH)	= 0							  
 15735                                  ;	(CY)	= 0							  
 15736                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 15737                                  ; System descriptor :							  
 15738                                  ;	DW	xxxx		length of descriptor in bytes,		  
 15739                                  ;				minimum length = 8			  
 15740                                  ;	DB	xx		model byte				  
 15741                                  ;				0FFh	= PC				  
 15742                                  ;				0FEh	= PC/XT, Portable		  
 15743                                  ;				0FDh	= PC/JR 			  
 15744                                  ;				0FCh	= PC/AT				  
 15745                                  ;				0F9h	= Convertable			  
 15746                                  ;				0F8h	= Model 80			  
 15747                                  ;				0E0 thru 0EFh = reserved		  
 15748                                  ;									  
 15749                                  ;	DB	xx		secondary model byte			  
 15750                                  ;				000h	= PC1				  
 15751                                  ;				000h	= PC/XT, Portable		  
 15752                                  ;				000h	= PC/JR 			  
 15753                                  ;				000h	= PC/AT 			  
 15754                                  ;				001h	= PC/AT Model 339		  
 15755                                  ;				003h	= PC/RT				  
 15756                                  ;				000h	= Convertable			  
 15757                                  ;									  
 15758                                  ;	DB	xx		bios revision level			  
 15759                                  ;				00 for first release, subsequent release  
 15760                                  ;				of code with same model byte and	  
 15761                                  ;				secondary model byte require revison level
 15762                                  ;				to increase by one.			  
 15763                                  ;									  
 15764                                  ;	DB	xx		feature information byte 1		  
 15765                                  ;				X0000000 = 1, bios use DMA channel 3	  
 15766                                  ;					 = 0, DMA channel 3 not used	  
 15767                                  ;									  
 15768                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 15769                                  ;					 = 0, 2nd Interrupt chip not present
 15770                                  ;									  
 15771                                  ;				00X00000 = 1, Real Time Clock present	  
 15772                                  ;					 = 0, Real Time Clock not present 
 15773                                  ;									  
 15774                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 15775                                  ;						called in keyboard interrupt
 15776                                  ;						(Int 09h).		  
 15777                                  ;					 = 0, Keyboard escape sequence not
 15778                                  ;						called. 		  
 15779                                  ;				0000XXXX reserved			  
 15780                                  ;									  
 15781                                  ;	DB	xx		feature information byte 2 - reserved	  
 15782                                  ;									  
 15783                                  ;	DB	xx		feature information byte 2 - reserved	  
 15784                                  ;									  
 15785                                  ;	DB	xx		feature information byte 2 - reserved	  
 15786                                  ;									  
 15787                                  ;	DB	xx		feature information byte 2 - reserved	  
 15788                                  ;									  
 15789                                  
 15790                                  ; 22/03/2019									  
 15791                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
 15792 00000000 ????                    .bios_sd_leng:		resw 1				  
 15793 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
 15794                                  .bios_sd_scnd_modelbyte: 
 15795 00000003 ??                      			resb 1					  
 15796 00000004 ??                      			resb 1					  
 15797 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
 15798 00000006 ????????                			resb 4					  
 15799                                  endstruc					  
 15800                                  									  
 15801                                  ;FeatureByte1	bit map equates 					  
 15802                                  DMAchannel3		equ 10000000b					  
 15803                                  ScndIntController	equ 01000000b					  
 15804                                  RealTimeClock		equ 00100000b					  
 15805                                  KeyEscapeSeq		equ 00010000b					  
 15806                                  					;;End of Modification
 15807                                  
 15808                                  ; ----------------------------------------------------------------------
 15809                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 15810                                  ; ----------------------------------------------------------------------
 15811                                  ; 22/03/2019 - Retro DOS v4.0
 15812                                  
 15813                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 15814                                  
 15815                                  struc SysInitVars
 15816                                  ; MSDOS 3.3
 15817 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 15818 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 15819 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 15820 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 15821 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 15822 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 15823 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 15824 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 15825 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 15826 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 15827 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 15828 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 15829                                  ; MSDOS 6.0
 15830 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 15831 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 15832 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 15833 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 15834                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 15835 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 15836 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 15837 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 15838 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 15839 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 15840 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 15841 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 15842                                  .size:
 15843                                  endstruc
 15844                                  
 15845                                  ;This is added for more information exchage between DOS, BIOS.
 15846                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 15847                                  
 15848                                  ; 22/03/2019
 15849                                  struc SysInitVars_Ext
 15850 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 15851 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 15852                                  endstruc
 15853                                  
 15854                                  ; 09/06/2018
 15855                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 15856                                  SYSI_DPB    equ	0
 15857                                  SYSI_SFT    equ 4
 15858                                  SYSI_CLOCK  equ 8
 15859                                  SYSI_CON    equ 12
 15860                                  SYSI_MAXSEC equ 16
 15861                                  SYSI_BUF    equ 18 		
 15862                                  SYSI_CDS    equ 22
 15863                                  SYSI_FCB    equ 26
 15864                                  SYSI_KEEP   equ 30
 15865                                  SYSI_NUMIO  equ	32
 15866                                  SYSI_NCDS   equ	33
 15867                                  SYSI_DEV    equ 34
 15868                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 15869                                  SYSI_ATTR	  equ 38
 15870                                  SYSI_STRAT	  equ 40
 15871                                  SYSI_INTER	  equ 42
 15872                                  SYSI_NAME	  equ 44
 15873                                  SYSI_SPLICE	  equ 52
 15874                                  SYSI_IBMDOS_SIZE  equ 53
 15875                                  SYSI_IFS_DOSCALL@ equ 55
 15876                                  SYSI_IFS	  equ 59
 15877                                  SYSI_BUFFERS	  equ 63
 15878                                  SYSI_BOOT_DRIVE   equ 67
 15879                                  SYSI_DWMOVE	  equ 68
 15880                                  SYSI_EXT_MEM	  equ 69
 15881                                  
 15882                                  ;The SYSI_BUF of SysInitVars points to the following structure
 15883                                  
 15884                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 15885                                  
 15886                                  struc BUFFINF 	; BUFFINFO
 15887 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 15888 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 15889 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 15890 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 15891                                  
 15892 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 15893                                  				; are in HMA
 15894 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 15895                                  				;  used to read/write on disks
 15896 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 15897 00000015 ????                    .UU_EMS_NPA640:		resw 1
 15898 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 15899 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 15900 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 15901 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 15902 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 15903 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 15904 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 15905                                  .size:
 15906                                  endstruc
 15907                                  
 15908                                  ; ----------------------------------------------------------------------
 15909                                  ; CURDIR.INC (MSDOS 6.0 - 1991) 	
 15910                                  ; ----------------------------------------------------------------------
 15911                                  ; 22/03/2019 - Retro DOS v4.0
 15912                                  
 15913                                  ;**	CDS - Current Directory Structure
 15914                                  ;
 15915                                  ; CDS items are used bu the internal routines to store cluster numbers and
 15916                                  ; network identifiers for each logical name.  The ID field is used dually,
 15917                                  ; both as net ID and for a cluster number for local devices. In the case
 15918                                  ; of local devices, the cluster number will be -1 if there is a potential
 15919                                  ; of the disk being changed or if the path must be recracked.
 15920                                  ;
 15921                                  ;	Some pathnames have special preambles, such as
 15922                                  ;
 15923                                  ;		\\machine\sharename\...
 15924                                  ;	For these pathnames we can't allow ".." processing to back us
 15925                                  ;	up into the special front part of the name.  The CURDIR_END field
 15926                                  ;	holds the address of the seperator character which marks
 15927                                  ;	the split between the special preamble and the regular
 15928                                  ;	path list; ".." processing isn't allowed to back us up past
 15929                                  ;	(i.e., before) CURDIR_END
 15930                                  ;	For the root, it points at the leading /. For net
 15931                                  ;	assignments it points at the end (nul) of the initial assignment:
 15932                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 15933                                  ;	  ^		 ^		     ^
 15934                                  
 15935                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 15936                                  TEMPLEN 	EQU	DIRSTRLEN*2
 15937                                  
 15938                                  struc 		curdir_list
 15939                                  ; MSDOS 3.3
 15940 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 15941 00000043 ????                    .cdir_flags	resw	1		; various flags
 15942 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 15943 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 15944 0000004D ????                    .cdir_usr_word	resw	1
 15945 0000004F ????                    .cdir_end	resw	1		; end of assignment
 15946                                  ; MSDOS 6.0
 15947 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 15948 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 15949 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 15950                                  .size:
 15951                                  endstruc
 15952                                  
 15953                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 15954                                  						; ASM87 which doesn't allow
 15955                                  						; Size directive as a macro
 15956                                  						; argument
 15957                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 15958                                  
 15959                                  ;**	Flag values for CURDIR_FLAGS
 15960                                  
 15961                                  ;Flag word masks
 15962                                  curdir_isnet	EQU	1000000000000000B
 15963                                  curdir_isifs	EQU	1000000000000000B
 15964                                  curdir_inuse	EQU	0100000000000000B
 15965                                  curdir_splice	EQU	0010000000000000B
 15966                                  curdir_local	EQU	0001000000000000B
 15967                                  
 15968                                  ; ----------------------------------------------------------------------
 15969                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 15970                                  ; ----------------------------------------------------------------------
 15971                                  ; 25/03/2019 - Retro DOS v4.0
 15972                                  
 15973                                  ; system file table
 15974                                  
 15975                                  ;**	System File Table SuperStructure
 15976                                  ;
 15977                                  ;	The system file table entries are allocated in contiguous groups.
 15978                                  ;	There may be more than one such groups; the SF "superstructure"
 15979                                  ;	tracks the groups.
 15980                                  
 15981                                  struc	SF
 15982 00000000 ????????                .SFLink:	resd	1
 15983 00000004 ????                    .SFCount:	resw	1		; number of entries
 15984 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 15985                                  .size:
 15986                                  endstruc
 15987                                  
 15988                                  ;**	System file table entry
 15989                                  ;
 15990                                  ;	These are the structures which are at SFTABLE in the SF structure.
 15991                                  
 15992                                  struc	SF_ENTRY
 15993 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 15994                                  					;   if FCB then ref count
 15995 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 15996 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 15997 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 15998                                  					; Bit 15 = 1 if remote file
 15999                                  					;	 = 0 if local file or device
 16000                                  					; Bit 14 = 1 if date/time is not to be
 16001                                  					;   set from clock at CLOSE.  Set by
 16002                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 16003                                  					;   other reseters of the dirty bit
 16004                                  					;   (WRITE)
 16005                                  					; Bit 13 = Pipe bit (reserved)
 16006                                  					;
 16007                                  					; Bits 0-7 (old FCB_devid bits)
 16008                                  					; If remote file or local file, bit
 16009                                  					; 6=0 if dirty Device ID number, bits
 16010                                  					; 0-5 if local file.
 16011                                  					; bit 7=0 for local file, bit 7
 16012                                  					;      =1 for local I/O device
 16013                                  					; If local I/O device, bit 6=0 if EOF (input)
 16014                                  					;		Bit 5=1 if Raw mode
 16015                                  					;		Bit 0=1 if console input device
 16016                                  					;		Bit 1=1 if console output device
 16017                                  					;		Bit 2=1 if null device
 16018                                  					;		Bit 3=1 if clock device
 16019 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 16020                                  					; to device header if local device,
 16021                                  					; points to net device header if
 16022                                  					; remote
 16023 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 16024                                  ;.sf_lstclus:	resw	1 ; *	
 16025 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 16026 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 16027 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 16028 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 16029                                  ;
 16030                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 16031                                  ; ID
 16032                                  ;
 16033 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 16034 0000001B ????                    .sf_dirsec:	resw	1		; Sector number of directory sector for this file
 16035 0000001D ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 16036                                  ;
 16037                                  ; End of 7 bytes of file-system specific info.
 16038                                  ;
 16039 0000001E <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 16040                                  					; directory entry.  This is used by
 16041                                  					; close to detect file deleted and
 16042                                  					; disk changed errors.
 16043                                  ; SHARING INFO
 16044 00000029 ????????                .sf_chain:	resd	1		; link to next SF
 16045 0000002D ????                    .sf_UID:	resw	1
 16046 0000002F ????                    .sf_PID:	resw	1
 16047 00000031 ????                    .sf_MFT:	resw	1
 16048 00000033 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 16049 00000035 ????????                .sf_IFS_HDR:	resd 	1 ; **
 16050                                  .size:
 16051                                  endstruc
 16052                                  
 16053                                  ; ----------------------------------------------------------------------
 16054                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987) 	
 16055                                  ; ----------------------------------------------------------------------
 16056                                  ; 11/06/2018 - Retro DOS v3.0
 16057                                  
 16058                                  ;Equates for COUNTRY INFORMATION.
 16059                                  SetCountryInfo		EQU	1	;country info
 16060                                  SetUcase		EQU	2	;uppercase table
 16061                                  SetLcase		EQU	3	;lowercase table (Reserved)
 16062                                  SetUcaseFile		EQU	4	;uppercase file spec table
 16063                                  SetFileList		EQU	5	;valid file character list
 16064                                  SetCollate		EQU	6	;collating sequence
 16065                                  SetDBCS 		EQU	7	;double byte character set
 16066                                  SetALL			EQU	-1	;all the entries
 16067                                  
 16068                                  ;DOS country and code page information table structure.
 16069                                  ;Internally, IBMDOS gives a pointer to this table.
 16070                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 16071                                  ;this structure.
 16072                                  
 16073                                  struc country_cdpg_info ; DOS_country_cdpg_info
 16074 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 16075 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 16076 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 16077 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 16078 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 16079 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 16080                                  
 16081 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 16082 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 16083                                  
 16084 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 16085 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 16086                                  
 16087 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 16088 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 16089                                  
 16090 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 16091 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 16092 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 16093 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 16094 00000067 ????                    .ccDFormat:		resw	1	;date format
 16095 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 16096                                  					;5 byte of (currency symbol+0)
 16097 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 16098 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 16099 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 16100 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 16101 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 16102 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 16103 00000078 ??                      .ccTFormat:		resb	1	;time format
 16104 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 16105 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 16106 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 16107                                  .size:
 16108                                  endstruc
 16109                                  
 16110                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 16111                                  
 16112                                  ; ======================================================================
 16113                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 16114                                  ; ======================================================================
 16115                                  ; 21/03/2019 - Retro DOS v4.0
 16116                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 16117                                  
 16118                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 16119                                  ; 21/10/2022
 16120                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 16121                                  ; 22/10/2022
 16122                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 16123                                  ; 09/12/2022
 16124                                  DOSBIOCODESEG equ IOSYSCODESEG
 16125                                  
 16126                                  ; Note: These offset addresses must be chanqed when the code 
 16127                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 16128                                  
 16129                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 16130                                  
 16131                                  ; 09/12/2022
 16132                                  %if 0
 16133                                  
 16134                                  ; 13/05/2019
 16135                                  
 16136                                  ;IsWin386         equ 08CFh
 16137                                  ;V86_Crit_SetFocus equ 08D0h
 16138                                  ; 21/10/2022
 16139                                  IsWin386          equ 08D0h
 16140                                  V86_Crit_SetFocus equ 08D1h 
 16141                                  
 16142                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 16143                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 16144                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 16145                                  
 16146                                  ;SysinitPresent	  equ 08FCh
 16147                                  ; 21/10/2022
 16148                                  SysinitPresent	  equ 08FDh
 16149                                  
 16150                                  inHMA		  equ 000Dh
 16151                                  xms		  equ 000Eh
 16152                                  ;FreeHMAPtr	  equ 08F6h
 16153                                  ;multrk_flag	  equ 0533h
 16154                                  ;ec35_flag	  equ 0535h
 16155                                  ;EOT		  equ 012Eh
 16156                                  ; 21/10/2022
 16157                                  FreeHMAPtr	  equ 08F7h
 16158                                  multrk_flag	  equ 052Fh
 16159                                  ec35_flag	  equ 0531h
 16160                                  EOT		  equ 012Ch
 16161                                  
 16162                                  ;NextStack	  equ 08BFh
 16163                                  ;IT_StackLoc	  equ 08C5h
 16164                                  ;IT_StackSize	  equ 08C9h
 16165                                  ; 21/10/2022
 16166                                  NextStack	  equ 08C0h
 16167                                  IT_StackLoc	  equ 08C6h
 16168                                  IT_StackSize	  equ 08CAh
 16169                                  
 16170                                  ;MoveDOSIntoHMA	  equ 08F8h
 16171                                  ; 21/10/2022
 16172                                  MoveDOSIntoHMA	  equ 08F9h
 16173                                  
 16174                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 16175                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 16176                                  ; 21/10/2022
 16177                                  INT19SEM equ 0640h ; (iosys5.txt)
 16178                                  I19_LST  equ 0641h ; (iosys5.txt)
 16179                                  
 16180                                  %endif
 16181                                  
 16182                                  ; 09/12/2022
 16183                                  seg_reinit equ _seg_reinit
 16184                                  ec35_flag  equ ec35flag		
 16185                                  INT19SEM   equ int19sem
 16186                                  I19_LST    equ i19_lst
 16187                                  
 16188                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 16189                                  INT19OLD08 equ I19_LST+6
 16190                                  INT19OLD09 equ I19_LST+11
 16191                                  INT19OLD0A equ I19_LST+16
 16192                                  INT19OLD0B equ I19_LST+21
 16193                                  INT19OLD0C equ I19_LST+26
 16194                                  INT19OLD0D equ I19_LST+31
 16195                                  INT19OLD0E equ I19_LST+36
 16196                                  INT19OLD70 equ I19_LST+41
 16197                                  INT19OLD72 equ I19_LST+46
 16198                                  INT19OLD73 equ I19_LST+51
 16199                                  INT19OLD74 equ I19_LST+56
 16200                                  INT19OLD76 equ I19_LST+61
 16201                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 16202                                  
 16203                                  ; 09/12/2022
 16204                                  %if 0
 16205                                  
 16206                                  ;keyrd_func	equ 04E9h
 16207                                  ;keysts_func	equ 04EAh
 16208                                  ;t_switch	equ 04F6h
 16209                                  ; 21/10/2022
 16210                                  keyrd_func	equ 04E5h
 16211                                  keysts_func	equ 04E6h
 16212                                  t_switch	equ 04F2h
 16213                                  
 16214                                  ; 22/10/2022
 16215                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 16216                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 16217                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 16218                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 16219                                  
 16220                                  %endif
 16221                                  
 16222                                  ; 09/12/2022
 16223                                  BCODESTART	equ BIOSDATAWORD
 16224                                  RE_INIT		equ re_init
 16225                                  
 16226                                  ; ----------------------------------------------------------------------
 16227                                  ; CONFIG.INC (MSDOS 6.0 - 1991) 	
 16228                                  ; ----------------------------------------------------------------------
 16229                                  ; 15/04/2019 - Retro DOS v4.0
 16230                                  
 16231                                  CONFIG_BEGIN        equ  '['
 16232                                  CONFIG_BREAK        equ  'C'
 16233                                  CONFIG_BUFFERS      equ  'B'
 16234                                  CONFIG_COMMENT      equ  'Y'
 16235                                  CONFIG_COUNTRY      equ  'Q'
 16236                                  CONFIG_DEVICE       equ  'D'
 16237                                  CONFIG_DEVICEHIGH   equ  'U'
 16238                                  CONFIG_DOS          equ  'H'
 16239                                  CONFIG_DRIVPARM     equ  'P'
 16240                                  CONFIG_FCBS         equ  'X'
 16241                                  CONFIG_FILES        equ  'F'
 16242                                  CONFIG_INCLUDE      equ  'J'
 16243                                  CONFIG_INSTALL      equ  'I'
 16244                                  CONFIG_INSTALLHIGH  equ  'W'
 16245                                  CONFIG_LASTDRIVE    equ  'L'
 16246                                  CONFIG_MENUCOLOR    equ  'R'
 16247                                  CONFIG_MENUDEFAULT  equ  'A'
 16248                                  CONFIG_MENUITEM     equ  'E'
 16249                                  CONFIG_MULTITRACK   equ  'M'
 16250                                  CONFIG_NUMLOCK      equ  'N'
 16251                                  CONFIG_REM          equ  '0'
 16252                                  CONFIG_SEMICOLON    equ  ';'
 16253                                  CONFIG_SET          equ  'V'
 16254                                  CONFIG_SHELL        equ  'S'
 16255                                  CONFIG_STACKS       equ  'K'
 16256                                  CONFIG_SUBMENU      equ  'O'
 16257                                  CONFIG_SWITCHES     equ  '1'
 16258                                  
 16259                                  CONFIG_UNKNOWN      equ  'Z'
 16260                                  
 16261                                  CONFIG_OPTION_QUERY equ 80h
 16262                                  
 16263                                  ; ----------------------------------------------------------------------
 16264                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991) 	
 16265                                  ; ----------------------------------------------------------------------
 16266                                  ; 21/03/2019 - Retro DOS v4.0
 16267                                  
 16268                                  true	equ	0FFFFh
 16269                                  false	equ	0
 16270                                  cr	equ	13
 16271                                  lf	equ	10
 16272                                  tab	equ	9
 16273                                  
 16274                                  multMULT	   equ	4Ah
 16275                                  multMULTGETHMAPTR  equ	1
 16276                                  multMULTALLOCHMA   equ	2
 16277                                  
 16278                                  ;NOEXEC    equ	FALSE
 16279                                  
 16280                                  stacksw    equ	true	;include switchable hardware stacks
 16281                                  mycds_size equ	88	;size of curdir_list. if it is not
 16282                                  			;the same, then will generate compile error.
 16283                                  
 16284                                  entrysize   equ     8
 16285                                  
 16286                                  mincount    equ     8
 16287                                  defaultcount equ    9
 16288                                  maxcount    equ     64
 16289                                  
 16290                                  minsize     equ     32
 16291                                  defaultsize equ     128
 16292                                  maxsize     equ     512
 16293                                  
 16294                                  ;%define allocbyte  byte [es:bp+0]
 16295                                  ;%define intlevel   byte [es:bp+1]
 16296                                  ;%define savedsp    word [es:bp+2]
 16297                                  ;%define savedss    word [es:bp+4]
 16298                                  ;%define newsp	    word [es:bp+6]
 16299                                  
 16300                                  allocbyte   equ     0
 16301                                  intlevel    equ     1
 16302                                  savedsp     equ     2
 16303                                  savedss     equ     4
 16304                                  newsp       equ     6
 16305                                  
 16306                                  free	    equ     0
 16307                                  allocated   equ     1
 16308                                  overflowed  equ     2
 16309                                  clobbered   equ     3
 16310                                  
 16311                                  ;---------------------------------------
 16312                                  ; external variable defined in ibmbio module for multi-track
 16313                                  
 16314                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 16315                                  			  ; it on after handling config.sys file as a
 16316                                  			  ; default value,if multrk_flag = multrk_off1.
 16317                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 16318                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 16319                                  
 16320                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 16321                                  
 16322                                  SYSINIT$:
 16323                                  	;IF	STACKSW 
 16324                                  	; include MSSTACK.INC	;Main stack program and data definitions
 16325                                  	; include STKMES.INC	;Fatal stack error message
 16326                                  	;   public Endstackcode
 16327                                  ;Endstackcode	label byte
 16328                                  	;ENDIF
 16329                                  
 16330                                  ; 05/07/2018
 16331                                  ; ----------------------------------------------------------------------
 16332                                  ; 04/06/2018 - Retro DOS v3.0
 16333                                  
 16334                                  ; ----------------------------------------------------------------------
 16335                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 16336                                  ; ----------------------------------------------------------------------
 16337                                  
 16338                                  ;	MSStack.inc
 16339                                  ;
 16340                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 16341                                  ;	should follow the standard Interrupt Sharing Scheme which has
 16342                                  ;	a standard header structure.
 16343                                  ;	Fyi, the following shows the relations between
 16344                                  ;	the interrupt vector and interrupt level.
 16345                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 16346                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 16347                                  ;	MSSTACK module modifies the following interrupt vectors
 16348                                  ;	to meet the standard Interrupt Sharing standard;
 16349                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 16350                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 16351                                  ;	should be initialized to indicat whether this interrupt handler is
 16352                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 16353                                  ;	program header is initialized in STKINIT.INC module.
 16354                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 16355                                  ;
 16356                                  
 16357                                  ;  User specifies the number of stack elements - default = 9
 16358                                  ;						 minimum = 8
 16359                                  ;						 maximum = 64
 16360                                  ;
 16361                                  ;  Intercepts Asynchronous Hardware Interrupts only
 16362                                  ;
 16363                                  ;  Picks a stack from pool of stacks and switches to it
 16364                                  ;
 16365                                  ;  Calls the previously saved interrupt vector after pushing flags
 16366                                  ;
 16367                                  ;  On return, returns the stack to the stack pool
 16368                                  ;
 16369                                  
 16370                                  ; This is a modification of STACKS:
 16371                                  ; 1. To fix a bug which was causing the program to take up too much space.
 16372                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 16373                                  ;    . Clobbers the stack that got too big instead of innocent stack
 16374                                  ;    . Allows system to work if the only stack that got too big was the most
 16375                                  ;      deeply nested one
 16376                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 16377                                  ; 4. Does not intercept any interupts on a PCjr.
 16378                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 16379                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 16380                                  
 16381                                  		;EVEN
 16382                                  ;align 2
 16383                                  		; 21/10/2022
 16384                                  
 16385 00000000 0000                    		dw	0	; spare field but leave these in order
 16386 00000002 0000                    stackcount:	dw	0
 16387 00000004 0000                    stackat: 	dw	0
 16388 00000006 0000                    stacksize:	dw	0
 16389 00000008 0000                    stacks:		dw	0
 16390 0000000A 0000                    		dw	0
 16391                                  
 16392 0000000C [0800]                  firstentry:	dw	stacks
 16393 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16394 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16395                                  
 16396                                  ;***********************************************************************
 16397                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 16398                                  
 16399                                  ; ----------------------------------------------------------------------
 16400                                  
 16401 00000012 00000000                old02:	dd	0
 16402                                  
 16403                                  int02:
 16404                                  
 16405                                  ; *********************************************************************
 16406                                  ;
 16407                                  ; this is special support for the pc convertible / nmi handler
 16408                                  ;
 16409                                  ;	on the pc convertible, there is a situation where an nmi can be 
 16410                                  ;	caused by using the "out" instructions to certain ports. when this
 16411                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 16412                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 16413                                  ;	includes other type of interrupts (hardware and software), and
 16414                                  ;	also includes other type of nmi's. when any nmi has occured,
 16415                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 16416                                  ;	the software takes specific steps to allow further interrupting.
 16417                                  ;
 16418                                  ;	for pc convertible, the situation where the nmi is generated by the
 16419                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 16420                                  ;	otherwords, it is actually a "restartable exception". in this
 16421                                  ;	case, the software handler must be able to get to the stack in
 16422                                  ;	order to figure out what instruction caused the problem, where
 16423                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 16424                                  ;	we will not switch stacks in this situation. this situation is
 16425                                  ;	detected by interrogating port 62h, and checking for a bit value
 16426                                  ;	of 80h. if set, *****do not switch stacks*****.
 16427                                  ;
 16428                                  ; *********************************************************************
 16429                                  
 16430 00000016 50                      	push	ax
 16431 00000017 06                      	push	es
 16432 00000018 B800F0                  	mov	ax,0F000h
 16433 0000001B 8EC0                    	mov	es,ax
 16434                                  	; 02/11/2022
 16435 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 16436 00000023 07                      	pop	es
 16437 00000024 750C                    	jne	short normal02
 16438                                  
 16439 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 16440                                  				; 0-3: values of DIP switches
 16441                                  				; 5: 1=Timer 2 channel out
 16442                                  				; 6: 1=I/O channel check
 16443                                  				; 7: 1=RAM parity check error occurred.
 16444 00000028 A880                    	test	al,80h
 16445 0000002A 7406                    	jz	short normal02
 16446                                  special02:
 16447 0000002C 58                      	pop	ax
 16448 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 16449                                  normal02:
 16450 00000032 58                      	pop	ax
 16451 00000033 E81101                  	call	do_int_stacks
 16452 00000036 [1200]                  	dw	old02
 16453                                  
 16454                                  ; ----------------------------------------------------------------------
 16455                                  
 16456 00000038 00000000                old08:	dd	0
 16457                                  
 16458                                  int08:
 16459 0000003C E80801                  	call	do_int_stacks
 16460 0000003F [3800]                  	dw	old08
 16461                                  
 16462                                  ; ----------------------------------------------------------------------
 16463                                  
 16464 00000041 00000000                old09:	dd	0
 16465                                  
 16466                                  int09:
 16467                                  
 16468                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 16469                                  ; as its first instruction for compatibility reasons
 16470                                  
 16471 00000045 EB02                    	jmp	short keyboard_lbl
 16472 00000047 90                      	nop
 16473 00000048 00                      	db	0
 16474                                  
 16475                                  keyboard_lbl:
 16476 00000049 E8FB00                  	call	do_int_stacks
 16477 0000004C [4100]                  	dw	old09
 16478                                  
 16479                                  ; ----------------------------------------------------------------------
 16480                                  
 16481 0000004E 00000000                old70:	dd	0
 16482                                  
 16483                                  int70:
 16484 00000052 E8F200                  	call	do_int_stacks
 16485 00000055 [4E00]                  	dw	old70
 16486                                  
 16487                                  ; ----------------------------------------------------------------------
 16488                                  
 16489                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 16490                                  ;public	int&a
 16491                                  ;public	old&a
 16492                                  ;public	firstflag&a
 16493                                  ;int&a	proc	far
 16494                                  ;	jmp	short entry_int&a&_stk
 16495                                  ;old&a	dd	  0		;forward pointer
 16496                                  ;	dw	  424bh 	;compatible signature for int. sharing
 16497                                  ;firstflag&a db   0		;the firstly hooked.
 16498                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 16499                                  ;	db	7 dup (0)	;reserved for future.
 16500                                  ;entry_int&a&_stk:
 16501                                  ;	call	do_int_stacks
 16502                                  ;	dw	old&a
 16503                                  ;intret_&a:
 16504                                  ;	iret
 16505                                  ;int&a	endp
 16506                                  ;	endm
 16507                                  
 16508                                  ; ----------------------------------------------------------------------
 16509                                  
 16510                                  int0A:
 16511 00000057 EB10                    	jmp	short entry_int0A_stk
 16512 00000059 00000000                old0A:	dd	0	
 16513 0000005D 4B42                    	dw	424Bh
 16514                                  firstflag0A:
 16515 0000005F 00                      	db	0
 16516 00000060 EB0C                    	jmp	short intret_0A
 16517 00000062 00<rep 7h>              	times	7 db 0
 16518                                  
 16519                                  entry_int0A_stk:
 16520 00000069 E8DB00                  	call	do_int_stacks
 16521 0000006C [5900]                  	dw	old0A
 16522                                  intret_0A:
 16523 0000006E CF                      	iret
 16524                                  
 16525                                  ; ----------------------------------------------------------------------
 16526                                  
 16527                                  int0B:
 16528 0000006F EB10                    	jmp	short entry_int0B_stk
 16529 00000071 00000000                old0B:	dd	0	
 16530 00000075 4B42                    	dw	424Bh
 16531                                  firstflag0B:
 16532 00000077 00                      	db	0
 16533 00000078 EB0C                    	jmp	short intret_0B
 16534 0000007A 00<rep 7h>              	times	7 db 0
 16535                                  
 16536                                  entry_int0B_stk:
 16537 00000081 E8C300                  	call	do_int_stacks
 16538 00000084 [7100]                  	dw	old0B
 16539                                  intret_0B:
 16540 00000086 CF                      	iret
 16541                                  
 16542                                  ; ----------------------------------------------------------------------
 16543                                  
 16544                                  int0C:
 16545 00000087 EB10                    	jmp	short entry_int0C_stk
 16546 00000089 00000000                old0C:	dd	0	
 16547 0000008D 4B42                    	dw	424Bh
 16548                                  firstflag0C:
 16549 0000008F 00                      	db	0
 16550 00000090 EB0C                    	jmp	short intret_0C
 16551 00000092 00<rep 7h>              	times	7 db 0
 16552                                  
 16553                                  entry_int0C_stk:
 16554 00000099 E8AB00                  	call	do_int_stacks
 16555 0000009C [8900]                  	dw	old0C
 16556                                  intret_0C:
 16557 0000009E CF                      	iret
 16558                                  
 16559                                  ; ----------------------------------------------------------------------
 16560                                  
 16561                                  int0D:
 16562 0000009F EB10                    	jmp	short entry_int0D_stk
 16563 000000A1 00000000                old0D:	dd	0	
 16564 000000A5 4B42                    	dw	424Bh
 16565                                  firstflag0D:
 16566 000000A7 00                      	db	0
 16567 000000A8 EB0C                    	jmp	short intret_0D
 16568 000000AA 00<rep 7h>              	times	7 db 0
 16569                                  
 16570                                  entry_int0D_stk:
 16571 000000B1 E89300                  	call	do_int_stacks
 16572 000000B4 [A100]                  	dw	old0D
 16573                                  intret_0D:
 16574 000000B6 CF                      	iret
 16575                                  
 16576                                  ; ----------------------------------------------------------------------
 16577                                  
 16578                                  int0E:
 16579 000000B7 EB10                    	jmp	short entry_int0E_stk
 16580 000000B9 00000000                old0E:	dd	0	
 16581 000000BD 4B42                    	dw	424Bh
 16582                                  firstflag0E:
 16583 000000BF 00                      	db	0
 16584 000000C0 EB0C                    	jmp	short intret_0E
 16585 000000C2 00<rep 7h>              	times	7 db 0
 16586                                  
 16587                                  entry_int0E_stk:
 16588 000000C9 E87B00                  	call	do_int_stacks
 16589 000000CC [B900]                  	dw	old0E
 16590                                  intret_0E:
 16591 000000CE CF                      	iret
 16592                                  
 16593                                  ; ----------------------------------------------------------------------
 16594                                  
 16595                                  int72:
 16596 000000CF EB10                    	jmp	short entry_int72_stk
 16597 000000D1 00000000                old72:	dd	0	
 16598 000000D5 4B42                    	dw	424Bh
 16599                                  firstflag72:
 16600 000000D7 00                      	db	0
 16601 000000D8 EB0C                    	jmp	short intret_72
 16602 000000DA 00<rep 7h>              	times	7 db 0
 16603                                  
 16604                                  entry_int72_stk:
 16605 000000E1 E86300                  	call	do_int_stacks
 16606 000000E4 [D100]                  	dw	old72
 16607                                  intret_72:
 16608 000000E6 CF                      	iret
 16609                                  
 16610                                  ; ----------------------------------------------------------------------
 16611                                  
 16612                                  int73:
 16613 000000E7 EB10                    	jmp	short entry_int73_stk
 16614 000000E9 00000000                old73:	dd	0	
 16615 000000ED 4B42                    	dw	424Bh
 16616                                  firstflag73:
 16617 000000EF 00                      	db	0
 16618 000000F0 EB0C                    	jmp	short intret_73
 16619 000000F2 00<rep 7h>              	times	7 db 0
 16620                                  
 16621                                  entry_int73_stk:
 16622 000000F9 E84B00                  	call	do_int_stacks
 16623 000000FC [E900]                  	dw	old73
 16624                                  intret_73:
 16625 000000FE CF                      	iret
 16626                                  
 16627                                  ; ----------------------------------------------------------------------
 16628                                  
 16629                                  int74:
 16630 000000FF EB10                    	jmp	short entry_int74_stk
 16631 00000101 00000000                old74:	dd	0	
 16632 00000105 4B42                    	dw	424Bh
 16633                                  firstflag74:
 16634 00000107 00                      	db	0
 16635 00000108 EB0C                    	jmp	short intret_74
 16636 0000010A 00<rep 7h>              	times	7 db 0
 16637                                  
 16638                                  entry_int74_stk:
 16639 00000111 E83300                  	call	do_int_stacks
 16640 00000114 [0101]                  	dw	old74
 16641                                  intret_74:
 16642 00000116 CF                      	iret
 16643                                  
 16644                                  ; ----------------------------------------------------------------------
 16645                                  
 16646                                  int76:
 16647 00000117 EB10                    	jmp	short entry_int76_stk
 16648 00000119 00000000                old76:	dd	0	
 16649 0000011D 4B42                    	dw	424Bh
 16650                                  firstflag76:
 16651 0000011F 00                      	db	0
 16652 00000120 EB0C                    	jmp	short intret_76
 16653 00000122 00<rep 7h>              	times	7 db 0
 16654                                  
 16655                                  entry_int76_stk:
 16656 00000129 E81B00                  	call	do_int_stacks
 16657 0000012C [1901]                  	dw	old76
 16658                                  intret_76:
 16659 0000012E CF                      	iret
 16660                                  
 16661                                  ; ----------------------------------------------------------------------
 16662                                  
 16663                                  int77:
 16664 0000012F EB10                    	jmp	short entry_int77_stk
 16665 00000131 00000000                old77:	dd	0	
 16666 00000135 4B42                    	dw	424Bh
 16667                                  firstflag77:
 16668 00000137 00                      	db	0
 16669 00000138 EB0C                    	jmp	short intret_77
 16670 0000013A 00<rep 7h>              	times	7 db 0
 16671                                  
 16672                                  entry_int77_stk:
 16673 00000141 E80300                  	call	do_int_stacks
 16674 00000144 [3101]                  	dw	old77
 16675                                  intret_77:
 16676 00000146 CF                      	iret
 16677                                  
 16678                                  ; ----------------------------------------------------------------------
 16679                                  
 16680                                  ;********************************************************************
 16681                                  ;common routines
 16682                                  ;********************************************************************
 16683                                  
 16684                                  ; do interrupt stack switching. the fake return address holds
 16685                                  ; a pointer to the far-pointer of the actual interrupt
 16686                                  ; service routine
 16687                                  
 16688                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 16689                                  ; 21/03/2019 - Retro DOS v4.0
 16690                                  
 16691                                  ;allocbyte   equ 0
 16692                                  ;intlevel    equ 1
 16693                                  ;savedsp     equ 2
 16694                                  ;savedss     equ 4
 16695                                  ;newsp       equ 6
 16696                                  
 16697                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 SYSINIT)
 16698                                  ; (MSDOS 6.21 IO:SYS, SYSINIT:0147h)
 16699                                  
 16700                                  do_int_stacks:
 16701 00000147 50                      	push	ax
 16702 00000148 55                      	push	bp
 16703 00000149 06                      	push	es
 16704 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 16705 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 16706 00000154 B001                    	mov	al,allocated ; 1
 16707                                  	; 21/10/2022
 16708                                  	;xchg	[es:bp+allocbyte],al 
 16709                                  	; 11/12/2022
 16710 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 16711 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 16712 0000015C 7551                    	jne	short notfree02
 16713                                  
 16714 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 16715                                  found02:
 16716 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 16717 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 16718                                  
 16719 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 16720                                  
 16721 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 16722                                  	; 21/10/2022
 16723                                  	;mov	bp,[es:bp+6]
 16724                                  	; 11/12/2022
 16725                                  	;cmp	[es:bp+0],ax	
 16726 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 16727 00000176 7544                    	jne	short foundbad02
 16728                                  
 16729                                  	; 02/07/2023 (MSDOS 6.21 SYSINIT code)
 16730 00000178 8CC0                    	mov	ax,es			; point ss,sp to the new stack
 16731 0000017A 8EC5                    	mov	es,bp
 16732 0000017C 89E5                    	mov	bp,sp
 16733 0000017E 8B6E06                  	mov	bp,[bp+6]
 16734 00000181 8ED0                    	mov	ss,ax
 16735 00000183 8CC4                    	mov	sp,es
 16736 00000185 8EC0                    	mov	es,ax
 16737 00000187 2E8B6E00                	mov	bp,[cs:bp]
 16738                                  
 16739                                  	; 21/10/2022 (MSDOS 5.0 SYSINIT code)
 16740                                  	;push    bp
 16741                                  	;mov     bp,sp
 16742                                  	;mov     ax,[bp+8]
 16743                                  	;pop     bp
 16744                                  	;push    es
 16745                                  	;pop     ss
 16746                                  	;mov     sp,bp
 16747                                  	;mov     bp,ax
 16748                                  	; 11/12/2022
 16749                                  	;;mov	bp,[cs:bp+0]	
 16750                                  	;mov	bp,[cs:bp]	
 16751                                  
 16752 0000018B 9C                      	pushf				; go execute the real interrupt handler
 16753                                  	; 11/12/2022
 16754 0000018C 2EFF5E00                	call	far [cs:bp]		; which will iret back to here
 16755                                  	; 21/10/2022
 16756                                  	;call	far [cs:bp+0]
 16757                                  
 16758 00000190 89E5                    	mov	bp,sp			; retrieve the table offset for us
 16759                                  	; 11/12/2022
 16760 00000192 268B6E00                	mov	bp,[es:bp]		; but leave it on the stack
 16761                                  	; 21/10/2022
 16762                                  	;mov	bp,[es:bp+0]
 16763 00000196 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 16764 0000019A 268B6602                	mov	sp,[es:bp+savedsp]
 16765                                  
 16766                                  	; 11/12/2022
 16767                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 16768                                  	; 21/10/2022
 16769 0000019E 26C6460000              	mov	byte [es:bp],free ; 0
 16770 000001A3 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 16771                                  
 16772 000001A8 07                      	pop	es			; saved on entry
 16773 000001A9 5D                      	pop	bp			; saved on entry
 16774 000001AA 58                      	pop	ax			; saved on entry
 16775 000001AB 83C402                  	add	sp,2			; (skip near call return addr) 
 16776 000001AE CF                      	iret				; done with this interrupt
 16777                                  
 16778                                  notfree02:
 16779 000001AF 3C01                    	cmp	al,allocated		; error flag
 16780 000001B1 7404                    	je	short findnext02	; no, continue
 16781                                  	; 11/12/2022
 16782                                  	;xchg	[es:bp+allocbyte],al	; yes, restore error value
 16783                                  	; 21/10/2022
 16784 000001B3 26864600                	xchg	[es:bp],al
 16785                                  
 16786                                  findnext02:
 16787 000001B7 E81200                  	call	longpath
 16788 000001BA EBA8                    	jmp	short found02
 16789                                  
 16790                                  foundbad02:
 16791 000001BC 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16792 000001C1 72F4                    	jc	short findnext02
 16793 000001C3 89C5                    	mov	bp,ax			; flag this entry
 16794                                  	; 11/12/2022
 16795                                  	;mov	byte [es:bp+allocbyte],clobbered
 16796                                  	; 21/10/2022
 16797 000001C5 26C6460003              	mov	byte [es:bp],clobbered ; 3
 16798 000001CA EBEB                    	jmp	short findnext02	; keep looking
 16799                                  
 16800                                  ; ----------------------------------------------------------------------
 16801                                  
 16802                                  ; Common routines
 16803                                  
 16804                                  longpath:
 16805                                  	; 21/03/2019
 16806 000001CC 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 16807                                  lploopp:
 16808                                  	; 11/12/2022
 16809                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 16810                                  	; 21/10/2022
 16811 000001D1 26807E0000              	cmp	byte [es:bp],free
 16812 000001D6 7512                    	jne	short inuse		;  no, try next one
 16813                                  
 16814 000001D8 B001                    	mov	al,allocated
 16815                                  	; 11/12/2022
 16816                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 16817                                  	; 21/10/2022
 16818 000001DA 26864600                	xchg	[es:bp],al
 16819 000001DE 3C00                    	cmp	al,free 		; is it still free?
 16820 000001E0 7414                    	je	short found		;  yes, go use it
 16821                                  
 16822 000001E2 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 16823 000001E4 7404                    	je	short inuse		;  no, check the next one
 16824                                  
 16825                                  	; 11/12/2022
 16826                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 16827                                  	; 21/10/2022
 16828 000001E6 26884600                	mov	[es:bp],al
 16829                                  inuse:
 16830 000001EA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16831 000001EF 7406                    	je	short fatal
 16832 000001F1 83ED08                  	sub	bp,entrysize
 16833 000001F4 EBDB                    	jmp	short lploopp
 16834                                  found:
 16835 000001F6 C3                      	retn
 16836                                  fatal:
 16837 000001F7 1E                      	push	ds
 16838 000001F8 B800F0                  	mov	ax,0F000h		;look at the model byte
 16839 000001FB 8ED8                    	mov	ds,ax
 16840 000001FD 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 16841 00000202 1F                      	pop	ds
 16842 00000203 7504                    	jne	short skip_nmis
 16843                                  
 16844 00000205 B007                    	mov	al,07h			; disable pc convertible nmis
 16845 00000207 E672                    	out	72h,al
 16846                                  
 16847                                  skip_nmis:
 16848 00000209 FA                      	cli				; disable and mask
 16849 0000020A B0FF                    	mov	al,0FFh			;   all other ints
 16850 0000020C E621                    	out	021h,al
 16851 0000020E E6A1                    	out	0A1h,al
 16852                                  
 16853 00000210 8CCE                    	mov	si,cs
 16854 00000212 8EDE                    	mov	ds,si
 16855 00000214 BE[3902]                	mov	si,fatal_msg
 16856                                  ;SR;
 16857                                  ;   We set all foci to this VM to issue the stack failure message
 16858                                  ;
 16859 00000217 50                      	push	ax
 16860 00000218 1E                      	push	ds
 16861                                  	;;mov	ax,Bios_Data ; 0070h
 16862                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 16863                                  	; 21/10/2022
 16864 00000219 B87000                  	mov	ax,DOSBIODATASEG
 16865 0000021C 8ED8                    	mov	ds,ax
 16866                                  
 16867                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 16868 0000021E F606[6F08]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 16869 00000223 1F                      	pop	ds
 16870 00000224 58                      	pop	ax
 16871 00000225 7405                    	jz	short fatal_loop	; win386 not present, continue
 16872                                  
 16873                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 16874                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 16875                                  	; 21/10/2022
 16876 00000227 9A[7008]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 16877                                  ;
 16878                                  ;SR; We do not bother about the returned status of this call. 
 16879                                  ;
 16880                                  fatal_loop:
 16881 0000022C AC                      	lodsb
 16882 0000022D 3C24                    	cmp	al,'$' ; 24h
 16883 0000022F 7406                    	je	short fatal_done
 16884                                  
 16885 00000231 B307                    	mov	bl,7
 16886                                  	;mov	ah,14
 16887                                  	;mov	ah,0Eh
 16888 00000233 CD10                    	int	10h			; whoops, this enables ints
 16889                                  			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
 16890                                  			; AL = character, BH = display page (alpha modes)
 16891                                  			; BL = foreground color (graphics modes)
 16892 00000235 EBF5                    	jmp	short fatal_loop
 16893                                  
 16894                                  fatal_done:
 16895 00000237 EBFE                    	jmp	short fatal_done
 16896                                  
 16897                                  
 16898                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 16899                                  ; ----------------------------------------------------------------------
 16900                                  ;	include msbio.cl5		; fatal stack error message
 16901                                  
 16902                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 16903                                  
 16904                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 16905                                  ; ----------------------------------------------------------------------
 16906                                  ; 04/06/2018 - Retro DOS v3.0
 16907                                  
 16908                                  fatal_msg:
 16909 00000239 0D0A                    	db	0Dh,0Ah
 16910 0000023B 070D0A                  	db	7,0Dh,0Ah
 16911 0000023E 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 16911 00000247 737461636B206F7665-
 16911 00000250 72666C6F770D0A     
 16912 00000257 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 16912 00000260 6C7465640D0A24     
 16913                                  
 16914                                  endstackcode:
 16915                                  
 16916                                  ; ----------------------------------------------------------------------
 16917                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 16918                                  ; ----------------------------------------------------------------------
 16919                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 16920                                  
 16921                                  ; 22/03/2019 - Retro DOS v4.0
 16922                                  
 16923                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 16924                                  
 16925                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 16926                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 16927                                  
 16928                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16929                                  ; ----------------------------------------------------------------------
 16930                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 16931                                  
 16932                                  SYSINIT:	
 16933 00000267 E9A001                          JMP	GOINIT
 16934                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 16935                                  
 16936                                  ; ----------------------------------------------------------------------
 16937                                  
 16938                                  struc DDHighInfo
 16939 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 16940 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 16941 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 16942                                  endstruc
 16943                                  
 16944                                  ; 22/03/2019 - Retro DOS v4.0
 16945                                  
 16946 0000026A 00                      runhigh: db	0
 16947                                  
 16948                                  ; 02/11/2022
 16949                                  ;align 4
 16950                                  
 16951                                  DOSINFO: 
 16952 0000026B 00000000                	dd	0	; address of the DOS Sysini Variables
 16953                                  ;MSDOS:
 16954                                  dos_temp_location: ; dword ; MSDOS 6.0
 16955                                  dosinit:		; MSDOS 6.0
 16956 0000026F 0000                    	dw	0
 16957                                  
 16958                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16959                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 16960                                  ;	dw	0
 16961                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 16962                                  
 16963                                  CURRENT_DOS_LOCATION:
 16964 00000271 0000                    	dw	0
 16965                                  
 16966                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 16967                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 16968                                  
 16969                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16970                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 16971                                  DOSSIZE	equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 16972                                  
 16973                                  DEVICE_LIST:
 16974 00000273 00000000                	dd	0
 16975                                  
 16976                                  ; 04/06/2018 - Retro DOS v3.0
 16977                                  ; 28/03/2018
 16978                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 16979                                  ;
 16980                                  sysi_country:	
 16981 00000277 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 16982                                  
 16983                                  ; MSDOS 6.0
 16984 0000027B 00000000                dos_segreinit:	dw	0,0	; room for dword
 16985                                  
 16986 0000027F 0000                    lo_doscod_size:	dw	0	; dos code size when in low mem
 16987 00000281 0000                    hi_doscod_size:	dw	0	; dos code size when in HMA
 16988                                  
 16989 00000283 0000                    def_php:	dw	0
 16990                                  
 16991                                  ; M022--
 16992                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 16993                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 16994                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 16995                                  ;  the new home.
 16996                                  
 16997                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 16998                                  ; 21/10/2022
 16999                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 17000                                  
 17001                                  ; 22/10/2022
 17002                                  seg_reinit_ptr:	; label dword
 17003 00000285 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 17004                                  temp_bcode_seg:
 17005                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 17006                                  		; 22/10/2022
 17007 00000287 8602                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS 		
 17008                                  
 17009                                  fake_floppy_drv:
 17010 00000289 00                      		db	0	; set to 1 if this machine
 17011                                  				; does not have any floppies!!!
 17012                                  
 17013                                  ; Internal Stack Parameters
 17014                                  
 17015 0000028A 0900                    stack_count:	dW	defaultcount ; 9
 17016 0000028C 8000                    stack_size:	dw	defaultsize  ; 128
 17017 0000028E 00000000                stack_addr:	dd	0	
 17018                                  
 17019                                  ; 05/06/2018 - Retro DOS v3.0
 17020                                  
 17021                                  ; various default values
 17022                                  
 17023 00000292 0100                    MEMORY_SIZE:	dw	1
 17024                                  
 17025                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 17026                                  
 17027 00000294 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)	
 17028 00000296 00                      DEFAULT_DRIVE:	db	0	; initialized by ibminit.
 17029 00000297 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 17030 00000299 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 17031 0000029B 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 17032                                  
 17033 0000029D 08                      FILES:	db	8	; enough files for pipe
 17034 0000029E 04                      FCBS:	db	4	; performance for recycling
 17035 0000029F 00                      KEEP:	db	0	; keep original set
 17036 000002A0 05                      NUM_CDS: db	5	; 5 net drives
 17037                                  
 17038                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 17039                                  ;;CONFBOT: dw	0
 17040                                  ;;ALLOCLIM: dw	0
 17041                                  ;CONFBOT: ; 02/11/2022
 17042                                  ;top_of_cdss: dw 0
 17043                                  
 17044                                  ; 30/12/2022 - Retrodos v4.2 (MSDOS 6.21 SYSINIT)
 17045                                  ; (SYSINITSEG:02A3h)
 17046 000002A1 0000                    CONFBOT: dw	0
 17047 000002A3 0000                    ALLOCLIM: dw	0
 17048 000002A5 0000                    top_of_cdss: dw 0
 17049                                  
 17050                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 17051                                  ; 30/12/2022 (MSDOS 6.21 SYSINIT)
 17052                                  ;ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 17053                                  
 17054 000002A7 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 17055                                  
 17056                                  ; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 SYSINIT)
 17057                                  %if 0
 17058                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17059                                  ; (SYSINIT:02A9h)
 17060                                  
 17061                                  command_line:
 17062                                  	db	2,0
 17063                                  	db	'P'
 17064                                  	db	0
 17065                                  	times	124 db 0 ; db 124 dup(0)
 17066                                  
 17067                                  %endif
 17068                                  
 17069                                  	
 17070                                  ; (SYSINIT:0329h)
 17071 000002AB 00                      ZERO:	db	0
 17072 000002AC 00                      sepchr:	db	0
 17073 000002AD 0000                    linecount: dw	0			; line count in config.sys
 17074 000002AF 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 17075 000002B7 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 17076                                  
 17077 000002B9 FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 17078 000002BA 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 17079                                  
 17080 000002BB 0000                    buf_prev_off:	dw	0
 17081                                  
 17082                                          ;IF      NOT NOEXEC
 17083                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 17084                                          ;ENDIF
 17085                                  
 17086                                  ; 01/05/2018
 17087                                  COMEXE:
 17088 000002BD 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 17089 000002BF [E046]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 17090 000002C1 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17091 000002C3 [9602]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 17092 000002C5 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17093 000002C7 [AB02]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 17094 000002C9 0000                    		dw	0
 17095                                  
 17096                                  ; variables for install= command.
 17097                                  
 17098 000002CB 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 17099                                  					;  indicating the pass number
 17100                                  					; 0 - do scan for DOS=HIGH/LOW
 17101                                  					; 1 - load device drivers
 17102                                  					; 2 - was to load IFS
 17103                                  					;      now it is unused
 17104                                  					; 3 - do install=
 17105                                  					; >3 - nop
 17106 000002CC 0000                    install_flag:	dw	0
 17107                                  
 17108                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 17109                                  has_installed	equ	00000010b	; sysinit_base installed.
 17110                                  
 17111 000002CE 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 17112 000002D0 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 17113 000002D4 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 17114 000002D8 0000                    checksum:	dw	0		; used by sum_up
 17115                                  
 17116 000002DA 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 17117 000002EE 00                      ldexec_line:	db	0		; # of parm characters
 17118 000002EF 20                      ldexec_start:	db	' '
 17119 000002F0 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 17120                                  
 17121                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 17122                                  
 17123                                  instexe:
 17124 00000340 0000                    iexec.environ:	dw	0		; seg addr of environment
 17125 00000342 [EE02]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 17126 00000344 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17127 00000346 [DA02]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 17128 00000348 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17129 0000034A [DA02]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 17130 0000034C 0000                    		dw	0
 17131                                  
 17132                                  ; variables for comment=
 17133                                  
 17134 0000034E 00                      com_level:	db	0		; level of " " in command line
 17135 0000034F 00                      cmmt:		db	0		; length of comment string token
 17136 00000350 00                      cmmt1:		db	0		; token
 17137 00000351 00                      cmmt2:		db	0		; token
 17138 00000352 00                      cmd_indicator:	db	0
 17139 00000353 00                      donotshownum:	db	0
 17140                                  
 17141 00000354 0000                    count:		dw	0
 17142 00000356 0000                    org_count:	dw	0
 17143 00000358 0000                    chrptr:		dw	0
 17144 0000035A 0000                    cntryfilehandle: dw	0
 17145 0000035C 0000                    old_area:	dw	0
 17146 0000035E 0000                    impossible_owner_size: dw 0		; paragraph
 17147                                  
 17148                                  bucketptr: ; label dword
 17149                                  bufptr:	   ; label dword		; leave this stuff in order!
 17150 00000360 0000                    memlo:	dw	0
 17151                                  prmblk:	   ; label word
 17152 00000362 0000                    memhi:	dw	0
 17153 00000364 0000                    ldoff:	dw	0
 17154 00000366 0000                    area:	dw	0
 17155                                  
 17156                                  ; Following is the request packet used to call INIT routines for 
 17157                                  ; all device drivers. Some fields may be accessed individually in
 17158                                  ; the code, and hence have individual labels, but they should not
 17159                                  ; be separated.
 17160                                  
 17161 00000368 18                      packet:	db	24			; was 22
 17162 00000369 00                      	db	0
 17163 0000036A 00                      	db	0			; initialize code
 17164 0000036B 0000                    	dw	0
 17165 0000036D 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 17166                                  
 17167 00000375 00                      unitcount:	db	0
 17168 00000376 00000000                break_addr:	dd	0
 17169 0000037A 00000000                bpb_addr:	dd	0
 17170                                  drivenumber:	; 22/10/2022
 17171 0000037E 00                      devdrivenum:	db	0 
 17172 0000037F 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 17173                                  
 17174                                  ; end of request packet
 17175                                  
 17176                                  ;drivenumber:	db	0  ; 22/03/2019
 17177                                  
 17178                                  toomanydrivesflag:
 17179 00000381 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 17180                                  align 2
 17181                                  
 17182                                  BCodeSeg:	; 21/10/2022
 17183 00000382 8602                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 17184                                  	;dw	Bios_Code  ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 17185                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 17186                                  
 17187                                  ; 30/12/2022
 17188                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0387h
 17189                                  ;
 17190                                  ; MagicBackdoor: dd 0
 17191                                  ; NullBackdoor: 
 17192                                  ;		retf
 17193                                  
 17194                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17195                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 17196                                  ; 19/04/2019
 17197                                  _timer_lw_:
 17198 00000384 0000                    	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 17199                                  
 17200                                  ;SR;
 17201                                  ; This is the communication block between the DOS and the BIOS. It starts at
 17202                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 17203                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 17204                                  ;is passed to DOS as part of the DOSINIT call.
 17205                                  ;
 17206                                  
 17207                                  BiosComBlock:
 17208                                  	;dd	Bios_Data:SysinitPresent 
 17209                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 17210 00000386 [9C08]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 17211                                  	;dw	KERNEL_SEGMENT ; 0070h
 17212                                  	; 21/10/2022
 17213 00000388 7000                    	dw	DOSBIODATASEG ; 0070h
 17214                                  
 17215                                  ;align 2
 17216                                  
 17217                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 17218                                  	; 30/12/2022 - (MSDOS 6.21 IO.SYS, SYSINIT:0392h)
 17219                                  tempstack:	
 17220 0000038A 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 17221                                  
 17222                                  ; ----------------------------------------------------------------------------
 17223                                  
 17224                                  	; 22/10/2022 - Retro DOS v4.0
 17225                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 17226                                  GOINIT:		; (MSDOS 6.21 IO.SYS, SYSINIT:0412h)
 17227                                  	; 12/12/2022
 17228                                  	; 22/03/2019 - Retro DOS v4.0
 17229                                  	; 06/07/2018
 17230                                  	; 04/06/2018 - Retro DOS v3.0
 17231                                  ; before doing anything else, let's set the model byte
 17232 0000040A B4C0                    	mov	ah,0C0h 		; get system configuration
 17233 0000040C CD15                    	int	15h			; *
 17234 0000040E 7217                    	jc	short no_rom_config
 17235                                  
 17236 00000410 80FC00                  	cmp	ah,0			; double check
 17237 00000413 7512                    	jne	short no_rom_config
 17238 00000415 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 17239 00000419 2EA2[B902]              	mov	[cs:sys_model_byte],al 
 17240 0000041D 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 17241 00000421 2EA2[BA02]              	mov	[cs:sys_scnd_model_byte],al
 17242                                  	;jmp	short SYSIN
 17243                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17244 00000425 EB2D                    	jmp	short move_myself
 17245                                  
 17246                                  no_rom_config:				; Old ROM
 17247 00000427 B800F0                  	mov	ax,0F000h
 17248 0000042A 8ED8                    	mov	ds,ax
 17249 0000042C A0FEFF                  	mov	al,[0FFFEh]
 17250 0000042F 2EA2[B902]              	mov	[cs:sys_model_byte],al	; set the model byte.
 17251                                  
 17252                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 17253                                  ; execute the equipment determination interrupt and then
 17254                                  ; check the returned value to see if we have any floppy drives
 17255                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 17256                                  ; see the at tech ref bios listings for help on the equipment
 17257                                  ; flag interrupt (11h)	
 17258                                  
 17259                                  	; 22/10/2022
 17260                                  check_for_fake_floppy:			; entry point for rom_config above
 17261 00000433 CD11                    	int	11h			; check equipment flag
 17262                                  
 17263                                  	; 12/12/2022
 17264 00000435 A801                    	test	al,1		
 17265                                  	;test	ax,1			; have any floppies?
 17266 00000437 751B                    	jnz	short move_myself	; yes,normal system
 17267                                  
 17268                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 17269                                  ; whether it is an old ROM BIOS or a new one
 17270                                  ;
 17271                                  ; WARNING !!!
 17272                                  ;
 17273                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 17274                                  ; here will require an equivalent modification in MSINIT.ASM also
 17275                                  
 17276 00000439 06                      	push	es
 17277                                  
 17278 0000043A 30C9                    	xor	cl,cl	
 17279 0000043C B408                    	mov	ah,8			; get disk parameters
 17280 0000043E B200                    	mov	dl,0			; of drive 0
 17281 00000440 CD13                    	int	13h
 17282                                  
 17283 00000442 07                      	pop	es
 17284                                  
 17285 00000443 720F                    	jc	short move_myself	; if error lets assume that the
 17286                                  					;  ROM BIOS lied
 17287 00000445 80F900                  	cmp	cl,0			; double check (max sec no cannot be 0)
 17288 00000448 740A                    	je	short move_myself
 17289                                  
 17290 0000044A 08D2                    	or	dl,dl			; number of flp drvs == 0?
 17291 0000044C 7506                    	jnz	short move_myself
 17292                                  
 17293 0000044E 2EC606[8902]01          	mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 17294                                  
 17295                                  move_myself:
 17296 00000454 FC                      	cld				; set up move
 17297 00000455 31F6                    	xor	si,si
 17298 00000457 89F7                    	mov	di,si
 17299                                  
 17300                                  	; 12/12/2022
 17301 00000459 0E                      	push	cs
 17302 0000045A 1F                      	pop	ds
 17303                                  
 17304                                  	;mov	cx,[cs:MEMORY_SIZE]
 17305 0000045B 8B0E[9202]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 17306                                  
 17307                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 17308                                  ;;;	if	msver
 17309                                  ;	cmp	cx,1		; 1 means do scan
 17310                                  ;	jnz	short noscan
 17311                                  ;	mov	cx,2048		; start scanning at 32k boundary
 17312                                  ;	xor	bx,bx
 17313                                  ;
 17314                                  ;memscan:inc	cx
 17315                                  ;	jz	setend
 17316                                  ;	mov	ds,cx
 17317                                  ;	mov	al,[bx]
 17318                                  ;	not	al
 17319                                  ;	mov	[bx],al
 17320                                  ;	cmp	al,[bx]
 17321                                  ;	not	al
 17322                                  ;	mov	[bx],al
 17323                                  ;	jz	short memscan
 17324                                  ;setend:
 17325                                  ;	mov	cs:[memory_size],cx
 17326                                  ;;;	endif
 17327                                  
 17328                                  ;noscan: 				; cx is mem size in para
 17329                                  ;;
 17330                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 17331                                  ;;		  before we try to run.
 17332                                  ;;	       b) in any case, we should check for sufficient memory and give
 17333                                  ;;		  an appropriate error diagnostic if there isn't enough
 17334                                  ;
 17335                                  ;	push	cs
 17336                                  ;	pop	ds
 17337                                  ;
 17338                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 17339                                  ;;	  that way it would be easier to slide them down home in a minimal
 17340                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 17341                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 17342                                  ;;	  temporary home and the final one.  the problem with doing that
 17343                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 17344                                  ;
 17345                                  ;	dec	cx			; one para for an arena at end of mem
 17346                                  ;					; in case of UMBs
 17347                                  
 17348                                  	; 22/10/2022
 17349                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 17350                                  
 17351                                  	; 12/12/2022
 17352                                  	;push	cs
 17353                                  	;pop	ds
 17354                                  
 17355 0000045F 49                      	dec	cx
 17356                                  
 17357                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 17358                                  
 17359 00000460 31DB                    	xor	bx,bx
 17360 00000462 8EC3                    	mov	es,bx
 17361 00000464 268B1EBC00              	mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 17362 00000469 268E06BE00              	mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 17363 0000046E 26817F035250            	cmp	word [es:bx+3],'RP'
 17364 00000474 751B                    	jne	short NoRPL
 17365 00000476 26807F054C              	cmp	byte [es:bx+5],'L'
 17366 0000047B 7514                    	jne	short NoRPL
 17367                                  
 17368 0000047D 89CA                    	mov	dx,cx			; get TOM into DX
 17369 0000047F 52                      	push	dx
 17370 00000480 B8064A                  	mov	ax,4A06h
 17371                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 17372 00000483 CD2F                    	int	2Fh			; Get new TOM from any RPL
 17373 00000485 58                      	pop	ax
 17374 00000486 89D1                    	mov	cx,dx
 17375 00000488 39C2                    	cmp	dx,ax
 17376 0000048A 7405                    	je	short NoRPL
 17377                                  	
 17378                                  	; 11/12/2022
 17379                                  	; ds = cs
 17380 0000048C 8916[9402]              	mov	[RPLMemTop],dx
 17381                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17382                                  	;mov	[cs:RPLMemTop],dx
 17383                                  	
 17384 00000490 49                      	dec	cx
 17385                                  NoRPL:
 17386 00000491 B8[104E]                	mov	ax,SI_end		; need this much room for sysinit
 17387                                  					; (SI_end == sysinit code size)
 17388 00000494 E8CB07                  	call	off_to_para
 17389 00000497 29C1                    	sub	cx,ax
 17390                                  
 17391                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 17392                                  ; code above sysinit in memory
 17393                                  ;
 17394 00000499 81E9000A                	sub	cx,DOSSIZE/16 ; (0A00h)	; leave this much room for DOS
 17395                                  
 17396 0000049D B8B01A                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 17397                                  					; (1A70h for MSDOS 6.21 IO.SYS
 17398 000004A0 E8BF07                  	call	off_to_para		; leave this much room for BIOS code
 17399 000004A3 29C1                    	sub	cx,ax
 17400 000004A5 8EC1                    	mov	es,cx			; segment where sysinit will be located
 17401                                  
 17402 000004A7 B9[104E]                	mov	cx,SI_end		; (sysinit code size)
 17403 000004AA D1E9                    	shr	cx,1			; divide by 2 to get words
 17404 000004AC F3A5                    	rep	movsw			; relocate sysinit
 17405                                  
 17406 000004AE 06                      	push	es			; push relocated segment
 17407 000004AF B8[B404]                	mov	ax,SYSIN
 17408 000004B2 50                      	push	ax			; push relocated entry point
 17409                                  
 17410 000004B3 CB                      	retf				; far jump to relocated sysinit
 17411                                  
 17412                                  ; ----------------------------------------------------------------------------
 17413                                  
 17414                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 17415                                  
 17416                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 17417                                  	; (SYSINIT:0533h)
 17418                                  	; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 17419                                  	; (SYSINIT:04BFh)	
 17420                                  SYSIN:
 17421                                  	; Retro DOS 4.0 - 22/03/2019
 17422                                  	; Retro DOS 2.0 - 25/02/2018
 17423                                  
 17424                                  	; 23/04/2019
 17425                                  	;;mov	ax,Bios_Data
 17426                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 17427                                  	; 21/10/2022
 17428 000004B4 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 17429 000004B7 8ED8                    	mov	ds,ax
 17430 000004B9 8C0E[9A08]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 17431 000004BD C606[9C08]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 17432                                  
 17433                                  ; first move the MSDOS.SYS image up to a harmless place 
 17434                                  ; on top of our new sysinitseg
 17435                                  
 17436                                  	; 22/10/2022
 17437 000004C2 B8[104E]                	mov	ax,SI_end		; how big is sysinitseg?
 17438 000004C5 E89A07                  	call	off_to_para
 17439 000004C8 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 17440 000004CA 01C8                    	add	ax,cx
 17441 000004CC 8EC0                    	mov	es,ax
 17442                                  	
 17443 000004CE 31F6                    	xor	si,si
 17444 000004D0 89F7                    	mov	di,si
 17445                                  
 17446 000004D2 2E8E1E[7102]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 17447                                  
 17448                                  	;mov	ax,cs	
 17449                                  	;mov	ds,ax
 17450                                  
 17451                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 17452                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 17453                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 17454                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 17455                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 17456                                  
 17457                                  	; 22/10/2022
 17458 000004D7 B90050                  	mov	cx,DOSSIZE/2 ; 5000h
 17459 000004DA F3A5                    	rep     movsw
 17460 000004DC 2E8C06[7102]            	mov	[cs:CURRENT_DOS_LOCATION],es
 17461                                  
 17462                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 17463                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 17464                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 17465                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 17466                                  
 17467                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 17468                                  	;mov	ax,cs
 17469                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17470                                  	;mov	ds,ax
 17471                                  
 17472                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17473                                  
 17474                                  ;	; 24/04/2019 
 17475                                  ;;ifndef ROMDOS
 17476                                  ;	mov	ax,[es:3] 		; get offset of dos
 17477                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 17478                                  ;	mov	[dosinit],ax		; that's the entry point offset
 17479                                  ;	call	off_to_para		; subtract this much from segment
 17480                                  ;	; 23/04/2019
 17481                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 17482                                  ;	sub	[FINAL_DOS_LOCATION],ax
 17483                                  ;;else
 17484                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 17485                                  ;;
 17486                                  ;;endif ; ROMDOS
 17487                                  
 17488                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17489                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 17490                                  
 17491                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 17492                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 17493                                  
 17494                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17495                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 17496 000004E1 A10300                  	mov	ax, [3]		; mov ax, word ptr ds:3
 17497                                  
 17498 000004E4 2EA3[6F02]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 17499                                  	; 02/11/2022
 17500 000004E8 E87707                  	call	off_to_para		; subtract this much from segment
 17501 000004EB 2E2906[7102]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 17502                                  
 17503                                  	; Current DOSCODE start address = dword [dosinit]
 17504                                  
 17505                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 17506                                  ;; until it is determined whether it will be running in HIMEM or not.
 17507                                  
 17508                                  ;ifndef ROMDOS
 17509                                  
 17510                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 17511                                  
 17512                                  	; 22/10/2022
 17513 000004F0 8CC0                    	mov	ax,es
 17514 000004F2 05000A                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 17515 000004F5 8EC0                    	mov	es,ax
 17516 000004F7 2E8706[8702]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 17517 000004FC 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 17518                                  
 17519                                  	;mov	si,BCODE_START ; mov si,30h
 17520                                  	; 09/12/2022
 17521 000004FE BE[3000]                	mov	si,BCODESTART
 17522                                  	; 02/11/2022
 17523 00000501 89F7                    	mov	di,si
 17524 00000503 B9B01A                  	mov	cx,BCODE_END   ; mov cx,1A60h ; mov cx,1A70h ; 30/12/2022
 17525 00000506 29F1                    	sub	cx,si
 17526 00000508 D1E9                    	shr	cx,1
 17527 0000050A F3A5                    	rep	movsw			; move Bios_Code into place
 17528                                  
 17529 0000050C 8CC0                    	mov	ax,es			; tell it what segment it's in
 17530 0000050E 2EFF1E[8502]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 17531                                  
 17532                                  ;endif	; not ROMDOS
 17533                                  
 17534                                  ; now call dosinit while it's in its temporary home
 17535                                  
 17536                                  	;mov	ax,cs
 17537                                  	;mov	ds,ax	 
 17538                                  
 17539                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 17540                                  
 17541                                  	; 22/10/2022
 17542                                  
 17543 00000513 2EC43E[8603]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 17544                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 17545 00000518 2EC536[7302]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 17546                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 17547                                  
 17548 0000051D 2E8B16[9202]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 17549                                  
 17550 00000522 FA                      	cli
 17551 00000523 8CC8                    	mov	ax,cs
 17552 00000525 8ED0                    	mov	ss,ax
 17553                                  
 17554                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 17555                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 17556                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 17557                                  ;SYSINIT:0532h: 
 17558                                  
 17559                                  ; 22/10/2022
 17560                                  ; ----------------------------------------------------------------------------
 17561                                  ;SYSINIT:05A6h:
 17562                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 17563                                  
 17564                                  	;mov	sp, 05A6h
 17565 00000527 BC2605                  	mov     sp,locstack		; set stack
 17566                                  
 17567 0000052A FB                      	sti
 17568                                  
 17569                                  ;align 2
 17570                                  	; 30/03/2018
 17571                                  ;LOCSTACK:
 17572                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 17573                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 17574                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 17575                                  
 17576                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17577                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 17578                                  
 17579                                  ; This call to DOSINIT will relocate the DOS data from its present location
 17580                                  ; at the top of memory, to its final location in low memory just above the
 17581                                  ; BIOS data. It will then build important DOS data structures in low 
 17582                                  ; memory following the DOS data. It returns (among many other things) the
 17583                                  ; new starting address of free memory.
 17584                                  
 17585 0000052B 2EFF1E[6F02]            	call	far [cs:dosinit]	; call dosinit	
 17586                                  			 ; es:di -> sysinitvars_ext
 17587                                  
 17588 00000530 2E8C1E[8302]            	mov	[cs:def_php],ds		; save pointer to PSP
 17589                                  	
 17590                                  	; 11/12/2022
 17591                                  	; 22/03/2019
 17592 00000535 0E                      	push	cs
 17593 00000536 1F                      	pop	ds
 17594                                  	; 22/10/2022
 17595 00000537 A3[8102]                	mov	[hi_doscod_size],ax
 17596 0000053A 890E[7F02]              	mov	[lo_doscod_size],cx
 17597 0000053E 8916[7B02]              	mov	[dos_segreinit],dx
 17598                                  	
 17599                                  	; 11/12/2022
 17600                                  	; ds = cs
 17601                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 17602                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 17603                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 17604                                  
 17605                                  	; 05/06/2018 - Retro DOS v3.0
 17606                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 17607                                  
 17608                                  	; 11/12/2022
 17609                                  	; ds = cs
 17610                                  	; 22/10/2022
 17611                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 17612 00000542 268B05                  	mov	ax,[es:di] ; 22/03/2019
 17613                                  	;mov	[cs:DOSINFO],ax
 17614 00000545 A3[6B02]                	mov	[DOSINFO],ax
 17615                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 17616 00000548 268B4502                	mov	ax,[es:di+2]
 17617                                  	;mov	[cs:DOSINFO+2],ax
 17618 0000054C A3[6D02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 17619                                  
 17620                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 17621 0000054F 268B4504                	mov	ax,[es:di+4]
 17622                                  	;mov	[cs:sysi_country],ax
 17623 00000553 A3[7702]                	mov	[sysi_country],ax
 17624                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 17625 00000556 268B4506                	mov	ax,[es:di+6]
 17626                                  	;mov	[cs:sysi_country+2],ax
 17627 0000055A A3[7902]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 17628                                  
 17629                                  	; 20/04/2019
 17630                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 17631                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 17632                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 17633                                  	; 22/10/2022
 17634                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 17635                                  	;;;mov	[dos_segreinit+2],es
 17636                                  	;;mov	[dos_segreinit+2],ax
 17637                                  	;mov	[cs:dos_segreinit+2],ax
 17638                                  	; 11/12/2022
 17639                                  	; ds = cs
 17640 0000055D 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17641 00000561 8C06[7D02]              	mov	[dos_segreinit+2],es
 17642                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17643                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 17644                                  	;mov	[cs:dos_segreinit+2],es
 17645                                  
 17646                                  ; ----------------------------------------------------------------------------
 17647                                  
 17648                                  ;SYSINIT:0577h:
 17649                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 17650                                  ;SYSINIT:05D1h:	; NoRPLArena 
 17651                                  
 17652                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 17653                                  ;------ Cover up RPL code with an arena
 17654                                  ;SYSINIT:05EBh:
 17655                                  	; 11/12/2022
 17656                                  	; ds = cs
 17657 00000565 31DB                    	xor	bx,bx
 17658 00000567 391E[9402]              	cmp	[RPLMemTop],bx ; 0
 17659                                  	;cmp	word [RPLMemTop],0
 17660                                  	;;cmp	word [cs:RPLMemTop],0
 17661 0000056B 7450                    	je	short NoRPLArena
 17662                                  
 17663                                  ;------ alloc all memory
 17664                                  
 17665                                  	; 11/12/2022
 17666                                  	;mov	bx,0FFFFh
 17667 0000056D 4B                      	dec	bx
 17668                                  	; bx = 0FFFFh
 17669 0000056E B448                    	mov	ah,48h
 17670 00000570 CD21                    	int	21h
 17671                                  			; DOS - 2+ - ALLOCATE MEMORY
 17672                                  			; BX = number of 16-byte paragraphs desired
 17673 00000572 B448                    	mov	ah,48h
 17674 00000574 CD21                    	int	21h
 17675                                  
 17676 00000576 8EC0                    	mov	es,ax			; get it into ES and save it
 17677 00000578 06                      	push	es
 17678                                  
 17679                                  ;------ resize upto RPL mem
 17680                                  
 17681                                  	; 11/12/2022
 17682                                  	; ds = cs
 17683                                  	;sub	ax,[cs:RPLMemTop]
 17684 00000579 2B06[9402]              	sub	ax,[RPLMemTop]
 17685 0000057D F7D8                    	neg	ax
 17686 0000057F 48                      	dec	ax
 17687 00000580 89C3                    	mov	bx,ax
 17688 00000582 B44A                    	mov	ah,4Ah
 17689 00000584 CD21                    	int	21h
 17690                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 17691                                  			; ES = segment address of block to change
 17692                                  			; BX = new size in paragraphs
 17693                                  
 17694                                  ;------ allocate the free (RPL MEM)
 17695                                  
 17696 00000586 BBFFFF                  	mov	bx,0FFFFh
 17697 00000589 B448                    	mov	ah,48h
 17698 0000058B CD21                    	int	21h
 17699 0000058D B448                    	mov	ah,48h
 17700 0000058F CD21                    	int	21h
 17701                                  
 17702                                  ;----- mark that it belongs to RPL
 17703                                  
 17704 00000591 48                      	dec	ax
 17705 00000592 8EC0                    	mov	es,ax
 17706                                  	;mov	word [es:arena_owner],8
 17707 00000594 26C70601000800          	mov	word [es:1],8
 17708                                  	;mov	word [es:arena_name],'RP'
 17709 0000059B 26C70608005250          	mov	word [es:8],'RP'
 17710                                  	;mov	word [es:arena_name+2],'L'
 17711 000005A2 26C7060A004C00          	mov	word [es:10],'L'
 17712                                  	;mov	word [es:arena_name+4],0
 17713 000005A9 26C7060C000000          	mov	word [es:12],0
 17714                                  	;mov	word [es:arena_name+6],0
 17715 000005B0 26C7060E000000          	mov	word [es:14],0	
 17716                                  
 17717 000005B7 07                              pop     es                      ; get back ptr to first block
 17718 000005B8 B449                            mov     ah,49h	; Dealloc	; and free it
 17719 000005BA CD21                    	int	21h		
 17720                                  					; DOS - 2+ - FREE MEMORY
 17721                                  					; ES = segment address of area to be freed
 17722                                  	; 11/12/2022
 17723 000005BC F8                      	clc
 17724                                  
 17725                                  ; ----------------------------------------------------------------------------
 17726                                  
 17727                                  NoRPLArena:
 17728                                  	; 11/12/2022
 17729                                  	; ds = cs
 17730                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 17731 000005BD C43E[6B02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 17732                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17733                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 17734                                  
 17735                                  	; 11/12/2022
 17736                                  	;clc				; get the extended memory size
 17737                                  
 17738                                  ;	execute the get extended memory size subfunction in the bios int 15h
 17739                                  ;	if the function reports an error do nothing else store the extended
 17740                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 17741                                  ;	currently pointed to by es:di. use the offsets specified in the
 17742                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 17743                                  
 17744 000005C1 B488                    	mov	ah,88h
 17745 000005C3 CD15                    	int	15h			; check extended memory size
 17746 000005C5 720B                    	jc	short no_ext_memory
 17747                                  			; Get Extended Memory Size
 17748                                  			; Return: CF clear on success
 17749                                  			; AX = size of memory above 1M in K	
 17750                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 17751                                  	; 22/10/2022
 17752 000005C7 26894545                	mov	[es:di+45h],ax ; save extended memory size
 17753 000005CB 09C0                    	or	ax,ax
 17754 000005CD 7403                    	jz	short no_ext_memory
 17755 000005CF E80606                  	call	ClrVDISKHeader
 17756                                  no_ext_memory:
 17757                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 17758 000005D2 268B4510                	mov	ax,[es:di+10h]
 17759                                  	;add	ax,bufinsiz
 17760 000005D6 83C014                  	add	ax,20			; size of buffer header
 17761                                  	; 11/12/2022
 17762                                  	; ds = cs
 17763 000005D9 A3[9B02]                	mov	[singlebuffersize],ax	; total size for a buffer
 17764                                  	;mov	[cs:singlebuffersize],ax	
 17765                                  	; 11/12/2022
 17766 000005DC A0[9602]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 17767                                  	;mov	al,[cs:DEFAULT_DRIVE]
 17768                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 17769 000005DF 26884543                	mov	[es:di+43h],al
 17770                                  
 17771                                  ; determine if 386 system...
 17772                                  
 17773                                  	;get_cpu_type			; macro to determine cpu type
 17774                                  
 17775                                  get_cpu_type:
 17776                                  	; 11/12/2022
 17777 000005E3 9C                      	pushf
 17778                                  	;push	bx
 17779                                  	;xor	bx,bx
 17780                                  	; 11/12/2022
 17781                                  	;xor	cx,cx
 17782                                  	;
 17783 000005E4 31C0                    	xor	ax,ax
 17784                                  	; ax = 0
 17785 000005E6 50                      	push    ax
 17786 000005E7 9D                      	popf
 17787 000005E8 9C                      	pushf
 17788 000005E9 58                      	pop	ax
 17789 000005EA 2500F0                  	and	ax,0F000h
 17790                                  	;cmp	ax,0F000h
 17791 000005ED 80FCF0                  	cmp	ah,0F0h 
 17792 000005F0 7410                    	je	short cpu_8086
 17793                                  	;mov	ax,0F000h
 17794 000005F2 B4F0                    	mov	ah,0F0h
 17795                                  	; ax = 0F000h
 17796 000005F4 50                      	push	ax
 17797 000005F5 9D                      	popf
 17798 000005F6 9C                      	pushf
 17799 000005F7 58                      	pop	ax
 17800                                  	;and	ax,0F000h
 17801 000005F8 80E4F0                  	and	ah,0F0h
 17802 000005FB 7405                    	jz	short cpu_286
 17803                                  cpu_386:
 17804                                  	; 11/12/2022
 17805                                  	;;inc	bx
 17806                                  	;inc	cx
 17807                                  	; 11/12/2022
 17808                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 17809 000005FD 26C6454401              	mov	byte [es:di+44h],1
 17810                                  cpu_286:
 17811                                  	;;;inc	bx
 17812                                  	;;inc	cx
 17813                                  cpu_8086:
 17814                                  	; 11/12/2022
 17815                                  	;;mov	ax,bx	
 17816                                  	;pop	bx
 17817 00000602 9D                      	popf
 17818                                  
 17819                                  	;...
 17820                                  
 17821                                  	; 11/12/2022
 17822                                  	;or	cl,cl
 17823                                  	;jz	short not_386_system
 17824                                  	; 11/12/202
 17825                                  	;cmp	cl,2
 17826                                  	;;cmp	ax,2			; is it a 386?
 17827                                  	;jne	short not_386_system	; no: don't mess with flag
 17828                                  	;;mov	byte [es:di+SYSI_DWMOVE],1
 17829                                  	; 11/12/2022
 17830                                  	; 22/10/2022
 17831                                  	;mov	byte [es:di+44h],1
 17832                                  not_386_system:
 17833                                  	;mov	al,[es:di+SYSI_NUMIO]
 17834 00000603 268A4520                	mov	al,[es:di+20h]
 17835                                  	; 11/12/2022
 17836                                  	; ds = cs
 17837 00000607 A2[7E03]                	mov	[drivenumber],al	; save start of installable block drvs
 17838                                  	;mov	[cs:drivenumber],al
 17839                                  
 17840 0000060A 8CC8                    	mov	ax,cs
 17841 0000060C 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 17842                                  	; 11/12/2022
 17843                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 17844                                  	;;mov	cx,[cs:singlebuffersize]
 17845                                  	;shr	cx,1			
 17846                                  	;shr	cx,1			; divide size by 16...
 17847                                  	;shr	cx,1
 17848                                  	;shr	cx,1			; ...to get paragraphs...
 17849                                  	;inc	cx			; ... and round up
 17850                                  	; 11/12/2022
 17851 0000060F 8B1E[9B02]              	mov	bx,[singlebuffersize]
 17852 00000613 B104                    	mov	cl,4
 17853 00000615 D3EB                    	shr	bx,cl
 17854 00000617 43                      	inc	bx
 17855                                  
 17856                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 17857                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 17858                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 17859                                  ;	  it is probably safe to assume that the sector size always will be.
 17860                                  ;
 17861                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 17862                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 17863                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 17864                                  ;	  other code from ever causing a problem???
 17865                                  
 17866                                  	; 11/12/2022
 17867 00000618 29D8                    	sub	ax,bx
 17868                                  	;sub	ax,cx
 17869 0000061A A3[A502]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 17870                                  	; 22/10/2022
 17871                                  	;mov	[cs:top_of_cdss],ax
 17872                                  
 17873                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 17874                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 17875                                  ;	for allocating memory for MagicDrv.
 17876                                  
 17877 0000061D 06                      	push	es			; preserve pointer to dosinfo
 17878 0000061E 57                      	push	di
 17879                                  
 17880                                  	; 22/10/2022
 17881                                  ;	mov	cx,ax			; save pointer for buffer
 17882                                  ;
 17883                                  ;;	now allocate space for 26 CDSs
 17884                                  ;
 17885                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 17886                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 17887                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 17888                                  
 17889                                  	; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS)
 17890                                  	; (SYSINIT:064Ch)
 17891 0000061F 89C1                    	mov	cx,ax ; (*)
 17892 00000621 2D8F00                  	sub	ax,((26 *(curdirlen))+15)/16 ; sub ax,143
 17893 00000624 A3[A302]                	mov	[ALLOCLIM],ax		; init top of free memory pointer
 17894 00000627 A3[A102]                	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 17895                                  	 	
 17896                                  ; setup and initialize the temporary buffer at cx
 17897                                  
 17898                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 17899 0000062A 26C47D12                	les	di,[es:di+12h]
 17900                                  	; 11/12/2022
 17901 0000062E 31DB                    	xor	bx,bx
 17902                                  	;xor	ax,ax
 17903                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 17904                                  	;mov	word [es:di+4],0
 17905 00000630 26895D04                	mov	[es:di+4],bx ; 0
 17906                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 17907                                  	;mov	word [es:di],0
 17908 00000634 26891D                  	mov	[es:di],bx ; 0
 17909                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss] ; 6.21
 17910                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss] ; 5.0
 17911                                  	;mov	[es:di+2],ax
 17912                                  	;mov	es,ax	; [top_of_cdss] = [CONFBOT]
 17913                                  	; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS, SYSINIT)
 17914 00000637 26894D02                	mov	[es:di+2],cx ; [top_of_cdss] ; (*)	
 17915 0000063B 8EC1                    	mov	es,cx
 17916                                  
 17917                                  	; 11/12/2022
 17918                                  	;xor	ax,ax
 17919                                  	;mov	di,ax			; es:di -> single buffer
 17920 0000063D 89DF                    	mov	di,bx
 17921                                  	; di = 0
 17922                                  
 17923                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 17924                                  	; 11/12/2022
 17925                                  	;mov	[es:di],ax ; 0
 17926 0000063F 26891D                  	mov	[es:di],bx ; 0
 17927                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 17928                                  	; 11/12/2022
 17929                                  	;mov	[es:di+2],ax ; 0
 17930 00000642 26895D02                	mov	[es:di+2],bx ; 0 
 17931                                  
 17932                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 17933                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 17934                                  
 17935                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 17936 00000646 26C74504FF00            	mov	word [es:di+4],00FFh
 17937                                  ;SYSINIT:06E6h
 17938                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 17939                                  	;mov	word [es:di+6],0
 17940                                  	; 11/12/2022
 17941                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 17942 0000064C 26895D06                	mov	[es:di+6],bx ; 0
 17943                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 17944                                  	;mov	word [es:di+8],0
 17945                                  	; 11/12/2022
 17946                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 17947 00000650 26895D08                	mov	[es:di+8],bx ; 0
 17948                                  
 17949 00000654 5F                      	pop	di			; restore pointer to DOSINFO data
 17950 00000655 07                      	pop	es
 17951                                  
 17952                                  	; 11/12/2022
 17953                                  	; ds = cs
 17954                                  	; 22/10/2022
 17955                                  	;push	cs
 17956                                  	;pop	ds
 17957                                  
 17958 00000656 E81206                  	call	TempCDS			; set up cdss so re_init and sysinit
 17959                                  					;  can make disk system calls
 17960                                  					; tempcds trashes ds
 17961                                  	; 10/05/2019
 17962 00000659 2E8E1E[8302]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 17963                                  
 17964                                  	;if not ibmjapver
 17965                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 17966                                  	;endif
 17967                                  
 17968                                  	; 22/10/2022
 17969                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 17970                                  	; 30/12/2022
 17971                                  ;SYSINIT:0697h:	; (MSDOS 6.21 IO.SYS, SYSINIT)
 17972                                  	;call	far ptr 70h:89Bh
 17973 0000065E 9A[8F07]7000            	call	DOSBIODATASEG:RE_INIT
 17974                                  
 17975 00000663 FB                      	sti				; ints ok
 17976 00000664 FC                      	cld				; make sure
 17977                                  
 17978                                  ; 23/03/2019
 17979                                  
 17980                                  ;SYSINIT:069Eh	; 30/12/2022
 17981                                  
 17982                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 17983                                  ; of the way by putting it just below sysinit at end of memory.
 17984                                  
 17985 00000665 8CCB                    	mov	bx,cs
 17986 00000667 83EB10                  	sub	bx,10h
 17987 0000066A 8EC3                    	mov	es,bx
 17988 0000066C 31F6                    	xor	si,si
 17989 0000066E 89F7                    	mov	di,si
 17990 00000670 B98000                  	mov	cx,128
 17991 00000673 F3A5                    	rep	movsw
 17992                                  
 17993                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 17994                                  	; 22/10/2022
 17995 00000675 268C063600              	mov	[es:36h],es
 17996                                  
 17997                                   	; Set Process Data Block - Program Segment Prefix address
 17998                                  	; BX = PDB/PSP segment
 17999 0000067A B450                            mov	ah,50h	; SET_CURRENT_PDB
 18000 0000067C CD21                    	int	21h			; tell DOS we moved it
 18001                                  			; DOS - 2+ internal - SET PSP SEGMENT
 18002                                  			; BX = segment address of new PSP
 18003                                  	; 22/10/2022
 18004                                  	; 27/03/2019
 18005 0000067E 1E                      	push	ds ; */			; preserve DS returned by DOSINIT
 18006                                  
 18007 0000067F 0E                      	push	cs	
 18008 00000680 1F                      	pop	ds
 18009                                  
 18010                                  	; set up temp. critical error handler
 18011 00000681 BA[9D45]                	mov	dx,int24		; set up int 24 handler
 18012                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 18013                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 18014 00000684 B82425                  	mov	ax,2524h
 18015 00000687 CD21                    	int	21h
 18016                                  
 18017 00000689 803E[8103]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 18018 0000068E 7405                            je      short no_err		   ;  N: continue            M029
 18019 00000690 BA[D24D]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 18020                                          ; 22/10/2022
 18021                                  	;call	print 			   ;		             M029
 18022                                  	; 12/12/2022
 18023 00000693 EB03                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0                    
 18024                                  no_err:
 18025                                  	; 12/05/2019
 18026                                  	;----------------------------------------------
 18027                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 18028                                  	; 22/10/2022 - Retro DOS v4.0
 18029                                  	; 12/12/2022
 18030 00000695 BA[A145]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 18031                                  p_dosinit_msg:
 18032 00000698 E8DD3E                  	call	print			; Print message
 18033                                  	;----------------------------------------------
 18034                                  	
 18035                                  	; 11/12/2022
 18036                                  	; 22/10/2022
 18037                                  	; 23/03/2019 - Retro DOS v4.0
 18038                                  	;pop	ds			; start of free memory
 18039                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 18040                                  	
 18041                                  	; 11/12/2022
 18042                                  	; 27/03/2019
 18043 0000069B 8A16[9602]              	mov	dl,[DEFAULT_DRIVE]	
 18044 0000069F 1F                      	pop	ds ; */
 18045                                  
 18046 000006A0 08D2                    	or	dl,dl
 18047                                  	;jz	short nodrvset		; bios didn't say
 18048 000006A2 7410                    	jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 18049                                  	;dec	dl			; A = 0
 18050                                  	; 18/12/2022
 18051 000006A4 4A                      	dec	dx
 18052 000006A5 B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 18053 000006A7 CD21                    	int	21h			; select the disk
 18054                                  			; DOS - SELECT DISK
 18055                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 18056                                  			; Return: AL = number of logical drives
 18057                                  nodrvset:
 18058                                  	; 04/01/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS SYINIT)
 18059                                  	; (SYSINIT:06DFh)
 18060                                  	;push	ds
 18061 000006A9 29C0                    	sub	ax,ax
 18062 000006AB 8ED8                    	mov	ds,ax ; 0 ; ROM BIOS Data Area
 18063 000006AD A16C04                  	mov	ax,[46Ch] ; timer tick count (18.2 ticks per second)
 18064 000006B0 2EA3[8403]              	mov	[cs:_timer_lw_],ax
 18065                                  	;pop	ds
 18066                                  	; ds <> cs
 18067                                  
 18068                                  	; ---------------------
 18069                                  
 18070                                  	;ifdef	dblspace_hooks
 18071                                  	;	....
 18072                                  	;	....
 18073                                  	;endif	
 18074                                  
 18075                                  	; ---------------------
 18076                                  
 18077                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 18078                                  
 18079                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 18080                                  ; ----------------------------------------------------------------------------
 18081                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 18082                                  ; ----------------------------------------------------------------------------
 18083                                  ; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS SYSINIT)
 18084                                  
 18085                                  ProcessConfig:
 18086                                  	;; ds = cs ; 27/03/2019
 18087                                  	; 11/12/2022
 18088                                  	; ds <> cs	
 18089                                  
 18090                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 18091                                  
 18092 000006B4 E82619                  	call	doconf			; do pre-scan for dos=high/low
 18093                                  
 18094                                  	; 11/12/2022
 18095                                  	; 27/03/2019
 18096                                  	; ds = cs (at return from doconf)
 18097                                  
 18098                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 18099                                  ; It will either be relocated to low memory, above the DOS data structures,
 18100                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 18101                                  ; code entry points will be located in low memory. Dos_segreinit is used
 18102                                  ; to tell the DOS data where the code has been placed, and to install the
 18103                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 18104                                  ; must first initialize it in its present location and load the installable
 18105                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 18106                                  ; relocate the DOS code into HiMem.
 18107                                  ;
 18108                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 18109                                  ; to install the low memory stub (this must be done before allowing any
 18110                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 18111                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 18112                                  ; been patched.
 18113                                  
 18114                                  	; 22/10/2022 - Retro DOS v4.0
 18115                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 18116                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 18117                                  	; 11/12/2022
 18118 000006B7 803E[6A02]00            	cmp	byte [runhigh],0
 18119 000006BC 740C                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 18120                                  
 18121                                  ;------ user chose to load high
 18122                                  
 18123                                  	; 22/10/2022
 18124                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 18125                                  	; 11/12/2022
 18126                                  	; ds = cs
 18127 000006BE 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18128                                  
 18129                                  	;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 18130                                  	; 27/03/2019
 18131                                  	;;mov	es,[FINAL_DOS_LOCATION]
 18132                                  
 18133 000006C2 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 18134                                  	; 11/12/2022
 18135                                  	; ds = cs
 18136                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 18137 000006C4 FF1E[7B02]              	call	far [dos_segreinit]
 18138                                  
 18139 000006C8 EB10                    	jmp	short do_multi_pass
 18140                                  
 18141                                  ;------ User chose to load dos low
 18142                                  
 18143                                  dont_install_stub:
 18144                                  	; 22/10/2022
 18145 000006CA 31DB                    	xor	bx,bx			; M012
 18146                                  					; don't use int 21 call to alloc mem
 18147 000006CC E8D002                  	call	MovDOSLo		; move it !
 18148                                  
 18149 000006CF B80100                  	mov	ax,1			; dont install stub
 18150                                  	; 11/12/2022
 18151                                  	; ds = cs
 18152 000006D2 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18153                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 18154                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 18155                                  	; 27/03/2019
 18156                                  ;do_multi_pass:
 18157                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 18158                                  
 18159                                  	; 11/12/2022
 18160                                  	; ds = cs
 18161                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 18162 000006D6 FF1E[7B02]              	call	far [dos_segreinit]
 18163                                  do_multi_pass:
 18164 000006DA E80C02                  	call	AllocFreeMem		; allocate all the free mem
 18165                                  					; & update [memhi] & [area]
 18166                                  					; start of free memory.
 18167                                  	;ifdef	dblspace_hooks
 18168                                  	;mov	bx,0			; magic backdoor to place int hooks
 18169                                  	;call	cs:MagicBackdoor
 18170                                  	;endif
 18171                                  
 18172                                  ; Now, process config.sys some more.  
 18173                                  ; Load the device drivers and install programs
 18174                                  
 18175                                  	; 22/10/2022
 18176                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 18177                                  	; 11/12/2022
 18178                                  	; ds = cs
 18179 000006DD FE06[CB02]              	inc	byte [multi_pass_id]
 18180 000006E1 E89619                  	call	multi_pass		; load device drivers
 18181 000006E4 E8ED2D                  	call	ShrinkUMB
 18182 000006E7 E8112E                  	call	UnlinkUMB		; unlink all UMBs	;M002
 18183                                  	; 02/11/2022
 18184                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 18185                                  	; 11/12/2022
 18186                                  	; ds = cs
 18187 000006EA FE06[CB02]              	inc	byte [multi_pass_id]
 18188 000006EE E88919                  	call	multi_pass		; was load ifs (now does nothing)
 18189                                  
 18190                                  	;ifdef	dblspace_hooks
 18191                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 18192                                  	;endif
 18193                                  
 18194                                  	; ds = cs
 18195                                  	
 18196 000006F1 E82106                  	call	endfile			; setup fcbs, files, buffers etc
 18197                                  
 18198                                  	;ifdef	dblspace_hooks
 18199                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 18200                                  	;endif
 18201                                  
 18202                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 18203                                  ;to device drivers. This has been moved up to this point to avoid problems 
 18204                                  ;with overlays called from installed programs
 18205                                  
 18206                                  	; 11/12/2022
 18207                                  	; ds = cs
 18208                                  
 18209                                  	;;mov	ax,Bios_Data ; 0070h
 18210                                  	;mov	ax,KERNEL_SEGMENT
 18211                                  	; 21/10/2022
 18212 000006F4 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 18213 000006F7 8EC0                    	mov	es,ax			; point ES to bios data
 18214                                  
 18215 000006F9 26C606[9C08]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 18216                                  
 18217                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 18218                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 18219                                  	;test	byte [cs:install_flag],1
 18220                                  	; 11/12/2022
 18221                                  	; ds = cs
 18222 000006FF F606[CC02]01            	test	byte [install_flag],1
 18223                                  	;test	byte [cs:install_flag],have_install_cmd
 18224                                  					; are there install commands?
 18225 00000704 7407                    	jz	short dolast		; no, no need for further processing
 18226                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 18227                                  	; 11/12/2022
 18228                                  	; ds =cs
 18229 00000706 FE06[CB02]              	inc	byte [multi_pass_id]
 18230 0000070A E86D19                  	call	multi_pass		; execute install= commands
 18231                                  
 18232                                  dolast:
 18233                                  	
 18234                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 18235                                  ;  free the confbot area used for config.sys and sysinit itself.
 18236                                  
 18237                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 18238                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 18239                                  ; anything, but just set up the ROM area for suballocation (or print
 18240                                  ; a message if HiMem is not available).
 18241                                  ;
 18242                                  ; There is also this little hack for CPM style DOS calls that needs to
 18243                                  ; be done when A20 is set...
 18244                                  
 18245                                  	; 11/12/2022
 18246                                  	; ds = cs
 18247                                  
 18248                                  	; 22/10/2022
 18249                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 18250                                  	; 11/12/2022
 18251 0000070D 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 18252 00000712 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 18253 00000714 E83702                  	call	LoadDOSHiOrLo
 18254                                  _@@_:
 18255                                  	;cmp	byte [cs:runhigh],0	; are we running low
 18256                                  	; 11/12/2022
 18257                                  	; ds = cs
 18258 00000717 803E[6A02]00            	cmp	byte [runhigh],0
 18259                                  	;je	short _@@@
 18260 0000071C 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 18261 0000071E E82B05                  	call	CPMHack			; make ffff:d0 same as 0:c0
 18262                                  ;_@@@:
 18263                                  
 18264                                  ; We are now done with CONFIG.SYS processing
 18265                                  
 18266                                  ConfigDone:
 18267                                  	; 12/12/2022
 18268                                  	; 22/10/2022
 18269                                  	;mov	byte [cs:donotshownum],1 
 18270                                  					; done with config.sys.
 18271                                  					; do not show line number message.
 18272                                  	;mov	es,[cs:area]
 18273                                  	; 12/12/2022
 18274                                  	; ds = cs
 18275                                  	; 27/03/2019
 18276 00000721 C606[5303]01            	mov	byte [donotshownum],1
 18277 00000726 8E06[6603]              	mov	es,[area]
 18278                                  
 18279 0000072A B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 18280 0000072C CD21                    	int	21h
 18281                                  			; DOS - 2+ - FREE MEMORY
 18282                                  			; ES = segment address of area to be freed
 18283                                  
 18284                                  	; 22/10/2022
 18285                                  	;test	word [cs:install_flag],2
 18286                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 18287                                  	;test	byte [cs:install_flag],has_installed
 18288                                  	; 11/12/2022
 18289                                  	; ds = cs
 18290 0000072E F606[CC02]02            	test	byte [install_flag],2 ; has_installed
 18291                                  	;test	byte [install_flag],has_installed
 18292 00000733 741F                    	jz	short skip_free_sysinitbase ; no.
 18293                                  
 18294                                  ; set block from the old_area with impossible_owner_size.
 18295                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 18296                                  ; handle install= command.
 18297                                  
 18298                                  	; 12/12/2022
 18299                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 18300                                  	;push	bx
 18301                                  	
 18302                                  	; 22/10/2022
 18303                                  	;mov	es,[cs:old_area]
 18304                                  	;mov	bx,[cs:impossible_owner_size]
 18305                                  	; 12/12/2022
 18306                                  	; ds = cs
 18307 00000735 8E06[5C03]              	mov	es,[old_area]
 18308 00000739 8B1E[5E03]              	mov	bx,[impossible_owner_size]
 18309                                  	
 18310 0000073D B44A                    	mov	ah,4Ah ; SETBLOCK
 18311 0000073F CD21                    	int	21h
 18312                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 18313                                  			; ES = segment address of block to change
 18314                                  			; BX = new size in paragraphs
 18315 00000741 8CC0                    	mov	ax,es
 18316 00000743 48                      	dec	ax
 18317 00000744 8EC0                    	mov	es,ax			; point to arena
 18318                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 18319 00000746 26C70601000800          	mov	word [es:1],8
 18320                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 18321 0000074D 26C70608005344          	mov	word [es:8],'SD'
 18322                                  	
 18323                                  	; 12/12/2022
 18324                                  	;pop	bx
 18325                                          ;pop	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 18326                                  
 18327                                  skip_free_sysinitbase:
 18328                                  	; 22/10/2022
 18329                                  	;cmp	byte [cs:runhigh],0
 18330                                  	; 12/12/2022
 18331                                  	; ds = cs
 18332 00000754 803E[6A02]00            	cmp	byte [runhigh],0	
 18333 00000759 7403                    	je	short _@@@_ ; 04/07/2023
 18334                                  
 18335 0000075B E8D003                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 18336                                  
 18337                                  ; ----------------------------------------------------------------------------
 18338                                  
 18339                                  _@@@_:
 18340                                  	; 12/12/2022
 18341                                  	; ds = cs
 18342                                  	; 22/10/2022
 18343                                  	; 27/03/2019
 18344                                  	;push	cs
 18345                                  	;pop	ds			; point DS to sysinitseg
 18346                                  
 18347                                  ; set up the parameters for command
 18348                                  
 18349                                  ;	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 18350                                  ;;ifdef	MULTI_CONFIG
 18351                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 18352                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 18353                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 18354                                  ;	; !!!
 18355                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 18356                                  ;       ; !!!
 18357                                  ;	call    disable_autoexec        ; no, we should disable it
 18358                                  ;process_autoexec:
 18359                                  ;;endif	; !!!
 18360                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 18361                                  ;	; !!!
 18362                                  
 18363                                  	; 22/10/2022 
 18364                                  	;mov     cl,[command_line]
 18365                                          ;mov     ch,0
 18366                                          ;inc     cx
 18367                                          ;mov     si,command_line	
 18368                                  	;add     si,cx
 18369                                          ;mov     byte [si],cr	; cr-terminate command line
 18370                                  
 18371                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 18372                                  	; (SYSINIT:0809h)
 18373                                  
 18374                                  	;;;;
 18375                                  
 18376                                  	; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 18377                                  	; (SYSINIT:0813h)
 18378                                  	; ds = cs
 18379                                  	; push	cs
 18380                                  	; pop	ds
 18381                                  
 18382 0000075E C606[DD14]00            	mov	byte [config_cmd],0	; set special code for query_user
 18383 00000763 E8DB39                  	call    query_user		; to issue the AUTOEXEC prompt
 18384 00000766 7308                    	jnc	short process_autoexec	; we should process autoexec normally
 18385                                  	; !!!
 18386 00000768 800E[AA47]04            	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 18387                                  	; !!!
 18388 0000076D E8CD3A                  	call    disable_autoexec        ; no, we should disable it
 18389                                  process_autoexec:
 18390                                  	; !!!
 18391 00000770 E8153B                  	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 18392                                  
 18393                                  	;mov     cl,[command_line]
 18394                                  	; 30/12/2022
 18395 00000773 BE[E046]                	mov	si,command_line
 18396 00000776 8A0C                    	mov	cl,[si]
 18397 00000778 B500                    	mov     ch,0
 18398 0000077A 41                      	inc     cx
 18399                                  	;mov	si,command_line
 18400 0000077B 01CE                    	add     si,cx
 18401 0000077D C6040D                  	mov     byte [si],cr	; cr-terminate command line
 18402                                  	
 18403                                  	;;;;		
 18404                                  
 18405                                  ; 30/12/2022 - Retro DOS v4.2
 18406                                  %if 0
 18407                                  	;mov	si,(offset command_line+1)
 18408                                  	mov	si,command_line+1
 18409                                  	push    ds
 18410                                  	pop     es
 18411                                  	mov     di,si
 18412                                  	mov     cl,0FFh ; -1
 18413                                  _@_loop:
 18414                                  	inc     cl ; +1
 18415                                  	lodsb
 18416                                  	stosb
 18417                                  	or      al,al
 18418                                  	jnz     short _@_loop
 18419                                  	dec     di
 18420                                  	mov     al,0Dh
 18421                                  	stosb			; cr-terminate command line
 18422                                  	mov     [command_line],cl ; command line length (except CR)
 18423                                  
 18424                                  %endif
 18425                                  
 18426                                  ; ----------------------------------------------------------------------------
 18427                                  
 18428                                  ;   Once we get to this point, the above code, which is below "retry"
 18429                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 18430                                  ;   which follow....)
 18431                                  
 18432                                  retry:
 18433 00000780 BA[5246]                	mov	dx,commnd	; now pointing to file description
 18434                                  
 18435                                  ; we are going to open the command interpreter and size it as is done in
 18436                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 18437                                  ; there is not enough room for the command interpreter,exec will probably
 18438                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 18439                                  ; here to catch it. this code is not perfect (for instance .exe command
 18440                                  ; interpreters are possible) because it does its sizing based on the
 18441                                  ; assumption that the file being loaded is a .com file. it is close enough to
 18442                                  ; correctness to be usable.
 18443                                  
 18444                                  ; first, find out where the command interpreter is going to go.
 18445                                  
 18446 00000783 52                      	push	dx		; save pointer to name
 18447 00000784 BBFFFF                  	mov	bx,0FFFFh
 18448 00000787 B448                    	mov	ah,48h	; ALLOC
 18449 00000789 CD21                            int     21h             ; get biggest piece
 18450 0000078B B448                    	mov	ah,48h	; ALLOC
 18451 0000078D CD21                    	int	21h		; second time gets it
 18452 0000078F 726B                    	jc	short memerrjx	; oooops
 18453                                  
 18454 00000791 8EC0                    	mov	es,ax
 18455 00000793 B449                    	mov	ah,49h	; DEALLOC
 18456 00000795 CD21                    	int	21h		; give it right back
 18457 00000797 89DD                    	mov	bp,bx
 18458                                  
 18459                                  ; es:0 points to block,and bp is the size of the block in para.
 18460                                  
 18461                                  ; we will now adjust the size in bp down by the size of sysinit.
 18462                                  ; we need to do this because exec might get upset if some of the exec
 18463                                  ; data in sysinit is overlayed during the exec.
 18464                                  
 18465                                  	; 22/10/2022
 18466                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 18467 00000799 8B1E[9202]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 18468 0000079D 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 18469                                  
 18470                                  ; Note that the "config_wrkseg" environment data is a segment in
 18471                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 18472                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 18473                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 18474                                  ; we need to make sure that there's no way Exec will stomp on that data
 18475                                  ; before it can copy it, and one way to do that is to make the available
 18476                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 18477                                  ; from the "memory_size" segment value (which is typically A000h) instead
 18478                                  ; of the current sysinit CS....
 18479                                  ;
 18480                                  ; The reason I use the term "paranoid" is because this code should have
 18481                                  ; slid the data required by Exec up to the very top of memory, because as
 18482                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 18483                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 18484                                  ; consumes). Now it's just a little worse (65K or more, depending on
 18485                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 18486                                  ; is determined by the size of CONFIG.SYS.... -JTP
 18487                                  
 18488                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21, IO.SYS)
 18489                                  	; (SYSINIT:0858h)
 18490 0000079F 8B0E[D914]              	mov	cx,[config_envlen]
 18491 000007A3 E303                            jcxz	no_env		; use config_wrkseg only if there's env data
 18492 000007A5 A1[DB14]                        mov	ax,[config_wrkseg]	
 18493                                  
 18494                                  	; 22/10/2022
 18495                                  	;mov	cx,[config_envlen]
 18496                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 18497                                          ;mov	ax,[config_wrkseg]
 18498                                  ;no_env:
 18499                                  	; 22/10/2022
 18500                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 18501                                  no_env:
 18502                                  	; 30/12/2022
 18503                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0861h)
 18504 000007A8 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 18505 000007AA 83C311                  	add	bx,11h		; add the sysinit php
 18506 000007AD 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 18507 000007AF 724B                    	jc	short memerrjx	; if there isn't even this much memory, give up
 18508                                  
 18509                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 18510 000007B1 B8003D                          mov	ax,3D00h
 18511 000007B4 F9                      	stc                     ; in case of int 24
 18512 000007B5 CD21                    	int	21h
 18513 000007B7 7270                    	jc	short comerr	; ooops
 18514                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 18515                                  			; DS:DX -> ASCIZ filename
 18516                                  			; AL = access mode
 18517                                  			; 0 - read
 18518                                  	; 22/10/2022
 18519                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 18520 000007B9 89C3                            mov     bx,ax           ; handle in bx
 18521                                  
 18522                                  ;   If the standard command interpreter is being used, verify it is correct
 18523                                  
 18524                                  	; 30/12/2022 - Retro DOS v4.2
 18525                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:0874h)
 18526 000007BB 803E[4F46]00            	cmp	byte [newcmd],0	; was a new shell selected?
 18527 000007C0 7518                    	jne	short skip_validation ; yes
 18528 000007C2 BA[7C07]                	mov	dx,retry-4
 18529 000007C5 B90400                  	mov	cx,4		;
 18530 000007C8 B43F                    	mov	ah,READ		;
 18531 000007CA CD21                    	int	21h		;
 18532 000007CC 803E[7C07]E9            	cmp	byte [retry-4],0E9h
 18533 000007D1 7556                    	jne	short comerr
 18534                                  	; 20/04/2019 - Retro DOS v4.0
 18535                                  	; 30/12/2022 
 18536                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 18537                                  				; .. COMMAND.COM Version 6.20 (14h&0Fh)	
 18538 000007D3 803E[7F07]66            	cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 18539 000007D8 754F                    	jne	short comerr	;
 18540                                  
 18541                                  	; 22/10/2022
 18542                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 18543                                  	;jne	short skip_validation ; yes
 18544                                  	;mov	dx,retry-4
 18545                                  	;mov	cx,4		;
 18546                                  	;mov	ah,READ		;
 18547                                  	;int	21h		;
 18548                                  	;cmp	byte [retry-4],0E9h
 18549                                  	;jne	short comerr
 18550                                  	;; 20/04/2019 - Retro DOS v4.0
 18551                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 18552                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 18553                                  	;jne	short comerr	;
 18554                                  
 18555                                  ;skip_validation:
 18556                                  	; 22/10/2022
 18557                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 18558                                  skip_validation:
 18559                                  	; 30/12/2022
 18560                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0893h)
 18561 000007DA 31C9                    	xor	cx,cx
 18562 000007DC 31D2                    	xor	dx,dx
 18563                                  	;mov	ax,(LSEEK<<8)|2
 18564 000007DE B80242                  	mov	ax,4202h
 18565 000007E1 F9                      	stc			;in case of int 24
 18566 000007E2 CD21                    	int	21h		; get file size in dx:ax
 18567 000007E4 7243                    	jc	short comerr
 18568                                  				; convert size in dx:ax to para in ax
 18569 000007E6 83C00F                  	add	ax,15		; round up size for conversion to para
 18570 000007E9 83D200                  	adc	dx,0
 18571 000007EC E87304                  	call	off_to_para
 18572 000007EF B10C                    	mov	cl,12
 18573 000007F1 D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 18574 000007F3 09D0                    	or	ax,dx		; ax is now # of para for file
 18575 000007F5 83C010                  	add	ax,10h		; 100h byte php
 18576 000007F8 39E8                    	cmp	ax,bp		; will command fit in available mem?
 18577 000007FA 7208                    	jb	short okld	; jump if yes.
 18578                                  
 18579                                  ; 30/12/2022
 18580                                  %if 0
 18581                                  	; 22/10/2022
 18582                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 18583                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 18584                                  	; 02/11/2022
 18585                                  	;jmp	mem_err
 18586                                  	; 11/12/2022
 18587                                  	; ds = cs
 18588                                  	jmp	mem_err2
 18589                                  %endif
 18590                                  	; 30/12/2022
 18591                                  	; (MSDOS 6.21, IO.SYS, SYSINIT:08B5h)
 18592                                  memerrjx:
 18593 000007FC BA[9D4B]                	mov	dx,badmem 	; "Configuration too large for memory"
 18594 000007FF E8763D                  	call	print
 18595 00000802 EB3D                    	jmp     short continue
 18596                                  
 18597                                  okld:
 18598 00000804 B43E                    	mov	ah,3Eh ; CLOSE
 18599 00000806 CD21                    	int	21h		; close file
 18600                                  
 18601                                  	; 22/10/2022
 18602 00000808 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 18603                                  
 18604                                  	; 24/03/2019
 18605                                  
 18606 00000809 0E                      	push	cs		; point es to sysinitseg
 18607 0000080A 07                      	pop	es
 18608 0000080B BB[BD02]                        mov     bx,COMEXE	; point to exec block
 18609                                  	; 22/10/2022
 18610                                  	;pop	dx              ; recover pointer to name
 18611                                  
 18612                                  ;;ifdef	MULTI_CONFIG
 18613                                  
 18614                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 18615                                  ;   there will be data if there were any valid SET commands and/or if a menu
 18616                                  ;   selection was made (in which case the CONFIG environment variable will be
 18617                                  ;   set to that selection).
 18618                                  
 18619                                  	; 23/10/2022
 18620                                  	;mov	cx,[config_envlen]
 18621                                  	;jcxz	no_envdata
 18622                                          ;mov	cx,[config_wrkseg]
 18623                                  ;no_envdata:
 18624                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 18625                                  	;mov	[bx],cx
 18626                                  
 18627                                  ;;endif	;MULTI_CONFIG
 18628                                  
 18629                                  	; 30/12/2022 - Retro DOS v4.2
 18630                                  	; (MSDOS 6.21 IO.SYS SYSINIT:08C7h)
 18631 0000080E 8B0E[D914]              	mov	cx,[config_envlen]
 18632 00000812 E304                    	jcxz	no_envdata
 18633 00000814 8B0E[DB14]                      mov	cx,[config_wrkseg]
 18634                                  no_envdata:
 18635                                  	;mov	[bx+EXEC0.ENVIRON],cx
 18636 00000818 890F                    	mov	[bx],cx	
 18637                                  	
 18638                                  	; 23/10/2022
 18639                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 18640                                  
 18641                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 18642 0000081A 8C4F04                  	mov	[bx+4],cs
 18643                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 18644 0000081D 8C4F08                  	mov	[bx+8],cs
 18645                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 18646 00000820 8C4F0C                  	mov	[bx+12],cs
 18647                                  
 18648                                  	;mov	ax,(EXEC<<8) + 0
 18649                                  	; 23/10/2022
 18650                                  	;xor	ax,ax
 18651                                  	;mov	ah,4Bh
 18652                                  	; 04/07/2023
 18653                                  	;mov	ax,4B00h
 18654 00000823 B8004B                  	mov	ax,(EXEC<<8)
 18655                                  
 18656 00000826 F9                      	stc                     ; in case of int 24
 18657 00000827 CD21                            int     21h             ; go start up command
 18658                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 18659                                  			; DS:DX -> ASCIZ filename
 18660                                  			; ES:BX -> parameter block
 18661                                  			; AL = subfunc: load & execute program
 18662                                  	;push	cs
 18663                                  	;pop	ds
 18664                                  
 18665                                  	; 23/10/2022
 18666                                  	;push	dx		; push to balance fall-through pop
 18667                                  
 18668                                  ; note fall through if exec returns (an error)
 18669                                  comerr:
 18670                                  	; 23/10/2022
 18671                                  ;;ifdef	MULTI_CONFIG
 18672                                  	;cmp	byte [commnd4],0
 18673                                  	;je	short comerr2	; all defaults exhausted, print err msg
 18674                                  	;cmp	byte [newcmd],0
 18675                                  	;je	short continue	; don't print err msg for defaults just yet
 18676                                  ;comerr2:
 18677                                  ;;endif
 18678                                  
 18679                                  	; 30/12/2022 - Retro DOS v4.2
 18680 00000829 0E                      	push	cs
 18681 0000082A 1F                      	pop	ds
 18682 0000082B 803E[C346]00            	cmp	byte [commnd4],0
 18683 00000830 7407                    	je	short comerr2	; all defaults exhausted, print err msg
 18684 00000832 803E[4F46]00            	cmp	byte [newcmd],0
 18685 00000837 7408                    	je	short continue	; don't print err msg for defaults just yet
 18686                                  comerr2:
 18687 00000839 52                      	push	dx ; 30/12/2022
 18688                                  
 18689                                  	; 23/10/2022
 18690 0000083A BA[194B]                        mov     dx,badcom	; want to print command error
 18691 0000083D E80C3D                  	call	badfil
 18692                                  	
 18693 00000840 5A                      	pop	dx  ; 30/12/2022
 18694                                  continue:
 18695                                  	; 23/10/2022
 18696                                  	;pop	dx
 18697                                  
 18698                                  ; 30/12/2022
 18699                                  %if 0
 18700                                  
 18701                                  ;;ifndef MULTI_CONFIG
 18702                                  	;jmp	stall
 18703                                  	; 24/10/2022
 18704                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 18705                                  	jmp	short stall
 18706                                  ;;else
 18707                                  
 18708                                  %endif
 18709                                  	
 18710                                  ; 30/12/2022 (MSDOS 6.21 SYSINIT, Retro DOS v4.2)
 18711                                  ;%if 1
 18712                                  ; 23/10/2022 (MSDOS 5.0 SYSINIT, Retrodos v4.0)
 18713                                  ;%if 0	
 18714 00000841 B419                    	mov	ah,GET_DEFAULT_DRIVE ; 19h
 18715 00000843 CD21                    	int	21h             ;
 18716 00000845 0441                    	add	al,'A'          ;
 18717 00000847 88C2                    	mov	dl,al           ; DL == default drive letter
 18718 00000849 BE[9246]                	mov	si,commnd2
 18719 0000084C 803E[4F46]00            	cmp	byte [newcmd],0 ; if a SHELL= was given
 18720 00000851 7505                    	jne	short do_def2	; then try the 2nd alternate;
 18721 00000853 C60400                  	mov	byte [si],0	; otherwise, the default SHELL= was tried,
 18722 00000856 EB05                    	jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 18723                                  do_def2:			
 18724 00000858 803C00                  	cmp	byte [si],0	; has 2nd alternate been tried?
 18725 0000085B 7554                            jne	short do_alt    ; no
 18726                                  do_def3:
 18727 0000085D BE[A346]                	mov	si,commnd3
 18728 00000860 803C00                  	cmp	byte [si],0	; has 3rd alternate been tried?
 18729 00000863 754C                    	jne	short do_alt	; no
 18730 00000865 BE[C346]                	mov	si,commnd4
 18731 00000868 803C00                  	cmp	byte [si],0	; has 4th alternate been tried?
 18732 0000086B 7544                    	jne	short do_alt	; no
 18733 0000086D 52                      	push	dx              ;
 18734 0000086E BA[754D]                	mov	dx,badcomprmpt
 18735 00000871 E8043D                  	call	print		;
 18736 00000874 5A                      	pop	dx              ; recover default drive letter in DL
 18737                                  request_input:			;
 18738 00000875 B402                    	mov	ah,STD_CON_OUTPUT
 18739 00000877 CD21                    	int	21h             ;
 18740 00000879 52                      	push	dx              ;
 18741 0000087A B23E                    	mov	dl,'>'          ;
 18742 0000087C CD21                    	int	21h             ;
 18743 0000087E 8A1E[5146]              	mov	bl,[tmplate+1]	;
 18744 00000882 B700                    	mov	bh,0            ;
 18745 00000884 C687[5246]0D            	mov	byte [commnd+bx],0Dh
 18746 00000889 BA[5046]                	mov	dx,tmplate
 18747 0000088C B40A                    	mov	ah,STD_CON_STRING_INPUT
 18748 0000088E CD21                    	int	21h             ; read a line of input
 18749 00000890 BA[C44A]                	mov	dx,crlfm	;
 18750 00000893 E8E23C                  	call	print           ;
 18751 00000896 5A                      	pop	dx              ;
 18752 00000897 8A1E[5146]              	mov	bl,[tmplate+1]	;
 18753 0000089B 08DB                    	or	bl,bl           ; was anything typed?
 18754 0000089D 74D6                    	jz	short request_input ;
 18755 0000089F C606[4F46]01            	mov	byte [newcmd],1 ; disable validation for user-specified binaries
 18756 000008A4 C687[5246]00            	mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 18757 000008A9 C706[E046]000D          	mov	word [command_line],0D00h
 18758 000008AF EB35                    	jmp	short do_exec   ;
 18759                                  do_alt:
 18760 000008B1 1E                      	push	ds
 18761 000008B2 07                      	pop	es
 18762 000008B3 C606[4F46]00            	mov	byte [newcmd],0 ; force validation for alternate binaries
 18763 000008B8 BF[5246]                	mov	di,commnd	;
 18764                                  do_alt1:
 18765 000008BB AC                      	lodsb			; copy the alternate, zapping it as we go,
 18766 000008BC C644FF00                	mov	byte [si-1],0	; so that we know it's been tried
 18767 000008C0 AA                      	stosb 			;
 18768 000008C1 08C0                    	or	al,al		;
 18769 000008C3 75F6                    	jnz	short do_alt1	;
 18770 000008C5 BF[E046]                	mov	di,command_line
 18771 000008C8 807C023A                	cmp	byte [si+2],':'
 18772 000008CC 7503                    	jne	short do_alt2	;
 18773 000008CE 885401                  	mov	[si+1],dl	; stuff default drive into alt. command line
 18774                                  do_alt2:			;
 18775 000008D1 AC                      	lodsb			;
 18776 000008D2 AA                      	stosb			;
 18777 000008D3 08C0                    	or	al,al           ;
 18778 000008D5 75FA                    	jnz	short do_alt2   ;
 18779 000008D7 C645FF0D                	mov	byte [di-1],cr  ; ODh
 18780                                  
 18781                                  ;;   Last but not least, see if we need to call disable_autoexec
 18782                                  
 18783                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 18784                                  	;cmp	[command_line-1],0
 18785                                          ;jne	short do_exec   ;
 18786                                          ;mov	[command_line-1],'/'
 18787                                  	;call	disable_autoexec ;
 18788                                  
 18789                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 18790 000008DB C606[A047]00            	mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 18791 000008E0 E85A39                  	call	disable_autoexec
 18792 000008E3 E8A239                  	call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 18793                                  do_exec:
 18794 000008E6 E997FE                  	jmp	retry		;
 18795                                  
 18796                                  ;;endif	;MULTI_CONFIG
 18797                                  
 18798                                  ;%endif ; 23/10/2022 (MSDOS 5.0 SYSINIT)
 18799                                  ;%endif ; 30/12/2022 (MSDOS 6.21 SYSINIT)
 18800                                  
 18801                                  ; 24/03/2019 - Retro DOS v4.0
 18802                                  
 18803                                  ; ----------------------------------------------------------------------
 18804                                  ; procedure : AllocFreeMem
 18805                                  ;
 18806                                  ; Allocate Max memory from DOS to find out where to load DOS.
 18807                                  ; DOS is at temporary location when this call is being made
 18808                                  ;
 18809                                  ; Inputs : None
 18810                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 18811                                  ;	   [area] & [memhi] set to the para value of the start of the
 18812                                  ;	   free memory.
 18813                                  ;
 18814                                  ; Uses   : AX, BX
 18815                                  ;
 18816                                  ; ----------------------------------------------------------------------
 18817                                  	
 18818                                  	; 30/12/2022 - Retro DOS v4.2
 18819                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:09A2h)
 18820                                  
 18821                                  	; 23/10/2022
 18822                                  AllocFreeMem:
 18823 000008E9 BBFFFF                  	mov	bx,0FFFFh
 18824 000008EC B448                    	mov	ah,48h ; ALLOC
 18825 000008EE CD21                    	int	21h			; first time fails
 18826 000008F0 B448                    	mov	ah,48h ; ALLOC
 18827 000008F2 CD21                    	int	21h			; second time gets it
 18828                                  	; 11/12/2022
 18829                                  	; ds = cs
 18830                                  	;mov	[cs:area],ax
 18831                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 18832 000008F4 A3[6603]                	mov	[area],ax
 18833 000008F7 A3[6203]                	mov	[memhi],ax		; memhi:memlo now points to			
 18834 000008FA C3                      	retn				; start of free memory
 18835                                  				
 18836                                  	; include msbio.cl6
 18837                                  ; ----------------------------------------------------------------------
 18838                                  DOSLOMSG:
 18839 000008FB 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 18839 00000904 7661696C61626C653A-
 18839 0000090D 204C6F6164696E6720-
 18839 00000916 444F53206C6F770D0A-
 18839 0000091F 24                 
 18840                                  FEmsg:
 18841 00000920 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 18841 00000929 6F723A2043616E6E6F-
 18841 00000932 7420616C6C6F636174-
 18841 0000093B 65204D656D6F727920-
 18841 00000944 666F7220444F530D0A-
 18841 0000094D 24                 
 18842                                  
 18843                                  ; ----------------------------------------------------------------------
 18844                                  ;
 18845                                  ; procedure : LoadDOSHiOrLo
 18846                                  ;
 18847                                  ;		Tries to move DOS into HMA. If it fails then loads
 18848                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 18849                                  ;		moved; this just tries to allocate the HMA, and prints
 18850                                  ;		a message if this is not possible.
 18851                                  ;
 18852                                  ; ----------------------------------------------------------------------
 18853                                  
 18854                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18855                                  LoadDOSHiOrLo:
 18856                                  	; 27/03/2019 - Retro DOS v4.0
 18857                                  	; ds = cs
 18858 0000094E E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 18859                                  	;jc	short LdngLo		; If that don't work...
 18860                                  	;retn
 18861                                  	; 18/12/2022
 18862 00000951 731C                    	jnc	short LoadDosHi_ok
 18863                                  LdngLo:
 18864                                  	; 23/10/2022
 18865                                  	;push	cs
 18866                                  	;pop	ds
 18867                                  	; 11/12/2022
 18868                                  	; ds = cs
 18869 00000953 B409                    	mov	ah,9
 18870 00000955 BA[FB08]                	mov	dx,DOSLOMSG		; inform user that we are
 18871 00000958 CD21                    	int	21h			; loading low
 18872                                  
 18873                                  ;ifndef ROMDOS
 18874                                  	; actually move the dos, and reinitialize it.
 18875                                  
 18876 0000095A BB0100                  	mov	bx,1				; M012
 18877                                  						;  use int 21 alloc for mem
 18878 0000095D E83F00                  	call	MovDOSLo
 18879                                  	; 11/12/2022
 18880                                  	; ds = cs
 18881                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 18882                                  	; 23/10/2022
 18883 00000960 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18884                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 18885                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 18886 00000964 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 18887                                  	; 11/12/2022
 18888                                  	; ds = cs
 18889                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 18890 00000966 FF1E[7B02]              	call	far [dos_segreinit] ; 27/03/2019
 18891                                  	
 18892                                  ;endif ; ROMDOS
 18893                                  	; 23/10/2022
 18894                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 18895                                  	; 11/12/2022
 18896                                  	; ds = cs
 18897 0000096A C606[6A02]00            	mov	byte [runhigh],0 ; 27/03/2019
 18898                                  LoadDosHi_ok:	; 18/12/2022
 18899 0000096F C3                      	retn
 18900                                  
 18901                                  ; ----------------------------------------------------------------------
 18902                                  ;
 18903                                  ; procedure : TryToMovDOSHi
 18904                                  ;
 18905                                  ;		This tries to move DOS into HMA.
 18906                                  ;		Returns CY if it failed.
 18907                                  ;		If it succeeds returns with carry cleared.
 18908                                  ;
 18909                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 18910                                  ;		the A20 switching code in the low mem stub to be installed.
 18911                                  ; 
 18912                                  ; ----------------------------------------------------------------------
 18913                                  
 18914                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18915                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 18916                                  TryToMovDOSHi:
 18917                                  	; 11/12/2022
 18918                                  	; 27/03/2019 - Retro DOS v4.0
 18919                                  	; ds = cs
 18920 00000970 E81300                  	call	MovDOSHi
 18921 00000973 7210                    	jc	short ttldhx
 18922                                  
 18923                                  ;ifndef ROMDOS
 18924                                  	; 23/10/2022
 18925                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 18926                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 18927                                  	; 11/12/2022
 18928                                  	; ds = cs
 18929 00000975 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18930                                  ;else
 18931                                  ;	..
 18932                                  ;endif ; ROMDOS
 18933                                  
 18934                                  	; 11/12/2022
 18935                                  	; ds = cs
 18936 00000979 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 18937                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 18938 0000097B FF1E[7B02]              	call	far [dos_segreinit]
 18939                                  	;mov	byte [cs:runhigh],1
 18940 0000097F C606[6A02]01            	mov	byte [runhigh],1
 18941 00000984 F8                      	clc
 18942                                  ttldhx:
 18943 00000985 C3                      	retn
 18944                                  
 18945                                  ; ----------------------------------------------------------------------
 18946                                  ;
 18947                                  ; procedure : MovDOSHi
 18948                                  ;
 18949                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 18950                                  ;		For ROMDOS, the code is not actually moved, but the
 18951                                  ;		HMA is allocated and prepared for sub-allocation.
 18952                                  ;
 18953                                  ;		Returns : CY if it failed
 18954                                  ;
 18955                                  ; ----------------------------------------------------------------------
 18956                                  
 18957                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18958                                  MovDOSHi:
 18959                                  	; 14/05/2019
 18960                                  	; 27/03/2019 - Retro DOS v4.0
 18961                                  	; ds = cs
 18962 00000986 E8D900                  	call	AllocHMA			; did we get HMA?
 18963 00000989 7213                    	jc	short mdhx			; no
 18964 0000098B B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 18965 0000098E 8EC0                    	mov	es,ax
 18966                                  
 18967                                  ;ifndef ROMDOS
 18968                                  	; actually move the BIOS and DOS
 18969                                  
 18970                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18971                                  	; 24/03/2019
 18972                                  	
 18973                                  	; 23/10/2022
 18974 00000990 E83400                  	call	MovBIOS				; First move BIOS into HMA
 18975                                  
 18976                                  	; ES:DI points to free HMA after BIOS
 18977                                  	
 18978                                  	; 14/05/2019
 18979                                  	; 24/03/2019 - Retro DOS v4.0
 18980                                  	;xor	di,di
 18981                                  	
 18982                                  	; 23/10/2022
 18983                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 18984                                  	; 11/12/2022
 18985                                  	; ds = cs
 18986 00000993 8B0E[8102]              	mov	cx,[hi_doscod_size]		; when it is in HMA
 18987 00000997 E81100                  	call	MovDOS				; and move it
 18988                                  
 18989                                  	; ES:DI points to free HMA after DOS
 18990                                  ;else
 18991                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 18992                                  ;
 18993                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 18994                                  ;
 18995                                  ;endif ; ROMDOS
 18996                                  
 18997 0000099A E86302                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 18998 0000099D F8                      	clc
 18999                                  mdhx:
 19000 0000099E C3                      	retn
 19001                                  
 19002                                  ; ----------------------------------------------------------------------
 19003                                  ;
 19004                                  ; procedure : MovDOSLo
 19005                                  ;
 19006                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 19007                                  ;
 19008                                  ; ----------------------------------------------------------------------
 19009                                  
 19010                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19011                                  
 19012                                  ;ifndef ROMDOS
 19013                                  
 19014                                  MovDOSLo:
 19015                                  	; 14/05/2019
 19016                                  	; 27/03/2019 - Retro DOS v4.0
 19017                                  	; ds = cs
 19018 0000099F E84800                  	call	AllocMemForDOS			; incestuosly!!!
 19019                                  	
 19020                                  	; 23/10/2022
 19021                                  	; 14/05/2019
 19022                                  	;inc	ax  ; skip MCB
 19023                                  	
 19024 000009A2 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 19025                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 19026                                  	; 24/03/2019
 19027                                  	
 19028                                  	; 23/10/2022
 19029 000009A4 E82000                  	call	MovBIOS
 19030                                  
 19031                                  ;------ ES:DI points memory immediately after BIOS
 19032                                  
 19033                                  	; 14/05/2019
 19034                                  	; NOTE: 
 19035                                  	;     Order of (RETRO) DOS kernel sections at memory:
 19036                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 19037                                  
 19038                                  	; 24/03/2019 - Retro DOS v4.0
 19039                                  	;xor	di,di	
 19040                                  
 19041                                  	; 23/10/2022
 19042                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 19043                                  	; 11/12/2022
 19044                                  	; ds = cs
 19045 000009A7 8B0E[7F02]              	mov	cx,[lo_doscod_size]		; low
 19046                                  	;call	MovDOS
 19047                                  	;retn
 19048                                  	; 11/12/2022
 19049                                  	;jmp	short MovDOS
 19050                                  
 19051                                  ;endif ; ROMDOS
 19052                                  
 19053                                  ; 11/12/2022
 19054                                  
 19055                                  ; ----------------------------------------------------------------------
 19056                                  ;
 19057                                  ; procedure : MovDOS
 19058                                  ;
 19059                                  ;		Moves DOS code into requested area
 19060                                  ;
 19061                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 19062                                  ;	     CX    - size of DOS code to be moved
 19063                                  ;
 19064                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 19065                                  ;
 19066                                  ; ----------------------------------------------------------------------
 19067                                  
 19068                                  	; 11/12/2022
 19069                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19070                                  
 19071                                  ;ifndef ROMDOS
 19072                                  
 19073                                  MovDOS:
 19074                                  	; 14/05/2019
 19075                                  	; 27/03/2019 - Retro DOS v4.0
 19076                                  
 19077                                  	; 11/12/2022
 19078                                  	; ds = cs
 19079                                  
 19080                                  	; 23/10/2022
 19081                                  	;push	ds ; *//
 19082                                  	
 19083 000009AB 06                      	push	es
 19084 000009AC 57                      	push	di
 19085                                  
 19086                                  	; 11/12/2022
 19087 000009AD 1E                      	push	ds ; *// ; 11/12/202
 19088                                  
 19089                                  	; 29/04/2019
 19090 000009AE C536[6F02]              	lds	si,[dosinit] ; 11/12/2022
 19091                                  	; 23/10/2022
 19092                                  	;lds	si,[cs:dosinit]
 19093                                  	;;mov	ax,si
 19094                                  
 19095 000009B2 F3A4                    	rep	movsb
 19096                                  
 19097 000009B4 1F                      	pop	ds ; *// ; 11/12/2022
 19098                                  
 19099 000009B5 5B                      	pop	bx				; get back offset into which
 19100                                  						;  DOS was moved
 19101                                  
 19102 000009B6 2EA1[6F02]              	mov	ax,[cs:dosinit]			; get the offset at which DOS
 19103                                  						;  wants to run
 19104 000009BA 29D8                    	sub	ax,bx
 19105 000009BC E8A302                  	call	off_to_para
 19106 000009BF 5B                      	pop	bx				; get the segment at which
 19107                                  						;  we moved DOS into
 19108 000009C0 29C3                    	sub	bx,ax				; Adjust segment
 19109                                  	
 19110                                  	; 11/12/2022
 19111                                  	; 23/10/2022
 19112                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 19113                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 19114                                  	; 11/12/2022
 19115 000009C2 891E[7102]              	mov	[CURRENT_DOS_LOCATION],bx
 19116                                  		
 19117                                  	; 27/03/2019
 19118                                  	;pop	ds ; *//
 19119                                  	; ds = cs
 19120                                  	;mov	[FINAL_DOS_LOCATION],bx
 19121                                  
 19122 000009C6 C3                      	retn
 19123                                  
 19124                                  ;endif ;ROMDOS
 19125                                  
 19126                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 19127                                  ; 24/03/2019
 19128                                  ; ----------------------------------------------------------------------
 19129                                  ;
 19130                                  ; procedure : MovBIOS
 19131                                  ;
 19132                                  ;		Moves BIOS code into requested segment
 19133                                  ;
 19134                                  ;	In : ES - segment to which BIOS is to be moved
 19135                                  ;		  ( it moves always into offset BCode_Start)
 19136                                  ;
 19137                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 19138                                  ;
 19139                                  ; ----------------------------------------------------------------------
 19140                                  
 19141                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19142                                  
 19143                                  ;ifndef ROMDOS
 19144                                  
 19145                                  MovBIOS: ; proc	near
 19146                                  	; 11/12/2022
 19147 000009C7 1E                      	push	ds ; ds = cs	
 19148                                  	;
 19149                                  	; 23/10/2022
 19150 000009C8 2E8E1E[8702]            	mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 19151                                  	;mov	si,BCODE_START ; mov si,30h
 19152                                  	; 09/12/2022
 19153 000009CD BE[3000]                	mov	si,BCODESTART
 19154 000009D0 89F7                    	mov	di,si
 19155 000009D2 B9B01A                  	mov	cx,BCODE_END ; mov cx,1A60h
 19156 000009D5 29F1                    	sub	cx,si				; size of BIOS
 19157 000009D7 D1E9                    	shr	cx,1				; Both the labels are para
 19158                                  						;  aligned
 19159 000009D9 F3A5                    	rep	movsw
 19160                                  	
 19161                                  	; 11/12/2022
 19162 000009DB 1F                      	pop	ds ; ds = cs
 19163                                  	;
 19164 000009DC 06                      	push	es
 19165 000009DD 57                      	push	di				; save end of BIOS
 19166 000009DE 8CC0                    	mov	ax,es
 19167                                  	;
 19168                                  	; 11/12/2022
 19169                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 19170                                  	;;call	dword ptr cs:_seg_reinit_ptr
 19171                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 19172                                  	; ds = cs
 19173 000009E0 A3[8203]                	mov	[BCodeSeg],ax
 19174 000009E3 FF1E[8502]              	call	far [seg_reinit_ptr]
 19175                                  	;
 19176 000009E7 5F                      	pop	di
 19177 000009E8 07                      	pop	es				; get back end of BIOS
 19178 000009E9 C3                      	retn
 19179                                  
 19180                                  ;MovBIOS endp
 19181                                  
 19182                                  ;endif ; ROMDOS
 19183                                  
 19184                                  ; 11/12/2022
 19185                                  %if 0
 19186                                  
 19187                                  ; 24/03/2019
 19188                                  
 19189                                  ; ----------------------------------------------------------------------
 19190                                  ;
 19191                                  ; procedure : MovDOS
 19192                                  ;
 19193                                  ;		Moves DOS code into requested area
 19194                                  ;
 19195                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 19196                                  ;	     CX    - size of DOS code to be moved
 19197                                  ;
 19198                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 19199                                  ;
 19200                                  ; ----------------------------------------------------------------------
 19201                                  
 19202                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19203                                  
 19204                                  ;ifndef ROMDOS
 19205                                  
 19206                                  MovDOS:
 19207                                  	; 14/05/2019
 19208                                  	; 27/03/2019 - Retro DOS v4.0
 19209                                  
 19210                                  	; 11/12/2022
 19211                                  	; ds = cs
 19212                                  
 19213                                  	; 23/10/2022
 19214                                  	;push	ds ; *//
 19215                                  	
 19216                                  	push	es
 19217                                  	push	di
 19218                                  
 19219                                  	; 11/12/2022
 19220                                  	push	ds ; *// ; 11/12/202
 19221                                  
 19222                                  	; 29/04/2019
 19223                                  	lds	si,[dosinit] ; 11/12/2022
 19224                                  	; 23/10/2022
 19225                                  	;lds	si,[cs:dosinit]
 19226                                  	;;mov	ax,si
 19227                                  
 19228                                  	rep	movsb
 19229                                  
 19230                                  	pop	ds ; *// ; 11/12/2022
 19231                                  
 19232                                  	pop	bx				; get back offset into which
 19233                                  						;  DOS was moved
 19234                                  
 19235                                  	mov	ax,[cs:dosinit]			; get the offset at which DOS
 19236                                  						;  wants to run
 19237                                  	sub	ax,bx
 19238                                  	call	off_to_para
 19239                                  	pop	bx				; get the segment at which
 19240                                  						;  we moved DOS into
 19241                                  	sub	bx,ax				; Adjust segment
 19242                                  	
 19243                                  	; 11/12/2022
 19244                                  	; 23/10/2022
 19245                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 19246                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 19247                                  	; 11/12/2022
 19248                                  	mov	[CURRENT_DOS_LOCATION],bx
 19249                                  		
 19250                                  	; 27/03/2019
 19251                                  	;pop	ds ; *//
 19252                                  	; ds = cs
 19253                                  	;mov	[FINAL_DOS_LOCATION],bx
 19254                                  
 19255                                  	retn
 19256                                  
 19257                                  ;endif ;ROMDOS
 19258                                  
 19259                                  %endif
 19260                                  
 19261                                  ; ----------------------------------------------------------------------
 19262                                  ;
 19263                                  ; procedure : AllocMemForDOS
 19264                                  ;
 19265                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 19266                                  ;
 19267                                  ;	Out : AX - seg of allocated memoryblock
 19268                                  ;
 19269                                  ; ----------------------------------------------------------------------
 19270                                  
 19271                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19272                                  
 19273                                  ;ifndef ROMDOS
 19274                                  
 19275                                  AllocMemForDOS:
 19276                                  	; 11/12/2022
 19277                                  	; 14/05/2019
 19278                                  	; 27/03/2019 - Retro DOS v4.0
 19279                                  	; ds = cs
 19280                                  	;mov	ax,BCode_end
 19281                                  	;sub	ax,BCode_start		; BIOS code size
 19282                                  	; 23/10/2022
 19283 000009EA B8B01A                  	mov	ax,BCODE_END ; 1A60h	; 1A70h for MSDOS 6.21
 19284                                  					; 30/12/2022
 19285                                  	;sub	ax,BCODE_START ; 30h
 19286                                  	; 09/12/2022
 19287 000009ED 2D[3000]                	sub	ax,BCODESTART 
 19288                                  	; 24/03/2019 - Retro DOS v4.0 
 19289                                  	; 02/11/2022
 19290                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 19291                                  	; 11/12/2022
 19292                                  	; ds = cs
 19293 000009F0 0306[7F02]              	add	ax,[lo_doscod_size]
 19294 000009F4 83C00F                  	add	ax,15
 19295 000009F7 E86802                  	call	off_to_para			; convert to para
 19296                                  	; 23/10/2022
 19297                                  	; 14/05/2019
 19298                                  	;inc	ax ; + 1 paragraph for MCB
 19299 000009FA 09DB                    	or	bx,bx				; M012
 19300 000009FC 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 19301 000009FE 741A                    	jz	short update_arena		; M012
 19302 00000A00 B448                    	mov	ah,48h				; request DOS
 19303 00000A02 CD21                    	int	21h
 19304 00000A04 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 19305                                   	; 23/10/2022
 19306                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 19307 00000A06 83E803                  	sub	ax,3				; Take care ORG 30h of
 19308                                  						;  BIOS code
 19309 00000A09 8EC0                    	mov	es,ax
 19310                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 19311                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 19312                                  	; 14/05/2019
 19313                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 19314                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 19315                                  	; 23/10/2022
 19316 00000A0B 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 19317 00000A12 26C70628005343          	mov	word [es:20h+8],'SC'		;  code area
 19318                                  
 19319 00000A19 C3                      	retn
 19320                                  
 19321                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 19322                                  ;	  using DOS itself causes an arena to be generated.
 19323                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 19324                                  ;	  assume that the device drivers are loaded into
 19325                                  ;	  the first arena. For this reason, MagicDrv's
 19326                                  ;	  main device driver header arena is manually
 19327                                  ;	  truncated from the arena chain, and the space
 19328                                  ;	  for DOS is allocated using the following
 19329                                  ;	  simple code, which also assumes that the
 19330                                  ;	  first arena is the free one where DOS's low
 19331                                  ;	  stub will go.
 19332                                  ;
 19333                                  ; M012 : BEGIN
 19334                                  
 19335                                  	; 23/10/2022
 19336                                  update_arena:
 19337 00000A1A 1E                      	push	ds ; ds = cs
 19338 00000A1B 57                      	push	di
 19339 00000A1C 51                      	push	cx
 19340 00000A1D 52                      	push	dx
 19341                                  	; 23/10/2022
 19342                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 19343                                  	; 11/12/2022
 19344                                  	; ds = cs 
 19345 00000A1E C53E[6B02]              	lds	di,[DOSINFO] ; 27/03/2019	
 19346 00000A22 4F                      	dec	di
 19347 00000A23 4F                      	dec	di				; Arena head is immediately
 19348                                  						;  before sysvar
 19349 00000A24 8E05                    	mov	es,[di]				; es = arena head
 19350                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 19351 00000A26 268B0E0300              	mov	cx,[es:3]
 19352 00000A2B 39D9                    	cmp	cx,bx				; is it sufficient ?
 19353 00000A2D 7227                    	jb	short FatalErr			; no, fatal error
 19354                                  
 19355                                  	;mov	dl,[es:ARENA.SIGNATURE]
 19356 00000A2F 268A160000              	mov	dl,[es:0]
 19357 00000A34 8CC0                    	mov	ax,es
 19358 00000A36 01D8                    	add	ax,bx				; ax = new arena head
 19359 00000A38 8905                    	mov	[di],ax				; store it in DOS data area
 19360 00000A3A 8ED8                    	mov	ds,ax
 19361                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 19362 00000A3C 88160000                	mov	[0],dl
 19363                                  	;mov	word [ARENA.OWNER],0		; free
 19364 00000A40 C70601000000            	mov	word [1],0
 19365 00000A46 29D9                    	sub	cx,bx				; size of the new block
 19366                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 19367 00000A48 890E0300                	mov	[3],cx
 19368 00000A4C 8CC0                    	mov	ax,es				; return seg to the caller
 19369                                  	; 23/10/2022
 19370                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 19371 00000A4E 83E803                  	sub	ax,3				;  BIOS code
 19372 00000A51 5A                      	pop	dx
 19373 00000A52 59                      	pop	cx
 19374 00000A53 5F                      	pop	di
 19375 00000A54 1F                      	pop	ds ; ds = cs
 19376 00000A55 C3                      	retn
 19377                                  ;
 19378                                  ; M012 : END
 19379                                  ;
 19380                                  FatalErr:
 19381 00000A56 0E                      	push	cs
 19382 00000A57 1F                      	pop	ds
 19383 00000A58 BA[2009]                	mov	dx,FEmsg
 19384 00000A5B B409                    	mov	ah,9
 19385 00000A5D CD21                    	int	21h 		; DOS - PRINT STRING
 19386                                  				; DS:DX -> string terminated by "$"
 19387                                  	; 30/12/2022 (MSDOS 6.21 SYSINIT)
 19388 00000A5F E93F07                  	jmp	stall
 19389                                  	; 23/10/2022 (MSDOS 5.0 SYSINIT)
 19390                                  	;cli
 19391                                  	;hlt
 19392                                  
 19393                                  ;endif ;ROMDOS
 19394                                  
 19395                                  ; 25/03/2019 - Retro DOS v4.0
 19396                                  
 19397                                  ; ----------------------------------------------------------------------
 19398                                  ;
 19399                                  ; procedure : AllocHMA
 19400                                  ;
 19401                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 19402                                  ;	  up there. If it gets any sort of error, it will return with
 19403                                  ;	  carry set so that we can resort to running low.
 19404                                  ;
 19405                                  ;	It also returns ES: -> 0ffffh if it returns success
 19406                                  ;
 19407                                  ; ----------------------------------------------------------------------
 19408                                  
 19409                                  AllocHMA:
 19410                                  ;	cas note:  The pre-286 check is no longer needed here since the
 19411                                  ;		   presence of XMS is sufficient. However, this code hasn't
 19412                                  ;		   been deleted because it can be recycled for skipping the
 19413                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 19414                                  ;		   in the case of a pre-286.
 19415                                  
 19416                                  ;;	see if we're running on a pre-286. If not, force low.
 19417                                  ;
 19418                                  ;	xor	ax,ax
 19419                                  ;	pushf			; save flags (like int)
 19420                                  ;	push	ax
 19421                                  ;	popf
 19422                                  ;	pushf
 19423                                  ;	pop	ax
 19424                                  ;	popf			; restore original flags (like int)
 19425                                  ;	and	ax,0F000h
 19426                                  ;	cmp	ax,0F000h	; 8088/8086?
 19427                                  ;	jz	short grab_hma_error
 19428                                  
 19429                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19430                                  	; (SYSINIT:0A26h)
 19431                                  
 19432 00000A62 1E                      	push	ds
 19433                                  	;;mov	ax,Bios_Data
 19434                                  	;mov	ax,KERNEL_SEGMENT
 19435                                  	; 21/10/2022
 19436 00000A63 B87000                  	mov	ax,DOSBIODATASEG
 19437 00000A66 8ED8                    	mov	ds,ax
 19438                                  
 19439 00000A68 E84A00                  	call	IsXMSLoaded
 19440 00000A6B 7545                    	jnz	short grabhma_error
 19441                                  
 19442 00000A6D B81043                  	mov	ax,4310h
 19443 00000A70 CD2F                    	int	2Fh		; get the vector into es:bx
 19444                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 19445                                  		; Return: ES:BX -> driver entry point
 19446                                  
 19447 00000A72 891E[0E00]              	mov	[xms],bx
 19448                                  	;mov	[0Eh], bx
 19449 00000A76 8C06[1000]              	mov	[xms+2],es
 19450                                  	;mov	[10h],es
 19451                                  
 19452 00000A7A B401                    	mov	ah,1		; request HMA
 19453 00000A7C BAFFFF                  	mov	dx,0FFFFh
 19454                                  	;call	dword ptr ds:0Eh
 19455 00000A7F FF1E[0E00]              	call	far [xms]
 19456 00000A83 48                      	dec	ax
 19457 00000A84 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 19458                                  
 19459                                  ;------ Himem may be lying because it has allocated mem for int 15
 19460                                  
 19461 00000A86 B488                    	mov	ah,88h
 19462 00000A88 CD15                    	int	15h
 19463                                  		; Get Extended Memory Size
 19464                                  		; Return: CF clear on success
 19465                                  		; AX = size of memory above 1M in K
 19466 00000A8A 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 19467                                  	;jb	short grabhma_error
 19468                                  	; 11/12/2022
 19469 00000A8D 7224                    	jb	short grabhma_err ; cf=1
 19470                                  allocHMA_1:
 19471 00000A8F B405                    	mov	ah,5		; localenableA20
 19472                                  	;call	dword ptr ds:0Eh
 19473 00000A91 FF1E[0E00]              	call	far [xms]
 19474 00000A95 48                      	dec	ax
 19475 00000A96 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 19476                                  
 19477 00000A98 E88901                  	call	IsVDiskInstalled
 19478 00000A9B 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 19479                                  
 19480 00000A9D B8FFFF                  	mov	ax,0FFFFh
 19481 00000AA0 8EC0                    	mov	es,ax
 19482 00000AA2 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 19483 00000AA9 26813E10003412          	cmp	word [es:10h],1234h
 19484                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 19485                                  	; 11/12/2022
 19486 00000AB0 7401                    	je	short allocHMA_ok	
 19487                                  
 19488                                  ; 11/12/2022
 19489                                  ;	; 11/12/2022
 19490                                  ;	; cf=0
 19491                                  ;	;clc
 19492                                  ;	pop	ds
 19493                                  ;	retn
 19494                                  
 19495                                  grabhma_error:
 19496 00000AB2 F9                      	stc
 19497                                  	; 11/12/022
 19498                                  grabhma_err:	; cf=1
 19499                                  allocHMA_ok:	; cf=0
 19500 00000AB3 1F                      	pop	ds
 19501 00000AB4 C3                      	retn
 19502                                  
 19503                                  ; ----------------------------------------------------------------------
 19504                                  ;
 19505                                  ; procedure : IsXMSLoaded
 19506                                  ;
 19507                                  ;             Checks whether a XMS driver is loaded
 19508                                  ;
 19509                                  ; Returns : Z flag set if XMS driver loaded
 19510                                  ;           Z flag reset if no XMS drivers are present
 19511                                  ;
 19512                                  ; ----------------------------------------------------------------------
 19513                                  
 19514                                  IsXMSLoaded:
 19515 00000AB5 B80043                  	mov	ax,4300h
 19516 00000AB8 CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 19517                                  				; Return: AL = 80h XMS driver installed
 19518                                  				; AL <> 80h no driver
 19519 00000ABA 3C80                    	cmp	al,80h		; XMS installed?
 19520 00000ABC C3                      	retn
 19521                                  
 19522                                  ; ----------------------------------------------------------------------
 19523                                  ; procedure : FTryToMovDOSHi
 19524                                  ;
 19525                                  ;		Called from HMA suballoc calls
 19526                                  ;	
 19527                                  ; ----------------------------------------------------------------------
 19528                                  
 19529                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19530                                  	; (SYSINIT:0A84h)
 19531                                  
 19532                                  FTryToMovDOSHi:	; proc	far
 19533                                  
 19534 00000ABD 50                      	push	ax
 19535 00000ABE 53                      	push	bx
 19536 00000ABF 51                      	push	cx
 19537 00000AC0 52                      	push	dx
 19538 00000AC1 56                      	push	si
 19539 00000AC2 57                      	push	di
 19540 00000AC3 1E                      	push	ds
 19541 00000AC4 06                      	push	es
 19542                                  
 19543                                  	; 23/10/2022
 19544                                  	; 27/03/2019 - Retro DOS v4.0
 19545                                  	; 11/12/2022
 19546 00000AC5 0E                      	push	cs
 19547 00000AC6 1F                      	pop	ds
 19548                                  
 19549                                  	;cmp	byte [cs:runhigh],0FFh
 19550                                  	; 11/12/2022
 19551 00000AC7 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 19552 00000ACC 7503                    	jne	short _ftymdh_1
 19553                                  
 19554                                  	; ds = cs
 19555 00000ACE E89FFE                  	call	TryToMovDOSHi
 19556                                  _ftymdh_1:
 19557 00000AD1 07                      	pop	es
 19558 00000AD2 1F                      	pop	ds
 19559 00000AD3 5F                      	pop	di
 19560 00000AD4 5E                      	pop	si
 19561 00000AD5 5A                      	pop	dx
 19562 00000AD6 59                      	pop	cx
 19563 00000AD7 5B                      	pop	bx
 19564 00000AD8 58                      	pop	ax
 19565                                  
 19566 00000AD9 CB                      	retf
 19567                                  
 19568                                  ; ----------------------------------------------------------------------
 19569                                  ;
 19570                                  ; following piece of code will be moved into a para boundary. And the para
 19571                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 19572                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 19573                                  ; to determine free extended memory.
 19574                                  ;
 19575                                  ; For more details read "power programming" column by Ray Duncan in the
 19576                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 19577                                  ;
 19578                                  ; ----------------------------------------------------------------------
 19579                                  
 19580                                  StartVDHead:
 19581                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 19582                                  
 19583 00000ADA 00000000                	dd	0		; link to next device driver
 19584 00000ADE 0080                    	dw	8000h		; device attribute
 19585 00000AE0 0000                    	dw	0		; strategy routine offset
 19586 00000AE2 0000                    	dw	0		; interrupt routine offset
 19587 00000AE4 01                      	db	1		; number of units
 19588                                  	;db	7 dup(0) 
 19589 00000AE5 00<rep 7h>              	times	7 db 0 		; reserved area
 19590                                  VDiskSig1:
 19591 00000AEC 564449534B              	db	'VDISK'
 19592                                  
 19593                                  VLEN1	equ	($-VDiskSig1)
 19594                                  
 19595 00000AF1 202056332E33            	db	'  V3.3'	; vdisk label
 19596                                  	;db	15 dup (0)	; pad
 19597 00000AF7 00<rep Fh>              	times	15 db 0
 19598 00000B06 0000                    	dw	0		; bits 0-15 of free HMA
 19599 00000B08 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 19600                                  VDInt19:
 19601 00000B09 EA                      	db	0EAh		; jmp to old vector
 19602                                  OldVDInt19:
 19603 00000B0A 00000000                	dd	0		; Saved int 19 vector
 19604                                  
 19605                                  EndVDHead: ; label byte
 19606                                  
 19607                                  VDiskHMAHead:	
 19608 00000B0E 000000                  	db	0,0,0		; non-bootable disk
 19609                                  VDiskSig2:
 19610 00000B11 564449534B              	db	'VDISK'
 19611                                  
 19612                                  VLEN2	equ	($-VDiskSig2)
 19613                                  
 19614 00000B16 332E33                  	db	'3.3'		; OEM - signature
 19615 00000B19 8000                    	dw	128		; number of bytes/sector
 19616 00000B1B 01                      	db	1		; sectors/cluster
 19617 00000B1C 0100                    	dw	1		; reserved sectors
 19618 00000B1E 01                      	db	1		; number of FAT copies
 19619 00000B1F 4000                    	dw	64		; number of root dir entries
 19620 00000B21 0002                    	dw	512		; number of sectors
 19621 00000B23 FE                      	db	0FEh		; media descriptor
 19622 00000B24 0600                    	dw	6		; number of sectors/FAT
 19623 00000B26 0800                    	dw	8		; sectors per track
 19624 00000B28 0100                    	dw	1		; number of heads
 19625 00000B2A 0000                    	dw	0		; number of hidden sectors
 19626 00000B2C 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 19627                                  
 19628                                  EndVDiskHMAHead: ; label byte
 19629                                  
 19630                                  ; ----------------------------------------------------------------------
 19631                                  ;
 19632                                  ; procedure : InstVDiskHeader
 19633                                  ;
 19634                                  ;             Installs the VDISK header to reserve the 64k of HMA
 19635                                  ;	      It puts a 32 byte header at 10000:0 and
 19636                                  ;	      another header at (seg of int19):0
 19637                                  ;
 19638                                  ; Inputs : None
 19639                                  ;
 19640                                  ; Outputs : None
 19641                                  ;
 19642                                  ; USES : DS,SI,AX,CX,DX
 19643                                  ;
 19644                                  ; ----------------------------------------------------------------------
 19645                                  
 19646                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19647                                  
 19648                                  InstVDiskHeader:
 19649 00000B2E 31C0                    	xor	ax,ax
 19650 00000B30 8ED8                    	mov	ds,ax			; seg of int vect table
 19651                                  
 19652                                  ;-------------- save old int 19 vector
 19653                                  
 19654                                  	; 23/10/2022
 19655 00000B32 A16400                  	mov	ax,[19h*4]
 19656                                  	;mov	[OldVDInt19],ax
 19657 00000B35 2EA3[0A0B]              	mov	[cs:OldVDInt19],ax
 19658 00000B39 A16600                  	mov	ax,[19h*4+2]
 19659                                  	;mov	[OldVDInt19+2],ax
 19660 00000B3C 2EA3[0C0B]              	mov	[cs:OldVDInt19+2],ax
 19661                                  
 19662                                  ;-------------- calculate seg of new int 19 handler
 19663                                  
 19664 00000B40 B448                    	mov	ah,48h			; allocate memory
 19665                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 19666                                  	; 23/10/2022
 19667 00000B42 BB0400                  	mov	bx,4
 19668 00000B45 CD21                    	int	21h
 19669                                  
 19670                                  ;	if carry, fatal hanging error!!!!!
 19671                                  
 19672 00000B47 48                      	dec	ax			; point to arena
 19673 00000B48 8EC0                    	mov	es,ax
 19674                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 19675 00000B4A 26C70601000800          	mov	word [es:1],8
 19676                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 19677 00000B51 26C70608005343          	mov	word [es:8],'SC'
 19678 00000B58 40                      	inc	ax
 19679 00000B59 8EC0                    	mov	es,ax			; get back to allocated memory
 19680                                  
 19681                                  ;-------------- install new int 19 vector
 19682                                  
 19683 00000B5B FA                      	cli				; no reboots at this time
 19684                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 19685 00000B5C C70664002F00            	mov	word [19h*4],47
 19686 00000B62 A36600                  	mov	[19h*4+2],ax
 19687                                  
 19688                                  ;-------------- move the code into proper place
 19689                                  
 19690                                  	;mov	cx,(EndVDHead-StartVDHead)
 19691 00000B65 B93400                  	mov	cx,52
 19692 00000B68 BE[DA0A]                	mov	si,StartVDHead
 19693 00000B6B 31FF                    	xor	di,di
 19694 00000B6D 0E                      	push	cs
 19695 00000B6E 1F                      	pop	ds
 19696 00000B6F FC                      	cld
 19697 00000B70 F3A4                    	rep	movsb
 19698 00000B72 FB                      	sti				; BUGBUG is sti OK now?
 19699                                  
 19700                                  ;-------------- mov the HMA VDisk head into HMA
 19701                                  
 19702                                  	; 23/10/2022
 19703 00000B73 57                      	push	di
 19704 00000B74 06                      	push	es
 19705                                  
 19706 00000B75 B8FFFF                  	mov	ax,0FFFFh
 19707 00000B78 8EC0                    	mov	es,ax
 19708 00000B7A BF1000                  	mov	di,10h
 19709                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 19710 00000B7D B92000                  	mov	cx,32
 19711 00000B80 BE[0E0B]                	mov	si,VDiskHMAHead
 19712 00000B83 F3A4                    	rep	movsb			; ds already set to cs
 19713                                  
 19714 00000B85 5F                      	pop	di
 19715 00000B86 07                      	pop	es
 19716                                  
 19717 00000B87 C3                      	retn
 19718                                  
 19719                                  ; ----------------------------------------------------------------------
 19720                                  ; procedure : ClrVDISKHeader
 19721                                  ;
 19722                                  ;		Clears the first 32 bytes at 1MB boundary
 19723                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 19724                                  ;		left by previous DOS=HIGH session
 19725                                  ;
 19726                                  ; ----------------------------------------------------------------------
 19727                                  
 19728                                  struc desc
 19729 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 19730 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 19731 00000004 ??                       .hi_byte:	resb 	1		; address
 19732 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 19733 00000006 ????                     .reserved:	resw	1		;
 19734                                   .size:
 19735                                  endstruc
 19736                                  
 19737                                  		; 23/10/2022
 19738                                  bmove:		;label byte
 19739                                  
 19740                                  dummy:		;times desc.size db 0	; desc	<>
 19741 00000B88 00<rep 8h>              		times 8 db 0		 
 19742                                  gdt:		;times desc.size db 0	; desc	<>
 19743 00000B90 00<rep 8h>              		times 8 db 0
 19744 00000B98 FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 19745 00000B9A 0000                    		dw	0
 19746 00000B9C 00                      		db	0
 19747 00000B9D 93                      		db	93h
 19748 00000B9E 0000                    		dw	0
 19749 00000BA0 FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 19750 00000BA2 0000                    		dw	0
 19751 00000BA4 10                      		db	10h
 19752 00000BA5 93                      		db	93h
 19753 00000BA6 0000                    		dw	0
 19754                                  
 19755                                  rombios_code:	;times desc.size db 0	; desc	<>
 19756 00000BA8 00<rep 8h>              		times 8 db 0
 19757                                  temp_stack:	;times desc.size db 0	; desc	<>
 19758 00000BB0 00<rep 8h>              		times 8 db 0
 19759                                  
 19760 00000BB8 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 19761                                  
 19762                                  
 19763                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIT1.ASM)
 19764                                  
 19765                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 19766                                  ; (SYSINIT:0CA6h)
 19767                                  
 19768                                  ClrVDISKHeader:	; proc	near
 19769                                  
 19770                                  ;; 04/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 19771                                  ;;-----------------------------------------------------------	     ;I070
 19772                                  ;; The following workaround get around a problem with the	     ;I070
 19773                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	     ;I070
 19774                                  ;; is set. On those machines the INT 15h block move code	     ;I070
 19775                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	     ;I070
 19776                                  ;; In password server mode the 8042 is disabled so the block	     ;I070
 19777                                  ;; move crashes the system. We can do this because these	     ;I070
 19778                                  ;; systems clear all of memory on a cold boot.			     ;I070
 19779                                  ;								     ;I070
 19780                                  ;	in      al,64h         		; Test for passwd servr mode ;I070
 19781                                  ;	test    al,10h			; Is keyboard inhibited?     ;I070
 19782                                  ;	jnz     short ClrVDISKok	; No, go do block move.      ;I070
 19783                                  ;					; Check for Tortugas...	     ;I070
 19784                                  ;	;;cmp	word [cs:sys_model_byte],19F8h                	     ;I070
 19785                                  ;	;cmp	word [sys_model_byte],19F8h  ; ds = cs       
 19786                                  ;	mov	ax,[sys_model_byte]
 19787                                  ;	cmp	ax,19F8h
 19788                                  ;	je      short ClrVDISKno                            	     ;I070
 19789                                  ;					; Check for mod 30-286	     ;I070
 19790                                  ;	;;cmp	word [cs:sys_model_byte],09FCh			     ;I070
 19791                                  ;	;cmp	word [sys_model_byte],09FCh	
 19792                                  ;	cmp	ax,09FCh
 19793                                  ;	jne     short ClrVDISKok			      	     ;I070
 19794                                  ;ClrVDISKno:							     ;I070	
 19795                                  ;	retn	               		; Return w/o block move.     ;I070
 19796                                  ;ClrVDISKok:							     ;I070
 19797                                  ;-----------------------------------------------------------	     ;I070
 19798                                  
 19799                                  	; 12/12/2022
 19800                                  	; ds = cs
 19801                                  
 19802                                  	; 30/12/2022 - Retro DOS v4.2
 19803                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0CBFh)
 19804                                  
 19805 00000BD8 06                      	push	es
 19806 00000BD9 8CC8                    	mov	ax,cs
 19807 00000BDB 89C2                    	mov	dx,ax
 19808 00000BDD B10C                    	mov	cl,12
 19809 00000BDF D3EA                    	shr	dx,cl
 19810 00000BE1 B104                    	mov	cl,4
 19811 00000BE3 D3E0                    	shl	ax,cl
 19812 00000BE5 05[B80B]                	add	ax,ClrdVDISKHead
 19813 00000BE8 80D200                  	adc	dl,0
 19814                                  
 19815                                  	;; 23/10/2022
 19816                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 19817                                  	;mov	[cs:src_desc+2],ax
 19818                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 19819                                  	;mov	[cs:src_desc+4],dl
 19820                                  	; 12/12/2022
 19821                                  	;mov	[src_desc+desc.lo_word],ax
 19822 00000BEB A3[9A0B]                	mov	[src_desc+2],ax
 19823                                  	;mov	[src_desc+desc.hi_byte],dl
 19824 00000BEE 8816[9C0B]              	mov	[src_desc+4],dl
 19825                                  
 19826 00000BF2 B91000                  	mov	cx,16	; 16 words
 19827 00000BF5 0E                      	push	cs
 19828 00000BF6 07                      	pop	es
 19829 00000BF7 BE[880B]                	mov	si,bmove
 19830 00000BFA B487                    	mov	ah,87h
 19831 00000BFC CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 19832                                  			; CX = number of words to move 
 19833                                  			; ES:SI -> global descriptor table
 19834                                  			; Return: CF set on error, AH = status
 19835 00000BFE 07                      	pop	es
 19836 00000BFF C3                      	retn
 19837                                  
 19838                                  ; ----------------------------------------------------------------------
 19839                                  ;
 19840                                  ; procedure : SaveFreeHMAPtr
 19841                                  ;
 19842                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 19843                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 19844                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 19845                                  ;		the offset.
 19846                                  ;
 19847                                  ; Inputs : ES:DI - pointer to free HMA
 19848                                  ; Output : FreeHMAPtr in BIOS data segment updated
 19849                                  ;
 19850                                  ; ----------------------------------------------------------------------
 19851                                  
 19852                                  SaveFreeHMAPtr:
 19853 00000C00 8CC3                    	mov	bx,es
 19854 00000C02 B8FFFF                  	mov	ax,0FFFFh		; HMA segment
 19855 00000C05 29D8                    	sub	ax,bx
 19856 00000C07 83C70F                  	add	di,15			; para round
 19857 00000C0A 83E7F0                  	and	di,0FFF0h
 19858 00000C0D B104                    	mov	cl,4
 19859 00000C0F D3E0                    	shl	ax,cl
 19860 00000C11 29C7                    	sub	di,ax
 19861 00000C13 1E                      	push	ds
 19862                                  	;;mov	ax,Bios_Data ; 0070h
 19863                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19864                                  	; 21/10/2022
 19865 00000C14 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19866 00000C17 8ED8                    	mov	ds,ax
 19867 00000C19 893E[9608]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 19868 00000C1D C606[0D00]FF            	mov	byte [inHMA],0FFh  ; (ds:0Dh)
 19869 00000C22 1F                      	pop	ds
 19870 00000C23 C3                      	retn
 19871                                  
 19872                                  ; ----------------------------------------------------------------------
 19873                                  ;
 19874                                  ; procedure : IsVDiskInstalled
 19875                                  ;
 19876                                  ;		Checks for the presence of VDISK header at 1MB boundary
 19877                                  ;		& INT 19 vector
 19878                                  ;
 19879                                  ; Inputs  : A20 flag should be ON
 19880                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 19881                                  ;
 19882                                  ; ----------------------------------------------------------------------
 19883                                  
 19884                                  IsVDiskInstalled:
 19885 00000C24 31C0                    	xor	ax,ax
 19886 00000C26 8ED8                    	mov	ds,ax
 19887 00000C28 8E1E4E00                	mov	ds,[19*4+2]
 19888                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 19889                                  	; 23/10/2022
 19890 00000C2C BE1200                  	mov	si,12h ; 18
 19891                                  	;mov	cx,VLEN1 ; 5
 19892 00000C2F B90500                  	mov	cx,5
 19893 00000C32 0E                      	push	cs
 19894 00000C33 07                      	pop	es
 19895 00000C34 BF[EC0A]                	mov	di,VDiskSig1
 19896 00000C37 F3A6                    	rep	cmpsb
 19897 00000C39 7410                    	je	short ivdins_retn
 19898 00000C3B B8FFFF                  	mov	ax,0FFFFh
 19899 00000C3E 8ED8                    	mov	ds,ax
 19900                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 19901 00000C40 BE1300                  	mov	si,13h
 19902 00000C43 BF[110B]                	mov	di,VDiskSig2
 19903                                  	;mov	cx,VLEN2  ; 5
 19904 00000C46 B90500                  	mov	cx,5
 19905 00000C49 F3A6                    	rep	cmpsb
 19906                                  ivdins_retn: 
 19907 00000C4B C3                      	retn			; returns the Zero flag
 19908                                  
 19909                                  ; ----------------------------------------------------------------------
 19910                                  ;
 19911                                  ; procedure : CPMHack
 19912                                  ;
 19913                                  ;		Copies the code from 0:c0 into ffff:0d0h
 19914                                  ;		for CPM compatibility
 19915                                  ;
 19916                                  ; ----------------------------------------------------------------------
 19917                                  
 19918                                  	; 11/12/2022
 19919                                  CPMHack:
 19920 00000C4C 1E                      	push	ds
 19921 00000C4D B9FFFF                  	mov	cx,0FFFFh
 19922 00000C50 8EC1                    	mov	es,cx		; ES = 0FFFFh
 19923                                  	;xor	cx,cx
 19924                                  	; 11/12/2022
 19925 00000C52 41                      	inc	cx  ; cx = 0
 19926 00000C53 8ED9                    	mov	ds,cx		; DS = 0
 19927 00000C55 BEC000                  	mov	si,0C0h
 19928 00000C58 BFD000                  	mov	di,0D0h
 19929                                  	;mov	cx,5
 19930 00000C5B B105                    	mov	cl,5
 19931 00000C5D FC                      	cld
 19932 00000C5E F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 19933 00000C60 1F                      	pop	ds
 19934 00000C61 C3                      	retn
 19935                                  
 19936                                  ; ----------------------------------------------------------------------
 19937                                  ;
 19938                                  ; procedure : off_to_para
 19939                                  ;
 19940                                  ; ----------------------------------------------------------------------
 19941                                  off_to_para:
 19942 00000C62 D1E8                    	shr	ax,1
 19943 00000C64 D1E8                    	shr	ax,1
 19944 00000C66 D1E8                    	shr	ax,1
 19945 00000C68 D1E8                    	shr	ax,1
 19946 00000C6A C3                      	retn
 19947                                  
 19948                                  ; ----------------------------------------------------------------------
 19949                                  ;**	TempCDS - Create (Temporary?) CDS
 19950                                  ;
 19951                                  ;	ENTRY	?? BUGBUG
 19952                                  ;		(DS) = SysInitSeg
 19953                                  ;	EXIT	?? BUGBUG
 19954                                  ;	USES	?? BUGBUG
 19955                                  ; ----------------------------------------------------------------------
 19956                                  
 19957                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19958                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 19959                                  TempCDS:
 19960 00000C6B C43E[6B02]              	les	di,[DOSINFO]
 19961 00000C6F 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 19962                                  	;mov	cl,[es:di+20h]
 19963 00000C73 30ED                    	xor	ch,ch			; (cx) = # of block devices
 19964                                  
 19965 00000C75 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 19966                                  	;mov	[es:di+21h],cl	
 19967                                  
 19968 00000C79 88C8                    	mov	al,cl
 19969 00000C7B B458                    	mov	ah,curdirlen ; curdir_list.size ; 88
 19970                                  	;mov	ah,88
 19971 00000C7D F6E4                    	mul	ah			; (ax) = byte size for those CDSs
 19972 00000C7F E8E604                  	call	ParaRound		; (ax) = paragraph size for CDSs
 19973 00000C82 8B36[A502]              	mov	si,[top_of_cdss] ; 31/12/2022
 19974                                  
 19975                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 19976                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 19977                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 19978                                  ;		   variable which has the top of free memory for
 19979                                  ;		   device driver loads, etc.
 19980                                  
 19981 00000C86 29C6                    	sub	si,ax
 19982                                  
 19983                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 19984                                  ;		that automatically updates alloclim every time we
 19985                                  ;		set up some new CDSs. Instead, I've added code
 19986                                  ;		which pre-allocates space for 26 CDSs. This
 19987                                  ;	        way we've got room for worst case CDSs before
 19988                                  ;		we place MagicDrv.sys
 19989                                  ;
 19990                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 19991                                  
 19992                                  	; 30/12/2022
 19993                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19994                                  	; (SYSINIT:0C52h)
 19995                                  	;mov	[ALLOCLIM],si ; (MSDOS 5.0 SYSINIT)
 19996                                  
 19997 00000C88 26897518                	mov	[es:di+SYSI_CDS+2],si
 19998                                  	;mov	[es:di+18h],si
 19999 00000C8C 89F0                    	mov	ax,si
 20000 00000C8E 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 20001                                  	;mov	[word es:di+16h],0
 20002                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 20003 00000C94 26C535                  	lds	si,[es:di]
 20004 00000C97 8EC0                    	mov	es,ax
 20005 00000C99 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 20006                                  
 20007                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 20008                                  ;	info from the corresponding DPB.
 20009                                  ;
 20010                                  ;	(cx) = count of CDSs left to process
 20011                                  ;	(es:di) = address of next CDS
 20012                                  
 20013                                  fooset:
 20014                                  	; 23/10/2022
 20015 00000C9B 2EA1[A702]              	mov	ax,[cs:DirStrng] ; "A:"
 20016 00000C9F AB                      	stosw				; setup the root as the curdir
 20017                                  	
 20018                                  	; 23/10/2022 (MSDOS 5.0 SYSINIT)
 20019                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 20020                                  
 20021                                  	; 30/12/2022
 20022                                  	; (MSDOS 6.21 SYSINIT:0D8Bh)
 20023 00000CA0 E85C00                  	call	get_dpb_for_drive_al	; get dpb for drive in dpb
 20024                                  
 20025                                  ;	(ds:si) = address of DPB
 20026                                  ;		 (si) = -1 if no drive
 20027                                  
 20028 00000CA3 2EA1[A902]              	mov	ax,[cs:DirStrng+2] ; "\",0
 20029 00000CA7 AB                      	stosw
 20030 00000CA8 2EFE06[A702]            	inc	byte [cs:DirStrng]
 20031 00000CAD 31C0                    	xor	ax,ax
 20032 00000CAF 51                      	push	cx
 20033                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 20034 00000CB0 B93F00                  	mov	cx,63	; 23/10/2022
 20035 00000CB3 F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 20036                                  
 20037                                  ;	should handle the system that does not have any floppies.
 20038                                  ;	in this case,we are going to pretended there are two dummy floppies
 20039                                  ;	in the system. still they have dpb and cds,but we are going to
 20040                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 20041                                  ;	"invalid drive specification" message when the user try to
 20042                                  ;	access them.
 20043                                  ;
 20044                                  ;	(ax) = 0
 20045                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 20046                                  ;	(ds:si) = Next DPB (-1 if none)
 20047                                  
 20048 00000CB5 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 20049 00000CB8 7414                    	je	short fooset_zero	; don't have any physical drive.
 20050                                  
 20051                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 20052                                  ;	if we are faking floppy drives then see if this cds being initialised
 20053                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 20054                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 20055                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 20056                                  ;	for dpb offsets look at inc\dpb.inc.
 20057                                  
 20058 00000CBA 2E803E[8902]01          	cmp	byte [cs:fake_floppy_drv],1
 20059 00000CC0 7513                    	jne	short normcds 		; machine has floppy drives
 20060                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 20061 00000CC2 803C01                  	cmp	byte [si],1
 20062 00000CC5 770E                    	ja	short normcds
 20063 00000CC7 B103                    	mov	cl,3			; the next dbp pointer
 20064                                  					; AX should be zero here
 20065 00000CC9 F3AB                    	rep	stosw
 20066 00000CCB 59                      	pop	cx
 20067 00000CCC EB18                    	jmp	short get_next_dpb
 20068                                  
 20069                                  ;	(ax) = 0
 20070                                  
 20071                                  fooset_zero:
 20072 00000CCE B103                    	mov	cl,3
 20073 00000CD0 F3AB                    	rep	stosw
 20074 00000CD2 59                      	pop	cx
 20075 00000CD3 EB11                    	jmp	short fincds
 20076                                  
 20077                                  ;*	We have a "normal" DPB and thus a normal CDS.
 20078                                  ;
 20079                                  ;	(ax) = 0
 20080                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 20081                                  ;	(ds:si) = Next DPB (-1 if none)
 20082                                  
 20083                                  normcds:
 20084 00000CD5 59                      	pop	cx
 20085                                  
 20086                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 20087                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 20088                                  ;	this media is a non-fat based one.
 20089                                  
 20090                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 20091                                  	; 23/10/2022
 20092 00000CD6 807C0800                	cmp	byte [si+8],0
 20093 00000CDA 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 20094 00000CDC B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 20095                                  	;mov	ax,4000h
 20096                                  setnormcds:
 20097 00000CDF AB                      	stosw				; curdir_flags
 20098 00000CE0 89F0                    	mov	ax,si
 20099 00000CE2 AB                      	stosw				; curdir_devptr
 20100 00000CE3 8CD8                    	mov	ax,ds
 20101 00000CE5 AB                      	stosw
 20102                                  
 20103                                  get_next_dpb:				; entry point for fake_fooset_zero
 20104                                  	; 30/12/2022
 20105                                  	; (MSDOS 6.21 SYSINIT:0DD1h)
 20106                                  	; 23/10/2022
 20107                                  	;lds	si,[si+19h] ; (MSDOS 5.0 SYSINIT)
 20108                                  	;;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 20109                                  fincds:	; get_next_dpb
 20110                                  	; 30/12/2022
 20111                                  	; (MSDOS 6.21 SYSINIT:0DD1h)
 20112 00000CE6 B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 20113 00000CE9 AB                      	stosw				; curdir_id
 20114 00000CEA AB                      	stosw				; curdir_id
 20115 00000CEB AB                      	stosw				; curdir_user_word
 20116 00000CEC B80200                  	mov	ax,2
 20117 00000CEF AB                      	stosw				; curdir_end
 20118 00000CF0 B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 20119 00000CF2 AA                      	stosb
 20120 00000CF3 AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 20121 00000CF4 AB                      	stosw
 20122 00000CF5 AB                      	stosw
 20123                                  
 20124 00000CF6 E2A3                    	loop	fooset
 20125                                  	
 20126 00000CF8 2EC606[A702]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 20127                                  	
 20128 00000CFE C3                      	retn
 20129                                  
 20130                                  ; ----------------------------------------------------------------------
 20131                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 20132                                  ;
 20133                                  ;	entry:
 20134                                  ;	   al == ASCII CAPS drive letter
 20135                                  ;
 20136                                  ;	exit:
 20137                                  ;	   ds:si -> DPB, or si = -1 if not found
 20138                                  ; ----------------------------------------------------------------------
 20139                                  
 20140                                  ; 30/12/2022
 20141                                  ; (MSDOS 6.21 SYSINIT:0DEAh)
 20142                                  ; 23/10/2022
 20143                                  ;%if 0
 20144                                  get_dpb_for_drive_al:
 20145 00000CFF 2EC536[6B02]            	lds	si,[cs:DOSINFO]		; point to first DPB
 20146                                  	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 20147 00000D04 C534                    	lds	si,[si]
 20148 00000D06 2C41                    	sub	al,'A'
 20149                                  
 20150                                  get_dpb_for_drive_1:
 20151                                  	;cmp	al,[si+DPB.DRIVE]	; match?
 20152 00000D08 3A04                    	cmp	al,[si]
 20153 00000D0A 7408                    	je	short got_dpb_for_drive	;  done if so
 20154                                  
 20155 00000D0C C57419                  	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 20156 00000D0F 83FEFF                  	cmp	si,-1
 20157 00000D12 75F4                    	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 20158                                  
 20159                                  got_dpb_for_drive:
 20160 00000D14 C3                      	retn
 20161                                  ;%endif  ; 23/10/2022
 20162                                  
 20163                                  ;=======================================================================
 20164                                  
 20165                                  ;**	EndFile - Build DOS structures
 20166                                  ;
 20167                                  ; This procedure is called after the config.sys has been processed and
 20168                                  ; installable device drivers have been loaded (but before "install="
 20169                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 20170                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 20171                                  ; to allow for the safe EXECing of "install=" programs. All memory
 20172                                  ; above these structures is deallocated back to DOS.
 20173                                  ;
 20174                                  ;	ENTRY	?? BUGBUG
 20175                                  ;	EXIT	?? BUGBUG
 20176                                  ;	USES	?? BUGBUG
 20177                                  
 20178                                  ;=======================================================================
 20179                                  ; allocate files
 20180                                  ; ----------------------------------------------------------------------
 20181                                  
 20182                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20183                                  	; (SYSINIT:0CCDh)
 20184                                  
 20185                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 20186                                  	; (SYSINIT:0E00h)
 20187                                  endfile:
 20188                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 20189                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 20190                                  ; to confbot.
 20191                                  
 20192                                  ;	if this procedure has been called to take care of install= command,
 20193                                  ;	   then we have to save es,si registers.
 20194                                  
 20195                                  	; 11/12/2022
 20196                                  	; ds = cs
 20197                                  
 20198                                  	; 23/10/2022
 20199                                  	; 31/03/2019
 20200 00000D15 1E                      	push	ds
 20201                                  
 20202                                  	;;mov	ax,Bios_Data ; 0070h
 20203                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 20204                                  	; 21/10/2022
 20205 00000D16 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 20206 00000D19 8ED8                    	mov	ds,ax
 20207                                  
 20208                                  	;cmp	word [052Fh],0
 20209 00000D1B 833E[2705]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 20210 00000D20 7505                    	jne	short multrk_flag_done
 20211                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20212                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 20213                                  	; 12/12/2022
 20214 00000D22 800E[2705]80            	or	byte [multrk_flag],multrk_on ; 80h
 20215                                  multrk_flag_done:
 20216                                  	; 23/10/2022
 20217                                  	; 31/03/2019
 20218 00000D27 1F                      	pop	ds
 20219                                  
 20220                                  	; 11/12/2022
 20221                                  	; ds = cs
 20222                                  	;mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 20223                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 20224                                  	; (SYSINIT:0E14h)
 20225 00000D28 A1[A102]                	mov	ax,[CONFBOT]
 20226 00000D2B A3[A302]                	mov	[ALLOCLIM],ax
 20227                                  	; 23/10/2022
 20228                                  	;mov	ax, [cs:top_of_cdss]
 20229                                  	;mov	[cs:ALLOCLIM], ax 
 20230                                  
 20231                                  	; 11/12/2022
 20232                                  	; ds = cs
 20233                                  	;push	cs
 20234                                  	;pop	ds
 20235                                  	
 20236                                  	;mov	ax,[CONFBOT]
 20237                                  	;mov	[ALLOCLIM],ax
 20238                                  
 20239 00000D2E E8D435                  	call	round
 20240                                  	; 11/12/2022
 20241                                  	; ds = cs
 20242 00000D31 A0[9D02]                	mov	al,[FILES]
 20243                                  	; 23/10/2022
 20244                                  	;mov	al,[cs:FILES]
 20245 00000D34 2C05                    	sub	al,5
 20246 00000D36 764B                    	jbe	short dofcbs
 20247                                  
 20248 00000D38 50                      	push	ax
 20249                                  	;mov	al,devmark_files ; 'F'
 20250 00000D39 B046                    	mov	al,'F'
 20251 00000D3B E87B07                  	call	setdevmark		; set devmark for sfts (files)
 20252 00000D3E 58                      	pop	ax
 20253 00000D3F 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 20254                                  					;  it does sign extend.
 20255                                  	; 11/12/2022
 20256                                  	; ds = cs
 20257 00000D41 8B1E[6003]              	mov	bx,[memlo]
 20258 00000D45 8B16[6203]              	mov	dx,[memhi]
 20259 00000D49 C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 20260                                  	; 23/10/2022
 20261                                  	;mov	bx,[cs:memlo]
 20262                                  	;mov	dx,[cs:memhi]
 20263                                  	;lds	di,[cs:DOSINFO]		
 20264                                  
 20265                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 20266 00000D4D C57D04                  	lds	di,[di+4]
 20267                                  
 20268                                  	;mov	[di+SF.SFLink],bx
 20269 00000D50 891D                    	mov	[di],bx
 20270 00000D52 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 20271                                  
 20272 00000D55 0E                      	push	cs
 20273 00000D56 1F                      	pop	ds
 20274                                  
 20275                                  	; 11/12/2022
 20276                                  	; ds = cs
 20277 00000D57 C43E[6003]              	les	di,[memlo]		;point to new sft
 20278                                  	; 23/10/2022
 20279                                  	;les	di,[cs:memlo]
 20280                                  
 20281                                  	;mov	word [es:di+SF.SFLink],-1
 20282 00000D5B 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 20283                                  	;mov	[es:di+SF.SFCount],ax
 20284 00000D60 26894504                	mov	[es:di+4],ax
 20285                                  	;mov	bl,SF_ENTRY.size ; 59
 20286 00000D64 B33B                    	mov	bl,59
 20287 00000D66 F6E3                    	mul	bl			;ax = number of bytes to clear
 20288 00000D68 89C1                    	mov	cx,ax
 20289                                  	; 11/12/2022
 20290                                  	; ds = cs
 20291 00000D6A 0106[6003]              	add	[memlo],ax		;allocate memory
 20292                                  	; 23/10/2022
 20293                                  	;add	[cs:memlo],ax
 20294 00000D6E B80600                  	mov	ax,6
 20295                                  	; 11/12/2022
 20296 00000D71 0106[6003]              	add	[memlo],ax		;remember the header too
 20297                                  	;add	[cs:memlo],ax
 20298                                  	; 11/12/2022
 20299 00000D75 800E[E214]02            	or	byte [setdevmarkflag],for_devmark ; 2
 20300                                  	; 23/10/2022
 20301                                  	;or	byte [cs:setdevmarkflag],2
 20302 00000D7A E88835                  	call	round			; check for mem error before the stosb
 20303 00000D7D 01C7                    	add	di,ax
 20304 00000D7F 31C0                    	xor	ax,ax
 20305 00000D81 F3AA                    	rep	stosb			;clean out the stuff
 20306                                  
 20307                                  ; allocate fcbs
 20308                                  ; ----------------------------------------------------------------------
 20309                                  
 20310                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20311                                  	; (SYSINIT:0D48h)
 20312                                  dofcbs:
 20313                                  	; 11/12/2022
 20314                                  	; ds = cs
 20315                                  	;push	cs
 20316                                  	;pop	ds
 20317 00000D83 E87F35                  	call	round
 20318                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 20319 00000D86 B058                    	mov	al,'X'
 20320 00000D88 E82E07                  	call	setdevmark
 20321                                  	; 11/12/2022
 20322                                  	; ds = cs
 20323 00000D8B A0[9E02]                	mov	al,[FCBS]
 20324                                  	;mov	al,[cs:FCBS]
 20325 00000D8E 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 20326                                  					;  it does sign extend.
 20327                                  	; 11/12/2022
 20328 00000D90 8B1E[6003]              	mov	bx,[memlo]
 20329 00000D94 8B16[6203]              	mov	dx,[memhi]
 20330 00000D98 C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 20331                                  	; 23/10/2022
 20332                                  	;mov	bx,[cs:memlo]
 20333                                  	;mov	dx,[cs:memhi]
 20334                                  	;lds	di,[cs:DOSINFO]
 20335                                  
 20336                                  	;mov	[di+SYSI_FCB],bx
 20337                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 20338                                  	; 23/10/2022
 20339 00000D9C 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 20340 00000D9F 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 20341                                  
 20342 00000DA2 2E8A1E[9F02]            	mov	bl,[cs:KEEP]
 20343 00000DA7 30FF                    	xor	bh,bh
 20344                                  	;mov	[di+SYSI_KEEP],bx
 20345 00000DA9 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 20346                                  
 20347 00000DAC 0E                      	push	cs
 20348 00000DAD 1F                      	pop	ds
 20349                                  	
 20350 00000DAE C43E[6003]              	les	di,[memlo]		; point to new table
 20351                                  	;mov	word [es:di+SF.SFLink],-1
 20352 00000DB2 26C705FFFF              	mov	word [es:di],-1
 20353                                  	;mov	[es:di+SF.SFCount],ax
 20354                                  	; 02/11/2022
 20355 00000DB7 26894504                	mov	[es:di+4],ax
 20356 00000DBB B339                    	mov	bl,SF_ENTRY.size ; 59
 20357 00000DBD 89C1                    	mov	cx,ax
 20358 00000DBF F6E3                    	mul	bl			; ax = number of bytes to clear
 20359 00000DC1 0106[6003]              	add	[memlo],ax		; allocate memory
 20360                                  	;mov	ax,6
 20361 00000DC5 B80600                  	mov	ax,SF.size-2 ; 6
 20362 00000DC8 0106[6003]              	add	[memlo],ax		; remember the header too
 20363                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20364 00000DCC 800E[E214]02            	or	byte [setdevmarkflag],2
 20365 00000DD1 E83135                  	call	round			; check for mem error before the stosb
 20366 00000DD4 01C7                    	add	di,ax			; skip over header
 20367 00000DD6 B041                    	mov	al,'A'
 20368                                  fillloop:
 20369 00000DD8 51                      	push	cx			; save count
 20370 00000DD9 B93900                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 20371 00000DDC FC                      	cld
 20372 00000DDD F3AA                    	rep	stosb			; filled
 20373                                  
 20374                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 20375                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]	
 20376                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 20377                                  
 20378                                  	; 18/12/2022
 20379                                  	;cx = 0
 20380 00000DDF 26894DC7                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 20381 00000DE3 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]	
 20382 00000DE7 26894DDE                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 20383                                  	
 20384                                  	; 23/10/2022	
 20385                                  	;mov     word [es:di-3Bh],0
 20386                                  	;mov     word [es:di-26h],0
 20387                                  	;mov     word [es:di-24h],0
 20388                                  
 20389 00000DEB 59                      	pop	cx
 20390 00000DEC E2EA                    	loop	fillloop
 20391                                  
 20392                                  ; allocate buffers
 20393                                  ; ----------------------------------------------------------------------
 20394                                  
 20395                                  ; search through the list of media supported and allocate 3 buffers if the
 20396                                  ; capacity of the drive is > 360kb
 20397                                  
 20398                                  	; 18/12/2022
 20399                                  	; cx = 0
 20400 00000DEE 833E[9702]FF            	cmp	word [buffers],-1	; has buffers been already set?
 20401 00000DF3 7403                    	je	short dodefaultbuff
 20402 00000DF5 E98700                  	jmp	dobuff			; the user entered the buffers=.
 20403                                  
 20404                                  dodefaultbuff:
 20405                                  	; 18/12/2022
 20406 00000DF8 890E[9902]              	mov	[h_buffers],cx ; 0
 20407 00000DFC 41                      	inc	cx
 20408 00000DFD 41                      	inc	cx
 20409 00000DFE 890E[9702]              	mov	[buffers],cx ; 2	
 20410                                  	
 20411                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 20412                                  	;mov	word [buffers],2	; default to 2 buffers
 20413                                  
 20414                                  	; 23/10/2022	
 20415 00000E02 50                      	push	ax
 20416 00000E03 1E                      	push	ds ; 26/03/2019
 20417                                  	;les	bp,[DOSINFO]		; search through the dpb's
 20418 00000E04 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 20419                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 20420                                  	; 11/12/2022
 20421 00000E09 26C46E00                	les	bp,[es:bp]
 20422                                  	; 23/10/2022
 20423                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 20424                                  
 20425 00000E0D 0E                      	push	cs
 20426 00000E0E 1F                      	pop	ds
 20427                                  ;SYSINIT:0DE2h:
 20428                                  nextdpb:				; test if the drive supports removeable media
 20429                                  	;mov	bl,[es:bp+DPB.drive]
 20430                                  	; 11/12/2022
 20431 00000E0F 268A5E00                	mov	bl,[es:bp]
 20432                                  	; 23/10/2022
 20433                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 20434                                  
 20435                                  	;inc	bl
 20436                                  	; 18/12/2022
 20437 00000E13 43                      	inc	bx
 20438                                  
 20439                                  	;mov	ax,(IOCTL<<8)|8
 20440 00000E14 B80844                  	mov	ax,4408h
 20441 00000E17 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 20442                                  
 20443                                  ; ignore fixed disks
 20444                                  
 20445 00000E19 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 20446 00000E1B 7534                    	jnz	short nosetbuf
 20447                                  
 20448                                  ; get parameters of drive
 20449                                  
 20450 00000E1D 31DB                    	xor	bx,bx
 20451                                  	;;mov	bl,[es:bp+DPB.drive]
 20452                                  	; 11/12/2022
 20453 00000E1F 268A5E00                	mov	bl,[es:bp]
 20454                                  	; 23/10/2022
 20455                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 20456                                  	
 20457                                  	;inc	bl
 20458                                  	; 18/12/2022
 20459 00000E23 43                      	inc	bx
 20460                                  
 20461 00000E24 BA[DA48]                	mov	dx,deviceparameters
 20462                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 20463 00000E27 B80D44                  	mov	ax,440Dh
 20464                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 20465 00000E2A B96008                  	mov	cx,860h
 20466 00000E2D CD21                    	int	21h		; DOS - 2+ - IOCTL -
 20467 00000E2F 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 20468                                  					; generic ioctl
 20469                                  ; determine capacity of drive
 20470                                  ; media capacity = #sectors * bytes/sector
 20471                                  
 20472                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS]
 20473                                  	; 23/10/2022
 20474 00000E31 8B1E[E948]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 20475                                  	
 20476                                  ; to keep the magnitude of the media capacity within a word,
 20477                                  ; scale the sector size
 20478                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 20479                                  
 20480                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR]
 20481                                  	; 23/10/2022
 20482 00000E35 A1[E148]                	mov	ax,[deviceparameters+7] ; bytes per sector
 20483 00000E38 31D2                    	xor	dx,dx
 20484 00000E3A B90002                  	mov	cx,512
 20485 00000E3D F7F1                    	div	cx			; scale sector size in factor of
 20486                                  					; 512 bytes
 20487 00000E3F F7E3                    	mul	bx			; ax = #sectors * size factor
 20488 00000E41 09D2                    	or	dx,dx			; just in case of large floppies
 20489 00000E43 7505                    	jnz	short setbuf
 20490 00000E45 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 20491 00000E48 7607                    	jbe	short nosetbuf
 20492                                  setbuf:
 20493                                  	; 18/12/2022
 20494                                  	; word [buffers] = 2
 20495 00000E4A C606[9702]03            	mov	byte [buffers],3
 20496                                  	;mov	word [buffers],3
 20497 00000E4F EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 20498                                  					; for default buffer count
 20499                                  nosetbuf:
 20500                                  	; 23/10/2022
 20501                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 20502 00000E51 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 20503 00000E56 7406                    	je	short chk_memsize_for_buffers
 20504                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 20505 00000E58 26C46E19                	les	bp,[es:bp+19h]
 20506 00000E5C EBB1                    	jmp	short nextdpb
 20507                                  
 20508                                  ;from dos 3.3,the default number of buffers will be changed according to the
 20509                                  ;memory size too.
 20510                                  ; default buffers = 2
 20511                                  ; if diskette media > 360 kb,then default buffers = 3
 20512                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 20513                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 20514                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 20515                                  
 20516                                  chk_memsize_for_buffers:
 20517                                  	; 18/12/2022
 20518                                  	;cmp	word [MEMORY_SIZE],2000h
 20519                                  	;jbe	short bufset
 20520                                  	;mov	word [buffers],5
 20521                                  	;cmp	word [MEMORY_SIZE],4000h
 20522                                  	;jbe	short bufset
 20523                                  	;mov	word [buffers],10
 20524                                  	;cmp	word [MEMORY_SIZE],8000h
 20525                                  	;jbe	short bufset
 20526                                  	;mov	word [buffers],15
 20527                                  
 20528                                  	; 18/12/2022
 20529                                  	; word [buffers] = 3 or 2
 20530 00000E5E BB[9702]                	mov	bx,buffers
 20531 00000E61 A1[9202]                	mov	ax,[MEMORY_SIZE]
 20532 00000E64 48                      	dec	ax	; [MEMORY_SIZE] - 1
 20533                                  
 20534 00000E65 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 20535 00000E68 7213                    	jb	short bufset
 20536 00000E6A C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 20537 00000E6D 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 20538 00000E70 730B                    	jnb	short bufset
 20539 00000E72 C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 20540 00000E75 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 20541 00000E78 7303                    	jnb	short bufset
 20542 00000E7A C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 20543                                  bufset:
 20544                                  	; 23/10/2022
 20545                                  	; 26/03/2019
 20546 00000E7D 1F                      	pop	ds
 20547 00000E7E 58                      	pop	ax
 20548                                  
 20549                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20550                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 20551                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20552                                  
 20553                                  ; 26/03/2019
 20554                                  
 20555                                  ;*******************************************************************************
 20556                                  ;									       *
 20557                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 20558                                  ; input :								       *
 20559                                  ;    memhi:memlo - start of the next available memory			       *
 20560                                  ;    buffers = number of buffers					       *
 20561                                  ;    h_buffers = number of secondary buffers				       *
 20562                                  ;									       *
 20563                                  ; output:								       *
 20564                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 20565                                  ;	buffinfo set.							       *
 20566                                  ;	bufferqueue set.						       *
 20567                                  ;									       *
 20568                                  ; subroutines to be called:						       *
 20569                                  ;									       *
 20570                                  ;*******************************************************************************
 20571                                  
 20572                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20573                                  	; (SYSINIT:0E60h)
 20574                                  dobuff:
 20575                                  	; ds = cs ; 31/03/2019
 20576                                  	; 23/10/2022
 20577 00000E7F 2EC51E[6B02]            	lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 20578                                  	;mov	ax,[buffers] ; 31/03/2019
 20579                                  	;lds	bx,[DOSINFO]
 20580 00000E84 2EA1[9702]              	mov	ax,[cs:buffers]	; set sysi_buffers
 20581                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 20582 00000E88 89473F                  	mov	[bx+3Fh],ax
 20583 00000E8B 2EA1[9902]              	mov	ax,[cs:h_buffers]
 20584                                  	;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 20585 00000E8F 894741                  	mov	[bx+41h],ax
 20586 00000E92 C55F12                  	lds	bx,[bx+12h]
 20587                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 20588 00000E95 E86D34                  	call	round		; get [memhi]:[memlo]
 20589                                  	;mov	al,devmark_buf	; ='B'
 20590 00000E98 B042                    	mov	al,'B'	
 20591 00000E9A E81C06                  	call	setdevmark
 20592                                  
 20593                                  ;allocate buffers
 20594                                  
 20595 00000E9D 1E                      	push	ds			; save buffer info. ptr.
 20596 00000E9E 53                      	push	bx
 20597                                  
 20598 00000E9F E85303                  	call	set_buffer
 20599                                  
 20600 00000EA2 5B                      	pop	bx
 20601 00000EA3 1F                      	pop	ds
 20602                                  
 20603                                  ;now set the secondary buffer if specified.
 20604                                  
 20605 00000EA4 2E833E[9902]00          	cmp	word [cs:h_buffers],0
 20606 00000EAA 742D                    	je	short xif16
 20607 00000EAC E85634                  	call	round
 20608                                  	; 23/10/2022
 20609 00000EAF 2E8B0E[6003]            	mov	cx,[cs:memlo]
 20610                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 20611 00000EB4 894F06                  	mov	[bx+6],cx
 20612 00000EB7 2E8B0E[6203]            	mov	cx,[cs:memhi]
 20613                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 20614 00000EBC 894F08                  	mov	[bx+8],cx
 20615 00000EBF 2E8B0E[9902]            	mov	cx,[cs:h_buffers]
 20616                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 20617 00000EC4 894F0A                  	mov	[bx+10],cx
 20618 00000EC7 B80002                  	mov	ax,512			; 512 byte
 20619 00000ECA F7E1                    	mul	cx
 20620 00000ECC 2EA3[6003]              	mov	[cs:memlo],ax
 20621                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20622 00000ED0 2E800E[E214]02          	or	byte [cs:setdevmarkflag],2
 20623 00000ED6 E82C34                  	call	round
 20624                                  xif16:
 20625                                  
 20626                                  ; ----------------------------------------------------------------------
 20627                                  ; allocate cdss
 20628                                  ; ----------------------------------------------------------------------
 20629                                  
 20630                                  buf1:
 20631 00000ED9 E82934                  	call	round
 20632                                  
 20633 00000EDC 50                      	push	ax
 20634                                  	; 23/10/2022
 20635                                  	;mov	ax,devmark_cds		;='L'
 20636 00000EDD B84C00                  	mov	ax, 'L'
 20637 00000EE0 E8D605                  	call	setdevmark
 20638 00000EE3 58                      	pop	ax
 20639                                  
 20640 00000EE4 2EC43E[6B02]            	les	di,[cs:DOSINFO]
 20641                                  	;mov	cl,[es:di+SYSI_NUMIO]
 20642 00000EE9 268A4D20                	mov	cl,[es:di+20h]
 20643 00000EED 2E3A0E[A002]            	cmp	cl,[cs:NUM_CDS]
 20644 00000EF2 7305                    	jae	short gotncds 		; user setting must be at least numio
 20645 00000EF4 2E8A0E[A002]            	mov	cl,[cs:NUM_CDS]
 20646                                  gotncds:
 20647 00000EF9 30ED                    	xor	ch,ch
 20648                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 20649 00000EFB 26884D21                	mov	[es:di+21h],cl
 20650 00000EFF 2EA1[6203]              	mov	ax,[cs:memhi]
 20651                                  	;mov	[es:di+SYSI_CDS+2],ax
 20652 00000F03 26894518                	mov	[es:di+18h],ax
 20653 00000F07 2EA1[6003]              	mov	ax,[cs:memlo]
 20654                                  	;mov	[es:di+SYSI_CDS],ax
 20655 00000F0B 26894516                	mov	[es:di+16h],ax
 20656 00000F0F 88C8                    	mov	al,cl
 20657                                  	;mov	ah,curdirlen ; curdir_list.size
 20658 00000F11 B458                    	mov	ah,88
 20659 00000F13 F6E4                    	mul	ah
 20660 00000F15 E85002                  	call	ParaRound
 20661 00000F18 2E0106[6203]            	add	[cs:memhi],ax
 20662                                  
 20663                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20664 00000F1D 2E800E[E214]02          	or	byte [cs:setdevmarkflag],2
 20665 00000F23 E8DF33                  	call	round			; check for mem error before initializing
 20666                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 20667 00000F26 26C535                  	lds	si,[es:di]
 20668                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 20669 00000F29 26C47D16                	les	di,[es:di+16h]
 20670 00000F2D E86BFD                  	call	fooset
 20671                                  
 20672                                  ; ----------------------------------------------------------------------
 20673                                  ; allocate space for internal stack
 20674                                  ; ----------------------------------------------------------------------
 20675                                  
 20676 00000F30 0E                      	push	cs
 20677 00000F31 1F                      	pop	ds
 20678                                  
 20679                                  ;	if the user did not entered stacks= command, as a default, do not install
 20680                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 20681                                  ;	otherwise,install it to the user specified value or to the default
 20682                                  ;	value of 9,128 for other systems.
 20683                                  
 20684 00000F32 833E[8E02]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 20685 00000F37 740E                    	je	short doinstallstack	; then install as specified by the user
 20686 00000F39 803E[BA02]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 20687 00000F3E 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 20688 00000F40 803E[B902]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 20689 00000F45 736D                    	jae	short skipstack
 20690                                  doinstallstack:
 20691 00000F47 A1[8A02]                	mov	ax,[stack_count]	; stack_count = 0?
 20692 00000F4A 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 20693 00000F4C 7466                    	jz	short skipstack		; don't install stack.
 20694                                  
 20695                                  ;	dynamic relocation of stack code.
 20696                                  
 20697 00000F4E E8B433                  	call	round			; [memhi] = seg. for stack code
 20698                                  					; [memlo] = 0
 20699                                  
 20700                                  ; set devmark block into memory for mem command
 20701                                  ; devmark_id = 's' for stack
 20702                                  
 20703                                  	;mov	al,devmark_stk	;='S'
 20704                                  	; 23/10/2022
 20705 00000F51 B053                    	mov	al,'S'
 20706 00000F53 E86305                  	call	setdevmark
 20707                                  
 20708 00000F56 A1[6203]                	mov	ax,[memhi]
 20709 00000F59 8EC0                    	mov	es,ax		; es -> seg. the stack code is going to move.
 20710                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20711                                  	; 11/12/2022
 20712                                  	; ds = cs
 20713                                  	;push	cs
 20714                                  	;pop	ds
 20715 00000F5B 31F6                    	xor	si,si		; !!we know that stack code is at the beginning of sysinit.
 20716 00000F5D 31FF                    	xor	di,di
 20717 00000F5F B9[6702]                	mov	cx,endstackcode
 20718 00000F62 890E[6003]              	mov	[memlo],cx
 20719 00000F66 E89C33                  	call	round		; have enough space for relocation?
 20720 00000F69 F3A4                    	rep	movsb
 20721                                  
 20722 00000F6B 1E                      	push	ds		; stick the location of the NextStack entry
 20723                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 20724                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 20725                                  	; 21/10/2022
 20726 00000F6C B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 20727 00000F6F 8ED8                    	mov	ds,ax
 20728 00000F71 C706[5F08][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 20729 00000F77 8C06[6108]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 20730                                  
 20731 00000F7B 2EA1[6003]              	mov	ax,[cs:memlo]
 20732 00000F7F 2EA3[8E02]              	mov	[cs:stack_addr],ax ; set for stack area initialization
 20733 00000F83 A3[6508]                	mov	[IT_StackLoc],ax  ; pass it as Instance Data, too
 20734 00000F86 2EA1[6203]              	mov	ax,[cs:memhi]	 ; this will be used by stack_init routine.
 20735 00000F8A 2EA3[9002]              	mov	[cs:stack_addr+2],ax
 20736 00000F8E A3[6708]                	mov	[IT_StackLoc+2],ax
 20737                                  
 20738                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 20739                                  
 20740                                  	;mov	ax,entrysize ; mov ax,8
 20741                                  	; 23/10/2022
 20742 00000F91 B80800                  	mov	ax,8
 20743 00000F94 2E0306[8C02]            	add	ax,[cs:stack_size]
 20744 00000F99 2EF726[8A02]            	mul	word [cs:stack_count]
 20745                                  
 20746 00000F9E A3[6908]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 20747                                  
 20748 00000FA1 1F                      	pop	ds		; no more need to access Instance Table
 20749                                  
 20750 00000FA2 E8C301                  	call	ParaRound	; convert size to paragraphs
 20751                                  	
 20752                                  	; 11/12/2022
 20753                                  	; ds = cs
 20754                                  	;add	[cs:memhi],ax
 20755 00000FA5 0106[6203]              	add	[memhi],ax
 20756                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20757                                  	;or	byte [cs:setdevmarkflag],2
 20758 00000FA9 800E[E214]02            	or	byte [setdevmarkflag],2
 20759                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20760                                  				; to set the devmark_size for stack by round routine.
 20761 00000FAE E85433                  	call	round		; check for memory error before
 20762                                  				; continuing
 20763 00000FB1 E8EA02                  	call	stackinit	; initialize hardware stack. 
 20764                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 20765                                  skipstack:
 20766                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20767                                  	; (SYSINIT:0F99h)
 20768                                  
 20769                                  	; 11/12/2022
 20770                                  	; ds = cs
 20771                                  	;push	cs
 20772                                  	;pop	ds
 20773                                  
 20774 00000FB4 A0[9D02]                	mov	al,[FILES]
 20775 00000FB7 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 20776                                  				;  it does sign extend.
 20777 00000FB9 89C1                    	mov	cx,ax
 20778 00000FBB 31DB                    	xor	bx,bx		;close standard input
 20779 00000FBD B43E                    	mov	ah,3Eh ; CLOSE
 20780 00000FBF CD21                    	int	21h
 20781 00000FC1 BB0200                  	mov	bx,2
 20782                                  rcclloop:			;close everybody but standard output
 20783 00000FC4 B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 20784 00000FC6 CD21                    	int	21h		; in case we can't get new one open.
 20785 00000FC8 43                      	inc	bx
 20786 00000FC9 E2F9                    	loop	rcclloop
 20787                                  
 20788 00000FCB BA[EA45]                	mov	dx,condev
 20789 00000FCE B002                    	mov	al,2
 20790 00000FD0 B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 20791 00000FD2 F9                      	stc			; set for possible int 24
 20792 00000FD3 CD21                    	int	21h
 20793 00000FD5 7305                    	jnc	short goaux
 20794 00000FD7 E87235                  	call	badfil
 20795 00000FDA EB13                    	jmp	short goaux2
 20796                                  goaux:	
 20797 00000FDC 50                      	push	ax
 20798 00000FDD BB0100                  	mov	bx,1		;close standard output
 20799 00000FE0 B43E                    	mov	ah,3Eh ; CLOSE
 20800 00000FE2 CD21                    	int	21h
 20801 00000FE4 58                      	pop	ax
 20802                                  
 20803 00000FE5 89C3                    	mov	bx,ax		;new device handle
 20804 00000FE7 B445                    	mov	ah,45h ; XDUP
 20805 00000FE9 CD21                    	int	21h		;dup to 1,stdout
 20806 00000FEB B445                    	mov	ah,45h ; XDUP
 20807 00000FED CD21                    	int	21h		;dup to 2,stderr
 20808                                  goaux2: 
 20809 00000FEF BA[EE45]                	mov	dx,auxdev
 20810 00000FF2 B002                    	mov	al,2		;read/write access
 20811 00000FF4 E88635                  	call	open_dev
 20812                                  
 20813 00000FF7 BA[F245]                	mov	dx,prndev
 20814 00000FFA B001                    	mov	al,1		;write only
 20815 00000FFC E87E35                  	call	open_dev
 20816                                  
 20817                                  ;global rearm command for shared interrupt devices attached in the system;
 20818                                  ;shared interrupt attachment has some problem when it issues interrupt
 20819                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 20820                                  ;no further interrupts on that level will be presented until a global rearm
 20821                                  ;is issued. by the request of the system architecture group, msbio will
 20822                                  ;issue a global rearm after every device driver is loaded.
 20823                                  ;to issue a global rearm:	;for pc1,xt,palace
 20824                                  ;
 20825                                  ;			  out 02f2h,xx  ; interrupt level 2
 20826                                  ;			  out 02f3h,xx  ; interrupt level 3
 20827                                  ;			  out 02f4h,xx  ; interrupt level 4
 20828                                  ;			  out 02f5h,xx  ; interrupt level 5
 20829                                  ;			  out 02f6h,xx  ; interrupt level 6
 20830                                  ;			  out 02f7h,xx  ; interrupt level 7
 20831                                  ;
 20832                                  ;	for pc at,in addition to the above commands,
 20833                                  ;	need to handle the secondary interrupt handler
 20834                                  ;
 20835                                  ;			  out 06f2h,xx  ; interrupt level 10
 20836                                  ;			  out 06f3h,xx  ; interrupt level 11
 20837                                  ;			  out 06f4h,xx  ; interrupt level 12
 20838                                  ;			  out 06f6h,xx  ; interrupt level 14
 20839                                  ;			  out 06f7h,xx  ; interrupt level 15
 20840                                  ;
 20841                                  ;	for round-up machine
 20842                                  ;
 20843                                  ;			  none.
 20844                                  
 20845                                  ; where xx stands for any value.
 20846                                  ;
 20847                                  ; for your information,after naples level machine,the system service bios
 20848                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 20849                                  
 20850                                  	; 24/10/2022
 20851                                  
 20852 00000FFF 50                      	push	ax
 20853 00001000 53                      	push	bx
 20854 00001001 52                      	push	dx
 20855 00001002 06                      	push	es
 20856                                  
 20857 00001003 B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 20858 00001005 BAF202                  	mov	dx,2F2h 		;get starting address
 20859 00001008 EE                      	out	dx,al			; out 02f2h,0ffh
 20860 00001009 42                      	inc	dx
 20861 0000100A EE                      	out	dx,al			; out 02f3h,0ffh
 20862 0000100B 42                      	inc	dx
 20863 0000100C EE                      	out	dx,al			; out 02f4h,0ffh
 20864 0000100D 42                      	inc	dx
 20865 0000100E EE                      	out	dx,al			; out 02f5h,0ffh
 20866 0000100F 42                      	inc	dx
 20867 00001010 EE                      	out	dx,al			; out 02f6h,0ffh
 20868 00001011 42                      	inc	dx
 20869 00001012 EE                      	out	dx,al			; out 02f7h,0ffh
 20870                                  
 20871                                  ;sb secondary global rearm
 20872                                  
 20873 00001013 B800F0                  	mov	ax,0F000h		;get machine type
 20874 00001016 8EC0                    	mov	es,ax
 20875 00001018 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 20876 0000101E 740D                    	je	short startrearm	; *if at no need to check
 20877                                  
 20878 00001020 B4C0                    	mov	ah,0C0h 		;get system configuration
 20879 00001022 CD15                    	int	15h			; *
 20880 00001024 7216                    	jc	short finishrearm	; *jmp if old rom
 20881                                  
 20882                                  ; test feature byte for secondary interrupt controller
 20883                                  
 20884 00001026 26F6470540              	test	byte [es:bx+5],40h
 20885                                  	; 24/10/2022
 20886                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 20887 0000102B 740F                    	je	short finishrearm	;jmp if it is there
 20888                                  
 20889                                  startrearm:
 20890 0000102D B0FF                    	mov	al,0FFh 		;write any pattern to port
 20891 0000102F BAF206                  	mov	dx,6F2h 		;get starting address
 20892 00001032 EE                      	out	dx,al			;out 06f2h,0ffh
 20893 00001033 42                      	inc	dx			;bump address
 20894 00001034 EE                      	out	dx,al			;out 06f3h,0ffh
 20895 00001035 42                      	inc	dx			;bump address
 20896 00001036 EE                      	out	dx,al			;out 06f4h,0ffh
 20897 00001037 42                      	inc	dx			;bump address
 20898 00001038 42                      	inc	dx			;bump address
 20899 00001039 EE                      	out	dx,al			;out 06f6h,0ffh
 20900 0000103A 42                      	inc	dx			;bump address
 20901 0000103B EE                      	out	dx,al			;out 06f7h,0ffh
 20902                                  
 20903                                  finishrearm:
 20904 0000103C 07                      	pop	es
 20905 0000103D 5A                      	pop	dx
 20906 0000103E 5B                      	pop	bx
 20907 0000103F 58                      	pop	ax
 20908                                  
 20909                                  ;    global rearm end *******************
 20910                                  
 20911                                  ; ----------------------------------------------------------------------
 20912                                  ; allocate sysinit_base for install= command
 20913                                  ; ----------------------------------------------------------------------
 20914                                  ; sysinit_base allocation.
 20915                                  ;   check if endfile has been called to handle install= command.
 20916                                  
 20917                                  set_sysinit_base:
 20918                                  
 20919                                  ; ----------------------------------------------------------------------
 20920                                  ;sysinit_base will be established in the secure area of
 20921                                  ;lower memory when it handles the first install= command.
 20922                                  ;sysinit_base is the place where the actual exec function will be called and
 20923                                  ;will check sysinit module in high memory if it is damaged by the application
 20924                                  ;program.  if sysinit module has been broken,then "memory error..." message
 20925                                  ;is displayed by sysinit_base.
 20926                                  ; ----------------------------------------------------------------------
 20927                                  
 20928                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 20929                                  	; (SYSINIT:1028h)
 20930                                  
 20931                                  	; 11/12/2022
 20932                                  	; ds = cs
 20933 00001040 50                      	push	ax			; set devmark for mem command
 20934 00001041 A1[6203]                	mov	ax,[memhi]
 20935 00001044 2B06[6603]              	sub	ax,[area]
 20936 00001048 A3[5E03]                	mov	[impossible_owner_size],ax ; remember the size in case.
 20937                                  	;mov	al,devmark_inst ; 'T'
 20938 0000104B B054                    	mov	al,'T'
 20939 0000104D E86904                  	call	setdevmark
 20940 00001050 58                      	pop	ax
 20941                                  
 20942 00001051 8B3E[6203]              	mov	di,[memhi]
 20943 00001055 8EC7                    	mov	es,di
 20944 00001057 893E[D202]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 20945 0000105B 31FF                    	xor	di,di
 20946 0000105D 893E[D002]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 20947 00001061 BE[7411]                	mov	si,sysinit_base		; ds:si -> source code to be relocated.
 20948 00001064 B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 20949                                  	; 24/10/2022 
 20950                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 20951 00001067 010E[6003]              	add	[memlo],cx
 20952                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 20953                                  	; 11/12/2022
 20954                                  	; ds = cs
 20955                                  	;or	byte [cs:setdevmarkflag],2
 20956 0000106B 800E[E214]02            	or	byte [setdevmarkflag],2
 20957                                  	;or	byte [setdevmarkflag],for_devmark
 20958 00001070 E89232                  	call	round			; check mem error. also,readjust memhi for the next use.
 20959 00001073 F3A4                    	rep	movsb			; reallocate it.
 20960                                  
 20961 00001075 C706[D402][5B11]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 20962 0000107B 8C0E[D602]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 20963                                  	;or	word [install_flag],has_installed ; set the flag.
 20964                                  	;or	byte [install_flag],has_installed ; 2
 20965                                  	; 11/12/2022
 20966 0000107F 800E[CC02]02            	or	byte [install_flag],2
 20967                                  	; 24/10/2022
 20968                                  	;or	word [install_flag],2	
 20969                                  
 20970                                  ; ----------------------------------------------------------------------
 20971                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 20972                                  ; the top of the memory will be allocated for sysinit and config.sys if
 20973                                  ; have_install_cmd.
 20974                                  ; ----------------------------------------------------------------------
 20975                                  
 20976 00001084 E87E32                  	call	round
 20977 00001087 8B1E[6203]              	mov	bx,[memhi]
 20978 0000108B A1[6603]                	mov	ax,[area]
 20979 0000108E A3[5C03]                	mov	[old_area],ax		; save [area]
 20980 00001091 8EC0                    	mov	es,ax			;calc what we needed
 20981 00001093 29C3                    	sub	bx,ax
 20982                                  	; 24/10/2022
 20983 00001095 B44A                    	mov	ah,4Ah ; SETBLOCK
 20984 00001097 CD21                    	int	21h			;give the rest back
 20985                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20986                                  		; ES = segment address of block to change
 20987                                  		; BX = new size in paragraphs
 20988 00001099 06                      	push	es
 20989 0000109A 8CC0                    	mov	ax,es
 20990 0000109C 48                      	dec	ax
 20991 0000109D 8EC0                    	mov	es,ax			;point to arena
 20992                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 20993                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 20994                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 20995                                  	; 24/10/2022
 20996 0000109F 26C70601000800          	mov	word [es:1],8		;set impossible owner
 20997 000010A6 26C70608005344          	mov	word [es:8],'SD'	; System Data
 20998 000010AD 07                      	pop	es
 20999                                  
 21000 000010AE BBFFFF                  	mov	bx,0FFFFh
 21001 000010B1 B448                    	mov	ah,48h ; ALLOC
 21002 000010B3 CD21                    	int	21h
 21003 000010B5 B448                    	mov	ah,48h ; ALLOC
 21004 000010B7 CD21                    	int	21h			; allocate the rest of the memory
 21005                                  		; DOS - 2+ - ALLOCATE MEMORY
 21006                                  		; BX = number of 16-byte paragraphs desired
 21007 000010B9 A3[6203]                	mov	[memhi],ax		; start of the allocated memory
 21008 000010BC C706[6003]0000          	mov	word [memlo],0		;  to be used next.
 21009                                  
 21010                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 21011                                  ;;;; allocated.
 21012                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 21013                                  ;;;; this time) to the top-of-the memory),here we are going to
 21014                                  ;;;; 1). "setblock" from memhi to confbot.
 21015                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 21016                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 21017                                  
 21018                                  ;memory allocation for sysinit,confbot module.
 21019                                  
 21020 000010C2 8EC0                    	mov	es,ax
 21021                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 21022                                  	; (SYSINIT:11DFh)
 21023 000010C4 8B1E[A102]              	mov	bx,[CONFBOT]
 21024                                  	; 24/10/2022
 21025                                  	;mov	bx,[top_of_cdss] ; mov bx,[confbot]
 21026 000010C8 29C3                    	sub	bx,ax			; confbot - memhi
 21027 000010CA 4B                      	dec	bx			; make a room for the memory block id.
 21028 000010CB 4B                      	dec	bx			; make sure!!!.
 21029 000010CC B44A                    	mov	ah,4Ah ; SETBLOCK
 21030 000010CE CD21                    	int	21h			; this will free (confbot to top of memory)
 21031                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 21032                                  		; ES = segment address of block to change
 21033                                  		; BX = new size in paragraphs
 21034 000010D0 BBFFFF                  	mov	bx,0FFFFh
 21035 000010D3 B448                    	mov	ah,48h ; ALLOC
 21036 000010D5 CD21                    	int	21h
 21037 000010D7 B448                    	mov	ah,48h ; ALLOC
 21038 000010D9 CD21                    	int	21h			; allocate (confbot to top of memory)
 21039                                  		; DOS - 2+ - ALLOCATE MEMORY
 21040                                  		; BX = number of 16-byte paragraphs desired
 21041 000010DB A3[6603]                	mov	[area],ax		; save allocated memory segment.
 21042                                  					; need this to free this area for command.com.
 21043 000010DE 8E06[6203]              	mov	es,[memhi]
 21044 000010E2 B449                    	mov	ah,49h			; free allocated memory.
 21045 000010E4 CD21                    	int	21h			; free (memhi to confbot(=area))
 21046                                  		; DOS - 2+ - FREE MEMORY
 21047                                  		; ES = segment address of area to be freed
 21048                                  endfile_ret:
 21049 000010E6 C3                      	retn
 21050                                  
 21051                                  ; End of "EndFile" DOS structure configuration.
 21052                                  
 21053                                  ; ----------------------------------------------------------------------
 21054                                  ; 26/03/2019 - Retro DOS v4.0
 21055                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 21056                                  ; ----------------------------------------------------------------------
 21057                                  ; Do_Install_Exec
 21058                                  ;
 21059                                  ; This procedure is used to EXEC a program being loaded via the 
 21060                                  ; "install=" mechanism in config.sys. It does this by setting up
 21061                                  ; the parameters, and then jumping to sysinit_base, which has been
 21062                                  ; setup in low memory. When complete, sysinit_base will jump back
 21063                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 21064                                  ; program).
 21065                                  
 21066                                  ;SYSINIT:10CFh:
 21067                                  
 21068                                  do_install_exec:			; now,handles install= command.
 21069                                  
 21070 000010E7 56                      	push	si			; save si for config.sys again.
 21071                                  
 21072                                  ; we are going to call load/exec function.
 21073                                  ; set es:bx to the parameter block here;;;;;;;
 21074                                  ; set ds:dx to the asciiz string. remember that we already has 0
 21075                                  ; after the filename. so parameter starts after that. if next
 21076                                  ; character is a line feed (i.e. 10),then assume that the 0
 21077                                  ; we already encountered used to be a carrage return. in this
 21078                                  ; case,let's set the length to 0 which will be followed by
 21079                                  ; carridge return.
 21080                                  
 21081                                  ; es:si -> command line in config.sys. points to the first non blank
 21082                                  ;character after =.
 21083                                  
 21084 000010E8 06                      	push	es
 21085 000010E9 1E                      	push	ds
 21086 000010EA 07                      	pop	es
 21087 000010EB 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 21088 000010EC 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 21089                                  
 21090 000010EE 31C9                    	xor	cx,cx
 21091 000010F0 FC                      	cld
 21092 000010F1 2EC606[EF02]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 21093 000010F7 BF[F002]                	mov	di,ldexec_parm
 21094                                  installfilename:			; skip the file name
 21095 000010FA AC                      	lodsb				; al = ds:si; si++
 21096 000010FB 3C00                    	cmp	al,0
 21097 000010FD 7402                    	je	short got_installparm
 21098 000010FF EBF9                    	jmp	short installfilename
 21099                                  got_installparm:			; copy the parameters to ldexec_parm
 21100 00001101 AC                      	lodsb
 21101 00001102 268805                  	mov	[es:di],al
 21102 00001105 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 21103 00001107 7405                    	je	short done_installparm
 21104 00001109 FEC1                    	inc	cl			; # of char. in the parm.
 21105 0000110B 47                      	inc	di
 21106 0000110C EBF3                    	jmp	short got_installparm
 21107                                  done_installparm:
 21108 0000110E 2E880E[EE02]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 21109 00001113 80F900                  	cmp	cl,0			; if no parm,then
 21110 00001116 7506                    	jne	short install_seg_set 	; let the parm area
 21111 00001118 2EC606[EF02]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 21112                                  					; starts with cr.
 21113                                  install_seg_set:
 21114 0000111E 2EC70600000000          	mov	word [cs:0],0		; make a null environment segment
 21115 00001125 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 21116                                  
 21117                                  ;---------------------------------------------------M067----------------
 21118                                  ;
 21119                                  ; 	the environment pointer is made 0. so the current environment ptr.
 21120                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 21121                                  ;
 21122                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 21123                                  ;
 21124                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 21125                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 21126                                  ; 	was fixed. 
 21127                                  ;
 21128                                  ; ----------------------------------------------------------------------
 21129                                  
 21130                                  ;;ifdef   MULTI_CONFIG
 21131                                  
 21132                                  ; If there's any environment data in "config_wrkseg", pass to app
 21133                                  
 21134                                  ; 30/12/2022 - Retro DOS v4.0 (Modified MSDOS 6.21 IO.SYS SYSINIT)
 21135                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 21136                                  ;%if 0
 21137 00001127 89C1                            mov     cx,ax
 21138 00001129 2E833E[D914]00                  cmp     word [cs:config_envlen],0
 21139 0000112F 7405                            je      short no_envdata2
 21140 00001131 2E8B0E[DB14]                    mov     cx,[cs:config_wrkseg]
 21141                                  no_envdata2:
 21142                                  ;;endif  ;MULTI_CONFIG
 21143                                  
 21144                                  ;%endif	; 24/10/2022
 21145                                  
 21146                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 21147                                  	; 24/10/2022
 21148                                  	;mov	[cs:iexec.environ],cx
 21149                                  	; 02/11/2022
 21150 00001136 2EA3[4003]              	mov	[cs:iexec.environ],ax	
 21151                                  
 21152                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 21153 0000113A 2EA3[4403]              	mov	[cs:iexec.ldexec_line+2],ax
 21154                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 21155 0000113E 2EA3[4803]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 21156                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 21157 00001142 2EA3[4C03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 21158 00001146 E86000                  	call	sum_up
 21159 00001149 26A3[D802]              	mov	[es:checksum],ax	; save the value of the sum
 21160 0000114D 31C0                    	xor	ax,ax
 21161 0000114F B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 21162 00001151 BB[4003]                	mov	bx,instexe		; es:bx -> parm block.
 21163 00001154 06                      	push	es			; save es,ds for load/exec
 21164 00001155 1E                      	push	ds			; these registers will be restored in sysinit_base.
 21165 00001156 2EFF2E[D002]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 21166                                  					; load/exec function and check sum.
 21167                                  
 21168                                  ;----------------------------------------
 21169                                  
 21170                                  ;j.k. this is the returning address from sysinit_base.
 21171                                  
 21172                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 21173                                  
 21174                                  sysinitptr:				; returning far address from sysinit_base
 21175 0000115B 5E                      	pop	si			; restore si for config.sys file.
 21176 0000115C 06                      	push	es
 21177 0000115D 1E                      	push	ds
 21178 0000115E 07                      	pop	es
 21179 0000115F 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 21180 00001160 7305                            jnc     short install_exit_ret
 21181                                  
 21182 00001162 56                      	push	si			; error in loading the file for install=.
 21183 00001163 E8EA33                  	call	badload 		; es:si-> path,filename,0.
 21184 00001166 5E                      	pop	si
 21185                                  
 21186                                  	; 24/10/2022
 21187                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 21188                                  	; 11/12/2022
 21189                                  	; ds = cs
 21190                                  
 21191                                  	; 30/12/2022 - Retro DOS v4.2
 21192                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:1283h)
 21193                                  
 21194                                  install_exit_ret:
 21195 00001167 C3                      	retn
 21196                                  
 21197                                  ; 30/12/2022 - Retro DOS v4.2
 21198                                  %if 0
 21199                                  install_exit_ret:
 21200                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 21201                                  
 21202                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 21203                                  ;SYSINIT:1142h:
 21204                                  	mov     ah,4Dh
 21205                                  	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 21206                                  	cmp     ah,3
 21207                                  	jz      short sysinitptr_retn
 21208                                  	call    error_line
 21209                                  	stc
 21210                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 21211                                  	retn		
 21212                                  
 21213                                  %endif ; 24/10/2022
 21214                                  
 21215                                  ; ----------------------------------------------------------------------
 21216                                  
 21217                                  ;**	ParaRound - Round Up length to paragraph multiple
 21218                                  ;
 21219                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 21220                                  ;	by 16 yielding a "length in paragraphs" value.
 21221                                  ;
 21222                                  ;	ENTRY	(ax) = byte length
 21223                                  ;	EXIT	(ax) = rounded up length in paragraphs
 21224                                  ;	USES	ax, flags
 21225                                  
 21226                                  ParaRound:
 21227 00001168 83C00F                  	add	ax,15
 21228 0000116B D1D8                    	rcr	ax,1
 21229 0000116D D1E8                    	shr	ax,1
 21230 0000116F D1E8                    	shr	ax,1
 21231 00001171 D1E8                    	shr	ax,1
 21232 00001173 C3                      	retn
 21233                                  
 21234                                  ; ----------------------------------------------------------------------
 21235                                  ; sysinit_base module.
 21236                                  ;
 21237                                  ; This module is relocated by the routine EndFile to a location in low
 21238                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 21239                                  ; that are being loaded by the "install=" command. After the EXEC call
 21240                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 21241                                  ; top of memory) to be sure that the EXECed program did not damage it.
 21242                                  ; If it did, then this module will print an error message and stop the
 21243                                  ; system. Otherwise, it returns control to SYSINIT.
 21244                                  ;
 21245                                  ;in: after relocation,
 21246                                  ;    ax = 4b00h - load and execute the program dos function.
 21247                                  ;    ds = confbot. segment of config.sys file image
 21248                                  ;    es = sysinitseg. segment of sysinit module itself.
 21249                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 21250                                  ;    es:bx = pointer to a parameter block for load.
 21251                                  ;    SI_end (byte) - offset value of end of sysinit module label
 21252                                  ;    bigsize (word) - # of word from confbot to SI_end.
 21253                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 21254                                  ;			word boundary moduler form.
 21255                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 21256                                  ;
 21257                                  ;note: sysinit should save necessary registers and when the control is back
 21258                                  
 21259                                  	; 24/10/2022
 21260                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 21261                                  sysinit_base:				
 21262 00001174 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 21263 00001179 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 21264 0000117E CD21                    	int	21h			; load/exec dos call.
 21265 00001180 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 21266 00001185 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 21267 0000118A 1F                      	pop	ds			; restore confbot seg
 21268 0000118B 07                      	pop	es			; restore sysinitseg
 21269 0000118C 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 21270                                  					; at this time,i don't have to worry about
 21271                                  					; that sysinit module has been broken or not.
 21272 0000118E E81800                  	call	sum_up			; otherwise,check if it is good.
 21273 00001191 263906[D802]            	cmp	[es:checksum],ax
 21274 00001196 740C                    	je	short sysinit_base_end
 21275                                  
 21276                                  ;	memory broken. show "memory allocation error" message and stall.
 21277                                  
 21278 00001198 B409                    	mov	ah,9
 21279 0000119A 0E                      	push	cs
 21280 0000119B 1F                      	pop	ds
 21281                                  	; 30/12/2022
 21282                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:12B8h)
 21283                                  	;mov	dx, 102
 21284 0000119C BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 21285                                  					; 66h (for MSDOS 6.21 SYSINIT)
 21286 0000119F CD21                    	int	21h
 21287                                  		; DOS - PRINT STRING
 21288                                  		; DS:DX -> string terminated by "$"
 21289                                  
 21290                                  	; 30/12/2022 - Retro DOS v4.2
 21291                                  stall:
 21292                                  	; 24/10/2022
 21293                                  _stall: 
 21294                                  	; 11/12/2022
 21295 000011A1 F4                      	hlt 
 21296                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21297                                  	;hlt				;use HLT to minimize energy consumption
 21298 000011A2 EBFD                            jmp	short _stall
 21299                                  
 21300                                  sysinit_base_end: 
 21301 000011A4 26FF2E[D402]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 21302                                  
 21303                                  ;-------------------------------------
 21304                                  
 21305                                  sum_up:
 21306                                  
 21307                                  ;in:   es - sysinitseg.
 21308                                  ;out:  ax - result
 21309                                  ;
 21310                                  ;remark: since this routine will only check starting from "locstack" to the end of
 21311                                  ;	 sysinit segment,the data area, and the current stack area are not
 21312                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 21313                                  ;	 gaurantee to be safe.
 21314                                  ;
 21315                                  ;first sum up confbot seg.
 21316                                  
 21317 000011A9 1E                      	push	ds
 21318                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 21319                                  	; (SYSINIT:12C6h)
 21320 000011AA 26A1[A102]              	mov	ax,[es:CONFBOT]
 21321                                  	; 24/10/2022
 21322                                  	;mov	ax,[es:top_of_cdss]
 21323 000011AE 8ED8                    	mov	ds,ax
 21324 000011B0 31F6                    	xor	si,si
 21325 000011B2 31C0                    	xor	ax,ax
 21326 000011B4 268B0E[CE02]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 21327                                  					; whole test better fail.
 21328 000011B9 D1E9                    	shr	cx,1			; make it a word count
 21329 000011BB 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 21330                                  sum1:
 21331 000011BD 0304                    	add	ax,[si]
 21332 000011BF 46                      	inc	si
 21333 000011C0 46                      	inc	si
 21334 000011C1 E2FA                    	loop	sum1
 21335                                  ;now,sum up sysinit module.
 21336                                  sum_sys_code:
 21337                                  	; 24/10/2022
 21338 000011C3 BEC211                  	mov	si,locstack ; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 21339                                  			    ; 532h (MSDOS 6.21 IO.SYS, SYSINIT)
 21340                                  				        ; starting after the stack.  M069
 21341                                  					;  this does not cover the possible stack code!!!
 21342                                  	;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 21343                                  	; 02/11/2022
 21344                                  	;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 21345                                  	; 30/12/2022  
 21346 000011C6 B9[104E]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 21347 000011C9 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 21348 000011CB D1E9                    	shr	cx,1
 21349                                  sum2:
 21350 000011CD 260304                  	add	ax,[es:si]
 21351 000011D0 46                      	inc	si
 21352 000011D1 46                      	inc	si
 21353 000011D2 E2F9                    	loop	sum2
 21354 000011D4 1F                      	pop	ds
 21355 000011D5 C3                      	retn
 21356                                  
 21357                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21358                                  ; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 21359                                  ; (SYSINIT:12F2h)
 21360                                  
 21361                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 21362                                  ;SYSINIT:11BDh:			    ; = 62 (MSDOS 6.21 IO.SYS, SYSINIT:1290h) 	
 21363 000011D6 0000                    	dw	0
 21364                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 21365                                  ;SYSINIT:11BFh:			    ; = 64 (MSDOS 6.21 IO.SYS, SYSINIT:1292h)
 21366 000011D8 0000                    	dw	0	
 21367                                  
 21368                                  mem_alloc_err_msgx:
 21369                                  
 21370                                         ;include msbio.cl4		; memory allocation error message
 21371                                  
 21372                                  ;SYSINIT:12F6:  ; MSDOS 6.21 IO.SYS SYSINIT:12F6h
 21373 000011DA 0D0A                    	db	0Dh,0Ah
 21374 000011DC 4D656D6F727920616C-     	db 	'Memory allocation error $'
 21374 000011E5 6C6F636174696F6E20-
 21374 000011EE 6572726F722024     
 21375                                  
 21376                                  end_sysinit_base: ; label byte
 21377                                  	; 24/10/2022
 21378                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 21379                                  
 21380                                  ; ----------------------------------------------------------------------
 21381                                  ; Set_Buffer
 21382                                  ;
 21383                                  ;function: set buffers in the real memory.				  
 21384                                  ;	   lastly set the memhi,memlo for the next available free address.
 21385                                  ;
 21386                                  ;input:    ds:bx -> buffinfo.
 21387                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 21388                                  ;	   singlebuffersize = buffer header size + sector size		  
 21389                                  ;
 21390                                  ;output:   buffers Queue established.	       				   
 21391                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 21392                                  ; ----------------------------------------------------------------------
 21393                                  
 21394                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21395                                  	; (SYSINIT:11DCh)
 21396                                  
 21397                                  set_buffer:
 21398 000011F5 30D2                    	xor	dl,dl				; assume buffers not in HMA
 21399 000011F7 E85500                  	call	GetBufferAddr
 21400 000011FA 7402                    	jz	short set_buff_1
 21401 000011FC B201                    	mov	dl,1				; buffers in HMA
 21402                                  set_buff_1:
 21403                                  	; 25/10/2022
 21404                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 21405 000011FE 893F                    	mov	[bx],di
 21406                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 21407 00001200 8C4702                  	mov	[bx+2],es
 21408                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 21409 00001203 C747040000              	mov	word [bx+4],0
 21410                                  
 21411 00001208 89F8                    	mov	ax,di
 21412 0000120A 2E8B0E[9702]            	mov	cx,[cs:buffers]
 21413 0000120F 57                      	push	di				; remember first buffer
 21414                                  
 21415                                  ;	for each buffer
 21416                                  
 21417                                  nxt_buff:
 21418 00001210 E86300                  	call	set_buffer_info 		; set buf_link,buf_id...
 21419 00001213 89C7                    	mov	di,ax
 21420 00001215 E2F9                    	loop	nxt_buff
 21421                                  
 21422 00001217 2E2B3E[9B02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 21423                                  
 21424 0000121C 59                      	pop	cx				; get first buffer
 21425                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 21426 0000121D 26890D                  	mov	[es:di],cx
 21427 00001220 87CF                    	xchg	cx,di
 21428                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 21429                                  	; 25/10/2022
 21430 00001222 26894D02                	mov	[es:di+2],cx
 21431                                  
 21432 00001226 08D2                    	or	dl,dl				; In HMa ?
 21433 00001228 7417                    	jz	short set_buff_2		; no
 21434                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 21435 0000122A C6470C01                	mov	byte [bx+12],1
 21436 0000122E 2EA1[6203]              	mov	ax,[cs:memhi]			; seg of scratch buff
 21437                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of scratch buff is 0
 21438 00001232 C7470D0000              	mov	word [bx+13],0
 21439                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 21440 00001237 89470F                  	mov	word [bx+15],ax
 21441 0000123A 2EA1[9B02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 21442                                  	;sub	ax,bufinsiz ; 20		; buffer head not required
 21443 0000123E 83E814                  	sub	ax,20
 21444                                  set_buff_2:
 21445 00001241 2E0106[6003]            	add	[cs:memlo],ax
 21446                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 21447 00001246 2E800E[E214]02          	or	byte [cs:setdevmarkflag],2
 21448                                  	;call	round
 21449                                  	;retn
 21450                                  	; 12/12/2022
 21451 0000124C E9B630                  	jmp	round
 21452                                  
 21453                                  ; ----------------------------------------------------------------------
 21454                                  ; procedure : GetBufferAddr
 21455                                  ;
 21456                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 21457                                  ;
 21458                                  ; returns in es:di the buffer adress
 21459                                  ; returns NZ if allocated in HMA
 21460                                  ; ----------------------------------------------------------------------
 21461                                  
 21462                                  	; 25/10/2022 
 21463                                  GetBufferAddr:
 21464 0000124F 53                      	push	bx
 21465 00001250 52                      	push	dx
 21466 00001251 2EA1[9B02]              	mov	ax, [cs:singlebuffersize]
 21467 00001255 2EF726[9702]            	mul	word [cs:buffers]
 21468                                  	;add	ax,0Fh
 21469 0000125A 83C00F                  	add	ax,15 
 21470                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21471                                  	;and	ax,~15	; 0FFF0h	; para round
 21472                                  	; 12/12/2022
 21473 0000125D 24F0                    	and	al,~15	; 0F0h
 21474 0000125F 89C3                    	mov	bx,ax
 21475 00001261 B8024A                  	mov	ax,4A02h
 21476                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 21477 00001264 CD2F                    	int	2Fh
 21478 00001266 83FFFF                  	cmp	di,0FFFFh
 21479 00001269 7508                    	jne	short got_hma
 21480 0000126B BF0000                  	mov	di,0			; dont xor di,di Z flag needed
 21481                                  	;zf=1
 21482                                  	;xor	di,di	; 25/10/2022
 21483                                  	;zf=1
 21484 0000126E 2E8E06[6203]            	mov	es,[cs:memhi]
 21485                                  got_hma:
 21486 00001273 5A                      	pop	dx
 21487 00001274 5B                      	pop	bx
 21488 00001275 C3                      	retn
 21489                                  
 21490                                  ; ----------------------------------------------------------------------
 21491                                  
 21492                                  set_buffer_info:
 21493                                  
 21494                                  ;function: set buf_link,buf_id,buf_sector
 21495                                  ;
 21496                                  ;in: es:di -> buffer header to be set.
 21497                                  ;    ax = di
 21498                                  ;
 21499                                  ;out:
 21500                                  ;    above entries set.
 21501                                  
 21502                                  	; 25/10/2022 
 21503 00001276 2EFF36[BB02]            	push	word [cs:buf_prev_off]
 21504                                  	;pop	word [es:di+buffinfo.buf_prev]
 21505 0000127B 268F4502                	pop	word [es:di+2]
 21506 0000127F 2EA3[BB02]              	mov	[cs:buf_prev_off],ax
 21507 00001283 2E0306[9B02]            	add	ax,[cs:singlebuffersize]	; adjust ax
 21508                                  	;mov	[es:di+buffinfo.buf_next],ax
 21509 00001288 268905                  	mov	[es:di],ax
 21510                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 21511 0000128B 26C74504FF00            	mov	word [es:di+4],00FFh
 21512                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 21513 00001291 26C745060000            	mov	word [es:di+6],0
 21514                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 21515 00001297 26C745080000            	mov	word [es:di+8],0
 21516 0000129D C3                      	retn
 21517                                  
 21518                                  ; ======================================================================
 21519                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 21520                                  ; ----------------------------------------------------------------------
 21521                                  ; 27/03/2019 - Retro DOS v4.0
 21522                                  
 21523                                  ; ----------------------------------------------------------------------
 21524                                  ; ibmstack initialization routine.
 21525                                  ;
 21526                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 21527                                  ;	has been modified. this initialization routine also has to
 21528                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 21529                                  ;	should be set to signal that this interrupt handler is the
 21530                                  ;	first handler hooked to this interrupt vector.
 21531                                  ;	we determine this by looking at the instruction pointed by
 21532                                  ;	this vector. if it is iret, then this handler should be the
 21533                                  ;	first one. in our case, only the interrupt vector 77h is the
 21534                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 21535                                  ;
 21536                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 21537                                  ;	some design changes are needed to the above interrupt sharing
 21538                                  ;	method. the above sharing scheme assumes that 1). interrupt
 21539                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 21540                                  ;	interrupts would only be generated on levels 7 and 15.
 21541                                  ;	these assumptions are not true any more. we have to use the firstflag
 21542                                  ;	for every level of interrupt. we will set the firstflag on the following
 21543                                  ;	conditions:
 21544                                  ;
 21545                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 21546                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 21547                                  ;	 c. else if cs:ip points to an iret, then "first"
 21548                                  ;	 d. else if cs:ip points to dummy, then "first"
 21549                                  ;
 21550                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 21551                                  ;	be equal to the value at f000:ff01. this location is the initial value
 21552                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 21553                                  ;	the bioses for all of the machines.
 21554                                  ;
 21555                                  ;	system design group requests bios to handle the phantom interrupts.
 21556                                  ;
 21557                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 21558                                  ;	produced by the bogus adapter card even without interrupt request is
 21559                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 21560                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 21561                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 21562                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 21563                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 21564                                  ;	interrupt line.
 21565                                  ;
 21566                                  ;	to handle those "phantom" interrupts, the main stack code will check
 21567                                  ;	the own firstflag, and if it is not "first" (which means the forward
 21568                                  ;	pointer points to the legal shared interrupt handler), then pass the
 21569                                  ;	control. if it is the first, then the following action should be
 21570                                  ;	taken. we don't have to implement stack logic in this case.
 21571                                  ;
 21572                                  ;	to implement this logic, we rather choose a simple method.
 21573                                  ;	if ont of the above "firstflag" conditions is met, we are not
 21574                                  ;	going to hook this interrupt vector. the reason is if the original
 21575                                  ;	vector points to "iret" and do nothing, we don't need
 21576                                  ;	to implement the stack logic for it. this will simplify implementation
 21577                                  ;	while maintaining compatibility with the old version of dos.
 21578                                  ;	this implies that in the main stack code, there might be a stack code
 21579                                  ;	that will never be used, a dead code.
 21580                                  ;
 21581                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 21582                                  
 21583                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21584                                  	; (SYSINIT:1287h)
 21585                                  
 21586                                  	; 14/12/2022
 21587                                  stackinit:
 21588 0000129E 50                      	push	ax
 21589 0000129F 1E                      	push	ds
 21590 000012A0 06                      	push	es
 21591 000012A1 53                      	push	bx
 21592 000012A2 51                      	push	cx
 21593 000012A3 52                      	push	dx
 21594 000012A4 57                      	push	di
 21595 000012A5 56                      	push	si
 21596 000012A6 55                      	push	bp
 21597                                  
 21598                                  ;currently es -> stack code area
 21599                                  
 21600                                  	; 12/12/2022
 21601                                  	; ds = cs
 21602 000012A7 A1[8A02]                	mov	ax,[stack_count]
 21603 000012AA 89C1                    	mov	cx,ax  ; *!*!*  
 21604                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21605                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 21606                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 21607 000012AC 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 21608                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 21609 000012B0 A1[8C02]                	mov	ax,[stack_size]	 ; !!		;in cs
 21610 000012B3 26A3[0600]              	mov	[es:stacksize],ax
 21611                                  	; 12/12/2022
 21612 000012B7 A1[8E02]                	mov	ax,[stack_addr]			; offset
 21613                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21614                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21615                                  	;mov	ax,[cs:stack_addr]  ; !!
 21616 000012BA 26A3[0800]              	mov	[es:stacks],ax
 21617                                  	; 12/12/2022
 21618 000012BE 89C5                    	mov	bp,ax ; *!*
 21619 000012C0 A1[9002]                	mov	ax,[stack_addr+2]
 21620                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21621                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21622                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 21623 000012C3 26A3[0A00]              	mov	[es:stacks+2],ax
 21624                                  
 21625                                  ; initialize the data fields with the parameters
 21626                                  
 21627                                  ; "firstentry" will always be at stacks
 21628                                  
 21629                                  	;mov	bp,[es:stacks]			; get offset of stack
 21630                                  	; 12/12/2022
 21631                                  	; bp = [es:stacks] ; *!*
 21632 000012C7 26892E[0C00]            	mov	[es:firstentry],bp
 21633                                  
 21634                                  ; the stacks will always immediately follow the table entries
 21635                                  
 21636 000012CC B80800                  	mov	ax,entrysize ; 8
 21637                                  	;mov	cx,[es:stackcount]
 21638                                  	; 12/12/2022
 21639                                  	; cx = [es:stackcount] ; *!*!*
 21640 000012CF F7E1                    	mul	cx
 21641 000012D1 01E8                    	add	ax,bp
 21642 000012D3 26A3[0400]              	mov	[es:stackat],ax
 21643 000012D7 89C3                    	mov	bx,ax
 21644 000012D9 83EB02                  	sub	bx,2
 21645                                  
 21646                                  ; zero the entire stack area to start with
 21647                                  
 21648 000012DC 268B3E[0400]            	mov	di,[es:stackat]
 21649 000012E1 26A1[0600]              	mov	ax,[es:stacksize]
 21650 000012E5 F7E1                    	mul	cx
 21651 000012E7 89C1                    	mov	cx,ax
 21652 000012E9 31C0                    	xor	ax,ax
 21653 000012EB 06                      	push	es
 21654 000012EC 1F                      	pop	ds				;ds = relocated stack code seg.
 21655                                  
 21656                                  ;now, ds -> stack code area
 21657                                  
 21658 000012ED 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 21659 000012F1 FC                      	cld
 21660 000012F2 F3AA                    	rep	stosb
 21661                                  
 21662 000012F4 8B0E[0200]              	mov	cx,[stackcount]
 21663                                  
 21664                                  ; loop for "count" times, building a table entry
 21665                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 21666                                  ;  cx = number of entries
 21667                                  ;  es:bp => base of stacks - 2
 21668                                  ;  es:bx => first table entry
 21669                                  
 21670                                  buildloop:
 21671                                  	; 11/12/2022
 21672                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 21673                                  	; 25/10/2022
 21674                                  	;mov	byte [es:bp],free
 21675                                  	; 06/07/2023
 21676 000012F8 26884600                	mov	[es:bp],al ; 0 ; free
 21677 000012FC 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 21678                                  	;mov	[es:bp+1],al
 21679 00001300 26894602                	mov	[es:bp+savedsp],ax
 21680                                  	;mov	[es:bp2],ax
 21681 00001304 26894604                	mov	[es:bp+savedss],ax
 21682                                  	;mov	[es:bp+4],ax
 21683 00001308 031E[0600]              	add	bx,[stacksize]
 21684 0000130C 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 21685                                  	;mov	[es:bp+6],bx
 21686 00001310 26892F                  	mov	[es:bx],bp
 21687 00001313 83C508                  	add	bp,entrysize ; 8
 21688                                  
 21689 00001316 E2E0                    	loop	buildloop
 21690                                  
 21691 00001318 83ED08                  	sub	bp,entrysize ; 8
 21692 0000131B 892E[0E00]              	mov	[lastentry],bp
 21693 0000131F 892E[1000]              	mov	[nextentry],bp
 21694                                  
 21695 00001323 1E                      	push	ds
 21696 00001324 B800F0                  	mov	ax,0F000h		;look at the model byte
 21697 00001327 8ED8                    	mov	ds,ax
 21698 00001329 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 21699 0000132E 1F                      	pop	ds
 21700 0000132F 7504                    	jne	short skip_disablenmis
 21701                                  
 21702 00001331 B007                    	mov	al,07h			; disable convertible nmis
 21703 00001333 E672                    	out	72h,al
 21704                                  
 21705                                  skip_disablenmis:
 21706 00001335 31C0                    	xor	ax,ax
 21707 00001337 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 21708                                  					;ds - relocated stack code segment
 21709 00001339 FA                      	cli
 21710                                  
 21711                                  	;irp	aa,<02,08,09,70>
 21712                                  	;
 21713                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21714                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 21715                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 21716                                  	;mov	dx,offset int&aa	;pass where new handler is
 21717                                  	;call	new_init_loop		;adjust the vector to new handler,
 21718                                  	;				;saving pointer to original owner
 21719                                  	;endm
 21720                                  
 21721                                  stkinit_02:
 21722 0000133A BE0800                  	mov	si,02h*4 ; 8
 21723 0000133D BF[3A06]                	mov	di,INT19OLD02
 21724 00001340 BB[1200]                	mov	bx,old02
 21725 00001343 BA[1600]                	mov	dx,int02
 21726 00001346 E84901                  	call	new_init_loop
 21727                                  stkinit_08:
 21728 00001349 BE2000                  	mov	si,08h*4 ; 32
 21729 0000134C BF[3F06]                	mov	di,INT19OLD08
 21730 0000134F BB[3800]                	mov	bx,old08
 21731 00001352 BA[3C00]                	mov	dx,int08
 21732 00001355 E83A01                  	call	new_init_loop
 21733                                  stkinit_09:
 21734 00001358 BE2400                  	mov	si,09h*4 ; 36
 21735 0000135B BF[4406]                	mov	di,INT19OLD09
 21736 0000135E BB[4100]                	mov	bx,old09
 21737 00001361 BA[4500]                	mov	dx,int09
 21738 00001364 E82B01                  	call	new_init_loop
 21739                                  stkinit_70:
 21740 00001367 BEC001                  	mov	si,70h*4 ; 448
 21741 0000136A BF[6206]                	mov	di,INT19OLD70
 21742 0000136D BB[4E00]                	mov	bx,old70
 21743 00001370 BA[5200]                	mov	dx,int70
 21744 00001373 E81C01                  	call	new_init_loop
 21745                                  
 21746                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 21747                                  	;
 21748                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21749                                  	;push	ds			;save relocated stack code segment
 21750                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 21751                                  	;push	ds
 21752                                  	;pop	dx			;dx = segment value
 21753                                  	;	
 21754                                  	;cmp	dx,0
 21755                                  	;jz	int&aa&_first
 21756                                  	;
 21757                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 21758                                  	;jz	int&aa&_first
 21759                                  	;
 21760                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 21761                                  	;jz	int&aa&_not_first
 21762                                  	;
 21763                                  	;cmp	dx,0f000h		;rom bios segment
 21764                                  	;jnz	int&aa&_not_first
 21765                                  	;
 21766                                  	;push	es
 21767                                  	;push	dx
 21768                                  	;mov	dx,0f000h
 21769                                  	;mov	es,dx
 21770                                  	;cmp	bx,word ptr es:0ff01h
 21771                                         	;pop	dx
 21772                                  	;pop	es
 21773                                  	;jz	int&aa&_first
 21774                                  	;
 21775                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 21776                                  	;pop	ds
 21777                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 21778                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 21779                                  	;mov	dx, offset int&aa	;pass where new handler is
 21780                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 21781                                  	;				;pointer to original owner.
 21782                                  	;jmp	short int&aa&_end
 21783                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 21784                                  	;pop	ds
 21785                                  ;int&aa&_end:
 21786                                  	;
 21787                                  	;endm
 21788                                  
 21789                                  stkinit_0A:
 21790 00001376 BE2800                  	mov	si,0Ah*4 ; 40
 21791                                  	
 21792                                  ; 14/12/2022
 21793                                  %if 0	
 21794                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21795                                  	push	ds
 21796                                  	
 21797                                  	lds	bx,[es:si]
 21798                                  	push	ds
 21799                                  	pop	dx
 21800                                  		
 21801                                  	cmp	dx,0
 21802                                  	je	short int_0A_first
 21803                                  	
 21804                                  	cmp	byte [bx],0CFh
 21805                                  	je	short int_0A_first
 21806                                  	
 21807                                  	cmp	word [bx+6],424Bh
 21808                                  	je	short int_0A_not_first
 21809                                  	
 21810                                  	cmp	dx,0F000h
 21811                                  	jne	short int_0A_not_first
 21812                                  	
 21813                                  	push	es
 21814                                  	push	dx
 21815                                  	mov	dx,0F000h
 21816                                  	mov	es,dx
 21817                                  	cmp	bx,[es:0FF01h]
 21818                                         	pop	dx
 21819                                  	pop	es
 21820                                  	je	short int_0A_first
 21821                                  %Endif
 21822                                  
 21823                                  	; 14/12/2022
 21824                                  	; 25/10/2022
 21825 00001379 E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21826 0000137C 730C                    	jnc	short int_0A_first
 21827                                  	
 21828                                  int_0A_not_first:
 21829                                  	; 14/12/2022
 21830                                  	; 25/10/2022
 21831                                  	;pop	ds
 21832 0000137E BF[4906]                	mov	di,INT19OLD0A
 21833 00001381 BB[5900]                	mov	bx,old0A
 21834 00001384 BA[5700]                	mov	dx,int0A
 21835 00001387 E80801                  	call	new_init_loop
 21836                                  	
 21837                                  	; 14/12/2022	
 21838                                  	;jmp	short int_0A_end
 21839                                  ;int_0A_first:
 21840                                  	; 25/10/2022
 21841                                  	;pop	ds
 21842                                  
 21843                                  	; 14/12/2022
 21844                                  int_0A_first:
 21845                                  int_0A_end:
 21846                                  
 21847                                  stkinit_0B:
 21848 0000138A BE2C00                  	mov	si,0Bh*4 ; 44
 21849                                  	
 21850                                  	; 14/12/2022
 21851                                  	; 25/10/2022
 21852 0000138D E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21853 00001390 730C                    	jnc	short int_0B_end ; int_0B_first
 21854                                  
 21855                                  ; 14/12/2022
 21856                                  %if 0	
 21857                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21858                                  	push	ds
 21859                                  	lds	bx,[es:si]
 21860                                  	push	ds
 21861                                  	pop	dx
 21862                                  		
 21863                                  	cmp	dx,0
 21864                                  	je	short int_0B_first
 21865                                  
 21866                                  	cmp	byte [bx],0CFh
 21867                                  	je	short int_0B_first
 21868                                  	
 21869                                  	cmp	word [bx+6],424Bh
 21870                                  	je	short int_0B_not_first
 21871                                  	
 21872                                  	cmp	dx,0F000h
 21873                                  	jne	short int_0B_not_first
 21874                                  
 21875                                  	push	es
 21876                                  	push	dx
 21877                                  	mov	dx,0F000h
 21878                                  	mov	es,dx
 21879                                  	cmp	bx,[es:0FF01h]
 21880                                  	pop	dx
 21881                                  	pop	es
 21882                                  	je	short int_0B_first
 21883                                  %endif
 21884                                  
 21885                                  int_0B_not_first:
 21886                                  	; 14/12/2022
 21887                                  	; 25/10/2022
 21888                                  	;pop	ds
 21889 00001392 BF[4E06]                	mov	di,INT19OLD0B
 21890 00001395 BB[7100]                	mov	bx,old0B
 21891 00001398 BA[6F00]                	mov	dx,int0B
 21892 0000139B E8F400                  	call	new_init_loop
 21893                                  
 21894                                  	; 14/12/2022
 21895                                  	;jmp	short int_0B_end
 21896                                  ;int_0B_first:
 21897                                  	; 25/10/2022
 21898                                  	;pop	ds
 21899                                  
 21900                                  int_0B_end:
 21901                                  	
 21902                                  stkinit_0C:
 21903 0000139E BE3000                  	mov	si,0Ch*4 ; 48
 21904                                  	
 21905                                  	; 14/12/2022
 21906                                  	; 25/10/2022
 21907 000013A1 E8C300                  	call	int_xx_first_check
 21908 000013A4 730C                    	jnc	short int_0C_end ; int_0C_first
 21909                                  
 21910                                  ; 14/12/2022
 21911                                  %if 0	
 21912                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21913                                  	push	ds
 21914                                  	lds	bx,[es:si]
 21915                                  	push	ds
 21916                                  	pop	dx
 21917                                  		
 21918                                  	cmp	dx,0
 21919                                  	je	short int_0C_first
 21920                                  
 21921                                  	cmp	byte [bx],0CFh
 21922                                  	je	short int_0C_first
 21923                                  	
 21924                                  	cmp	word [bx+6],424Bh
 21925                                  	je	short int_0C_not_first
 21926                                  	
 21927                                  	cmp	dx,0F000h
 21928                                  	jne	short int_0C_not_first
 21929                                  
 21930                                  	push	es
 21931                                  	push	dx
 21932                                  	mov	dx,0F000h
 21933                                  	mov	es,dx
 21934                                  	cmp	bx,[es:0FF01h]
 21935                                  	pop	dx
 21936                                  	pop	es
 21937                                  	je	short int_0C_first
 21938                                  %endif
 21939                                  	
 21940                                  int_0C_not_first:
 21941                                  	; 14/12/2022
 21942                                  	; 25/10/2022
 21943                                  	;pop	ds
 21944 000013A6 BF[5306]                	mov	di,INT19OLD0C
 21945 000013A9 BB[8900]                	mov	bx,old0C
 21946 000013AC BA[8700]                	mov	dx,int0C
 21947 000013AF E8E000                  	call	new_init_loop
 21948                                  
 21949                                  	; 14/12/2022
 21950                                  	;jmp	short int_0C_end
 21951                                  ;int_0C_first:
 21952                                  	; 25/10/2022
 21953                                  	;pop	ds
 21954                                  
 21955                                  int_0C_end:
 21956                                  
 21957                                  stkinit_0D:
 21958 000013B2 BE3400                  	mov	si,0Dh*4 ; 52
 21959                                  
 21960                                  	; 14/12/2022	
 21961                                  	; 25/10/2022
 21962 000013B5 E8AF00                  	call	int_xx_first_check
 21963 000013B8 730C                    	jnc	short int_0D_end ; int_0D_first
 21964                                  
 21965                                  ; 14/12/2022
 21966                                  %if 0	
 21967                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21968                                  	push	ds
 21969                                  	lds	bx,[es:si]
 21970                                  	push	ds
 21971                                  	pop	dx
 21972                                  		
 21973                                  	cmp	dx,0
 21974                                  	je	short int_0D_first
 21975                                  
 21976                                  	cmp	byte [bx],0CFh
 21977                                  	je	short int_0D_first
 21978                                  	
 21979                                  	cmp	word [bx+6],424Bh
 21980                                  	je	short int_0D_not_first
 21981                                  	
 21982                                  	cmp	dx,0F000h
 21983                                  	jne	short int_0D_not_first
 21984                                  
 21985                                  	push	es
 21986                                  	push	dx
 21987                                  	mov	dx,0F000h
 21988                                  	mov	es,dx
 21989                                  	cmp	bx,[es:0FF01h]
 21990                                  	pop	dx
 21991                                  	pop	es
 21992                                  	je	short int_0D_first
 21993                                  %endif
 21994                                  	
 21995                                  int_0D_not_first:
 21996                                  	; 14/12/2022
 21997                                  	; 25/10/2022
 21998                                  	;pop	ds
 21999 000013BA BF[5806]                	mov	di,INT19OLD0D
 22000 000013BD BB[A100]                	mov	bx,old0D
 22001 000013C0 BA[9F00]                	mov	dx,int0D
 22002 000013C3 E8CC00                  	call	new_init_loop
 22003                                  
 22004                                  	; 14/12/2022
 22005                                  	;jmp	short int_0D_end
 22006                                  	; 02/11/2022
 22007                                  ;int_0D_first:
 22008                                  	;pop	ds
 22009                                  
 22010                                  int_0D_end:
 22011                                  
 22012                                  stkinit_0E:
 22013 000013C6 BE3800                  	mov	si,0Eh*4 ; 56
 22014                                  
 22015                                  	; 14/12/2022	
 22016                                  	; 25/10/2022
 22017 000013C9 E89B00                  	call	int_xx_first_check
 22018 000013CC 730C                    	jnc	short int_0E_end ; int_0E_first
 22019                                  
 22020                                  ; 14/12/2022
 22021                                  %if 0	
 22022                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22023                                  	push	ds
 22024                                  	lds	bx,[es:si]
 22025                                  	push	ds
 22026                                  	pop	dx
 22027                                  		
 22028                                  	cmp	dx,0
 22029                                  	je	short int_0E_first
 22030                                  
 22031                                  	cmp	byte [bx],0CFh
 22032                                  	je	short int_0E_first
 22033                                  	
 22034                                  	cmp	word [bx+6],424Bh
 22035                                  	je	short int_0E_not_first
 22036                                  	
 22037                                  	cmp	dx,0F000h
 22038                                  	jne	short int_0E_not_first
 22039                                  
 22040                                  	push	es
 22041                                  	push	dx
 22042                                  	mov	dx,0F000h
 22043                                  	mov	es,dx
 22044                                  	cmp	bx,[es:0FF01h]
 22045                                  	pop	dx
 22046                                  	pop	es
 22047                                  	je	short int_0E_first
 22048                                  %endif
 22049                                  	
 22050                                  int_0E_not_first:
 22051                                  	; 14/12/2022
 22052                                  	; 25/10/2022
 22053                                  	;pop	ds
 22054 000013CE BF[5D06]                	mov	di,INT19OLD0E
 22055 000013D1 BB[B900]                	mov	bx,old0E
 22056 000013D4 BA[B700]                	mov	dx,int0E
 22057 000013D7 E8B800                  	call	new_init_loop
 22058                                  
 22059                                  	; 14/12/2022
 22060                                  	;jmp	short int_0E_end
 22061                                  ;int_0E_first:
 22062                                  	; 25/10/2022
 22063                                  	;pop	ds	
 22064                                  
 22065                                  int_0E_end:
 22066                                  
 22067                                  stkinit_72:
 22068 000013DA BEC801                  	mov	si,72h*4 ; 456
 22069                                  	
 22070                                  	; 14/12/2022
 22071                                  	; 25/10/2022
 22072 000013DD E88700                  	call	int_xx_first_check
 22073 000013E0 730C                    	jnc	short int_72_end ; int_72_first
 22074                                  
 22075                                  ; 14/12/2022
 22076                                  %if 0	
 22077                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22078                                  	push	ds
 22079                                  	lds	bx,[es:si]
 22080                                  	push	ds
 22081                                  	pop	dx
 22082                                  		
 22083                                  	cmp	dx,0
 22084                                  	je	short int_72_first
 22085                                  
 22086                                  	cmp	byte [bx],0CFh
 22087                                  	je	short int_72_first
 22088                                  	
 22089                                  	cmp	word [bx+6],424Bh
 22090                                  	je	short int_72_not_first
 22091                                  	
 22092                                  	cmp	dx,0F000h
 22093                                  	jne	short int_72_not_first
 22094                                  
 22095                                  	push	es
 22096                                  	push	dx
 22097                                  	mov	dx,0F000h
 22098                                  	mov	es,dx
 22099                                  	cmp	bx,[es:0FF01h]
 22100                                  	pop	dx
 22101                                  	pop	es
 22102                                  	je	short int_72_first
 22103                                  %endif
 22104                                  	
 22105                                  int_72_not_first:
 22106                                  	; 14/12/2022
 22107                                  	; 25/10/2022
 22108                                  	;pop	ds
 22109 000013E2 BF[6706]                	mov	di,INT19OLD72
 22110 000013E5 BB[D100]                	mov	bx,old72
 22111 000013E8 BA[CF00]                	mov	dx,int72
 22112 000013EB E8A400                  	call	new_init_loop
 22113                                  
 22114                                  	; 14/12/2022
 22115                                  	;jmp	short int_72_end
 22116                                  ;int_72_first:
 22117                                  	; 25/10/2022
 22118                                  	;pop	ds
 22119                                  
 22120                                  int_72_end:
 22121                                  
 22122                                  stkinit_73:
 22123 000013EE BECC01                  	mov	si,73h*4 ; 460
 22124                                  	
 22125                                  	; 14/12/2022
 22126                                  	; 25/10/2022
 22127 000013F1 E87300                  	call	int_xx_first_check
 22128 000013F4 730C                    	jnc	short int_73_end ; int_73_first
 22129                                  
 22130                                  ; 14/12/2022
 22131                                  %if 0	
 22132                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22133                                  	push	ds
 22134                                  	lds	bx,[es:si]
 22135                                  	push	ds
 22136                                  	pop	dx
 22137                                  		
 22138                                  	cmp	dx,0
 22139                                  	je	short int_73_first
 22140                                  
 22141                                  	cmp	byte [bx],0CFh
 22142                                  	je	short int_73_first
 22143                                  	
 22144                                  	cmp	word [bx+6],424Bh
 22145                                  	je	short int_73_not_first
 22146                                  	
 22147                                  	cmp	dx,0F000h
 22148                                  	jne	short int_73_not_first
 22149                                  
 22150                                  	push	es
 22151                                  	push	dx
 22152                                  	mov	dx,0F000h
 22153                                  	mov	es,dx
 22154                                  	cmp	bx,[es:0FF01h]
 22155                                  	pop	dx
 22156                                  	pop	es
 22157                                  	je	short int_73_first
 22158                                  %endif	
 22159                                  	
 22160                                  int_73_not_first:
 22161                                  	; 14/12/2022
 22162                                  	; 25/10/2022
 22163                                  	;pop	ds
 22164 000013F6 BF[6C06]                	mov	di,INT19OLD73
 22165 000013F9 BB[E900]                	mov	bx,old73
 22166 000013FC BA[E700]                	mov	dx,int73
 22167 000013FF E89000                  	call	new_init_loop
 22168                                  
 22169                                  	; 14/12/2022
 22170                                  	;jmp	short int_73_end
 22171                                  ;int_73_first:
 22172                                  	; 25/10/2022
 22173                                  	;pop	ds
 22174                                  
 22175                                  int_73_end:
 22176                                  
 22177                                  stkinit_74:
 22178 00001402 BED001                  	mov	si,74h*4 ; 464
 22179                                  	
 22180                                  	; 14/12/2022
 22181                                  	; 25/10/2022
 22182 00001405 E85F00                  	call	int_xx_first_check
 22183 00001408 730C                    	jnc	short int_74_end ; int_74_first
 22184                                  
 22185                                  ; 14/12/2022
 22186                                  %if 0		
 22187                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22188                                  	push	ds
 22189                                  	lds	bx,[es:si]
 22190                                  	push	ds
 22191                                  	pop	dx
 22192                                  		
 22193                                  	cmp	dx,0
 22194                                  	je	short int_74_first
 22195                                  
 22196                                  	cmp	byte [bx],0CFh
 22197                                  	je	short int_74_first
 22198                                  	
 22199                                  	cmp	word [bx+6],424Bh
 22200                                  	je	short int_74_not_first
 22201                                  	
 22202                                  	cmp	dx,0F000h
 22203                                  	jne	short int_74_not_first
 22204                                  
 22205                                  	push	es
 22206                                  	push	dx
 22207                                  	mov	dx,0F000h
 22208                                  	mov	es,dx
 22209                                  	cmp	bx,[es:0FF01h]
 22210                                  	pop	dx
 22211                                  	pop	es
 22212                                  	je	short int_74_first
 22213                                  %endif
 22214                                  
 22215                                  int_74_not_first:
 22216                                  	; 14/12/2022
 22217                                  	; 25/10/2022
 22218                                  	;pop	ds
 22219 0000140A BF[7106]                	mov	di,INT19OLD74
 22220 0000140D BB[0101]                	mov	bx,old74
 22221 00001410 BA[FF00]                	mov	dx,int74
 22222 00001413 E87C00                  	call	new_init_loop
 22223                                  	
 22224                                  	; 14/12/2022
 22225                                  	;jmp	short int_74_end
 22226                                  ;int_74_first:
 22227                                  	; 25/10/2022
 22228                                  	;pop	ds
 22229                                  
 22230                                  int_74_end:
 22231                                  
 22232                                  stkinit_76:
 22233 00001416 BED801                  	mov	si,76h*4 ; 472
 22234                                  	
 22235                                  	; 14/12/2022
 22236                                  	; 25/10/2022
 22237 00001419 E84B00                  	call	int_xx_first_check
 22238 0000141C 730E                    	jnc	short int_76_end ; int_76_first
 22239                                  
 22240                                  ; 14/12/2022
 22241                                  %if 0	
 22242                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22243                                  	push	ds
 22244                                  	lds	bx,[es:si]
 22245                                  	push	ds
 22246                                  	pop	dx
 22247                                  		
 22248                                  	cmp	dx,0
 22249                                  	je	short int_76_first
 22250                                  
 22251                                  	cmp	byte [bx],0CFh
 22252                                  	je	short int_76_first
 22253                                  	
 22254                                  	cmp	word [bx+6],424Bh
 22255                                  	je	short int_76_not_first
 22256                                  	
 22257                                  	cmp	dx,0F000h
 22258                                  	jne	short int_76_not_first
 22259                                  
 22260                                  	push	es
 22261                                  	push	dx
 22262                                  	mov	dx,0F000h
 22263                                  	mov	es,dx
 22264                                  	cmp	bx,[es:0FF01h]
 22265                                  	pop	dx
 22266                                  	pop	es
 22267                                  	je	short int_76_first
 22268                                  %endif
 22269                                  	
 22270                                  int_76_not_first:
 22271                                  	; 14/12/2022
 22272                                  	; 25/10/2022
 22273                                  	;pop	ds
 22274 0000141E BF[7606]                	mov	di,INT19OLD76
 22275 00001421 BB[1901]                	mov	bx,old76
 22276 00001424 BA[1701]                	mov	dx,int76
 22277 00001427 E86800                  	call	new_init_loop
 22278                                  
 22279                                  	; 14/12/2022
 22280 0000142A EB00                    	jmp	short int_76_end
 22281                                  ;int_76_first:
 22282                                  	; 25/10/2022
 22283                                  	;pop	ds
 22284                                  
 22285                                  int_76_end:
 22286                                  
 22287                                  stkinit_77:
 22288 0000142C BEDC01                  	mov	si,77h*4 ; 476
 22289                                  	
 22290                                  	; 14/12/2022
 22291                                  	; 25/10/2022
 22292 0000142F E83500                  	call	int_xx_first_check
 22293 00001432 730C                    	jnc	short int_77_end ; int_77_first
 22294                                  
 22295                                  ; 14/12/2022
 22296                                  %if 0	
 22297                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22298                                  	push	ds
 22299                                  	lds	bx,[es:si]
 22300                                  	push	ds
 22301                                  	pop	dx
 22302                                  		
 22303                                  	cmp	dx,0
 22304                                  	je	short int_77_first
 22305                                  
 22306                                  	cmp	byte [bx],0CFh
 22307                                  	je	short int_77_first
 22308                                  	
 22309                                  	cmp	word [bx+6],424Bh
 22310                                  	je	short int_77_not_first
 22311                                  	
 22312                                  	cmp	dx,0F000h
 22313                                  	jne	short int_77_not_first
 22314                                  
 22315                                  	push	es
 22316                                  	push	dx
 22317                                  	mov	dx,0F000h
 22318                                  	mov	es,dx
 22319                                  	cmp	bx,[es:0FF01h]
 22320                                  	pop	dx
 22321                                  	pop	es
 22322                                  	je	short int_77_first
 22323                                  %endif
 22324                                  	
 22325                                  int_77_not_first:
 22326                                  	; 14/12/2022
 22327                                  	; 25/10/2022
 22328                                  	;pop	ds
 22329 00001434 BF[7B06]                	mov	di,INT19OLD77
 22330 00001437 BB[3101]                	mov	bx,old77
 22331 0000143A BA[2F01]                	mov	dx,int77
 22332 0000143D E85200                  	call	new_init_loop
 22333                                  
 22334                                  	; 14/12/2022
 22335                                  	;jmp	short int_77_end
 22336                                  ;int_77_first:
 22337                                  	; 25/10/2022
 22338                                  	;pop	ds
 22339                                  
 22340                                  int_77_end:
 22341 00001440 1E                      	push	ds
 22342 00001441 B800F0                  	mov	ax,0F000h		; look at the model byte
 22343 00001444 8ED8                    	mov	ds,ax
 22344 00001446 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 22345 0000144B 1F                      	pop	ds
 22346 0000144C 7504                    	jne	short skip_enablenmis
 22347                                  
 22348 0000144E B027                    	mov	al,27h			; enable convertible nmis
 22349 00001450 E672                    	out	72h,al
 22350                                  
 22351                                  ; 25/10/2022
 22352                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 22353                                  
 22354                                  skip_enablenmis:
 22355 00001452 FB                      	sti
 22356                                  	;;mov	ax,Bios_Data ; 70h
 22357                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 22358                                  	; 21/10/2022
 22359 00001453 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 22360 00001456 8ED8                    	mov	ds,ax
 22361                                  
 22362                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 22363                                  
 22364 00001458 C606[3806]01            	mov	byte [INT19SEM],1	; indicate that int 19h
 22365                                  					; initialization is complete
 22366                                  
 22367 0000145D 5D                      	pop	bp			; restore all
 22368 0000145E 5E                      	pop	si
 22369 0000145F 5F                      	pop	di
 22370 00001460 5A                      	pop	dx
 22371 00001461 59                      	pop	cx
 22372 00001462 5B                      	pop	bx
 22373 00001463 07                      	pop	es
 22374 00001464 1F                      	pop	ds
 22375 00001465 58                      	pop	ax
 22376 00001466 C3                      	retn
 22377                                  
 22378                                  ; 14/12/2022
 22379                                  ; ----------------------------------------------------------------------
 22380                                  
 22381                                  	; 14/12/2022
 22382                                  	; 25/10/2022
 22383                                  ;%if 0
 22384                                  	; 27/03/2019 - Retro DOS v4.0
 22385                                  int_xx_first_check:
 22386 00001467 1E                      	push	ds
 22387 00001468 26C51C                  	lds	bx,[es:si]
 22388 0000146B 1E                      	push	ds
 22389 0000146C 5A                      	pop	dx
 22390                                  		
 22391 0000146D 83FA00                  	cmp	dx,0
 22392 00001470 741E                    	je	short int_xx_first
 22393                                  	
 22394 00001472 803FCF                  	cmp	byte [bx],0CFh
 22395 00001475 7419                    	je	short int_xx_first
 22396                                  	
 22397 00001477 817F064B42              	cmp	word [bx+6],424Bh
 22398 0000147C 7411                    	je	short int_xx_not_first
 22399                                  	
 22400 0000147E 81FA00F0                	cmp	dx,0F000h
 22401 00001482 750B                    	jne	short int_xx_not_first
 22402                                  
 22403 00001484 06                      	push	es
 22404                                  	;push	dx
 22405                                  	;mov	dx,0F000h
 22406 00001485 8EC2                    	mov	es,dx
 22407 00001487 263B1E01FF              	cmp	bx,[es:0FF01h]
 22408                                        	;pop	dx
 22409 0000148C 07                      	pop	es
 22410 0000148D 7401                    	je	short int_xx_first
 22411                                  
 22412                                  int_xx_not_first:
 22413 0000148F F9                      	stc
 22414                                  int_xx_first:
 22415 00001490 1F                      	pop	ds
 22416 00001491 C3                      	retn
 22417                                  
 22418                                  ;%endif
 22419                                  
 22420                                  ; ----------------------------------------------------------------------
 22421                                  ; 27/03/2019 - Retro DOS v4.0
 22422                                  
 22423                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22424                                  ; (SYSINIT:1610h)
 22425                                  
 22426                                  new_init_loop:
 22427                                  
 22428                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 22429                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 22430                                  ;	dx=ds:offset of intxx, the new interrupt handler
 22431                                  ;	di=offset value of int19old&aa variable in bios.
 22432                                  ;	es=zero, segid of vector table
 22433                                  ;	ds=relocated stack code segment
 22434                                  
 22435 00001492 268B04                  	mov	ax,[es:si]		;remember offset in vector
 22436 00001495 8907                    	mov	[bx],ax			; to original owner in ds
 22437 00001497 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 22438 0000149B 894702                  	mov	[bx+2],ax		; to original owner in ds
 22439                                  
 22440 0000149E 1E                      	push	ds
 22441                                  	;;mov	ax,Bios_Data ; 70h
 22442                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 22443                                  	; 21/10/2022
 22444 0000149F B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 22445 000014A2 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 22446 000014A4 268B04                  	mov	ax,[es:si]		;int 19 handler
 22447 000014A7 8905                    	mov	[di],ax
 22448 000014A9 268B4402                	mov	ax,[es:si+2]
 22449 000014AD 894502                  	mov	word [di+2],ax
 22450 000014B0 1F                      	pop	ds
 22451                                  
 22452 000014B1 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 22453 000014B4 268C5C02                	mov	[es:si+2],ds
 22454 000014B8 C3                      	retn
 22455                                  
 22456                                  ; End of STACK initialization routine
 22457                                  ; ----------------------------------------------------------------------
 22458                                  
 22459                                  ; ----------------------------------------------------------------------
 22460                                  ;set the devmark for mem command.
 22461                                  ;in: [memhi] - the address to place devmark
 22462                                  ;    [memlo] = 0
 22463                                  ;    al = id for devmark_id
 22464                                  ;out: devmark established.
 22465                                  ;     the address saved in cs:[devmark_addr]
 22466                                  ;     [memhi] increase by 1.
 22467                                  ; ----------------------------------------------------------------------
 22468                                  
 22469                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22470                                  ; (SYSINIT:1637h)
 22471                                  
 22472                                  setdevmark:
 22473                                  
 22474 000014B9 06                      	push	es
 22475 000014BA 51                      	push	cx
 22476                                  
 22477 000014BB 2E8B0E[6203]            	mov	cx,[cs:memhi]
 22478 000014C0 2E890E[E014]            	mov	[cs:devmark_addr],cx
 22479 000014C5 8EC1                    	mov	es,cx
 22480                                  	; 25/10/2022
 22481                                  	;mov	[es:devmark.id],al
 22482 000014C7 26A20000                	mov	[es:0],al
 22483 000014CB 41                      	inc	cx
 22484                                  	;mov	[es:devmark.seg],cx
 22485 000014CC 26890E0100              	mov	[es:1],cx
 22486                                  
 22487 000014D1 59                      	pop	cx
 22488 000014D2 07                      	pop	es
 22489 000014D3 2EFF06[6203]            	inc	word [cs:memhi]
 22490 000014D8 C3                      	retn
 22491                                  
 22492                                  ; ----------------------------------------------------------------------
 22493                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 22494                                  ; ----------------------------------------------------------------------
 22495                                  ; 27/03/2019 - Retro DOS v4.0
 22496                                  
 22497                                  ;MULTI_CONFIG	equ 1
 22498                                  
 22499                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 22500                                                                          ; allocation strategy call
 22501                                  
 22502                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 22503                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 22504                                  
 22505                                  default_filenum equ 8
 22506                                  
 22507                                  ;stacksw	equ true		; include switchable hardware stacks
 22508                                  
 22509                                  ; external variable defined in ibmbio module for multi-track
 22510                                  
 22511                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 22512                                  					; it on after handling config.sys file as a
 22513                                  					; default value,if multrk_flag = multrk_off1.
 22514                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 22515                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 22516                                  
 22517                                  ; if stacksw
 22518                                  
 22519                                  ; internal stack parameters
 22520                                  
 22521                                  ;entrysize	equ 8
 22522                                  
 22523                                  ;mincount	equ 8
 22524                                  ;defaultcount	equ 9
 22525                                  ;maxcount	equ 64
 22526                                  
 22527                                  ;minsize 	equ 32
 22528                                  ;defaultsize	equ 128
 22529                                  ;maxsize 	equ 512
 22530                                  
 22531                                  DOS_FLAG_OFFSET	equ 86h
 22532                                  
 22533                                  ;ifdef MULTI_CONFIG
 22534                                  ;
 22535                                  ;   config_envlen must immediately precede config_wrkseg, because they
 22536                                  ;   may be loaded as a dword ptr
 22537                                  
 22538                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 22539                                  ; 25/10/2022
 22540 000014D9 0000                    config_envlen:	dw  0  			; when config_wrkseg is being used as
 22541                                                 				;  a scratch env, this is its length
 22542 000014DB 0000                    config_wrkseg:	dw  0			; config work area (above confbot)
 22543                                                     			;  segment of work area
 22544                                  
 22545 000014DD 00                      config_cmd:	db  0  			; current config cmd
 22546                                                   			;  (with CONFIG_OPTION_QUERY bit intact)
 22547 000014DE 00                      config_multi:	db  0                   ; non-zero if multi-config config.sys
 22548                                  
 22549                                  ;endif ; MULTI_CONFIG
 22550                                  
 22551 000014DF 00                      multdeviceflag:	db  0
 22552                                  
 22553 000014E0 0000                    devmark_addr:	dw  0			;segment address for devmark.
 22554                                  
 22555 000014E2 00                      setdevmarkflag: db  0			;flag used for devmark
 22556                                  
 22557                                  ; 30/12/2022
 22558                                  ; 12/12/2022
 22559 000014E3 00                      driver_units:	db  0			;total unitcount for driver
 22560                                  
 22561                                  ; 12/12/2022
 22562                                  ;ems_stub_installed:
 22563                                  ;		db  0
 22564                                  
 22565                                  ; 12/12/2022	
 22566                                  ;align 2
 22567                                  
 22568                                  badparm_ptr:	; label	dword
 22569 000014E4 0000                    badparm_off:	dw  0
 22570 000014E6 0000                    badparm_seg:	dw  0
 22571                                  
 22572                                  ;******************************************************************************
 22573                                  ;take care of config.sys file.
 22574                                  ;system parser data and code.
 22575                                  ;******************************************************************************
 22576                                  
 22577                                  ;*******************************************************************
 22578                                  ; parser options set for msbio sysconf module
 22579                                  ;*******************************************************************
 22580                                  ;
 22581                                  ;**** default assemble swiches definition **************************
 22582                                  
 22583                                  ;farsw	equ 0		; near call expected
 22584                                  ;datesw	equ 0		; check date format
 22585                                  ;timesw	equ 0		; check time format
 22586                                  ;filesw	equ 1		; check file specification
 22587                                  ;capsw	equ 0		; perform caps if specified
 22588                                  ;cmpxsw	equ 0		; check complex list
 22589                                  ;numsw	equ 1		; check numeric value
 22590                                  ;keysw	equ 0		; support keywords
 22591                                  ;swsw	equ 1		; support switches
 22592                                  ;val1sw	equ 1		; support value definition 1
 22593                                  ;val2sw	equ 0		; support value definition 2
 22594                                  ;val3sw	equ 1		; support value definition 3
 22595                                  ;drvsw	equ 1		; support drive only format
 22596                                  ;qussw	equ 0		; support quoted string format
 22597                                  
 22598                                  ; psdata_seg equ cs
 22599                                  
 22600                                  	;.xlist
 22601                                  	;include parse.asm		;together with psdata.inc
 22602                                  	;.list
 22603                                  
 22604                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 22605                                  ; ======================================================================
 22606                                  ; 27/03/2019 - Retro DOS v4.0
 22607                                  
 22608                                  ; 30/03/2019
 22609                                  ; VERSION.INC (MSDOS 6.0) 
 22610                                  ; Set DBCS Blank constant
 22611                                  
 22612                                  ; ifndef DBCS
 22613                                  DB_SPACE EQU 2020h
 22614                                  DB_SP_HI EQU 20h
 22615                                  DB_SP_LO EQU 20h
 22616                                  ; else
 22617                                  
 22618                                  ;*******************************************************************
 22619                                  ; Parser include file
 22620                                  ;*******************************************************************
 22621                                  
 22622                                  ;**** Equation field
 22623                                  ;-------- Character code definition
 22624                                  
 22625                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 22626                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 22627                                  _$P_Period	   equ	"."             ;AN020;
 22628                                  _$P_Slash	   equ	"/"             ;AN020;
 22629                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 22630                                  _$P_Comma	   equ	","             ;AN000;
 22631                                  _$P_Switch	   equ	"/"             ;AN000;
 22632                                  _$P_Keyword	   equ	"="             ;AN000;
 22633                                  _$P_Colon	   equ	":"             ;AN000;
 22634                                  _$P_Plus 	   equ	"+"             ;AN000;
 22635                                  _$P_Minus	   equ	"-"             ;AN000;
 22636                                  _$P_Rparen	   equ	")"             ;AN000;
 22637                                  _$P_Lparen	   equ	"("             ;AN000;
 22638                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 22639                                  _$P_DQuote	   equ	'"'             ;AN000;
 22640                                  _$P_NULL 	   equ	0		;AN000;
 22641                                  _$P_TAB		   equ	9		;AN000;
 22642                                  _$P_CR		   equ	0Dh		;AN000;
 22643                                  _$P_LF		   equ	0Ah		;AN000;
 22644                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 22645                                  
 22646                                  ;-------- Masks
 22647                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 22648                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 22649                                  
 22650                                  ;-------- DOS function call related equs
 22651                                  
 22652                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 22653                                  					; by this call, following information
 22654                                  struc _$P_CDI	
 22655 00000000 ????                     .DateF: resw 1
 22656 00000002 ??????????               .Money: resb 5
 22657 00000007 ????                     .1000:	 resb 2
 22658 00000009 ????                     .Dec:	 resb 2
 22659 0000000B ????                     .DateS: resb 2
 22660 0000000D ????                     .TimeS: resb 2
 22661 0000000F ??                          	 resb 1
 22662 00000010 ??                      	 resb 1
 22663 00000011 ??                       .TimeF: resb 1	 
 22664 00000012 ????????                	 resw 2
 22665 00000016 ????                    	 resb 2
 22666 00000018 <res Ah>                	 resw 5
 22667                                   .size:
 22668                                  endstruc
 22669                                  
 22670                                  _$P_Date_MDY	   equ	0		;AN000;
 22671                                  _$P_Date_DMY	   equ	1		;AN000;
 22672                                  _$P_Date_YMD	   equ	2		;AN000;
 22673                                  ;-------------
 22674                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 22675                                  					;AN000; DS:SI will points to DBCS EV
 22676                                  ;-------------
 22677                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 22678                                  					;AN000; following parameters are set
 22679                                  					;AN000; to get casemap table.
 22680                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 22681                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 22682                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 22683                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 22684                                  					; By this call following information
 22685                                  					; is returned.
 22686                                  struc _$P_DOS_TBL
 22687 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 22688 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 22689 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 22690                                  endstruc
 22691                                  
 22692                                  ; ----------------------------------------------------------------------------
 22693                                  ; PARMS 	LABEL	BYTE
 22694                                  ;		DW	PARMSX
 22695                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 22696                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22697                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 22698                                  ;					; TYPICAL ARE ";", "="
 22699                                  ;					; "," & WHITESPACE ALWAYS
 22700                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22701                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 22702                                  ; ----------------------------------------------------------------------------
 22703                                  
 22704                                  ;-------------------------------- PARMS block structure
 22705                                  struc _$P_PARMS_Blk
 22706 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 22707 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 22708 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 22709                                  endstruc
 22710                                  
 22711                                  _$P_Len_PARMS	   equ	4		;AN000;
 22712                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 22713                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 22714                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 22715                                  
 22716                                  ; ----------------------------------------------------------------------------
 22717                                  ; PARMSX	LABEL	BYTE
 22718                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 22719                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 22720                                  ;		:			; REPEATS maxp-1 TIMES
 22721                                  ;		DB	maxs		; # OF SWITCHES
 22722                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 22723                                  ;		:			; REPEATS maxs-1 TIMES
 22724                                  ;		DB	maxk		; # OF KEYWORD
 22725                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 22726                                  ;		:			; REPEATS maxk-1 TIMES
 22727                                  ; ----------------------------------------------------------------------------
 22728                                  
 22729                                  ;-------------------------------- PARMSX block structure
 22730                                  struc _$P_PARMSX_Blk		;AN000;
 22731 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 22732 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 22733 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 22734                                  endstruc
 22735                                  
 22736                                  ; ----------------------------------------------------------------------------
 22737                                  ; << Control field definition  >>
 22738                                  ;
 22739                                  ;
 22740                                  ;CONTROL   LABEL   BYTE
 22741                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 22742                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 22743                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 22744                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 22745                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 22746                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 22747                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 22748                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 22749                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 22750                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 22751                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 22752                                  ;				   ; 0002H=REPEATS ALLOWED
 22753                                  ;				   ; 0001H=OPTIONAL
 22754                                  ;	   DW	   FUNCTION_FLAGS
 22755                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 22756                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 22757                                  ;				   ; 0010H=REMOVE ":" AT END
 22758                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 22759                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 22760                                  ;	   DW	   VALUES	   ; VALUE LISTS
 22761                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 22762                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 22763                                  ;	   :
 22764                                  ;
 22765                                  ;Note:
 22766                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 22767                                  ;      DATE bit simalteniously.
 22768                                  ;
 22769                                  ;      The parser examins each bit along with the following priority.
 22770                                  ;
 22771                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 22772                                  ;      FILE SPEC -> SIMPLE STRING.
 22773                                  ;
 22774                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 22775                                  ;      in the result buffer is capitalized.
 22776                                  ;
 22777                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 22778                                  ;
 22779                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 22780                                  ;      switch, for example, '/A', then STRING points to;
 22781                                  ;
 22782                                  ;			DB    1 	; number of following synonyms
 22783                                  ;			DB   '/A',0
 22784                                  ;
 22785                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 22786                                  ;
 22787                                  ;			DB    1 	; number of following synonyms
 22788                                  ;			DB   'CODEPAGE=',0
 22789                                  ;
 22790                                  ;    - "..." must consist of upper case characters only because the parser
 22791                                  ;      performs pattern matching after converting input to upper case (by
 22792                                  ;      using the current country upper case table)
 22793                                  ;
 22794                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 22795                                  ;      example /A and /B, the format will be;
 22796                                  ;
 22797                                  ;			DB    2 	; number of following synonyms
 22798                                  ;			DB    '/A',0
 22799                                  ;			DB    '/B',0
 22800                                  ; ----------------------------------------------------------------------------
 22801                                  
 22802                                  ;**** Match_Flags
 22803                                  
 22804                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 22805                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 22806                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 22807                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 22808                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 22809                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 22810                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 22811                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 22812                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 22813                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 22814                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 22815                                  _$P_Optional	   equ	0001h		;AN000; Optional
 22816                                  
 22817                                  ;**** Function flags
 22818                                  
 22819                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 22820                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 22821                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 22822                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 22823                                  
 22824                                  ;-------------------------------- Control block structure
 22825                                  struc _$P_Control_Blk
 22826 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 22827 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 22828 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 22829 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 22830 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 22831 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 22832                                  endstruc
 22833                                  
 22834                                  ; ----------------------------------------------------------------------------
 22835                                  ; << Value List Definition >>
 22836                                  ;
 22837                                  ;VALUES 	LABEL	BYTE
 22838                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 22839                                  ;	     +-
 22840                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 22841                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 22842                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 22843                                  ;	     |	:
 22844                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 22845                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 22846                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 22847                                  ;	     |	:
 22848                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 22849                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 22850                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 22851                                  ;	     +-	:
 22852                                  ;
 22853                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 22854                                  ;
 22855                                  ;Note:
 22856                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 22857                                  ;      when no choice lists are provided.
 22858                                  ;
 22859                                  ;    - STRING must consist of upper case characters only because the parser
 22860                                  ;      performs pattern matching after converting input to upper case (by
 22861                                  ;      using the current country upper case table)
 22862                                  ; ----------------------------------------------------------------------------
 22863                                  
 22864                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 22865                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 22866                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 22867                                  _$P_nval_String	   equ	3		;AN000; string list ID
 22868                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 22869                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 22870                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 22871                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 22872                                  
 22873                                  struc _$P_Val_List
 22874 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 22875 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 22876 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 22877 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 22878 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 22879                                  endstruc
 22880                                  
 22881                                  ; ----------------------------------------------------------------------------
 22882                                  ; << Result Buffer Definition  >>
 22883                                  ;
 22884                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 22885                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 22886                                  ;						;	1=NUMBER, 2=LIST INDEX,
 22887                                  ;						;	3=STRING, 4=COMPLEX,
 22888                                  ;						;	5=FILESPEC, 6=DRIVE
 22889                                  ;						;	7=DATE, 8=TIME
 22890                                  ;						;	9=QUOTED STRING
 22891                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 22892                                  ;
 22893                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 22894                                  ;
 22895                                  ;            +-
 22896                                  ;	    | DD	n			; VALUE IF NUMBER
 22897                                  ;	    | or
 22898                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 22899                                  ;	    |					; (ES presents Segment address)
 22900                                  ;	    | or
 22901                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 22902                                  ;	    | or
 22903                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 22904                                  ;	    | or
 22905                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 22906                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 22907                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 22908                                  ;	    | or
 22909                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 22910                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 22911                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 22912                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 22913                                  ;	    +-
 22914                                  ;
 22915                                  ;
 22916                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 22917                                  ;      list.
 22918                                  ;
 22919                                  ;      YEAR: If the input value for the year is less than 100, parser
 22920                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 22921                                  ;	     the year value, he returns 1987.
 22922                                  ; ----------------------------------------------------------------------------
 22923                                  
 22924                                  ;-------------------------------- Result block structure
 22925                                  struc _$P_Result_Blk
 22926 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 22927 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 22928 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 22929 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 22930                                  endstruc
 22931                                  
 22932                                  ;--------------------------------
 22933                                  ;**** values for the type field in the result block
 22934                                  
 22935                                  _$P_EOL		   equ	0		;AN000; End of line
 22936                                  _$P_Number	   equ	1		;AN000; Number
 22937                                  _$P_List_Idx	   equ	2		;AN000; List Index
 22938                                  _$P_String	   equ	3		;AN000; String
 22939                                  _$P_Complex	   equ	4		;AN000; Complex
 22940                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 22941                                  _$P_Drive	   equ	6		;AN000; Drive
 22942                                  _$P_Date_F	   equ	7		;AN000; Date
 22943                                  _$P_Time_F	   equ	8		;AN000; Time
 22944                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 22945                                  
 22946                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 22947                                  
 22948                                  ;**** Return code
 22949                                  ;
 22950                                  ; following return code will be returned in the AX register.
 22951                                  
 22952                                  _$P_No_Error	   equ	0		;AN000; No error
 22953                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 22954                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 22955                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 22956                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 22957                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 22958                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 22959                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 22960                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 22961                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 22962                                  
 22963                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 22964                                  
 22965                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 22966                                  
 22967                                  ;********************** Local Data *************************************
 22968 000014E8 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 22969 000014EA 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 22970 000014EC 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 22971 000014EE 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 22972 000014F0 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 22973 000014F1 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 22974 000014F3 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 22975 000014F5 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 22976                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 22977                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 22978                                  
 22979                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 22980                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 22981                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 22982                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 22983                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 22984                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 22985                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 22986                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 22987                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 22988                                  
 22989                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 22990                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 22991                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 22992                                  
 22993 000014F7 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 22994 000014F9 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 22995 000014FB 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 22996 000014FD 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 22997                                  
 22998 000014FF 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 22999                                  _$P_STRING_BUF_END equ	$		;AN000;
 23000                                  
 23001                                  ; 25/10/2022
 23002                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 23003                                  
 23004 0000157F FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 23005 00001580 0000                    		   dw	0		;AN000; offset	of char case map table
 23006 00001582 0000                    		   dw	0		;AN000; segment of char case map table
 23007                                  ; 25/10/2022
 23008                                  ;IF CAPSW
 23009                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 23010                                  ;		   dw	0		;AN000; offset	of file case map table
 23011                                  ;		   dw	0		;AN000; segment of file case map table
 23012                                  ;ENDIF
 23013                                  
 23014                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 23015                                  ;
 23016                                  
 23017                                  ;M029
 23018                                  ;!!!WARNING!!!
 23019                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 23020                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 23021                                  ;changes need to be made in SYSPARSE
 23022                                  
 23023                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 23024                                  
 23025                                  ; 25/10/2022
 23026                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 23027                                  
 23028 00001584 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 23029                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 23030                                  
 23031                                  ;ENDIF					;AN000;(of FileSW)
 23032                                  
 23033                                  ; delimiter parsing
 23034                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 23035                                  _$P_period_only	   equ	02h		;AN032; check only for period
 23036                                  
 23037                                  ;filespec error flag
 23038 0000158D 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 23039                                  					;AN033;  was detected.
 23040                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 23041                                  
 23042                                  
 23043                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 23044                                  ; ======================================================================
 23045                                  ; 27/03/2019 - Retro DOS v4.0
 23046                                  
 23047                                  ;***********************************************************************
 23048                                  ; SysParse;
 23049                                  ;
 23050                                  ;  Function : Parser Entry
 23051                                  ;
 23052                                  ;  Input: DS:SI -> command line
 23053                                  ;	  ES:DI -> parameter block
 23054                                  ;	  cs -> psdata.inc
 23055                                  ;	  CX = operand ordinal
 23056                                  ;
 23057                                  ;	  Note:  ES is the segment containing all the control blocks defined
 23058                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 23059                                  ;		 is in DS.
 23060                                  ;
 23061                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 23062                                  ;		    invalid value list. But this parser does NOT implement
 23063                                  ;		    this feature. Therefore CY always zero.
 23064                                  ;
 23065                                  ;	   CY = 0   AX = return code
 23066                                  ;		    BL = terminated delimiter code
 23067                                  ;		    CX = new operand ordinal
 23068                                  ;		    SI = set past scaned operand
 23069                                  ;		    DX = selected result buffer
 23070                                  ;
 23071                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 23072                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 23073                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 23074                                  ;
 23075                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 23076                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 23077                                  ;
 23078                                  ;-------- Modification History -----------------------------------------
 23079                                  ;
 23080                                  ;  4/04/87 : Created by K. K,
 23081                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 23082                                  ;	   : JMP SHORT assemble error (tm02)
 23083                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 23084                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 23085                                  ;	     DateSW equ 1)	      (tm04)
 23086                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 23087                                  ;				      (tm05) in PSDATA.INC
 23088                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 23089                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 23090                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 23091                                  ;	     value-list block	      (tm07)
 23092                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 23093                                  ;	     switch (keyword) or not. If there is, backup si for next call
 23094                                  ;	     (tm08)
 23095                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 23096                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 23097                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 23098                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 23099                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 23100                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 23101                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 23102                                  ;					  (tm12)
 23103                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 23104                                  ;					  (tm13)
 23105                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 23106                                  ;					  (tm14)
 23107                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 23108                                  ;					  (tm15)
 23109                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 23110                                  
 23111                                  ;  7/24/87 : Quoted strings being returned with quotes.
 23112                                  
 23113                                  ;  7/28/87 : Kerry S (;AN018;)
 23114                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 23115                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 23116                                  ;	     affected: _$P_Chk_SW_Control.
 23117                                  
 23118                                  ;  7/29/87 : Kerry S (;AN019;)
 23119                                  ;	     Now allow the optional bit in match flags for switches.  This
 23120                                  ;	     allows the switch to be encountered with a value or without a
 23121                                  ;	     value and no error is returned.
 23122                                  ;
 23123                                  
 23124                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 23125                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 23126                                  ;	     within a date response, instead of checking just for the one
 23127                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 23128                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 23129                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 23130                                  
 23131                                  ;  9/1/87  : Kerry S (;AN021)
 23132                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 23133                                  ;	     the command line with the string in the control block the
 23134                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 23135                                  ;	     on the command line and assuming a match.	This allowed a shorter
 23136                                  ;	     string on the command line than in the synonym list in the control
 23137                                  ;	     block.  I put in a test for a null in the control block so the
 23138                                  ;	     string in the control block must be the same length as the string
 23139                                  ;	     preceeding the colon or equal on the command line.
 23140                                  
 23141                                  ;  8/28/87 : Kerry S (;AN022;)
 23142                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 23143                                  ;	     problems for people who included it themselves in a segment other
 23144                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 23145                                  ;	     segment.
 23146                                  
 23147                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 23148                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 23149                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 23150                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 23151                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 23152                                  ;	     BL be used if TIME is being parsed.
 23153                                  
 23154                                  ;  9/24/87 : Ed K
 23155                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 23156                                  ;	     invocations with their normally expanded code; made comments
 23157                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 23158                                  
 23159                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 23160                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 23161                                  ;	     pointed to by non-existant CONTROL.
 23162                                  
 23163                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 23164                                  ;	     A quoted text string can be framed only by double quote.  Remove
 23165                                  ;	     support to frame quoted text string with single quote.
 23166                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 23167                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 23168                                  ;	     single quote in PROC prologues are left as is for history reasons.
 23169                                  
 23170                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 23171                                  ;	     quote chars within a quoted string is supposed to be reported as
 23172                                  ;	     one quote character, but is reported as two quotes.  This changed
 23173                                  ;	     two instructions in PROC _$P_Quoted_Str.
 23174                                  
 23175                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 23176                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 23177                                  
 23178                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 23179                                  
 23180                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 23181                                  ;	     psdata buffer should have cs.
 23182                                  
 23183                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 23184                                  ;	     positional missing.
 23185                                  
 23186                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 23187                                  ;	     as a line delimiter, should use carriage return.
 23188                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 23189                                  
 23190                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 23191                                  
 23192                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 23193                                  ;	     endless loop since SI is returned still pointing to start
 23194                                  ;	     of that parm.
 23195                                  
 23196                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 23197                                  ;	     Vector to returned string has CS instead of cs, but
 23198                                  ;	     when tried to fix it on previous version, changed similar
 23199                                  ;	     but wrong place.
 23200                                  
 23201                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 23202                                  ;	     delimiters between hours, minutes, seconds for time. And period
 23203                                  ;	     and comma are valid delimiters between seconds and 100th second.
 23204                                  
 23205                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 23206                                  ;	     in a filespec, then flag an error.
 23207                                  
 23208                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 23209                                  ;	     indexed off of the cs equate instead of the DS register.
 23210                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 23211                                  ;  -->	     local parser data. Why were some references to local data changed
 23212                                  ;	     to do this before, but not all ?????
 23213                                  
 23214                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 23215                                  
 23216                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 23217                                  ;
 23218                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 23219                                  
 23220                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 23221                                  
 23222                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 23223                                  ;	     separator in TIME before hundredths field.
 23224                                  ;
 23225                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 23226                                  ;			strings as keywords.
 23227                                  ;
 23228                                  ;***********************************************************************
 23229                                  
 23230                                  ;IF FarSW				;AN000;(Check if need far return)
 23231                                  ;SysParse proc far			;AN000;
 23232                                  ;ELSE					;AN000;
 23233                                  ;SysParse proc near			;AN000;
 23234                                  ;ENDIF					;AN000;(of FarSW)
 23235                                  
 23236                                  ; 27/03/2019 - Retro DOS v4.0
 23237                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 23238                                  
 23239                                  ; 25/10/2022 - Retro DOS v4.0
 23240                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 23241                                  
 23242                                  SysParse:
 23243 0000158E 2EC706[F514]0000        	mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 23244 00001595 FC                      	cld				;AN000; confirm forward direction
 23245 00001596 2E890E[E814]            	mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 23246 0000159B 2EC706[EA14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 23247 000015A2 2EC706[FD14]0000        	mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 23248                                  
 23249 000015A9 2EC706[EE14]0000        	mov	word [cs:_$P_DX],0	;AC034; (tm15)
 23250                                  
 23251                                  ;M029 -- Begin changes
 23252                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 23253                                  ;entry to SysParse. This is in the non-checksum region and any program that
 23254                                  ;corrupts this table but does not corrupt the checksum region will leave
 23255                                  ;command.com parsing in an inconsistent state.
 23256                                  ; NB: The special characters string has been hardcoded here. If any change
 23257                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 23258                                  
 23259                                  ;IF FileSW + DrvSW
 23260 000015B0 2EC706[8415]5D5B        	mov	word [cs:_$P_FileSp_Char], ']['
 23261 000015B7 2EC706[8615]3C7C        	mov	word [cs:_$P_FileSp_Char+2], '<|'
 23262 000015BE 2EC706[8815]2B3E        	mov	word [cs:_$P_FileSp_Char+4], '+>'
 23263 000015C5 2EC706[8A15]3B3D        	mov 	word [cs:_$P_FileSp_Char+6], ';='
 23264                                  ;ENDIF
 23265                                  
 23266                                  ;M029 -- End of changes
 23267                                  
 23268 000015CC E89606                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 23269 000015CF 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 23270                                  ;--------------------------- End of Line
 23271 000015D1 B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 23272 000015D4 53                      	push	bx			;AN000;
 23273                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 23274                                  					;AN000; Get the PARMSX address to
 23275 000015D5 268B1D                  	mov	bx,[es:di]
 23276                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 23277                                  					;AN000; check ORDINAL to see if the minimum
 23278 000015D8 263A0F                  	cmp	cl,[es:bx]	
 23279 000015DB 7303                    	jae	short _$P_Fin		;AN000; positional found.
 23280                                  
 23281 000015DD B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 23282                                  _$P_Fin: 				;AN000;
 23283 000015E0 5B                      	pop	bx			;AN000;
 23284 000015E1 E91F01                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 23285                                  ;---------------------------
 23286                                  _$P_Start:				;AN000;
 23287 000015E4 2E8936[F714]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 23288 000015E9 53                      	push	bx			;AN000; quoted string or file spec.
 23289 000015EA 57                      	push	di			;AN000;
 23290 000015EB 55                      	push	bp			;AN000;
 23291                                  	;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 23292                                  	; 02/11/2022
 23293 000015EC 8D1E[FF14]              	lea	bx,[_$P_STRING_BUF]
 23294 000015F0 2EF606[F614]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 23295 000015F6 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 23296                                  
 23297                                  _$P_Pack_Loop:				;AN000;
 23298 000015F8 AC                      	lodsb				;AN000; Pick a operand from buffer
 23299 000015F9 E80E07                  	call	_$P_Chk_Switch		;AN000; Check switch character
 23300 000015FC 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 23301                                  
 23302 000015FE E88606                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 23303 00001601 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 23304                                  
 23305 00001603 E8B606                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 23306 00001606 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 23307                                  
 23308 00001608 2EF606[F614]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 23309                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 23310 0000160E 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 23311                                  
 23312 00001610 E85206                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 23313 00001613 EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 23314                                  
 23315                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 23316 00001615 2EF606[F614]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 23317 0000161B 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 23318                                  
 23319 0000161D 4E                      	dec	si			;AN000; (tm08)
 23320 0000161E EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 23321                                  
 23322                                  _$P_PL01:				;AN000;
 23323 00001620 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 23324 00001623 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 23325 00001625 7506                    	jne	short _$P_PL00 		;AN000; then
 23326                                  
 23327 00001627 2E800E[F614]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 23328                                  _$P_PL00:				;AN000;
 23329 0000162D 43                      	inc	bx			;AN000; ready to see next byte
 23330 0000162E E8F206                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 23331 00001631 73C5                    	jnc	_$P_Pack_Loop		;AN000; if no, process to next byte
 23332                                  
 23333 00001633 AC                      	lodsb				;AN000; if yes, store
 23334 00001634 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 23335 00001637 43                      	inc	bx			;AN000; update pointer
 23336 00001638 EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 23337                                  
 23338                                  _$P_Pack_End_BY_EOL:			;AN000;
 23339 0000163A 4E                      	dec	si			;AN000; backup si pointer
 23340                                  _$P_Pack_End:				;AN000;
 23341 0000163B 2E8936[EC14]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 23342 00001640 2EC60700                	mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 23343 00001644 2E891E[FB14]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 23344                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 23345 00001649 268B1D                  	mov	bx,[es:di]
 23346                                  	;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 23347                                  	; 02/11/2022
 23348 0000164C 8D36[FF14]              	lea	si,[_$P_STRING_BUF]
 23349 00001650 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 23350 00001654 7436                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 23351                                  
 23352 00001656 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 23353 0000165A 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 23354                                  
 23355 0000165C 2EF606[F614]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 23356 00001662 7552                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 23357                                  
 23358                                  _$P_Positional_Manager:			;AN000; else process as positional
 23359 00001664 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23360 00001668 30E4                    	xor	ah,ah			;AN000; ax = maxp
 23361 0000166A 2E3906[E814]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 23362 0000166F 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 23363                                  
 23364 00001671 2EA1[E814]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 23365 00001675 D1E0                    	shl	ax,1			;AN000; ax = ax*2
 23366 00001677 43                      	inc	bx			;AC035; add '2' to
 23367 00001678 43                      	inc	bx			;AC035;  BX reg
 23368                                  					;AN000; now bx points to 1st CONTROL
 23369 00001679 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 23370 0000167B 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 23371 0000167E E88400                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 23372 00001681 EB65                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 23373                                  
 23374                                  _$P_Too_Many_Error:			;AN000;
 23375 00001683 2EC706[EA14]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 23376 0000168A EB5C                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 23377                                  
 23378                                  _$P_SW_Manager:				;AN000;
 23379 0000168C 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23380 00001690 30E4                    	xor	ah,ah			;AN000; ax = maxp
 23381 00001692 40                      	inc	ax			;AN000;
 23382 00001693 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 23383 00001695 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 23384 00001697 268A0F                  	mov	cl,[es:bx]		;AN000;
 23385 0000169A 30ED                    	xor	ch,ch			;AN000; cx = maxs
 23386                                  	;or	cx,cx			;AN000; at least one switch ?
 23387                                  	;jz	short _$P_SW_Not_Found 	;AN000;
 23388                                  	; 07/07/2023
 23389 0000169C E30F                    	jcxz	_$P_SW_Not_Found	; no
 23390                                  
 23391 0000169E 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 23392                                  
 23393                                  _$P_SW_Mgr_Loop: 			;AN000;
 23394 0000169F 53                      	push	bx			;AN000;
 23395 000016A0 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 23396 000016A3 E8BF00                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 23397 000016A6 5B                      	pop	bx			;AN000;
 23398 000016A7 733F                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 23399                                  
 23400 000016A9 43                      	inc	bx			;AC035; add '2' to
 23401 000016AA 43                      	inc	bx			;AC035;  BX reg
 23402                                  					;AN000; else bx points to the next CONTROL
 23403 000016AB E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 23404                                  
 23405                                  _$P_SW_Not_Found:			;AN000;
 23406 000016AD 2EC706[EA14]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 23407 000016B4 EB32                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 23408                                  
 23409                                  _$P_Key_Manager: 			;AN000;
 23410 000016B6 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23411 000016BA 30E4                    	xor	ah,ah			;AN000; ax = maxp
 23412 000016BC 40                      	inc	ax			;AN000;
 23413 000016BD D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 23414 000016BF 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 23415 000016C1 268A07                  	mov	al,[es:bx]		;AN000;
 23416 000016C4 30E4                    	xor	ah,ah			;AN000; ax = maxs
 23417 000016C6 D1E0                    	shl	ax,1			;AN000;
 23418 000016C8 40                      	inc	ax			;AN000; ax = ax*2+1
 23419 000016C9 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 23420 000016CB 268A0F                  	mov	cl,[es:bx]		;AN000;
 23421 000016CE 30ED                    	xor	ch,ch			;AN000; cx = maxk
 23422                                  	;or	cx,cx			;AN000; at least one keyword ?
 23423                                  	;jz	short _$P_Key_Not_Found	;AN000;
 23424                                  	; 07/07/2023
 23425 000016D0 E30F                    	jcxz	_$P_Key_Not_Found	; no
 23426                                  
 23427 000016D2 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 23428                                  
 23429                                  _$P_Key_Mgr_Loop:			;AN000;
 23430 000016D3 53                      	push	bx			;AN000;
 23431 000016D4 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 23432 000016D7 E85A00                  	call	_$P_Chk_Key_Control	;AN000; do process for keyword
 23433 000016DA 5B                      	pop	bx			;AN000;
 23434 000016DB 730B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 23435                                  
 23436 000016DD 43                      	inc	bx			;AC035; add '2' to
 23437 000016DE 43                      	inc	bx			;AC035;  BX reg
 23438                                  					;AN000; else bx points to the next CONTROL
 23439 000016DF E2F2                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 23440                                  
 23441                                  _$P_Key_Not_Found:			;AN000;
 23442 000016E1 2EC706[EA14]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 23443                                  _$P_Return_to_Caller:			;AN000;
 23444 000016E8 5D                      	pop	bp			;AN000;
 23445 000016E9 5F                      	pop	di			;AN000;
 23446 000016EA 5B                      	pop	bx			;AN000;
 23447 000016EB 2E8B0E[E814]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 23448 000016F0 2EA1[EA14]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 23449 000016F4 2E8B36[EC14]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 23450 000016F9 2E8B16[EE14]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 23451 000016FE 2E8A1E[F014]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 23452                                  _$P_Single_Exit: 			;AN000;
 23453 00001703 F8                      	clc				;AN000;
 23454 00001704 C3                      	retn				;AN000;
 23455                                  
 23456                                  ;***********************************************************************
 23457                                  ; _$P_Chk_Pos_Control
 23458                                  ;
 23459                                  ; Function: Parse CONTROL block for a positional
 23460                                  ;
 23461                                  ; Input:     ES:BX -> CONTROL block
 23462                                  ;	     cs:SI -> _$P_STRING_BUF
 23463                                  ;
 23464                                  ; Output:    None
 23465                                  ;
 23466                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 23467                                  ;
 23468                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 23469                                  ;***********************************************************************
 23470                                  
 23471                                  _$P_Chk_Pos_Control:
 23472 00001705 50                      	push	ax			;AN000;
 23473                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 23474 00001706 268B07                  	mov	ax,[es:bx]
 23475                                  	; 12/12/2022
 23476 00001709 A802                    	test	al,_$P_Repeat
 23477                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 23478 0000170B 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 23479                                  
 23480 0000170D 2EFF06[E814]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 23481                                  _$P_CPC00:				;AN000;
 23482 00001712 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 23483 00001716 7517                    	jne	short _$P_CPC01		;AN000;
 23484                                  
 23485                                  	; 12/12/2022
 23486 00001718 A801                    	test	al,_$P_Optional
 23487                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 23488 0000171A 7509                    	jnz	short _$P_CPC02		;AN000;
 23489                                  
 23490 0000171C 2EC706[EA14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 23491 00001723 EB0D                    	jmp	short _$P_CPC_Exit	;AN000;
 23492                                  
 23493                                  _$P_CPC02:				;AN000;
 23494 00001725 50                      	push	ax			;AN000;
 23495                                  	;mov	al,_$P_String		;AN000; if it is optional return NULL
 23496                                  	;mov	ah,_$P_No_Tag		;AN000; no item tag indication
 23497                                  	; 07/07/2023
 23498 00001726 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23499 00001729 E89800                  	call	_$P_Fill_Result		;AN000;
 23500 0000172C 58                      	pop	ax			;AN000;
 23501 0000172D EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 23502                                  
 23503                                  _$P_CPC01:				;AN000;
 23504 0000172F E81701                  	call	_$P_Check_Match_Flags	;AN000;
 23505                                  _$P_CPC_Exit:				;AN000;
 23506 00001732 58                      	pop	ax			;AN000;
 23507 00001733 C3                      	retn				;AN000;
 23508                                  
 23509                                  ;***********************************************************************
 23510                                  ; _$P_Chk_Key_Control
 23511                                  ;
 23512                                  ; Function: Parse CONTROL block for a keyword
 23513                                  ;
 23514                                  ; Input:     ES:BX -> CONTROL block
 23515                                  ;	     cs:SI -> _$P_STRING_BUF
 23516                                  ;
 23517                                  ; Output:    CY = 1 : not match
 23518                                  ;
 23519                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 23520                                  ;
 23521                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 23522                                  ;***********************************************************************
 23523                                  
 23524                                  _$P_Chk_Key_Control:
 23525 00001734 F9                      	stc				;AN000; this logic works when the KeySW
 23526 00001735 C3                      	retn				;AN000; is reset.
 23527                                  
 23528                                  ;***********************************************************************
 23529                                  ; _$P_Search_KEYorSW:
 23530                                  ;
 23531                                  ; Function: Seach specified keyword or switch from CONTROL
 23532                                  ;
 23533                                  ; Input:     ES:BX -> CONTROL block
 23534                                  ;	     cs:SI -> _$P_STRING_BUF
 23535                                  ;
 23536                                  ; Output:    CY = 1 : not match
 23537                                  ;
 23538                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 23539                                  ;***********************************************************************
 23540                                  
 23541                                  	; 25/10/2022 - Retro DOS v4.0
 23542                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 23543                                  
 23544                                  _$P_Search_KEYorSW:			;AN000;
 23545 00001736 55                      	push	bp			;AN000;
 23546 00001737 51                      	push	cx			;AN000;
 23547 00001738 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 23548 0000173C 30ED                    	xor	ch,ch			;AN000; and set it to cx
 23549                                  	;or	cx,cx			;AN000; No synonyms specified ?
 23550                                  	;jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 23551                                  	; 07/07/2023
 23552 0000173E E30D                    	jcxz	_$P_KEYorSW_Not_Found
 23553                                  
 23554                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 23555                                  	; 25/10/2022
 23556 00001740 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 23557                                  	;lea	bp,[bx+9]
 23558                                  _$P_KEYorSW_Loop:			;AN000;
 23559 00001743 E8BB03                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 23560 00001746 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 23561                                  
 23562 00001748 E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 23563 0000174B E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 23564                                  _$P_KEYorSW_Not_Found:			;AN000;
 23565 0000174D F9                      	stc				;AN000; indicate not found in synonym list
 23566 0000174E EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 23567                                  
 23568                                  _$P_KEYorSW_Found:			;AN000;
 23569 00001750 2E892E[FD14]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 23570 00001755 F8                      	clc				;AN000; indicate found
 23571                                  _$P_KEYorSW_Exit:			;AN000;
 23572 00001756 59                      	pop	cx			;AN000;
 23573 00001757 5D                      	pop	bp			;AN000;
 23574 00001758 C3                      	retn				;AN000;
 23575                                   
 23576                                  ;***********************************************************************
 23577                                  ; _$P_MoveBP_NUL
 23578                                  ;***********************************************************************
 23579                                  
 23580                                  _$P_MoveBP_NUL:
 23581                                  _$P_MBP_Loop:				;AN000;
 23582                                  	; 11/12/2022
 23583 00001759 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 23584                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 23585                                  	; (SYSINIT:18DBh)
 23586                                   	;cmp     byte [es:bp+0],0
 23587 0000175E 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 23588                                  
 23589 00001760 45                      	inc	bp			;AN000; until
 23590 00001761 EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 23591                                  
 23592                                  _$P_MBP_Exit:				;AN000;
 23593 00001763 45                      	inc	bp			;AN000; bp points to next to NULL
 23594 00001764 C3                      	retn				;AN000;
 23595                                  
 23596                                  ;***********************************************************************
 23597                                  ; _$P_Chk_SW_Control
 23598                                  ;
 23599                                  ; Function: Parse CONTROL block for a switch
 23600                                  ;
 23601                                  ; Input:     ES:BX -> CONTROL block
 23602                                  ;	     cs:SI -> _$P_STRING_BUF
 23603                                  ;
 23604                                  ; Output:    CY = 1 : not match
 23605                                  ;
 23606                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 23607                                  ;
 23608                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 23609                                  ;***********************************************************************
 23610                                  
 23611                                  _$P_Chk_SW_Control:
 23612                                  
 23613                                  ;IF SwSW				;AN000;(Check if switch is supported)
 23614                                  	;or	byte [cs:_$P_Flags+1],10h
 23615 00001765 2E800E[F614]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 23616 0000176B E8C8FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 23617 0000176E 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 23618                                  
 23619                                  	;and	[cs:_$P_Flags+],0EFh
 23620 00001770 2E8026[F614]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 23621                                  					;AC034; reset the indicator previously set
 23622 00001776 50                      	push	ax			;AN000; 	      /switch:
 23623 00001777 2EA1[F914]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 23624 0000177B 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 23625 0000177D 2E0106[F714]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 23626 00001782 58                      	pop	ax			;AN000;
 23627                                  
 23628 00001783 2E8B36[F914]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 23629 00001788 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 23630 0000178C 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 23631                                  
 23632 0000178E 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 23633 00001793 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 23634                                  
 23635 00001795 2EC706[EA14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 23636 0000179C EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 23637                                  
 23638                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 23639                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 23640 0000179E 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 23641 000017A2 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 23642                                  
 23643                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 23644                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 23645                                  	;test	word [es:bx],1
 23646                                  	; 12/12/2022
 23647                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 23648 000017A4 26F60701                	test	byte [es:bx],_$P_Optional
 23649 000017A8 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 23650                                  
 23651 000017AA 2EC706[EA14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 23652 000017B1 EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 23653                                  
 23654                                  _$P_CSW00:				;AN000;
 23655 000017B3 E89300                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 23656 000017B6 F8                      	clc				;AN000; indicate match
 23657                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 23658                                  	; 12/12/2022
 23659 000017B7 C3                      	retn
 23660                                  
 23661                                  _$P_Chk_SW_Err0: 			;AN000;
 23662 000017B8 F9                      	stc				;AN000; not found in switch synonym list
 23663                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 23664                                  	; 12/12/2022
 23665 000017B9 C3                      	retn	
 23666                                  
 23667                                  _$P_Chk_SW_Exit: 			;AN000;
 23668 000017BA 50                      	push	ax			;AN000;
 23669                                  	;mov	al,_$P_String		;AN000;
 23670                                  	;mov	ah,_$P_No_Tag		;AN000;
 23671                                  	; 07/07/2023
 23672 000017BB B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23673 000017BE E80300                  	call	_$P_Fill_Result		;AN000; set result buffer
 23674 000017C1 58                      	pop	ax			;AN000;
 23675 000017C2 F8                      	clc				;AN000;
 23676                                  _$P_Chk_SW_Single_Exit:			;AN000;
 23677 000017C3 C3                      	retn				;AN000;
 23678                                  ;ELSE					;AN000;(of IF SwSW)
 23679                                  ;	stc				;AN000; this logic works when the SwSW
 23680                                  ;	retn				;AN000; is reset.
 23681                                  
 23682                                  ;***********************************************************************
 23683                                  ; _$P_Fill_Result
 23684                                  ;
 23685                                  ; Function: Fill the result buffer
 23686                                  ;
 23687                                  ; Input:    AH = Item tag
 23688                                  ;	    AL = type
 23689                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 23690                                  ;		  AL = 2: DX has index(offset) into value list
 23691                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 23692                                  ;		  AL = 7: DX has year, CL has month and CH has date
 23693                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 23694                                  ;			  amd CH has hundredths
 23695                                  ;		  AL = else: cs:SI points to returned string buffer
 23696                                  ;	    ES:BX -> CONTROL block
 23697                                  ;
 23698                                  ; Output:   None
 23699                                  ;
 23700                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 23701                                  ;
 23702                                  ; Vars: _$P_DX(W)
 23703                                  ;***********************************************************************
 23704                                  
 23705                                  _$P_Fill_Result:
 23706 000017C4 57                      	push	di			;AN000;
 23707 000017C5 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 23708                                  					;AN000; di points to result buffer
 23709 000017C9 2E893E[EE14]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 23710 000017CE 268805                  	mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 23711 000017D1 26886501                	mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 23712 000017D5 50                      	push	ax			;AN000;
 23713 000017D6 2EA1[FD14]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 23714 000017DA 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 23715                                  					;AN000;   then set it to the result
 23716 000017DE 58                      	pop	ax			;AN000;
 23717                                  _$P_RLT04:				;AN000;
 23718 000017DF 3C01                    	cmp	al,_$P_Number		;AN000; if number
 23719 000017E1 750A                    	jne	short _$P_RLT00		;AN000;
 23720                                  
 23721                                  _$P_RLT02:				;AN000;
 23722 000017E3 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 23723 000017E7 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 23724 000017EB EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 23725                                  
 23726                                  _$P_RLT00:				;AN000;
 23727 000017ED 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 23728 000017EF 7506                    	jne	short _$P_RLT01		;AN000;
 23729                                  
 23730 000017F1 26895504                	mov	word [es:di+_$P_Result_Blk.Picked_Val],dx 
 23731                                  					;AN000; then store list index
 23732 000017F5 EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 23733                                  
 23734                                  _$P_RLT01:				;AN000;
 23735 000017F7 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 23736 000017F9 74E8                    	je	short _$P_RLT02		;AN000;
 23737                                  
 23738 000017FB 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 23739 000017FD 74E4                    	je	short _$P_RLT02		;AN000;
 23740                                  
 23741 000017FF 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 23742 00001801 7506                    	jne	short _$P_RLT03		;AN000;
 23743                                  
 23744 00001803 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 23745 00001807 EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 23746                                  
 23747                                  _$P_RLT03:				;AN000;
 23748 00001809 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 23749 0000180B 750F                    	jne	short _$P_RLT05		;AN000;
 23750                                  
 23751 0000180D 2EA1[F714]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 23752 00001811 40                      	inc	ax			;AN000; skip left Parentheses
 23753 00001812 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 23754 00001816 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 23755 0000181A EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 23756                                  
 23757                                  _$P_RLT05:				;AN000;
 23758                                  ;------------------------  AL = 3, 5, or 9
 23759 0000181C 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 23760                                  					;AN000; store offset of STRING_BUF
 23761 00001820 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 23762                                  					;AN031; store segment of STRING_BUF
 23763 00001824 50                      	push	ax			;AN000;
 23764 00001825 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 23765                                  					;AN000; need CAPS by file table?
 23766 0000182A 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 23767                                  
 23768 0000182C B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 23769 0000182E EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 23770                                  
 23771                                  _$P_RLT_CAP00:				;AN000;
 23772 00001830 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 23773                                  					;AN000; need CAPS by char table ?
 23774 00001835 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 23775                                  
 23776 00001837 B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 23777                                  _$P_RLT_CAP02:				;AN000;
 23778 00001839 E8DF00                  	call	_$P_Do_CAPS_String	;AN000; process CAPS along the table
 23779                                  _$P_RLT_CAP01:				;AN000;
 23780 0000183C 58                      	pop	ax			;AN000;
 23781 0000183D 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 23782                                  					;AN000; removing colon at end ?
 23783 00001842 7403                    	jz	short _$P_RLT_Exit	;AN000;
 23784                                  
 23785 00001844 E8AE00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 23786                                  _$P_RLT_Exit:				;AN000;
 23787 00001847 5F                      	pop	di			;AN000;
 23788 00001848 C3                      	retn				;AN000;
 23789                                  
 23790                                  ;***********************************************************************
 23791                                  ; _$P_Check_Match_Flags
 23792                                  ;
 23793                                  ; Function:  Check the match_flags and make the exit code and set the
 23794                                  ;	     result buffer
 23795                                  ;
 23796                                  ;	    Check for types in this order:
 23797                                  ;		Complex
 23798                                  ;		Date
 23799                                  ;		Time
 23800                                  ;		Drive
 23801                                  ;		Filespec
 23802                                  ;		Quoted String
 23803                                  ;		Simple String
 23804                                  ;
 23805                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23806                                  ;	     ES:BX -> CONTROL block
 23807                                  ;
 23808                                  ; Output:    None
 23809                                  ;
 23810                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 23811                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 23812                                  ;	     _$P_Drive_Format
 23813                                  ;***********************************************************************
 23814                                  
 23815                                  	; 25/10/2022 - Retro DOS v4.0
 23816                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 23817                                  
 23818                                  	; 12/12/2022
 23819                                  _$P_Check_Match_Flags:
 23820 00001849 2EC606[8D15]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 23821                                  					;AN033;AC034;; clear filespec error flag.
 23822 0000184F 50                      	push	ax			;AN000;
 23823                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 23824 00001850 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 23825 00001853 09C0                    	or	ax,ax			;AC035; test ax for zero
 23826 00001855 7517                    	jnz	short _$P_Mat		;AN000; (tm12)
 23827 00001857 50                      	push	ax			;AN000; (tm12)
 23828 00001858 53                      	push	bx			;AN000; (tm12)
 23829 00001859 52                      	push	dx			;AN000; (tm12)
 23830 0000185A 57                      	push	di			;AN000; (tm12)
 23831 0000185B 2EC706[EA14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 23832                                  	;mov	ah,_$P_No_Tag		;AN000; (tm12)
 23833                                  	;mov	al,_$P_String		;AN000; (tm12)
 23834                                  	; 07/07/2023
 23835 00001862 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23836 00001865 E85CFF                  	call	_$P_Fill_Result		;AN000; (tm12)
 23837 00001868 5F                      	pop	di			;AN000; (tm12)
 23838 00001869 5A                      	pop	dx			;AN000; (tm12)
 23839 0000186A 5B                      	pop	bx			;AN000; (tm12)
 23840 0000186B 58                      	pop	ax			;AN000; (tm12)
 23841                                  	; 12/12/2022
 23842                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 23843                                  	; 12/12/2022
 23844                                  ;_$P_Mat: 				;AN000; (tm12)
 23845                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 23846                                  _$P_Bridge:
 23847 0000186C EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 23848                                  	
 23849                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23850                                  	; (SYSINIT:19F9h)
 23851                                  	; 12/12/2022
 23852                                  	;nop	; db 90h
 23853                                  
 23854                                  ; 12/12/2022
 23855                                  _$P_Mat:
 23856                                  _$P_Match03:				;AN000;
 23857                                  	;test	ax,_$P_Num_Val ; 8000h	;AN000; Numeric value
 23858                                  	; 07/07/2023
 23859 0000186E F6C480                  	test	ah,(_$P_Num_Val>>8) ; 80h
 23860 00001871 7412                    	jz	short _$P_Match04	;AN000;
 23861                                  
 23862 00001873 2EC706[EA14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23863 0000187A E81F01                  	call	_$P_Value		;AN000; do process
 23864 0000187D 2E833E[EA14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23865 00001883 7557                    	jne	short _$P_Match_Exit	;AN000;
 23866                                  _$P_Match04:				;AN000;
 23867                                  	;test	ax,_$P_SNum_Val ; 4000h	;AN000; Signed numeric value
 23868                                  	; 07/07/2023
 23869 00001885 F6C440                  	test	ah,(_$P_SNum_Val>>8) ; 40h
 23870 00001888 7412                    	jz	short _$P_Match05	;AN000;
 23871                                  
 23872 0000188A 2EC706[EA14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23873 00001891 E8E400                  	call	_$P_SValue		;AN000; do process
 23874 00001894 2E833E[EA14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23875 0000189A 7540                    	jne	short _$P_Match_Exit	;AN000;
 23876                                  _$P_Match05:				;AN000;
 23877                                  	;test	ax,_$P_Drv_Only ; 100h	;AN000; Drive only
 23878                                  	; 07/07/2023
 23879 0000189C F6C401                  	test	ah,(_$P_Drv_Only>>8) ; 1
 23880 0000189F 7415                    	jz	short _$P_Match06	;AN000;
 23881                                  
 23882 000018A1 2EC706[EA14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23883 000018A8 E8F402                  	call	_$P_File_Format		;AN000; 1st, call file format
 23884 000018AB E87503                  	call	_$P_Drive_Format	;AN000; check drive format, next
 23885 000018AE 2E833E[EA14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23886 000018B4 7526                    	jne	short _$P_Match_Exit	;AN000;
 23887                                  _$P_Match06:				;AN000;
 23888                                  	;test	ax,_$P_File_Spc ; 200h	;AN000; File spec
 23889                                  	; 07/07/2023
 23890 000018B6 F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 23891 000018B9 7412                    	jz	short _$P_Match07	;AN000;
 23892                                  
 23893 000018BB 2EC706[EA14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23894 000018C2 E8DA02                  	call	_$P_File_Format		;AN000; do process
 23895 000018C5 2E833E[EA14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23896 000018CB 750F                    	jne	short _$P_Match_Exit	;AN000;
 23897                                  _$P_Match07:				;AN000;
 23898                                  	;test	ax,_$P_Simple_S	; 2000h	;AN000; Simple string
 23899                                  	; 07/07/2023
 23900 000018CD F6C420                  	test	ah,(_$P_Simple_S>>8) ; 20h
 23901 000018D0 740A                    	jz	short _$P_Match09	;AN000;
 23902                                  
 23903 000018D2 2EC706[EA14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23904 000018D9 E8BC01                  	call	_$P_Simple_String	;AN000; do process
 23905                                  _$P_Match09:				;AN000;
 23906                                  _$P_Match_Exit:				;AN000;
 23907 000018DC 2E833E[8D15]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 23908 000018E2 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23909 000018E4 2E833E[EA14]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 23910 000018EA 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23911 000018EC 2EC706[EA14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 23912                                  _$P_Match2_Exit: 			;AN033;
 23913 000018F3 58                      	pop	ax			;AN000;
 23914 000018F4 C3                      	retn				;AN000;
 23915                                  
 23916                                  ;***********************************************************************
 23917                                  ; _$P_Remove_Colon;
 23918                                  ;
 23919                                  ; Function: Remove colon at end
 23920                                  ;
 23921                                  ; Input:    cs:SI points to string buffer to be examineed
 23922                                  ;
 23923                                  ; Output:   None
 23924                                  ;
 23925                                  ; Use:	_$P_Chk_DBCS
 23926                                  ;***********************************************************************
 23927                                  
 23928                                  _$P_Remove_Colon:
 23929 000018F5 50                      	push	ax			;AN000;
 23930 000018F6 56                      	push	si			;AN000;
 23931                                  _$P_RCOL_Loop:				;AN000;
 23932 000018F7 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23933 000018FA 08C0                    	or	al,al			;AN000; end of string ?
 23934 000018FC 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 23935                                  
 23936 000018FE 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 23937 00001900 750D                    	jne	short _$P_RCOL00	;AN000;
 23938                                  
 23939 00001902 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 23940 00001907 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 23941                                  
 23942 00001909 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 23943 0000190D EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 23944                                  
 23945                                  _$P_RCOL00:				;AN000;
 23946 0000190F E81104                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 23947 00001912 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 23948                                  
 23949 00001914 46                      	inc	si			;AN000; if yes, skip trailing byte
 23950                                  _$P_RCOL01:				;AN000;
 23951 00001915 46                      	inc	si			;AN000; si points to next byte
 23952 00001916 EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 23953                                  
 23954                                  _$P_RCOL_Exit:				;AN000;
 23955 00001918 5E                      	pop	si			;AN000;
 23956 00001919 58                      	pop	ax			;AN000;
 23957 0000191A C3                      	retn				;AN000;
 23958                                  
 23959                                  ;***********************************************************************
 23960                                  ; _$P_Do_CAPS_String;
 23961                                  ;
 23962                                  ; Function: Perform capitalization along with the file case map table
 23963                                  ;	    or character case map table.
 23964                                  ;
 23965                                  ; Input:    AL = 2 : Use character table
 23966                                  ;	    AL = 4 : Use file table
 23967                                  ;	    cs:SI points to string buffer to be capitalized
 23968                                  ;
 23969                                  ; Output:   None
 23970                                  ;
 23971                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 23972                                  ;***********************************************************************
 23973                                  
 23974                                  _$P_Do_CAPS_String:
 23975 0000191B 56                      	push	si			;AN000;
 23976 0000191C 52                      	push	dx			;AN000;
 23977 0000191D 88C2                    	mov	dl,al			;AN000; save info id
 23978                                  _$P_DCS_Loop:				;AN000;
 23979 0000191F 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 23980 00001922 E8FE03                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 23981 00001925 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 23982                                  
 23983 00001927 08C0                    	or	al,al			;AN000; end of string ?
 23984 00001929 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 23985                                  
 23986 0000192B E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 23987 0000192E 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 23988 00001931 EB01                    	jmp	short _$P_DCS01		;AN000; process next
 23989                                  _$P_DCS00:				;AN000;
 23990 00001933 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 23991                                  _$P_DCS01:				;AN000;
 23992 00001934 46                      	inc	si			;AN000; si point to next byte
 23993 00001935 EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 23994                                  _$P_DCS_Exit:				;AN000;
 23995 00001937 5A                      	pop	dx			;AN000;
 23996 00001938 5E                      	pop	si			;AN000;
 23997 00001939 C3                      	retn
 23998                                  
 23999                                  ;***********************************************************************
 24000                                  ; _$P_Do_CAPS_Char;
 24001                                  ;
 24002                                  ; Function: Perform capitalization along with the file case map table
 24003                                  ;	    or character case map table.
 24004                                  ;
 24005                                  ; Input:    DL = 2 : Use character table
 24006                                  ;	    DL = 4 : Use file table
 24007                                  ;	    AL = character to be capitalized
 24008                                  ;
 24009                                  ; Output:   None
 24010                                  ;
 24011                                  ; Use:	INT 21h /w AH=65h
 24012                                  ;***********************************************************************
 24013                                  
 24014                                  _$P_Do_CAPS_Char:
 24015 0000193A 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 24016 0000193C 730B                    	jae	short _$P_DCC_Go	;AN000; no
 24017                                  
 24018 0000193E 3C61                    	cmp	al,"a"                  ;AN000; check if  "a" <= AL <= "z"
 24019 00001940 7235                    	jb	short _$P_CAPS_Ret	;AN000;   
 24020                                  
 24021 00001942 3C7A                    	cmp	al,"z"                  ;AN000;
 24022 00001944 7731                    	ja	short _$P_CAPS_Ret	;AN000;
 24023                                  
 24024 00001946 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000; make CAPS
 24025                                  	;jmp	short _$P_CAPS_Ret	;AN000;
 24026                                  	; 07/07/2023
 24027 00001948 C3                      	retn
 24028                                  
 24029                                  _$P_DCC_Go:				;AN000;
 24030 00001949 53                      	push	bx			;AN000;
 24031 0000194A 06                      	push	es			;AN000;
 24032 0000194B 57                      	push	di			;AN000;
 24033                                  
 24034                                  	;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 24035 0000194C 8D3E[7F15]              	lea	di,[_$P_Char_CAP_Ptr]
 24036                                  _$P_DCC00:				;AN000;
 24037 00001950 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 24038 00001953 7415                    	je	short _$P_DCC01		;AN000; no
 24039                                  
 24040                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 24041                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 24042                                  ; call, regardless of what base register is currently be defined as cs.
 24043                                  
 24044 00001955 50                      	push	ax			;AN000; get CAPS table thru DOS call
 24045 00001956 51                      	push	cx			;AN000;
 24046 00001957 52                      	push	dx			;AN000;
 24047                                  
 24048 00001958 0E                      	push	cs			;AC036; pass current base seg into
 24049                                  					;(Note: this used to push CS.  BUG...
 24050 00001959 07                      	pop	es			;AN000;   ES reg, required for
 24051                                  					;get extended country information
 24052                                  	;mov	al,dl ; function	;AN000; upper case table
 24053                                  	; 07/07/2023
 24054 0000195A 92                      	xchg	ax,dx
 24055 0000195B B465                    	mov	ah,_$P_DOS_Get_TBL ; 65h ;AN000; get extended CDI
 24056 0000195D BBFFFF                  	mov	bx,_$P_DOSTBL_Def ; -1	;AN000; get active CON
 24057 00001960 B90500                  	mov	cx,_$P_DOSTBL_BL ; 5	;AN000; buffer length
 24058                                  	;mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 24059                                  	; 07/07/2023
 24060 00001963 89DA                    	mov	dx,bx ; 0FFFFh
 24061                                  					;DI already set to point to buffer
 24062 00001965 CD21                    	int	21h			;AN000; es:di point to buffer that
 24063                                  					;now has been filled in with info
 24064 00001967 5A                      	pop	dx			;AN000;
 24065 00001968 59                      	pop	cx			;AN000;
 24066 00001969 58                      	pop	ax			;AN000;
 24067                                  
 24068                                  _$P_DCC01:				;AN000;
 24069                                  
 24070                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 24071                                  ; by the previous GET COUNTRY INFO DOS call. This usage of ES is made
 24072                                  ; regardless of which base reg is currently the cs reg.
 24073                                  
 24074                                  	;mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 24075                                  	;mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 24076                                  	; 07/07/2023
 24077 0000196A 2EC45D01                	les	bx,[cs:di+_$P_DOS_TBL.Off]
 24078 0000196E 43                      	inc	bx			;AC035; add '2' to
 24079 0000196F 43                      	inc	bx			;AC035;  BX reg
 24080                                  					;AN000; skip length field
 24081 00001970 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 24082                                  	;xlat	es:[bx] 		;AN000; perform case map
 24083 00001972 26                      	es
 24084 00001973 D7                      	xlat
 24085 00001974 5F                      	pop	di			;AN000;
 24086 00001975 07                      	pop	es			;AN000;
 24087 00001976 5B                      	pop	bx			;AN000;
 24088                                  _$P_CAPS_Ret:				;AN000;
 24089 00001977 C3                      	retn				;AN000;
 24090                                  
 24091                                  ;***********************************************************************
 24092                                  ; _$P_Value / _$P_SValue
 24093                                  ;
 24094                                  ; Function:  Make 32bit value from cs:SI and see value list
 24095                                  ;	     and make result buffer.
 24096                                  ;	     _$P_SValue is an entry point for the signed value
 24097                                  ;	     and this will simply call _$P_Value after the handling
 24098                                  ;	     of the sign character, "+" or "-"
 24099                                  ;
 24100                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24101                                  ;	     ES:BX -> CONTROL block
 24102                                  ;
 24103                                  ; Output:    None
 24104                                  ;
 24105                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 24106                                  ;
 24107                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 24108                                  ;***********************************************************************
 24109                                  
 24110                                  	; 26/10/2022 - Retro DOS v4.0
 24111                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 24112                                  
 24113                                  	; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 24114                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1C46h)  	
 24115                                  _$P_SValue:				;AN000; when signed value here
 24116 00001978 50                      	push	ax			;AN000;
 24117 00001979 2E800E[F614]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 24118 0000197F 2E8026[F614]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 24119                                  	;and	byte [cs:_$P_Flags2],~_$P_Neg ; 07/07/2023 
 24120 00001985 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 24121 00001988 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 24122 0000198A 740A                    	je	short _$P_SVal00	;AN000;
 24123                                  
 24124 0000198C 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 24125 0000198E 7507                    	jne	short _$P_Sval01	;AN000; else
 24126                                  
 24127 00001990 2E800E[F614]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 24128                                  _$P_SVal00:				;AN000;
 24129 00001996 46                      	inc	si			;AN000; skip sign char
 24130                                  _$P_Sval01:				;AN000;
 24131 00001997 E80200                  	call	_$P_Value		;AN000; and process value
 24132 0000199A 58                      	pop	ax			;AN000;
 24133 0000199B C3                      	retn
 24134                                  
 24135                                  ;***********************************************************************
 24136                                  
 24137                                  	; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 24138                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1C6Ah)
 24139                                  
 24140                                  	; 26/10/2022
 24141                                  _$P_Value:				;AN000;
 24142 0000199C 50                      	push	ax			;AN000;
 24143 0000199D 51                      	push	cx			;AN000;
 24144 0000199E 52                      	push	dx			;AN000;
 24145 0000199F 56                      	push	si			;AN000;
 24146 000019A0 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 24147 000019A2 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 24148 000019A4 53                      	push	bx			;AN000; save control pointer
 24149                                  _$P_Value_Loop:				;AN000;
 24150 000019A5 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 24151 000019A8 08C0                    	or	al,al			;AN000; end of line ?
 24152 000019AA 743C                    	jz	short _$P_Value00	;AN000;
 24153                                  
 24154 000019AC E8DD00                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 24155 000019AF 7233                    	jc	short _$P_Value_Err0	;AN000;
 24156                                  
 24157 000019B1 30E4                    	xor	ah,ah			;AN000;
 24158 000019B3 89C5                    	mov	bp,ax			;AN000; save binary number
 24159                                  
 24160                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 24161                                  ; Ref: Disassembled PCDOS 7.1 IBMBIO.COM SYSINIT code
 24162                                  ;				Erdogan Tan - July 2023 
 24163                                  %if 0
 24164                                  	shl	dx,1			;AN000; to have 2*x
 24165                                  	rcl	cx,1			;AN000; shift left w/ carry
 24166                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24167                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 24168                                  
 24169                                  	mov	bx,dx			;AN000; save low(2*x)
 24170                                  	mov	ax,cx			;AN000; save high(2*x)
 24171                                  	shl	dx,1			;AN000; to have 4*x
 24172                                  	rcl	cx,1			;AN000; shift left w/ carry
 24173                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24174                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 24175                                  
 24176                                  	shl	dx,1			;AN000; to have 8*x
 24177                                  	rcl	cx,1			;AN000; shift left w/ carry
 24178                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24179                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 24180                                  
 24181                                  	add	dx,bx			;AN000; now have 10*x
 24182                                  	adc	cx,ax			;AN000; 32bit ADD
 24183                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24184                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 24185                                  
 24186                                  	add	dx,bp			;AN000; Add the current one degree decimal
 24187                                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 24188                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24189                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 24190                                  
 24191                                  	inc	si			;AN000; update pointer
 24192                                  	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 24193                                  ;_$P_Value_Err0:
 24194                                  %endif
 24195                                  ;****
 24196                                  %if 1
 24197                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 24198                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:2130h)
 24199                                  
 24200 000019B5 30E4                    	xor	ah,ah
 24201 000019B7 89C5                    	mov	bp,ax			; save binary number
 24202 000019B9 E81C00                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 24203 000019BC 89D3                    	mov	bx,dx			; ax:bx = 2*(cx:dx)
 24204 000019BE 89C8                    	mov	ax,cx
 24205 000019C0 E81500                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 24206 000019C3 E81200                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 24207 000019C6 01DA                    	add	dx,bx			; 8*(cx:dx)+2*(cx:dx) = 10*(cx:dx)
 24208 000019C8 11C1                    	adc	cx,ax
 24209 000019CA E80F00                  	call	_$P_Value_Chk_Add_OVF
 24210 000019CD 01EA                    	add	dx,bp			; Add the current one degree decimal
 24211                                  					; if carry, add 1 to high 16bit
 24212 000019CF 83D100                  	adc	cx,0
 24213 000019D2 E80700                  	call	_$P_Value_Chk_Add_OVF	; Overflow occurred ?
 24214                                  					; then error, exit (without return here)
 24215 000019D5 46                      	inc	si			; update pointer
 24216 000019D6 EBCD                    	jmp	short _$P_Value_Loop
 24217                                  
 24218                                  _$P_Value_2x_OVF:
 24219 000019D8 D1E2                    	shl	dx,1 			; to have 2*x
 24220 000019DA D1D1                    	rcl	cx,1			; shift left w/ carry
 24221                                  _$P_Value_Chk_Add_OVF:
 24222 000019DC E89B00                  	call	_$P_Check_OVF		; check overflow (for the last shift or add)
 24223 000019DF 7201                    	jc	short _$P_Value_OVF
 24224 000019E1 C3                      	retn
 24225                                  _$P_Value_OVF:
 24226 000019E2 44                      	inc	sp 			; skip "call" return address to the caller
 24227 000019E3 44                      	inc	sp
 24228                                  
 24229                                  ;_$P_Value_Err0:	
 24230                                  %endif
 24231                                  ;****
 24232                                  
 24233                                  _$P_Value_Err0:				;AN000;
 24234 000019E4 5B                      	pop	bx			;AN000;
 24235 000019E5 E98300                  	jmp	_$P_Value_Err		;AN000; Bridge
 24236                                  ;
 24237                                  _$P_Value00:				;AN000;
 24238 000019E8 5B                      	pop	bx			;AN000; restore control pointer
 24239 000019E9 2EF606[F614]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 24240 000019EF 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 24241                                  
 24242 000019F1 F7D1                    	not	cx			;AN000; +
 24243 000019F3 F7D2                    	not	dx			;AN000; |- Make 2's complement
 24244 000019F5 83C201                  	add	dx,1			;AN000; |
 24245 000019F8 83D100                  	adc	cx,0			;AN000; +
 24246                                  
 24247                                  _$P_Value01:				;AN000; / nval = 0
 24248 000019FB 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 24249 000019FF 268A04                  	mov	al,[es:si]		;AN000; get nval
 24250 00001A02 3C00                    	cmp	al,_$P_nval_None 	;AN000; no value list ?
 24251                                  	;*jne	short _$P_Value02	;AN000;
 24252                                  	;* 07/07/2023
 24253 00001A04 7459                    	je	short _$P_Value05
 24254                                  
 24255                                  	;mov	al,_$P_Number		;AN000; Set type
 24256                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24257                                  	; 07/07/2023
 24258                                  	;*mov	ax,(_$P_No_Tag<<8)|_$P_Number
 24259                                  	;*jmp	short _$P_Value_Exit	;AN000;
 24260                                  
 24261                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 24262                                  	; (SYSINIT:1BA5h)
 24263                                  	; 12/12/2022
 24264                                  	;nop	; db  90h
 24265                                  
 24266                                  _$P_Value02:				;AN000; / nval = 1
 24267                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 24268                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 24269                                  ;(tm07) jne	short _$P_Value03	;AN000;
 24270                                  
 24271 00001A06 46                      	inc	si			;AN000;
 24272 00001A07 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 24273 00001A0A 3C00                    	cmp	al,_$P_No_nrng		;AN000; (tm07)
 24274 00001A0C 745D                    	je	short _$P_Value03	;AN000; (tm07)
 24275                                  
 24276 00001A0E 46                      	inc	si			;AN000; si points to 1st item_tag
 24277                                  _$P_Val02_Loop:				;AN000;
 24278 00001A0F 2EF606[F614]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 24279 00001A15 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 24280                                  
 24281 00001A17 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 24282 00001A1B 7234                    	jb	short _$P_Val02_Next	;AN000;
 24283 00001A1D 7706                    	ja	short _$P_Val_In	;AN000;
 24284                                  
 24285 00001A1F 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 24286 00001A23 722C                    	jb	short _$P_Val02_Next	;AN000;
 24287                                  
 24288                                  _$P_Val_In:				;AN000;
 24289 00001A25 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 24290 00001A29 7726                    	ja	short _$P_Val02_Next	;AN000;
 24291 00001A2B 7237                    	jb	short _$P_Val_Found	;AN000;
 24292                                  
 24293 00001A2D 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 24294 00001A31 771E                    	ja	short _$P_Val02_Next	;AN000;
 24295                                  
 24296 00001A33 EB2F                    	jmp	short _$P_Val_Found	;AN000;
 24297                                  
 24298                                  _$P_Val02_Sign:				;AN000;
 24299 00001A35 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 24300 00001A39 7C16                    	jl	short _$P_Val02_Next	;AN000;
 24301 00001A3B 7F06                    	jg	short _$P_SVal_In	;AN000;
 24302                                  
 24303 00001A3D 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 24304 00001A41 7C0E                    	jl	short _$P_Val02_Next	;AN000;
 24305                                  
 24306                                  _$P_SVal_In:				;AN000;
 24307 00001A43 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 24308 00001A47 7F08                    	jg	short _$P_Val02_Next	;AN000;
 24309                                  
 24310 00001A49 7C19                    	jl	short _$P_Val_Found	;AN000;
 24311                                  
 24312 00001A4B 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 24313                                  	;jg	short _$P_Val02_Next	;AN000;
 24314                                  	;jmp	short _$P_Val_Found	;AN000;
 24315                                  	; 07/07/2023
 24316 00001A4F 7E13                    	jng	short _$P_Val_Found
 24317                                  
 24318                                  _$P_Val02_Next:				;AN000;
 24319 00001A51 83C609                  	add	si,_$P_Len_Range 	;AN000;
 24320 00001A54 FEC8                    	dec	al			;AN000; loop nrng times in AL
 24321 00001A56 75B7                    	jne	short _$P_Val02_Loop	;AN000;
 24322                                  					; / Not found
 24323 00001A58 2EC706[EA14]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 24324                                  	;mov	al,_$P_Number		;AN000;
 24325                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24326                                  _$P_Value05:		;* 07/07/2023
 24327                                  	; 07/07/2023
 24328 00001A5F B801FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Number
 24329 00001A62 EB0E                    	jmp	short _$P_Value_Exit	;AN000;
 24330                                  
 24331                                  _$P_Val_Found:				;AN000;
 24332 00001A64 B001                    	mov	al,_$P_Number		;AN000;
 24333 00001A66 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 24334 00001A69 EB07                    	jmp	short _$P_Value_Exit	;AN000;
 24335                                  
 24336                                  _$P_Value03:				;AN000; / nval = 2
 24337                                  
 24338                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 24339                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 24340                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 24341                                  ;(tm07) inc	si			;AN000;
 24342                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 24343                                  ;	mov	ah,$P_Len_Range 	;AN000;
 24344                                  ;	mul	ah			;AN000;  Skip nrng field
 24345                                  ;	inc	ax			;AN000;
 24346                                  ;	add	si,ax			;AN000; si points to nnval
 24347                                  ;	mov	al,es:[si]		;AN000; get nnval
 24348                                  ;	inc	si			;AN000; si points to 1st item_tag
 24349                                  ;$P_Val03_Loop:				;AN000;
 24350                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 24351                                  ;	jne	$P_Val03_Next		;AN000;
 24352                                  ;
 24353                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 24354                                  ;	je	$P_Val_Found		;AN000;
 24355                                  ;
 24356                                  ;$P_Val03_Next:				;AN000;
 24357                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 24358                                  ;	dec	al			;AN000; loop nval times in AL
 24359                                  ;	jne	$P_Val03_Loop		;AN000;
 24360                                  ;					;AN000; / Not found
 24361                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 24362                                  ;	mov	al,$P_Number		;AN000;
 24363                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 24364                                  ;	jmp	short $P_Value_Exit	;AN000;
 24365                                  ;
 24366                                  ;ENDIF					;AN000;(of Val2SW)
 24367                                  ;$P_Value04:
 24368                                  
 24369                                  _$P_Value_Err:				;AN000;
 24370 00001A6B 2EC706[EA14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24371                                  	;mov	al,_$P_String		;AN000; Set type
 24372                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24373                                  	; 07/07/2023
 24374                                  	;mov	ax,(_$P_No_Tag<<8)|_$P_String
 24375                                  _$P_Value_Exit:				;AN000;
 24376 00001A72 E84FFD                  	call	_$P_Fill_Result		;AN000;
 24377 00001A75 5E                      	pop	si			;AN000;
 24378 00001A76 5A                      	pop	dx			;AN000;
 24379 00001A77 59                      	pop	cx			;AN000;
 24380 00001A78 58                      	pop	ax			;AN000;
 24381 00001A79 C3                      	retn				;AN000;
 24382                                  
 24383                                  ; 28/03/2019 - Retro DOS v4.0
 24384                                  
 24385                                  ;***********************************************************************
 24386                                  ; _$P_Check_OVF
 24387                                  ;
 24388                                  ; Function:  Check if overflow is occurred with consideration of
 24389                                  ;	     signed or un-signed numeric value
 24390                                  ;
 24391                                  ; Input:     Flag register
 24392                                  ;
 24393                                  ; Output:    CY = 1  :	Overflow
 24394                                  ;
 24395                                  ; Vars:     _$P_Flags(R)
 24396                                  ;***********************************************************************
 24397                                  
 24398                                  	; 26/10/2022
 24399                                  _$P_Check_OVF:
 24400 00001A7A 9C                      	pushf				;AN000;
 24401 00001A7B 2EF606[F614]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 24402 00001A81 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 24403                                  
 24404 00001A83 9D                      	popf				;AN000; by the CY bit
 24405 00001A84 C3                      	retn				;AN000;
 24406                                  
 24407                                  _$P_COVF:				;AN000;
 24408 00001A85 9D                      	popf				;AN000; else,
 24409 00001A86 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 24410                                  
 24411 00001A88 F8                      	clc				;AN000; indicate it with CY bit
 24412 00001A89 C3                      	retn				;AN000; CY=0 means no overflow
 24413                                  
 24414                                  _$P_COVF00:				;AN000;
 24415 00001A8A F9                      	stc				;AN000; and CY=1 means overflow
 24416 00001A8B C3                      	retn				;AN000;
 24417                                  
 24418                                  ;***********************************************************************
 24419                                  ; _$P_0099;
 24420                                  ;
 24421                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 24422                                  ;
 24423                                  ; Input:     AL = character code
 24424                                  ;
 24425                                  ; Output:    CY = 1 : AL is not number
 24426                                  ;	     CY = 0 : AL contains binary value
 24427                                  ;***********************************************************************
 24428                                  
 24429                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 24430                                  %if 0
 24431                                  _$P_0099:
 24432                                  	cmp	al,"0"                  ;AN000;
 24433                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 24434                                  	; 12/12/2022
 24435                                  	jb	short _$P_0099Err2  ; cf=1
 24436                                  
 24437                                  	cmp	al,"9"                  ;AN000;
 24438                                  	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 24439                                  
 24440                                  	sub	al,"0"                  ;AN000; make char -> bin
 24441                                  	; 12/12/2022
 24442                                  	; cf=0	
 24443                                  	;clc				;AN000; indicate no error
 24444                                  	retn				;AN000;
 24445                                  
 24446                                  _$P_0099Err:				;AN000;
 24447                                  	stc				;AN000; indicate error
 24448                                  _$P_0099Err2: ; 12/12/2022	
 24449                                  	retn				;AN000;
 24450                                  %endif
 24451                                  
 24452                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 24453                                  %if 1
 24454                                  _$P_0099:
 24455 00001A8C 3C30                    	cmp	al,"0"                  ; cmp al,30h
 24456 00001A8E 7207                    	jb	short _$P_0099Err	; must be 0 =< al =< 9
 24457 00001A90 3C3A                    	cmp	al,"9"+1                ; cmp al,3Ah  
 24458 00001A92 F5                      	cmc				; cf=0 -> cf=1
 24459 00001A93 7202                    	jb	short _$P_0099Err
 24460 00001A95 2C30                    	sub	al,"0"	; sub al,30h 	; make char -> bin
 24461                                  	; cf=0
 24462                                  _$P_0099Err:	; cf=1
 24463 00001A97 C3                      	retn
 24464                                  %endif	
 24465                                  
 24466                                  ;***********************************************************************
 24467                                  ; _$P_Simple_String
 24468                                  ;
 24469                                  ; Function:  See value list for the simple string
 24470                                  ;	     and make result buffer.
 24471                                  ;
 24472                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24473                                  ;	     ES:BX -> CONTROL block
 24474                                  ;
 24475                                  ; Output:    None
 24476                                  ;
 24477                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 24478                                  ;
 24479                                  ; Vars: _$P_RC(W)
 24480                                  ;***********************************************************************
 24481                                  
 24482                                  _$P_Simple_String:
 24483 00001A98 50                      	push	ax			;AN000;
 24484 00001A99 53                      	push	bx			;AN000;
 24485 00001A9A 52                      	push	dx			;AN000;
 24486 00001A9B 57                      	push	di			;AN000;
 24487 00001A9C 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 24488 00001AA0 268A05                  	mov	al,[es:di]		;AN000; get nval
 24489 00001AA3 08C0                    	or	al,al			;AN000; no value list ?
 24490 00001AA5 7504                    	jnz	short _$P_Sim00		;AN000; then
 24491                                  
 24492 00001AA7 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24493 00001AA9 EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 24494                                  
 24495                                  _$P_Sim00:				;AN000;
 24496                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 24497 00001AAB 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 24498 00001AAD 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 24499                                  
 24500 00001AAF 47                      	inc	di			;AN000;
 24501 00001AB0 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 24502 00001AB3 B409                    	mov	ah,_$P_Len_Range 	;AN000;
 24503 00001AB5 F6E4                    	mul	ah			;AN000; Skip nrng field
 24504 00001AB7 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 24505 00001AB8 01C7                    	add	di,ax			;AN000; di points to nnval
 24506 00001ABA 268A05                  	mov	al,[es:di]		;AN000; get nnval
 24507 00001ABD B405                    	mov	ah,_$P_Len_Value 	;AN000;
 24508 00001ABF F6E4                    	mul	ah			;AN000; Skip nnval field
 24509 00001AC1 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 24510 00001AC2 01C7                    	add	di,ax			;AN000; di points to nstrval
 24511 00001AC4 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 24512 00001AC7 47                      	inc	di			;AC035; add '2' to
 24513 00001AC8 47                      	inc	di			;AC035;  DI reg
 24514                                  					;AN000; di points to 1st string in list
 24515                                  _$P_Sim_Loop:				;AN000;
 24516 00001AC9 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 24517 00001ACC E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 24518 00001ACF 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 24519                                  
 24520 00001AD1 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 24521 00001AD4 FEC8                    	dec	al			;AN000; loop nstval times in AL
 24522 00001AD6 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 24523                                  					;AN000; / Not found
 24524 00001AD8 2EC706[EA14]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 24525 00001ADF B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24526 00001AE1 EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 24527                                  
 24528                                  _$P_Sim_Found:				;AN000;
 24529 00001AE3 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 24530 00001AE7 B002                    	mov	al,_$P_List_Idx		;AN000;
 24531 00001AE9 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 24532 00001AEC EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 24533                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 24534                                  _$P_Sim01:				;AN000;
 24535 00001AEE 2EC706[EA14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24536 00001AF5 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24537                                  _$P_Sim_Exit:				;AN000;
 24538 00001AF7 B003                    	mov	al,_$P_String		;AN000; Set type
 24539                                  _$P_Sim_Exit0:				;AN000;
 24540 00001AF9 E8C8FC                  	call	_$P_Fill_Result		;AN000;
 24541 00001AFC 5F                      	pop	di			;AN000;
 24542 00001AFD 5A                      	pop	dx			;AN000;
 24543 00001AFE 5B                      	pop	bx			;AN000;
 24544 00001AFF 58                      	pop	ax			;AN000;
 24545 00001B00 C3                      	retn				;AN000;
 24546                                  
 24547                                  ;***********************************************************************
 24548                                  ; _$P_String_Comp:
 24549                                  ;
 24550                                  ; Function:  Compare two string
 24551                                  ;
 24552                                  ; Input:     cs:SI -> 1st string
 24553                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 24554                                  ;	     ES:BX -> CONTROL block
 24555                                  ;
 24556                                  ; Output:    CY = 1 if not match
 24557                                  ;
 24558                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 24559                                  ;
 24560                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 24561                                  ;***********************************************************************
 24562                                  
 24563                                  _$P_String_Comp:
 24564 00001B01 50                      	push	ax			;AN000;
 24565 00001B02 55                      	push	bp			;AN000;
 24566 00001B03 52                      	push	dx			;AN000;
 24567 00001B04 56                      	push	si			;AN000;
 24568 00001B05 B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 24569                                  _$P_SCOM_Loop:				;AN000;
 24570 00001B07 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 24571 00001B0A E81602                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 24572 00001B0D 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 24573                                  
 24574 00001B0F E828FE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 24575                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 24576 00001B12 2EF606[F614]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 24577 00001B18 740D                    	jz	short _$P_SCOM04	;AN000;
 24578                                  
 24579 00001B1A 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 24580 00001B1C 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 24581                                  
 24582 00001B1E 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 24583 00001B23 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 24584                                  
 24585 00001B25 EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 24586                                  
 24587                                  _$P_SCOM04:				;AN000;
 24588 00001B27 2EF606[F614]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 24589 00001B2D 740E                    	jz	short _$P_SCOM03	;AN000;
 24590                                  
 24591 00001B2F 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 24592 00001B31 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 24593                                  
 24594                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24595                                  	;cmp	byte [es:bp+0],_$P_NULL
 24596                                  	; 11/12/2022
 24597 00001B33 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 24598 00001B38 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 24599                                  
 24600                                  _$P_SCOM05:				;AN000;   found a match
 24601 00001B3A 46                      	inc	si			;AN000; si points to just after "=" or ":"
 24602 00001B3B EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 24603                                  
 24604                                  _$P_SCOM03:				;AN000;
 24605                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 24606                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24607                                  	;cmp	al,[es:bp+0]
 24608                                  	; 11/12/2022
 24609 00001B3D 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 24610 00001B41 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 24611                                  
 24612 00001B43 08C0                    	or	al,al			;AN000; end of line
 24613 00001B45 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 24614                                  
 24615                                  	; 12/12/2022
 24616                                  	;inc	si			;AN000; update operand pointer
 24617                                  	;inc	bp			;AN000;    and synonym pointer
 24618                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24619 00001B47 EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 24620                                  
 24621                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 24622                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24623                                  	;cmp	al,[es:bp+0]
 24624                                  	; 11/12/2022
 24625 00001B49 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 24626 00001B4D 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 24627                                  
 24628 00001B4F 46                      	inc	si			;AN000; else, load next byte
 24629 00001B50 2E8A04                  	mov	al,[cs:si]		;AN000; and
 24630 00001B53 45                      	inc	bp			;AN000;
 24631                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24632                                  	;cmp	al,[es:bp+0]
 24633                                  	; 11/12/2022
 24634 00001B54 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 24635 00001B58 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 24636                                  
 24637                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24638                                  	; 12/12/2022
 24639                                  _$P_SCOM01:
 24640 00001B5A 46                      	inc	si			;AN000; else update operand pointer
 24641 00001B5B 45                      	inc	bp			;AN000; 		and synonym pointer
 24642                                  ;_$P_SCOM01:				;AN000;
 24643 00001B5C EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 24644                                  
 24645                                  _$P_SCOM_Differ0:			;AN000;
 24646                                  ;IF SwSW				;AN000;(tm10)
 24647 00001B5E 2EF606[F614]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 24648 00001B64 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 24649                                  
 24650                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24651                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 24652                                  	; 12/12/2022
 24653 00001B66 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 24654 00001B6B 7407                    	je	short _$P_not_applicable ;AN000;(tm10)
 24655                                  
 24656                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24657                                  	;cmp	byte [es:bp+0],_$P_NULL
 24658                                  	; 11/12/2022
 24659 00001B6D 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 24660                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 24661 00001B72 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 24662                                  
 24663                                  _$P_not_applicable:			;AN000;(tm10)
 24664                                  ;ENDIF					;AN000;(tm10)
 24665                                  
 24666                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 24667                                  					;AN000; ignore colon option specified ?
 24668                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 24669                                  	; 12/12/2022
 24670 00001B74 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24671                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24672                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 24673 00001B78 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 24674                                  
 24675 00001B7A 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 24676 00001B7C 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 24677                                  
 24678                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24679                                  	;cmp	byte [es:bp+0],_$P_NULL
 24680                                  	; 11/12/2022
 24681 00001B7E 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 24682 00001B83 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 24683                                  
 24684 00001B85 EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 24685                                  
 24686                                  _$P_SCOM02:				;AN000;
 24687 00001B87 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 24688 00001B89 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 24689                                  
 24690                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24691                                  	;cmp	byte [es:bp+0],_$P_Colon
 24692                                  	; 11/12/2022
 24693 00001B8B 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 24694 00001B90 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 24695                                  
 24696                                  _$P_SCOM_Differ: 			;AN000;
 24697 00001B92 F9                      	stc				;AN000; indicate not found
 24698 00001B93 EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 24699                                  
 24700                                  _$P_SCOM_Same:				;AN000;
 24701                                  	; 12/12/2022
 24702                                  	; cf=0
 24703 00001B95 2E8936[F914]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 24704                                  	; 12/12/2022
 24705                                  	;clc				;AN000; indicate found
 24706                                  _$P_SCOM_Exit:				;AN000;
 24707 00001B9A 5E                      	pop	si			;AN000;
 24708 00001B9B 5A                      	pop	dx			;AN000;
 24709 00001B9C 5D                      	pop	bp			;AN000;
 24710 00001B9D 58                      	pop	ax			;AN000;
 24711 00001B9E C3                      	retn
 24712                                  
 24713                                  ; 30/03/2019
 24714                                  
 24715                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 24716                                  
 24717                                  ;***********************************************************************
 24718                                  ; _$P_File_Format;
 24719                                  ;
 24720                                  ; Function:  Check if the input string is valid file spec format.
 24721                                  ;	     And set the result buffer.
 24722                                  ;
 24723                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24724                                  ;	     ES:BX -> CONTROL block
 24725                                  ;
 24726                                  ; Output:    None
 24727                                  ;
 24728                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 24729                                  ;
 24730                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 24731                                  ;	_$P_SaveSI_Cmpx(R)
 24732                                  ;***********************************************************************
 24733                                  
 24734                                  _$P_File_Format:
 24735 00001B9F 50                      	push	ax			;AN000;
 24736 00001BA0 57                      	push	di			;AN000;
 24737 00001BA1 56                      	push	si			;AN000;
 24738 00001BA2 2E8B3E[F714]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 24739                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 24740 00001BA7 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 24741 00001BAA 08C0                    	or	al,al			;AN000; end of line ?
 24742 00001BAC 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 24743                                  
 24744 00001BAE E85D00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 24745 00001BB1 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 24746                                  
 24747 00001BB3 2EC606[8D15]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 24748                                  					;AN033;AC034;; set error flag- bad char.
 24749 00001BB9 5E                      	pop	si			;AN033;
 24750 00001BBA 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 24751 00001BBE 5F                      	pop	di			;AN033;
 24752 00001BBF EB3E                    	jmp	short _$P_FileF02	;AN033;
 24753                                  
 24754                                  _$P_FileF_Err:				;AN000;
 24755 00001BC1 5E                      	pop	si			;AN000;
 24756 00001BC2 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 24757 00001BC6 5F                      	pop	di			;AN000;
 24758                                  
 24759                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 24760                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 24761                                  	; 12/12/2022
 24762 00001BC7 26F60701                	test	byte [es:bx],_$P_Optional
 24763                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24764                                  	;test	word [es:bx],_$P_Optional
 24765 00001BCB 7532                    	jnz	short _$P_FileF02	;AN000;
 24766                                  
 24767 00001BCD 2EC706[EA14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 24768 00001BD4 EB29                    	jmp	short _$P_FileF02	;AN000;
 24769                                  
 24770                                  _$P_FileF03:				;AN000;
 24771 00001BD6 58                      	pop	ax			;AN000; discard save si
 24772 00001BD7 56                      	push	si			;AN000; save new si
 24773                                  _$P_FileF_Loop1: 			;AN000;
 24774 00001BD8 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 24775 00001BDB 08C0                    	or	al,al			;AN000; end of line ?
 24776 00001BDD 741E                    	jz	short _$P_FileF_RLT	;AN000;
 24777                                  
 24778 00001BDF E82C00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 24779 00001BE2 740B                    	je	short _$P_FileF00	;AN000;
 24780                                  
 24781 00001BE4 E83C01                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 24782 00001BE7 7302                    	jnc	short _$P_FileF01	;AN000;
 24783 00001BE9 47                      	inc	di			;AN000; if yes, skip next byte
 24784 00001BEA 46                      	inc	si			;AN000;
 24785                                  _$P_FileF01:				;AN000;
 24786 00001BEB 47                      	inc	di			;AN000;
 24787 00001BEC 46                      	inc	si			;AN000;
 24788 00001BED EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 24789                                  ;
 24790                                  _$P_FileF00:				;AN000;
 24791 00001BEF 2EA2[F014]              	mov	[cs:_$P_Terminator],al	;AC034;
 24792 00001BF3 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 24793 00001BF7 47                      	inc	di			;AN000;
 24794 00001BF8 2E893E[EC14]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 24795                                  _$P_FileF_RLT:				;AN000;
 24796 00001BFD 5E                      	pop	si			;AN000;
 24797 00001BFE 5F                      	pop	di			;AN000;
 24798                                  _$P_FileF02:				;AN000;
 24799 00001BFF 58                      	pop	ax			;AN000; (tm14)
 24800                                  	;test	ax,_$P_File_Spc	; 200h	;AN000; (tm14)
 24801                                  	; 08/07/2023
 24802 00001C00 F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 24803 00001C03 7408                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 24804                                  
 24805 00001C05 50                      	push	ax			;AN000; (tm14)
 24806                                  	;mov	ah,_$P_No_Tag		;AN000; set
 24807                                  	;mov	al,_$P_File_Spec 	;AN000; result
 24808                                  	; 08/07/2023
 24809 00001C06 B805FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_File_Spec ; 0FF05h
 24810                                  					      ; set result
 24811 00001C09 E8B8FB                  	call	_$P_Fill_Result		;AN000; buffer to file spec
 24812 00001C0C 58                      	pop	ax			;AN000;
 24813                                  
 24814                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 24815 00001C0D C3                      	retn				;AN000;
 24816                                  
 24817                                  ;***********************************************************************
 24818                                  ; _$P_FileSp_Chk
 24819                                  ;
 24820                                  ; Function:  Check if the input byte is one of file special characters
 24821                                  ;
 24822                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24823                                  ;	     AL = character code to be examineed
 24824                                  ;
 24825                                  ; Output:    ZF = 1 , AL is one of special characters
 24826                                  ;***********************************************************************
 24827                                  
 24828                                  _$P_FileSp_Chk:
 24829 00001C0E 53                      	push	bx			;AN000;
 24830 00001C0F 51                      	push	cx			;AN000;
 24831                                  	;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 24832 00001C10 8D1E[8415]              	lea	bx,[_$P_FileSp_Char] 	; "[]|<>+=;\"" at
 24833                                  					; MSDOS 6.21 IO.SYS - SYSINIT:1838h
 24834 00001C14 B90900                  	mov	cx,_$P_FileSp_Len ; 9	;AN000; load length of it
 24835                                  _$P_FileSp_Loop: 			;AN000;
 24836 00001C17 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 24837 00001C1A 7404                    	je	short _$P_FileSp_Exit	;AN000;
 24838                                  
 24839 00001C1C 43                      	inc	bx			;AN000;
 24840 00001C1D E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 24841                                  
 24842 00001C1F 41                      	inc	cx			;AN000; reset ZF
 24843                                  _$P_FileSp_Exit: 			;AN000;
 24844 00001C20 59                      	pop	cx			;AN000;
 24845 00001C21 5B                      	pop	bx			;AN000;
 24846 00001C22 C3                      	retn
 24847                                  
 24848                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 24849                                  
 24850                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 24851                                  
 24852                                  ;***********************************************************************
 24853                                  ; _$P_Drive_Format;
 24854                                  ;
 24855                                  ; Function:  Check if the input string is valid drive only format.
 24856                                  ;	     And set the result buffer.
 24857                                  ;
 24858                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24859                                  ;	     ES:BX -> CONTROL block
 24860                                  ;
 24861                                  ; Output:    None
 24862                                  ;
 24863                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 24864                                  ;
 24865                                  ; Vars: _$P_RC(W)
 24866                                  ;***********************************************************************
 24867                                  
 24868                                  _$P_Drive_Format:
 24869 00001C23 50                      	push	ax			;AN000;
 24870 00001C24 52                      	push	dx			;AN000;
 24871 00001C25 2E8A04                  	mov	al,[cs:si]		;AN000;
 24872 00001C28 08C0                    	or	al,al			;AN000; if null string
 24873 00001C2A 7436                    	je	short _$P_Drv_Exit	;AN000; do nothing
 24874                                  
 24875 00001C2C E8F400                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 24876 00001C2F 722A                    	jc	short _$P_Drv_Err	;AN000; (yes, error)
 24877                                  
 24878 00001C31 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d",":", 0 ?
 24879 00001C36 740D                    	je	short _$P_DrvF00	;AN000;
 24880                                  
 24881                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 24882                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 24883                                  	; 12/12/2022
 24884 00001C38 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24885                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24886                                  	;test	word [es:bx],_$P_Ig_Colon
 24887 00001C3C 741D                    	jz	short _$P_Drv_Err	;AN000;
 24888                                  
 24889 00001C3E 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d",0 ?
 24890 00001C43 7516                    	jne	short _$P_Drv_Err	;AN000;
 24891                                  
 24892                                  _$P_DrvF00:				;AN000;
 24893 00001C45 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 24894 00001C47 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 24895 00001C49 7210                    	jb	short _$P_Drv_Err	;AN000; in range of
 24896                                  
 24897 00001C4B 3C7A                    	cmp	al,"z"                  ;AN000; "a"-"z"
 24898 00001C4D 770C                    	ja	short _$P_Drv_Err	;AN000; if no, error
 24899                                  
 24900 00001C4F 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 24901 00001C51 88C2                    	mov	dl,al			;AN000; set
 24902                                  	;mov	ah,_$P_No_Tag		;AN000; result
 24903                                  	;mov	al,_$P_Drive		;AN000; buffer
 24904                                  	; 08/07/2023
 24905 00001C53 B806FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Drive ; 0FF06h
 24906                                  					      ; set result buffer
 24907 00001C56 E86BFB                  	call	_$P_Fill_Result		;AN000; to drive
 24908 00001C59 EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 24909                                  
 24910                                  _$P_Drv_Err:				;AN000;
 24911 00001C5B 2EC706[EA14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24912                                  _$P_Drv_Exit:				;AN000;
 24913 00001C62 5A                      	pop	dx			;AN000;
 24914 00001C63 58                      	pop	ax			;AN000;
 24915 00001C64 C3                      	retn				;AN000;
 24916                                  
 24917                                  ;ENDIF					;AN000;(of DrvSW)
 24918                                  
 24919                                  ;***********************************************************************
 24920                                  ; _$P_Skip_Delim;
 24921                                  ;
 24922                                  ; Function: Skip delimiters specified in the PARMS list, white space
 24923                                  ;	    and comma.
 24924                                  ;
 24925                                  ; Input:    DS:SI -> Command String
 24926                                  ;	    ES:DI -> Parameter List
 24927                                  ;
 24928                                  ; Output:   CY = 1 if the end of line encounterd
 24929                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 24930                                  ;	    AL = Last examineed character
 24931                                  ;
 24932                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 24933                                  ;
 24934                                  ; Vars:     _$P_Flags(R)
 24935                                  ;***********************************************************************
 24936                                  
 24937                                  _$P_Skip_Delim:
 24938                                  _$P_Skip_Delim_Loop:			;AN000;
 24939 00001C65 AC                      	lodsb				;AN000;
 24940 00001C66 E81E00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 24941 00001C69 7416                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 24942                                  
 24943 00001C6B E84E00                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 24944 00001C6E 7514                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 24945                                  
 24946 00001C70 2EF606[F614]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 24947 00001C76 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 24948                                  
 24949 00001C78 2EF606[F614]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 24950                                  	;jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 24951                                  	; 08/07/2023
 24952                                  	; cf=0
 24953 00001C7E 7505                    	jnz	short _$P_Skip_Delim_Exit
 24954 00001C80 C3                      	retn
 24955                                  
 24956                                  	;dec	si			;AN000; backup si for next call (tm08)
 24957                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 24958                                  	; 12/12/2022
 24959                                  	; cf=0
 24960                                  	; 08/07/2023
 24961                                  	;jmp	short _$P_Skip_Delim_Exit
 24962                                  
 24963                                  _$P_Skip_Delim_CY:			;AN000;
 24964 00001C81 F9                      	stc				;AN000; indicate EOL
 24965 00001C82 EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 24966                                  
 24967                                  _$P_Skip_Delim_NCY:			;AN000;
 24968 00001C84 F8                      	clc				;AN000; indicate non delim
 24969                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 24970 00001C85 4E                      	dec	si			;AN000;  backup index pointer
 24971                                  	; 08/07/2023
 24972                                  	; 12/12/2022
 24973                                  ;_$P_Exit_At_Extra:	 ; cf=0
 24974 00001C86 C3                      	retn				;AN000;
 24975                                  
 24976                                  	; 12/12/2022
 24977                                  ;_$P_Exit_At_Extra:			;AN000;
 24978                                  	;clc				;AN000; indicate extra delim
 24979                                  	;retn				;AN000;
 24980                                  
 24981                                  ;***********************************************************************
 24982                                  ; _$P_Chk_EOL;
 24983                                  ;
 24984                                  ; Function: Check if AL is one of End of Line characters.
 24985                                  ;
 24986                                  ; Input:    AL = character code
 24987                                  ;	    ES:DI -> Parameter List
 24988                                  ;
 24989                                  ; Output:   ZF = 1 if one of End of Line characters
 24990                                  ;**********************************************************************
 24991                                  
 24992                                  _$P_Chk_EOL:
 24993 00001C87 53                      	push	bx			;AN000;
 24994 00001C88 51                      	push	cx			;AN000;
 24995 00001C89 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 24996 00001C8B 742C                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24997 00001C8D 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 24998 00001C8F 7428                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24999                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 25000 00001C91 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 25001 00001C93 7424                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 25002                                  ;ENDIF					;AN028;
 25003 00001C95 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 25004                                  					;AN000; EOL character specified ?
 25005 00001C9A 721D                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 25006 00001C9C 31DB                    	xor	bx,bx			;AN000;
 25007 00001C9E 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 25008                                  					;AN000; get length of delimiter list
 25009 00001CA2 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 25010                                  	; 08/07/2023
 25011 00001CA5 31C9                    	xor	cx,cx ; *
 25012 00001CA7 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 25013 00001CAB 740B                    	je	short _$P_Chk_EOL_NZ	;AN000;
 25014                                  	; 08/07/2023
 25015                                  	;;xor	cx,cx			;AN000; Get number of extra character
 25016                                  	;xor	ch,ch ; *
 25017 00001CAD 268A09                  	mov	cl,[es:bx+di]		;AN000; 
 25018                                  _$P_Chk_EOL_Loop:			;AN000;
 25019 00001CB0 43                      	inc	bx			;AN000;
 25020 00001CB1 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 25021 00001CB4 7403                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 25022 00001CB6 E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 25023                                  	; 08/07/2023
 25024                                  	; cx=0
 25025                                  _$P_Chk_EOL_NZ:				;AN000;
 25026                                  	;cmp	al,_$P_CR		;AN000; reset ZF
 25027                                  	; 08/07/2023
 25028 00001CB8 41                      	inc	cx  ; zf=0  (cx=1) ; *
 25029                                  _$P_Chk_EOL_Exit:			;AN000;
 25030 00001CB9 59                      	pop	cx			;AN000;
 25031 00001CBA 5B                      	pop	bx			;AN000;
 25032 00001CBB C3                      	retn
 25033                                  
 25034                                  ;***********************************************************************
 25035                                  ; _$P_Chk_Delim;
 25036                                  ;
 25037                                  ; Function: Check if AL is one of delimiter characters.
 25038                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 25039                                  ;	    blanks.
 25040                                  ;
 25041                                  ; Input:    AL = character code
 25042                                  ;	    DS:SI -> Next Character
 25043                                  ;	    ES:DI -> Parameter List
 25044                                  ;
 25045                                  ; Output:   ZF = 1 if one of delimiter characters
 25046                                  ;	    SI points to the next character
 25047                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 25048                                  ;***********************************************************************
 25049                                   
 25050                                  	; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 25051                                  	; MSDOS 6.21 IO.SYS - SYSINIT:1FAEh
 25052                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:2451h) ; (Retro DOS v5.0)
 25053                                  
 25054                                  _$P_Chk_Delim:
 25055 00001CBC 53                      	push	bx			;AN000;
 25056 00001CBD 51                      	push	cx			;AN000;
 25057 00001CBE 2EC606[F014]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 25058                                  					;AC034; Assume terminated by space
 25059                                  	;and	byte [cs:_$P_Flags20,0DFh
 25060 00001CC4 2E8026[F614]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 25061 00001CCA 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 25062 00001CCC 7423                    	je	short _$P_Chk_Delim_Exit ;AN000;
 25063                                  
 25064 00001CCE 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 25065 00001CD0 741F                    	je	short _$P_Chk_Delim_Exit ;AN000;
 25066                                  
 25067 00001CD2 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 25068 00001CD4 741E                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 25069                                  
 25070                                  ; Note: _$P_Chk_Delim00 part of code is nonsense here
 25071                                  ;        because _$P_Space = _$P_DBSP1 = 20h
 25072                                  ;        Erdogan Tan - 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 25073                                  ;_$P_Chk_Delim00:
 25074                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:246Bh)
 25075                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1FC8h)
 25076                                  %if 0
 25077                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25078                                  _$P_Chk_Delim00: 			;AN000;
 25079                                  	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 25080                                  	jne	short _$P_Chk_Delim01	;AN000;
 25081                                  
 25082                                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 25083                                  	jne	short _$P_Chk_Delim01	;AN000;
 25084                                  
 25085                                  	mov	al,_$P_Space		;AN000;
 25086                                  	inc	si			;AN000; make si point to next character
 25087                                  	cmp	al,al			;AN000; Set ZF
 25088                                  	jmp	short _$P_Chk_Delim_Exit ;AN000;
 25089                                  %endif
 25090                                  
 25091                                  _$P_Chk_Delim01: 			;AN000;
 25092 00001CD6 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 25093                                  					;AN000; delimiter character specified ?
 25094 00001CDB 7214                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 25095                                  
 25096                                  	;xor	cx,cx			;AN000;
 25097 00001CDD 30ED                    	xor	ch,ch
 25098                                  	;mov	cl,[es:di+3]
 25099 00001CDF 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 25100                                  					;AN000; get length of delimiter list
 25101                                  	;or	cx,cx			;AN000; No extra Delim character ?
 25102                                  	;jz	short _$P_Chk_Delim_NZ 	;AN000;
 25103                                  	; 08/07/2023
 25104 00001CE3 E30B                    	jcxz	_$P_Chk_Delim_NZ
 25105                                  
 25106 00001CE5 BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 25107                                  _$P_Chk_Delim_Loop:			;AN000;
 25108 00001CE8 43                      	inc	bx			;AN000;
 25109 00001CE9 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 25110 00001CEC 7406                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 25111                                  
 25112 00001CEE E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 25113                                  
 25114                                  _$P_Chk_Delim_NZ:			;AN000;
 25115                                  	;cmp	al,_$P_Space		;AN000; reset ZF
 25116                                  	; 08/07/2023
 25117                                  	; cx=0 here
 25118 00001CF0 41                      	inc	cx ; cx=1, zf=0
 25119                                  _$P_Chk_Delim_Exit:			;AN000;
 25120                                  _$P_ChkDfin:				;AN000;
 25121 00001CF1 59                      	pop	cx			;AN000;
 25122 00001CF2 5B                      	pop	bx			;AN000;
 25123 00001CF3 C3                      	retn				;AN000;
 25124                                  
 25125                                  _$P_Chk_Delim_Exit0:			;AN000;
 25126 00001CF4 2EA2[F014]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 25127 00001CF8 2EF606[F614]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 25128 00001CFE 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 25129                                  
 25130 00001D00 2E800E[F614]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 25131                                  					;AC034; flag terminated extra delimiter or comma
 25132                                  _$P_No_Set_Extra:			;AN027;
 25133 00001D06 38C0                    	cmp	al,al			;AN000; set ZF
 25134 00001D08 EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 25135                                  
 25136                                  ;***********************************************************************
 25137                                  ; _$P_Chk_Switch;
 25138                                  ;
 25139                                  ; Function: Check if AL is the switch character not in first position of
 25140                                  ;	    _$P_STRING_BUF
 25141                                  ;
 25142                                  ; Input:    AL = character code
 25143                                  ;	    BX = current pointer within _$P_String_Buf
 25144                                  ;	    SI =>next char on command line (following the one in AL)
 25145                                  ;
 25146                                  ; Output:   CF = 1 (set) if AL is switch character, and not in first
 25147                                  ;		 position, and has no chance of being part of a date string,
 25148                                  ;		 i.e. should be treated as a delimiter.
 25149                                  
 25150                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 25151                                  ;		 position, or is a slash but may be part of a date string, i.e.
 25152                                  ;		 should not be treated as a delimiter.
 25153                                  ;
 25154                                  ; Vars:  _$P_Terminator(W)
 25155                                  
 25156                                  ; Use:	 _$P_0099
 25157                                  ;***********************************************************************
 25158                                  
 25159                                  _$P_Chk_Switch:
 25160                                  	;;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 25161                                  	;lea	bp,[_$P_STRING_BUF]	;BP=OFFSET of _$P_String_Buf even in group addressing
 25162                                  	; 08/07/2023
 25163 00001D0A BD[FF14]                	mov	bp,_$P_STRING_BUF
 25164                                  
 25165                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 25166 00001D0D 39EB                    	cmp	bx,bp			;AN000;
 25167 00001D0F 7406                    	je	short _$P_STRUC_L2	;AN000;
 25168                                  
 25169                                  ;	.IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 25170 00001D11 3C2F                    	cmp	al,_$P_Switch		;AN000;
 25171 00001D13 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 25172                                  
 25173 00001D15 F9                      	stc				;AN020;not in first position and is slash
 25174                                  	;jmp     short _$P_STRUC_L1	;AN000;
 25175                                  	; 12/12/2022
 25176 00001D16 C3                      	retn
 25177                                  
 25178                                  ; 12/12/2022
 25179                                  ;_$P_STRUC_L5:				;AN000;
 25180                                  ;	CLC				;AN020;not a slash
 25181                                  ;;	    .ENDIF			;AN020;
 25182                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 25183                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 25184                                  
 25185                                  _$P_STRUC_L2:				;AN000;
 25186                                  ;	.IF <AL EQ _$P_Switch> THEN	;AN020;
 25187 00001D17 3C2F                    	cmp     al,_$P_Switch		;AN000;
 25188 00001D19 7506                    	jne	short _$P_STRUC_L12	;AN000;
 25189                                  
 25190 00001D1B 2E800E[F614]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020 ;AC034;;could be valid switch, first char and is slash
 25191                                  ;	.ENDIF				;AN020;
 25192                                  
 25193                                  	; 12/12/2022
 25194                                  	; cf=0
 25195                                  	;retn
 25196                                  
 25197                                  _$P_STRUC_L5:
 25198                                  	; 12/12/2022
 25199                                  _$P_STRUC_L12:				;AN000;
 25200 00001D21 F8                      	clc				;AN020;CF=0 indicating first char
 25201                                  ;	.ENDIF				;AN020;
 25202                                  _$P_STRUC_L1:				;AN000;
 25203 00001D22 C3                      	retn				;AN000;
 25204                                  
 25205                                  ;**************************************************************************
 25206                                  ; _$P_Chk_DBCS:
 25207                                  ;
 25208                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 25209                                  ;
 25210                                  ;  Input:
 25211                                  ;	  AL	= Code to be examineed
 25212                                  ;
 25213                                  ;  Output:
 25214                                  ;	  If CF is on then a lead byte of DBCS
 25215                                  ;
 25216                                  ; Use: INT 21h w/AH=63
 25217                                  ;
 25218                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 25219                                  ;***************************************************************************
 25220                                  
 25221                                  _$P_Chk_DBCS:
 25222 00001D23 1E                      	push	ds			;AN000;
 25223 00001D24 56                      	push	si			;AN000;
 25224 00001D25 53                      	push	bx			;AN000; (tm11)
 25225                                  	;cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 25226                                  	;jne	short _$P_DBCS00	;AN000;
 25227                                  	; 08/07/2023
 25228 00001D26 2E8B36[F314]            	mov	si,[cs:_$P_DBCSEV_SEG]
 25229 00001D2B 21F6                    	and	si,si ; 0 ?
 25230 00001D2D 7525                    	jnz	short _$P_DBCS00 ; already set
 25231 00001D2F 50                      	push	ax			;AN000;
 25232 00001D30 1E                      	push	ds			;AN000; (tm11)
 25233 00001D31 51                      	push	cx			;AN000;
 25234 00001D32 52                      	push	dx			;AN000;
 25235 00001D33 57                      	push	di			;AN000;
 25236 00001D34 55                      	push	bp			;AN000;
 25237 00001D35 06                      	push	es			;AN000;
 25238                                  	; si = 0 ; 08/07/2023
 25239                                  	;xor	si,si			;AN000;
 25240 00001D36 8EDE                    	mov	ds,si ; 0		;AN000;
 25241 00001D38 B80063                  	mov	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 25242 00001D3B CD21                    	int	21h			;AN000;
 25243                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 25244 00001D3D 8CDB                    	mov	bx,ds			;AN000; (tm11)
 25245 00001D3F 09DB                    	or	bx,bx			;AN000; (tm11)
 25246 00001D41 07                      	pop	es			;AN000;
 25247 00001D42 5D                      	pop	bp			;AN000;
 25248 00001D43 5F                      	pop	di			;AN000;
 25249 00001D44 5A                      	pop	dx			;AN000;
 25250 00001D45 59                      	pop	cx			;AN000;
 25251 00001D46 1F                      	pop	ds			;AN000; (tm11)
 25252 00001D47 58                      	pop	ax			;AN000;
 25253 00001D48 7424                    	jz	short _$P_NON_DBCS	;AN000;
 25254                                  _$P_DBCS02:				;AN000;
 25255 00001D4A 2E8936[F114]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 25256 00001D4F 2E891E[F314]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 25257                                  _$P_DBCS00:				;AN000;
 25258                                  	;mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 25259                                  	;mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 25260                                  	; 08/07/2023
 25261 00001D54 2EC536[F114]            	lds	si,[cs:_$P_DBCSEV_OFF]
 25262                                  _$P_DBCS_LOOP:				;AN000;
 25263 00001D59 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 25264 00001D5C 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 25265 00001D5E 3A04                    	cmp	al,[si] 		;AN000;
 25266 00001D60 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 25267 00001D62 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 25268 00001D65 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 25269 00001D67 F9                      	stc				;AN000; if yes, indicate DBCS and exit
 25270 00001D68 EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 25271                                  _$P_DBCS01:				;AN000;
 25272 00001D6A 46                      	inc	si			;AC035; add '2' to
 25273 00001D6B 46                      	inc	si			;AC035;  SI reg
 25274                                  					;AN000; get next vector
 25275 00001D6C EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 25276                                  _$P_NON_DBCS:				;AN000;
 25277                                  	; 12/12/2022
 25278                                  	; cf=0
 25279                                  	;clc				;AN000; indicate SBCS
 25280                                  _$P_DBCS_EXIT:				;AN000;
 25281 00001D6E 5B                      	pop	bx			;AN000; (tm11)
 25282 00001D6F 5E                      	pop	si			;AN000;
 25283 00001D70 1F                      	pop	ds			;AN000;
 25284 00001D71 C3                      	retn				;AN000;
 25285                                  
 25286                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 25287                                  ; ======================================================================
 25288                                  ; 27/03/2019 - Retro DOS v4.0
 25289                                  
 25290                                  ;control block definitions for parser.
 25291                                  ;-----------------------------------------------------------------------
 25292                                  ; buffer = [n | n,m] {/e}
 25293                                  
 25294                                  ; 30/03/2019
 25295                                  
 25296                                  struc p_parms
 25297 00000000 ????                    	resw	1	; dw ?
 25298 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 25299 00000003 ??                      	resb	1	; db 1	; length is 1
 25300 00000004 ??                      	resb 	1	; db ';' ; delimiter
 25301                                  .size:
 25302                                  endstruc
 25303                                  
 25304                                  struc p_pos
 25305 00000000 ????                    	resw	1	; dw ?	; numeric value??
 25306 00000002 ????                    	resw	1	; dw ?	; function
 25307 00000004 ????                    	resw	1	; dw ?	; result value buffer
 25308                                  
 25309                                  ; note: by defining result_val before this structure, we could remove
 25310                                  ;  the "result_val" from every structure invocation
 25311                                  
 25312 00000006 ????                    	resw	1	; dw ?	; value list
 25313 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 25314                                  .size:
 25315                                  endstruc
 25316                                  
 25317                                  struc	p_range
 25318 00000000 ??                      	resb	1	; db 1	; range definition
 25319 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 25320 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 25321 00000003 ????????                	resd	1	; dd ?	; numeric min
 25322 00000007 ????????                	resd	1	; dd ?	; numeric max
 25323                                  .size:
 25324                                  endstruc
 25325                                  
 25326                                  ;-----------------------------------------------------------------------
 25327                                  
 25328                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25329                                  	; (SYSINIT:1F48h)
 25330                                  
 25331                                  	; 08/07/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25332                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2083h
 25333                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:251Dh) ; (Retro DOS v5.0)
 25334                                  
 25335                                  ; buffer = [n | n,m] {/e}
 25336                                  
 25337                                  ;buf_parms p_parms <buf_parmsx>
 25338                                  buf_parms: 
 25339 00001D72 [771D]                  	dw	buf_parmsx
 25340 00001D74 01                      	db	1	; an extra delimiter list
 25341 00001D75 01                      	db	1	; length is 1
 25342 00001D76 3B                      	db	';'	; delimiter
 25343                                  
 25344                                  buf_parmsx:
 25345 00001D77 0102[811D][951D]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 25346 00001D7D 01                      	db	1			; one switch
 25347 00001D7E [A91D]                  	dw	sw_x_ctrl
 25348 00001D80 00                      	db	0			; no keywords
 25349                                  
 25350                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 25351                                  buf_pos1:
 25352 00001D81 0080                    	dw	8000h	; numeric value??
 25353 00001D83 0000                    	dw	0	; function
 25354 00001D85 [BB1D]                  	dw	result_val ; result value buffer	
 25355 00001D87 [8A1D]                  	dw	buf_range_1 ; value list
 25356 00001D89 00                      	db	0  	; no switches/keywords
 25357                                  
 25358                                  ;buf_range_1 p_range <,,,1,99>		; M050
 25359                                  buf_range_1:
 25360 00001D8A 01                      	db	1	; range definition
 25361 00001D8B 01                      	db	1	; 1 definition of range
 25362 00001D8C 01                      	db	1	; item tag for this range
 25363 00001D8D 01000000                	dd	1	; numeric min
 25364 00001D91 63000000                	dd	99	; numeric max
 25365                                  
 25366                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 25367                                  buf_pos2:
 25368 00001D95 0180                    	dw	8001h
 25369 00001D97 0000                    	dw	0
 25370 00001D99 [BB1D]                  	dw	result_val	
 25371 00001D9B [9E1D]                  	dw	buf_range_2
 25372 00001D9D 00                      	db	0
 25373                                  
 25374                                  ;buf_range_2 p_range <,,,0,8>
 25375                                  buf_range_2:
 25376 00001D9E 01                      	db	1
 25377 00001D9F 01                      	db	1
 25378 00001DA0 01                      	db	1
 25379 00001DA1 00000000                	dd	0
 25380 00001DA5 08000000                	dd	8
 25381                                  
 25382                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 25383                                  sw_x_ctrl:
 25384 00001DA9 0000                    	dw	0
 25385 00001DAB 0000                    	dw	0
 25386 00001DAD [BB1D]                  	dw	result_val	
 25387 00001DAF [BA1D]                  	dw	noval
 25388 00001DB1 01                      	db	1	; 1 switch
 25389                                  	
 25390                                  switch_x:
 25391 00001DB2 2F5800                  	db	'/X',0		; M016
 25392                                  
 25393                                  p_buffers:
 25394 00001DB5 0000                    	dw	0	; local variables
 25395                                  p_h_buffers:
 25396 00001DB7 0000                    	dw	0
 25397                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25398                                  p_buffer_slash_x:
 25399 00001DB9 00                      	db	0 ; 31/03/2019
 25400                                  
 25401                                  ;-- common definitions -------------------------------------------------
 25402                                  
 25403 00001DBA 00                      noval:	db	0
 25404                                  
 25405                                  result_val: 	;label	byte
 25406 00001DBB 00                      	db	0		; type returned
 25407                                  result_val_itag:
 25408 00001DBC 00                      	db	0		; item tag returned
 25409                                  result_val_swoff:
 25410 00001DBD 0000                    	dw	0		; es:offset of the switch defined
 25411                                  rv_byte:	;label	byte
 25412 00001DBF 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 25413                                  
 25414                                  ;-----------------------------------------------------------------------
 25415                                  
 25416                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25417                                  	; (SYSINIT:1F99h)
 25418                                  
 25419                                  ; break = [ on | off ]
 25420                                  
 25421                                  ;brk_parms p_parms  <brk_parmsx>
 25422                                  brk_parms:
 25423 00001DC3 [C81D]                  	dw	brk_parmsx
 25424 00001DC5 01                      	db	1	; an extra delimiter list
 25425 00001DC6 01                      	db	1	; length is 1
 25426 00001DC7 3B                      	db	';'	; delimiter
 25427                                  
 25428                                  brk_parmsx:
 25429 00001DC8 0101[CE1D]              	dw	101h,brk_pos	; min,max = 1 positional
 25430 00001DCC 00                      	db	0		; no switches
 25431 00001DCD 00                      	db	0		; no keywords
 25432                                  
 25433                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 25434                                  brk_pos:
 25435 00001DCE 0020                    	dw	2000h
 25436 00001DD0 0000                    	dw	0
 25437 00001DD2 [BB1D]                  	dw	result_val	
 25438 00001DD4 [D71D]                  	dw	on_off_string
 25439 00001DD6 00                      	db	0
 25440                                  
 25441                                  on_off_string:	;label	byte
 25442 00001DD7 03                      	db	3		; signals that there is a string choice
 25443 00001DD8 00                      	db	0		; no range definition
 25444 00001DD9 00                      	db	0		; no numeric values choice
 25445 00001DDA 02                      	db	2		; 2 strings for choice
 25446 00001DDB 01                      	db	1		; the 1st string tag
 25447 00001DDC [E11D]                  	dw	on_string
 25448 00001DDE 02                      	db	2		; the 2nd string tag
 25449 00001DDF [E41D]                  	dw	off_string
 25450                                  
 25451                                  on_string:
 25452 00001DE1 4F4E00                  	db	"ON",0
 25453                                  off_string:
 25454 00001DE4 4F464600                	db	"OFF",0
 25455                                  
 25456                                  p_ctrl_break:
 25457 00001DE8 00                      	db	0	; local variable
 25458                                  
 25459                                  ;-----------------------------------------------------------------------
 25460                                  
 25461                                  	; 27/10/2022
 25462                                  
 25463                                  ; country = n {m {path}}
 25464                                  ; or
 25465                                  ; country = n,,path
 25466                                  
 25467                                  ;cntry_parms p_parms <cntry_parmsx>
 25468                                  cntry_parms:
 25469 00001DE9 [EE1D]                  	dw	cntry_parmsx
 25470 00001DEB 01                      	db	1
 25471 00001DEC 01                      	db	1
 25472 00001DED 3B                      	db	';'
 25473                                  	
 25474                                  cntry_parmsx:
 25475 00001DEE 0103[F81D][0C1E]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 25475 00001DF4 [151E]             
 25476 00001DF6 00                      	db	0		; no switches
 25477 00001DF7 00                      	db	0		; no keywords
 25478                                  
 25479                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 25480                                  cntry_pos1:
 25481 00001DF8 0080                    	dw	8000h
 25482 00001DFA 0000                    	dw	0
 25483 00001DFC [BB1D]                  	dw	result_val	
 25484 00001DFE [011E]                  	dw	cc_range
 25485 00001E00 00                      	db	0
 25486                                  
 25487                                  ;cc_range p_range <,,,1,999>
 25488                                  cc_range:
 25489 00001E01 01                      	db	1
 25490 00001E02 01                      	db	1
 25491 00001E03 01                      	db	1
 25492 00001E04 01000000                	dd	1
 25493 00001E08 E7030000                	dd	999
 25494                                  
 25495                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 25496                                  cntry_pos2:
 25497 00001E0C 0180                    	dw	8001h
 25498 00001E0E 0000                    	dw	0
 25499 00001E10 [BB1D]                  	dw	result_val	
 25500 00001E12 [011E]                  	dw	cc_range
 25501 00001E14 00                      	db	0
 25502                                  
 25503                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 25504                                  cntry_pos3:
 25505 00001E15 0102                    	dw	201h
 25506 00001E17 0000                    	dw	0
 25507 00001E19 [BB1D]                  	dw	result_val	
 25508 00001E1B [BA1D]                  	dw	noval
 25509 00001E1D 00                      	db	0	
 25510                                  
 25511                                  p_cntry_code:
 25512 00001E1E 0000                    	dw	0	; local variable
 25513                                  p_code_page:
 25514 00001E20 0000                    	dw	0	; local variable
 25515                                  
 25516                                  ;-----------------------------------------------------------------------
 25517                                  
 25518                                  	; 27/10/2022
 25519                                  
 25520                                  ; files = n
 25521                                  
 25522                                  ;files_parms p_parms <files_parmsx>
 25523                                  files_parms:
 25524 00001E22 [271E]                  	dw	files_parmsx
 25525 00001E24 01                      	db	1
 25526 00001E25 01                      	db	1
 25527 00001E26 3B                      	db	';'
 25528                                  
 25529                                  files_parmsx:
 25530 00001E27 0101[2D1E]              	dw	101h,files_pos	; min,max 1 positional
 25531 00001E2B 00                      	db	0		; no switches
 25532 00001E2C 00                      	db	0		; no keywords
 25533                                  
 25534                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 25535                                  files_pos:
 25536 00001E2D 0080                    	dw	8000h
 25537 00001E2F 0000                    	dw	0
 25538 00001E31 [BB1D]                  	dw	result_val	
 25539 00001E33 [361E]                  	dw	files_range
 25540 00001E35 00                      	db	0
 25541                                  
 25542                                  ;files_range p_range <,,,8,255>
 25543                                  files_range:
 25544 00001E36 01                      	db	1
 25545 00001E37 01                      	db	1
 25546 00001E38 01                      	db	1
 25547 00001E39 08000000                	dd	8
 25548 00001E3D FF000000                	dd	255
 25549                                  
 25550                                  p_files:
 25551 00001E41 00                      	db	0		; local variable
 25552                                  
 25553                                  ;-----------------------------------------------------------------------
 25554                                  
 25555                                  	; 27/10/2022
 25556                                  
 25557                                  ; fcbs = n,m
 25558                                  
 25559                                  ;fcbs_parms p_parms <fcbs_parmsx>
 25560                                  fcbs_parms:
 25561 00001E42 [471E]                  	dw	fcbs_parmsx
 25562 00001E44 01                      	db	1
 25563 00001E45 01                      	db	1
 25564 00001E46 3B                      	db	';'
 25565                                  
 25566                                  fcbs_parmsx:
 25567 00001E47 0102[4F1E][631E]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 25568 00001E4D 00                      	db	0		; no switches
 25569 00001E4E 00                      	db	0		; no keywords
 25570                                  
 25571                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 25572                                  fcbs_pos_1:
 25573 00001E4F 0080                    	dw	8000h
 25574 00001E51 0000                    	dw	0
 25575 00001E53 [BB1D]                  	dw	result_val	
 25576 00001E55 [581E]                  	dw	fcbs_range
 25577 00001E57 00                      	db	0
 25578                                  
 25579                                  ;fcbs_range p_range <,,,1,255>
 25580                                  fcbs_range:
 25581 00001E58 01                      	db	1
 25582 00001E59 01                      	db	1
 25583 00001E5A 01                      	db	1
 25584 00001E5B 01000000                	dd	1
 25585 00001E5F FF000000                	dd	255
 25586                                  
 25587                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 25588                                  fcbs_pos_2:
 25589 00001E63 0080                    	dw	8000h
 25590 00001E65 0000                    	dw	0
 25591 00001E67 [BB1D]                  	dw	result_val	
 25592 00001E69 [6C1E]                  	dw	fcbs_keep_range
 25593 00001E6B 00                      	db	0
 25594                                  
 25595                                  ;fcbs_keep_range p_range <,,,0,255>
 25596                                  fcbs_keep_range:
 25597 00001E6C 01                      	db	1
 25598 00001E6D 01                      	db	1
 25599 00001E6E 01                      	db	1
 25600 00001E6F 00000000                	dd	0
 25601 00001E73 FF000000                	dd	255
 25602                                  
 25603 00001E77 00                      p_fcbs:	db	0		; local variable
 25604 00001E78 00                      p_keep:	db	0		; local variable
 25605                                  
 25606                                  ;-----------------------------------------------------------------------
 25607                                  
 25608                                  	; 27/10/2022
 25609                                  
 25610                                  ; lastdrive = x
 25611                                  
 25612                                  ;ldrv_parms p_parms <ldrv_parmsx>
 25613                                  ldrv_parms:
 25614 00001E79 [7E1E]                  	dw	ldrv_parmsx
 25615 00001E7B 01                      	db	1
 25616 00001E7C 01                      	db	1
 25617 00001E7D 3B                      	db	';'
 25618                                  
 25619                                  ldrv_parmsx:
 25620 00001E7E 0101[841E]              	dw	101h,ldrv_pos	; min,max = 1 positional
 25621 00001E82 00                      	db	0		; no switches
 25622 00001E83 00                      	db	0		; no keywords
 25623                                  
 25624                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 25625                                  ldrv_pos:				    ; remove colon at end
 25626 00001E84 1001                    	dw	110h
 25627 00001E86 1000                    	dw	10h
 25628 00001E88 [BB1D]                  	dw	result_val	
 25629 00001E8A [BA1D]                  	dw	noval
 25630 00001E8C 00                      	db	0
 25631                                  	
 25632 00001E8D 00                      p_ldrv:	db	0		; local variable
 25633                                  
 25634                                  ;-----------------------------------------------------------------------
 25635                                  
 25636                                  	; 27/10/2022
 25637                                  
 25638                                  ; stacks = n,m
 25639                                  
 25640                                  ;stks_parms p_parms <stks_parmsx>
 25641                                  stks_parms:
 25642 00001E8E [931E]                  	dw	stks_parmsx
 25643 00001E90 01                      	db	1
 25644 00001E91 01                      	db	1
 25645 00001E92 3B                      	db	';'
 25646                                  
 25647                                  stks_parmsx:
 25648 00001E93 0202[9B1E][AF1E]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 25649 00001E99 00                      	db	0		; no switches
 25650 00001E9A 00                      	db	0		; no keywords
 25651                                  
 25652                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 25653                                  stks_pos_1:
 25654 00001E9B 0080                    	dw	8000h
 25655 00001E9D 0000                    	dw	0
 25656 00001E9F [BB1D]                  	dw	result_val	
 25657 00001EA1 [A41E]                  	dw	stks_range
 25658 00001EA3 00                      	db	0
 25659                                  
 25660                                  ;stks_range p_range <,,,0,64>
 25661                                  stks_range:
 25662 00001EA4 01                      	db	1
 25663 00001EA5 01                      	db	1
 25664 00001EA6 01                      	db	1
 25665 00001EA7 00000000                	dd	0
 25666 00001EAB 40000000                	dd	64
 25667                                  
 25668                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 25669                                  stks_pos_2:
 25670 00001EAF 0080                    	dw	8000h
 25671 00001EB1 0000                    	dw	0
 25672 00001EB3 [BB1D]                  	dw	result_val	
 25673 00001EB5 [B81E]                  	dw	stk_size_range
 25674 00001EB7 00                      	db	0
 25675                                  
 25676                                  ;stk_size_range p_range <,,,0,512>
 25677                                  stk_size_range:
 25678 00001EB8 01                      	db	1
 25679 00001EB9 01                      	db	1
 25680 00001EBA 01                      	db	1
 25681 00001EBB 00000000                	dd	0
 25682 00001EBF 00020000                	dd	512	
 25683                                  
 25684                                  p_stack_count:
 25685 00001EC3 0000                    	dw	0	; local variable
 25686                                  p_stack_size:
 25687 00001EC5 0000                    	dw	0	; local variable
 25688                                  
 25689                                  ;-----------------------------------------------------------------------
 25690                                  
 25691                                  	; 27/10/2022
 25692                                  
 25693                                  ; multitrack = [ on | off ]
 25694                                  
 25695                                  ;mtrk_parms p_parms <mtrk_parmsx>
 25696                                  mtrk_parms:
 25697 00001EC7 [CC1E]                  	dw	mtrk_parmsx
 25698 00001EC9 01                      	db	1
 25699 00001ECA 01                      	db	1
 25700 00001ECB 3B                      	db	';'
 25701                                  
 25702                                  mtrk_parmsx:
 25703 00001ECC 0101[D21E]              	dw	101h,mtrk_pos	; min,max = 1 positional
 25704 00001ED0 00                      	db	0		; no switches
 25705 00001ED1 00                      	db	0		; no keywords
 25706                                  
 25707                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 25708                                  mtrk_pos:
 25709 00001ED2 0020                    	dw	2000h
 25710 00001ED4 0000                    	dw	0
 25711 00001ED6 [BB1D]                  	dw	result_val	
 25712 00001ED8 [D71D]                  	dw	on_off_string
 25713 00001EDA 00                      	db	0
 25714                                  
 25715 00001EDB 00                      p_mtrk:	db	0		; local variable
 25716                                  
 25717                                  ;-----------------------------------------------------------------------
 25718                                  
 25719                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25720                                  	; (SYSINIT:20B2h)
 25721                                  
 25722                                  ; switches=/k
 25723                                  
 25724                                  ;swit_parms p_parms <swit_parmsx>
 25725                                  swit_parms:
 25726 00001EDC [E11E]                  	dw	swit_parmsx
 25727 00001EDE 01                      	db	1
 25728 00001EDF 01                      	db	1
 25729 00001EE0 3B                      	db	';'
 25730                                  
 25731                                  swit_parmsx:
 25732 00001EE1 0000                    	dw	0		; no positionals
 25733                                  	; 08/07/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS, SYSINIT)
 25734 00001EE3 05                      	db	5               ; # of switches
 25735                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 25736                                  	;db	3
 25737 00001EE4 [EF1E]                  	dw	swit_k_ctrl	; /k control
 25738                                  	; 01/01/2023 - Retro DOS v4.2 ; *
 25739 00001EE6 [FB1E]                  	dw	swit_n_ctrl ; * ; /n control (for MULTI_CONFIG only)
 25740 00001EE8 [071F]                  	dw	swit_f_ctrl ; * ; /f control (for MULTI_CONFIG only)
 25741 00001EEA [131F]                  	dw	swit_t_ctrl     ; /t control
 25742 00001EEC [1F1F]                  	dw	swit_w_ctrl     ; /w control
 25743 00001EEE 00                      	db	0		; no keywords
 25744                                  
 25745                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25746                                  swit_k_ctrl:
 25747 00001EEF 00000000[BB1D]-         	dw	0,0,result_val,noval
 25747 00001EF5 [BA1D]             
 25748 00001EF7 01                      	db	1
 25749 00001EF8 2F4B00                  swit_k:	db	'/K',0
 25750                                  
 25751                                  ; 01/01/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS)
 25752                                  ; (SYSINIT:220Ch) ; *
 25753                                  
 25754                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 25755                                  ;
 25756                                  ;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25757                                  swit_n_ctrl: ; *
 25758 00001EFB 00000000[BB1D]-         	dw	0,0,result_val,noval
 25758 00001F01 [BA1D]             
 25759 00001F03 01                      	db	1
 25760 00001F04 2F4E00                  swit_n: db	'/N',0
 25761                                  
 25762                                  ;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25763                                  swit_f_ctrl: ; *
 25764 00001F07 00000000[BB1D]-         	dw	0,0,result_val,noval
 25764 00001F0D [BA1D]             
 25765 00001F0F 01                      	db	1
 25766 00001F10 2F4600                  swit_f: db 	'/F',0
 25767                                  
 25768                                  	; 27/10/2022
 25769                                  
 25770                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 25771                                  swit_t_ctrl:
 25772 00001F13 00000000[BB1D]-         	dw	0,0,result_val,noval
 25772 00001F19 [BA1D]             
 25773 00001F1B 01                      	db	1
 25774 00001F1C 2F5400                  swit_t:	db	'/T',0			   ;				M059
 25775                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 25776                                  swit_w_ctrl:
 25777 00001F1F 00000000[BB1D]-         	dw	0,0,result_val,noval
 25777 00001F25 [BA1D]             
 25778 00001F27 01                      	db	1
 25779 00001F28 2F5700                  swit_w:	db	'/W',0			   ;				M063
 25780                                  
 25781                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 25782                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 25783                                  ;   in the above table to prevent the parsing code from complaining about them
 25784                                  
 25785 00001F2B 00                      p_swit_k:	db     0	; local variable
 25786 00001F2C 00                      p_swit_t:	db     0	; local variable			M059
 25787 00001F2D 00                      p_swit_w:	db     0	; local variable			M063
 25788                                  
 25789                                  ;-----------------------------------------------------------------------
 25790                                  
 25791                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25792                                  	; (SYSINIT:20E8h)
 25793                                  
 25794                                  ; DOS = [ high | low ]
 25795                                  
 25796                                  ;dos_parms p_parms  <dos_parmsx>
 25797                                  dos_parms:
 25798 00001F2E [331F]                  	dw	dos_parmsx
 25799 00001F30 01                      	db	1
 25800 00001F31 01                      	db	1
 25801 00001F32 3B                      	db	';'
 25802                                  dos_parmsx:
 25803 00001F33 01                      	db	1		; min parameters
 25804 00001F34 02                      	db	2		; max parameters
 25805 00001F35 [3B1F]                  	dw	dos_pos		; 
 25806 00001F37 [3B1F]                  	dw	dos_pos		; 
 25807 00001F39 00                      	db	0		; no switches
 25808 00001F3A 00                      	db	0		; no keywords
 25809                                  
 25810                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 25811                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 25812                                  dos_pos:
 25813 00001F3B 00200000[BB1D]-         	dw	2000h,0,result_val,dos_strings
 25813 00001F41 [4D1F]             
 25814 00001F43 00                      	db	0
 25815 00001F44 00200000[BB1D]-         	dw	2000h,0,result_val,dos_strings
 25815 00001F4A [4D1F]             
 25816 00001F4C 00                      	db	0	
 25817                                  
 25818                                  dos_strings:	;label	byte
 25819 00001F4D 03                      	db	3		; signals that there is a string choice
 25820 00001F4E 00                      	db	0		; no range definition
 25821 00001F4F 00                      	db	0		; no numeric values choice
 25822 00001F50 04                      	db	4		; 4 strings for choice
 25823 00001F51 01                      	db	1		; the 1st string tag
 25824 00001F52 [5D1F]                  	dw	hi_string
 25825 00001F54 02                      	db	2		; the 2nd string tag
 25826 00001F55 [621F]                  	dw	lo_string
 25827 00001F57 03                      	db	3
 25828 00001F58 [661F]                  	dw	umb_string
 25829 00001F5A 04                      	db	4
 25830 00001F5B [6A1F]                  	dw	noumb_string
 25831                                  
 25832 00001F5D 4849474800              hi_string:	db	"HIGH",0
 25833 00001F62 4C4F5700                lo_string:	db	"LOW",0
 25834 00001F66 554D4200                umb_string:	db	"UMB",0
 25835 00001F6A 4E4F554D4200            noumb_string:	db	"NOUMB",0
 25836                                  
 25837 00001F70 00                      p_dos_hi:	db	0	; local variable
 25838                                  				; BUGBUG : I dont know whether PARSER uses
 25839                                  				;          this variable or not
 25840                                  
 25841                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25842                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25843                                  ;%if 0
 25844                                  
 25845                                  ;****************************************************************** RICHID ****
 25846                                  
 25847                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 25848                                  
 25849                                  ; 30/03/2019 - Retro DOS v4.0
 25850                                  ;------------------------------------------------------------------------------
 25851                                  
 25852                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 25853                                  ;
 25854                                  ;   Date:     May 14, 1992
 25855                                  ;
 25856                                  ;******************************************************************************
 25857                                  ;
 25858                                  ;   Modification log:
 25859                                  ;
 25860                                  ;     DATE    WHO      DESCRIPTION
 25861                                  ;   --------  -------  --------------------------------------------------------
 25862                                  ;   05/14/92  t-richj  Original
 25863                                  ;   06/21/92  t-richj  Final revisions before check-in
 25864                                  ;
 25865                                  ;******************************************************************************
 25866                                  ;
 25867                                  ; There are two primary definitions which need to be made, selectively, before
 25868                                  ; this include file should be used.  These are:
 25869                                  ;    HV_Extern - If this has been defined, variables for this module will be
 25870                                  ;                declared as external.  Otherwise, variables will be declared
 25871                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 25872                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 25873                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 25874                                  ;                (as only one module, sysconf.asm, includes this file).
 25875                                  ;    HV_LoadHigh - This should be defined when this module is going into
 25876                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 25877                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 25878                                  ;
 25879                                  ;******************************************************************************
 25880                                  
 25881                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 25882                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 25883                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 25884                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 25885                                  ; space problem (it's just such a nice round number, eh?).
 25886                                  
 25887                                  MAXUMB	equ	16
 25888                                  
 25889                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 25890                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 25891                                  
 25892                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 25893                                  SystemPSPOwner	equ	8
 25894                                  ;JapanPSPOwner	equ	9
 25895                                  
 25896                                  ; for LoadHigh and DeviceHigh:
 25897                                  ;
 25898                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 25899                                  ;	          UnHideUMBs().
 25900                                  ;	fUmbTiny - Is set to 1 if the user has specified /S on the command-
 25901                                  ;	           line.
 25902                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 25903                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 25904                                  ;	          given a command-line like "/L:3,500;4"
 25905                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 25906                                  ;	          matching its index number was specified on the command-line;
 25907                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 25908                                  ;	          will be set to 1. All others will be set to 0.
 25909                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 25910                                  ;	          specified by the user for a UMB (in the above example, all
 25911                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 25912                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 25913                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 25914                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 25915                                  ;	           for details).
 25916                                  
 25917 00001F71 00                      fInHigh:  db	0
 25918 00001F72 00                      fUmbTiny: db	0
 25919 00001F73 0000                    SegLoad:  dw	0
 25920 00001F75 00                      UmbLoad:  db	0
 25921 00001F76 00<rep 10h>             UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 25922 00001F86 0000<rep 10h>           UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 25923 00001FA6 00                      fm_umb:   db	0
 25924 00001FA7 00                      fm_strat: db	0
 25925 00001FA8 00                      fm_argc:  db	0	
 25926                                  
 25927                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 25928                                  ; UmbLoad is set to the UMB number given.
 25929                                  
 25930                                  UNSPECIFIED	equ	-1
 25931                                  
 25932                                  ;%endif ; 27/10/2022
 25933                                  
 25934                                  ;****************************************************************** RICHID ****
 25935                                  
 25936                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 25937                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 25938                                  
 25939                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25940                                  ; (SYSINIT:212Bh)	
 25941                                  
 25942                                  		;public	DevEntry
 25943                                  
 25944 00001FA9 0000                    DevSize:	dw	0	; size of the device driver being loaded (paras)
 25945 00001FAB 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 25946 00001FAD 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 25947 00001FAF 00000000                DevEntry:	dd	0	; Entry point to the device driver
 25948 00001FB3 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 25949                                  ; 30/12/2022
 25950                                  ; 27/10/2022 
 25951 00001FB7 00                      ConvLoad:	db	0	; Use conventional (dos 5 style) InitDevLoad?
 25952                                  ;
 25953 00001FB8 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 25954 00001FB9 0000                    DevUMBAddr:	dw	0	; current UMB used for loading devices (paras)
 25955 00001FBB 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 25956 00001FBD 0000                    DevUMBFree:	dw	0	; Start of free mem blk in the current UMB (paras)
 25957                                  ;
 25958 00001FBF 00000000                DevXMSAddr:	dd	0
 25959                                  ;
 25960 00001FC3 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 25961 00001FC5 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 25962                                  ;
 25963 00001FC7 00                      DeviceHi:	db	0	; Flag indicating whether the current device
 25964                                  				;  is being loaded into UMB
 25965 00001FC8 0000                    DevSizeOption:	dw	0	; SIZE= option
 25966                                  ;
 25967 00001FCA 00                      Int12Lied:	db	0	; did we trap int 12h ?
 25968 00001FCB 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12h ram)
 25969 00001FCD 50524F544D414E24        ThreeComName:	db	'PROTMAN$' ; 3Com Device name
 25970                                  ;
 25971 00001FD5 00                      FirstUMBLinked:	db	0
 25972 00001FD6 0000                    DevDOSData:	dw	0	; segment of DOS Data
 25973 00001FD8 00000000                DevCmdLine:	dd	0	; Current Command line
 25974 00001FDC 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 25975                                  				; to use the file name in the command line
 25976                                  ;
 25977                                  ;	ifdef	dblspace_hooks
 25978                                  ;MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 25979                                  ;	endif
 25980                                  
 25981                                  ; ===========================================================================
 25982                                  
 25983                                  ; 31/03/2019 - Retro DOS v4.0
 25984                                  
 25985                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25986                                  ; (SYSINIT:215Eh)
 25987                                  
 25988                                  ;----------------------------------------------------------------------------
 25989                                  ;
 25990                                  ; procedure : doconf
 25991                                  ;
 25992                                  ;             Config file is parsed initially with this routine. For the
 25993                                  ;             Subsequent passes 'multi_pass' entry is used .
 25994                                  ;
 25995                                  ;----------------------------------------------------------------------------
 25996                                  
 25997                                  	; 27/10/2022
 25998                                  doconf:
 25999 00001FDD 0E                      	push	cs
 26000 00001FDE 1F                      	pop	ds
 26001                                  
 26002 00001FDF B80037                  	mov	ax,3700h
 26003                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 26004 00001FE2 CD21                    	int	21h
 26005 00001FE4 8816[E146]              	mov	[command_line+1],dl	; set in default command line
 26006                                  
 26007                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21  IO.SYS)
 26008                                  ; 27/10/2022
 26009                                  ;;ifdef	MULTI_CONFIG
 26010                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 26011 00001FE8 8816[DF46]              	mov	[def_swchr],dl ; 31/03/2019 
 26012                                  ;;endif	;MULTI_CONFIG
 26013                                  
 26014 00001FEC BA[F645]                	mov	dx,config ;'\CONFIG.SYS' ; now pointing to file description
 26015 00001FEF B8003D                  	mov	ax,3D00h
 26016                                  	;mov	ax,OPEN<<8		; open file "config.sys"
 26017 00001FF2 F9                      	stc				; in case of int 24h
 26018 00001FF3 CD21                    	int	21h			; function request
 26019 00001FF5 7309                    	jnc	short noprob		; brif opened okay
 26020                                  
 26021                                  ; 31/12/2022
 26022                                  ; 27/10/2022
 26023                                  ;;ifdef	MULTI_CONFIG
 26024 00001FF7 E83919                  	call	kbd_read		; we still want to give the guy
 26025                                  ;					; a chance to select clean boot!
 26026                                  ;;endif					; (ie, no autoexec.bat processing)
 26027 00001FFA C606[CB02]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 26028 00001FFF C3                      	retn
 26029                                  noprob: 				; get file size (note < 64k!!)
 26030 00002000 89C3                    	mov	bx,ax  ; File handle
 26031 00002002 31C9                    	xor	cx,cx
 26032 00002004 31D2                    	xor	dx,dx
 26033                                  	;mov	ax,4202h
 26034 00002006 B80242                  	mov	ax,(LSEEK<<8)|2
 26035 00002009 CD21                    	int	21h
 26036 0000200B A3[5403]                	mov	[count],ax
 26037                                  
 26038 0000200E 31D2                    	xor	dx,dx
 26039                                  	;mov	ax,4200h
 26040 00002010 B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 26041 00002013 CD21                    	int	21h
 26042                                  
 26043                                  	; 31/12/2022 - Retro DOS v4.2 
 26044 00002015 8B16[A302]              	mov	dx,[ALLOCLIM]		;use current alloclim value
 26045                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26046                                  	;mov	dx,[top_of_cdss] 
 26047                                  
 26048 00002019 A1[5403]                	mov	ax,[count]
 26049 0000201C A3[CE02]                	mov	[config_size],ax	;save the size of config.sys file.
 26050 0000201F E846F1                  	call	ParaRound
 26051 00002022 29C2                    	sub	dx,ax
 26052                                  
 26053                                  ; 31/12/2022
 26054                                  ; 27/10/2022
 26055                                  ;ifdef	MULTI_CONFIG
 26056                                  ;
 26057                                  ;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 26058                                  ;  CONFIG.SYS image, and later for building the initial environment) need
 26059                                  ;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 26060                                  ;  we (may) add a variable to the environment that does not explicity appear
 26061                                  ;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 26062                                  ;  The default setting for CONFIG cannot result in more than 1 paragraph
 26063                                  ;  of extra space, so here we account for it (the worst case of course is
 26064                                  ;  when CONFIG.SYS is some very small size, like 0 -JTP)
 26065                                  ;
 26066 00002024 4A                      	dec	dx                      ;reserve 1 additional paragraph
 26067 00002025 8916[DB14]              	mov	[config_wrkseg],dx      ;this is the segment to be used for
 26068 00002029 29C2                    	sub	dx,ax                   ;rebuilding the config.sys memory image
 26069                                  ;;endif	;MULTI_CONFIG
 26070                                  
 26071 0000202B 83EA11                  	sub	dx,11h			;room for header
 26072                                  	
 26073                                  	; 31/12/2022
 26074 0000202E 8916[A302]              	mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 26075 00002032 8916[A102]              	mov	[CONFBOT],dx
 26076                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26077                                  	;mov	[top_of_cdss],dx
 26078                                  	;call    TempCDS 
 26079                                  	
 26080                                  	; 31/12/2022
 26081                                  	; 11/12/2022
 26082                                  	; ds <> cs 
 26083                                  	;mov	dx,[cs:top_of_cdss]
 26084                                   
 26085 00002036 8EDA                    	mov	ds,dx
 26086 00002038 8EC2                    	mov	es,dx
 26087                                  
 26088 0000203A 31D2                    	xor	dx,dx
 26089 0000203C 2E8B0E[5403]            	mov	cx,[cs:count]
 26090 00002041 B43F                    	mov	ah,3Fh
 26091                                  	;mov	ah,READ  ; 3Fh
 26092 00002043 F9                      	stc				;in case of int 24h
 26093 00002044 CD21                    	int	21h			;function request
 26094 00002046 9C                      	pushf
 26095                                  
 26096                                  ; find the eof mark in the file. if present,then trim length.
 26097                                  
 26098 00002047 50                      	push	ax
 26099 00002048 57                      	push	di
 26100 00002049 51                      	push	cx
 26101 0000204A B01A                    	mov	al,1Ah			; eof mark
 26102 0000204C 89D7                    	mov	di,dx			; point to buffer
 26103 0000204E E305                    	jcxz	puteol			; no chars
 26104 00002050 F2AE                    	repnz	scasb			; find end
 26105 00002052 7501                    	jnz	short puteol		; none found and count exhausted
 26106                                  
 26107                                  ; we found a 1a. back up
 26108                                  
 26109 00002054 4F                      	dec	di			; backup past 1Ah
 26110                                  
 26111                                  ;  just for the halibut, stick in an extra eol
 26112                                  
 26113                                  puteol:
 26114 00002055 B00D                    	mov	al,cr ; 0Dh
 26115 00002057 AA                      	stosb
 26116 00002058 B00A                    	mov	al,lf  ;0Ah
 26117 0000205A AA                      	stosb
 26118 0000205B 29D7                    	sub	di,dx			; difference moved
 26119                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26120                                  	;mov	[cs:count],di		; new count
 26121                                  
 26122                                  	; 11/12/2022	
 26123                                  	; 31/03/2019 - Retro DOS v4.0
 26124 0000205D 0E                      	push	cs
 26125 0000205E 1F                      	pop	ds
 26126                                  
 26127 0000205F 893E[5403]              	mov	[count],di		; new count
 26128                                  
 26129 00002063 59                      	pop	cx
 26130 00002064 5F                      	pop	di
 26131 00002065 58                      	pop	ax
 26132                                  
 26133                                  	; 11/12/2022
 26134                                  	; 27/10/2022
 26135                                  	;push	cs
 26136                                  	;pop	ds
 26137                                  
 26138 00002066 50                      	push	ax
 26139                                  	;mov	ah,CLOSE
 26140 00002067 B43E                    	mov	ah,3Eh
 26141 00002069 CD21                    	int	21h
 26142 0000206B 58                      	pop	ax
 26143 0000206C 9D                      	popf
 26144 0000206D 7204                    	jc	short conferr 		;we've got a problem
 26145 0000206F 39C1                    	cmp	cx,ax			; if ax <(>) cx
 26146 00002071 742D                    	jz	short getcom		;couldn't read the file
 26147                                  conferr:
 26148 00002073 BA[F645]                	mov	dx,config		;print config error
 26149 00002076 E8D324                  	call	badfil
 26150                                  ;endconv:	; 01/01/2023
 26151 00002079 C3                      	retn
 26152                                  
 26153                                  ;----------------------------------------------------------------------------
 26154                                  ;
 26155                                  ; entry : multi_pass
 26156                                  ;
 26157                                  ;             called to execute device=,install= commands
 26158                                  ;
 26159                                  ;----------------------------------------------------------------------------
 26160                                  
 26161                                  	; 27/10/2022
 26162                                  multi_pass:
 26163 0000207A 0E                      	push	cs
 26164 0000207B 1F                      	pop	ds
 26165                                  
 26166 0000207C 803E[CB02]0A            	cmp	byte [multi_pass_id],10
 26167                                  ;jae_endconv:
 26168 00002081 731C                    	jae	short endconv 		; do nothing. just return.
 26169                                  
 26170                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26171 00002083 FF36[A102]              	push	word [CONFBOT]
 26172                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26173                                  	;push	word [top_of_cdss]
 26174 00002087 07                      	pop	es			; es = [confbot] (CONFIG.SYS image seg)
 26175                                  
 26176 00002088 8B36[5603]              	mov	si,[org_count]
 26177 0000208C 8936[5403]              	mov	[count],si		; set count
 26178 00002090 31F6                    	xor	si,si ; 0
 26179 00002092 8936[5803]                      mov     [chrptr],si		; reset chrptr
 26180 00002096 8936[AD02]                      mov     [linecount],si		; reset linecount
 26181                                  
 26182 0000209A E8F408                  	call	getchr
 26183 0000209D EB07                    	jmp	short conflp
 26184                                  
 26185                                  	; 01/01/2023
 26186                                  endconv:
 26187 0000209F C3                      	retn	
 26188                                  
 26189                                  getcom:
 26190                                  	; 03/01/2023
 26191                                  	; ds = cs
 26192 000020A0 E84E16                          call    organize                ; organize the file
 26193 000020A3 E8EB08                  	call	getchr
 26194                                  conflp: 
 26195 000020A6 72F7                    	jc	short endconv
 26196                                  
 26197 000020A8 FF06[AD02]                      inc     word [linecount]	; increase linecount
 26198                                  
 26199 000020AC C606[DF14]00            	mov	byte [multdeviceflag],0	; reset multdeviceflag.
 26200 000020B1 C606[E214]00            	mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 26201 000020B6 3C0A                    	cmp	al,lf			; linefeed?
 26202 000020B8 7449                    	je	short blank_line	; then ignore this line.
 26203                                  
 26204                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26205                                  ; (SYSINIT:23CCh)
 26206                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26207                                  ;%if 0
 26208                                  
 26209                                  ;ifdef	MULTI_CONFIG
 26210                                  
 26211                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 26212                                  ;   number immediately following it....
 26213                                  
 26214 000020BA A2[DD14]                        mov     [config_cmd],al         ; save original command code
 26215                                  	;and	al,NOT CONFIG_OPTION_QUERY
 26216 000020BD 247F                    	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 26217 000020BF 803E[DE14]00                    cmp     byte [config_multi],0	; is this a multi-config config.sys?
 26218 000020C4 7427                            je      short not_final		; no, line number is not embedded
 26219                                  
 26220 000020C6 50                              push    ax                      ;
 26221 000020C7 E8C708                          call    getchr                  ; ignore end-of-image errors,
 26222 000020CA 88C4                            mov     ah,al                   ; because if there's an error
 26223 000020CC E8C208                          call    getchr                  ; fetching the line number that's
 26224 000020CF 86C4                            xchg    al,ah                   ; supposed to be there, the next
 26225 000020D1 A3[AD02]                        mov     [linecount],ax          ; getchr call will get the same error
 26226 000020D4 58                              pop     ax
 26227                                  ;
 26228                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 26229                                  ;   which to obtain its original program name, it grovels through all of
 26230                                  ;   memory to find the filename that was used to exec it; it wants to find
 26231                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 26232                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 26233                                  ;   immediately before the filename, but since we are now storing line # info
 26234                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 26235                                  ;   spot.
 26236                                  ;
 26237                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 26238                                  ;   over the line number info, since we no longer need that info anyway. This
 26239                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 26240                                  ;   retrieved.
 26241                                  ;
 26242 000020D5 803E[CB02]02                    cmp	byte [multi_pass_id],2	; final pass?
 26243 000020DA 7211                            jb	short not_final		; no
 26244                                          ;test	word [install_flag],have_install_cmd
 26245 000020DC F606[CC02]01            	test	byte [install_flag],have_install_cmd ; 1
 26246 000020E1 7407                            jz	short final		; no install cmds, so yes it is
 26247 000020E3 803E[CB02]03                    cmp	byte [multi_pass_id],3	; final pass?
 26248 000020E8 7203                            jb	short not_final		; no
 26249                                  final:                                  ;
 26250 000020EA 268804                  	mov	[es:si],al		; save backward-compatible command code
 26251                                  not_final:                              ;
 26252                                  ;endif
 26253                                  
 26254                                  ; 31/12/2022
 26255                                  ;%endif ; 27/10/2022
 26256                                  
 26257 000020ED 88C4                    	mov	ah,al
 26258 000020EF E89F08                  	call	getchr
 26259 000020F2 7314                    	jnc	short tryi
 26260                                  
 26261 000020F4 803E[CB02]02            	cmp	byte [multi_pass_id],2
 26262                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 26263                                  	; 27/10/2022
 26264 000020F9 73A4                    	jnb	short endconv	
 26265 000020FB E95F08                  	jmp	badop
 26266                                  	
 26267                                  coff:	
 26268                                  	; 11/12/2022
 26269                                  	; ds = cs
 26270                                  	;push	cs
 26271                                  	;pop	ds
 26272 000020FE E8CB21                  	call	newline
 26273 00002101 EBA3                    	jmp	short conflp	; 13/05/2019
 26274                                  
 26275                                  blank_line:
 26276 00002103 E88B08                  	call	getchr
 26277 00002106 EB9E                    	jmp	short conflp
 26278                                  
 26279                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26280                                  ; 11/12/2022
 26281                                  ; (there is not a jump or call to here from anywhere!)
 26282                                  ;coff_p:
 26283                                  	;push	cs
 26284                                  	;pop	ds
 26285                                  
 26286                                  ;to handle install= commands,we are going to use multi-pass.
 26287                                  ;the first pass handles the other commands and only set install_flag when
 26288                                  ;it finds any install command. the second pass will only handle the
 26289                                  ;install= command.
 26290                                  
 26291                                  ;------------------------------------------------------------------------------
 26292                                  ;install command
 26293                                  ;------------------------------------------------------------------------------
 26294                                  
 26295                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26296                                  	; (SYSINIT:2250h)
 26297                                  tryi:
 26298 00002108 803E[CB02]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 26299 0000210D 7503                    	jne	short not_init_pass
 26300 0000210F E97F01                  	jmp	multi_try_doshi
 26301                                  not_init_pass:
 26302 00002112 803E[CB02]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 26303                                          ; 11/12/2022
 26304                                  	;je	short multi_pass_coff2	; now it is NOPs
 26305 00002117 74E5                    	je	short coff
 26306                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26307                                  	;je	short multi_pass_coff	
 26308                                  					; This pass can be made use of if
 26309                                  					; we want do some config.sys process
 26310                                  					; after device drivers are loaded
 26311                                  					; and before install= commands
 26312                                  					; are processed
 26313                                  
 26314 00002119 803E[CB02]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 26315 0000211E 741D                    	je	short multi_try_i
 26316 00002120 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 26317                                  	; 11/12/2022
 26318                                  	;je	short multi_pass_coff2
 26319 00002123 74D9                    	je	short coff
 26320                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26321                                  	;je	short multi_pass_coff	
 26322                                  
 26323                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 26324                                  ;       but don't process them now.        
 26325                                          
 26326 00002125 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 26327                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26328 00002128 7507                    	jne	short precheck_installhigh ; the first pass is for normal operation.
 26329                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26330                                  	;jne	short tryb	
 26331                                  	
 26332                                  	;or	word [install_flag],have_install_cmd ; set the flag
 26333 0000212A 800E[CC02]01            	or	byte [install_flag],have_install_cmd ; 1
 26334                                  multi_pass_coff2:
 26335 0000212F EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 26336                                  
 26337                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26338                                  ; (SYSINIT:2448h)
 26339                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26340                                  ;%if 0
 26341                                  precheck_installhigh:
 26342 00002131 80FC57                  	cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 26343 00002134 756B                    	jne     short tryb		; carry on with normal processing
 26344                                  	;or	word [install_flag],have_install_cmd
 26345 00002136 800E[CC02]01            	or	byte [install_flag],have_install_cmd ; 1
 26346 0000213B EBC1                    	jmp	short coff
 26347                                  ;%endif ; 27/10/2022
 26348                                  
 26349                                  multi_try_i:
 26350 0000213D 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I' ; install= command?
 26351                                  	; 31/12/2022 - Retro DOS v4.2
 26352 00002140 750A                    	jne	short multi_try_n	; no, check for installhigh
 26353                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26354                                  	;jne	short multi_pass_filter
 26355                                  
 26356                                  ; 31/12/2022
 26357                                  ;%if 1 
 26358                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26359                                  ;%if 0
 26360                                  ;ifdef	MULTI_CONFIG
 26361 00002142 E8FC1F                  	call	query_user              ; query the user if config_cmd
 26362 00002145 7241                    	jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 26363                                  ;endif
 26364                                  ;%endif ; 27/10/2022
 26365                                  
 26366 00002147 E89DEF                  	call	do_install_exec 	;install it.
 26367 0000214A EBB2                    	jmp	short coff		;to handle next install= command.
 26368                                  
 26369                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26370                                  ; (SYSINIT:2463h)
 26371                                  ;%if 1
 26372                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26373                                  ;%if 0
 26374                                  
 26375                                  multi_try_n:
 26376 0000214C 80FC57                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 26377 0000214F 7537                            jne	short multi_pass_filter	; no. ignore this.
 26378                                  ;ifdef	MULTI_CONFIG
 26379 00002151 E8ED1F                          call    query_user              ; query the user if config_cmd
 26380 00002154 7232                            jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 26381                                  ;endif
 26382                                  
 26383                                  ;       The memory environment is in its normal DOS state, so do
 26384                                  ;       the standard calls to set the alloc strategy for loading high
 26385                                  
 26386 00002156 B80058                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 26387 00002159 CD21                    	int	21h			;get alloc strategy
 26388 0000215B 89C3                    	mov	bx,ax
 26389 0000215D 53                              push    bx                      ; save for the return
 26390                                  
 26391 0000215E 81CB8000                        or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 26392 00002162 B80158                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 26393 00002165 CD21                    	int	21h			;set alloc strategy
 26394                                  
 26395 00002167 B80258                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 26396 0000216A CD21                            int     21h                     ; get link state
 26397 0000216C 30E4                            xor     ah,ah                   ; clear top byte
 26398 0000216E 50                              push    ax                      ; save for return
 26399                                  
 26400 0000216F B80358                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 26401 00002172 BB0100                  	mov	bx,1
 26402 00002175 CD21                    	int	21h			;link in UMBs
 26403                                  
 26404 00002177 E86DEF                  	call	do_install_exec 	;install it.
 26405                                  
 26406 0000217A B80358                          mov     ax,(ALLOCOPER<<8)|3
 26407 0000217D 5B                              pop     bx                      ; recover original link state
 26408 0000217E CD21                            int     21h
 26409 00002180 5B                              pop     bx                      ; recover original alloc strategy
 26410 00002181 B80158                          mov     ax,(ALLOCOPER<<8)|1
 26411 00002184 CD21                            int     21h
 26412                                  
 26413                                  	;jmp	short coff		;to handle next install= command.
 26414                                  	; 01/01/2023
 26415 00002186 EBA7                    	jmp	short multi_pass_coff2
 26416                                  
 26417                                  ;%endif ; 27/10/2022
 26418                                  
 26419                                  multi_pass_filter:
 26420 00002188 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 26421 0000218B 740A                    	je	short multi_pass_adjust
 26422 0000218D 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 26423 00002190 7405                    	je	short multi_pass_adjust
 26424 00002192 80FC30                          cmp     ah,CONFIG_REM     ; '0' ; rem?
 26425 00002195 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 26426                                  
 26427                                  multi_pass_adjust:			; these commands need to
 26428 00002197 FF0E[5803]              	dec	word [chrptr]		;  adjust chrptr,count
 26429 0000219B FF06[5403]              	inc	word [count]		;  for newline proc.
 26430                                  
 26431                                  multi_pass_coff:
 26432                                  	; 11/12/2022
 26433                                  	;jmp	short coff		; to handle next install= commands.
 26434                                  	; 01/01/2023
 26435 0000219F EB8E                    	jmp	short multi_pass_coff2
 26436                                  
 26437                                  ;------------------------------------------------------------------------------
 26438                                  ; buffer command
 26439                                  ;------------------------------------------------------------------------------
 26440                                  
 26441                                  ;******************************************************************************
 26442                                  ;									      *
 26443                                  ; function: parse the parameters of buffers= command.			      *
 26444                                  ;									      *
 26445                                  ; input :								      *
 26446                                  ;	es:si -> parameters in command line.				      *
 26447                                  ; output:								      *
 26448                                  ;	buffers set							      *
 26449                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 26450                                  ;	h_buffers set if secondary buffer cache specified.		      *
 26451                                  ;									      *
 26452                                  ; subroutines to be called:						      *
 26453                                  ;	sysinit_parse							      *
 26454                                  ; logic:								      *
 26455                                  ; {									      *
 26456                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 26457                                  ;	set dx,cx to 0; 						      *
 26458                                  ;	reset buffer_slash_x;						      *
 26459                                  ;	while (end of command line)					      *
 26460                                  ;	{ sysinit_parse;						      *
 26461                                  ;	  if (no error) then						      *
 26462                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 26463                                  ;		    buffer_slash_x = 1					      *
 26464                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 26465                                  ;			  buffers = result_val._$P_picked_val;		      *
 26466                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 26467                                  ;	  else	{show error message;error exit} 			      *
 26468                                  ;	};								      *
 26469                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 26470                                  ; };									      *
 26471                                  ;									      *
 26472                                  ;******************************************************************************
 26473                                  
 26474                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26475                                  	; (SYSINIT:229Ch)
 26476                                  tryb:
 26477 000021A1 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 26478 000021A4 755C                    	jne	short tryc
 26479                                  
 26480                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26481                                  ; (SYSINIT:24BFh)
 26482                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26483                                  ;%if 0
 26484                                  ;ifdef	MULTI_CONFIG
 26485 000021A6 E8981F                  	call	query_user		; query the user if config_cmd
 26486 000021A9 7257                    	jc	short tryc		; has the CONFIG_OPTION_QUERY bit set
 26487                                  ;endif
 26488                                  ;%endif ; 27/10/2022
 26489                                  
 26490                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26491                                  	; 18/12/2022
 26492 000021AB 31C9                    	xor	cx,cx
 26493                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 26494 000021AD 880E[B91D]              	mov	[p_buffer_slash_x],cl ; 0
 26495                                  
 26496 000021B1 BF[721D]                	mov	di,buf_parms
 26497                                  	;xor	cx,cx	; 18/12/2022
 26498                                  	; 03/01/2023
 26499                                  	;mov	dx,cx
 26500                                  do7:
 26501 000021B4 E88307                  	call	sysinit_parse
 26502 000021B7 7303                    	jnc	short if7		; parse error,
 26503                                  	;call	badparm_p		;  and show messages and end the search loop.
 26504                                  	;;jmp	short sr7
 26505                                  	; 31/12/2022
 26506                                  ;sr7:
 26507                                  	;jmp	coff
 26508                                  	; 03/01/2023
 26509 000021B9 E9AA06                  	jmp	badparm_p_coff
 26510                                  if7:
 26511 000021BC 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 26512 000021BF 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 26513                                  	;cmp	word [result_val_swoff],switch_x ; (/X switch)
 26514 000021C1 813E[BD1D][B21D]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 26515                                  	;jne	short if11
 26516                                  	; 31/12/2022
 26517 000021C7 74EB                    	je	short do7 ;je short en11
 26518                                  
 26519                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 26520                                  	;jmp	short en11 ; 31/12/2022
 26521                                  if11:
 26522                                  	;mov	ax,[rv_dword]
 26523 000021C9 A1[BF1D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 26524 000021CC 83F901                  	cmp	cx,1
 26525 000021CF 7505                    	jne	short if13
 26526                                  
 26527 000021D1 A3[B51D]                	mov	[p_buffers],ax
 26528                                  	;jmp	short en11
 26529                                  	; 31/12/2022
 26530 000021D4 EBDE                    	jmp	short do7
 26531                                  if13:
 26532 000021D6 A3[B71D]                	mov	[p_h_buffers],ax
 26533                                  en11:
 26534 000021D9 EBD9                    	jmp	short do7
 26535                                  en7:
 26536 000021DB 833E[B51D]63            	cmp	word [p_buffers],99
 26537 000021E0 760B                    	jbe	short if18
 26538                                  
 26539                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 26540                                  ;	jne	short if18
 26541                                  
 26542 000021E2 E88407                  	call	badparm_p
 26543 000021E5 C706[B71D]0000          	mov	word [p_h_buffers],0
 26544 000021EB EB12                    	jmp	short sr7
 26545                                  if18:
 26546 000021ED A1[B51D]                	mov	ax,[p_buffers]	; we don't have any problem.
 26547 000021F0 A3[9702]                	mov	[buffers],ax	; now,let's set it really.
 26548                                  
 26549 000021F3 A1[B71D]                	mov	ax,[p_h_buffers]
 26550 000021F6 A3[9902]                	mov	[h_buffers],ax
 26551                                  
 26552                                  ;	mov	al,[p_buffer_slash_x]	; M016
 26553                                  ;	mov	[buffer_slash_x],al
 26554                                  
 26555 000021F9 A1[AD02]                	mov	ax,[linecount]
 26556 000021FC A3[B702]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 26557                                  	; 31/12/2022
 26558                                  	;jmp	short sr7
 26559                                  	; 03/01/2023
 26560                                  sr7:
 26561 000021FF E9FCFE                  	jmp	coff
 26562                                  
 26563                                  ;------------------------------------------------------------------------------
 26564                                  ; break command
 26565                                  ;------------------------------------------------------------------------------
 26566                                  
 26567                                  ;****************************************************************************
 26568                                  ;									    *
 26569                                  ; function: parse the parameters of break = command.			    *
 26570                                  ;									    *
 26571                                  ; input :								    *
 26572                                  ;	es:si -> parameters in command line.				    *
 26573                                  ; output:								    *
 26574                                  ;	turn the control-c check on or off.				    *
 26575                                  ;									    *
 26576                                  ; subroutines to be called:						    *
 26577                                  ;	sysinit_parse							    *
 26578                                  ; logic:								    *
 26579                                  ; {									    *
 26580                                  ;	set di to brk_parms;						    *
 26581                                  ;	set dx,cx to 0; 						    *
 26582                                  ;	while (end of command line)					    *
 26583                                  ;	{ sysinit_parse;						    *
 26584                                  ;	  if (no error) then						    *
 26585                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 26586                                  ;		   set p_ctrl_break,on;					    *
 26587                                  ;	       else					  /*off 	 */ *
 26588                                  ;		   set p_ctrl_break,off;				    *
 26589                                  ;	  else {show message;error_exit};				    *
 26590                                  ;	};								    *
 26591                                  ;	if (no error) then						    *
 26592                                  ;	   dos function call to set ctrl_break check according to	    *
 26593                                  ; };									    *
 26594                                  ;									    *
 26595                                  ;****************************************************************************
 26596                                  
 26597                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26598                                  	; (SYSINIT:22FFh)
 26599                                  tryc:
 26600 00002202 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 26601 00002205 7539                    	jne	short trym
 26602                                  
 26603                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26604                                  ; (SYSINIT:2527h)
 26605                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26606                                  ;%if 0
 26607                                  ;ifdef	MULTI_CONFIG
 26608 00002207 E8371F                  	call	query_user              ; query the user if config_cmd
 26609 0000220A 7234                    	jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 26610                                  ;endif
 26611                                  ;%endif ; 27/10/2022
 26612                                  
 26613 0000220C BF[C31D]                	mov	di,brk_parms
 26614 0000220F 31C9                    	xor	cx,cx
 26615                                  	; 03/01/2023
 26616                                  	;mov	dx,cx
 26617                                  do22:
 26618 00002211 E82607                  	call	sysinit_parse
 26619 00002214 7303                    	jnc	short if22		; parse error
 26620                                  	;call	badparm_p		;  show message and end the search loop.
 26621                                  	;;jmp	short sr22
 26622                                  	; 31/12/2022
 26623                                  ;sr22:
 26624                                  	;jmp	coff
 26625                                  	; 03/01/2023
 26626 00002216 E94D06                  	jmp	badparm_p_coff
 26627                                  if22:
 26628 00002219 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 26629 0000221C 7415                    	je	short en22		; then end the $endloop
 26630                                  
 26631                                  	;cmp	byte [result_val_itag],1
 26632 0000221E 803E[BC1D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 26633 00002223 7507                    	jne	short if26
 26634                                  
 26635 00002225 C606[E81D]01            	mov	byte [p_ctrl_break],1	; turn it on
 26636                                  	;jmp	short en26
 26637                                  	; 31/12/2022
 26638 0000222A EBE5                    	jmp	short do22
 26639                                  if26:
 26640 0000222C C606[E81D]00            	mov	byte [p_ctrl_break],0	; turn it off
 26641                                  en26:
 26642 00002231 EBDE                    	jmp	short do22		; we actually set the ctrl break
 26643                                  en22:
 26644 00002233 B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 26645 00002235 B001                    	mov	al,1
 26646 00002237 8A16[E81D]              	mov	dl,[p_ctrl_break]
 26647 0000223B CD21                    	int	21h
 26648                                  	; 31/12/2022
 26649                                  	;jmp	short sr22
 26650                                  	; 03/01/2023
 26651                                  sr22:
 26652 0000223D E9BEFE                  	jmp	coff
 26653                                  
 26654                                  ;------------------------------------------------------------------------------
 26655                                  ; multitrack command
 26656                                  ;------------------------------------------------------------------------------
 26657                                  
 26658                                  ;******************************************************************************
 26659                                  ;									      *
 26660                                  ; function: parse the parameters of multitrack= command.		      *
 26661                                  ;									      *
 26662                                  ; input :								      *
 26663                                  ;	es:si -> parameters in command line.				      *
 26664                                  ; output:								      *
 26665                                  ;	turn multrk_flag on or off.					      *
 26666                                  ;									      *
 26667                                  ; subroutines to be called:						      *
 26668                                  ;	sysinit_parse							      *
 26669                                  ; logic:								      *
 26670                                  ; {									      *
 26671                                  ;	set di to brk_parms;						      *
 26672                                  ;	set dx,cx to 0; 						      *
 26673                                  ;	while (end of command line)					      *
 26674                                  ;	{ sysinit_parse;						      *
 26675                                  ;	  if (no error) then						      *
 26676                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 26677                                  ;		   set p_mtrk,on;					      *
 26678                                  ;	       else					  /*off 	 */   *
 26679                                  ;		   set p_mtrk,off;					      *
 26680                                  ;	  else {show message;error_exit};				      *
 26681                                  ;	};								      *
 26682                                  ;	if (no error) then						      *
 26683                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 26684                                  ;									      *
 26685                                  ; };									      *
 26686                                  ;									      *
 26687                                  ;******************************************************************************
 26688                                  
 26689                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26690                                  trym:
 26691 00002240 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 26692 00002243 7573                    	jne	short tryu
 26693                                  
 26694                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26695                                  ; (SYSINIT:2569h)
 26696                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26697                                  ;%if 0
 26698                                  ;ifdef	MULTI_CONFIG
 26699 00002245 E8F91E                  	call	query_user      ; query the user if config_cmd
 26700 00002248 726E                    	jc	short tryu	; has the CONFIG_OPTION_QUERY bit set
 26701                                  ;endif
 26702                                  ;%endif	; 27/10/2022
 26703                                  
 26704 0000224A BF[C71E]                	mov	di,mtrk_parms
 26705 0000224D 31C9                    	xor	cx,cx
 26706                                  	; 03/01/2023
 26707                                  	;mov	dx,cx
 26708                                  do31:
 26709 0000224F E8E806                  	call	sysinit_parse
 26710 00002252 7303                    	jnc	short if31	; parse error
 26711                                  	;call	badparm_p	;  show message and end the search loop.
 26712                                  	;;jmp	short sr31
 26713                                  	; 31/12/2022
 26714                                  ;sr31:
 26715                                  	;jmp	coff
 26716                                  	; 03/01/2023
 26717 00002254 E90F06                  	jmp	badparm_p_coff
 26718                                  if31:
 26719 00002257 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 26720 0000225A 7415                    	je	short en31	; then end the $endloop
 26721                                  
 26722                                  	;cmp	byte [result_val_itag],1
 26723 0000225C 803E[BC1D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 26724 00002261 7507                    	jne	short if35
 26725                                  
 26726 00002263 C606[DB1E]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 26727                                  	;jmp	short en35
 26728                                  	; 31/12/2022
 26729 00002268 EBE5                    	jmp	short do31
 26730                                  if35:
 26731 0000226A C606[DB1E]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 26732                                  en35:
 26733 0000226F EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 26734                                  en31:
 26735 00002271 1E                      	push	ds
 26736                                  	;;mov	ax,Bios_Data ; 70h
 26737                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 26738                                  	; 21/10/2022
 26739 00002272 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 26740 00002275 8ED8                    	mov	ds,ax
 26741                                  
 26742 00002277 2E803E[DB1E]00          	cmp	byte [cs:p_mtrk],0
 26743 0000227D 7508                    	jne	short if39
 26744                                  
 26745 0000227F C706[2705]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 26746 00002285 EB06                    	jmp	short en39
 26747                                  if39:
 26748 00002287 C706[2705]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 26749                                  en39:
 26750 0000228D 1F                      	pop	ds
 26751                                  	; 31/12/2022
 26752                                  	;jmp	short sr31
 26753                                  	; 03/01/2023
 26754                                  sr31:
 26755 0000228E E96DFE                  	jmp	coff
 26756                                  
 26757                                  ;----------------------------------------------------------------------------
 26758                                  ; DOS=HIGH/LOW command
 26759                                  ;----------------------------------------------------------------------------
 26760                                  
 26761                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26762                                  multi_try_doshi:
 26763 00002291 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 26764 00002294 7403                    	je	short it_is_h
 26765                                  skip_it:
 26766 00002296 E9EFFE                  	jmp	multi_pass_filter
 26767                                  it_is_h:				; M003 - removed initing DevUMB
 26768                                  					;	 & runhigh
 26769                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26770                                  ; (SYSINIT:25C1h)
 26771                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26772                                  ;%if 0
 26773                                  ;ifdef	MULTI_CONFIG
 26774 00002299 E8A51E                  	call	query_user              ; query the user if config_cmd
 26775 0000229C 72F8                    	jc	short skip_it		; has the CONFIG_OPTION_QUERY bit set
 26776                                  ;endif
 26777                                  ;%endif ; 27/10/2022
 26778                                  
 26779 0000229E BF[2E1F]                	mov	di,dos_parms
 26780 000022A1 31C9                    	xor	cx,cx
 26781                                  	; 03/01/2023
 26782                                  	;mov	dx,cx
 26783                                  h_do_parse:
 26784 000022A3 E89406                  	call	sysinit_parse
 26785 000022A6 7303                    	jnc	short h_parse_ok	
 26786                                  h_badparm:				; parse error
 26787                                  	; 03/01/2023
 26788                                  	;call	badparm_p		; show message and end the search loop.
 26789                                  	;;jmp	short h_end
 26790                                  	; 11/12/2022
 26791                                  ;h_end:
 26792                                  	;jmp	coff
 26793                                  	; 03/01/2023
 26794 000022A8 E9BB05                  	jmp	badparm_p_coff	
 26795                                  h_parse_ok:
 26796 000022AB 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 26797 000022AE 7405                    	je	short h_end		; then end the $endloop
 26798 000022B0 E82407                  	call	ProcDOS
 26799 000022B3 EBEE                    	jmp	short h_do_parse
 26800                                  	; 11/12/2022
 26801                                  	; 03/01/2023
 26802                                  h_end:
 26803 000022B5 E946FE                  	jmp	coff
 26804                                  
 26805                                  ;-----------------------------------------------------------------------------
 26806                                  ; devicehigh command
 26807                                  ;-----------------------------------------------------------------------------
 26808                                  
 26809                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26810                                  tryu:
 26811 000022B8 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 26812 000022BB 7552                    	jne	short tryd
 26813                                  
 26814                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26815                                  ; (SYSINIT:25E9h)
 26816                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26817                                  ;%if 0
 26818                                  ;ifdef	MULTI_CONFIG
 26819 000022BD E8811E                  	call	query_user              ; query the user if config_cmd
 26820 000022C0 724D                    	jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 26821                                  ;endif
 26822                                  ;%endif ; 28/10/2022
 26823                                  
 26824                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26825                                  ;%if 0
 26826                                  	; 01/01/2023
 26827                                  	; ds = cs
 26828                                  
 26829 000022C2 E8A907                  	call	InitVar
 26830 000022C5 E88A0F                  	call	ParseSize		; process the size= option
 26831                                  	;jnc	short tryu_0
 26832                                  	; 31/12/2022
 26833 000022C8 720C                    	jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 26834                                  
 26835                                  ;%endif ; 28/10/2022
 26836                                  
 26837                                  ; 31/12/2022
 26838                                  %if 0
 26839                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26840                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 26841                                  	;mov	[cs:badparm_seg], es
 26842                                  	; 11/12/2022
 26843                                  	; ds = cs
 26844                                  	mov	[badparm_off], si
 26845                                  	mov	[badparm_seg], es
 26846                                  
 26847                                  	; 31/12/2022
 26848                                  	;call	ParseSize
 26849                                  	;jnc	short tryu_2	; 28/10/2022
 26850                                  	
 26851                                  	;call	badparm_p
 26852                                  	;jmp	coff
 26853                                  	; 03/01/2023
 26854                                  	jmp	badparm_p_coff
 26855                                  %endif
 26856                                  
 26857                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26858                                  ; (SYSINIT:2606h)
 26859                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26860                                  ;%if 0
 26861                                  tryu_0:
 26862                                  	;mov	ax,[cs:DevSizeOption]
 26863                                  	; 31/12/2022
 26864 000022CA A1[C81F]                	mov	ax,[DevSizeOption] ; ds = cs
 26865 000022CD 09C0                    	or	ax,ax
 26866 000022CF 7510                    	jnz	short tryu_2
 26867                                  
 26868 000022D1 E82C08                  	call	ParseVar
 26869 000022D4 730B                    	jnc	short tryu_2
 26870                                  tryu_1:
 26871                                  	; 31/12/2022
 26872                                  	; ds = cs
 26873 000022D6 8936[E414]              	mov	[badparm_off], si
 26874 000022DA 8C06[E614]              	mov	[badparm_seg], es
 26875                                  	;mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 26876                                  	;mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 26877                                  	
 26878                                  	;call	badparm_p		; so all we have to do is choke and
 26879                                  	;jmp	coff			; die, rather verbosely.
 26880                                  	; 03/01/2023
 26881 000022DE E98505                  	jmp	badparm_p_coff
 26882                                  
 26883                                  ;%endif ; 28/10/2022
 26884                                  
 26885                                  tryu_2:	
 26886 000022E1 56                      	push	si
 26887 000022E2 06                      	push	es
 26888                                  tryu_3:
 26889 000022E3 268A04                  	mov	al,[es:si]
 26890 000022E6 3C0D                    	cmp	al,cr
 26891 000022E8 740C                    	je	short tryu_4
 26892 000022EA 3C0A                    	cmp	al,lf
 26893 000022EC 7408                    	je	short tryu_4
 26894 000022EE E8BF1F                  	call	delim
 26895 000022F1 7403                    	jz	short tryu_4
 26896 000022F3 46                      	inc	si
 26897 000022F4 EBED                    	jmp	short tryu_3
 26898                                  tryu_4:	
 26899                                  	; 11/12/2022
 26900                                  	; ds = cs
 26901 000022F6 A2[DC1F]                	mov	[DevSavedDelim],al
 26902                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 26903                                  					;  it with null
 26904                                  	; 18/12/2022
 26905 000022F9 29DB                    	sub	bx,bx
 26906 000022FB 26881C                  	mov	[es:si],bl ; 0
 26907                                   	;mov	byte [es:si],0
 26908                                  
 26909 000022FE 07                      	pop	es
 26910 000022FF 5E                      	pop	si
 26911                                  
 26912                                  ;------------------------------------------------------------------------------
 26913                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 26914                                  ;------------------------------------------------------------------------------
 26915                                  
 26916                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26917                                  ; (SYSINIT:2642h)
 26918                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26919                                  ;%if 0
 26920                                  ; 10/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 26921                                  ; MSDOS 6.21 IO.SYS - SYSINIT:2642h
 26922                                  %if 1
 26923                                  	; 01/01/2023
 26924                                  	; ds = cs
 26925 00002300 E8710C                  	call	UmbTest			; See if UMBs are around...
 26926                                  	; 01/01/2023
 26927                                  	;jnc	short NrmTst		; ...yep. So do that normal thang.
 26928                                  	
 26929                                  	;mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 26930                                  	; 31/12/2022
 26931                                  	; ds = cs, bx = 0
 26932                                  	;mov	byte [DeviceHi],bl ; 0
 26933                                  	;jmp	short LoadDevice
 26934                                  	; 01/01/2023
 26935 00002303 7222                    	jc	short LoadDevice ; bl = 0
 26936                                  %endif
 26937                                  ;%endif
 26938                                  
 26939                                  ;------------------------------------------------------------------------------
 26940                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 26941                                  ;------------------------------------------------------------------------------
 26942                                  
 26943                                  NrmTst:
 26944                                  	; 11/12/2022
 26945                                  	; ds = cs
 26946                                  	;;mov	byte [cs:DeviceHi],0
 26947                                  	;mov	byte [DeviceHi],0
 26948                                  	; 18/12/2022
 26949                                  	; bx = 0
 26950 00002305 381E[B81F]              	cmp	[DevUMB],bl ; 0
 26951                                  	;cmp	byte [DevUMB],0
 26952                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 26953 00002309 741C                    	je	short LoadDevice	; no, we don't
 26954                                  	;mov	byte [cs:DeviceHi],1
 26955                                  	; 11/12/2022
 26956                                  	;mov	byte [DeviceHi],1
 26957                                  	; 18/12/2022
 26958 0000230B FEC3                    	inc	bl ; mov bl,1 ; (*)
 26959                                  	; 11/12/2022
 26960                                  	;jmp	short LoadDevice2	; 11/12/2022
 26961 0000230D EB18                    	jmp	short LoadDevice
 26962                                  
 26963                                  ;------------------------------------------------------------------------------
 26964                                  ; device command
 26965                                  ;------------------------------------------------------------------------------
 26966                                  
 26967                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26968                                  	; (SYSINIT:2665h)
 26969                                  
 26970                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26971                                  	; (SYSINIT:2401h)
 26972                                  tryd:
 26973                                  	; 11/12/2022
 26974                                  	;xor 	bx,bx ; 31/12/2022
 26975                                  	;
 26976 0000230F 80FC44                          cmp     ah,CONFIG_DEVICE ; 'D'
 26977 00002312 7403                    	je	short gotd
 26978                                  skip_it2:
 26979 00002314 E99702                  	jmp	tryq
 26980                                  gotd:
 26981                                  
 26982                                  ; 31/12/2022 - Retro DOS v4.2
 26983                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26984                                  ;%if 0
 26985                                  ;ifdef	MULTI_CONFIG
 26986 00002317 E8271E                  	call	query_user              ; query the user if config_cmd
 26987 0000231A 72F8                    	jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 26988                                  ;endif
 26989                                  ;%endif ; 28/10/2022
 26990                                  
 26991                                  	; 31/12/2022
 26992 0000231C 29DB                    	sub	bx,bx
 26993                                  	; bx = 0
 26994                                  	; 11/12/2022
 26995                                  	; ds = cs
 26996                                  	;mov	byte [DeviceHi],0
 26997                                  	;mov	word [DevSizeOption],0
 26998 0000231E 891E[C81F]              	mov	[DevSizeOption],bx ; 0
 26999 00002322 C606[DC1F]20            	mov	byte [DevSavedDelim],' '
 27000                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 27001                                  	;mov	word [cs:DevSizeOption],0
 27002                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 27003                                  					;  be replaced with a ' '
 27004                                  LoadDevice:                             ; device= or devicehigh= command.
 27005                                  	; 11/12/2022
 27006                                  	;mov	byte [DeviceHi],0
 27007 00002327 881E[C71F]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 27008                                  LoadDevice2:
 27009                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 27010                                  	;
 27011                                  	;push    cs
 27012                                          ;pop     ds
 27013                                  	;
 27014                                  	;mov	[bpb_addr],si		; pass the command line to the device
 27015                                  	;mov	[bpb_addr+2],es
 27016                                  	;
 27017                                  	;mov	[DevCmdLine],si		; save it for ourself
 27018                                  	;mov	[DevCmdLine+2],es
 27019                                  	;
 27020                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 27021                                  
 27022                                  	; 11/12/2022
 27023                                  	; ds = cs
 27024                                  	;mov	bx,cs
 27025                                  	;mov	ds,bx
 27026                                  
 27027                                  	;mov	[cs:bpb_addr],si	; pass the command line to the device
 27028 0000232B 8936[7A03]              	mov	[bpb_addr],si
 27029                                  	;mov	[cs:bpb_addr+2],es
 27030 0000232F 8C06[7C03]              	mov	[bpb_addr+2],es
 27031                                  
 27032                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 27033 00002333 8936[D81F]              	mov	[DevCmdLine],si
 27034                                  	;mov	[cs:DevCmdLine+2],es	
 27035 00002337 8C06[DA1F]              	mov	[DevCmdLine+2],es
 27036                                  
 27037                                  	; 31/12/2022 - Retro DOS v4.2
 27038 0000233B C606[E314]00            	mov	byte [driver_units],0	; clear total block units for driver	
 27039                                  
 27040 00002340 E8C21F                  	call	round
 27041                                  	
 27042 00002343 E8170E                  	call	SizeDevice
 27043 00002346 723F                    	jc	short BadFile
 27044                                  
 27045                                  	; 11/12/2022
 27046                                  	; ds = cs
 27047                                  
 27048                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 27049                                  
 27050                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27051                                  ; (SYSINIT:26A4h)
 27052                                  
 27053                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27054                                  ;%if 0
 27055 00002348 C606[B71F]01            	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 27056                                  
 27057                                  	; 22/07/2023
 27058                                  	;mov	al,[DeviceHi]		; If not using upper memory,
 27059 0000234D 800E[C71F]00            	or	byte [DeviceHi],0	; Skip all this and go on to
 27060                                  	; 10/07/2023
 27061                                  	;or	al,al
 27062 00002352 741E                    	jz	short DevConvLoad	; the actual load.
 27063                                  
 27064                                  	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 27065 00002354 A0[751F]                	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 27066                                  
 27067 00002357 3CFF                    	cmp	al,-1			; If umb0 not specified, it's old style
 27068 00002359 7417                    	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 27069                                  
 27070 0000235B FE0E[B71F]              	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 27071                                  
 27072 0000235F E8DF09                  	call	GetLoadSize		; Returns size of first UMB specified
 27073 00002362 09C0                    	or	ax,ax
 27074 00002364 7406                    	jz	short tryd_1		; If size is not specified..
 27075                                  
 27076 00002366 3B06[A91F]              	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 27077 0000236A 7D06                    	jge	short DevConvLoad
 27078                                  tryd_1:
 27079 0000236C A1[A91F]                	mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 27080 0000236F E8DE09                  	call	StoLoadSize		; minsize for load UMB.
 27081                                  
 27082                                  ;%endif ; 28/10/2022
 27083                                  
 27084                                  ; - End DeviceHigh primary logic changes --------------------------------------
 27085                                  
 27086                                  DevConvLoad:
 27087                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27088 00002372 E8E50C                  	call	InitDevLoad
 27089                                  
 27090                                  	; 11/12/2022
 27091                                  	; ds = cs
 27092 00002375 A1[AB1F]                	mov	ax,[DevLoadAddr]
 27093 00002378 0306[A91F]              	add	ax,[DevSize]
 27094 0000237C 7206                    	jc	short NoMem
 27095 0000237E 3906[AD1F]              	cmp	[DevLoadEnd],ax
 27096 00002382 7315                    	jae	short LoadDev
 27097                                  	
 27098                                  	; 11/12/2022
 27099                                  	;mov	ax,[cs:DevLoadAddr]
 27100                                  	;add	ax,[cs:DevSize]
 27101                                  	;jc	short NoMem
 27102                                  	;cmp	[cs:DevLoadEnd],ax
 27103                                  	;jae	short LoadDev
 27104                                  NoMem:
 27105                                  	; 11/12/2022
 27106                                  	; ds = cs
 27107                                  	;jmp	mem_err
 27108 00002384 E9C11F                  	jmp	mem_err2
 27109                                  
 27110                                  BadFile:
 27111                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27112                                  	;;call	RetFromUM		; Does nothing if didn't call HideUMBs
 27113                                  	;;cmp	byte [es:si],' '
 27114                                          ;;jae	short tryd_2
 27115                                  	; 31/12/2022	
 27116                                  	;cmp	byte [es:si],0Dh	; cr
 27117                                          ;jne	short tryd_2
 27118                                  	;jmp	badop
 27119                                  	; 31/12/2022
 27120                                  	; ds = cs
 27121                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27122                                  	; (SYSINIT:26E6h)
 27123 00002387 E8340E                  	call	RetFromUM		; Does nothing if didn't call HideUMBs
 27124 0000238A 26803C20                	cmp	byte [es:si],' ' 
 27125                                  	;cmp	byte [es:si],20h ; space
 27126 0000238E 7303                    	jnb	short tryd_2
 27127 00002390 E9CA05                  	jmp	badop
 27128                                  tryd_2:
 27129 00002393 E8BA21                  	call	badload
 27130 00002396 E965FD                  	jmp	coff
 27131                                  
 27132                                  LoadDev:
 27133 00002399 06                      	push	es
 27134 0000239A 1F                      	pop	ds
 27135                                  
 27136 0000239B 89F2                    	mov	dx,si			;ds:dx points to file name
 27137 0000239D E8020E                  	call	ExecDev			; load device driver using exec call
 27138                                  badldreset:
 27139 000023A0 1E                      	push	ds
 27140 000023A1 07                      	pop	es			;es:si back to config.sys
 27141 000023A2 0E                      	push	cs
 27142 000023A3 1F                      	pop	ds			;ds back to sysinit
 27143 000023A4 72E1                    	jc	short BadFile
 27144                                  goodld:
 27145                                  	; 11/12/2022
 27146                                  	; ds = cs
 27147                                  
 27148 000023A6 06                      	push	es ; +	; 31/12/2022
 27149 000023A7 56                      	push	si ; ++
 27150 000023A8 E8250E                  	call	RemoveNull
 27151 000023AB 06                      	push	es
 27152 000023AC 56                      	push	si
 27153                                  
 27154 000023AD 0E                      	push	cs
 27155 000023AE 07                      	pop	es
 27156                                  
 27157 000023AF 1E                      	push	ds ; **  ; ds = cs
 27158 000023B0 56                      	push	si
 27159                                  
 27160                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 27161                                  	; 31/12/2022
 27162                                  	; ds = cs
 27163 000023B1 C536[AF1F]              	lds	si,[DevEntry]
 27164                                  
 27165                                  	;test	word [si+4],8000h
 27166                                  	; 11/12/2022
 27167 000023B5 F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 27168                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 27169 000023B9 7514                    	jnz	short got_device_com_cont   ; no.
 27170                                  
 27171 000023BB 2EC536[6B02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 27172                                  	;cmp	byte [si+32],26
 27173 000023C0 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 27174 000023C4 7209                    	jb	short got_device_com_cont
 27175                                  
 27176 000023C6 5E                      	pop	si
 27177 000023C7 1F                      	pop	ds ; **
 27178                                  
 27179 000023C8 5E                      	pop	si			; clear the stack
 27180 000023C9 07                      	pop	es
 27181                                  
 27182                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27183                                  	;call	RetFromUM
 27184                                  	; 31/12/2022
 27185                                  	; ds = cs ; **
 27186 000023CA E8F10D                  	call	RetFromUM		; Do this before we leave
 27187                                  
 27188                                  	;jmp	short badnumblock
 27189                                  	; 31/12/2022
 27190 000023CD EB77                    	jmp	short badnumblock2  ; ds = cs
 27191                                  
 27192                                  got_device_com_cont:
 27193 000023CF 5E                      	pop	si
 27194 000023D0 1F                      	pop	ds
 27195                                  
 27196                                  	; 11/12/2022
 27197                                  	; ds = cs
 27198                                  
 27199 000023D1 E82606                  	call	LieInt12Mem
 27200 000023D4 E88506                  	call	UpdatePDB		; update the PSP:2 value M020
 27201                                  
 27202                                  	; 11/12/2022
 27203                                  	; ds = cs
 27204 000023D7 803E[DF14]00            	cmp	byte [multdeviceflag],0
 27205                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 27206                                  					;  driver in the file ; M027
 27207 000023DC 750E                    	jne	short skip_pass_limit	;		      ; M027
 27208                                  
 27209                                  	; 11/12/2022
 27210                                  	; ds = cs
 27211                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 27212                                  	;mov	bx,[cs:DevLoadEnd]
 27213                                  	;mov	[cs:break_addr+2],bx
 27214                                  
 27215 000023DE C706[7603]0000          	mov	word [break_addr],0
 27216 000023E4 8B1E[AD1F]              	mov	bx,[DevLoadEnd]
 27217 000023E8 891E[7803]              	mov	[break_addr+2],bx
 27218                                  
 27219                                  skip_pass_limit:
 27220                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 27221                                  ;	number of installed devices (including DblSpace drives) where
 27222                                  ;	"drivenumber" is the number that the next block device will
 27223                                  ;	be assigned to. Because some naughty device drivers (like
 27224                                  ;	interlnk) look at the internal DOS variable instead of the
 27225                                  ;	value we pass it, we'll temporarily stick our value into
 27226                                  ;	DOS DATA while we're initializing the device drivers.
 27227                                  ;
 27228                                  ;	Note that this will make it impossible for this device
 27229                                  ;	driver to access the DblSpace drive letters, whether
 27230                                  ;	they are swapped-hosts or unswapped compressed drives,
 27231                                  ;	during its initialization phase.
 27232                                  
 27233                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27234                                  ; (SYSINIT:2752h)
 27235                                  ; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27236                                  ;%if 0
 27237                                  	; 31/12/2022
 27238                                  	;push	ds
 27239                                  	
 27240                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 27241                                  	; 31/12/2022
 27242                                  	; ds = cs
 27243 000023EC C51E[6B02]              	lds	bx,[DOSINFO]		; ds:bx -> sys_var
 27244                                  
 27245 000023F0 2EA0[7E03]              	mov	al,[cs:drivenumber]	; temporarily use this next drv value
 27246 000023F4 2EA2[7E03]              	mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 27247 000023F8 88C4                    	mov	ah,al
 27248                                  	
 27249 000023FA 874720                  	xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 27250                                  	; 31/12/2022
 27251                                  	;pop	ds
 27252                                  	
 27253 000023FD 50                      	push	ax			; save real sysi_numio/ncds in ax
 27254                                  
 27255                                  ;%endif ; 29/10/2022
 27256                                  
 27257                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27258                                  	; (SYSINIT:24B9h)
 27259                                  
 27260 000023FE BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 27261 00002401 E84D1F                  	call	calldev 		; calldev (sdevstrat);
 27262 00002404 BB0800                  	mov	bx,SYSDEV.INT ; 8
 27263 00002407 E8471F                  	call	calldev 		; calldev (sdevint);
 27264                                  
 27265                                  	; 11/12/2022
 27266                                  	; ds <> cs (from calldev) ; 31/12/2022
 27267                                  
 27268                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27269                                  ; (SYSINIT:2773h)
 27270                                  ; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27271                                  ;%if 0
 27272 0000240A 58                      	pop	ax			; get real sysi_numio value
 27273                                  	; 31/12/2022
 27274                                  	;push	ds
 27275 0000240B 2EC51E[6B02]            	lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 27276 00002410 894720                  	mov	[bx+SYSI_NUMIO],ax	; restore previous/real value
 27277                                  	; 31/12/2022
 27278                                  	;pop	ds
 27279                                  
 27280                                  ;%endif ; 29/10/2022
 27281                                  
 27282                                  	; 11/12/2022
 27283 00002413 0E                      	push	cs
 27284 00002414 1F                      	pop	ds
 27285                                  
 27286 00002415 E81206                  	call	TrueInt12Mem
 27287                                  
 27288                                  	; 11/12/2022
 27289                                  	; ds = cs
 27290                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 27291                                  	;mov	[cs:DevBrkAddr],ax
 27292                                  	;mov	ax,[cs:break_addr+2]
 27293                                  	;mov	[cs:DevBrkAddr+2],ax
 27294 00002418 A1[7603]                	mov	ax,[break_addr]	
 27295 0000241B A3[B31F]                	mov	[DevBrkAddr],ax
 27296 0000241E A1[7803]                	mov	ax,[break_addr+2]
 27297 00002421 A3[B51F]                	mov	[DevBrkAddr+2],ax
 27298                                  
 27299                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27300                                  	;call	RetFromUM		; There we go... all done.
 27301                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27302                                  	; (SYSINIT:2791h)
 27303 00002424 E8970D                  	call	RetFromUM		; There we go... all done.	
 27304                                  
 27305                                  	; 31/12/2022
 27306                                  	; ds = cs
 27307                                  
 27308                                  	; 11/12/2022
 27309 00002427 803E[B81F]00            	cmp	byte [DevUMB],0	
 27310                                  	;cmp	byte [cs:DevUMB],0
 27311 0000242C 7403                    	je	short tryd_3
 27312 0000242E E8C60E                  	call	AllocUMB
 27313                                  	; 31/12/2022
 27314                                  	; ds = cs
 27315                                  tryd_3:
 27316                                  
 27317                                  ;ifndef ROMDOS
 27318                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 27319                                  
 27320                                  	; 11/12/2022
 27321                                  	; ds = cs
 27322                                  	
 27323                                  	;cmp	byte [cs:runhigh],0FFh
 27324 00002431 803E[6A02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 27325 00002436 7503                    	jne	short tryd_4
 27326                                  	
 27327                                  	; 11/12/2022
 27328                                  	; ds = cs
 27329 00002438 E835E5                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 27330                                  tryd_4:
 27331                                  ;endif ; ROMDOS
 27332                                  
 27333 0000243B 5E                      	pop	si
 27334 0000243C 1F                      	pop	ds
 27335 0000243D C60400                  	mov	byte [si],0		; *p = 0;
 27336                                  
 27337 00002440 0E                      	push	cs
 27338 00002441 1F                      	pop	ds
 27339                                  
 27340 00002442 EB1F                    	jmp	short was_device_com
 27341                                  
 27342                                  ;----------------------------------------------------------------------------
 27343                                  
 27344                                  ; 02/04/2019 - Retro DOS v4.0
 27345                                  
 27346                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27347                                  ; (SYSINIT:27B3h)
 27348                                  
 27349                                  badnumblock:
 27350 00002444 0E                      	push	cs
 27351 00002445 1F                      	pop	ds
 27352                                  badnumblock2:	; 31/12/2022 (ds=cs)
 27353 00002446 BA[C44B]                	mov	dx,badblock
 27354 00002449 E82C21                  	call	print
 27355                                  
 27356                                  ;------ fall thru -----------------------------------------------------------
 27357                                  
 27358                                  	; 31/12/2022 - Retro DOS v4.2
 27359                                  
 27360                                  erase_dev_do:				; modified to show message "error in config.sys..."
 27361                                  	
 27362                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 27363                                  				; (Note: 'call CheckDoubleSpace'
 27364                                  				; has been removed at 'erase_dev_do:' pos
 27365                                  				; in PCDOS 7.1 IBMBIO.COM - SYSINIT:2CBAh)
 27366                                  				; Erdogan Tan - 10/07/2023
 27367 0000244C 5E                      	pop	si ; ++
 27368 0000244D 07                      	pop	es ; + ; 31/12/2022
 27369                                  
 27370 0000244E 0E                      	push	cs
 27371 0000244F 1F                      	pop	ds
 27372                                  
 27373                                  skip1_resetmemhi:
 27374                                  	; 11/12/2022
 27375                                  	; ds = cs
 27376 00002450 833E[7F03]00            	cmp	word [configmsgflag],0
 27377                                  	;cmp	word [cs:configmsgflag],0
 27378 00002455 7409                    	je	short no_error_line_msg
 27379                                  
 27380 00002457 E84E05                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 27381                                  	; 11/12/2022
 27382                                  	; ds = cs
 27383                                  	;mov	word [cs:configmsgflag],0
 27384 0000245A C706[7F03]0000          	mov	word [configmsgflag],0	; set the default value again.
 27385                                  
 27386                                  no_error_line_msg:
 27387 00002460 E99BFC                  	jmp	coff
 27388                                  
 27389                                  ;----------------------------------------------------------------------------
 27390                                  
 27391                                  was_device_com:
 27392                                  	; 14/12/2022
 27393                                  	; ds = cs
 27394 00002463 A1[B51F]                	mov	ax,[DevBrkAddr+2]
 27395                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 27396 00002466 3B06[AD1F]              	cmp	ax,[DevLoadEnd]
 27397                                  	;cmp	ax,[cs:DevLoadEnd]
 27398 0000246A 7605                    	jbe	short breakok
 27399                                  
 27400 0000246C 5E                      	pop	si
 27401 0000246D 07                      	pop	es
 27402 0000246E E916FF                  	jmp	BadFile
 27403                                  
 27404                                  breakok:
 27405                                  	; 14/12/2022
 27406                                  	; ds = cs
 27407 00002471 C43E[6B02]              	les	di,[DOSINFO] 
 27408 00002475 C516[AF1F]              	lds	dx,[DevEntry]
 27409                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 27410 00002479 89D6                    	mov	si,dx
 27411                                  
 27412                                  	; 14/11/2022
 27413                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 27414                                  
 27415                                  	; 14/12/2022
 27416                                  	; ds <> cs
 27417                                  	
 27418                                  	;mov	ax,[si+4]
 27419 0000247B 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 27420                                  	; 12/12/2022
 27421 0000247E F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 27422                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 27423 00002481 7426                    	jz	short isblock
 27424                                  
 27425                                  ;------ lets deal with character devices
 27426                                  
 27427 00002483 2E800E[E214]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 27428 00002489 E8770D                  	call	DevSetBreak		;go ahead and alloc mem for device
 27429                                  jc_edd:
 27430 0000248C 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 27431                                  
 27432                                  	; 12/12/2022
 27433 0000248E A801                    	test	al,ISCIN
 27434                                  	;test	ax,ISCIN ; 1		;is it a console in?
 27435 00002490 7408                    	jz	short tryclk
 27436                                  
 27437 00002492 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 27438 00002496 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 27439                                  tryclk: 
 27440                                  	; 12/12/2022
 27441 0000249A A808                    	test	al,ISCLOCK
 27442                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 27443 0000249C 7408                    	jz	short golink
 27444                                  
 27445 0000249E 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 27446 000024A2 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 27447                                  golink: 
 27448 000024A6 E9B500                  	jmp	linkit
 27449                                  
 27450                                  ;------ deal with block device drivers
 27451                                  
 27452                                  isblock:
 27453 000024A9 2EA0[7503]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 27454 000024AD 08C0                    	or	al,al
 27455 000024AF 749B                    	jz	short erase_dev_do
 27456                                  	;mov	[si+10],al
 27457 000024B1 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 27458                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27459                                  	;add	[cs:driver_units],al
 27460                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27461 000024B4 2E0006[E314]            	add	[cs:driver_units],al	; keep total for all drivers in file
 27462                                  perdrv:
 27463 000024B9 98                      	cbw				; warning no device > 127 units
 27464 000024BA 89C1                    	mov	cx,ax
 27465 000024BC 88E6                    	mov	dh,ah
 27466                                  	;mov	dl,[es:di+32]
 27467 000024BE 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 27468 000024C2 88D4                    	mov	ah,dl
 27469 000024C4 00C4                    	add	ah,al			; check for too many devices
 27470 000024C6 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 27471 000024C9 7603                    	jbe	short ok_block
 27472 000024CB E976FF                  	jmp	badnumblock
 27473                                  
 27474                                  ok_block:
 27475 000024CE 2E800E[E214]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 27476 000024D4 E82C0D                  	call	DevSetBreak		; alloc the device
 27477 000024D7 72B3                    	jc	short jc_edd
 27478 000024D9 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 27479                                  
 27480 000024DD 2E0006[7E03]            	add	[cs:drivenumber],al	; remember amount for next device
 27481 000024E2 2EC51E[7A03]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 27482                                  perunit:
 27483 000024E7 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 27484                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 27485                                  	; 11/12/2022
 27486 000024EC 26C46E00                	les	bp,[es:bp]
 27487                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27488                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 27489                                  scandpb:
 27490                                  	;cmp	word [es:bp+25],-1
 27491 000024F0 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 27492 000024F5 7406                    	je	short foundpb
 27493                                  	;les	bp,[es:bp+25]
 27494 000024F7 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 27495 000024FB EBF3                    	jmp	short scandpb
 27496                                  foundpb:
 27497 000024FD 2EA1[B31F]              	mov	ax,[cs:DevBrkAddr]
 27498 00002501 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 27499 00002505 2EA1[B51F]              	mov	ax,[cs:DevBrkAddr+2]
 27500 00002509 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 27501                                  
 27502 0000250D 2EC42E[B31F]            	les	bp,[cs:DevBrkAddr]
 27503 00002512 2E8306[B31F]21          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 27504                                  
 27505 00002518 E8C70C                  	call	RoundBreakAddr
 27506                                  
 27507 0000251B 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 27508 00002521 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 27509                                  
 27510 00002526 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 27511 00002528 43                      	inc	bx
 27512 00002529 43                      	inc	bx			;point to next guy
 27513                                  	;mov	[es:bp+DPB.DRIVE],dx
 27514                                  	; 11/12/2022
 27515 0000252A 26895600                	mov	[es:bp],dx ; 13/05/2019
 27516                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27517                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 27518                                  	
 27519 0000252E B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 27520 00002530 CD21                    	int	21h
 27521                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 27522                                  			; DS:SI -> BPB (BIOS Parameter Block)
 27523                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 27524                                  
 27525                                  	;mov	ax,[es:bp+2]
 27526 00002532 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 27527 00002536 06                      	push	es
 27528 00002537 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 27529                                  	;cmp	ax,[es:di+10h]
 27530 0000253C 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 27531 00002540 07                      	pop	es
 27532                                  	;jna	short iblk_1
 27533                                  	;jmp	short bad_bpb_size_sector
 27534                                  	; 29/10/2022
 27535 00002541 775D                    	ja	short bad_bpb_size_sector
 27536                                  iblk_1:
 27537 00002543 1E                      	push	ds
 27538 00002544 52                      	push	dx
 27539                                  
 27540 00002545 2EC516[AF1F]            	lds	dx,[cs:DevEntry]
 27541                                  	;mov	[es:bp+13h],dx
 27542 0000254A 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 27543                                  	;mov	[es:bp+15h],ds
 27544 0000254E 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 27545                                  
 27546 00002552 5A                      	pop	dx
 27547 00002553 1F                      	pop	ds
 27548                                  
 27549 00002554 42                      	inc	dx
 27550 00002555 FEC6                    	inc	dh
 27551 00002557 E28E                    	loop	perunit
 27552                                  
 27553 00002559 0E                      	push	cs
 27554 0000255A 1F                      	pop	ds
 27555                                  
 27556 0000255B E80DE7                  	call	TempCDS 		; set cds for new drives
 27557                                  	; 31/12/2022
 27558                                  	; ds <> cs
 27559                                  linkit:
 27560 0000255E 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 27561 00002563 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 27562 00002567 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 27563                                  
 27564 0000256B 2EC536[AF1F]            	lds	si,[cs:DevEntry]	;ds:si = device location
 27565 00002570 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 27566 00002574 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 27567 00002578 8B04                    	mov	ax,[si]			;get pointer to next device
 27568 0000257A 2EA3[AF1F]              	mov	[cs:DevEntry],ax	;and save it
 27569                                  
 27570 0000257E 890C                    	mov	[si],cx			;link in the driver
 27571 00002580 895402                  	mov	[si+2],dx
 27572                                  enddev:
 27573 00002583 5E                      	pop	si
 27574 00002584 07                      	pop	es
 27575 00002585 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 27576 00002586 740B                    	jz	short coffj3
 27577                                  
 27578 00002588 2EFE06[DF14]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 27579 0000258D E8950C                  	call	DevBreak		; M009
 27580                                  	; 11/12/2022
 27581                                  	; ds = cs (DevBreak)
 27582                                  
 27583                                  	; 03/04/2019 - Retro DOS v4.0
 27584                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 27585 00002590 E913FE                  	jmp	goodld			; otherwise pretend we loaded it in
 27586                                  coffj3: 
 27587                                  	; 18/12/2022
 27588                                  	; ax = 0
 27589 00002593 2EA2[DF14]              	mov	[cs:multdeviceflag],al ; 0
 27590                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 27591 00002597 E88B0C                  	call	DevBreak
 27592                                  	; 11/12/2022
 27593                                  	; ds = cs (DevBreak)
 27594                                  	
 27595                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27596                                  	; (SYSINIT:2919h)
 27597                                  	; 11/07/2023
 27598 0000259A E88203                  	call	CheckProtmanArena
 27599                                  	
 27600                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 27601                                  	;;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 27602                                  ;					;  created a bogus arena to try
 27603                                  ;					;  to protect some of its resident-
 27604                                  ;					;  init code.
 27605                                  	;call	CheckDoubleSpace
 27606 0000259D E95EFB                  	jmp	coff
 27607                                  
 27608                                  ;----------------------------------------------------------------------------
 27609                                  
 27610                                  ;CheckDoubleSpace:
 27611                                  ;;;;	ifdef	dblspace_hooks
 27612                                  ;
 27613                                  ;;	Now check for two special MagicDrv cases:
 27614                                  ;;
 27615                                  ;;       a) the last driver load was MagicDrv final placement:
 27616                                  ;;	   -> add number of MagicDrv reserved drives to drivenumber
 27617                                  ;;
 27618                                  ;;       b) MagicDrv is currently in temporary home:
 27619                                  ;;          -> call it to give it a chance to mount and shuffle drives
 27620                                  ;
 27621                                  ;	cmp	byte [cs:MagicHomeFlag],0 ; already home?
 27622                                  ;	jnz	short no_more_magic_calls ;  nothing more to do if so
 27623                                  ;
 27624                                  ;;	Now inquire of driver whether it is present, and final located
 27625                                  ;
 27626                                  ;	mov	ax,multMagicdrv ; 4A11h
 27627                                  ;	mov	bx,MD_VERSION ; 0
 27628                                  ;	int	2fh			; ch = number of MagicDrv drive letters
 27629                                  ;	or	ax,ax			; is it there?
 27630                                  ;	jnz	short no_more_magic_calls ; done if not
 27631                                  ;
 27632                                  ;	test	dx,8000h		; is it final placed?
 27633                                  ;	jnz	short magic_not_yet_home ;  skip if not
 27634                                  ;
 27635                                  ;;	Okay, now the driver is final placed!  Set the flag so we
 27636                                  ;;	don't keep checking it, and add its number of drive letters
 27637                                  ;;	to drivenumber.
 27638                                  ;
 27639                                  ;	mov	byte [cs:MagicHomeFlag],0ffh ; set the flag!
 27640                                  ;	add	[cs:drivenumber],ch	; add number of MagicDrv volumes to
 27641                                  ;;					;  the drive number we'll pass to the
 27642                                  ;;					;  next loadable block device.
 27643                                  ;
 27644                                  ;	jmp	short no_more_magic_calls ; and finished.
 27645                                  ;
 27646                                  ;magic_not_yet_home:
 27647                                  ;	push	es
 27648                                  ;	push	si
 27649                                  ;
 27650                                  ;	mov	cx,[cs:memhi]		; pass it a work buffer
 27651                                  ;	mov	dx,[cs:ALLOCLIM]	;   address in cx (segment)
 27652                                  ;	sub	dx,cx			;   for len dx (paragraphs)
 27653                                  ;
 27654                                  ;	mov	bx,2
 27655                                  ;	mov	al,[cs:driver_units]	; shuffle magicdrives and new drives
 27656                                  ;;					;   by this many units
 27657                                  ;
 27658                                  ;;BUGBUG 29-Oct-1992 bens Take this 55h out after Beta 4
 27659                                  ;	mov	ah,55h			; backdoor won't shuffle unless it
 27660                                  ;;					;  sees this, to prevent bad things
 27661                                  ;;					;  from happening if people run the
 27662                                  ;;					;  new driver with an old (dos) BIOS
 27663                                  ;	call	far [cs:MagicBackdoor]
 27664                                  ;
 27665                                  ;	pop	si
 27666                                  ;	pop	es
 27667                                  ;
 27668                                  ;no_more_magic_calls:
 27669                                  ;
 27670                                  ;;;;	endif
 27671                                  ;	retn
 27672                                  
 27673                                  ; 03/04/2019 - Retro DOS v4.0
 27674                                  
 27675                                  bad_bpb_size_sector:
 27676 000025A0 5E                      	pop	si
 27677 000025A1 07                      	pop	es
 27678 000025A2 BA[E64A]                	mov	dx,badsiz_pre
 27679 000025A5 BB[C44A]                	mov	bx,crlfm
 27680 000025A8 E8AB1F                  	call	prnerr
 27681                                  
 27682 000025AB E950FB                  	jmp	coff
 27683                                  
 27684                                  ;------------------------------------------------------------------------------
 27685                                  ; country command
 27686                                  ;      the syntax is:
 27687                                  ;	country=country id {,codepage {,path}}
 27688                                  ;	country=country id {,,path}	:default codepage id in dos
 27689                                  ;------------------------------------------------------------------------------
 27690                                  
 27691                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27692                                  	; (SYSINIT:2663h)
 27693                                  tryq:
 27694 000025AE 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 27695 000025B1 7403                    	je	short tryq_cont
 27696                                  skip_it3:
 27697 000025B3 E90D01                  	jmp	tryf
 27698                                  tryq_cont:
 27699                                  
 27700                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27701                                  ; (SYSINIT:297Eh)
 27702                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27703                                  ;%if 0
 27704                                  ;ifdef	MULTI_CONFIG
 27705 000025B6 E8881B                  	call	query_user		; query the user if config_cmd
 27706 000025B9 72F8                    	jc	short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 27707                                  ;endif
 27708                                  ;%endif ; 02/11/2022
 27709                                  
 27710                                  	; 31/12/2022
 27711                                  	;xor	bx,bx
 27712 000025BB 31C9                    	xor	cx,cx
 27713                                  	; 14/12/2022
 27714                                  	; ds = cs
 27715                                  	; bx = 0
 27716                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 27717                                  	;mov	word [cs:p_code_page],0
 27718                                  	; 31/12/2022
 27719                                  	; cx = 0
 27720                                  	;mov	[cntry_drv],bl ; 0
 27721                                  	;mov	[p_code_page],bx ; 0
 27722 000025BD 880E[0246]              	mov	[cntry_drv],cl ; 0
 27723 000025C1 890E[201E]              	mov	[p_code_page],cx ; 0	
 27724                                  
 27725 000025C5 BF[E91D]                	mov	di,cntry_parms
 27726                                  	;xor	cx,cx	; 31/12/2022
 27727                                  	; 03/01/2023
 27728                                  	;mov	dx,cx
 27729                                  do52:
 27730 000025C8 E86F03                  	call	sysinit_parse
 27731 000025CB 730B                    	jnc	short if52		; parse error,check error code and
 27732                                  
 27733 000025CD E8E000                  	call	cntry_error		; show message and end the search loop.
 27734                                  	; 14/12/2022
 27735                                  	; ds = cs
 27736 000025D0 C706[1E1E]FFFF          	mov	word [p_cntry_code],-1
 27737                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 27738 000025D6 EB34                    	jmp	short sr52
 27739                                  if52:
 27740 000025D8 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 27741 000025DB 742F                    	jz	short sr52		; then end the search loop
 27742                                  
 27743                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 27744                                  	; 14/12/2022
 27745                                  	; ds = cs
 27746 000025DD 803E[BB1D]01            	cmp	byte [result_val],_$P_Number	
 27747                                  	;cmp	byte [cs:result_val],_$P_Number
 27748 000025E2 7512                    	jnz	short if56
 27749                                  
 27750                                  	;;mov	ax,[cs:rw_dword]
 27751                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27752                                  	; 14/12/2022
 27753 000025E4 A1[BF1D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 27754 000025E7 83F901                  	cmp	cx,1
 27755 000025EA 7505                    	jne	short if57
 27756                                  
 27757                                  	;mov	[cs:p_cntry_code],ax
 27758                                  	; 14/12/2022
 27759 000025EC A3[1E1E]                	mov	[p_cntry_code],ax
 27760                                  
 27761                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27762                                  	;jmp	short en57
 27763                                  	; 12/12/2022
 27764                                  	;jmp	short en56
 27765 000025EF EBD7                    	jmp	short do52
 27766                                  if57:
 27767                                  	;mov	[cs:p_code_page],ax
 27768                                  	; 14/12/2022
 27769                                  	; ds = cs
 27770 000025F1 A3[201E]                	mov	[p_code_page],ax
 27771                                  en57:
 27772                                  	;jmp	short en56		; path entered
 27773                                  	; 12/12/2022
 27774 000025F4 EBD2                    	jmp	short do52
 27775                                  if56:
 27776 000025F6 1E                      	push	ds
 27777 000025F7 06                      	push	es
 27778 000025F8 56                      	push	si
 27779 000025F9 57                      	push	di
 27780                                  
 27781 000025FA 0E                      	push	cs
 27782 000025FB 07                      	pop	es
 27783                                  
 27784                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 27785                                  	; 14/12/2022
 27786 000025FC C536[BF1D]              	lds	si,[rv_dword]
 27787 00002600 BF[0246]                	mov	di,cntry_drv
 27788 00002603 E83E1F                  	call	move_asciiz
 27789                                  
 27790 00002606 5F                      	pop	di
 27791 00002607 5E                      	pop	si
 27792 00002608 07                      	pop	es
 27793 00002609 1F                      	pop	ds
 27794                                  
 27795                                  en56:
 27796 0000260A EBBC                    	jmp	short do52
 27797                                  
 27798                                  sr52:
 27799                                  	; 14/12/2022
 27800                                  	; ds = cs
 27801 0000260C 833E[1E1E]FF            	cmp	word [p_cntry_code],-1
 27802                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 27803 00002611 7509                    	jne	short tryq_open
 27804 00002613 E9E8FA                  	jmp	coff
 27805                                  
 27806                                  tryqbad:				;"invalid country code or code page"
 27807 00002616 F9                      	stc
 27808 00002617 BA[2D4B]                	mov     dx,badcountry
 27809 0000261A EB79                    	jmp     tryqchkerr
 27810                                  
 27811                                  tryq_open:
 27812                                  	; 14/12/2022
 27813                                  	; ds = cs
 27814 0000261C 803E[0246]00            	cmp	byte [cntry_drv],0
 27815                                  	;cmp	byte [cs:cntry_drv],0
 27816 00002621 7405                    	je	short tryq_def
 27817 00002623 BA[0246]                	mov	dx,cntry_drv
 27818 00002626 EB03                    	jmp	short tryq_openit
 27819                                  
 27820                                  tryq_def:
 27821 00002628 BA[0446]                	mov	dx,cntry_root
 27822                                  tryq_openit:
 27823 0000262B B8003D                  	mov	ax,3D00h		;open a file
 27824 0000262E F9                      	stc
 27825 0000262F CD21                    	int	21h
 27826 00002631 7242                    	jc	short tryqfilebad	;open failure
 27827                                  
 27828                                  	; 14/12/2022
 27829                                  	; ds = cs
 27830 00002633 A3[5A03]                	mov	[cntryfilehandle],ax
 27831                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 27832 00002636 89C3                    	mov	bx,ax
 27833 00002638 A1[1E1E]                	mov	ax,[p_cntry_code]
 27834 0000263B 8B16[201E]              	mov	dx,[p_code_page]
 27835                                  	;mov	ax,[cs:p_cntry_code]
 27836                                  	;mov	dx,[cs:p_code_page]	;now,ax=country id,bx=filehandle
 27837                                  	;mov	cx,[cs:memhi]
 27838 0000263F 8B0E[6203]              	mov	cx,[memhi]
 27839 00002643 81C18001                	add	cx,384			;need 6k buffer to handle country.sys
 27840                                  					;M023
 27841                                  	; 14/12/2022
 27842                                  	; ds = cs
 27843 00002647 3B0E[A302]              	cmp	cx,[ALLOCLIM]
 27844                                  	;cmp	cx,[cs:ALLOCLIM]
 27845 0000264B 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 27846                                  
 27847 0000264D BE[0246]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 27848 00002650 803C00                  	cmp	byte [si],0 		;default path?
 27849 00002653 7502                    	jne	short tryq_set_for_dos
 27850                                  
 27851 00002655 46                      	inc	si
 27852 00002656 46                      	inc	si			;ds:si -> cntry_root
 27853                                  
 27854                                  tryq_set_for_dos:
 27855                                  	; 14/12/2022
 27856                                  	; ds = cs
 27857 00002657 C43E[7702]              	les	di,[sysi_country]
 27858                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 27859 0000265B 57                      	push	di			;save di
 27860                                  	;add	di,8
 27861 0000265C 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 27862 0000265F E8E21E                  	call	move_asciiz		;set the path to country.sys in dos.
 27863 00002662 5F                      	pop	di			;es:di -> country info tab again.
 27864                                  
 27865                                  	; 14/12/2022	
 27866 00002663 8B0E[6203]              	mov	cx,[memhi]
 27867                                  	;mov	cx,[cs:memhi]
 27868 00002667 8ED9                    	mov	ds,cx
 27869 00002669 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 27870 0000266B E8661D                  	call	setdoscountryinfo	;now do the job!!!
 27871                                  	; ds <> cs ; 14/12/2022
 27872 0000266E 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 27873                                  
 27874 00002670 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 27875 00002673 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 27876                                  
 27877                                  tryqfilebad:
 27878 00002675 0E                      	push	cs
 27879 00002676 07                      	pop	es
 27880 00002677 2E803E[0246]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 27881 0000267D 7405                    	je	short tryqdefbad
 27882                                  
 27883 0000267F BE[0246]                	mov	si,cntry_drv
 27884 00002682 EB03                    	jmp	short tryqbadload
 27885                                  
 27886                                  tryqdefbad:				;default file has been used.
 27887 00002684 BE[0446]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 27888                                  tryqbadload:
 27889 00002687 E8C61E                  	call	badload 		;ds will be restored to sysinit_seg
 27890                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27891                                  	; (SYSINIT:2A69h)
 27892 0000268A 8B0E[A102]              	mov	cx,[CONFBOT] ; ds = cs (from badload)
 27893                                  	;mov	cx,[cs:CONFBOT]
 27894                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27895                                  	;mov	cx,[cs:top_of_cdss]
 27896                                  	; 11/12/2022
 27897                                  	; ds = cs
 27898                                  	;mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 27899 0000268E 8EC1                    	mov	es,cx			;restore es -> confbot.
 27900 00002690 EB13                    	jmp	short coffj4
 27901                                  
 27902                                  tryqmemory:
 27903 00002692 BA[704B]                	mov	dx,insufmemory
 27904                                  tryqchkerr:
 27905                                  	;mov	cx,[cs:CONFBOT]
 27906                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27907                                  	;mov	cx,[cs:top_of_cdss]
 27908                                  	; 12/12/2022
 27909 00002695 0E                      	push	cs
 27910 00002696 1F                      	pop	ds
 27911                                  	; 31/12/2022 - Retro DOS v4.2
 27912 00002697 8B0E[A102]              	mov	cx,[CONFBOT] ; (MSDOS 6.21 IO.SYS, SYSINIT)
 27913                                  	;mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 27914 0000269B 8EC1                    	mov	es,cx			;restore es -> confbot seg
 27915                                  	;push	cs
 27916                                  	;pop	ds			;restore ds to sysinit_seg
 27917 0000269D 7306                    	jnc	short coffj4		;if no error,then exit
 27918                                  
 27919 0000269F E8D61E                  	call	print			;else show error message
 27920 000026A2 E80303                  	call	error_line
 27921                                  coffj4:
 27922                                  	;mov	bx,[cs:cntryfilehandle]
 27923                                  	; 11/12/2022
 27924                                  	; ds = cs
 27925 000026A5 8B1E[5A03]              	mov	bx,[cntryfilehandle]
 27926 000026A9 B43E                    	mov	ah,3Eh
 27927 000026AB CD21                    	int	21h			;close file. don't care even if it fails.
 27928 000026AD E94EFA                  	jmp	coff
 27929                                  
 27930                                  ;--------------------------------------------
 27931                                  
 27932                                  cntry_error:
 27933                                  
 27934                                  ;function: show "invalid country code or code page" messages,or
 27935                                  ;		"error in country command" depending on the error code
 27936                                  ;		in ax returned by sysparse;
 27937                                  ;in:	ax - error code
 27938                                  ;	ds - sysinitseg
 27939                                  ;	es - confbot
 27940                                  ;out:	show message.  dx destroyed.
 27941                                  
 27942 000026B0 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 27943 000026B3 7505                    	jne	short if64
 27944 000026B5 BA[2D4B]                	mov	dx,badcountry		;"invalid country code or code page"
 27945 000026B8 EB03                    	jmp	short en64
 27946                                  if64:
 27947 000026BA BA[534B]                	mov	dx,badcountrycom	;"error in contry command"
 27948                                  en64:
 27949 000026BD E8B81E                  	call	print
 27950                                  	;call	error_line
 27951                                  	;retn
 27952                                  	; 11/12/2022
 27953 000026C0 E9E502                  	jmp	error_line
 27954                                  
 27955                                  ;------------------------------------------------------------------------------
 27956                                  ; files command
 27957                                  ;------------------------------------------------------------------------------
 27958                                  
 27959                                  ;******************************************************************************
 27960                                  ; function: parse the parameters of files= command.			      *
 27961                                  ;									      *
 27962                                  ; input :								      *
 27963                                  ;	es:si -> parameters in command line.				      *
 27964                                  ; output:								      *
 27965                                  ;	variable files set.						      *
 27966                                  ;									      *
 27967                                  ; subroutines to be called:						      *
 27968                                  ;	sysinit_parse							      *
 27969                                  ; logic:								      *
 27970                                  ; {									      *
 27971                                  ;	set di points to files_parms;					      *
 27972                                  ;	set dx,cx to 0; 						      *
 27973                                  ;	while (end of command line)					      *
 27974                                  ;	{ sysinit_parse;						      *
 27975                                  ;	  if (no error) then						      *
 27976                                  ;	     files = result_val._$P_picked_val				      *
 27977                                  ;	  else								      *
 27978                                  ;	     error exit;						      *
 27979                                  ;	};								      *
 27980                                  ; };									      *
 27981                                  ;									      *
 27982                                  ;******************************************************************************
 27983                                  
 27984                                  tryf:
 27985 000026C3 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 27986 000026C6 7528                    	jne	short tryl
 27987                                  
 27988                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27989                                  ; (SYSINIT:2AABh)
 27990                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27991                                  ;%if 0
 27992                                  ;ifdef	MULTI_CONFIG
 27993 000026C8 E8761A                  	call	query_user              ; query the user if config_cmd
 27994 000026CB 7223                    	jc	short tryl		; has the CONFIG_OPTION_QUERY bit set
 27995                                  ;endif
 27996                                  ;%endif ; 30/10/2022
 27997                                  
 27998                                  	; 14/12/2022
 27999                                  	; ds = cs
 28000                                  
 28001 000026CD BF[221E]                	mov	di,files_parms
 28002 000026D0 31C9                    	xor	cx,cx
 28003                                  	; 03/01/2023
 28004                                  	;mov	dx,cx
 28005                                  do67:
 28006 000026D2 E86502                  	call	sysinit_parse
 28007 000026D5 7303                    	jnc	short if67		; parse error
 28008                                  	;call	badparm_p		;  and show messages and end the search loop.
 28009                                  	;jmp	short sr67
 28010                                  	; 03/01/2023
 28011 000026D7 E98C01                  	jmp	badparm_p_coff
 28012                                  if67:
 28013 000026DA 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 28014 000026DD 7408                    	je	short en67		; then end the $endloop
 28015                                  
 28016                                  	; 14/12/2022
 28017                                  	; ds = cs
 28018                                  	;;mov	al,[cs:rv_dword]
 28019                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28020                                  	;mov	[cs:p_files],al		; save it temporarily
 28021                                  	;mov	al,[rv_dword]
 28022 000026DF A0[BF1D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 28023 000026E2 A2[411E]                	mov	[p_files],al
 28024                                  
 28025 000026E5 EBEB                    	jmp	short do67
 28026                                  en67:
 28027                                  	; 14/12/2022
 28028                                  	; ds = cs
 28029 000026E7 A0[411E]                	mov	al,[p_files]
 28030 000026EA A2[9D02]                	mov	[FILES],al	
 28031                                  	;mov	al,[cs:p_files]
 28032                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 28033                                  sr67:
 28034 000026ED E90EFA                  	jmp	coff
 28035                                  
 28036                                  ; 04/04/2019 - Retro DOS v4.0
 28037                                  
 28038                                  ;------------------------------------------------------------------------------
 28039                                  ; lastdrive command
 28040                                  ;------------------------------------------------------------------------------
 28041                                  
 28042                                  ;******************************************************************************
 28043                                  ; function: parse the parameters of lastdrive= command. 		      *
 28044                                  ;									      *
 28045                                  ; input :								      *
 28046                                  ;	es:si -> parameters in command line.				      *
 28047                                  ; output:								      *
 28048                                  ;	set the variable num_cds.					      *
 28049                                  ;									      *
 28050                                  ; subroutines to be called:						      *
 28051                                  ;	sysinit_parse							      *
 28052                                  ; logic:								      *
 28053                                  ; {									      *
 28054                                  ;	set di points to ldrv_parms;					      *
 28055                                  ;	set dx,cx to 0; 						      *
 28056                                  ;	while (end of command line)					      *
 28057                                  ;	{ sysinit_parse;						      *
 28058                                  ;	  if (no error) then						      *
 28059                                  ;	     set num_cds to the returned value; 			      *
 28060                                  ;	  else	/*error exit*/						      *
 28061                                  ;	     error exit;						      *
 28062                                  ;	};								      *
 28063                                  ; };									      *
 28064                                  ;									      *
 28065                                  ;******************************************************************************
 28066                                  
 28067                                  tryl:
 28068 000026F0 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 28069 000026F3 7528                    	jne	short tryp
 28070                                  
 28071                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28072                                  ; (SYSINIT:2AE0h)
 28073                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28074                                  ;%if 0
 28075 000026F5 E8491A                  	call	query_user      ; query the user if config_cmd
 28076 000026F8 7223                    	jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 28077                                  ;endif
 28078                                  ;%endif ; 30/10/2022
 28079                                  
 28080                                  	; 14/12/2022
 28081                                  	; ds = cs
 28082                                  
 28083 000026FA BF[791E]                	mov	di,ldrv_parms
 28084 000026FD 31C9                    	xor	cx,cx
 28085                                  	; 03/01/2023
 28086                                  	;mov	dx,cx
 28087                                  do73:
 28088 000026FF E83802                  	call	sysinit_parse
 28089 00002702 7303                    	jnc	short if73	; parse error
 28090                                  	;call	badparm_p	;  and show messages and end the search loop.
 28091                                  	;jmp	short sr73
 28092                                  	; 03/01/2023
 28093 00002704 E95F01                  	jmp	badparm_p_coff
 28094                                  if73:
 28095 00002707 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 28096 0000270A 7408                    	je	short en73	; then end the $endloop
 28097                                  
 28098                                  	; 14/12/2022
 28099                                  	; ds = cs
 28100                                  	;;mov	al,[cs:rv_dword]
 28101                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 28102                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 28103                                  
 28104                                  	;mov	al,[rv_dword]
 28105 0000270C A0[BF1D]                	mov	al,[rv_byte]
 28106 0000270F A2[8D1E]                	mov	[p_ldrv],al
 28107                                  
 28108 00002712 EBEB                    	jmp	short do73
 28109                                  en73:
 28110                                  	; 14/12/2022
 28111                                  	; ds = cs
 28112 00002714 A0[8D1E]                	mov	al,[p_ldrv]
 28113 00002717 A2[A002]                	mov	[NUM_CDS],al
 28114                                  	;mov	al,[cs:p_ldrv]
 28115                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 28116                                  sr73:
 28117 0000271A E9E1F9                  	jmp	coff
 28118                                  
 28119                                  ;--------------------------------------------------------------------------
 28120                                  ; setting drive parameters
 28121                                  ;--------------------------------------------------------------------------
 28122                                  
 28123                                  tryp:
 28124 0000271D 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 28125 00002720 7516                    	jne	short tryk
 28126                                  
 28127                                  ; 31/12/2022 - Retro DOS v4.2
 28128                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28129                                  ;%if 0
 28130                                  ;ifdef	MULTI_CONFIG
 28131 00002722 E81C1A                  	call	query_user      ; query the user if config_cmd
 28132 00002725 7211                    	jc	short tryk	; has the CONFIG_OPTION_QUERY bit set
 28133                                  ;endif
 28134                                  ;%endif ; 30/10/2022
 28135                                  
 28136 00002727 E8E50E                  	call	parseline
 28137 0000272A 7209                    	jc	short trypbad
 28138 0000272C E8F90D                  	call	setparms
 28139 0000272F E83B0E                  	call	diddleback
 28140                                  
 28141                                  ; No error check here, because setparms and diddleback have no error 
 28142                                  ; returns, and setparms as coded now can return with carry set. 
 28143                                  ;       jc	short trypbad
 28144                                  
 28145                                  	; 12/12/2022
 28146                                  	; cf = 0
 28147                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28148                                  	;jc	short trypbad
 28149                                  	
 28150 00002732 E9C9F9                  	jmp	coff
 28151                                  trypbad:
 28152 00002735 E92502                  	jmp	badop
 28153                                  
 28154                                  ;--------------------------------------------------------------------------
 28155                                  ; setting internal stack parameters
 28156                                  ; stacks=m,n where
 28157                                  ;	m is the number of stacks (range 8 to 64,default 9)
 28158                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 28159                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 28160                                  ;	any combinations that are not within the specified limits will
 28161                                  ;	result in "unrecognized command" error.
 28162                                  ;--------------------------------------------------------------------------
 28163                                  
 28164                                  ;**************************************************************************
 28165                                  ;									  *
 28166                                  ; function: parse the parameters of stacks= command.			  *
 28167                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 28168                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 28169                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 28170                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 28171                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 28172                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 28173                                  ;	    (or if "0,0" pair has been entered.)			  *
 28174                                  ; input :								  *
 28175                                  ;	es:si -> parameters in command line.				  *
 28176                                  ; output:								  *
 28177                                  ;	set the variables stack_count,stack_size.			  *
 28178                                  ;									  *
 28179                                  ; subroutines to be called:						  *
 28180                                  ;	sysinit_parse							  *
 28181                                  ; logic:								  *
 28182                                  ; {									  *
 28183                                  ;	set di points to stks_parms;					  *
 28184                                  ;	set dx,cx to 0; 						  *
 28185                                  ;	while (end of command line)					  *
 28186                                  ;	{ sysinit_parse;						  *
 28187                                  ;	  if (no error) then						  *
 28188                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 28189                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 28190                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 28191                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 28192                                  ;	     }								  *
 28193                                  ;	  else	/*error exit*/						  *
 28194                                  ;	     error exit;						  *
 28195                                  ;	};								  *
 28196                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 28197                                  ;	if o.k.,then set stack_count,stack_size;			  *
 28198                                  ;	 else error_exit;						  *
 28199                                  ; };									  *
 28200                                  ;**************************************************************************
 28201                                  
 28202                                  tryk:
 28203                                          ;if      stacksw
 28204                                  
 28205 00002738 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 28206 0000273B 7402                    	je	short do_tryk
 28207                                  skip_it4:
 28208 0000273D EB79                    	jmp	short trys	; 15/12/2022
 28209                                  do_tryk:
 28210                                  
 28211                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28212                                  ; (SYSINIT:2B33h)
 28213                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28214                                  ;%if 0
 28215                                  ;ifdef	MULTI_CONFIG
 28216 0000273F E8FF19                         call	query_user              ; query the user if config_cmd
 28217 00002742 72F9                           jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 28218                                  ;endif
 28219                                  ;%endif	; 30/10/2022
 28220                                  
 28221                                  	; 14/12/2022
 28222                                  	; ds = cs
 28223                                  
 28224 00002744 BF[8E1E]                	mov	di,stks_parms
 28225 00002747 31C9                    	xor	cx,cx
 28226                                  	; 03/01/2023
 28227                                  	;mov	dx,cx
 28228                                  do79:
 28229 00002749 E8EE01                  	call	sysinit_parse
 28230 0000274C 730B                    	jnc	short if79		; parse error
 28231                                  
 28232 0000274E BA[DF4B]                	mov	dx,badstack		; "invalid stack parameter"
 28233 00002751 E8241E                  	call	print			;  and show messages and end the search loop.
 28234 00002754 E85102                  	call	error_line
 28235                                  	;jmp	sr79
 28236                                  	; 11/12/2022
 28237 00002757 EB39                    	jmp	short sr79
 28238                                  if79:
 28239 00002759 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 28240 0000275C 7412                    	je	short en79		; then end the $endloop
 28241                                  
 28242                                  	; 14/12/2022
 28243                                  	; ds = cs
 28244                                  
 28245                                  	;;mov	ax,[cs:rv_dword]
 28246                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28247                                  	;mov	ax,[rv_dword]
 28248 0000275E A1[BF1D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 28249                                  
 28250 00002761 83F901                  	cmp	cx,1
 28251 00002764 7505                    	jne	short if83
 28252                                  
 28253                                  	; 14/12/2022
 28254                                  	;mov	[cs:p_stack_count],ax
 28255                                  	;jmp	short en83
 28256 00002766 A3[C31E]                	mov	[p_stack_count],ax
 28257 00002769 EBDE                    	jmp	short do79
 28258                                  if83:
 28259                                  	; 14/12/2022
 28260                                  	;mov	[cs:p_stack_size],ax
 28261 0000276B A3[C51E]                	mov	[p_stack_size],ax
 28262                                  en83:
 28263 0000276E EBD9                    	jmp	short do79
 28264                                  en79:
 28265                                  	; 14/12/2022
 28266                                  	; ds = cs
 28267 00002770 A1[C31E]                	mov	ax,[p_stack_count]
 28268 00002773 09C0                    	or	ax,ax
 28269 00002775 741E                    	jz	short if87		
 28270                                  
 28271                                  	; 14/12/2022
 28272                                  	;cmp	word [p_stack_count],0
 28273                                  	;;cmp	word [cs:p_stack_count],0
 28274                                  	;je	short if87
 28275                                  
 28276                                  	; 14/12/2022
 28277 00002777 83F808                  	cmp	ax,mincount ; 8
 28278                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 28279                                  	; 15/12/2022
 28280 0000277A 721F                    	jb	short en87
 28281 0000277C 833E[C51E]20            	cmp	word [p_stack_size],minsize ; 32
 28282                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 28283                                  	; 15/12/2022
 28284 00002781 7218                    	jb	short en87
 28285                                  if94:
 28286                                  	; 14/12/2022
 28287                                  	; ds = cs
 28288                                  	; ax = [p_stack_count]
 28289                                  	;mov	ax,[p_stack_count]
 28290                                  	;;mov	ax,[cs:p_stack_count]
 28291 00002783 A3[8A02]                	mov	[stack_count],ax
 28292                                  	;mov	[cs:stack_count],ax
 28293                                  	;mov	ax,[cs:p_stack_size]
 28294 00002786 A1[C51E]                	mov	ax,[p_stack_size]
 28295                                  	;mov	[cs:stack_size],ax
 28296 00002789 A3[8C02]                	mov	[stack_size],ax
 28297                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 28298 0000278C C706[8E02]FFFF          	mov	word [stack_addr],-1
 28299                                  sr79:
 28300 00002792 E969F9                  	jmp	coff
 28301                                  
 28302                                  if87:
 28303                                  	; 14/12/2022
 28304 00002795 3906[C51E]              	cmp	[p_stack_size],ax ; 0
 28305 00002799 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 28306                                  	;cmp	word [cs:p_stack_size],0
 28307                                  	;je	short if94
 28308                                  en87:
 28309                                  	; 15/12/2022
 28310                                  	; ([p_stack_count] is invalid, use default values)
 28311                                  	; 14/12/2022
 28312                                  	; ds = cs
 28313 0000279B C706[8A02]0900          	mov	word [stack_count],defaultcount ; 9
 28314 000027A1 C706[8C02]8000          	mov	word [stack_size],defaultsize ; 128
 28315 000027A7 C706[8E02]0000          	mov	word [stack_addr],0
 28316                                  	;mov	word [cs:stack_count],defaultcount ; 9
 28317                                  	;				; reset to default value.
 28318                                  	;mov	word [cs:stack_size],defaultsize ; 128
 28319                                  	;mov	word [cs:stack_addr],0
 28320                                  
 28321 000027AD BA[DF4B]                	mov	dx,badstack
 28322 000027B0 E8C51D                  	call	print
 28323 000027B3 E8F201                  	call	error_line
 28324 000027B6 EBDA                    	jmp	short sr79
 28325                                  
 28326                                  ; 15/12/2022
 28327                                  %if 0
 28328                                  	mov	di,stks_parms
 28329                                  	xor	cx,cx
 28330                                  	; 03/01/2023
 28331                                  	;mov	dx,cx
 28332                                  do79:
 28333                                  	call	sysinit_parse
 28334                                  	jnc	short if79		; parse error
 28335                                  
 28336                                  	mov	dx,badstack		; "invalid stack parameter"
 28337                                  	call	print			;  and show messages and end the search loop.
 28338                                  	call	error_line
 28339                                  	;jmp	sr79
 28340                                  	; 11/12/2022
 28341                                  	jmp	short sr79
 28342                                  if79:
 28343                                  	cmp	ax,_$P_RC_EOL		; end of line?
 28344                                  	je	short en79		; then end the $endloop
 28345                                  
 28346                                  	;mov	ax,[cs:rv_dword]
 28347                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28348                                  	cmp	cx,1
 28349                                  	jne	short if83
 28350                                  
 28351                                  	mov	[cs:p_stack_count],ax
 28352                                  	jmp	short en83
 28353                                  if83:
 28354                                  	mov	[cs:p_stack_size],ax
 28355                                  en83:
 28356                                  	jmp	short do79
 28357                                  en79:
 28358                                  	cmp	word [cs:p_stack_count],0
 28359                                  	je	short if87
 28360                                  
 28361                                  	cmp	word [cs:p_stack_count],mincount ; 8
 28362                                  	jb	short ll88
 28363                                  	cmp	word [cs:p_stack_size],minsize ; 32
 28364                                  	jnb	short if88
 28365                                  ll88:
 28366                                  	mov	word [cs:p_stack_count],-1 ; invalid
 28367                                  if88:
 28368                                  	jmp	short en87
 28369                                  
 28370                                  	; 11/12/2022
 28371                                  if94:
 28372                                  	mov	ax,[cs:p_stack_count]
 28373                                  	mov	[cs:stack_count],ax
 28374                                  	mov	ax,[cs:p_stack_size]
 28375                                  	mov	[cs:stack_size],ax
 28376                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 28377                                  sr79:
 28378                                  	jmp	coff
 28379                                  
 28380                                  if87:
 28381                                  	cmp	word [cs:p_stack_size],0
 28382                                  	je	short en87
 28383                                  	mov	word [cs:p_stack_count],-1 ; invalid
 28384                                  en87:
 28385                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 28386                                  	jne	short if94
 28387                                  
 28388                                  	mov	word [cs:stack_count],defaultcount ; 9
 28389                                  					; reset to default value.
 28390                                  	mov	word [cs:stack_size],defaultsize ; 128
 28391                                  	mov	word [cs:stack_addr],0
 28392                                  
 28393                                  	mov	dx,badstack
 28394                                  	call	print
 28395                                  	call	error_line
 28396                                  	jmp	short sr79
 28397                                  
 28398                                  %endif
 28399                                  
 28400                                  ; 11/12/2022
 28401                                  %if 0 
 28402                                  
 28403                                  if94:
 28404                                  	mov	ax,[cs:p_stack_count]
 28405                                  	mov	[cs:stack_count],ax
 28406                                  	mov	ax,[cs:p_stack_size]
 28407                                  	mov	[cs:stack_size],ax
 28408                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 28409                                  sr79:
 28410                                  	jmp	coff
 28411                                  
 28412                                  %endif
 28413                                  
 28414                                  	;endif
 28415                                  
 28416                                  ;------------------------------------------------------------------------
 28417                                  ; shell command
 28418                                  ;------------------------------------------------------------------------
 28419                                  
 28420                                  trys:
 28421 000027B8 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 28422 000027BB 755A                    	jne	short tryx
 28423                                  
 28424                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28425                                  ; (SYSINIT:2BE1h)
 28426                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28427                                  ;%if 0
 28428                                  ;ifdef	MULTI_CONFIG
 28429 000027BD E88119                  	call	query_user              ; query the user if config_cmd
 28430 000027C0 7255                    	jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 28431 000027C2 2EC606[4F46]01          	mov	byte [cs:newcmd],1
 28432                                  ;endif
 28433                                  ;%endif ; 30/10/2022
 28434                                  
 28435                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 28436                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28437                                  	;mov	byte [cs:command_line+1],0
 28438                                  	; 15/12/2022
 28439                                  	; ds = cs
 28440 000027C8 C606[E146]00            	mov	byte [command_line+1],0
 28441                                  
 28442 000027CD BF[5346]                        mov     di,commnd+1		; we already have the first char
 28443 000027D0 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 28444                                  storeshell:
 28445 000027D3 E8BB01                  	call	getchr
 28446 000027D6 08C0                            or      al,al                   ; this is the normal case: "organize"
 28447 000027D8 741C                            jz	short getshparms	; put a ZERO right after the filename
 28448                                  
 28449 000027DA 3C20                            cmp     al," "                  ; this may happen if there are no args
 28450 000027DC 7209                            jb	short endofshell	; I suppose...
 28451 000027DE 8805                    	mov	[di],al
 28452 000027E0 47                      	inc	di
 28453                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 28454                                          ;jb	short storeshell	; commnd (the filename)
 28455                                          ;jmp	short endofshell
 28456                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28457                                  	;jmp	short storeshell
 28458                                  	; 03/01/2023
 28459 000027E1 81FF[9146]              	cmp	di,commnd+63		; this makes sure we don't overflow
 28460 000027E5 72EC                            jb	short storeshell	; commnd (the filename)
 28461                                  	;jmp	short endofshell
 28462                                  
 28463                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28464                                  ;getshparms:
 28465                                  ;	mov     byte [di],0		; zero-terminate the filename
 28466                                  ;	mov     di,command_line+1	; prepare to process the command-line
 28467                                  ;
 28468                                  ;parmloop:
 28469                                  ;	call	getchr
 28470                                  ;	cmp	al," "
 28471                                  ;	jb	short endofparms
 28472                                  ;	mov	[di],al
 28473                                  ;	inc	di
 28474                                  ;	cmp     di,command_line+126
 28475                                  ;	jb	short parmloop
 28476                                  ;endofparms:
 28477                                  ;	mov     cx,di
 28478                                  ;	sub     cx,command_line+1
 28479                                  ;	mov     [cs:command_line],cl
 28480                                  ;
 28481                                  ;endofshell:
 28482                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 28483                                  ;					; the command-line as the case may be)
 28484                                  ;skipline:
 28485                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 28486                                  ;       je	short endofline		; the line: watch for ever-present LF
 28487                                  ;call	getchr
 28488                                  ;       jnc	short skipline		; keep it up as long as there are chars
 28489                                  ;
 28490                                  ;endofline:
 28491                                  ;       jmp     conflp
 28492                                  
 28493                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28494                                  endofshell:
 28495 000027E7 C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 28496                                  					; the command-line as the case may be)
 28497                                  	; 11/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 28498                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2C33h
 28499                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:314Eh
 28500                                  	;call	getchr
 28501                                  skipline:		; MSDOS 6.21 IO.SYS - SYSINIT:2C33h
 28502 000027EA 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 28503 000027EC 7405                    	je	short endofline		; the line: watch for ever-present LF
 28504 000027EE E8A001                  	call	getchr
 28505                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.1 IO.SYS)
 28506                                  	; (SYSINIT:2C3Ah)
 28507 000027F1 73F7                    	jnb	short skipline
 28508                                  	
 28509                                  endofline:
 28510 000027F3 E9B0F8                  	jmp     conflp
 28511                                  
 28512                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28513                                  getshparms:
 28514                                  	; 18/12/2022
 28515                                  	; al = 0
 28516 000027F6 8805                    	mov	[di],al ; 0
 28517                                  	;mov	byte [di],0		; zero-terminate the filename
 28518 000027F8 BF[E146]                	mov     di,command_line+1	; prepare to process the command-line
 28519                                  parmloop:
 28520 000027FB E89301                  	call	getchr
 28521 000027FE 3C20                    	cmp	al," " ; 20h
 28522                                  	;jb	short endofshell
 28523                                  	; 03/01/2023
 28524 00002800 7209                    	jb	short endofparms
 28525                                  
 28526 00002802 8805                    	mov	[di],al
 28527 00002804 47                      	inc	di
 28528                                  	;jmp	short parmloop
 28529                                  	; 03/01/2023 - Retro DOS v4.2
 28530 00002805 81FF[5E47]              	cmp     di,command_line+126
 28531 00002809 72F0                    	jb	short parmloop
 28532                                  
 28533                                  	; 03/01/2023 - Retro DOS v4.2
 28534                                  endofparms:
 28535 0000280B 89F9                    	mov	cx,di
 28536 0000280D 81E9[E146]              	sub	cx,command_line+1
 28537                                  	;mov	[cs:command_line],cl
 28538                                  	; 03/01/2023
 28539 00002811 880E[E046]              	mov	[command_line],cl
 28540 00002815 EBD0                    	jmp	short endofshell
 28541                                  
 28542                                  ;------------------------------------------------------------------------
 28543                                  ; fcbs command
 28544                                  ;------------------------------------------------------------------------
 28545                                  
 28546                                  ;************************************************************************
 28547                                  ; function: parse the parameters of fcbs= command.			*
 28548                                  ;									*
 28549                                  ; input :								*
 28550                                  ;	es:si -> parameters in command line.				*
 28551                                  ; output:								*
 28552                                  ;	set the variables fcbs,keep.					*
 28553                                  ;									*
 28554                                  ; subroutines to be called:						*
 28555                                  ;	sysinit_parse							*
 28556                                  ; logic:								*
 28557                                  ; {									*
 28558                                  ;	set di points to fcbs_parms;					*
 28559                                  ;	set dx,cx to 0; 						*
 28560                                  ;	while (end of command line)					*
 28561                                  ;	{ sysparse;							*
 28562                                  ;	  if (no error) then						*
 28563                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 28564                                  ;		   fcbs = result_val._$P_picked_val;			*
 28565                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 28566                                  ;		   keep = result_val._$P_picked_val;			*
 28567                                  ;	     }								*
 28568                                  ;	  else	/*error exit*/						*
 28569                                  ;	     error exit;						*
 28570                                  ;	};								*
 28571                                  ; };									*
 28572                                  ;************************************************************************
 28573                                  
 28574                                  tryx:
 28575 00002817 80FC58                          cmp     ah,CONFIG_FCBS  ; 'X'
 28576                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28577 0000281A 7534                    	jne	short try1
 28578                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28579                                  	;jne	short tryy	; comment command
 28580                                  
 28581                                  ; 31/12/2022 - Retro DOS v4.2
 28582                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28583                                  ;%if 0
 28584                                  ;ifdef	MULTI_CONFIG
 28585 0000281C E82219                  	call	query_user      ; query the user if config_cmd
 28586 0000281F 722F                    	jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 28587                                  ;endif
 28588                                  ;%endif ; 30/10/2022
 28589                                  
 28590 00002821 BF[421E]                	mov	di,fcbs_parms
 28591 00002824 31C9                    	xor	cx,cx
 28592                                  	; 03/01/2023
 28593                                  	;mov	dx,cx
 28594                                  do98:
 28595 00002826 E81101                  	call	sysinit_parse
 28596                                          ; 03/01/2023
 28597                                  	;jnc	short if98	; parse error
 28598                                          ;call	badparm_p	;  and show messages and end the search loop.
 28599                                  	;jmp	short sr98
 28600                                  	;------------------------
 28601                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28602 00002829 723B                    	jc	short badparm_p_coff
 28603                                  if98:
 28604 0000282B 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 28605 0000282E 7412                    	je	short en98	; then end the $endloop
 28606                                  
 28607                                  	;;mov	al,[cs:rv_dword]
 28608                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28609                                  	; 15/12/2022
 28610                                  	; ds = cs
 28611 00002830 A0[BF1D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 28612 00002833 83F901                  	cmp	cx,1		; the first positional?
 28613 00002836 7505                    	jne	short if102
 28614                                  	;mov	[cs:p_fcbs],al
 28615                                  	; 15/12/2022
 28616 00002838 A2[771E]                	mov	[p_fcbs],al
 28617                                  	;jmp	short en102
 28618 0000283B EBE9                    	jmp	short do98
 28619                                  if102:
 28620                                  	;mov	[cs:p_keep],al
 28621                                  	; 15/12/2022
 28622 0000283D A2[781E]                	mov	[p_keep],al
 28623                                  en102:
 28624 00002840 EBE4                    	jmp	short do98
 28625                                  en98:
 28626                                  	; 15/12/2022
 28627                                  	; ds = cs
 28628 00002842 A0[771E]                	mov	al,[p_fcbs]
 28629 00002845 A2[9E02]                	mov	[FCBS],al
 28630 00002848 C606[9F02]00            	mov	byte [KEEP],0
 28631                                  	;mov	al,[cs:p_fcbs]	 ; M017
 28632                                  	;mov	[cs:FCBS],al	 ; M017
 28633                                  	;mov	byte [cs:KEEP],0 ; M017
 28634                                  sr98:
 28635 0000284D E9AEF8                  	jmp	coff
 28636                                  
 28637                                  ; 31/12/2022 - Retro DOS v4.2
 28638                                  %if 0
 28639                                  
 28640                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28641                                  ;-------------------------------------------------------------------------
 28642                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 28643                                  ;		line number
 28644                                  ;-------------------------------------------------------------------------
 28645                                  
 28646                                  tryy:
 28647                                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 28648                                  	jne	short try0
 28649                                  
 28650                                  donothing:
 28651                                  	; 15/12/2022
 28652                                  	; ds = cs
 28653                                  	dec	word [chrptr]
 28654                                  	inc	word [count]
 28655                                  	; 02/11/2022
 28656                                  	;dec	word [cs:chrptr]
 28657                                  	;inc	word [cs:count]
 28658                                  
 28659                                  	jmp	coff
 28660                                  
 28661                                  ;------------------------------------------------------------------------
 28662                                  ; rem command
 28663                                  ;------------------------------------------------------------------------
 28664                                  
 28665                                  try0:				; do nothing with this line.
 28666                                  	cmp     ah,CONFIG_REM ; '0'
 28667                                  	je	short donothing
 28668                                  
 28669                                  %endif
 28670                                  
 28671                                  ; 07/04/2019 - Retro DOS v4.0
 28672                                  
 28673                                  ;-----------------------------------------------------------------------
 28674                                  ; switches command
 28675                                  ;-----------------------------------------------------------------------
 28676                                  
 28677                                  ;***********************************************************************
 28678                                  ;								       *
 28679                                  ; function: parse the option switches specified.		       *
 28680                                  ; note - this command is intended for the future use also.	       *
 28681                                  ; when we need to set system data flag,use this command.	       *
 28682                                  ;								       *
 28683                                  ; input :							       *
 28684                                  ;	es:si -> parameters in command line.			       *
 28685                                  ; output:							       *
 28686                                  ;	p_swit_k set if /k option chosen.			       *
 28687                                  ;								       *
 28688                                  ; subroutines to be called:					       *
 28689                                  ;	sysinit_parse						       *
 28690                                  ; logic:							       *
 28691                                  ; {								       *
 28692                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 28693                                  ;	set dx,cx to 0; 					       *
 28694                                  ;	while (end of command line)				       *
 28695                                  ;	{ sysinit_parse;					       *
 28696                                  ;	  if (no error) then					       *
 28697                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 28698                                  ;		    p_swit_k = 1				       *
 28699                                  ;	       endif						       *
 28700                                  ;	  else {show error message;error exit}			       *
 28701                                  ;	};							       *
 28702                                  ; };								       *
 28703                                  ;								       *
 28704                                  ;***********************************************************************
 28705                                  
 28706                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 28707                                  
 28708                                  try1:
 28709 00002850 80FC31                          cmp     ah,CONFIG_SWITCHES ; '1'
 28710 00002853 7402                    	je	short do_try1	; switches= command entered?
 28711                                  skip_it5:
 28712                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28713                                  	; (SYSINIT:2C8Ah)
 28714 00002855 EB7F                    	jmp	tryv
 28715                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28716                                  	;jmp	tryz
 28717                                  
 28718                                  do_try1:
 28719                                  
 28720                                  ; 31/12/2022 - Retro DOS v4.2
 28721                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28722                                  ;%if 0
 28723                                  ;ifdef	MULTI_CONFIG
 28724 00002857 E8E718                  	call	query_user      ; query the user if config_cmd
 28725 0000285A 72F9                    	jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 28726                                  ;endif
 28727                                  ;%endif ; 30/10/2022
 28728                                  
 28729 0000285C BF[DC1E]                	mov	di,swit_parms
 28730 0000285F 31C9                    	xor	cx,cx
 28731                                  	; 03/01/2023
 28732                                  	;mov	dx,cx
 28733                                  do110:
 28734 00002861 E8D600                  	call	sysinit_parse
 28735 00002864 7306                    	jnc	short if110	; parse error
 28736                                  	;call	badparm_p	;  and show messages and end the search loop.
 28737                                  	;jmp	short sr110
 28738                                  	; -----------------------
 28739                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28740                                  badparm_p_coff:
 28741 00002866 E80001                  	call	badparm_p
 28742 00002869 E992F8                  	jmp	coff
 28743                                  	;------------------------
 28744                                  if110:
 28745 0000286C 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 28746 0000286F 742D                    	je	short en110	; then jmp to $endloop for semantic check
 28747                                  
 28748                                  	; 15/12/2022
 28749                                  	; ds = cs
 28750                                  	;;cmp	word [cs:result_val_swoff],swit_k
 28751                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 28752 00002871 813E[BD1D][F81E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 28753 00002877 7507                    	jne	short if115	;				;M059
 28754                                  	; 15/12/2022
 28755 00002879 C606[2B1F]01            	mov	byte [p_swit_k],1
 28756                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 28757 0000287E EBE1                    	jmp	short do110
 28758                                  if115:	
 28759                                  	; 15/12/2022						;M059
 28760                                  	;;cmp	word [cs:result_val_swoff],swit_t
 28761                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 28762 00002880 813E[BD1D][1C1F]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 28763 00002886 7507                    	jne	short if116					;M059 M063
 28764                                  	; 15/12/2022
 28765 00002888 C606[2C1F]01            	mov	byte [p_swit_t],1
 28766                                  	;mov	byte [cs:p_swit_t],1				;M059
 28767 0000288D EBD2                    	jmp	short do110					;M059
 28768                                  if116:
 28769                                  	; 15/12/2022
 28770                                  	;;cmp	word [cs:result_val_swoff],swit_w
 28771                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 28772 0000288F 813E[BD1D][281F]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 28773 00002895 75CA                    	jne	short do110					;M063
 28774                                  	; 15/12/2022
 28775 00002897 C606[2D1F]01            	mov	byte [p_swit_w],1
 28776                                  	;mov	byte [cs:p_swit_w],1				;M063
 28777 0000289C EBC3                    	jmp	short do110					;M063
 28778                                  en110:
 28779                                  	; 15/12/2022
 28780                                  	; ds = cs
 28781 0000289E 803E[2B1F]01            	cmp	byte [p_swit_k],1
 28782                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 28783 000028A3 1E                      	push	ds
 28784                                  	;;mov	ax,Bios_Data
 28785                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 28786                                  	; 21/10/2022
 28787 000028A4 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 28788 000028A7 8ED8                    	mov	ds,ax
 28789 000028A9 750A                    	jne	short if117
 28790 000028AB C606[E504]00            	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 28791 000028B0 C606[E604]01            	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 28792                                  if117:
 28793                                  	; 15/12/2022
 28794                                  	; ds <> cs
 28795 000028B5 2EA0[2C1F]              	mov	al,[cs:p_swit_t]				;M059
 28796 000028B9 A2[F204]                	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 28797                                  
 28798 000028BC 2E803E[2D1F]00          	cmp	byte [cs:p_swit_w],0				;M063
 28799 000028C2 740E                    	je	short skip_dos_flag				;M063
 28800 000028C4 06                      	push	es
 28801 000028C5 53                      	push	bx
 28802 000028C6 B452                    	mov	ah,GET_IN_VARS ; 52h				;M063
 28803 000028C8 CD21                    	int	21h						;M063
 28804                                  			; DOS - 2+ internal - GET LIST OF LISTS
 28805                                  			; Return: ES:BX -> DOS list of lists
 28806                                  	;or	bytes [es:86h],2
 28807 000028CA 26800E860002            	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 28808 000028D0 5B                      	pop	bx
 28809 000028D1 07                      	pop	es
 28810                                  skip_dos_flag:							;M063
 28811 000028D2 1F                      	pop	ds
 28812                                  sr110:
 28813 000028D3 E928F8                  	jmp	coff
 28814                                  
 28815                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28816                                  ; (SYSINIT:2D14h)
 28817                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28818                                  ;%if 0
 28819                                  
 28820                                  tryv:
 28821                                  
 28822                                  ;ifdef	MULTI_CONFIG
 28823                                  ;------------------------------------------------------------------------
 28824                                  ; set command (as in "set var=value<cr/lf>")
 28825                                  ;------------------------------------------------------------------------
 28826                                  
 28827 000028D6 80FC56                  	cmp	ah,CONFIG_SET  ; 'V'
 28828 000028D9 750F                    	jne	short tryn
 28829 000028DB E86318                  	call	query_user      ; query the user if config_cmd
 28830 000028DE 720A                    	jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 28831 000028E0 E85714                  	call	copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 28832 000028E3 73EE                    	jnc	short sr110	; no error
 28833                                  err:    
 28834 000028E5 E8C000                  	call	error_line      ; whoops, display error in line XXX
 28835 000028E8 EBE9                    	jmp	short sr110     ; jump to coff (to skip to next line)
 28836                                  
 28837                                  ;------------------------------------------------------------------------
 28838                                  ; numlock command (as in "numlock=on|off")
 28839                                  ;------------------------------------------------------------------------
 28840                                  tryn:
 28841 000028EA 80FC4E                  	cmp	ah,CONFIG_NUMLOCK  ;'N'
 28842 000028ED 750C                    	jne	short tryy      
 28843 000028EF E84F18                  	call	query_user      ; query the user if config_cmd
 28844 000028F2 7207                    	jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 28845 000028F4 E8C410                  	call	set_numlock
 28846 000028F7 72EC                    	jc	short err
 28847 000028F9 EBD8                    	jmp	short sr110	; all done
 28848                                  
 28849                                  ;endif	;MULTI_CONFIG
 28850                                  
 28851                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28852                                  ;-------------------------------------------------------------------------
 28853                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 28854                                  ;		line number
 28855                                  ;-------------------------------------------------------------------------
 28856                                  
 28857                                  	; 31/12/2022
 28858                                  tryy:
 28859 000028FB 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 28860 000028FE 750B                    	jne	short try0
 28861                                  
 28862                                  donothing:
 28863                                  	; 15/12/2022
 28864                                  	; ds = cs
 28865 00002900 FF0E[5803]              	dec	word [chrptr]
 28866 00002904 FF06[5403]              	inc	word [count]
 28867                                  	; 02/11/2022
 28868                                  	;dec	word [cs:chrptr]
 28869                                  	;inc	word [cs:count]
 28870                                  
 28871 00002908 E9F3F7                  	jmp	coff
 28872                                  
 28873                                  ;------------------------------------------------------------------------
 28874                                  ; rem command
 28875                                  ;------------------------------------------------------------------------
 28876                                  
 28877                                  try0:				; do nothing with this line.
 28878 0000290B 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 28879 0000290E 74F0                    	je	short donothing
 28880                                  
 28881                                  ;%endif	; 30/10/2022
 28882                                  
 28883                                  ; 30/10/2022
 28884                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 28885                                  
 28886                                  ;------------------------------------------------------------------------
 28887                                  ; bogus command
 28888                                  ;------------------------------------------------------------------------
 28889                                  
 28890                                  tryz:
 28891 00002910 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 28892                                  	; 31/12/2022
 28893 00002913 74EB                    	je	short donothing
 28894                                  	; 02/11/2022
 28895                                  	;je	short tryz_donothing
 28896                                  
 28897 00002915 FF0E[5803]              	dec	word [chrptr]
 28898 00002919 FF06[5403]              	inc	word [count]
 28899 0000291D EB3E                    	jmp	short badop
 28900                                  
 28901                                  ; 31/12/2022
 28902                                  ;	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 28903                                  ;tryz_donothing:
 28904                                  ;	jmp	donothing
 28905                                  
 28906                                  ; 07/04/2019 - Retro DOS v4.0
 28907                                  
 28908                                  ;------------------------------------------------------------------------------
 28909                                  
 28910                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28911                                  ; (SYSINIT:2D5Dh)
 28912                                  
 28913                                  ; 11/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 28914                                  
 28915                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28916                                  ;
 28917                                  ;***	CheckProtmanArena -- special hack for adjusting alloclim with Protman$
 28918                                  ;
 28919                                  ;	adjusts alloclim if Protman$ reduced our arena through a manual hack.
 28920                                  ;
 28921                                  CheckProtmanArena:
 28922 0000291F 06                      	push	es
 28923 00002920 2EA1[6603]              	mov	ax,[cs:area]	; get our arena header
 28924 00002924 48                      	dec	ax
 28925 00002925 8EC0                    	mov	es,ax
 28926                                  	;add	ax,[es:ARENA.SIZE]
 28927 00002927 2603060300              	add	ax,[es:3]	; find end of arena
 28928 0000292C 40                      	inc	ax
 28929 0000292D 2E3B06[A302]            	cmp	ax,[cs:ALLOCLIM] ; is it less than alloclim?
 28930 00002932 7704                    	ja	short CheckProtmanDone
 28931                                  
 28932 00002934 2EA3[A302]              	mov	[cs:ALLOCLIM],ax ; reduce alloclim then
 28933                                  CheckProtmanDone:
 28934 00002938 07                      	pop	es
 28935 00002939 C3                      	retn
 28936                                  
 28937                                  ;------------------------------------------------------------------------------
 28938                                  
 28939                                  sysinit_parse:
 28940                                  
 28941                                  ;------------------------------------------------------------------------------
 28942                                  ;set up registers for sysparse
 28943                                  ;in)	es:si -> command line in confbot
 28944                                  ;	di -> offset of the parse control definition.
 28945                                  ;
 28946                                  ;out)	calls sysparse.
 28947                                  ;	carry will set if parse error.
 28948                                  ;	*** the caller should check the eol condition by looking at ax
 28949                                  ;	*** after each call.
 28950                                  ;	*** if no parameters are found,then ax will contain a error code.
 28951                                  ;	*** if the caller needs to look at the synomym@ of the result,
 28952                                  ;	***  the caller should use cs:@ instead of es:@.
 28953                                  ;	cx register should be set to 0 at the first time the caller calls this
 28954                                  ;	 procedure.
 28955                                  ;	ax - exit code
 28956                                  ;	bl - terminated delimeter code
 28957                                  ;	cx - new positional ordinal
 28958                                  ;	si - set to pase scanned operand
 28959                                  ;	dx - selected result buffer
 28960                                  ;------------------------------------------------------------------------------
 28961                                  
 28962                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28963                                  	; (SYSINIT:2D78h)
 28964                                  
 28965                                  	; 24/10/2022
 28966 0000293A 06                      	push	es			;save es,ds
 28967 0000293B 1E                      	push	ds
 28968                                  
 28969 0000293C 06                      	push	es
 28970 0000293D 1F                      	pop	ds			;now ds:si -> command line
 28971                                  
 28972 0000293E 0E                      	push	cs
 28973 0000293F 07                      	pop	es			;now es:di -> control definition
 28974                                  
 28975 00002940 2E8C1E[E614]            	mov	[cs:badparm_seg],ds	;save the pointer to the parm
 28976 00002945 2E8936[E414]            	mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 28977                                  	;mov	dx,0
 28978                                  	; 03/01/2023
 28979 0000294A 29D2                    	sub	dx,dx ; 0
 28980 0000294C E83FEC                  	call	SysParse
 28981 0000294F 83F800                  	cmp	ax,_$P_No_Error	; 0	;no error
 28982                                  
 28983                                  ;**cas note:  when zero true after cmp, carry clear
 28984                                  
 28985                                  	;je	short ll4
 28986                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 28987                                  	; 12/12/2022
 28988 00002952 7406                    	je	short en4 ; cf=0
 28989 00002954 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 28990                                  	;jne	short if4
 28991                                  	; 12/12/2022
 28992 00002957 7401                    	je	short en4 ; cf=0
 28993                                  
 28994                                  ; 12/12/2022
 28995                                  ;ll4:
 28996                                  ;	; 12/12/2022
 28997                                  ;	; cf=0
 28998                                  ;	;clc
 28999                                  ;	jmp	short en4
 29000                                  
 29001                                  if4:
 29002                                  	; 24/10/2022
 29003 00002959 F9                      	stc
 29004                                  en4:
 29005 0000295A 1F                      	pop	ds
 29006 0000295B 07                      	pop	es
 29007 0000295C C3                      	retn
 29008                                  
 29009                                  ; 11/12/2022
 29010                                  %if 0
 29011                                  
 29012                                  ;----------------------------------------------------------------------------
 29013                                  ;
 29014                                  ; procedure : badop_p
 29015                                  ;
 29016                                  ;             same thing as badop,but will make sure to set ds register back
 29017                                  ;             to sysinitseg and return back to the caller.
 29018                                  ;
 29019                                  ;----------------------------------------------------------------------------
 29020                                  
 29021                                  badop_p:
 29022                                  	push	cs
 29023                                  	pop	ds		;set ds to configsys seg.
 29024                                  	mov	dx,badopm
 29025                                  	call	print
 29026                                          ;call	error_line
 29027                                  	;retn
 29028                                  	; 11/12/2022
 29029                                  	jmp	error_line
 29030                                  
 29031                                  %endif
 29032                                  
 29033                                  ;----------------------------------------------------------------------------
 29034                                  ;
 29035                                  ; label : badop
 29036                                  ;
 29037                                  ;----------------------------------------------------------------------------
 29038                                  
 29039                                  badop:	
 29040 0000295D BA[A04A]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 29041 00002960 E8151C                  	call	print
 29042 00002963 E84200                  	call	error_line	;show "error in config.sys ..." .
 29043 00002966 E995F7                  	jmp	coff
 29044                                  
 29045                                  ;----------------------------------------------------------------------------
 29046                                  ;
 29047                                  ; procedure : badparm_p
 29048                                  ;
 29049                                  ;             show "bad command or parameters - xxxxxx"
 29050                                  ;             in badparm_seg,badparm_off -> xxxxx
 29051                                  ;
 29052                                  ;----------------------------------------------------------------------------
 29053                                  
 29054                                  	; 24/10/2022
 29055                                  badparm_p:
 29056                                  	; 11/12/2022
 29057                                  	; ds = cs
 29058                                  	; 11/12/2022
 29059                                  	;push	ds ; *
 29060 00002969 52                      	push	dx
 29061 0000296A 56                      	push	si
 29062                                  
 29063                                  	; 11/12/2022
 29064                                  	; ds = cs
 29065                                  	;push	cs
 29066                                  	;pop	ds
 29067                                  
 29068 0000296B BA[C74A]                	mov	dx,badparm
 29069 0000296E E8071C                  	call	print			; "bad command or parameters - "
 29070 00002971 C536[E414]              	lds	si,[badparm_ptr]
 29071                                  
 29072                                  ;	print "xxxx" until cr.
 29073                                  
 29074                                  do1:
 29075 00002975 8A14                    	mov	dl,[si]			; get next character
 29076 00002977 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 29077 0000297A 7407                    	je	short en1		; exit loop if so
 29078                                  
 29079 0000297C B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 29080 0000297E CD21                    	int	21h			; display character
 29081 00002980 46                      	inc	si			; next character
 29082 00002981 EBF2                    	jmp	short do1
 29083                                  en1:
 29084 00002983 0E                      	push	cs
 29085 00002984 1F                      	pop	ds
 29086                                  
 29087 00002985 BA[C44A]                	mov	dx,crlfm
 29088 00002988 E8ED1B                  	call	print
 29089 0000298B E81A00                  	call	error_line
 29090                                  
 29091 0000298E 5E                      	pop	si
 29092 0000298F 5A                      	pop	dx
 29093                                  	; 11/12/2022
 29094                                  	;pop	ds ; *
 29095                                  badparmp_ret:
 29096 00002990 C3                      	retn
 29097                                  
 29098                                  ;----------------------------------------------------------------------------
 29099                                  ;
 29100                                  ; procedure : getchr
 29101                                  ;
 29102                                  ;----------------------------------------------------------------------------
 29103                                  
 29104                                  	; 24/10/2022
 29105                                  getchr:
 29106                                  	; 12/12/2022
 29107                                  	;push	cx
 29108                                  	;mov	cx,[count]
 29109                                  	;jcxz	nochar
 29110                                  	; 12/12/2022
 29111 00002991 833E[5403]01            	cmp	word [count],1 
 29112 00002996 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 29113                                  	
 29114 00002998 8B36[5803]              	mov	si,[chrptr]
 29115 0000299C 268A04                  	mov	al,[es:si]
 29116 0000299F FF0E[5403]              	dec	word [count]
 29117 000029A3 FF06[5803]              	inc	word [chrptr]
 29118                                  	; 12/12/202
 29119                                  	; cf=0
 29120                                  	;clc
 29121                                  ;get_ret:
 29122                                  	;pop	cx
 29123                                  	;retn
 29124                                  nochar: 
 29125                                  	; 12/12/2022
 29126                                  	; cf=1
 29127                                  	;stc
 29128                                  	;jmp	short get_ret
 29129                                  	
 29130 000029A7 C3                      	retn
 29131                                  
 29132                                  ; 11/12/2022
 29133                                  %if 0
 29134                                  
 29135                                  ;----------------------------------------------------------------------------
 29136                                  ;
 29137                                  ; procedure : incorrect_order
 29138                                  ;
 29139                                  ;             show "incorrect order in config.sys ..." message.
 29140                                  ;
 29141                                  ;----------------------------------------------------------------------------
 29142                                  
 29143                                  incorrect_order:
 29144                                  	mov	dx,badorder
 29145                                  	call	print
 29146                                  	call	showlinenum
 29147                                  	retn
 29148                                  
 29149                                  %endif
 29150                                  
 29151                                  ;----------------------------------------------------------------------------
 29152                                  ;
 29153                                  ; procedure : error_line
 29154                                  ;
 29155                                  ;             show "error in config.sys ..." message.
 29156                                  ;
 29157                                  ;----------------------------------------------------------------------------
 29158                                  
 29159                                  	; 11/12/2022
 29160                                  	; 24/10/2022
 29161                                  error_line:
 29162                                  	; 11/12/2022
 29163                                  	; ds = cs
 29164                                  	;push	cs
 29165                                  	;pop	ds
 29166                                  
 29167 000029A8 BA[FC4B]                	mov	dx,errorcmd
 29168 000029AB E8CA1B                  	call	print
 29169                                  	;call	showlinenum
 29170                                  	;retn
 29171                                  	; 11/12/2022
 29172                                  	;jmp	short showlinenum
 29173                                  
 29174                                  ;----------------------------------------------------------------------------
 29175                                  ;
 29176                                  ; procedure : showlinenum
 29177                                  ;
 29178                                  ; convert the binary linecount to decimal ascii string in showcount
 29179                                  ; and display showcount at the current curser position.
 29180                                  ; in.) linecount
 29181                                  ;
 29182                                  ; out) the number is printed.
 29183                                  ;
 29184                                  ;----------------------------------------------------------------------------
 29185                                  
 29186                                  	; 11/12/2022
 29187                                  	; ds = cs
 29188                                  	; 24/10/2022
 29189                                  showlinenum:
 29190 000029AE 06                      	push	es
 29191                                  	; 11/12/2022
 29192                                  	;push	ds
 29193 000029AF 57                      	push	di
 29194                                  
 29195 000029B0 0E                      	push	cs
 29196 000029B1 07                      	pop	es		; es=cs
 29197                                  
 29198                                  	; 11/12/2022
 29199                                  	;push	cs
 29200                                  	;pop	ds
 29201                                  
 29202 000029B2 BF[B302]                	mov	di,showcount+4	; di -> the least significant decimal field.
 29203 000029B5 B90A00                  	mov	cx,10		; decimal divide factor
 29204                                  	;mov	ax,[cs:linecount]
 29205                                  	; 11/12/2022
 29206 000029B8 A1[AD02]                	mov	ax,[linecount]
 29207                                  sln_loop:
 29208                                  	; 11/12/2022
 29209 000029BB 39C8                    	cmp	ax,cx ; < 10 ?
 29210                                  	;cmp	ax,10		; < 10?
 29211 000029BD 720C                    	jb	short sln_last  ; yes
 29212                                  
 29213 000029BF 31D2                    	xor	dx,dx
 29214 000029C1 F7F1                    	div	cx	; cx = 10
 29215 000029C3 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 29216                                  				; convert to ascii numeric char ("0" to "9")
 29217 000029C6 8815                    	mov	[di],dl
 29218 000029C8 4F                      	dec	di
 29219 000029C9 EBF0                    	jmp	short sln_loop
 29220                                  
 29221                                  sln_last:
 29222 000029CB 0C30                    	or	al,30h	; "0"   ; convert to ascii numeric char ("0" to "9")
 29223 000029CD 8805                    	mov	[di],al
 29224 000029CF 89FA                    	mov	dx,di
 29225 000029D1 E8A41B                  	call	print		; show it.
 29226 000029D4 5F                      	pop	di
 29227                                  	; 11/12/2022
 29228                                  	;pop	ds
 29229 000029D5 07                      	pop	es
 29230 000029D6 C3                      	retn
 29231                                  
 29232                                  ; 07/04/2019 - Retro DOS v4.0
 29233                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 29234                                  
 29235                                  ;----------------------------------------------------------------------------
 29236                                  ;
 29237                                  ; procedure : ProcDOS
 29238                                  ;
 29239                                  ;	Process the result of DOS= parsing
 29240                                  ;
 29241                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 29242                                  ;				= 2 for DOS=LOW
 29243                                  ;				= 3 for DOS=UMB
 29244                                  ;				= 4 for DOS=NOUMB
 29245                                  ;----------------------------------------------------------------------------
 29246                                  
 29247                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 29248                                  	; (SYTSINIT:2AB5h)
 29249                                  ProcDOS:
 29250                                  	; 01/01/2023
 29251                                  	; ds = cs
 29252 000029D7 30E4                    	xor	ah,ah
 29253                                  	;;mov	al,[cs:result_val_itag]
 29254                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 29255                                  	; 01/01/2023
 29256 000029D9 A0[BC1D]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 29257 000029DC 48                      	dec	ax
 29258 000029DD 7415                    	jz	short pd_hi
 29259 000029DF 48                      	dec	ax
 29260 000029E0 740E                    	jz	short pd_lo
 29261 000029E2 48                      	dec	ax
 29262 000029E3 7405                    	jz	short pd_umb
 29263                                  	;;mov	byte [cs:DevUMB],0
 29264                                  	; 18/12/2022
 29265                                  	;mov	byte [cs:DevUMB],ah ; 0
 29266                                  	; 01/01/2023
 29267 000029E5 8826[B81F]              	mov	byte [DevUMB],ah ; 0
 29268 000029E9 C3                      	retn
 29269                                  pd_umb:
 29270                                  	; 01/01/2023
 29271 000029EA C606[B81F]FF            	mov	byte [DevUMB],0FFh
 29272                                  	;mov	byte [cs:DevUMB],0FFh
 29273 000029EF C3                      	retn
 29274                                  pd_lo:
 29275                                  	; 01/01/2023
 29276 000029F0 A2[6A02]                	mov	[runhigh],al ; 0
 29277                                  	; 18/12/2022
 29278                                  	;mov	[cs:runhigh],al ; 0
 29279                                  	;;mov	byte [cs:runhigh],0
 29280 000029F3 C3                      	retn
 29281                                  pd_hi:
 29282                                  	; 01/01/2023
 29283 000029F4 C606[6A02]FF            	mov	byte [runhigh],0FFh
 29284                                  	;mov	byte [cs:runhigh],0FFh
 29285                                  limx:	; 11/12/2022
 29286 000029F9 C3                      	retn
 29287                                  
 29288                                  ;----------------------------------------------------------------------------
 29289                                  ;
 29290                                  ; procedure : LieInt12Mem
 29291                                  ;
 29292                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 29293                                  ;		alloclim set to the limit of low memory.
 29294                                  ;
 29295                                  ;	Output : none
 29296                                  ;
 29297                                  ;	Changes the ROM BIOS variable which stores the total low memory
 29298                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 29299                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 29300                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 29301                                  ;	converted into Ks and stored in 40:13h
 29302                                  ;
 29303                                  ;----------------------------------------------------------------------------
 29304                                  
 29305                                  LieInt12Mem:
 29306                                  	; 11/12/2022
 29307                                  	; ds = cs
 29308 000029FA A1[A302]                	mov	ax,[ALLOCLIM]
 29309                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12h as alloclim
 29310                                  					; assuming that it is 3Com
 29311 000029FD E84400                  	call	IsIt3Com		; Is it 3Com driver?
 29312 00002A00 740A                    	jz	short lim_set		; yes, lie to him differently
 29313                                  	; 13/05/2019
 29314                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 29315                                  	;je	short limx		; no, don't lie
 29316                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12h as end of UMB
 29317                                  	; 11/12/2022
 29318                                  	; ds = cs
 29319 00002A02 803E[C71F]00            	cmp	byte [DeviceHi],0
 29320 00002A07 74F0                    	je	short limx
 29321 00002A09 A1[AD1F]                	mov	ax,[DevLoadEnd]
 29322                                  lim_set:
 29323                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29324                                  	; 11/12/2022
 29325                                  	;call	SetInt12Mem
 29326                                  ;limx:
 29327                                  	;retn
 29328                                  	
 29329                                  	;jmp	short SetInt12Mem 
 29330                                  
 29331                                  ;----------------------------------------------------------------------------
 29332                                  ;
 29333                                  ; procedure : SetInt12Mem
 29334                                  ;
 29335                                  ;	Input : AX = Memory size to be set (in paras)
 29336                                  ;	Output : none
 29337                                  ;
 29338                                  ;	Sets the variable 40:13 to the memory size passed in AX
 29339                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 29340                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 29341                                  ;	restoring the value of 40:13
 29342                                  ;
 29343                                  ;----------------------------------------------------------------------------
 29344                                  
 29345                                  	; 01/11/2022
 29346                                  SetInt12Mem:
 29347 00002A0C 1E                      	push	ds
 29348 00002A0D BB4000                  	mov	bx,40h
 29349 00002A10 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 29350 00002A12 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 29351 00002A16 2E891E[CB1F]            	mov	[cs:OldInt12Mem],bx	; save it
 29352 00002A1B B106                    	mov	cl,6
 29353 00002A1D D3E8                    	shr	ax,cl			; convert paras into Ks
 29354 00002A1F A31300                  	mov	[13h],ax		; Lie
 29355 00002A22 2EC606[CA1F]FF          	mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 29356 00002A28 1F                      	pop	ds
 29357                                  ;limx:
 29358 00002A29 C3                      	retn
 29359                                  
 29360                                  ;----------------------------------------------------------------------------
 29361                                  ;
 29362                                  ; procedure : TrueInt12Mem
 29363                                  ;
 29364                                  ;	Input : Int12Lied = 0 if we are not lying currently
 29365                                  ;			  = 0ffh if we are lying
 29366                                  ;		OldInt12Mem = Saved value of 40:13h
 29367                                  ;
 29368                                  ;	Output : none
 29369                                  ;
 29370                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 29371                                  ;	and resets the flag which indicates that we were lying
 29372                                  ;
 29373                                  ;----------------------------------------------------------------------------
 29374                                  
 29375                                  TrueInt12Mem:
 29376                                  	; 11/12/2022
 29377                                  	; ds = cs
 29378 00002A2A 803E[CA1F]00            	cmp	byte [Int12Lied],0
 29379                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 29380                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 29381                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 29382 00002A2F 7412                    	je	short timx		; no, we weren't
 29383                                  	; 18/12/2022
 29384 00002A31 B84000                  	mov	ax,40h
 29385 00002A34 8826[CA1F]              	mov	[Int12Lied],ah ; 0
 29386                                  	;mov	byte [Int12Lied],0
 29387                                  	;mov	byte [cs:Int12Lied],0
 29388 00002A38 1E                      	push	ds
 29389                                  	;mov	ax,40h
 29390 00002A39 8ED8                    	mov	ds,ax
 29391 00002A3B 2EA1[CB1F]              	mov	ax,[cs:OldInt12Mem]
 29392 00002A3F A31300                  	mov	[13h],ax		; restore INT 12h memory
 29393 00002A42 1F                      	pop	ds
 29394                                  timx:
 29395 00002A43 C3                      	retn
 29396                                  
 29397                                  ;----------------------------------------------------------------------------
 29398                                  ;
 29399                                  ; procedure : IsIt3Com?
 29400                                  ;
 29401                                  ;	Input : DevEntry = Seg:0 of device driver
 29402                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 29403                                  ;		 else Zero flag is reset
 29404                                  ;
 29405                                  ;----------------------------------------------------------------------------
 29406                                  
 29407                                  IsIt3Com:
 29408                                  	; 11/12/2022
 29409                                  	; ds = cs
 29410 00002A44 1E                      	push	ds
 29411 00002A45 06                      	push	es
 29412 00002A46 56                      	push	si
 29413                                  	; 11/12/2022
 29414 00002A47 C536[AF1F]              	lds	si,[DevEntry]
 29415                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 29416 00002A4B 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 29417 00002A4E 0E                      	push	cs
 29418 00002A4F 07                      	pop	es
 29419 00002A50 BF[CD1F]                	mov	di,ThreeComName
 29420 00002A53 B90800                  	mov	cx,8			; name length
 29421 00002A56 F3A6                    	rep	cmpsb
 29422 00002A58 5E                      	pop	si
 29423 00002A59 07                      	pop	es
 29424 00002A5A 1F                      	pop	ds
 29425 00002A5B C3                      	retn
 29426                                  
 29427                                  ;M020 : BEGIN
 29428                                  ;----------------------------------------------------------------------------
 29429                                  
 29430                                  UpdatePDB:
 29431 00002A5C 1E                      	push	ds
 29432 00002A5D B462                    	mov	ah,62h
 29433 00002A5F CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 29434 00002A61 8EDB                    	mov	ds,bx
 29435 00002A63 2E8B1E[A302]            	mov	bx,[cs:ALLOCLIM]
 29436                                  	;mov	[2],bx
 29437 00002A68 891E0200                	mov	[PDB.BLOCK_LEN],bx
 29438 00002A6C 1F                      	pop	ds
 29439 00002A6D C3                      	retn
 29440                                  
 29441                                  ; M020 : END
 29442                                  
 29443                                  ;----------------------------------------------------------------------------
 29444                                  
 29445                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29446                                  ;%if 0
 29447                                  
 29448                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 29449                                  ; (SYSINIT:2EEEh)
 29450                                  
 29451                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 29452                                  ;include highexit.inc	; umb's, etc
 29453                                  
 29454                                  ; ----------------------------------------------------------------------
 29455                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 29456                                  ; ----------------------------------------------------------------------
 29457                                  ; 07/04/2019 - Retro DOS v4.0
 29458                                  
 29459                                  ;******************************************************************************
 29460                                  ;
 29461                                  ; This file contains routines needed to parse and implement user-given
 29462                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 29463                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 29464                                  ; the variables in highvar.inc, for use by the rest of the routines.
 29465                                  ;
 29466                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 29467                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 29468                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 29469                                  ;    DH/LH module opts
 29470                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 29471                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 29472                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 29473                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 29474                                  ; available during the load.
 29475                                  ;
 29476                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 29477                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 29478                                  ; upper-memory block which was not specified by the user... in addition, if
 29479                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 29480                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 29481                                  ; allocated. After the load, the function UnHideUMBs() (in highexit.inc) will
 29482                                  ; free any UMBs so allocated.
 29483                                  ;
 29484                                  ; When a device driver loads, there is the additional problem of allocating its
 29485                                  ; initial load site; this should be restricted to the first UMB specified on
 29486                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 29487                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 29488                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 29489                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 29490                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 29491                                  ;
 29492                                  ;******************************************************************************
 29493                                  
 29494                                  SWTCH	equ	'/'		; Switch character
 29495                                  
 29496                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 29497                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 29498                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 29499                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 29500                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 29501                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 29502                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 29503                                  
 29504                                  CR	equ	0Dh		; Carriage Return
 29505                                  LF	equ	0Ah		; Line Feed
 29506                                  TAB	equ	09h		; Tab character (^I)
 29507                                  
 29508                                  ; -----------------------------------------------------------------------------
 29509                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 29510                                  ; -----------------------------------------------------------------------------
 29511                                  ; ENTRY:       None
 29512                                  ; EXIT:        Variables listed in highvar.inc are initialized
 29513                                  ; ERROR EXIT:  None
 29514                                  ; USES:        Flags, variables in highvar.inc
 29515                                  ; -----------------------------------------------------------------------------
 29516                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1. Its contents
 29517                                  ; are largely ignored, but it is initialized nonetheless.
 29518                                  ; -----------------------------------------------------------------------------
 29519                                  
 29520                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 29521                                  ; (SYSINIT:2EEEh)
 29522                                  
 29523                                  InitVar:
 29524                                  	; 01/01/2023
 29525                                  	; ds = cs
 29526                                  
 29527                                  	;pushreg <ax, cx, di, es>
 29528                                  	; 03/01/2023
 29529                                  	;push	ax
 29530                                  	;push	cx
 29531                                  	;push	di
 29532 00002A6E 06                      	push	es
 29533                                  
 29534                                  	;dataseg es			;Point ES into appropriate data segment
 29535 00002A6F 0E                      	push	cs
 29536 00002A70 07                      	pop	es
 29537                                  
 29538 00002A71 31C0                    	xor	ax,ax
 29539                                  	;mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 29540                                  	;mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 29541                                  	;mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 29542                                  	;mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 29543                                  	;				;Later is the # of the 1st spec'd UMB
 29544                                  	;mov	[es:fm_argc], al	;Start with zero args having been read
 29545                                  
 29546                                  	; 01/01/2023
 29547                                  	; ds = cs
 29548 00002A73 A2[721F]                	mov	[fUmbTiny],al		;Shrink UMBs? (made 1 if /S given)
 29549 00002A76 A2[711F]                	mov	[fInHigh],al		;Set to 1 when DH/LH has been called
 29550 00002A79 A3[731F]                	mov	[SegLoad],ax		;Load Address (seg), used for DH only
 29551 00002A7C C606[751F]FF            	mov	byte [UmbLoad],UNSPECIFIED ; 0FFh
 29552                                  					;Later is the # of the 1st spec'd UMB
 29553 00002A81 A2[A81F]                	mov	[fm_argc], al		;Start with zero args having been read
 29554                                  
 29555 00002A84 FC                      	cld
 29556                                  
 29557 00002A85 B91000                  	mov	cx,MAXUMB ; 16		;For each entry
 29558 00002A88 BF[761F]                	mov	di,UmbUsed		;on the UmbUsed array,
 29559 00002A8B F3AA                    	rep	stosb			;	Store 0
 29560                                  
 29561                                  	;mov	cx,MAXUMB ; 16		;Okay... for each entry
 29562                                  	; 01/01/2033
 29563 00002A8D B110                    	mov	cl,MAXUMB ; 16
 29564 00002A8F BF[861F]                	mov	di,UmbSize		;on the UmbSize array,
 29565 00002A92 F3AB                    	rep	stosw			;	Store 0
 29566                                  
 29567                                  	;normseg es			; Return ES
 29568                                  
 29569                                  	;popreg	<es, di, cx, ax>
 29570 00002A94 07                      	pop	es
 29571                                  	; 03/01/2023
 29572                                  	;pop	di
 29573                                  	;pop	cx
 29574                                  	;pop	ax	 	
 29575                                  
 29576 00002A95 C3                      	retn
 29577                                  
 29578                                  ; -----------------------------------------------------------------------------
 29579                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 29580                                  ; -----------------------------------------------------------------------------
 29581                                  ; ENTRY   : None
 29582                                  ; EXIT    : None
 29583                                  ; ERROR   : None
 29584                                  ; USES    : Flags, fm_umb, fm_strat
 29585                                  ; -----------------------------------------------------------------------------
 29586                                  
 29587                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 29588                                  	; (SYSINIT:2F22h)
 29589                                  FixMem:
 29590                                  	; 01/01/2023
 29591                                  	;push	ax
 29592                                  	;push	bx
 29593                                  	;push	cx
 29594                                  	;push	dx
 29595 00002A96 06                      	push	es
 29596                                  
 29597 00002A97 E84900                  	call	fm_link		; Link in UMBs
 29598                                  
 29599 00002A9A E80C02                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 29600 00002A9D 723F                    	jc	short fmX	; (if couldn't get it, leave now).
 29601                                  
 29602 00002A9F 8EC0                    	mov	es,ax		; It returns in AX, so move it to ES.
 29603                                  
 29604                                  ; - Walk MCB Chain ------------------------------------------------------------
 29605                                  
 29606 00002AA1 31D2                    	xor	dx,dx		; We're keeping the address of the last MCB
 29607 00002AA3 89D1                    	mov 	cx,dx		; in CX... and the last owner
 29608 00002AA5 42                      	inc	dx		; in dx as we go through the loop:
 29609                                  
 29610                                  ; ------------------------------------------
 29611                                  ; FM10--DX  = last MCB's owner's PSP address
 29612                                  ;       CX  = last MCB's address (segment)
 29613                                  ; ------------------------------------------
 29614                                  
 29615 00002AA6 26A00000                fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 29616 00002AAA 268B1E0100              	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 29617 00002AAF 09D3                    	or	bx,dx			; dx was owner of previous MCB
 29618 00002AB1 7516                    	jnz	short fm30		; If not both zero, don't cat.
 29619                                  
 29620                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 29621                                  
 29622 00002AB3 268B1E0300              fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 29623 00002AB8 8EC1                    	mov	es,cx			; Go back to prev MCB's address
 29624 00002ABA 26A20000                	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 29625                                  
 29626 00002ABE 26031E0300              	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 29627                                  	;add	bx,1			; And add one for the header
 29628                                  	; 11/07/2023
 29629 00002AC3 43                      	inc	bx
 29630 00002AC4 26891E0300              	mov	[es:ARENA.SIZE],bx	; Write the size
 29631                                  
 29632                                  	; ---------------------------------------------------------------------
 29633                                  
 29634 00002AC9 8CC1                    fm30:	mov	cx,es			; Save MCB address
 29635 00002ACB 268B160100              	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 29636                                  
 29637 00002AD0 8CC3                    	mov	bx,es			; Move to the next MCB
 29638                                  	;add	bx,[es:3]
 29639 00002AD2 26031E0300              	add	bx,[es:ARENA.SIZE]
 29640 00002AD7 43                      	inc	bx
 29641 00002AD8 8EC3                    	mov	es,bx
 29642                                  
 29643                                  	;cmp	al,'Z'
 29644 00002ADA 3C5A                    	cmp	al,arena_signature_end
 29645 00002ADC 75C8                    	jne	short fm10		; If signature != 'Z', there are more.
 29646                                  fmX:	
 29647 00002ADE E81300                  	call	fm_unlink		; Unlink UMBs
 29648                                  
 29649 00002AE1 07                      	pop	es
 29650                                  	; 01/01/2023
 29651                                  	;pop	dx
 29652                                  	;pop	cx
 29653                                  	;pop	bx
 29654                                  	;pop	ax
 29655                                  
 29656 00002AE2 C3                      	retn
 29657                                  
 29658                                  ; -----------------------------------------------------------------------------
 29659                                  ;*** fm_link - links UMBs not already linked in
 29660                                  ; -----------------------------------------------------------------------------
 29661                                  ; ENTRY:    None
 29662                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 29663                                  ; ERROR:    None
 29664                                  ; USES:     AX, BX, fm_umb
 29665                                  ; -----------------------------------------------------------------------------
 29666                                  
 29667                                  	; 01/01/2023 - Retro DOS v4.2
 29668                                  fm_link:
 29669 00002AE3 B80258                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 29670 00002AE6 CD21                    	int	21h			; Current link-state is now in al
 29671                                  
 29672                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 29673                                  	;
 29674                                  	;push	es
 29675                                  	;push	cs
 29676                                  	;pop	es
 29677                                  	;mov	[es:fm_umb],al
 29678                                  	;pop	es
 29679                                  	
 29680                                  	; 01/01/2023
 29681                                  	; ds = cs
 29682                                  	;mov	[cs:fm_umb],al
 29683 00002AE8 A2[A61F]                	mov	[fm_umb],al
 29684                                  
 29685 00002AEB B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 29686 00002AEE BB0100                  	mov	bx,1
 29687 00002AF1 CD21                    	int	21h
 29688 00002AF3 C3                      	retn
 29689                                  
 29690                                  ; -----------------------------------------------------------------------------
 29691                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 29692                                  ; -----------------------------------------------------------------------------
 29693                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 29694                                  ; EXIT:     None
 29695                                  ; ERROR:    None
 29696                                  ; USES:     AX, BX
 29697                                  ; -----------------------------------------------------------------------------
 29698                                  
 29699                                  	; 01/01/2023 - Retro DOS v4.2
 29700                                  fm_unlink:
 29701 00002AF4 31DB                    	xor	bx,bx
 29702                                  	
 29703                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 29704                                  	;
 29705                                  	;push	ds
 29706                                  	;push	cs
 29707                                  	;pop	ds
 29708                                  	;mov	bl,[fm_umb]	
 29709                                  	;pop	ds
 29710                                  	
 29711                                  	; 01/01/2023
 29712                                  	; ds = cs
 29713                                  	;mov	bl,[cs:fm_umb]
 29714 00002AF6 8A1E[A61F]              	mov	bl,[fm_umb]
 29715                                  
 29716 00002AFA B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 29717 00002AFD CD21                    	int	21h			; so just use that, and call int 21h
 29718 00002AFF C3                      	retn
 29719                                  
 29720                                  ; 08/04/2019 - Retro DOS v4.0
 29721                                  
 29722                                  ; -----------------------------------------------------------------------------
 29723                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 29724                                  ; laid out in highvar.inc
 29725                                  ; -----------------------------------------------------------------------------
 29726                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 29727                                  ; EXIT:     ES:SI points to first character in child program name
 29728                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 29729                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 29730                                  ; -----------------------------------------------------------------------------
 29731                                  ; Error codes (in AX if carry set on return):
 29732                                  ;
 29733                                  PV_InvArg	equ	1	; Invalid argument passed
 29734                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 29735                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 29736                                  ;
 29737                                  ; This routine exects ES:SI to point to a string much like the following:
 29738                                  ;    "/S/L:1,200;2 module options"
 29739                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 29740                                  ; required, though that's what this routine is supposed to parse.
 29741                                  ;
 29742                                  optS		equ	'S'	; /S
 29743                                  optL		equ	'L'	; /L:...
 29744                                  ;
 29745                                  ; -----------------------------------------------------------------------------
 29746                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 29747                                  ; a command-line for spawning a child process. For a typical LH command, say,
 29748                                  ;     lh /l:1,1000;2 print/d:lpt2
 29749                                  ; the arguments would look like (one per line):
 29750                                  ;     lh
 29751                                  ;     /l
 29752                                  ;     1
 29753                                  ;     1000
 29754                                  ;     2
 29755                                  ;     print
 29756                                  ;     /d
 29757                                  ;     :lpt2
 29758                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 29759                                  ; arg was the filename. So, inside this routine, we keep a running counter
 29760                                  ; of the number of arguments LH will need to skip in order to get to the
 29761                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 29762                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 29763                                  ; for:
 29764                                  ;    Each /L
 29765                                  ;    Each /S (there should be only one)
 29766                                  ;    Each UMB number (they follow ":" or ";")
 29767                                  ;    Each UMB size   (they follow ",")
 29768                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 29769                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 29770                                  ; -----------------------------------------------------------------------------
 29771                                  
 29772                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 29773                                  	; (SYSINIT:2F9Fh)
 29774                                  
 29775                                  ParseVar:
 29776                                  	;pushreg <di, ds, es>
 29777                                  	; 01/01/2023
 29778                                  	;push	di ; * ; (not required) ; 01/01/2023
 29779 00002B00 1E                      	push	ds
 29780 00002B01 06                      	push	es
 29781                                  
 29782 00002B02 06                      	push	es		; Make DS:SI point to it, as well as ES:SI
 29783 00002B03 1F                      	pop	ds		; (regardless if we're in devhigh or loadhigh)
 29784 00002B04 FC                      	cld
 29785                                  
 29786                                  ; ------------------------------------------------
 29787                                  ; PV10--ES:SI = any whitespace on the command-line
 29788                                  ; ------------------------------------------------
 29789                                  
 29790 00002B05 AC                      pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 29791 00002B06 E8A200                  	call	isWhite
 29792 00002B09 74FA                    	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 29793                                  	;cmp	al,'/'
 29794 00002B0B 3C2F                    	cmp	al,SWTCH
 29795 00002B0D 7404                    	je	short pv20	;       ES:SI=="/L..."--go process a switch
 29796                                  
 29797 00002B0F 4E                      	dec	si		; Backup--it's now "odule options", and we need
 29798 00002B10 F8                      	clc			; that "m" we just read (or whatever it is).
 29799 00002B11 EB2B                    	jmp	short pvX	; Then return with carry clear == we're done.
 29800                                  pv20:	
 29801 00002B13 AC                      	lodsb			; Just read 'S' or 'L', hopefully
 29802                                  	;toUpper al		; So we make it upper-case, and...
 29803 00002B14 24DF                    	and	al,0DFh
 29804                                  	;cmp	al,'S'
 29805 00002B16 3C53                    	cmp	al,optS		; just read 'S'?
 29806 00002B18 750D                    	jne	short pv30
 29807                                  
 29808                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 29809 00002B1A 2EFE06[A81F]            	inc	byte [cs:fm_argc] ; 19/04/2019
 29810                                  
 29811                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 29812                                  	;
 29813                                  	;push	es
 29814                                  	;push	cs
 29815                                  	;pop	es
 29816                                  	;mov	[es:fUmbTiny],1	
 29817                                  	;pop	es
 29818                                  
 29819 00002B1F 2EC606[721F]01          	mov	byte [cs:fUmbTiny],1
 29820                                  
 29821 00002B25 EBDE                    	jmp	short pv10	; possibly even "/L...".
 29822                                  
 29823                                  pv30:	;cmp	al,'L'
 29824 00002B27 3C4C                    	cmp	al,optL		; If it's not 'L' either, then it's a bad
 29825 00002B29 750D                    	jne	short pvE1	; switch!
 29826                                  
 29827                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 29828 00002B2B 2EFE06[A81F]            	inc	byte [cs:fm_argc] ; 19/04/2019
 29829                                  
 29830 00002B30 E80E00                  	call	parseL
 29831 00002B33 73D0                    	jnc	short pv10	; If no carry, go back and look for more
 29832                                  
 29833 00002B35 4E                      	dec	si		; Else, back up and exit.
 29834 00002B36 EB03                    	jmp	short pvErr	; AX has already been set by parseL
 29835                                  
 29836                                  pvE1:	;mov	ax,3
 29837 00002B38 B80300                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 29838 00002B3B 4E                      pvErr:	dec	si
 29839 00002B3C 4E                      	dec	si
 29840 00002B3D F9                      	stc
 29841                                  pvX:	;popreg	<es, ds, di>
 29842 00002B3E 07                      	pop	es
 29843 00002B3F 1F                      	pop	ds
 29844                                  	; 01/01/2023
 29845                                  	;pop	di ; * ; (not required) ; 01/01/2023
 29846 00002B40 C3                      	retn
 29847                                  
 29848                                  ; -----------------------------------------------------------------------------
 29849                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 29850                                  ; -----------------------------------------------------------------------------
 29851                                  ; ENTRY:    ES:SI points to colon
 29852                                  ; EXIT:     ES:SI points to first character not parsed
 29853                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 29854                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 29855                                  ; -----------------------------------------------------------------------------
 29856                                  ; If the string here is terminated with anything other than whitespace or a
 29857                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 29858                                  ; set, indicating that they've screwed up the syntax. The 3-character rewind
 29859                                  ; makes sure the app /L: is reported as being the culprit.
 29860                                  ; -----------------------------------------------------------------------------
 29861                                  
 29862                                  parseL:
 29863 00002B41 AC                      	lodsb
 29864 00002B42 3C3A                    	cmp	al,':'		; Make sure they did /L:
 29865 00002B44 754E                    	jne	short plE1	; If they didn't, return with carry set.
 29866                                  
 29867                                  ; ------------------------------------------
 29868                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 29869                                  ; ------------------------------------------
 29870                                  
 29871 00002B46 E8E700                  pl10:	call	GetXNum		; After this, it's ",size" or ";umb" or " mod"
 29872 00002B49 724F                    	jc	short plE2	; And error if it's a bad number.
 29873 00002B4B E8A901                  	call	convUMB		; Convert any address to a UMB number
 29874                                  
 29875 00002B4E 88C1                    	mov	cl,al		; Remember the UMB number
 29876 00002B50 E87600                  	call	stowUMB		; Mark this UMB # as used;
 29877 00002B53 7245                    	jc	short plE2	; If it was already marked, it'll error
 29878                                  
 29879                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 29880 00002B55 2EFE06[A81F]            	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 29881                                  
 29882 00002B5A AC                      	lodsb
 29883 00002B5B 3C3B                    	cmp	al,';'		; Did "umb;" ?
 29884 00002B5D 74E7                    	je	short pl10	; Yep: go back and get another UMB.
 29885                                  
 29886 00002B5F E84900                  	call	isWhite		; Did "umb " ?
 29887 00002B62 743B                    	jz	short plX	; Yep: return (it'll go back to whitespace)
 29888                                  
 29889 00002B64 E83900                  	call	isEOL		; Did "umb" ?
 29890 00002B67 7435                    	jz	short plSwX	; If so, backup and exit like everything's ok
 29891                                  
 29892                                  	;cmp	al,'/'
 29893 00002B69 3C2F                    	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 29894 00002B6B 7431                    	je	short plSwX	; If so, back up ES:SI one character and return
 29895                                  
 29896 00002B6D 3C2C                    	cmp	al,','		; Did "umb," ?
 29897 00002B6F 7523                    	jne	short plE1	; Just what the heck DID they do? Return error.
 29898                                  
 29899                                  ; --- Read a size -------------------------------------------------------------
 29900                                  
 29901 00002B71 E8BC00                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 29902 00002B74 721E                    	jc	short plE1	; And error if it's a bad size.
 29903                                  
 29904 00002B76 E82201                  	call	toPara		; Convert from bytes to paragraphs
 29905                                  
 29906 00002B79 E87200                  	call	stowSiz		; CL still has the UMB number for this routine
 29907                                  
 29908                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 29909 00002B7C 2EFE06[A81F]            	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 29910                                  
 29911 00002B81 AC                      	lodsb
 29912 00002B82 3C3B                    	cmp	al,';'		; They did "umb,size;", so get another UMB.
 29913 00002B84 74C0                    	je	short pl10	;
 29914                                  
 29915 00002B86 E82200                  	call	isWhite		; Did it end with whitespace?
 29916 00002B89 7414                    	jz	short plX	; If so, we're done here--go back.
 29917                                  
 29918 00002B8B E81200                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 29919 00002B8E 740E                    	jz	short plSwX	; If so, backup and exit like everything's ok
 29920                                  
 29921                                  	;cmp	al,'/'
 29922 00002B90 3C2F                    	cmp	al,SWTCH	; Did they do "umb,size/" ?
 29923 00002B92 740A                    	je	short plSwX	; If so, again, we're done here.
 29924                                  plE1:	
 29925                                  	;mov	ax,1
 29926 00002B94 B80100                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 29927 00002B97 4E                      	dec	si
 29928 00002B98 F9                      	stc
 29929 00002B99 C3                      	retn
 29930                                  
 29931                                  plE2:	;mov	ax,2
 29932 00002B9A B80200                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 29933                                  	; 12/12/2022
 29934                                  	; cf=1
 29935                                  	;stc
 29936 00002B9D C3                      	retn
 29937                                  plSwX:	
 29938 00002B9E 4E                      	dec	si		; If we hit a '/' character, back up one char
 29939                                  				; so the whitespace checker will see it too.
 29940                                  plX:	; 12/12/2022
 29941                                  	; cf=0
 29942                                  	;clc			; Then just return with carry clear, so
 29943 00002B9F C3                      	retn			; ParseVar will go about its business.
 29944                                  
 29945                                  ; -----------------------------------------------------------------------------
 29946                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 29947                                  ; -----------------------------------------------------------------------------
 29948                                  ; ENTRY:    None
 29949                                  ; EXIT:     None
 29950                                  ; ERROR:    None
 29951                                  ; USES:     fm_argc, flags
 29952                                  ; -----------------------------------------------------------------------------
 29953                                  
 29954                                  ;incArgc:
 29955                                  	;push	ax
 29956                                  
 29957                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 29958                                  
 29959                                  	;mov	al,[cs:fm_argc]
 29960                                  
 29961                                  	;inc	al		; Increment it,
 29962                                  
 29963                                  	;;putdata fm_argc, al	; And store it right back.
 29964                                  
 29965                                  	;mov	[cs:fm_argc],al
 29966                                  
 29967                                  	;pop	ax
 29968                                  	;retn
 29969                                  
 29970                                  ; -----------------------------------------------------------------------------
 29971                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 29972                                  ; -----------------------------------------------------------------------------
 29973                                  ; ENTRY:    AL contains character to test
 29974                                  ; EXIT:     ZF set if AL contains CR or LF, or 0
 29975                                  ; ERROR:    None
 29976                                  ; USES:     ZF
 29977                                  ; -----------------------------------------------------------------------------
 29978                                  
 29979                                  isEOL:
 29980 00002BA0 3C00                    	cmp	al,0		; Null-terminator
 29981 00002BA2 7406                    	je	short ieX
 29982 00002BA4 3C0D                    	cmp	al,CR ; 0Dh	; Carriage Return
 29983 00002BA6 7402                    	je	short ieX
 29984 00002BA8 3C0A                    	cmp	al,LF ; 0Ah	; LineFeed
 29985                                  ieX:	
 29986 00002BAA C3                      	retn
 29987                                  
 29988                                  ; -----------------------------------------------------------------------------
 29989                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 29990                                  ; -----------------------------------------------------------------------------
 29991                                  ; ENTRY:    AL contains character to test
 29992                                  ; EXIT:     ZF set if AL contains space, tab, or equals
 29993                                  ; ERROR:    None
 29994                                  ; USES:     ZF
 29995                                  ; -----------------------------------------------------------------------------
 29996                                  
 29997                                  isWhite:
 29998 00002BAB 3C20                    	cmp	al,' '		; Space
 29999 00002BAD 7406                    	je	short iwX
 30000 00002BAF 3C3D                    	cmp	al,'='		; Equals (treat as whitespace)
 30001 00002BB1 7402                    	je	short iwX
 30002 00002BB3 3C09                    	cmp	al,tab ; 9	; Tab
 30003                                  iwX:	
 30004 00002BB5 C3                      	retn
 30005                                  
 30006                                  ; -----------------------------------------------------------------------------
 30007                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 30008                                  ; -----------------------------------------------------------------------------
 30009                                  ; ENTRY:    AL contains UMB number
 30010                                  ; EXIT:     None
 30011                                  ; ERROR:    None
 30012                                  ; USES:     Flags, variables in highvar.inc
 30013                                  ; -----------------------------------------------------------------------------
 30014                                  
 30015                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 30016                                  
 30017                                  unMarkUMB:
 30018                                  	; 02/01/2023
 30019                                  	;push	ax
 30020                                  	;push	bx
 30021                                  	;push	di
 30022                                  	;push	es
 30023                                  	;
 30024                                  	;push	cs
 30025                                  	;pop	es
 30026                                  
 30027 00002BB6 30E4                    	xor	ah,ah
 30028 00002BB8 89C3                    	mov	bx,ax
 30029                                  
 30030                                  	; 19/04/2019
 30031                                  	
 30032                                  	;;mov	byte [es:bx+UmbUsed],0
 30033                                  	;mov	[es:bx+UmbUsed],ah ; 0
 30034                                  	; 02/01/2023
 30035                                  	; ds= cs
 30036                                  	;mov	[cs:bx+UmbUsed],ah ; 0
 30037 00002BBA 88A7[761F]              	mov	[bx+UmbUsed],ah ; 0
 30038                                  
 30039 00002BBE 3806[751F]              	cmp	[UmbLoad],al
 30040                                  	;cmp	[cs:UmbLoad],al
 30041                                  	;;cmp	[es:UmbLoad],al
 30042 00002BC2 7504                    	jne	short umu10
 30043                                  
 30044                                  	;;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 30045                                  	;mov	[es:UmbLoad],ah ; 0
 30046                                  	; 02/01/2023
 30047                                  	; ds = cs
 30048                                  	;mov	[cs:UmbLoad],ah ; 0
 30049 00002BC4 8826[751F]              	mov	[UmbLoad],ah ; 0
 30050                                  umu10:	
 30051                                  	;pop	es
 30052                                  	;pop	di
 30053                                  	;pop	bx
 30054                                  	;pop	ax
 30055 00002BC8 C3                      	retn
 30056                                  
 30057                                  ; -----------------------------------------------------------------------------
 30058                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 30059                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 30060                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 30061                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 30062                                  ; -----------------------------------------------------------------------------
 30063                                  ; ENTRY:    AL contains UMB number, as specified by the user
 30064                                  ; EXIT:     None
 30065                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 30066                                  ; USES:     AX, Flags, variables in highvar.inc
 30067                                  ; -----------------------------------------------------------------------------
 30068                                  
 30069                                  	; 01/01/2023 - Retro DOS v4.2
 30070                                  stowUMB:
 30071 00002BC9 3C10                    	cmp	al,MAXUMB ; 16
 30072 00002BCB 7202                    	jb	short su10
 30073 00002BCD F9                      	stc
 30074 00002BCE C3                      	retn			; Ooops-- UMB # >= MAXUMB
 30075                                  su10:	
 30076                                  	; 01/01/2023
 30077                                  	;push	bx
 30078                                  	;push	di
 30079                                  	;push	si
 30080                                  	;push	ds
 30081                                  	;push	es
 30082                                  	;push	cs
 30083                                  	;pop	es
 30084                                  	;push	cs
 30085                                  	;pop	ds
 30086                                  
 30087                                  	; 01/01/2023
 30088                                  	; ds <> cs
 30089                                  	;cmp	byte [cs:UmbLoad],0FFh
 30090 00002BCF 2E803E[751F]FF          	cmp	byte [cs:UmbLoad],UNSPECIFIED
 30091                                  				; If this, we haven't been here before
 30092 00002BD5 7504                    	jne	short su20
 30093 00002BD7 2EA2[751F]              	mov	[cs:UmbLoad],al	; So remember this UMB as the load UMB slot.
 30094                                  
 30095                                  	;;cmp	byte [UmbLoad],0FFh
 30096                                  	;cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 30097                                  	;jne	short su20
 30098                                  	;mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 30099                                  su20:	
 30100 00002BDB 08C0                    	or	al,al		; If they gave UMB 0, there's really nothing
 30101 00002BDD 740E                    	jz	short su30	; that we should do here.
 30102                                  
 30103                                  	;mov	bl,al
 30104                                  	;xor	bh,bh
 30105                                  	;mov	ax,1		; Now, AX = 1, and BX = UMB Number
 30106                                  	; 01/01/2023
 30107 00002BDF 30E4                    	xor	ah,ah
 30108 00002BE1 89C3                    	mov	bx,ax
 30109 00002BE3 B001                    	mov	al,1
 30110                                  
 30111                                  	;xchg	[es:bx+UmbUsed],al
 30112                                  	; 01/01/2023
 30113 00002BE5 2E8687[761F]            	xchg	[cs:bx+UmbUsed],al
 30114                                  
 30115                                  	;or	al,al		; If it was already 1, then al==1... and that
 30116                                  	;jz	short su30	; means an error.
 30117                                  	;
 30118                                  	;stc			; OOOPS! This one's been used before. :(
 30119                                  	
 30120                                  	; 01/01/2023
 30121 00002BEA 3C01                    	cmp	al,1
 30122 00002BEC F5                      	cmc 	; if al > 0 -> cf = 1
 30123                                  su30:	
 30124                                  	; 01/01/2023
 30125                                  	;pop	es
 30126                                  	;pop	ds
 30127                                  	;pop	si
 30128                                  	;pop	di
 30129                                  	;pop	bx
 30130 00002BED C3                      	retn
 30131                                  
 30132                                  ; -----------------------------------------------------------------------------
 30133                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 30134                                  ; -----------------------------------------------------------------------------
 30135                                  ; ENTRY:    CL contains UMB number, AX contains size
 30136                                  ; EXIT:     None
 30137                                  ; ERROR:    None
 30138                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 30139                                  ; -----------------------------------------------------------------------------
 30140                                  
 30141                                  ; 13/05/2019
 30142                                  
 30143                                  	; 01/01/2023 - Retro DOS v4.2
 30144                                  stowSiz:
 30145                                  	; 01/01/2023
 30146                                  	;push	bx
 30147                                  	;;push	di ; ?
 30148                                  	;push	es
 30149                                  
 30150                                  	;push	cs
 30151                                  	;pop	es	
 30152                                  
 30153 00002BEE 88CB                    	mov	bl,cl			; Now bl==UMB number, AX==size
 30154 00002BF0 B700                    	mov	bh,0			;     bx==UMB number, AX==size
 30155 00002BF2 D0E3                    	shl	bl,1			;     bx==offset into array, AX=size
 30156                                  	;mov	[es:bx+UmbSize],ax	; Store the size
 30157                                  	; 01/01/2023
 30158 00002BF4 2E8987[861F]            	mov	[cs:bx+UmbSize],ax	; Store the size
 30159                                  
 30160                                  	; 01/01/2023
 30161                                  	;pop	es
 30162                                  	;;pop	di ; ?
 30163                                  	;pop	bx
 30164                                  
 30165 00002BF9 C3                      	retn
 30166                                  
 30167                                  ; -----------------------------------------------------------------------------
 30168                                  ;*** toDigit - converts a character-digit to its binary counterpart
 30169                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 30170                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 30171                                  ; A-F are considered valid if gnradix is 16.
 30172                                  ; -----------------------------------------------------------------------------
 30173                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 30174                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 30175                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 30176                                  ; USES:     CL, Flags
 30177                                  ; -----------------------------------------------------------------------------
 30178                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 30179                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 30180                                  ; will be 10 or 16.
 30181                                  ; -----------------------------------------------------------------------------
 30182                                  
 30183                                  gnradix:
 30184 00002BFA 0000                    	dw	0		; Must be a word--16x16 multiplication
 30185                                  
 30186                                  toDigit:
 30187 00002BFC 2E833E[FA2B]10          	cmp	word [cs:gnradix],16
 30188 00002C02 751C                    	jne	short td20	; Don't check hex digits if radix isn't 16
 30189                                  
 30190                                  toDigit_hex:
 30191 00002C04 80F961                  	cmp	cl,'a'	; 61h
 30192 00002C07 7209                    	jb	short td10
 30193 00002C09 80F966                  	cmp	cl,'f'	; 66h
 30194 00002C0C 7720                    	ja	short tdE	; Nothing valid above 'f' at all...
 30195 00002C0E 80E957                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 30196                                  	;clc			; <- CLC is implicit from last SUB
 30197 00002C11 C3                      	retn
 30198                                  td10:	
 30199 00002C12 80F941                  	cmp	cl,'A'  ; 41h
 30200 00002C15 7209                    	jb	short td20	; Below 'A'? Not a letter...
 30201 00002C17 80F946                  	cmp	cl,'F'	; 46h
 30202 00002C1A 7712                    	ja	short tdE	; Above 'F'? Not a digit.
 30203 00002C1C 80E937                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 30204                                  	;clc			; <- CLC is implicit from last SUB
 30205 00002C1F C3                      	retn
 30206                                  toDigit_dec:
 30207                                  td20:	
 30208 00002C20 80F930                  	cmp	cl,'0'		; If less than zero,
 30209                                  	;jb	short tdE	; Done.
 30210 00002C23 720A                    	jb	short tdEr ; 08/04/2019
 30211 00002C25 80F939                  	cmp	cl,'9'		; Or, if greater than nine,
 30212 00002C28 7704                    	ja	short tdE	; Done.
 30213 00002C2A 80E930                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 30214                                  	;clc			; <- CLC is implicit from last SUB
 30215 00002C2D C3                      	retn
 30216                                  tdE:	
 30217 00002C2E F9                      	stc
 30218                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 30219 00002C2F C3                      	retn
 30220                                  
 30221                                  ; -----------------------------------------------------------------------------
 30222                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 30223                                  ; -----------------------------------------------------------------------------
 30224                                  ; ENTRY:    ES:SI points to an ascii string to scan
 30225                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 30226                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 30227                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 30228                                  ; -----------------------------------------------------------------------------
 30229                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 30230                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 30231                                  ; will be 10 or 16.
 30232                                  ; -----------------------------------------------------------------------------
 30233                                  
 30234                                  ; 08/04/2019 - Retro DOS v4.0
 30235                                  
 30236                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 30237                                  ; (SYSINIT:3109h)
 30238                                  
 30239                                  GetXNum:
 30240                                  	;pushreg <bx, cx, ds>
 30241                                  	; 01/01/2023
 30242                                  	;push	bx
 30243 00002C30 51                      	push	cx ; *
 30244                                  	;push	ds
 30245                                  
 30246 00002C31 FC                      	cld
 30247 00002C32 31C0                    	xor	ax,ax
 30248 00002C34 31DB                    	xor	bx,bx
 30249 00002C36 31C9                    	xor	cx,cx
 30250 00002C38 31D2                    	xor	dx,dx			; Start with 0 (makes sense)
 30251                                  
 30252 00002C3A 2EC706[FA2B]0A00        	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 30253                                  
 30254 00002C41 268A0C                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 30255                                  	;call	toDigit
 30256 00002C44 E8D9FF                  	call	toDigit_dec
 30257                                  	;jc	short gxnE		; If it's not a digit, leave now.
 30258                                  	; 01/01/2023
 30259 00002C47 7233                    	jc	short gxnX
 30260                                  
 30261 00002C49 08C9                    	or	cl,cl
 30262 00002C4B 7517                    	jnz	short gxn20		; Doesn't have '0x'
 30263 00002C4D 268A4C01                	mov	cl,[es:si+1]
 30264 00002C51 80F978                  	cmp	cl,'x'			; Either 'x'...
 30265 00002C54 7405                    	je	short gxn10
 30266 00002C56 80F958                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 30267 00002C59 7509                    	jne	short gxn20
 30268                                  
 30269                                  gxn10:	
 30270 00002C5B 2EC706[FA2B]1000        	mov	word [cs:gnradix], 16
 30271 00002C62 46                      	inc	si			; Since we read "0x", march over it.
 30272 00002C63 46                      	inc	si
 30273                                  
 30274                                  ; ------------------------------------------------------
 30275                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 30276                                  ;        DX:AX = current total
 30277                                  ;        BX    = 0
 30278                                  ;        CH    = 0
 30279                                  ; ------------------------------------------------------
 30280                                  
 30281                                  gxn20:	
 30282 00002C64 268A0C                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 30283 00002C67 46                      	inc	si
 30284                                  
 30285 00002C68 E891FF                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 30286 00002C6B 720D                    	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 30287                                  
 30288 00002C6D E80E00                  	call	mul32		; Multiply DX:AX by gnradix
 30289 00002C70 720A                    	jc	short gxnX	; (if it's too big, error out)
 30290                                  
 30291 00002C72 01C8                    	add	ax,cx		; Add the digit
 30292 00002C74 11DA                    	adc	dx,bx		; (BX is 0!)--Adds 1 if last add wrapped
 30293                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 30294                                  	;jmp	short gxn20
 30295 00002C76 73EC                    	jnc	short gxn20
 30296                                  gxnE:	
 30297                                  	;stc			; In this case, we need to set the carry
 30298 00002C78 EB02                    	jmp	short gxnX	; and leave--there were no digits given.
 30299                                  gxnQ:	
 30300 00002C7A 4E                      	dec	si		; Don't read in the offensive character.
 30301 00002C7B F8                      	clc			; And clear carry, so they know it's okay.
 30302                                  gxnX:	
 30303                                  	; 01/01/2023
 30304                                  	;pop	ds
 30305 00002C7C 59                      	pop	cx ; *
 30306                                  	;pop	bx
 30307 00002C7D C3                      	retn
 30308                                  
 30309                                  ; -----------------------------------------------------------------------------
 30310                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 30311                                  ; -----------------------------------------------------------------------------
 30312                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 30313                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 30314                                  ; ERROR:   Carry set if number was too large
 30315                                  ; USES:    Flags, AX, DX
 30316                                  ; -----------------------------------------------------------------------------
 30317                                  
 30318                                  mul32:
 30319 00002C7E 50                      	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 30320 00002C7F 89D0                    	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 30321 00002C81 2EF726[FA2B]            	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 30322 00002C86 7211                    	jc	short m32E	; Too big?
 30323                                  
 30324 00002C88 89C2                    	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 30325 00002C8A 58                      	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 30326                                  
 30327 00002C8B 87D3                    	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 30328 00002C8D 2EF726[FA2B]            	mul	word [cs:gnradix] ; DX=carry, AX=new:lo, TOS=orig, BX=new:hi
 30329 00002C92 87D3                    	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 30330 00002C94 01DA                    	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 30331 00002C96 31DB                    	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 30332 00002C98 C3                      	retn
 30333                                  m32E:	
 30334 00002C99 58                      	pop	ax
 30335 00002C9A C3                      	retn
 30336                                  
 30337                                  ; -----------------------------------------------------------------------------
 30338                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 30339                                  ; -----------------------------------------------------------------------------
 30340                                  ; ENTRY:   DX:AX = the number to be divided
 30341                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 30342                                  ; ERROR:   None
 30343                                  ; USES:    Flags, AX, DX
 30344                                  ; -----------------------------------------------------------------------------
 30345                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 30346                                  ;       can't ensure a 386 host machine. Sorry.
 30347                                  ; -----------------------------------------------------------------------------
 30348                                  
 30349                                  	; 01/01/2023 - Retro DOS v4.2
 30350                                  toPara:
 30351 00002C9B 51                      	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 30352                                  
 30353 00002C9C B104                    	mov	cl,4		;
 30354 00002C9E D3E8                    	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 30355 00002CA0 92                      	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 30356 00002CA1 B10C                    	mov	cl,12
 30357 00002CA3 D3E0                    	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 30358 00002CA5 09D0                    	or	ax,dx		;    AX=hhhh LLLL llll llll
 30359                                  
 30360 00002CA7 59                      	pop	cx
 30361 00002CA8 C3                      	retn
 30362                                  
 30363                                  ; -----------------------------------------------------------------------------
 30364                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 30365                                  ; -----------------------------------------------------------------------------
 30366                                  ; ENTRY:  Nothing
 30367                                  ; EXIT:   AX contains 0x9FFF for most systems
 30368                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 30369                                  ; USES:   Flags, AX
 30370                                  ; -----------------------------------------------------------------------------
 30371                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 30372                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 30373                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 30374                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 30375                                  ; -----------------------------------------------------------------------------
 30376                                  
 30377                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 30378                                  UmbHead:
 30379                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 30380                                  
 30381                                  	;push	si ; ?
 30382                                  	;push	ds ; ? 
 30383                                  	;push	es
 30384                                  	;push	bx ; *	
 30385                                  
 30386                                  	; 09/04/2019
 30387                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 30388                                  
 30389 00002CA9 B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30390 00002CAB CD21                    	int	21h
 30391                                  
 30392 00002CAD 26A18C00                	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 30393                                  	
 30394                                  	; 01/01/2023
 30395 00002CB1 83F8FF                  	cmp	ax,0FFFFh
 30396 00002CB4 F5                      	cmc
 30397                                  	; if AX=0FFFFh -> CF=1
 30398 00002CB5 C3                      	retn
 30399                                  
 30400                                  ; 01/01/2023
 30401                                  ;%if 0
 30402                                  ;	cmp	ax,0FFFFh
 30403                                  ;	je	short uhE		; If it's 0xFFFF, it's an error...
 30404                                  ;
 30405                                  ;	clc				; Else, it isn't (CLC done by prev cmp)
 30406                                  ;	;jmp	short uhX
 30407                                  ;	; 12/12/2022
 30408                                  ;	retn
 30409                                  ;uhE:	
 30410                                  ;	stc
 30411                                  ;uhX:	
 30412                                  ;	;pop	bx ; *
 30413                                  ;	;pop	es
 30414                                  ;	;pop	ds ; ?
 30415                                  ;	;pop	si ; ?
 30416                                  ;	retn
 30417                                  ;%endif
 30418                                  
 30419                                  ; -----------------------------------------------------------------------------
 30420                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 30421                                  ; -----------------------------------------------------------------------------
 30422                                  ; ENTRY:  ES:0 should point to a valid MCB
 30423                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 30424                                  ; USES:   Flags
 30425                                  ; -----------------------------------------------------------------------------
 30426                                  
 30427                                  isSysMCB:
 30428                                  	;push	ax
 30429                                  
 30430                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 30431                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 30432                                  	;je	short ism10
 30433                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 30434                                  	;;je	short ism10
 30435                                  	;;jmp	short ismX		; Anything else isn't.
 30436                                  	;jne	short ismX
 30437 00002CB6 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 30438 00002CBC 7507                    	jne	short ismX 
 30439                                  ism10:	
 30440                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 30441                                  	;cmp	ax,'SC' ; 4353h
 30442 00002CBE 26813E08005343          	cmp	word [es:ARENA.NAME],'SC'
 30443                                  ismX:	
 30444                                  	;pop	ax
 30445 00002CC5 C3                      	retn
 30446                                  
 30447                                  ; 09/04/2019 - Retro DOS v4.0
 30448                                  
 30449                                  ; -----------------------------------------------------------------------------
 30450                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 30451                                  ; -----------------------------------------------------------------------------
 30452                                  ; ENTRY:  AX contains a segment address
 30453                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 30454                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 30455                                  ; USES:   Flags, AX
 30456                                  ; -----------------------------------------------------------------------------
 30457                                  ; An address in the following areas is treated as:
 30458                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 30459                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 30460                                  ;      ...
 30461                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 30462                                  ; -----------------------------------------------------------------------------
 30463                                  
 30464                                  	; 01/01/2023 - Retro DOS v4.2
 30465                                  AddrToUmb:
 30466                                  	; 01/01/2023
 30467                                  	;push	cx
 30468                                  	;push	dx
 30469 00002CC6 06                      	push	es
 30470                                  
 30471 00002CC7 89C2                    	mov	dx,ax		; DX = address to search for
 30472                                  
 30473 00002CC9 E8DDFF                  	call	UmbHead		; AX = first segment
 30474 00002CCC 7222                    	jc	short atuE	; If it couldn't get it, error out.
 30475                                  
 30476                                  	; 22/07/2023
 30477                                  	;mov	es,ax ; *	; ES = first UMB segment
 30478 00002CCE 31C9                    	xor	cx,cx ; 0	; Pretend we're on UMB 0 for now... (cx = UMB#)
 30479                                  
 30480                                  	; 22/07/2023
 30481                                  atu10:
 30482 00002CD0 8EC0                    	mov	es,ax ; * ; ** ; 22/07/2023
 30483                                  ; ----------------------------------------
 30484                                  ; ATU10--ES - Current MCB address
 30485                                  ;        DX - Address given for conversion
 30486                                  ;        CX - Current UMB #
 30487                                  ; ----------------------------------------
 30488                                  
 30489                                  ;atu10:	
 30490                                  	;mov	ax,es ; * ; 18/07/2023
 30491 00002CD2 39D0                            cmp	ax,dx		; Present segment >= given segment?
 30492 00002CD4 731D                    	jae	short atuX	; Yep--done.
 30493                                  
 30494 00002CD6 E8DDFF                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 30495 00002CD9 7501                    	jnz	short atu20
 30496                                  
 30497 00002CDB 41                      	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 30498                                  atu20:	
 30499                                  	;mov	al,[es:ARENA.SIGNATURE]
 30500                                  	;cmp	al,arena_signature_end  ; 'Z'
 30501                                  	; 22/07/2023
 30502                                  	; ax = es
 30503                                  	;mov	ax,es ; **
 30504 00002CDC 2603060300              	add	ax,[es:ARENA.SIZE]
 30505 00002CE1 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 30506 00002CE7 7403                    	je	short atu30		; 'Z' means this was the last MCB... that's it.
 30507                                  
 30508                                  	;NextMCB es,ax
 30509                                  
 30510                                  	;mov	ax,es ; **
 30511                                  	;;add	ax,[es:3]
 30512                                  	;add	ax,[es:ARENA.SIZE]
 30513 00002CE9 40                      	inc	ax
 30514                                  	; 22/07/2023
 30515                                  	;mov	es,ax ; *
 30516 00002CEA EBE4                    	jmp	short atu10
 30517                                  
 30518                                  ; -----------------------------------------------------------------------------
 30519                                  ; if we get to atu30, they specified a number that was past the last MCB.
 30520                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 30521                                  ; -----------------------------------------------------------------------------
 30522                                  
 30523                                  atu30:	
 30524                                  	; 22/07/2023
 30525                                  	; ax = es + [es:ARENA.SIZE] 
 30526                                  	;mov	ax,es ; **
 30527                                  	;add	ax,[es:ARENA.SIZE] ; **
 30528 00002CEC 39D0                    	cmp	ax,dx		; Present >= given?
 30529 00002CEE 7303                    	jae	short atuX	; Yep! It _was_ inside.
 30530                                  atuE:	
 30531 00002CF0 31C9                    	xor	cx,cx ; 0	; Else, fall through with UMB # == -1
 30532 00002CF2 49                      	dec	cx		; (that makes it return 0xFFFF and sets CF)
 30533                                  atuX:	
 30534 00002CF3 89C8                    	mov	ax,cx		; Return the UMB number in AX
 30535                                  	
 30536 00002CF5 07                      	pop	es	
 30537                                  	; 01/01/2023
 30538                                  	;pop	dx
 30539                                  	;pop	cx
 30540 00002CF6 C3                      	retn
 30541                                  
 30542                                  ; -----------------------------------------------------------------------------
 30543                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 30544                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 30545                                  ; address rather than a UMB number... and use that address to look up a UMB.
 30546                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 30547                                  ; -----------------------------------------------------------------------------
 30548                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 30549                                  ; EXIT:   AX will contain a UMB number
 30550                                  ; ERROR:  None
 30551                                  ; USES:   Flags, AX
 30552                                  ; -----------------------------------------------------------------------------
 30553                                  
 30554                                  	; 01/01/2023 - Retro DOS v4.2
 30555                                  convUMB:
 30556 00002CF7 2E833E[FA2B]10          	cmp	word [cs:gnradix],16
 30557 00002CFD 7507                    	jne	short cu10	; If it didn't read in hex, it's not an address
 30558 00002CFF E8C4FF                  	call	AddrToUmb	; Else, convert the address to a UMB number
 30559                                  	;cmp	ax,0FFFFh
 30560                                  	;jne	short cu10
 30561                                  	;inc	ax		; If too high, ignore it (make it conventional)
 30562                                  	; 01/01/2023
 30563 00002D02 40                      	inc	ax
 30564 00002D03 7401                    	jz	short cu10	; If too high, ignore it (make it conventional)
 30565 00002D05 48                      	dec	ax
 30566                                  cu10:	
 30567 00002D06 C3                      	retn
 30568                                  
 30569                                  ; 01/01/2023 - Retro DOS v4.2
 30570                                  ;%if 0
 30571                                  ;
 30572                                  ;; -----------------------------------------------------------------------------
 30573                                  ;;*** setUMBs - links umbs and sets allocation strategy for a load
 30574                                  ;;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 30575                                  ;; of the usual HIGH_FIRST. See the code.
 30576                                  ;; -----------------------------------------------------------------------------
 30577                                  ;; ENTRY:  None
 30578                                  ;; EXIT:   None
 30579                                  ;; ERROR:  None
 30580                                  ;; USES:   Flags, fm_umb, fm_strat
 30581                                  ;; -----------------------------------------------------------------------------
 30582                                  ;
 30583                                  ;setUMBs:
 30584                                  ;	push	ax
 30585                                  ;	push	bx
 30586                                  ;	call	fm_link
 30587                                  ;	pop	bx
 30588                                  ;	pop	ax
 30589                                  ;	retn
 30590                                  ;
 30591                                  ;%endif
 30592                                  
 30593                                  ; 18/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 30594                                  ; loadLow subroutine is not used anywhere of IO.SYS 6.22 (& 5.0)
 30595                                  %if 0
 30596                                  
 30597                                  ; -----------------------------------------------------------------------------
 30598                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 30599                                  ; -----------------------------------------------------------------------------
 30600                                  ; ENTRY:  None
 30601                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 30602                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 30603                                  ; ERROR:  None
 30604                                  ; USES:   Flags, fm_strat, fm_umb
 30605                                  ; -----------------------------------------------------------------------------
 30606                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 30607                                  ; load UMB, and it is 0. That 0 can be either from the user having _specified_
 30608                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 30609                                  ; such that the load UMB is too small, and shouldn't be used.
 30610                                  ; -----------------------------------------------------------------------------
 30611                                  
 30612                                  loadLow:
 30613                                  	;push	ds
 30614                                  	;push	cs		; Point DS into appropriate data segment
 30615                                  	;pop	ds	
 30616                                  
 30617                                  	;mov	al,[UmbLoad]
 30618                                  	mov	al,[cs:UmbLoad]
 30619                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 30620                                  	jne	short ll10
 30621                                  
 30622                                  	stc
 30623                                  ll15:
 30624                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 30625                                  	;stc
 30626                                  	;jmp	short llX
 30627                                  	retn
 30628                                  ll10:	
 30629                                  	or	al,al		; AL=the load UMB: Is it == 0?
 30630                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 30631                                  
 30632                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 30633                                  	retn
 30634                                  
 30635                                  	;mov	al,1
 30636                                  	;clc
 30637                                  ;llX:
 30638                                  	;pop	ds		; Return DS to where it was
 30639                                  	;retn
 30640                                  
 30641                                  %endif
 30642                                  
 30643                                  ; -----------------------------------------------------------------------------
 30644                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 30645                                  ; -----------------------------------------------------------------------------
 30646                                  ; ENTRY:  None
 30647                                  ; EXIT:   None
 30648                                  ; ERROR:  None
 30649                                  ; USES:   Flags, fm_strat, fm_umb
 30650                                  ; -----------------------------------------------------------------------------
 30651                                  
 30652                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 30653                                  	; (SYSINIT:322Fh)
 30654                                  HideUMBs:
 30655                                  	; 01/01/2023
 30656                                  	;push	ax
 30657                                  	;push	cx
 30658                                  	;push	ds
 30659 00002D07 06                      	push	es
 30660                                  
 30661                                  	; 01/01/2023
 30662                                  	; ds = cs
 30663                                  
 30664 00002D08 E86902                  	call	UmbTest		; See if we REALLY linked in anything...
 30665 00002D0B 7232                    	jc	short husX	; ...if not, there's nothing for us to do.
 30666                                  
 30667 00002D0D E886FD                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 30668                                  	
 30669                                  	;call	setUMBs		; Link UMBs and set memory-allocation strategy
 30670                                  	; 01/01/2023
 30671 00002D10 E8D0FD                  	call	fm_link
 30672                                  
 30673                                  	;putdata fInHigh,1	; Remember that we're now running high
 30674                                  	;mov	byte [cs:fInHigh],1
 30675                                  	; 01/01/2023
 30676 00002D13 C606[711F]01            	mov	byte [fInHigh],1
 30677                                  
 30678                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 30679                                  	;mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 30680                                  	; 01/01/2023
 30681 00002D18 A0[751F]                	mov	al,[UmbLoad]
 30682                                  
 30683 00002D1B 3CFF                    	cmp	al,UNSPECIFIED	; If they didn't,
 30684 00002D1D 7420                    	je	short husX	; then we shouldn't do this loop:
 30685                                  
 30686 00002D1F 31C9                    	xor	cx,cx
 30687                                  
 30688                                  ; -----------------------------------------------
 30689                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 30690                                  ; -----------------------------------------------
 30691                                  
 30692 00002D21 41                      hus10:	inc	cx		; For each UMB:
 30693                                  	; 01/01/2023
 30694 00002D22 80F910                  	cmp	cl,MAXUMB
 30695                                  	;cmp	cx,MAXUMB ; 16
 30696 00002D25 730E                    	jae	short hus20
 30697                                  
 30698 00002D27 88C8                    	mov	al,cl		; (stopping as soon as we're outside of the
 30699 00002D29 06                      	push	es
 30700 00002D2A E89E00                  	call	findUMB		; valid range of UMBs)
 30701 00002D2D 07                      	pop	es		; push/pop: trash what findumb finds.  :-)
 30702 00002D2E 7205                    	jc	short hus20
 30703                                  	
 30704                                  	; 02/01/2023
 30705                                  	;push	cx ; *
 30706 00002D30 E84C01                  	call	_hideUMB_	; hide what we need to hide.
 30707                                  	;pop	cx ; *
 30708                                  
 30709 00002D33 EBEC                    	jmp	short hus10
 30710                                  hus20:	
 30711                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 30712                                  	; 01/01/2023
 30713                                  	; ds = cs
 30714                                  	;mov	al,[UmbLoad]
 30715                                  	;;mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 30716 00002D35 800E[751F]00            	or	byte [UmbLoad],0
 30717                                  	;or	al,al		; --Is the load UMB 0? (-1==unspecified)
 30718 00002D3A 7503                    	jnz	short husX	; If not, we're done.
 30719                                  
 30720 00002D3C E86302                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 30721                                  husX:	
 30722 00002D3F 07                      	pop	es
 30723                                  	; 01/01/2023
 30724                                  	;pop	ds
 30725                                  	;pop	cx
 30726                                  	;pop	ax
 30727 00002D40 C3                      	retn
 30728                                  
 30729                                  ; -----------------------------------------------------------------------------
 30730                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 30731                                  ; -----------------------------------------------------------------------------
 30732                                  ; ENTRY:  None
 30733                                  ; EXIT:   AL == load UMB
 30734                                  ; ERROR:  None
 30735                                  ; USES:   Flags, AX
 30736                                  ; -----------------------------------------------------------------------------
 30737                                  
 30738                                  ;GetLoadUMB:
 30739                                  ;	;getdata al, UmbLoad
 30740                                  ;	push	ds
 30741                                  ;	push	cs
 30742                                  ;	pop	ds
 30743                                  ;	mov	al,[UmLoad]
 30744                                  ;	pop	ds
 30745                                  ;	retn
 30746                                  
 30747                                  ; -----------------------------------------------------------------------------
 30748                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 30749                                  ; -----------------------------------------------------------------------------
 30750                                  ; ENTRY:  None
 30751                                  ; EXIT:   AX == load UMB minimum size
 30752                                  ; ERROR:  None
 30753                                  ; USES:   Flags, AX
 30754                                  ; -----------------------------------------------------------------------------
 30755                                  
 30756                                  	; 01/01/2023 - Retro DOS v4.2
 30757                                  GetLoadSize:
 30758                                  	; 09/04/2019 - Retro DOS v4.0
 30759                                  	;mov	al,[cs:UmbLoad]
 30760                                  	; 01/01/2023
 30761                                  	; ds = cs
 30762 00002D41 A0[751F]                	mov	al,[UmbLoad] 
 30763                                  	;jmp	short GetSize
 30764                                  
 30765                                  	;push	bx
 30766                                  	;;push	si
 30767                                  	;push	ds
 30768                                  	;push	cs
 30769                                  	;pop	ds
 30770                                  
 30771                                  	;mov	al,[UmbLoad]
 30772                                  
 30773                                  	;xor	ah,ah			;    ax==UMB
 30774                                  	;mov	bx,UmbSize		;    bx==array
 30775                                  	;shl	al,1	                ;    ax==offset
 30776                                  	;;add	ax,bx			;    ax==element index
 30777                                  	;;mov	si,ax			; ds:si==element index
 30778                                  
 30779                                  	;;lodsw				;    hh
 30780                                  
 30781                                  	;add	bx,ax
 30782                                  	;mov	ax,[bx]
 30783                                  
 30784                                  	;pop	ds
 30785                                  	;;pop	si
 30786                                  	;pop	bx
 30787                                  	;retn
 30788                                  
 30789                                  ; -----------------------------------------------------------------------------
 30790                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 30791                                  ; -----------------------------------------------------------------------------
 30792                                  ; ENTRY:  AL == a UMB number
 30793                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 30794                                  ; ERROR:  None
 30795                                  ; USES:   Flags, AX
 30796                                  ; -----------------------------------------------------------------------------
 30797                                  
 30798                                  	; 01/01/2023 - Retro DOS v4.2
 30799                                  GetSize:
 30800                                  	; 09/04/2019 - Retro DOS v4.0
 30801                                  
 30802                                  	;push	bx ; 01/01/2023
 30803                                  	;push	si
 30804                                  	;push	ds
 30805                                  	;push	cs
 30806                                  	;pop	ds
 30807                                  
 30808 00002D44 30E4                    	xor	ah,ah			;    ax==UMB
 30809 00002D46 BB[861F]                	mov	bx,UmbSize		;    bx==array
 30810 00002D49 D0E0                    	shl	al,1	                ;    ax==offset
 30811                                  	;add	ax,bx			;    ax==element index
 30812                                  	;mov	si,ax			; ds:si==element index
 30813                                  
 30814                                  	;lodsw				;    ax==size
 30815                                  
 30816 00002D4B 01C3                    	add	bx,ax
 30817                                  	; 01/01/2023
 30818                                  	; ds = cs
 30819 00002D4D 8B07                    	mov	ax,[bx]
 30820                                  	;mov	ax,[cs:bx]
 30821                                  
 30822                                  	;pop	ds
 30823                                  	;pop	si
 30824                                  	;pop	bx ; 01/01/2023
 30825 00002D4F C3                      	retn
 30826                                  
 30827                                  ; -----------------------------------------------------------------------------
 30828                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 30829                                  ; -----------------------------------------------------------------------------
 30830                                  ; ENTRY:   AL == new load UMB
 30831                                  ; EXIT:    None
 30832                                  ; ERROR:   None
 30833                                  ; USES:    Flags, AX
 30834                                  ; -----------------------------------------------------------------------------
 30835                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 30836                                  ;          time you would ever need this, so that's okay.
 30837                                  ; -----------------------------------------------------------------------------
 30838                                  
 30839                                  ;StoLoadUMB:
 30840                                  ;	;putdata UmbLoad, al
 30841                                  ;	push	es
 30842                                  ;	push	cs
 30843                                  ;	pop	es
 30844                                  ;	mov	[es:UmbLoad],al
 30845                                  ;	pop	es
 30846                                  ;	retn
 30847                                  
 30848                                  ; -----------------------------------------------------------------------------
 30849                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 30850                                  ; -----------------------------------------------------------------------------
 30851                                  ; ENTRY:  AL == new load size
 30852                                  ; EXIT:   None
 30853                                  ; ERROR:  None
 30854                                  ; USES:   Flags, AX
 30855                                  ; -----------------------------------------------------------------------------
 30856                                  
 30857                                  	; 01/01/2023 - Retro DOS v4.2
 30858                                  StoLoadSize:
 30859                                  	; 01/01/2023
 30860                                  	;push	dx
 30861                                  
 30862                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 30863                                  	;
 30864                                  	;push	ds
 30865                                  	;push	cs
 30866                                  	;pop	ds
 30867                                  	;mov	dl,[UmbLoad]
 30868                                  	;pop	ds	
 30869                                  
 30870 00002D50 2E8A16[751F]            	mov	dl,[cs:UmbLoad]
 30871                                  
 30872 00002D55 80FAFF                  	cmp	dl,UNSPECIFIED ; 0FFh
 30873 00002D58 7403                    	je	short sls10
 30874                                  
 30875 00002D5A E891FE                  	call	stowSiz			; We've got a function to do just this
 30876                                  sls10:	
 30877                                  	; 01/01/2023
 30878                                  	;pop	dx
 30879 00002D5D C3                      	retn
 30880                                  
 30881                                  ; -----------------------------------------------------------------------------
 30882                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 30883                                  ; -----------------------------------------------------------------------------
 30884                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 30885                                  ; EXIT:     None; free elements in UMB marked as hidden
 30886                                  ; ERROR:    None
 30887                                  ; USES:     Flags
 30888                                  ; -----------------------------------------------------------------------------
 30889                                  
 30890                                  	; 01/01/2023 - Retro DOS v4.2
 30891                                  hideUMB:
 30892                                  	; 02/01/2023
 30893 00002D5E 52                      	push	dx ; (*)
 30894                                  	; 01/01/2023
 30895                                  	;push	ax
 30896 00002D5F 06                      	push	es
 30897                                  
 30898 00002D60 E86800                  	call	findUMB	; (*)	; Returns with carry if err, else ES == MCB
 30899 00002D63 7224                    	jc	short huX
 30900                                  
 30901                                  ; ------------------------------------------------
 30902                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 30903                                  ;            we're not in the same UMB, so exit.
 30904                                  ; ------------------------------------------------
 30905                                  
 30906 00002D65 E84EFF                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30907 00002D68 741F                    	jz	short huX	; If it is, we've finished the UMB.
 30908                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 30909 00002D6A 26830E010000            	or	word [es:ARENA.OWNER],0
 30910 00002D70 7503                    	jnz	short hu20
 30911                                  
 30912 00002D72 E81700                  	call	hideMCB
 30913                                  hu20:	
 30914                                  	;mov	al,[es:ARENA.SIGNATURE]
 30915                                  	;cmp	al,arena_signature_end  ;'Z'
 30916                                  	; 19/07/2023
 30917 00002D75 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],'Z'
 30918 00002D7B 740C                    	jz	short huX	; 'Z' means this was the last MCB... that's it.
 30919                                  
 30920                                  	;NextMCB es,ax		; Go on forward.
 30921 00002D7D 8CC0                    	mov     ax,es
 30922                                  	;add	ax,[es:3]
 30923 00002D7F 2603060300              	add     ax,[es:ARENA.SIZE]
 30924 00002D84 40                      	inc     ax
 30925 00002D85 8EC0                    	mov     es,ax
 30926                                  
 30927 00002D87 EBDC                    	jmp	short hu10
 30928                                  huX:	
 30929 00002D89 07                      	pop	es
 30930                                  	; 01/01/2023
 30931                                  	;pop	ax
 30932                                  	; 02/01/2023
 30933 00002D8A 5A                      	pop	dx ; (*)
 30934 00002D8B C3                      	retn
 30935                                  
 30936                                  ; 02/01/2023
 30937                                  %if 0
 30938                                  
 30939                                  ; -----------------------------------------------------------------------------
 30940                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 30941                                  ; -----------------------------------------------------------------------------
 30942                                  ; ENTRY:    None
 30943                                  ; EXIT:     ZF set if user DIDN'T specify /S
 30944                                  ; ERROR:    None
 30945                                  ; USES:     Flags
 30946                                  ; -----------------------------------------------------------------------------
 30947                                  
 30948                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 30949                                  isTiny:
 30950                                  	; 02/01/2023
 30951                                  	;push	ax
 30952                                  
 30953                                  	;getdata al,fUmbTiny
 30954                                  	;
 30955                                  	;push	ds
 30956                                  	;push	cs
 30957                                  	;pop	ds
 30958                                  	;mov	al,[fUmbTiny]
 30959                                  	;pop	ds
 30960                                  
 30961                                  	mov	al,[cs:fUmbTiny]
 30962                                  	; 02/01/2023
 30963                                  	; ds = cs
 30964                                  	mov	al,[fUmbTiny]
 30965                                  
 30966                                  	or	al,al
 30967                                  	; 02/01/2023
 30968                                  	;pop	ax
 30969                                  	retn
 30970                                  
 30971                                  %endif
 30972                                  
 30973                                  ; -----------------------------------------------------------------------------
 30974                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 30975                                  ; -----------------------------------------------------------------------------
 30976                                  ; ENTRY:    ES:0 should point to an MCB
 30977                                  ; EXIT:     ZF set if MCB is free, else !ZF
 30978                                  ; ERROR:    None
 30979                                  ; USES:     Flags
 30980                                  ; -----------------------------------------------------------------------------
 30981                                  
 30982                                  ;isFreeMCB:
 30983                                  ;	or	word [es:ARENA.OWNER],0
 30984                                  ;	retn
 30985                                  
 30986                                  ; -----------------------------------------------------------------------------
 30987                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 30988                                  ; -----------------------------------------------------------------------------
 30989                                  ; ENTRY:    ES:0 should point to an MCB
 30990                                  ; EXIT:     None; MCB marked as HIDDEN
 30991                                  ; ERROR:    None
 30992                                  ; USES:     None
 30993                                  ; -----------------------------------------------------------------------------
 30994                                  
 30995                                  hideMCB:
 30996 00002D8C 26C70601000800          	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 30997 00002D93 26C70608004849          	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 30998 00002D9A 26C7060A004444          	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 30999 00002DA1 26C7060C00454E          	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 31000 00002DA8 26C7060E002020          	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 31001 00002DAF C3                      	retn
 31002                                  
 31003                                  ; -----------------------------------------------------------------------------
 31004                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 31005                                  ; -----------------------------------------------------------------------------
 31006                                  ; ENTRY:    ES:0 should point to an MCB
 31007                                  ; EXIT:     None; MCB marked as FREE
 31008                                  ; ERROR:    None
 31009                                  ; USES:     None
 31010                                  ; -----------------------------------------------------------------------------
 31011                                  
 31012                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31013                                  
 31014                                  unHideMCB:
 31015                                  	; 03/01/2023
 31016                                  	;push	ax
 31017 00002DB0 26C70601000000          	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 31018 00002DB7 B82020                  	mov	ax,'  ' ; 2020h
 31019 00002DBA 26A30800                	mov	[es:ARENA.NAME+0],ax
 31020 00002DBE 26A30A00                	mov	[es:ARENA.NAME+2],ax
 31021 00002DC2 26A30C00                	mov	[es:ARENA.NAME+4],ax
 31022 00002DC6 26A30E00                	mov	[es:ARENA.NAME+6],ax
 31023                                  	; 03/01/2023
 31024                                  	;pop	ax
 31025 00002DCA C3                      	retn
 31026                                  
 31027                                  ; -----------------------------------------------------------------------------
 31028                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 31029                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 31030                                  ; -----------------------------------------------------------------------------
 31031                                  ; ENTRY:    AL should be to a valid UMB number
 31032                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 31033                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 31034                                  ; USES:     Flags, ES
 31035                                  ; -----------------------------------------------------------------------------
 31036                                  
 31037                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31038                                  	; (SYSINIT:3344h)
 31039                                  findUMB:
 31040                                  	; 01/01/2023
 31041                                  	;push	ax
 31042                                  	; 02/01/2023
 31043 00002DCB 51                      	push	cx ; *
 31044                                  	;push	dx
 31045                                  
 31046 00002DCC 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 31047                                  
 31048 00002DCE 89C2                    	mov	dx,ax		; Store the to-be-found UMB number in DX
 31049                                  
 31050 00002DD0 E8D6FE                  	call	UmbHead		; Returns first UMB segment in AX
 31051                                  	; 22/07/2023
 31052                                  	;mov	es,ax ; *
 31053 00002DD3 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 31054                                  
 31055                                  	; 22/07/2023
 31056                                  fu10:
 31057 00002DD5 8EC0                    	mov	es,ax ; * ; **
 31058                                  ; ---------------------------------------------
 31059                                  ; FU10--CX - This UMB number; 0 == conventional
 31060                                  ;       DX - The UMB number they're looking for
 31061                                  ;       ES - The current MCB address
 31062                                  ; ---------------------------------------------
 31063                                  
 31064                                  ;fu10:	
 31065 00002DD7 39D1                    	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 31066 00002DD9 7417                    	je	short fuX	; searching for--so exit.
 31067                                  
 31068 00002DDB E8D8FE                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 31069 00002DDE 7501                    	jnz	short fu20
 31070                                  
 31071 00002DE0 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 31072                                  fu20:	
 31073                                  	;mov	al,[es:ARENA.SIGNATURE]
 31074                                  	;cmp	al,arena_signature_end ; 'Z'
 31075                                  	; 19/07/2023
 31076 00002DE1 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end 
 31077 00002DE7 7408                    	je	short fuE	; 'Z' means this was the last MCB... that's it.
 31078                                  
 31079                                  	;NextMCB es,ax		; Go on forward.
 31080                                  	; 22/07/2023
 31081                                  	; ax = es
 31082                                  	;mov	ax,es ; * ; 22/07/2023
 31083                                  	;add	ax,[es:3]
 31084 00002DE9 2603060300              	add	ax,[es:ARENA.SIZE]
 31085 00002DEE 40                      	inc	ax
 31086                                  	; 22/07/2023
 31087                                  	;mov	es,ax ; **
 31088 00002DEF EBE4                    	jmp	short fu10
 31089                                  fuE:	
 31090 00002DF1 F9                      	stc
 31091                                  fuX:
 31092                                  	; 01/01/2023
 31093                                  	;pop	dx
 31094                                  	; 02/01/2023
 31095 00002DF2 59                      	pop	cx ; *
 31096                                  	;pop	ax		; The address is already in ES.
 31097 00002DF3 C3                      	retn
 31098                                  
 31099                                  ; -----------------------------------------------------------------------------
 31100                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 31101                                  ; -----------------------------------------------------------------------------
 31102                                  ; ENTRY:    AL should be to a valid UMB number
 31103                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 31104                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 31105                                  ; USES:     Flags, ES
 31106                                  ; -----------------------------------------------------------------------------
 31107                                  
 31108                                  	; 01/01/2023 - Retro DOS v4.2
 31109                                  BigFree:
 31110                                  	; 01/01/2023
 31111                                  	;push	bx
 31112 00002DF4 51                      	push	cx
 31113                                  
 31114 00002DF5 E8D3FF                  	call	findUMB			; Returns with CF if err, else ES==MCB
 31115 00002DF8 723A                    	jc	short bfX
 31116                                  
 31117 00002DFA 31DB                    	xor	bx,bx			; Segment address of largest free MCB
 31118 00002DFC 31C9                    	xor	cx,cx			; Size of largest free MCB
 31119                                  
 31120                                  ; ---------------------------------------------
 31121                                  ; BF10--ES - Current MCB address
 31122                                  ;       BX - Address of largest free MCB so far
 31123                                  ;       CX - Size of largest free MCB so far
 31124                                  ; ---------------------------------------------
 31125                                  
 31126                                  bf10:	
 31127 00002DFE E8B5FE                  	call	isSysMCB		; If we've left the MCB, we're done.
 31128 00002E01 7428                    	jz	short bf30
 31129                                  
 31130                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 31131 00002E03 26830E010000            	or	word [es:ARENA.OWNER],0
 31132 00002E09 750C                    	jnz	short bf20
 31133                                  
 31134 00002E0B 26A10300                	mov	ax,[es:ARENA.SIZE]
 31135                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 31136 00002E0F 39C1                    	cmp	cx,ax
 31137                                  	;jg	short bf20		; Unless we're bigger,
 31138                                  	; 19/07/2023
 31139 00002E11 7D04                    	jge	short bf20
 31140                                  
 31141 00002E13 8CC3                    	mov	bx,es			; Store this new element's address,
 31142                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 31143 00002E15 89C1                    	mov	cx,ax
 31144                                  bf20:	
 31145                                  	;mov	al,[es:ARENA.SIGNATURE]
 31146                                  	;cmp	al,arena_signature_end	; 'Z'
 31147                                  	; 19/07/2023
 31148                                  	;cmp	byte [es:0],'Z'
 31149 00002E17 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 31150 00002E1D 740C                    	jz	short bf30		; 'Z' means this was the last MCB.
 31151                                  
 31152                                  	;NextMCB es,ax			; Go on forward.
 31153 00002E1F 8CC0                    	mov     ax,es
 31154                                  	;add	ax,[es:3]
 31155 00002E21 2603060300              	add     ax,[es:ARENA.SIZE]
 31156 00002E26 40                      	inc     ax
 31157 00002E27 8EC0                    	mov     es,ax
 31158                                  
 31159 00002E29 EBD3                    	jmp	short bf10
 31160                                  
 31161 00002E2B 8EC3                    bf30:	mov	es,bx			; Return the address
 31162 00002E2D 89C8                    	mov	ax,cx			; Return the size
 31163 00002E2F 09DB                    	or	bx,bx
 31164 00002E31 7501                    	jnz	short bfX
 31165                                  bfE:	
 31166 00002E33 F9                      	stc				; (if size==0, there's nothing free)
 31167                                  bfX:
 31168 00002E34 59                      	pop	cx
 31169                                  	; 01/01/2023
 31170                                  	;pop	bx
 31171 00002E35 C3                      	retn
 31172                                  
 31173                                  ; -----------------------------------------------------------------------------
 31174                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 31175                                  ; -----------------------------------------------------------------------------
 31176                                  ; ENTRY:    AL should be to a valid UMB number
 31177                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 31178                                  ; ERROR:    None
 31179                                  ; USES:     Flags
 31180                                  ; -----------------------------------------------------------------------------
 31181                                  
 31182                                  	; 02/01/2023 - Retro DOS v4.2
 31183                                  
 31184                                  isSpecified:
 31185                                  	; 02/01/2023
 31186                                  	;push	ax
 31187                                  
 31188 00002E36 30FF                    	xor	bh,bh
 31189 00002E38 88C3                    	mov	bl,al
 31190                                  
 31191                                  	;getdata al,DS:UmbUsed[bx]
 31192                                  	;
 31193                                  	;push	ds
 31194                                  	;push	cs
 31195                                  	;pop	ds
 31196                                  	;mov	al,[bx+UmbUsed]
 31197                                  	;pop	ds
 31198                                  	
 31199                                  	;mov	al,[cs:bx+UmbUsed]
 31200                                  	; 02/01/2023
 31201                                  	; ds = cs
 31202 00002E3A 8A87[761F]              	mov	al,[bx+UmbUsed]
 31203                                  
 31204 00002E3E 08C0                    	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 31205                                  
 31206                                  	; 02/01/2023
 31207 00002E40 58                      	pop	ax
 31208 00002E41 C3                      	retn
 31209                                  
 31210                                  ; -----------------------------------------------------------------------------
 31211                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 31212                                  ; -----------------------------------------------------------------------------
 31213                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 31214                                  ; EXIT:     None; MCB broken if carry clear
 31215                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 31216                                  ; USES:     Flags
 31217                                  ; -----------------------------------------------------------------------------
 31218                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 31219                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 31220                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 31221                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 31222                                  ; minimum for performing a split.
 31223                                  ; -----------------------------------------------------------------------------
 31224                                  
 31225                                  MIN_SPLIT_SIZE	equ 20h
 31226                                  
 31227                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31228                                  
 31229                                  shrinkMCB:
 31230                                  	;pushreg <bx,cx,es>
 31231                                  	; 02/01/2023
 31232                                  	;push	bx
 31233 00002E42 51                      	push	cx
 31234 00002E43 06                      	push	es
 31235                                  
 31236 00002E44 89C3                    	mov	bx,ax			; Move things around... and
 31237                                  	; 02/01/2023
 31238                                  	;mov	ax,es			; save this one for later.
 31239                                  
 31240 00002E46 268B0E0300              	mov	cx,[es:ARENA.SIZE]
 31241                                  	; 02/01/2023
 31242 00002E4B 89C8                    	mov	ax,cx 
 31243                                  
 31244 00002E4D 83E820                  	sub	ax,MIN_SPLIT_SIZE ; 32
 31245                                  	;sub	cx,MIN_SPLIT_SIZE ; 32
 31246                                  	;;cmp	bx,cx			; {New size} vs {Current Size-20h}
 31247                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 31248                                  	; 18/12/2022
 31249                                  	;cmp	cx,bx
 31250                                  	; 02/01/2023
 31251 00002E50 39D8                    	cmp	ax,bx
 31252 00002E52 7228                    	jb	short smE ; (*)
 31253                                  
 31254 00002E54 268A160000              	mov	dl,[es:ARENA.SIGNATURE]
 31255                                  	
 31256                                  	;mov	cx,[es:ARENA.SIZE]
 31257                                  	; 02/01/2023
 31258 00002E59 8CC0                    	mov	ax,es
 31259                                  
 31260 00002E5B 26891E0300              	mov	[es:ARENA.SIZE],bx
 31261 00002E60 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],'M'
 31262                                  
 31263 00002E66 01D8                    	add	ax,bx
 31264 00002E68 40                      	inc	ax
 31265 00002E69 8EC0                    	mov	es,ax			; Move to new arena area
 31266                                  
 31267 00002E6B 89C8                    	mov	ax,cx
 31268 00002E6D 29D8                    	sub	ax,bx
 31269                                  	; 12/12/2022
 31270                                  	; ax > 0
 31271 00002E6F 48                      	dec	ax			; And prepare the new size
 31272                                  
 31273                                  	; 18/12/2022
 31274 00002E70 2688160000              	mov	[es:ARENA.SIGNATURE],dl
 31275                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 31276 00002E75 26A30300                	mov	[es:ARENA.SIZE],ax
 31277                                  	;mov	ax,'  ' ; 2020h
 31278                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 31279                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 31280                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 31281                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 31282                                  
 31283                                  	; 18/12/2022
 31284 00002E79 E8A401                  	call	freeMCB	; (**)
 31285                                  
 31286                                  	; 12/12/2022
 31287                                  	; cf=0
 31288                                  	;clc
 31289                                  	; 18/12/2022
 31290                                  	;jmp	short smX
 31291                                  smE:	
 31292                                  	; 18/12/2022
 31293                                  	; cf=1 (*)
 31294                                  	;stc
 31295                                  smX:	
 31296                                  	;popreg	<es,cx,bx>
 31297 00002E7C 07                      	pop	es
 31298 00002E7D 59                      	pop	cx
 31299                                  	; 02/01/2023
 31300                                  	;pop	bx
 31301 00002E7E C3                      	retn
 31302                                  
 31303                                  ; -----------------------------------------------------------------------------
 31304                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 31305                                  ; -----------------------------------------------------------------------------
 31306                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 31307                                  ; EXIT:     None; UMB is hidden as necessary
 31308                                  ; ERROR:    None
 31309                                  ; USES:     Flags, AX, CX
 31310                                  ; -----------------------------------------------------------------------------
 31311                                  ; PRIMARY LOGIC:
 31312                                  ;
 31313                                  ; If the UMB is specified in the DH/LH statement, then:
 31314                                  ;    If the largest free segment is too small (check specified size), then:
 31315                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 31316                                  ;    Else, if largest free segment is LARGER than specified size, then:
 31317                                  ;       If /S was given on the command-line, then:
 31318                                  ;          Break that element into two pieces
 31319                                  ;          Set a flag that we're shrinking
 31320                                  ;       Endif
 31321                                  ;    Endif
 31322                                  ; Endif
 31323                                  ; If the UMB is NOT specified (or was removed by the above):
 31324                                  ;    Hide all free elements in the UMB
 31325                                  ;    If the flag that we're shrinking was set, then:
 31326                                  ;       UN-hide the lower portion of the shrunken UMB
 31327                                  ;    ENDIF
 31328                                  ; ENDIF
 31329                                  ; -----------------------------------------------------------------------------
 31330                                  
 31331                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31332                                  	; (SYSINIT:3426h)
 31333                                  _hideUMB_:
 31334                                  	; 02/01/2023
 31335                                  	; ds = cs
 31336                                  
 31337                                  	; 01/01/2023
 31338                                  	;push	bx
 31339                                  	;push	dx
 31340 00002E7F 06                      	push	es
 31341                                  
 31342 00002E80 88C8                    	mov	al,cl
 31343 00002E82 E8B1FF                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 31344 00002E85 742D                    	jz	short hu_20
 31345                                  
 31346 00002E87 88C8                    	mov	al,cl		; Retrieve the size of the largest
 31347 00002E89 E868FF                  	call	BigFree		; free element in AX; put its address in ES
 31348 00002E8C 7226                    	jc	short hu_20	; Oops. Errors mean skip this part.
 31349                                  
 31350 00002E8E 50                      	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 31351 00002E8F 88C8                    	mov	al,cl		; Retrieve the user's specified
 31352 00002E91 E8B0FE                  	call	GetSize		; minimum size for this umb (into AX)
 31353 00002E94 5B                      	pop	bx		; Now BX==BigFree, AX==Specified Size
 31354                                  
 31355 00002E95 09C0                    	or	ax,ax		; If they didn't specify one,
 31356 00002E97 741B                    	jz	short hu_20	; Skip over all this.
 31357                                  
 31358 00002E99 39D8                    	cmp	ax,bx		; Ah... if (specified > max free)
 31359 00002E9B 7607                    	jbe	short hu_10
 31360                                  
 31361 00002E9D 88C8                    	mov	al,cl		;  Then mark that UMB as unused. Nya nya.
 31362 00002E9F E814FD                  	call	unMarkUMB
 31363 00002EA2 EB10                    	jmp	short hu_20
 31364                                  hu_10:	
 31365                                  	;call	isTiny		; Returns ZF clear if user specified /S
 31366                                  	;jz	short hu_20
 31367                                  	; 02/01/2023
 31368                                  ;isTiny:
 31369                                  	;mov	al,[fUmbTiny] ; ds = cs
 31370                                  	;or	al,al
 31371 00002EA4 800E[721F]00            	or	byte [fUmbTiny],0
 31372 00002EA9 7409                    	jz	short hu_20
 31373                                  
 31374 00002EAB E894FF                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 31375 00002EAE 7204                    	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 31376                                  
 31377 00002EB0 8CC2                    	mov	dx,es
 31378 00002EB2 EB09                    	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 31379                                  
 31380 00002EB4 89C8                    hu_20:	mov	ax,cx
 31381 00002EB6 E87DFF                  	call	isSpecified	; If they specified this UMB, we're done...
 31382 00002EB9 7510                    	jnz	short hu_X	; so leave.
 31383                                  
 31384 00002EBB 31D2                    	xor	dx,dx
 31385                                  hu_30:	
 31386 00002EBD 88C8                    	mov	al,cl
 31387                                  
 31388 00002EBF E89CFE                  	call	hideUMB		; Hides everything in UMB #al
 31389                                  
 31390 00002EC2 09D2                    	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 31391 00002EC4 7405                    	jz	short hu_X	; So we should leave.
 31392                                  
 31393 00002EC6 8EC2                    	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 31394 00002EC8 E8E5FE                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 31395                                  hu_X:	
 31396 00002ECB 07                      	pop	es
 31397                                  	; 01/01/2023
 31398                                  	;pop	dx
 31399                                  	;pop	bx
 31400 00002ECC C3                      	retn
 31401                                  
 31402                                  ; -----------------------------------------------------------------------------
 31403                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 31404                                  ; -----------------------------------------------------------------------------
 31405                                  ; Entry:  None
 31406                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 31407                                  ; Error:  None
 31408                                  ; Uses:   Flags
 31409                                  ; -----------------------------------------------------------------------------
 31410                                  
 31411                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31412                                  UnFreeze:
 31413                                  	; 03/01/2023
 31414                                  	;push	ax
 31415 00002ECD 06                      	push	es
 31416                                  
 31417 00002ECE E8D8FD                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 31418 00002ED1 721A                    	jc	short ufX
 31419                                  
 31420                                  	; 22/07/2023
 31421                                  uf10:
 31422 00002ED3 8EC0                    	mov	es,ax ; *
 31423                                  
 31424                                  ; ------------------------------
 31425                                  ; UF10--ES - Current MCB address
 31426                                  ; ------------------------------
 31427                                  
 31428                                  ;uf10:	
 31429 00002ED5 E81700                  	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 31430 00002ED8 7503                    	jnz	short uf20
 31431 00002EDA E8D3FE                  	call	unHideMCB
 31432                                  uf20:	
 31433                                  	;mov	al,[es:ARENA.SIGNATURE]
 31434                                  	;cmp	al,arena_signature_end ; 'Z'
 31435                                  	; 22/07/2023
 31436 00002EDD 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31437 00002EE3 7408                    	jz	short ufX	; 'Z' means this was the last MCB.. that's it.
 31438                                  
 31439                                  	;NextMCB es,ax		; Go on forward.
 31440                                  	; 22/07/2023
 31441                                  	; ax = es
 31442                                  	;mov	ax,es ; *
 31443                                  	;add	ax,[es:3]
 31444 00002EE5 2603060300              	add	ax,[es:ARENA.SIZE]
 31445 00002EEA 40                      	inc	ax
 31446                                  	; 22/07/2023
 31447                                  	;mov	es,ax
 31448 00002EEB EBE6                    	jmp	short uf10
 31449                                  ufX:	
 31450 00002EED 07                      	pop	es
 31451                                  	; 03/01/2023
 31452                                  	;pop	ax
 31453 00002EEE C3                      	retn
 31454                                  
 31455                                  ; -----------------------------------------------------------------------------
 31456                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 31457                                  ; -----------------------------------------------------------------------------
 31458                                  ; ENTRY:    ES:0 should point to an MCB
 31459                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 31460                                  ; ERROR:    None
 31461                                  ; USES:     Flags
 31462                                  ; -----------------------------------------------------------------------------
 31463                                  
 31464                                  isFrozMCB:
 31465                                  	;push	ax
 31466                                  
 31467                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 31468                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 31469 00002EEF 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 31470 00002EF5 7522                    	jne	short ifmX
 31471                                  
 31472                                  	;mov	ax,[es:ARENA.NAME+0]
 31473                                  	;cmp	ax,'FR' ; 5246h
 31474 00002EF7 26813E08004652          	cmp	word [es:ARENA.NAME+0],'FR'
 31475 00002EFE 7519                    	jne	short ifmX
 31476                                  	;mov	ax,[es:ARENA.NAME+2]
 31477                                  	;cmp	ax,'OZ' ; 5A4Fh
 31478 00002F00 26813E0A004F5A          	cmp	word [es:ARENA.NAME+2],'OZ'
 31479 00002F07 7510                    	jne	short ifmX
 31480                                  	;mov	ax,[es:ARENA.NAME+4]
 31481                                  	;cmp	ax,'EN' ; 4E45h
 31482 00002F09 26813E0C00454E          	cmp	word [es:ARENA.NAME+4],'EN'
 31483 00002F10 7507                    	jne	short ifmX
 31484                                  	;mov	ax,[es:ARENA.NAME+6]
 31485                                  	;cmp	ax,'  ' ; 2020h
 31486 00002F12 26813E0E002020          	cmp	word [es:ARENA.NAME+6],'  '
 31487                                  ifmX:	
 31488                                  	;pop	ax
 31489 00002F19 C3                      	retn
 31490                                  
 31491                                  ; -----------------------------------------------------------------------------
 31492                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 31493                                  ; -----------------------------------------------------------------------------
 31494                                  ; ENTRY:    ES:0 should point to an MCB
 31495                                  ; EXIT:     None; MCB frozen
 31496                                  ; ERROR:    None
 31497                                  ; USES:     None
 31498                                  ; -----------------------------------------------------------------------------
 31499                                  
 31500                                  frezMCB:
 31501 00002F1A 26C70601000800          	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 31502 00002F21 26C70608004652          	mov	word [es:ARENA.NAME+0],'FR'
 31503 00002F28 26C7060A004F5A          	mov	word [es:ARENA.NAME+2],'OZ'
 31504 00002F2F 26C7060C00454E          	mov	word [es:ARENA.NAME+4],'EN'
 31505 00002F36 26C7060E002020          	mov	word [es:ARENA.NAME+6],'  '
 31506 00002F3D C3                      	retn
 31507                                  
 31508                                  ; -----------------------------------------------------------------------------
 31509                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 31510                                  ; -----------------------------------------------------------------------------
 31511                                  ; Entry:  None
 31512                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 31513                                  ; Error:  None
 31514                                  ; Uses:   Flags
 31515                                  ; -----------------------------------------------------------------------------
 31516                                  
 31517                                  	; 01/01/2023 - Retro DOS v4.2  
 31518                                  FreezeUM:
 31519                                  	; 01/01/2023
 31520                                  	;push	ax
 31521                                  	;push	cx
 31522                                  	;push	dx
 31523 00002F3E 06                      	push	es
 31524                                  
 31525                                  	;;call	GetLoadUMB
 31526                                  	; 01/01/2023
 31527                                  	; ds = cs
 31528                                  	;mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 31529 00002F3F A0[751F]                	mov	al,[UmbLoad] 	
 31530                                  
 31531 00002F42 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 31532 00002F44 89C2                    	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 31533                                  
 31534 00002F46 E860FD                  	call	UmbHead		; Returns first UMB segment in AX
 31535                                  	; 22/07/2023
 31536                                  	;mov	es,ax ; *
 31537 00002F49 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 31538                                  
 31539                                  	; 22/07/2023
 31540                                  fum10:
 31541 00002F4B 8EC0                    	mov	es,ax ; *
 31542                                  
 31543                                  ; -----------------------------------------
 31544                                  ; FUM10--ES - Current MCB address
 31545                                  ;        CX - Current UMB number
 31546                                  ;        DX - UMB number to skip (load UMB)
 31547                                  ; -----------------------------------------
 31548                                  
 31549                                  ;fum10:	
 31550 00002F4D E866FD                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 31551 00002F50 7501                    	jnz	short fum20
 31552                                  
 31553 00002F52 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 31554                                  fum20:	
 31555 00002F53 39D1                    	cmp	cx,dx		; If this is the load UMB, we don't want to
 31556 00002F55 740B                    	je	short fum30	; freeze anything... so skip that section.
 31557                                  
 31558                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 31559 00002F57 26830E010000            	or	word [es:ARENA.OWNER],0
 31560 00002F5D 7503                    	jnz	short fum30	; either.
 31561                                  
 31562 00002F5F E8B8FF                  	call	frezMCB
 31563                                  fum30:	
 31564                                  	;mov	al,[es:ARENA.SIGNATURE]
 31565                                  	;cmp	al,arena_signature_end ; 'Z'
 31566                                  	; 22/07/2023
 31567 00002F62 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31568 00002F68 7408                    	je	short fumX	; 'Z' means this was the last MCB.. that's it.
 31569                                  
 31570                                  	;NextMCB es, ax		; Go on forward.
 31571                                  	; 22/07/2023
 31572                                  	; ax = es
 31573                                  	;mov	ax,es
 31574                                  	;add	ax,[es:3]
 31575 00002F6A 2603060300              	add	ax,[es:ARENA.SIZE]
 31576 00002F6F 40                      	inc	ax
 31577                                  	; 22/07/2023
 31578                                  	;mov	es,ax ; *
 31579 00002F70 EBD9                    	jmp	short fum10
 31580                                  
 31581 00002F72 07                      fumX:	pop	es
 31582                                  	; 01/01/2023
 31583                                  	;pop	dx
 31584                                  	;pop	cx
 31585                                  	;pop	ax
 31586 00002F73 C3                      	retn
 31587                                  
 31588                                  ; -----------------------------------------------------------------------------
 31589                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 31590                                  ; -----------------------------------------------------------------------------
 31591                                  ; ENTRY:    None
 31592                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 31593                                  ; ERROR:    None
 31594                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 31595                                  ; -----------------------------------------------------------------------------
 31596                                  
 31597                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31598                                  UmbTest:
 31599                                  	; 01/01/2023
 31600                                  	;push	ax
 31601 00002F74 53                      	push	bx ; *
 31602                                  	;push	ds
 31603 00002F75 06                      	push	es ; **
 31604                                  
 31605                                  	; 01/01/2023
 31606                                  	; ds = cs
 31607                                  
 31608 00002F76 E86AFB                  	call	fm_link			; Link in UMBs (if not already linked)
 31609 00002F79 E80800                  	call	WalkMem			; Check to see if they're really linked
 31610 00002F7C 9C                      	pushf				; And remember what we found out
 31611 00002F7D E874FB                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 31612 00002F80 9D                      	popf				; And restore what we found out.
 31613                                  
 31614 00002F81 07                      	pop	es ; **
 31615                                  	; 01/01/2023
 31616                                  	;pop	ds
 31617 00002F82 5B                      	pop	bx ; *
 31618                                  	;pop	ax
 31619 00002F83 C3                      	retn
 31620                                  
 31621                                  ; -----------------------------------------------------------------------------
 31622                                  ;*** WalkMem - travels memory chain and returns carry clear if UMBs are linked
 31623                                  ; -----------------------------------------------------------------------------
 31624                                  ; ENTRY:    None
 31625                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 31626                                  ; ERROR:    None
 31627                                  ; USES:     Flags
 31628                                  ; -----------------------------------------------------------------------------
 31629                                  
 31630                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31631                                  	; (SYSINIT:3541h)
 31632                                  
 31633                                  WalkMem:
 31634                                  	;push	ax ; ?
 31635                                  	;push	bx ; ?
 31636                                  	;;push	ds ; ? ; 01/01/2023 (MSDOS 6.21 IO.SYS, SYSINIT:352Fh)
 31637                                  	;push	es ; ? no need to save contents of these registers ?
 31638                                  		   	
 31639 00002F84 B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 31640 00002F86 CD21                    	int	21h
 31641                                  
 31642 00002F88 268B47FE                	mov	ax,[es:bx-2]
 31643                                  	; 22/07/2023
 31644                                  um10:
 31645 00002F8C 8EC0                    	mov	es,ax ; * ; **
 31646                                  
 31647                                  ; ------------------------------
 31648                                  ; UM10: ES = Current MCB pointer
 31649                                  ; ------------------------------
 31650                                  
 31651                                  ;um10:
 31652                                  	;mov	al,[es:ARENA.SIGNATURE]
 31653                                  	;cmp	al,arena_signature_end ; 'Z'
 31654                                  	; 22/07/2023
 31655 00002F8E 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31656 00002F94 7408                    	je	short um20		; If signature == 'Z', hay no more.
 31657                                  
 31658                                  	;NextMCB es,bx			; Move to the next MCB
 31659                                  
 31660                                  	;mov	bx,es
 31661                                  	;;add	bx,[es:3]
 31662                                  	;add	bx,[es:ARENA.SIZE]
 31663                                  	;inc	bx
 31664                                  	;mov	es,bx
 31665                                  	; 22/07/2023
 31666                                  	; ax = es
 31667                                  	;mov	ax,es ; *
 31668 00002F96 2603060300              	add	ax,[es:ARENA.SIZE]
 31669 00002F9B 40                      	inc	ax
 31670                                  	;mov	es,ax ; **
 31671                                  	
 31672 00002F9C EBEE                    	jmp	short um10		; And restart the loop.
 31673                                  um20:	
 31674                                  	; 22/07/2023
 31675                                  	; ax = es
 31676                                  	;mov	ax,es
 31677                                  
 31678 00002F9E 3DFF9F                  	cmp	ax,9FFFh		; This sets CF if ax < 9FFF.
 31679                                  
 31680                                  	;pop	es ; ?
 31681                                  	;;pop	ds ; ? ; 01/01/2023 (MSDOS 6.21 IO.SYS, SYSINIT:353Dh)
 31682                                  	;pop	bx ; ?
 31683                                  	;pop	ax ; ?
 31684                                  	
 31685 00002FA1 C3                      	retn
 31686                                  
 31687                                  ; -----------------------------------------------------------------------------
 31688                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 31689                                  ; -----------------------------------------------------------------------------
 31690                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 31691                                  ; EXIT:     None
 31692                                  ; ERROR:    None
 31693                                  ; USES:     AX, BX
 31694                                  ; -----------------------------------------------------------------------------
 31695                                  
 31696                                  	; 01/01/2023 - Retro DOS v4.2
 31697                                  hl_unlink:
 31698 00002FA2 30FF                    	xor	bh,bh
 31699                                  
 31700                                  	;getdata bl,fm_umb		; Restore original link-state
 31701                                  	;
 31702                                  	;push	ds
 31703                                  	;push	cs
 31704                                  	;pop	ds
 31705                                  	;mov	bl,[fm_umb]
 31706                                  	;pop	ds
 31707                                  
 31708                                  	; 01/01/2023
 31709                                  	; ds = cs
 31710                                  	;mov	bl,[cs:fm_umb]
 31711 00002FA4 8A1E[A61F]              	mov	bl,[fm_umb]
 31712                                  
 31713 00002FA8 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 31714 00002FAB CD21                    	int	21h
 31715 00002FAD C3                      	retn
 31716                                  
 31717                                  ; ----------------------------------------------------------------------
 31718                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 31719                                  ; ----------------------------------------------------------------------
 31720                                  ; 09/04/2019 - Retro DOS v4.0
 31721                                  
 31722                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 31723                                  ;   Date:     May 14, 1992
 31724                                  
 31725                                  ;   Modification log:
 31726                                  ;
 31727                                  ;     DATE    WHO      DESCRIPTION
 31728                                  ;   --------  -------  --------------------------------------------------------
 31729                                  ;   05/14/92  t-richj  Original
 31730                                  ;   06/21/92  t-richj  Final revisions before check-in
 31731                                  
 31732                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 31733                                  
 31734                                  ; -----------------------------------------------------------------------------
 31735                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 31736                                  ; -----------------------------------------------------------------------------
 31737                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 31738                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 31739                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 31740                                  ; ERROR:  None
 31741                                  ; USES:   fInHigh (from highvar.inc), carry flag
 31742                                  ; -----------------------------------------------------------------------------
 31743                                  
 31744                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31745                                  	; (SYSINIT:357Bh)
 31746                                  
 31747                                  UnHideUMBs:
 31748 00002FAE 50                      	push	ax		; Save ax for what we're about to do
 31749                                  
 31750                                  ; -----------------------------------------------------------------------------
 31751                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 31752                                  ;    length of time. Those six constitute a check of whether or not we should
 31753                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 31754                                  ;    will destroy the current link-state and memory-allocation strategy after
 31755                                  ;    every command execution.
 31756                                  ; -----------------------------------------------------------------------------
 31757                                  
 31758                                  	;getdata al,fInHigh	; Get InHigh from data segment
 31759                                  	;
 31760                                  	;push	ds
 31761                                  	;push	cs
 31762                                  	;pop	ds
 31763                                  	;mov	al,[fInHigh]
 31764                                  	;pop	ds	
 31765                                  
 31766                                  	;mov	al,[cs:fInHigh]
 31767                                  	; 31/12/2022
 31768                                  	; ds = cs
 31769 00002FAF A0[711F]                	mov	al,[fInHigh]	
 31770                                  
 31771 00002FB2 08C0                    	or	al,al
 31772 00002FB4 7503                    	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 31773                                  
 31774 00002FB6 58                      	pop	ax		; then there's nothing to do here... so
 31775 00002FB7 F9                      	stc			; restore everything and return. Just like
 31776 00002FB8 C3                      	retn			; that.
 31777                                  uhu10:	
 31778 00002FB9 E88C00                  	call	linkumb		; Make sure UMBs are linked in.
 31779 00002FBC E81200                  	call	FreeUMBs
 31780                                  
 31781                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 31782                                  	;
 31783                                  	;push	es
 31784                                  	;push	cs
 31785                                  	;pop	es
 31786                                  	;mov	byte [es:fInHigh],0
 31787                                  	;pop	ds
 31788                                  
 31789                                  	; 31/12/2022
 31790                                  	; ds = cs	
 31791                                  	;mov	byte [cs:fInHigh],0
 31792 00002FBF C606[711F]00            	mov	byte [fInHigh],0
 31793                                  
 31794                                  	;call	he_unlink	; Unlink UMBs
 31795                                  	; 31/12/2022
 31796                                  ;;he_unlink:			; unlinks UMBs if fm_umb is set to 0
 31797 00002FC4 30FF                    	xor	bh,bh
 31798                                  
 31799                                  	;getdata bl,fm_umb	; Restore original link-state
 31800                                  	;mov	bl,[cs:fm_umb]	
 31801 00002FC6 8A1E[A61F]              	mov	bl,[fm_umb]
 31802                                  
 31803 00002FCA B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 31804 00002FCD CD21                    	int	21h
 31805                                  	;;retn
 31806                                  
 31807 00002FCF 58                      	pop	ax
 31808                                  	; 12/12/2022
 31809                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 31810 00002FD0 C3                      	retn
 31811                                  
 31812                                  ; 31/12/2022
 31813                                  ;%if 0
 31814                                  ;
 31815                                  ;; -----------------------------------------------------------------------------
 31816                                  ;;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 31817                                  ;; -----------------------------------------------------------------------------
 31818                                  ;; ENTRY:    fm_umb == 1 : leave linked, else unlink
 31819                                  ;; EXIT:     None
 31820                                  ;; ERROR:    None
 31821                                  ;; USES:     AX, BX
 31822                                  ;; -----------------------------------------------------------------------------
 31823                                  ;
 31824                                  ;he_unlink:
 31825                                  ;	xor	bh, bh
 31826                                  ;
 31827                                  ;	;getdata bl, fm_umb	; Restore original link-state
 31828                                  ;	mov	bl,[cs:fm_umb]	
 31829                                  ;
 31830                                  ;	mov	ax,DOS_SET_UMBLINK ; 5803h
 31831                                  ;	int	21h
 31832                                  ;	retn
 31833                                  ;
 31834                                  ;%endif
 31835                                  
 31836                                  ; -----------------------------------------------------------------------------
 31837                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 31838                                  ; -----------------------------------------------------------------------------
 31839                                  ; ENTRY:    None
 31840                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 31841                                  ; ERROR:    None (ignore CF)
 31842                                  ; USES:     Flags
 31843                                  ; -----------------------------------------------------------------------------
 31844                                  
 31845                                  FreeUMBs:
 31846 00002FD1 50                      	push	ax
 31847 00002FD2 06                      	push	es
 31848                                  
 31849 00002FD3 E86500                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 31850 00002FD6 721A                    	jc	short fusX
 31851                                  fus10:
 31852 00002FD8 8EC0                    	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 31853                                  ;fus10:	
 31854 00002FDA E81800                  	call	isHideMCB	; Returns with ZF set if owner is 0
 31855 00002FDD 7503                    	jnz	short fus20
 31856 00002FDF E83E00                  	call	freeMCB
 31857                                  fus20:	   
 31858                                  	;mov	al,[es:ARENA.SIGNATURE]
 31859                                  	;cmp	al,arena_signature_end ; 'Z'
 31860                                  	; 22/07/2023
 31861 00002FE2 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31862 00002FE8 7408                    	jz	short fusX	; That means this was the last MCB--that's it.
 31863                                  	
 31864                                  	; 22/07/2023
 31865                                  	; ax = es
 31866                                  	;mov	ax,es
 31867 00002FEA 2603060300              	add	ax,[es:ARENA.SIZE]
 31868 00002FEF 40                      	inc	ax
 31869                                  	; 22/07/2023
 31870                                  	;mov	es,ax
 31871 00002FF0 EBE6                    	jmp	short fus10	; Go on forward.
 31872                                  fusX:	
 31873 00002FF2 07                      	pop	es
 31874 00002FF3 58                      	pop	ax
 31875 00002FF4 C3                      	retn
 31876                                  
 31877                                  ; -----------------------------------------------------------------------------
 31878                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 31879                                  ; -----------------------------------------------------------------------------
 31880                                  ; ENTRY:    ES:0 should point to an MCB
 31881                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 31882                                  ; ERROR:    None
 31883                                  ; USES:     Flags
 31884                                  ; -----------------------------------------------------------------------------
 31885                                  
 31886                                  isHideMCB:
 31887                                  	;push	ax
 31888                                  
 31889 00002FF5 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 31890 00002FFB 7522                    	jne	short ihm_x			     ; then check for HIDDEN
 31891                                  
 31892                                  	;mov	ax,[es:ARENA.NAME]
 31893                                  	;cmp	ax,'HI' ; 4948h
 31894 00002FFD 26813E08004849          	cmp	word [es:ARENA.NAME+0],'HI'
 31895 00003004 7519                    	jne	short ihm_x
 31896                                  	;mov	ax,[es:ARENA.NAME+2]
 31897                                  	;cmp	ax,'DD' ; 4444h
 31898 00003006 26813E0A004444          	cmp	word [es:ARENA.NAME+2],'DD'
 31899 0000300D 7510                    	jne	short ihm_x
 31900                                  	;mov	ax,[es:ARENA.NAME+4]
 31901                                  	;cmp	ax,'EN' ; 4E45h
 31902 0000300F 26813E0C00454E          	cmp	word [es:ARENA.NAME+4],'EN'
 31903 00003016 7507                    	jne	short ihm_x
 31904                                  	;mov	ax,[es:ARENA.NAME+6]
 31905                                  	;cmp	ax,'  ' ; 2020h
 31906 00003018 26813E0E002020          	cmp	word [es:ARENA.NAME+6],'  '
 31907                                  ihm_x:	
 31908                                  	;pop	ax
 31909 0000301F C3                      	retn
 31910                                  
 31911                                  ; -----------------------------------------------------------------------------
 31912                                  ;*** freeMCB - marks as free the MCB at ES:0
 31913                                  ; -----------------------------------------------------------------------------
 31914                                  ; ENTRY:    ES:0 should point to an MCB
 31915                                  ; EXIT:     None; MCB free'd
 31916                                  ; ERROR:    None
 31917                                  ; USES:     AX
 31918                                  ; -----------------------------------------------------------------------------
 31919                                  
 31920                                  freeMCB:
 31921 00003020 26C70601000000          	mov	word [es:ARENA.OWNER],0
 31922 00003027 B82020                  	mov	ax,'  ' ; mov ax,2020h ; 31/12/2022
 31923 0000302A 26A30800                	mov	[es:ARENA.NAME+0],ax
 31924 0000302E 26A30A00                	mov	[es:ARENA.NAME+2],ax
 31925 00003032 26A30C00                	mov	[es:ARENA.NAME+4],ax
 31926 00003036 26A30E00                	mov	[es:ARENA.NAME+6],ax
 31927 0000303A C3                      	retn
 31928                                  
 31929                                  ; -----------------------------------------------------------------------------
 31930                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 31931                                  ; -----------------------------------------------------------------------------
 31932                                  ; ENTRY:  Nothing
 31933                                  ; EXIT:   AX contains 0x9FFF for most systems
 31934                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 31935                                  ; USES:   Flags, AX
 31936                                  ; -----------------------------------------------------------------------------
 31937                                  
 31938                                  HeadUmb:
 31939                                  	; 13/05/2019
 31940                                  
 31941                                  	;push	si ; ?
 31942                                  	;push	ds ; ?
 31943                                  	;push	es
 31944                                  	;push	bx ; *
 31945                                  
 31946                                  	; 09/04/2019
 31947                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 31948                                  
 31949 0000303B B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 31950 0000303D CD21                    	int	21h
 31951                                  			; DOS - 2+ internal - GET LIST OF LISTS
 31952                                  			; Return: ES:BX -> DOS list of lists
 31953                                  	;mov	ax,[es:8Ch]
 31954 0000303F 26A18C00                	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 31955 00003043 83F8FF                  	cmp	ax,0FFFFh
 31956                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 31957                                  
 31958                                  	;clc				; Else, it isn't.
 31959                                  	;jmp	short xhu_x
 31960                                  xhu_e:	
 31961                                  	;stc
 31962 00003046 F5                      	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 31963                                  xhu_x:	
 31964                                  	;pop	bx ; *
 31965                                  	;pop	es	
 31966                                  	;pop	ds ; ?
 31967                                  	;pop	si ; ?
 31968 00003047 C3                      	retn
 31969                                  
 31970                                  ; -----------------------------------------------------------------------------
 31971                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 31972                                  ; -----------------------------------------------------------------------------
 31973                                  ; ENTRY:    None
 31974                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 31975                                  ; ERROR:    None
 31976                                  ; USES:     AX, BX, fm_umb
 31977                                  ; -----------------------------------------------------------------------------
 31978                                  
 31979                                  linkumb:
 31980 00003048 B80258                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 31981 0000304B CD21                    	int	21h			; Current link-state is now in al
 31982                                  
 31983 0000304D 08C0                    	or	al,al			; BUGBUG: proper check?
 31984 0000304F 7508                    	jnz	short lumbX		; Jumps if UMBs already linked in
 31985                                  
 31986 00003051 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 31987 00003054 BB0100                  	mov	bx,1
 31988 00003057 CD21                    	int	21h
 31989                                  lumbX:
 31990 00003059 C3                      	retn
 31991                                  
 31992                                  ;%endif
 31993                                  
 31994                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31995                                  ; (SYSINIT:2B5Fh)
 31996                                  
 31997                                  ; ----------------------------------------------------------------------
 31998                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 31999                                  ; ----------------------------------------------------------------------
 32000                                  ; 09/04/2019 - Retro DOS v4.0
 32001                                  
 32002                                  ;----------------------------------------------------------------------------
 32003                                  ;
 32004                                  ; procedure : InitDevLoad
 32005                                  ;
 32006                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 32007                                  ;			 = 1 indicates load in UMB:
 32008                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 32009                                  ;		                    = 1 indicates a DOS 5-style load
 32010                                  ;		DevSize  = Size of the device driver file in paras
 32011                                  ;
 32012                                  ;	Output : none
 32013                                  ;
 32014                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 32015                                  ;	Also sets up a header for the Device driver entry for mem utility
 32016                                  ;
 32017                                  ;----------------------------------------------------------------------------
 32018                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 32019                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 32020                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 32021                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 32022                                  ;----------------------------------------------------------------------------
 32023                                  
 32024                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32025                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32026                                  	; (SYSINIT:364Ah)
 32027                                  InitDevLoad:
 32028                                  	; 01/01/2023
 32029                                  	;push	es ; *
 32030                                  
 32031                                  	; 11/12/2022
 32032                                  	; ds = cs
 32033 0000305A 803E[C71F]00            	cmp	byte [DeviceHi],0
 32034                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 32035                                  	;je	short InitForLo		; no, init for lo mem
 32036 0000305F 7439                    	je	short initforlo_x ; 09/04/2019
 32037                                  
 32038                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32039                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32040                                  ; %if 0
 32041                                  	; 01/01/2023
 32042 00003061 803E[B71F]01            	cmp	byte [ConvLoad],1
 32043                                  	;cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 32044 00003066 7413                    	je	short InitForConv
 32045                                  
 32046                                  ; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 32047                                  ; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 32048                                  ; any areas left in upper-memory, except for elements in the load UMB...
 32049                                  ; we then malloc space as per Dos-5 style, and mark as free any spaces which
 32050                                  ; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 32051                                  ; and UnHideUMBs later on marks all 8+HIDDEN as free.
 32052                                  
 32053 00003068 E86904                  	call	ShrinkUMB		; Stop using the old device arena
 32054                                  
 32055 0000306B E899FC                  	call	HideUMBs		; Mark up the UM area as we see fit
 32056 0000306E E8CDFE                  	call	FreezeUM		; Hide everything BUT the load area
 32057 00003071 E85700                  	call	GetUMBForDev		; And grab that load area as needed
 32058 00003074 9C                      	pushf
 32059 00003075 E855FE                  	call	UnFreeze		; Then unhide everything frozen
 32060 00003078 9D                      	popf
 32061                                  	;jc	short InitForLo		; (if carry, it's loading low)
 32062                                  	;jmp	short InitForHi
 32063                                  	; 06/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 32064 00003079 EB0B                    	jmp	short idl0
 32065                                  
 32066                                  ;%endif ; 01/11/2022
 32067                                  
 32068                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32069                                  	; (SYSINIT:2B67h)
 32070                                  InitForConv:
 32071                                  	; 11/12/2022
 32072                                  	; ds = cs
 32073 0000307B E83700                  	call	SpaceInUMB		; Do we have space left in the
 32074                                  					;  current UMB ?
 32075 0000307E 7308                    	jnc	short InitForHi		; yes, we have
 32076 00003080 E85104                  	call	ShrinkUMB		; shrink the current UMB in use
 32077 00003083 E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 32078                                  idl0: ; 06/07/2023
 32079 00003086 720D                    	jc	short InitForLo		; we didn't succeed, so load
 32080                                  					;  in low memory
 32081                                  InitForHi:
 32082                                  	; 11/12/2022
 32083                                  	; ds = cs
 32084                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 32085                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 32086                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 32087 00003088 A1[BD1F]                	mov	ax,[DevUMBFree]
 32088 0000308B 8B16[B91F]              	mov	dx,[DevUMBAddr]
 32089 0000308F 0316[BB1F]              	add	dx,[DevUMBSize]
 32090 00003093 EB0C                    	jmp	short idl1
 32091                                  
 32092                                  InitForLo:
 32093                                  	; 11/12/2022
 32094                                  	; ds = cs
 32095                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 32096 00003095 C606[C71F]00            	mov	byte [DeviceHi],0
 32097                                  initforlo_x:
 32098                                  	; 11/12/2022
 32099                                  	; ds = cs
 32100                                  					;  into UMB indicate that
 32101                                  					;  we are loading low
 32102                                  	;mov	ax,[cs:memhi]		; AX = Start of Low memory
 32103                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 32104 0000309A A1[6203]                	mov	ax,[memhi]
 32105 0000309D 8B16[A302]              	mov	dx,[ALLOCLIM]
 32106                                  idl1:
 32107 000030A1 E86C00                  	call	DevSetMark		; setup a sub-arena for DD
 32108                                  	; 11/12/2022
 32109                                  	; ds = cs
 32110                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 32111                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 32112                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 32113                                  	;mov	[cs:DevEntry+2],ax
 32114 000030A4 A3[AB1F]                	mov	[DevLoadAddr],ax
 32115 000030A7 8916[AD1F]              	mov	[DevLoadEnd],dx
 32116 000030AB C706[AF1F]0000          	mov	word [DevEntry],0
 32117 000030B1 A3[B11F]                	mov	[DevEntry+2],ax
 32118                                  	; 01/01/2023
 32119                                  	;pop	es ; *
 32120 000030B4 C3                      	retn
 32121                                  
 32122                                  ;----------------------------------------------------------------------------
 32123                                  ;
 32124                                  ; procedure : SpaceInUMB?
 32125                                  ;
 32126                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 32127                                  ;	Output : Carry set if no space in UMB
 32128                                  ;		 Carry clear if Space is available for the device in
 32129                                  ;		   current UMB
 32130                                  ;
 32131                                  ;----------------------------------------------------------------------------
 32132                                  
 32133                                  SpaceInUMB:
 32134                                  	; 11/12/2022
 32135                                  	; ds = cs
 32136                                  	;mov	ax,[cs:DevUMBSize]
 32137                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 32138                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 32139 000030B5 A1[BB1F]                	mov	ax,[DevUMBSize]
 32140 000030B8 0306[B91F]              	add	ax,[DevUMBAddr]		; End of UMB
 32141 000030BC 2B06[BD1F]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 32142                                  	; 11/12/2022
 32143                                  	;or	ax,ax			; Nospace ?
 32144                                  	;jnz	short spcinumb1
 32145                                  	;stc
 32146                                  	;retn
 32147                                  	; 11/12/2022
 32148 000030C0 83F801                  	cmp	ax,1
 32149 000030C3 7205                    	jb	short spcinumb2	; cf=1
 32150                                  spcinumb1:
 32151 000030C5 48                      	dec	ax			; space for sub-arena
 32152                                  	; 11/12/2022
 32153                                  	; ds = cs
 32154 000030C6 3B06[A91F]              	cmp	ax,[DevSize]
 32155                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 32156                                  spcinumb2:
 32157 000030CA C3                      	retn
 32158                                  
 32159                                  ;----------------------------------------------------------------------------
 32160                                  ;
 32161                                  ; procedure : PrepareMark
 32162                                  ;
 32163                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 32164                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 32165                                  ;
 32166                                  ;----------------------------------------------------------------------------
 32167                                  
 32168                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32169                                  ;
 32170                                  ;PrepareMark:
 32171                                  ;	push	ds
 32172                                  ;	mov	ds,ax
 32173                                  ;	mov	word [ARENA.OWNER],8
 32174                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 32175                                  ;	pop	ds
 32176                                  ;
 32177                                  ;	inc	ax
 32178                                  ;	mov	[cs:DevUMBAddr],ax
 32179                                  ;	mov	[cs:DevUMBFree],ax
 32180                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 32181                                  ;	retn
 32182                                  
 32183                                  ;----------------------------------------------------------------------------
 32184                                  ;
 32185                                  ; procedure : GetUMBForDev
 32186                                  ;
 32187                                  ;	Input : DevSize
 32188                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 32189                                  ;		 the device.
 32190                                  ;		 If success carry clear
 32191                                  ;
 32192                                  ;	Allocates the biggest UMB for loading devices and updates
 32193                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 32194                                  ;	UMB.
 32195                                  ;
 32196                                  ;	This routine relies on the fact that all of the low memory
 32197                                  ;	is allocated, and any DOS alloc calls should return memory
 32198                                  ;	from the UMB pool.
 32199                                  ;
 32200                                  ;----------------------------------------------------------------------------
 32201                                  
 32202                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32203                                  	; (SYSINIT:2BC6h)
 32204                                  
 32205                                  GetUMBForDev:
 32206                                  	; 11/12/2022
 32207                                  	; ds = cs
 32208 000030CB BBFFFF                  	mov	bx,0FFFFh
 32209 000030CE B80048                  	mov	ax,4800h
 32210 000030D1 CD21                    	int	21h
 32211                                  		; DOS - 2+ - ALLOCATE MEMORY
 32212                                  		; BX = number of 16-byte paragraphs desired
 32213                                  
 32214 000030D3 09DB                    	or	bx,bx
 32215 000030D5 742C                    	jz	short gufd_err
 32216                                  
 32217 000030D7 4B                      	dec	bx
 32218                                  	; 11/12/2022
 32219                                  	; ds = cs
 32220 000030D8 391E[A91F]              	cmp	[DevSize],bx
 32221                                  	;cmp	[cs:DevSize],bx
 32222 000030DC 7725                    	ja	short gufd_err
 32223 000030DE 43                      	inc	bx
 32224                                  
 32225 000030DF B80048                  	mov	ax,4800h
 32226 000030E2 CD21                    	int	21h
 32227 000030E4 721D                    	jc	short gufd_err
 32228                                  
 32229                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32230                                  	;dec	ax
 32231                                  	;call	PrepareMark
 32232                                  	;
 32233                                  PrepareMark:
 32234 000030E6 1E                      	push	ds
 32235 000030E7 48                      	dec	ax
 32236 000030E8 8ED8                    	mov	ds,ax
 32237 000030EA C70601000800            	mov	word [ARENA.OWNER],8
 32238 000030F0 C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 32239 000030F6 40                      	inc	ax
 32240 000030F7 1F                      	pop	ds
 32241                                  	; 11/12/2022
 32242                                  	; ds = cs
 32243                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 32244                                  	;mov	[cs:DevUMBAddr],ax
 32245                                  	;mov	[cs:DevUMBFree],ax
 32246 000030F8 891E[BB1F]              	mov	[DevUMBSize],bx		; update the UMB Variables
 32247 000030FC A3[B91F]                	mov	[DevUMBAddr],ax
 32248 000030FF A3[BD1F]                	mov	[DevUMBFree],ax
 32249                                  	;
 32250                                  	; 11/12/2022
 32251                                  	; cf=0
 32252                                  	;clc				; mark no error
 32253 00003102 C3                      	retn
 32254                                  gufd_err:
 32255 00003103 31C0                    	xor	ax,ax ; 0
 32256                                  	; 11/12/2022
 32257                                  	; ds = cs
 32258                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 32259                                  	;mov	[cs:DevUMBAddr],ax
 32260                                  	;mov	[cs:DevUMBFree],ax
 32261 00003105 A3[BB1F]                	mov	[DevUMBSize],ax		; erase the previous values
 32262 00003108 A3[B91F]                	mov	[DevUMBAddr],ax
 32263 0000310B A3[BD1F]                	mov	[DevUMBFree],ax
 32264 0000310E F9                      	stc
 32265 0000310F C3                      	retn
 32266                                  
 32267                                  ;----------------------------------------------------------------------------
 32268                                  ;
 32269                                  ; procedure : DevSetMark
 32270                                  ;
 32271                                  ;	Input : AX - Free segment were device is going to be loaded
 32272                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 32273                                  ;
 32274                                  ;	Creates a sub-arena for the device driver
 32275                                  ;	puts 'D' marker in the sub-arena
 32276                                  ;	Put the owner of the sub-arena as (AX+1)
 32277                                  ;	Copies the file name into sub-arena name field
 32278                                  ;
 32279                                  ;	Size field of the sub-arena will be set only at succesful
 32280                                  ;	completion of Device load.
 32281                                  ;
 32282                                  ;----------------------------------------------------------------------------
 32283                                  
 32284                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32285                                  	; (SYSINIT:2C13h)
 32286                                  
 32287                                  DevSetMark:
 32288 00003110 06                      	push	es
 32289                                  	; 03/01/2023
 32290                                  	;push	di
 32291 00003111 1E                      	push	ds
 32292 00003112 56                      	push	si
 32293 00003113 8EC0                    	mov	es,ax
 32294 00003115 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 32295 0000311B 40                      	inc	ax
 32296 0000311C 26A30100                	mov	[es:devmark.seg],ax
 32297                                  
 32298                                  ;-------------- Copy file name
 32299                                  
 32300 00003120 50                      	push	ax			; save load address
 32301 00003121 2EC536[7A03]            	lds	si,[cs:bpb_addr]	; command line is still there
 32302                                  
 32303 00003126 89F7                    	mov	di,si
 32304 00003128 FC                      	cld
 32305                                  dsm_again:
 32306 00003129 AC                      	lodsb
 32307 0000312A 3C3A                    	cmp	al,':'
 32308 0000312C 7504                    	jne	short isit_slash
 32309 0000312E 89F7                    	mov	di,si
 32310 00003130 EBF7                    	jmp	short dsm_again
 32311                                  isit_slash:
 32312 00003132 3C5C                    	cmp	al,'\'
 32313 00003134 7504                    	jne	short isit_null
 32314 00003136 89F7                    	mov	di,si
 32315 00003138 EBEF                    	jmp	short dsm_again
 32316                                  isit_null:
 32317 0000313A 08C0                    	or	al,al
 32318 0000313C 75EB                    	jnz	short dsm_again
 32319 0000313E 89FE                    	mov	si,di
 32320                                  
 32321 00003140 BF0800                  	mov	di,devmark.filename ; 8
 32322 00003143 B90800                  	mov	cx,8			; maximum 8 characters
 32323                                  dsm_next_char:
 32324 00003146 AC                      	lodsb
 32325 00003147 08C0                    	or	al,al
 32326 00003149 7407                    	jz	short blankout
 32327 0000314B 3C2E                    	cmp	al,'.'
 32328 0000314D 7403                    	je	short blankout
 32329 0000314F AA                      	stosb
 32330 00003150 E2F4                    	loop	dsm_next_char
 32331                                  blankout:
 32332 00003152 E304                    	jcxz	dsm_exit
 32333 00003154 B020                    	mov	al,' '
 32334 00003156 F3AA                    	rep	stosb			; blank out the rest
 32335                                  dsm_exit:
 32336 00003158 58                      	pop	ax			; restore load address
 32337 00003159 5E                      	pop	si
 32338 0000315A 1F                      	pop	ds
 32339                                  	; 03/01/2023
 32340                                  	;pop	di
 32341 0000315B 07                      	pop	es
 32342 0000315C C3                      	retn
 32343                                  
 32344                                  ;----------------------------------------------------------------------------
 32345                                  ;
 32346                                  ; procedure : SizeDevice
 32347                                  ;
 32348                                  ;	Input : ES:SI - points to device file to be sized
 32349                                  ;
 32350                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 32351                                  ;
 32352                                  ;	Calculates the size of the device file in paras and stores it
 32353                                  ;	in DevSize
 32354                                  ;
 32355                                  ;----------------------------------------------------------------------------
 32356                                  
 32357                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32358                                  SizeDevice:
 32359                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32360                                  	; 11/12/2022 ; *
 32361 0000315D 1E                      	push	ds ; *
 32362 0000315E 06                      	push	es
 32363 0000315F 1F                      	pop	ds
 32364 00003160 89F2                    	mov	dx,si			; ds:dx -> file name
 32365 00003162 B8003D                  	mov	ax,3D00h		; open
 32366 00003165 CD21                    	int	21h
 32367 00003167 7237                    	jc	short sd_err		; open failed
 32368                                  
 32369 00003169 89C3                    	mov	bx,ax			; BX - file handle
 32370 0000316B B80242                  	mov	ax,4202h		; seek
 32371 0000316E 31C9                    	xor	cx,cx
 32372 00003170 89CA                    	mov	dx,cx			; to end of file
 32373 00003172 CD21                    	int	21h
 32374 00003174 7223                    	jc	short sd_close		; did seek fail (impossible)
 32375 00003176 83C00F                  	add	ax,15			; para convert
 32376 00003179 83D200                  	adc	dx,0
 32377 0000317C F7C2F0FF                	test	dx,0FFF0h		; size > 0ffffh paras ?
 32378                                  	;jz	short szdev1		; no
 32379                                  	; 22/07/2023
 32380 00003180 7409                    	jz	short sd_ctp
 32381 00003182 2EC706[A91F]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 32382                                  					; assuming that we fail later
 32383 00003189 EB0E                    	jmp	short sd_close
 32384                                  sd_ctp:	
 32385                                  	; 22/07/2023
 32386                                  ;szdev1:
 32387 0000318B B104                    	mov	cl,4			; convert it to paras
 32388 0000318D D3E8                    	shr	ax,cl
 32389 0000318F B10C                    	mov	cl,12
 32390 00003191 D3E2                    	shl	dx,cl
 32391 00003193 09D0                    	or	ax,dx ; * ; cf=0
 32392                                  	;
 32393                                  	; 22/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 32394                                  	; MSDOS 6.22 IO:SYS - SYSINIT:37A6h 
 32395                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32396                                  	;cmp	ax,[cs:DevSizeOption]
 32397                                  	;ja	short szdev2
 32398                                  	;mov	ax,[cs:DevSizeOption]
 32399                                  	; 12/12/2022
 32400                                  	;clc
 32401                                  ;szdev2:
 32402 00003195 2EA3[A91F]              	mov	[cs:DevSize],ax		; save file size (in paragraps)
 32403                                  	; 22/07/2023
 32404                                  	;clc ; cf=0 ; *	; CLC is not needed here
 32405                                  			; (OR instruction clears CF) - E.TAN 22/07/2023
 32406                                  
 32407                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32408                                  	; 12/12/2022
 32409                                  	; cf=0
 32410                                  	;clc
 32411                                  sd_close:
 32412 00003199 9C                      	pushf				; let close not spoil our
 32413                                  					;  carry flag
 32414 0000319A B8003E                  	mov	ax,3E00h		; close
 32415 0000319D CD21                    	int	21h			; we are not checking for err
 32416 0000319F 9D                      	popf
 32417                                  sd_err:
 32418                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32419                                  	; 11/12/2022 ; *
 32420 000031A0 1F                      	pop     ds ; *
 32421 000031A1 C3                      	retn
 32422                                  
 32423                                  ;----------------------------------------------------------------------------
 32424                                  ;
 32425                                  ; procedure : ExecDev
 32426                                  ;
 32427                                  ;	Input : ds:dx -> device to be executed
 32428                                  ;		DevLoadAddr - contains where device has to be loaded
 32429                                  ;
 32430                                  ;	Output : Carry if error
 32431                                  ;		 Carry clear if no error
 32432                                  ;
 32433                                  ;	Loads a device driver using the 4b03h function call
 32434                                  ;
 32435                                  ;----------------------------------------------------------------------------
 32436                                  
 32437                                  	; 01/11/2022
 32438                                  ExecDev:
 32439 000031A2 2E8B1E[AB1F]            	mov	bx,[cs:DevLoadAddr]
 32440 000031A7 2E891E[C31F]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 32441                                  					;  block for exec with
 32442                                  					;  load address
 32443 000031AC 2E891E[C51F]            	mov	[cs:DevExecReloc],bx
 32444 000031B1 8CCB                    	mov	bx,cs
 32445 000031B3 8EC3                    	mov	es,bx
 32446 000031B5 BB[C31F]                	mov	bx,DevExecAddr		; es:bx points to parameters
 32447                                  	;mov	al,3	; (load program only)
 32448                                  	;mov	ah,EXEC ; 4Bh
 32449                                  	; 04/07/2023
 32450 000031B8 B8034B                  	mov	ax,(EXEC<<8)|03h
 32451 000031BB CD21                    	int	21h			; load in the device driver
 32452                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 32453                                  		; DS:DX -> ASCIZ filename
 32454                                  		; ES:BX -> parameter block
 32455                                  		; AL = subfunction 
 32456 000031BD C3                      	retn
 32457                                  
 32458                                  ;----------------------------------------------------------------------------
 32459                                  ;
 32460                                  ; procedure : RetFromUM
 32461                                  ;
 32462                                  ;	Input : None
 32463                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 32464                                  ;		 ConvLoad clear if did.
 32465                                  ;
 32466                                  ;	Prepares memory for more devices after returning from loading one
 32467                                  ;	using the DOS 6 options (/L:... etc).
 32468                                  ;
 32469                                  ;----------------------------------------------------------------------------
 32470                                  
 32471                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32472                                  ;  (SYSINIT:37D1h)
 32473                                  
 32474                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32475                                  ;%if 0
 32476                                  RetFromUM:
 32477                                  	; 31/12/2022
 32478                                  	; ds = cs
 32479 000031BE 9C                      	pushf
 32480                                  	;mov	byte [cs:ConvLoad],1
 32481 000031BF C606[B71F]01            	mov	byte [ConvLoad],1
 32482 000031C4 E8E7FD                  	call	UnHideUMBs
 32483 000031C7 7205                    	jc	short rfUM1		; Skip this if didn't HideUMBs
 32484                                  	; 31/12/2022
 32485                                  	; ds = cs
 32486                                  	;mov	byte [cs:ConvLoad],0
 32487 000031C9 C606[B71F]00            	mov	byte [ConvLoad],0
 32488                                  rfUM1:	
 32489 000031CE 9D                      	popf
 32490 000031CF C3                      	retn
 32491                                  
 32492                                  ;%endif ; 01/11/2022
 32493                                  
 32494                                  ;----------------------------------------------------------------------------
 32495                                  ;
 32496                                  ; procedure : RemoveNull
 32497                                  ;
 32498                                  ;	Input : ES:SI points to a null terminated string
 32499                                  ;
 32500                                  ;	Output : none
 32501                                  ;
 32502                                  ;	Replaces the null at the end of a string with blank
 32503                                  ;
 32504                                  ;----------------------------------------------------------------------------
 32505                                  
 32506                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32507                                  	; (SYSINIT:2CCEh)
 32508                                  RemoveNull:
 32509                                  	; 11/12/2022
 32510                                  	; ds = cs
 32511                                  rn_next:
 32512 000031D0 268A1C                  	mov	bl,[es:si]
 32513 000031D3 08DB                    	or	bl,bl			; null ?
 32514 000031D5 7403                    	jz	short rn_gotnull
 32515 000031D7 46                      	inc	si			; advance the pointer
 32516 000031D8 EBF6                    	jmp	short rn_next
 32517                                  rn_gotnull:
 32518                                  	; 11/12/2022
 32519 000031DA 8A1E[DC1F]              	mov	bl,[DevSavedDelim]
 32520                                  	;mov	bl,[cs:DevSavedDelim]
 32521 000031DE 26881C                  	mov	[es:si],bl		; replace null with blank
 32522                                  	; 02/11/2022
 32523                                  ; 11/12/2022
 32524                                  rba_ok:		; 10/04/2019
 32525 000031E1 C3                      	retn
 32526                                  
 32527                                  ;----------------------------------------------------------------------------
 32528                                  ;
 32529                                  ; procedure : RoundBreakAddr
 32530                                  ;
 32531                                  ;	Input : DevBrkAddr
 32532                                  ;	Output : DevBrkAddr
 32533                                  ;
 32534                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 32535                                  ;
 32536                                  ;----------------------------------------------------------------------------
 32537                                  
 32538                                  RoundBreakAddr:
 32539 000031E2 2EA1[B31F]              	mov	ax,[cs:DevBrkAddr]
 32540 000031E6 E87FDF                  	call	ParaRound
 32541 000031E9 2E0106[B51F]            	add	[cs:DevBrkAddr+2],ax
 32542 000031EE 2EC706[B31F]0000        	mov	word [cs:DevBrkAddr],0
 32543 000031F5 2EA1[AD1F]              	mov	ax,[cs:DevLoadEnd]
 32544 000031F9 2E3906[B51F]            	cmp	[cs:DevBrkAddr+2],ax
 32545 000031FE 76E1                    	jbe	short rba_ok
 32546 00003200 E94311                  	jmp	mem_err
 32547                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32548                                  	; 11/12/2022
 32549                                  ;rba_ok:
 32550                                  ;	retn
 32551                                  
 32552                                  ;----------------------------------------------------------------------------
 32553                                  ;
 32554                                  ; procedure : DevSetBreak
 32555                                  ;
 32556                                  ;	Input : DevBrkAddr
 32557                                  ;	Output : Carry set if Device returned Init failed
 32558                                  ;		 Else carry clear
 32559                                  ;
 32560                                  ;----------------------------------------------------------------------------
 32561                                  
 32562                                  DevSetBreak:
 32563 00003203 50                      	push	ax
 32564                                  
 32565 00003204 2EA1[B51F]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 32566 00003208 2E803E[DF14]00          	cmp	byte [cs:multdeviceflag],0
 32567 0000320E 750F                    	jne	short set_break_continue ;do not check it.
 32568 00003210 2E3B06[AB1F]            	cmp	ax,[cs:DevLoadAddr]
 32569 00003215 7508                    	jne	short set_break_continue ;if not same, then o.k.
 32570                                  
 32571                                  	;cmp	word [cs:DevBrkAddr],0
 32572                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 32573                                  	; 12/12/2022
 32574 00003217 2E833E[B31F]01          	cmp	word [cs:DevBrkAddr],1
 32575 0000321D 7204                    	jb	short break_failed
 32576                                  
 32577                                  set_break_continue:
 32578 0000321F E8C0FF                  	call	RoundBreakAddr
 32579                                  	; 12/12/2022
 32580 00003222 F8                      	clc
 32581                                  break_failed:
 32582 00003223 58                      	pop	ax
 32583                                  	;clc
 32584 00003224 C3                      	retn
 32585                                  
 32586                                  	; 12/12/2022
 32587                                  ;break_failed:
 32588                                  	;pop	ax
 32589                                  	;stc
 32590                                  	;retn
 32591                                  
 32592                                  ;----------------------------------------------------------------------------
 32593                                  ;
 32594                                  ; procedure : DevBreak
 32595                                  ;
 32596                                  ;	Input : DevLoadAddr & DevBrkAddr
 32597                                  ;	Output : none
 32598                                  ;
 32599                                  ;	Marks a succesful install of a device driver
 32600                                  ;	Sets device size field in sub-arena &
 32601                                  ;	Updates Free ptr in UMB or adjusts memhi
 32602                                  ;
 32603                                  ;----------------------------------------------------------------------------
 32604                                  
 32605                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32606                                  DevBreak:
 32607                                  	;push	ds ; 11/12/2022
 32608                                  
 32609                                  	; 11/12/2022
 32610 00003225 0E                      	push	cs
 32611 00003226 1F                      	pop	ds
 32612                                  	;mov	ax,[cs:DevLoadAddr]
 32613                                  	;mov	bx,[cs:DevBrkAddr+2]
 32614 00003227 A1[AB1F]                	mov	ax,[DevLoadAddr]
 32615 0000322A 8B1E[B51F]              	mov	bx,[DevBrkAddr+2]
 32616                                  	; 11/12/2022
 32617 0000322E 1E                      	push	ds
 32618                                  
 32619 0000322F 48                      	dec	ax			; seg of sub-arena
 32620 00003230 8ED8                    	mov	ds,ax
 32621 00003232 40                      	inc	ax			; Back to Device segment
 32622 00003233 29D8                    	sub	ax,bx
 32623 00003235 F7D8                    	neg	ax			; size of device in paras
 32624 00003237 A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 32625                                  	
 32626                                  	; 11/12/2022
 32627 0000323A 1F                      	pop	ds
 32628                                  	; ds = cs
 32629                                   	
 32630 0000323B 803E[C71F]00            	cmp	byte [DeviceHi],0
 32631                                  	;cmp	byte [cs:DeviceHi],0
 32632 00003240 7405                    	je	short db_lo
 32633                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 32634                                  	;jmp	short db_exit
 32635                                  	; 11/12/2022
 32636 00003242 891E[BD1F]              	mov	[DevUMBFree],bx
 32637 00003246 C3                      	retn	
 32638                                  db_lo:
 32639                                  	; 11/12/2022
 32640                                  	; ds = cs
 32641                                  	;mov	[cs:memhi],bx
 32642                                  	;mov	word [cs:memlo],0
 32643 00003247 891E[6203]              	mov	[memhi],bx
 32644 0000324B C706[6003]0000          	mov	word [memlo],0 ; 18/12/2022
 32645                                  db_exit:
 32646                                  	;pop	ds ; 11/12/2022
 32647 00003251 C3                      	retn
 32648                                  
 32649                                  ; 10/04/2019 - Retro DOS v4.0
 32650                                  
 32651                                  ;----------------------------------------------------------------------------
 32652                                  ;
 32653                                  ; procedure : ParseSize
 32654                                  ;
 32655                                  ;	Parses the command line for SIZE= command
 32656                                  ;
 32657                                  ;	ES:SI = command line to parsed
 32658                                  ;
 32659                                  ;	returns ptr to command line after SIZE= option in ES:SI
 32660                                  ;	updates the DevSizeOption variable with value supplied
 32661                                  ;	in SIZE=option
 32662                                  ;	Returns carry if the SIZE option was invalid
 32663                                  ;
 32664                                  ;----------------------------------------------------------------------------
 32665                                  
 32666                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32667                                  	; (SYSINIT:2D5Ah)
 32668                                  ParseSize:
 32669                                  	;push	bx
 32670                                  	;mov	bx,si
 32671                                  
 32672                                  	; 11/12/2022
 32673                                  	; ds = cs
 32674                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 32675                                  	;mov	[cs:DevCmdLine],si
 32676                                  	;mov	[cs:DevCmdLine+2],es
 32677 00003252 C706[C81F]0000          	mov	word [DevSizeOption],0 ; init the value
 32678 00003258 8936[D81F]              	mov	[DevCmdLine],si
 32679 0000325C 8C06[DA1F]              	mov	[DevCmdLine+2],es	
 32680 00003260 E82900                  	call	SkipDelim
 32681 00003263 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 32682 00003268 7520                    	jne	short ps_no_size
 32683 0000326A 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 32684 00003270 7518                    	jne	short ps_no_size
 32685 00003272 268A4404                	mov	al,[es:si+4]
 32686 00003276 E83710                  	call	delim
 32687                                  	;jne	short ps_no_size
 32688                                  	; 22/07/2023
 32689 00003279 750E                    	jne	short ps_no_size_2 ; cf=0 here
 32690 0000327B 83C605                  	add	si,5
 32691 0000327E E81600                  	call	GetHexNum
 32692 00003281 7208                    	jc	short ps_err
 32693                                  	; 11/12/2022
 32694                                  	; ds = cs
 32695                                  	;mov	[cs:DevSizeOption],ax
 32696 00003283 A3[C81F]                	mov	[DevSizeOption],ax
 32697 00003286 E80300                  	call	SkipDelim
 32698                                  	; 22/07/2023
 32699                                  ps_no_size_2:
 32700                                  	; cf = 0
 32701 00003289 C3                      	retn
 32702                                  
 32703                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32704                                  	;mov	bx,si
 32705                                  ps_no_size:	
 32706                                  	;mov	si,bx
 32707                                  	;pop	bx
 32708 0000328A F8                      	clc	; cf=0
 32709                                  	;retn
 32710                                  	; 11/12/2022
 32711                                  ps_err:		; cf=1
 32712                                  sd_ret:		; cf=?
 32713 0000328B C3                      	retn
 32714                                  ;ps_err:
 32715                                  	; 02/11/2022
 32716                                  	;pop	bx
 32717                                  	;stc
 32718                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32719                                  	; 11/12/2022
 32720                                  	; cf=1
 32721                                  	;stc
 32722                                  	; 11/12/2022
 32723                                  ;sd_ret: 
 32724                                  	; 22/07/2023
 32725                                  	; 12/04/2019
 32726                                  	;retn
 32727                                  
 32728                                  ; 12/04/2019 - Retro DOS v4.0
 32729                                  
 32730                                  ;----------------------------------------------------------------------------
 32731                                  ;
 32732                                  ; procedure : SkipDelim
 32733                                  ;
 32734                                  ;	Skips delimiters in the string pointed to by ES:SI
 32735                                  ;	Returns ptr to first non-delimiter character in ES:SI
 32736                                  ;
 32737                                  ;----------------------------------------------------------------------------
 32738                                  	
 32739                                  	; 01/11/2022
 32740                                  SkipDelim:
 32741                                  sd_next_char:
 32742 0000328C 268A04                  	mov	al,[es:si]
 32743 0000328F E81E10                  	call	delim
 32744 00003292 75F7                    	jnz	short sd_ret
 32745 00003294 46                      	inc	si
 32746 00003295 EBF5                    	jmp	short sd_next_char ; 01/11/2022
 32747                                  	; 11/12/2022
 32748                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32749                                  ;sd_ret:
 32750                                  	;retn
 32751                                  
 32752                                  ;----------------------------------------------------------------------------
 32753                                  ;
 32754                                  ; procedure : GetHexNum
 32755                                  ;
 32756                                  ;	Converts an ascii string terminated by a delimiter into binary.
 32757                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 32758                                  ;
 32759                                  ;	Returns in AX the number of paras equivalent to the
 32760                                  ;	hex number of bytes specified by the hexadecimal string.
 32761                                  ;
 32762                                  ;	Returns carry in case it encountered a non-hex character or
 32763                                  ;	if it encountered crlf
 32764                                  ;
 32765                                  ;----------------------------------------------------------------------------
 32766                                  
 32767                                  ; 13/05/2019
 32768                                  
 32769                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32770                                  	; (SYSINIT:38C5h)
 32771                                  
 32772                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32773                                  	; (SYSINIT:2DA5h)
 32774                                  GetHexNum:
 32775 00003297 31C0                    	xor	ax,ax
 32776 00003299 31D2                    	xor	dx,dx
 32777                                  ghn_next:
 32778 0000329B 268A1C                  	mov	bl,[es:si]
 32779 0000329E 80FB0D                  	cmp	bl,cr  ; 0Dh
 32780 000032A1 7436                    	je	short ghn_err
 32781 000032A3 80FB0A                  	cmp	bl,lf  ; 0Ah
 32782 000032A6 7431                    	je	short ghn_err
 32783 000032A8 50                      	push	ax
 32784 000032A9 88D8                    	mov	al,bl
 32785 000032AB E80210                  	call	delim
 32786 000032AE 58                      	pop	ax
 32787                                  	; 03/01/2023
 32788 000032AF B90400                  	mov	cx, 4
 32789 000032B2 7410                    	jz	short ghn_into_paras
 32790 000032B4 E82400                  	call	GetNibble
 32791                                  	;jc	short ghn_err
 32792                                  	; 11/12/2022
 32793 000032B7 7221                    	jc	short ghn_ret ; cf=1
 32794                                  	; 03/01/2023
 32795                                  	;mov	cx,4
 32796                                  ghn_shift1:
 32797 000032B9 D1E0                    	shl	ax,1
 32798 000032BB D1D2                    	rcl	dx,1
 32799 000032BD E2FA                    	loop	ghn_shift1
 32800 000032BF 08D8                    	or	al,bl
 32801 000032C1 46                      	inc	si
 32802 000032C2 EBD7                    	jmp	short ghn_next
 32803                                  ghn_into_paras:
 32804 000032C4 83C00F                  	add	ax,15
 32805 000032C7 83D200                  	adc	dx,0
 32806 000032CA F7C2F0FF                	test	dx,0FFF0h
 32807 000032CE 7509                    	jnz	short ghn_err
 32808                                  	; 03/01/2023
 32809                                  	;mov	cx,4
 32810                                  ghn_shift2:
 32811 000032D0 F8                      	clc
 32812 000032D1 D1DA                    	rcr	dx,1
 32813 000032D3 D1D8                    	rcr	ax,1
 32814 000032D5 E2F9                    	loop	ghn_shift2
 32815 000032D7 F8                      	clc
 32816 000032D8 C3                      	retn
 32817                                  	; 11/12/2022
 32818                                  ghn_err:
 32819                                  gnib_err:
 32820 000032D9 F9                      	stc
 32821                                  ghn_ret:
 32822                                  gnib_ret:
 32823 000032DA C3                      	retn
 32824                                  
 32825                                  ;----------------------------------------------------------------------------
 32826                                  ;
 32827                                  ; procedure : GetNibble
 32828                                  ;
 32829                                  ;	Convert one nibble (hex digit) in BL into binary
 32830                                  ;
 32831                                  ;	Returns binary value in BL
 32832                                  ;
 32833                                  ;	Returns carry if BL contains non-hex digit
 32834                                  ;
 32835                                  ;----------------------------------------------------------------------------
 32836                                  
 32837                                  GetNibble:
 32838 000032DB 80FB30                  	cmp	bl,'0'
 32839                                  	;jb	short gnib_err
 32840                                  	; 11/12/2022
 32841 000032DE 72FA                    	jb	short gnib_ret ; cf=1
 32842 000032E0 80FB39                  	cmp	bl,'9'
 32843 000032E3 7704                    	ja	short is_it_hex
 32844 000032E5 80EB30                  	sub	bl,'0'		; clc
 32845 000032E8 C3                      	retn
 32846                                  is_it_hex:
 32847 000032E9 80FB41                  	cmp	bl,'A'
 32848                                  	;jb	short gnib_err
 32849                                  	; 11/12/2022
 32850 000032EC 72EC                    	jb	short gnib_ret ; cf=1
 32851 000032EE 80FB46                  	cmp	bl,'F'
 32852 000032F1 77E6                    	ja	short gnib_err ; 11/12/2022
 32853 000032F3 80EB37                  	sub	bl,'A'- 10	; clc
 32854 000032F6 C3                      	retn
 32855                                  	; 11/12/2022
 32856                                  ;gnib_err:
 32857                                  ;	stc
 32858                                  ;gnib_ret:
 32859                                  ;	retn
 32860                                  
 32861                                  ;============================================================================
 32862                                  
 32863                                  ; 12/04/2019 - Retro DOS v4.0
 32864                                  
 32865                                  ; umb.inc (MSDOS 6.0, 1991)
 32866                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 32867                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 32868                                  
 32869                                  XMM_REQUEST_UMB	equ 10h
 32870                                  XMM_RELEASE_UMB	equ 11h
 32871                                  
 32872                                  ;----------------------------------------------------------------------------
 32873                                  ;
 32874                                  ; procedure : AllocUMB
 32875                                  ;
 32876                                  ;	Allocate all UMBs and link it to DOS arena chain
 32877                                  ;
 32878                                  ;----------------------------------------------------------------------------
 32879                                  
 32880                                  AllocUMB:
 32881                                  	; 31/12/2022
 32882                                  	; ds = cs
 32883 000032F7 E81000                  	call	InitAllocUMB		; link in the first UMB
 32884 000032FA 720D                    	jc	short au_exit		; quit on error
 32885                                  au_next:
 32886 000032FC E83900                  	call	umb_allocate		; allocate
 32887 000032FF 7205                    	jc	short au_coalesce
 32888 00003301 E85000                  	call	umb_insert		; & insert till no UMBs
 32889 00003304 EBF6                    	jmp	short au_next
 32890                                  au_coalesce:
 32891 00003306 E80901                  	call	umb_coalesce		; coalesce all UMBs
 32892                                  au_exit:
 32893                                  	; 31/12/2022
 32894                                  	; ds = cs
 32895 00003309 C3                      	retn
 32896                                  
 32897                                  ;----------------------------------------------------------------------------
 32898                                  ;
 32899                                  ; procedure : InitAllocUMB
 32900                                  ;
 32901                                  ;----------------------------------------------------------------------------
 32902                                  
 32903                                  InitAllocUMB:
 32904                                  	; 31/12/2022
 32905                                  	; ds = cs
 32906 0000330A E8A8D7                  	call	IsXMSLoaded
 32907 0000330D 7527                    	jnz	short iau_err		; quit on no XMS driver
 32908 0000330F B452                    	mov	ah,52h
 32909 00003311 CD21                    	int	21h			; get DOS DATA seg
 32910                                  	; 31/12/2022
 32911                                  	; ds = cs
 32912                                  	;mov	[cs:DevDOSData],es	; & save it for later
 32913 00003313 8C06[D61F]              	mov	[DevDOSData],es		; & save it for later
 32914 00003317 B81043                  	mov	ax,4310h
 32915 0000331A CD2F                    	int	2Fh
 32916                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 32917                                  	;mov	[cs:DevXMSAddr+2],es
 32918 0000331C 891E[BF1F]              	mov	[DevXMSAddr],bx		; get XMS driver address
 32919 00003320 8C06[C11F]              	mov	[DevXMSAddr+2],es	
 32920                                  	; 31/12/2022
 32921 00003324 803E[D51F]00            	cmp	byte [FirstUMBLinked],0 
 32922                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 32923                                  	;jne	short ia_1		; quit if we already did it
 32924                                  	; 12/12/2022
 32925 00003329 770A                    	ja	short ia_1 ; cf=0
 32926 0000332B E83201                  	call	LinkFirstUMB		; else link the first UMB
 32927                                  	;jc	short iau_err
 32928                                  	; 12/12/2022
 32929 0000332E 7207                    	jc	short iau_err2  ; cf=1
 32930                                  	; 31/12/2022
 32931                                  	; ds = cs
 32932 00003330 C606[D51F]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 32933                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 32934                                  ia_1:
 32935                                  	; 12/12/2022
 32936                                  	; cf=0
 32937                                  	;clc
 32938 00003335 C3                      	retn
 32939                                  iau_err:
 32940 00003336 F9                      	stc
 32941                                  iau_err2:
 32942 00003337 C3                      	retn
 32943                                  
 32944                                  ;-------------------------------------------------------------------------
 32945                                  ;
 32946                                  ; Procedure Name	: umb_allocate
 32947                                  ;
 32948                                  ; Inputs		: DS = data
 32949                                  ;
 32950                                  ; Outputs		: if UMB available
 32951                                  ;				Allocates the largest available UMB and 
 32952                                  ;			  	BX = segment of allocated block
 32953                                  ;				DX = size of allocated block
 32954                                  ;				NC
 32955                                  ;			  else 
 32956                                  ;				CY
 32957                                  ;
 32958                                  ; Uses			: BX, DX
 32959                                  ;
 32960                                  ;-------------------------------------------------------------------------
 32961                                  
 32962                                  umb_allocate:
 32963                                  	; 31/12/2022
 32964                                  	; ds = cs
 32965 00003338 50                      	push	ax
 32966 00003339 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 32967 0000333B BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 32968                                  					;   possible
 32969                                  	; 31/12/2022
 32970 0000333E FF1E[BF1F]              	call	far [DevXMSAddr]
 32971                                  	;call	far [cs:DevXMSAddr]
 32972                                  					; dx now contains the size of
 32973                                  					; the largest UMB
 32974 00003342 09D2                    	or	dx,dx
 32975 00003344 740B                    	jz	short ua_err
 32976                                  	
 32977 00003346 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 32978                                  
 32979                                  	; 31/12/2022
 32980 00003348 FF1E[BF1F]              	call	far [DevXMSAddr]
 32981                                  	;call	far [cs:DevXMSAddr]
 32982                                  
 32983 0000334C 83F801                  	cmp	ax,1			; Q: was the reqst successful
 32984                                  	;jne	short ua_err		; N: error
 32985                                  	; 27/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 32986 0000334F 7601                    	jna	short ua_done ; if ax=1 then cf=0, else cf=1 (ax=0)
 32987                                  ua_err:
 32988 00003351 F9                      	stc	
 32989                                  
 32990                                  	;clc
 32991                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32992                                  	; 12/12/2022
 32993                                  	; cf=0
 32994                                  	;clc 
 32995                                  ua_done:
 32996 00003352 58                      	pop	ax
 32997 00003353 C3                      	retn
 32998                                  	; 27/07/2023
 32999                                  ;ua_err:
 33000                                  	;stc
 33001                                  	;jmp	short ua_done
 33002                                  
 33003                                  ;---------------------------------------------------------------------------
 33004                                  ;
 33005                                  ; Procedure Name	: umb_insert
 33006                                  ;
 33007                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 33008                                  ;			: BX = seg address of UMB to be linked in
 33009                                  ;			: DX = size of UMB to be linked in paras
 33010                                  ;			; DS = data
 33011                                  ;
 33012                                  ; Outputs		: links the UMB into the arena chain
 33013                                  ;
 33014                                  ; Uses			: AX, CX, ES, DX, BX
 33015                                  ;
 33016                                  ;---------------------------------------------------------------------------
 33017                                  
 33018                                  umb_insert:
 33019 00003354 1E                      	push	ds
 33020                                  
 33021                                  	; 31/12/2022
 33022                                  	; ds = cs
 33023                                  
 33024                                  	;mov	ds,[cs:DevDOSData]
 33025 00003355 8E1E[D61F]              	mov	ds,[DevDOSData] ; 31/12/2022 
 33026                                  	;mov	ds,[8Ch]
 33027 00003359 8E1E8C00                	mov	ds,[UMB_ARENA]		; ds = UMB_HEAD
 33028 0000335D 8CD8                    	mov	ax,ds
 33029 0000335F 8EC0                    	mov	es,ax
 33030                                  ui_next:
 33031 00003361 39D8                    	cmp	ax,bx			; Q: is current block above
 33032                                  					;    new block
 33033 00003363 770F                    	ja	short ui_insert		; Y: insert it
 33034                                  					; Q: is current block the
 33035                                  					;    last
 33036 00003365 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 33037 0000336B 745C                    	je	short ui_append		; Y: append new block to chain
 33038                                  					; N: get next block
 33039 0000336D 8ED8                    	mov	ds,ax			; M005
 33040                                  	;call	get_next		; ax = es = next block
 33041 0000336F E8E200                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 33042 00003372 EBED                    	jmp	short ui_next
 33043                                  
 33044                                  ui_insert:
 33045 00003374 8CD9                    	mov	cx,ds			; ds = previous arena
 33046 00003376 41                      	inc	cx			; top of previous block
 33047                                  
 33048 00003377 29D9                    	sub	cx,bx
 33049 00003379 F7D9                    	neg	cx			; cx = size of used block
 33050                                  	;mov	byte [0],'M'
 33051 0000337B C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 33052                                  	;mov	word [1],8
 33053 00003380 C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 33054                                  	;mov	[3],cx
 33055 00003386 890E0300                	mov	[ARENA.SIZE],cx	
 33056                                  	;mov	word [8],4353h ; 'SC'
 33057 0000338A C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 33058                                  
 33059                                  ; prepare the arena at start of new block
 33060                                  
 33061 00003390 8EC3                    	mov	es,bx
 33062 00003392 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 33063 00003398 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 33064                                  					; mark as free
 33065 0000339F 83EA02                  	sub	dx,2			; make room for arena at
 33066                                  					; start & end of new block
 33067 000033A2 2689160300              	mov	[es:ARENA.SIZE],dx
 33068                                  
 33069                                  ; prepare arena at end of new block
 33070                                  	
 33071 000033A7 01D3                    	add	bx,dx
 33072 000033A9 43                      	inc	bx
 33073 000033AA 8EC3                    	mov	es,bx			; es=arena at top of new block
 33074 000033AC 43                      	inc	bx			; bx=top of new block
 33075                                  
 33076                                  					; ax contains arena just above
 33077                                  					; this block
 33078 000033AD 29D8                    	sub	ax,bx			; ax = size of used block
 33079                                  	
 33080 000033AF 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 33081 000033B5 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 33082 000033BC 26A30300                	mov	[es:ARENA.SIZE],ax	
 33083 000033C0 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 33084                                  
 33085 000033C7 EB47                    	jmp	short ui_done
 33086                                  
 33087                                  ui_append:
 33088                                  					; es = arena of last block	
 33089 000033C9 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 33090 000033CE 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 33091                                  					; going to rsrv on top of this 
 33092                                  					; block for the next arena.
 33093                                  	; 13/05/2019
 33094 000033D4 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 33095                                  
 33096 000033DA 89C1                    	mov	cx,ax			; cx=top of prev block-1
 33097 000033DC 40                      	inc	ax
 33098 000033DD 29D8                    	sub	ax,bx			; ax=top of prev block - 
 33099                                  					;    seg. address of new block
 33100 000033DF F7D8                    	neg	ax
 33101                                  
 33102 000033E1 8EC1                    	mov	es,cx			; es = arena of unused block
 33103                                  
 33104 000033E3 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 33105 000033E9 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 33106 000033F0 26A30300                	mov	[es:ARENA.SIZE],ax	
 33107 000033F4 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 33108                                  
 33109                                  ; prepare the arena at start of new block
 33110 000033FB 8EC3                    	mov	es,bx
 33111 000033FD 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 33112 00003403 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 33113                                  					; mark as free
 33114 0000340A 4A                      	dec	dx			; make room for arena
 33115 0000340B 2689160300              	mov	[es:ARENA.SIZE],dx	
 33116                                  ui_done:
 33117                                  uc_done: ; 31/12/2022 ; *!
 33118 00003410 1F                      	pop	ds
 33119                                  	; ds = cs ; 31/12/2022
 33120                                  ;uc_done:	; 18/12/2022
 33121 00003411 C3                      	retn
 33122                                  
 33123                                  ; 13/04/2019 - Retro DOS v4.0
 33124                                  
 33125                                  ;----------------------------------------------------------------------------
 33126                                  ;
 33127                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 33128                                  ;
 33129                                  ;	Coalesce adds the block following the argument to the argument block,
 33130                                  ;	if it's free.  Coalesce is usually used to join free blocks, but
 33131                                  ;	some callers (such as $setblock) use it to join a free block to it's
 33132                                  ;	preceeding allocated block.
 33133                                  ;
 33134                                  ;	EXIT	'C' clear if OK
 33135                                  ;		  (ds) unchanged, this block updated
 33136                                  ;		  (ax) = address of next block, IF not at end
 33137                                  ;		'C' set if arena trashed
 33138                                  ;	USES	cx, di, ds, es
 33139                                  ;
 33140                                  ;----------------------------------------------------------------------------
 33141                                  
 33142                                  umb_coalesce:
 33143                                  	; 31/12/2022
 33144                                  	; ds = cs
 33145 00003412 1E                      	push	ds ; *!
 33146                                  
 33147 00003413 31FF                    	xor	di, di
 33148                                  
 33149                                  	;mov	es,[cs:DevDOSData]
 33150                                  	; 31/12/2022
 33151 00003415 8E06[D61F]              	mov	es,[DevDOSData]
 33152 00003419 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 33153                                  uc_nextfree:
 33154 0000341E 8CC0                    	mov	ax,es
 33155 00003420 8ED8                    	mov	ds,ax
 33156                                  	;cmp	[es:1],di
 33157 00003422 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 33158 00003427 7407                    	je	short uc_again		; Y: try to coalesce with next block
 33159                                  					; N: get next arena
 33160 00003429 E82100                  	call	get_next		; es, ax = next arena
 33161 0000342C 72E2                    	jc	short uc_done	; *!
 33162 0000342E EBEE                    	jmp	short uc_nextfree
 33163                                  uc_again:
 33164 00003430 E81A00                  	call	get_next		; es, ax = next arena
 33165 00003433 72DB                    	jc	short uc_done	; *!
 33166                                  uc_check:
 33167 00003435 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 33168 0000343A 75E2                    	jne	short uc_nextfree	; N: get next free arena
 33169                                  					; Y: coalesce
 33170 0000343C 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 33171 00003441 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 33172                                  	;add	[3],cx
 33173 00003442 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 33174 00003446 268A0D                  	mov     cl,[es:di]              ; move up signature
 33175 00003449 880D                    	mov     [di],cl
 33176 0000344B EBE3                    	jmp     short uc_again		; try again
 33177                                  
 33178                                  	; 18/12/2022
 33179                                  ;uc_done:
 33180                                  	;retn
 33181                                  
 33182                                  ;----------------------------------------------------------------------------
 33183                                  ;
 33184                                  ;**	get_next - Find Next item in Arena
 33185                                  ;
 33186                                  ;	ENTRY	dS - pointer to block head
 33187                                  ;	EXIT	AX,ES - pointers to next head
 33188                                  ;		'C' set if arena damaged
 33189                                  ;
 33190                                  ;----------------------------------------------------------------------------
 33191                                  
 33192                                  	; 01/11/2022
 33193                                  get_next:
 33194 0000344D 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 33195 00003452 740A                    	je	short gn_err
 33196                                  _get_next_:
 33197 00003454 8CD8                    	mov     ax,ds                   ; ax=current block
 33198 00003456 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 33199 0000345A 40                      	inc     ax                      ; remember that header!
 33200 0000345B 8EC0                    	mov	es,ax
 33201                                  	;clc
 33202                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33203                                  	; 11/12/2022
 33204                                  	; cf=0
 33205                                  	;clc
 33206 0000345D C3                      	retn
 33207                                  gn_err:
 33208 0000345E F9                      	stc
 33209                                  	; 11/12/2022	
 33210                                  lfu_err:	 ; cf=1
 33211 0000345F C3                      	retn
 33212                                  
 33213                                  ;----------------------------------------------------------------------------
 33214                                  ;
 33215                                  ; procedure : LinkFirstUMB
 33216                                  ;
 33217                                  ;----------------------------------------------------------------------------
 33218                                  
 33219                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33220                                  	; (SYSINIT:2F81h)
 33221                                  LinkFirstUMB:
 33222                                  	; 31/12/2022
 33223                                  	; ds = cs
 33224 00003460 E8D5FE                  	call	umb_allocate
 33225 00003463 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 33226                                  
 33227                                  ; bx = segment of allocated UMB
 33228                                  ; dx = size of UMB
 33229                                  
 33230                                  	; 31/12/2022
 33231                                  	; ds = cs
 33232                                  
 33233 00003465 CD12                    	int	12h			; ax = size of memory
 33234 00003467 B106                    	mov	cl,6
 33235 00003469 D3E0                    	shl	ax,cl			; ax = size in paragraphs
 33236                                  
 33237 0000346B 89C1                    	mov	cx,ax			; cx = size in paras
 33238 0000346D 29D8                    	sub	ax,bx			; ax = - size of unused block
 33239                                  
 33240 0000346F F7D8                    	neg	ax
 33241                                  
 33242 00003471 83E901                  	sub	cx,1			; cx = first umb_arena
 33243 00003474 8EC1                    	mov	es,cx			; es = first umb_arena
 33244                                  	
 33245 00003476 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 33246 0000347C 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 33247                                  					
 33248 00003483 26A30300                	mov	[es:ARENA.SIZE],ax	
 33249 00003487 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 33250                                  
 33251                                  ; put in the arena for the first UMB
 33252                                  
 33253 0000348E 8EC3                    	mov	es,bx			; es has first free umb seg
 33254 00003490 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 33255 00003496 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 33256                                  					; mark as free 
 33257 0000349D 4A                      	dec	dx			; make room for arena
 33258 0000349E 2689160300              	mov	[es:ARENA.SIZE],dx	
 33259                                  
 33260                                  	;mov	es,[cs:DevDOSData]
 33261                                  	; 31/12/2022
 33262 000034A3 8E06[D61F]              	mov	es,[DevDOSData] ; ds = cs
 33263 000034A7 BF8C00                  	mov	di,UMB_ARENA ; 8Ch
 33264 000034AA 26890D                  	mov	[es:di],cx		; initialize umb_head in DOS
 33265                                  					;  data segment with the arena
 33266                                  					;  just below Top of Mem
 33267                                  
 33268                                  ; we must now scan the arena chain and update the size of the last arena
 33269                                  
 33270 000034AD BF2400                  	mov	di,DOS_ARENA ; 24h
 33271 000034B0 268E05                  	mov	es,[es:di]		; es = start arena
 33272 000034B3 31FF                    	xor	di,di
 33273                                  ;scan_next
 33274                                  ; 09/12/2022
 33275                                  scannext:
 33276 000034B5 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 33277 000034B9 740C                    	je	short got_last
 33278                                  	
 33279 000034BB 8CC0                    	mov	ax,es
 33280 000034BD 2603060300              	add	ax,[es:ARENA.SIZE]
 33281 000034C2 40                      	inc	ax
 33282 000034C3 8EC0                    	mov	es,ax
 33283                                  	;jmp	short scan_next
 33284                                  	; 09/12/2022
 33285 000034C5 EBEE                    	jmp	short scannext
 33286                                  got_last:
 33287 000034C7 26832E030001            	sub	word [es:ARENA.SIZE],1
 33288 000034CD 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 33289                                  	;clc
 33290                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33291                                  	; 11/12/2022
 33292                                  	; cf=0
 33293                                  	;clc
 33294 000034D3 C3                      	retn
 33295                                  
 33296                                  ; 11/12/2022
 33297                                  ;;lfu_err:
 33298                                  ;	;stc
 33299                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33300                                  ;	; 11/12/2022
 33301                                  ;	; cf=1
 33302                                  ;	;stc
 33303                                  ;	retn
 33304                                  
 33305                                  ;----------------------------------------------------------------------------
 33306                                  ;
 33307                                  ; procedure : ShrinkUMB
 33308                                  ;
 33309                                  ;	Shrinks the current UMB in use, so that the unused portions
 33310                                  ;	of the UMB is given back to the DOS free mem pool
 33311                                  ;
 33312                                  ;----------------------------------------------------------------------------
 33313                                  
 33314                                  ShrinkUMB:
 33315                                  	; 12/12/2022
 33316                                  	; ds = cs
 33317 000034D4 833E[B91F]00            	cmp	word [DevUMBAddr],0
 33318                                  	;cmp	word [cs:DevUMBAddr],0
 33319 000034D9 741F                    	je	short su_exit
 33320 000034DB 06                      	push	es
 33321                                  	; 01/01/2023
 33322                                  	;push	bx
 33323                                  	; 12/12/2022
 33324                                  	;mov	bx,[cs:DevUMBFree]
 33325                                  	;sub	bx,[cs:DevUMBAddr]
 33326                                  	;mov	es,[cs:DevUMBAddr]
 33327 000034DC 8B1E[BD1F]              	mov	bx,[DevUMBFree]
 33328 000034E0 2B1E[B91F]              	sub	bx,[DevUMBAddr]
 33329 000034E4 8E06[B91F]              	mov	es,[DevUMBAddr]
 33330                                  	
 33331 000034E8 B8004A                  	mov	ax,4A00h
 33332 000034EB CD21                    	int	21h
 33333                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 33334                                  		; ES = segment address of block to change
 33335                                  		; BX = new size in paragraphs
 33336 000034ED 8CC0                    	mov	ax,es
 33337 000034EF 48                      	dec	ax
 33338 000034F0 8EC0                    	mov	es,ax
 33339 000034F2 26C70601000800          	mov	word [es:ARENA.OWNER],8
 33340                                  	; 01/01/2023
 33341                                  	;pop	bx
 33342 000034F9 07                      	pop	es
 33343                                  su_exit:
 33344 000034FA C3                      	retn
 33345                                  
 33346                                  ;----------------------------------------------------------------------------
 33347                                  ;
 33348                                  ; procedure : UnlinkUMB
 33349                                  ;
 33350                                  ;	Unlinks the UMBs from the DOS arena chain
 33351                                  ;
 33352                                  ;----------------------------------------------------------------------------
 33353                                  
 33354                                  UnlinkUMB:
 33355                                  	; 12/12/2022
 33356                                  	; ds = cs
 33357 000034FB 1E                      	push	ds
 33358 000034FC 06                      	push	es
 33359                                  	; 12/12/2022
 33360 000034FD 803E[D51F]00            	cmp	byte [FirstUMBLinked],0
 33361                                  	;cmp	byte [cs:FirstUMBLinked],0
 33362 00003502 7420                    	je	short ulu_x		; nothing to unlink
 33363                                  	; 12/12/2022
 33364 00003504 8E06[D61F]              	mov	es,[DevDOSData]
 33365                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 33366 00003508 268E1E2400              	mov	ds,[es:DOS_ARENA]
 33367 0000350D 268B3E8C00              	mov	di,[es:UMB_ARENA]
 33368                                  ulu_next:
 33369 00003512 E838FF                  	call	get_next
 33370 00003515 720D                    	jc	short ulu_x
 33371 00003517 39C7                    	cmp	di,ax			; is the next one UMB ?
 33372 00003519 7404                    	je	short ulu_found
 33373 0000351B 8ED8                    	mov	ds,ax
 33374 0000351D EBF3                    	jmp	short ulu_next
 33375                                  ulu_found:
 33376                                  	;mov	byte [0],'Z'
 33377 0000351F C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 33378                                  ulu_x:
 33379 00003524 07                      	pop	es
 33380 00003525 1F                      	pop	ds
 33381 00003526 C3                      	retn
 33382                                  
 33383                                  ; ----------------------------------------------------------------------
 33384                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 33385                                  ; ----------------------------------------------------------------------
 33386                                  ; 14/04/2019 - Retro DOS v4.0
 33387                                  
 33388                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 33389                                  ;
 33390                                  ; Summary:
 33391                                  ;
 33392                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 33393                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 33394                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 33395                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 33396                                  ;   and/or config.inc for the full list.
 33397                                  ;
 33398                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 33399                                  ;   configuration support. blockname is either MENU, which contains one
 33400                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 33401                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 33402                                  ;   INCLUDE allows the current block to name another block for inclusion
 33403                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 33404                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 33405                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 33406                                  ;
 33407                                  ; Example:
 33408                                  ;
 33409                                  ;   [menu]
 33410                                  ;   menuitem=misc,Miscellaneous
 33411                                  ;   menuitem=network,Network Configuration
 33412                                  ;   menudefault=network,15
 33413                                  ;
 33414                                  ;   [network]
 33415                                  ;   include misc
 33416                                  ;   device=foo
 33417                                  ;
 33418                                  ;   [misc]
 33419                                  ;   device=bar
 33420                                  ;   include alternate
 33421                                  ;
 33422                                  ;   [alternate]
 33423                                  ;   device=tar
 33424                                  ;
 33425                                  ;
 33426                                  ;   When the menu is displayed
 33427                                  ;
 33428                                  ;    1. Miscellaneous
 33429                                  ;    2. Network Configuration
 33430                                  ;
 33431                                  ;   #2 is highlighted as the default option, and will be automatically
 33432                                  ;   selected after 15 seconds. It will invoke the following lines in the
 33433                                  ;   following order:
 33434                                  ;
 33435                                  ;       DEVICE=BAR
 33436                                  ;       DEVICE=TAR
 33437                                  ;       DEVICE=FOO
 33438                                  ;
 33439                                  
 33440                                  ;MULTI_CONFIG equ 1
 33441                                  
 33442                                  ; the following depend on the positions of the various letters in switchlist
 33443                                  
 33444                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 33445                                  
 33446                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 33447                                  flagdrive	equ 00001000b ; 8 
 33448                                  flagcyln	equ 00010000b ; 16
 33449                                  flagseclim	equ 00100000b ; 32
 33450                                  flagheads	equ 01000000b ; 64
 33451                                  flagff		equ 10000000b ; 128
 33452                                  
 33453                                  ;----------------------------------------------------------------------------
 33454                                  ; 19/04/2019 - Retro DOS v4.0
 33455                                  
 33456                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 33457                                  
 33458                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33459                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 33460                                  
 33461 00003527 00                      insert_blank:	db 	0
 33462                                  
 33463                                  ;----------------------------------------------------------------------------
 33464                                  ;
 33465                                  ; procedure : setparms
 33466                                  ;
 33467                                  ; the following set of routines is used to parse the drivparm = command in
 33468                                  ; the config.sys file to change the default drive parameters.
 33469                                  ;
 33470                                  ;----------------------------------------------------------------------------
 33471                                  
 33472                                  setparms:
 33473 00003528 1E                      	push	ds
 33474 00003529 50                      	push	ax
 33475 0000352A 53                      	push	bx
 33476 0000352B 51                      	push	cx
 33477 0000352C 52                      	push	dx
 33478                                  
 33479 0000352D 0E                      	push	cs
 33480 0000352E 1F                      	pop	ds
 33481                                  
 33482 0000352F 31DB                    	xor	bx,bx
 33483 00003531 8A1E[024A]              	mov	bl,[drive]
 33484                                  	; 18/12/2022
 33485 00003535 43                      	inc	bx
 33486                                  	;inc	bl			; get it correct for ioctl call
 33487                                  					; (1=a,2=b...)
 33488 00003536 BA[DA48]                	mov	dx,deviceparameters
 33489                                  	;mov	ah,IOCTL ; 44h
 33490                                  	;mov	al,GENERIC_IOCTL ; 0Dh
 33491                                  	; 04/07/2023
 33492 00003539 B80D44                  	mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 33493                                  	;mov	ch,RAWIO ; 8
 33494                                  	;mov	cl,SET_DEVICE_PARAMETERS ; 40h
 33495                                  	; 04/07/2023
 33496 0000353C B94008                  	mov	cx,(RAWIO<<8)|SET_DEVICE_PARAMETERS 
 33497 0000353F CD21                    	int	21h
 33498                                  
 33499                                  ; 27/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 33500 00003541 8A26[034A]              	mov	ah,[switches]
 33501                                  	;mov	al,[deviceparameters+20]
 33502 00003545 A0[EE48]                	mov	al,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 33503 00003548 8A0E[024A]              	mov	cl,[drive]
 33504                                  ;
 33505                                  ;; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33506                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 33507                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 33508                                  ;	; 21/10/2022
 33509                                  ;	;mov	ax,DOSBIODATASEG ; 0070h	
 33510                                  ;	;mov	ds,ax			; set Bios_Data segment
 33511                                  ;
 33512                                  ;	; 27/07/2023
 33513                                  ;	;;test	word [cs:switches],flagec35 ; 4
 33514                                  ;	;test	byte [cs:switches],flagec35
 33515                                  ;	;jz	short not_ec35
 33516                                  ;
 33517                                  ;	; 27/07/2023
 33518                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33519                                  ;	;;test	word [switches],flagec35 ; 4
 33520                                  ;	; 12/12/2022
 33521                                  ;	;test	byte [switches],flagec35 ; 4
 33522                                  ;	;jz	short eot_ok
 33523                                  ;	
 33524                                  	;mov	cl,[cs:drive]		; which drive was this for?
 33525                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33526                                  	;mov	cl,[drive]
 33527                                  	; 27/07/2023
 33528                                  	;mov	ax,DOSBIODATASEG ; 0070h	
 33529                                  	;mov	ds,ax
 33530                                  
 33531 0000354C BA7000                  	mov	dx,DOSBIODATASEG
 33532 0000354F 8EDA                    	mov	ds,dx
 33533                                  
 33534 00003551 F6C404                  	test	ah,flagec35	; test byte [cs:switches],flagec35
 33535 00003554 7408                    	jz	short not_ec35
 33536                                  
 33537                                  	;mov	al,1			; assume drive 0
 33538                                  	;shl	al,cl			; set proper bit depending on drive
 33539                                  	;;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 33540                                  	;or	[ec35_flag],al		; set the bit in the permanent flags
 33541                                  	; 27/07/2023
 33542 00003556 B401                    	mov	ah,1
 33543 00003558 D2E4                    	shl	ah,cl
 33544 0000355A 0826[2905]              	or	[ec35_flag],ah
 33545                                  
 33546                                  ; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 33547                                  ;	MSDOS 6.21 IO.SYS - SYINIT:3EB0h	
 33548                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33549                                  not_ec35:
 33550                                  ;	Now adjust the BIOS's EOT variable if our new drive has more
 33551                                  ;	sectors per track than any old ones.
 33552                                  
 33553                                  	; 27/07/2023
 33554                                  	;;mov	al,[cs:deviceparameters+20]
 33555                                  	;mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 33556                                  	
 33557                                  	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 33558 0000355E 3A06[2C01]              	cmp	al,[eot]
 33559 00003562 7603                    	jbe	short eot_ok
 33560 00003564 A2[2C01]                	mov	[eot],al
 33561                                  eot_ok:
 33562 00003567 5A                      	pop	dx			; fix up all the registers
 33563 00003568 59                      	pop	cx
 33564 00003569 5B                      	pop	bx
 33565 0000356A 58                      	pop	ax
 33566 0000356B 1F                      	pop	ds ; 13/05/2019
 33567 0000356C C3                      	retn
 33568                                  
 33569                                  ;----------------------------------------------------------------------------
 33570                                  ;
 33571                                  ; procedure : diddleback
 33572                                  ;
 33573                                  ; replace default values for further drivparm commands
 33574                                  ;
 33575                                  ;----------------------------------------------------------------------------
 33576                                  
 33577                                  diddleback:
 33578 0000356D 1E                      	push	ds
 33579 0000356E 0E                      	push	cs
 33580 0000356F 1F                      	pop	ds
 33581                                  	;mov	word [deviceparameters+4],80
 33582 00003570 C706[DE48]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 33583                                  	;mov	byte [deviceparameters+1],2
 33584 00003576 C606[DB48]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 33585                                  	;mov	word [deviceparameters+2],0
 33586 0000357B C706[DC48]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 33587 00003581 C706[034A]0000          	mov	word [switches],0	    ; zero all switches
 33588 00003587 1F                      	pop	ds
 33589 00003588 C3                      	retn
 33590                                  
 33591                                  
 33592                                  ; 03/01/2023
 33593                                  %if 0
 33594                                  
 33595                                  ; 15/04/2019 - Retro DOS v4.0
 33596                                  
 33597                                  ;----------------------------------------------------------------------------
 33598                                  ;
 33599                                  ; procedure : parseline
 33600                                  ;
 33601                                  ; entry point is parseline. al contains the first character in command line.
 33602                                  ;
 33603                                  ;----------------------------------------------------------------------------
 33604                                  
 33605                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 33606                                  	; (SYSINIT:3EDFh)
 33607                                  
 33608                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33609                                  	; (SYSINIT:30ACh)
 33610                                  parseline:
 33611                                  	; 03/01/2023
 33612                                  	; ds = cs ; *
 33613                                  
 33614                                  	;push	ds ; *
 33615                                  
 33616                                  	;push	cs ; *
 33617                                  	;pop	ds ; *
 33618                                  
 33619                                  nextswtch:
 33620                                  	cmp	al,cr			; carriage return?
 33621                                  	je	short done_line
 33622                                  	cmp	al,lf			; linefeed?
 33623                                  	je	short put_back		; put it back and done
 33624                                  
 33625                                  ; anything less or equal to a space is ignored.
 33626                                  
 33627                                  	cmp	al,' '                  ; space?
 33628                                  	jbe	short getnext		; skip over space
 33629                                  	cmp	al,'/'
 33630                                  	je	short getparm
 33631                                  	stc				; mark error invalid-character-in-input
 33632                                  	;jmp	short exitpl
 33633                                  	; 03/01/2023
 33634                                  swterr:
 33635                                  	retn
 33636                                  
 33637                                  getparm:
 33638                                  	call	check_switch
 33639                                  	mov	[switches],bx		; save switches read so far
 33640                                  	jc	short swterr
 33641                                  getnext:
 33642                                  	call	getchr
 33643                                  	;jc	short done_line
 33644                                  	;jmp	short nextswtch
 33645                                  	; 03/01/2023
 33646                                  	jnc	short nextswtch
 33647                                  ;swterr:
 33648                                  	;jmp	short exitpl		; exit if error
 33649                                  
 33650                                  done_line:
 33651                                  	; 12/12/2022
 33652                                  	test	byte [switches],flagdrive ; 8
 33653                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 33654                                  	jnz	short okay
 33655                                  	stc				; mark error no-drive-specified
 33656                                  	;jmp	short exitpl
 33657                                  	; 03/01/2023
 33658                                  	retn
 33659                                  
 33660                                  okay:
 33661                                  	mov	ax,[switches]
 33662                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 33663                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 33664                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 33665                                  	;clc			    ; everything is fine
 33666                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33667                                  	; 12/12/2022
 33668                                  	; cf=0
 33669                                  	;clc
 33670                                  	;call	setdeviceparameters
 33671                                  	; 03/01/2023
 33672                                  	jmp	setdeviceparameters
 33673                                  ;exitpl:
 33674                                  	; 03/01/2023
 33675                                  	; ds = cs
 33676                                  	;pop	ds ; *
 33677                                  	retn
 33678                                  put_back:
 33679                                  	inc	word [count]		; one more char to scan
 33680                                  	dec	word [chrptr]		; back up over linefeed
 33681                                  	jmp	short done_line
 33682                                  
 33683                                  %endif
 33684                                  
 33685                                  ;----------------------------------------------------------------------------
 33686                                  ;
 33687                                  ; procedure : check_switch
 33688                                  ;
 33689                                  ; processes a switch in the input. it ensures that the switch is valid, and
 33690                                  ; gets the number, if any required, following the switch. the switch and the
 33691                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 33692                                  ; error.
 33693                                  ;
 33694                                  ;----------------------------------------------------------------------------
 33695                                  
 33696                                  check_switch:
 33697 00003589 E805F4                  	call	getchr
 33698                                  	;jc	short err_check
 33699 0000358C 724E                    	jc	short err_chk
 33700 0000358E 24DF                            and     al,0DFh                 ; convert it to upper case
 33701 00003590 3C41                    	cmp	al,'A'
 33702                                  	;jb	short err_check
 33703 00003592 7248                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 33704 00003594 3C5A                    	cmp	al,'Z'
 33705 00003596 7743                    	ja	short err_check
 33706                                  
 33707 00003598 06                      	push	es
 33708                                  
 33709 00003599 0E                      	push	cs
 33710 0000359A 07                      	pop	es
 33711                                  
 33712 0000359B 8A0E[964A]              	mov	cl,[switchlist]		; get number of valid switches
 33713 0000359F B500                    	mov	ch,0
 33714 000035A1 BF[974A]                	mov	di,1+switchlist		; point to string of valid switches
 33715 000035A4 F2AE                    	repne	scasb
 33716                                  
 33717 000035A6 07                      	pop	es
 33718 000035A7 7532                    	jnz	short err_check
 33719                                  
 33720 000035A9 B80100                  	mov	ax,1
 33721 000035AC D3E0                    	shl	ax,cl			; set bit to indicate switch
 33722 000035AE 8B1E[034A]              	mov	bx,[switches]		; get switches so far
 33723 000035B2 09C3                    	or	bx,ax			; save this with other switches
 33724 000035B4 89C1                    	mov	cx,ax
 33725                                  	; 12/12/2022
 33726 000035B6 A8F8                    	test	al,switchnum ; 0F8h
 33727                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 33728 000035B8 741E                    	jz	short done_swtch
 33729                                  
 33730 000035BA E8D4F3                  	call	getchr
 33731 000035BD 721A                    	jc	short err_swtch
 33732                                  
 33733 000035BF 3C3A                    	cmp	al,':'
 33734 000035C1 7516                    	jne	short err_swtch
 33735                                  
 33736 000035C3 E8CBF3                  	call	getchr
 33737 000035C6 53                      	push	bx			; preserve switches
 33738                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33739                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 33740                                  	; 12/12/2022
 33741                                  	; ds = cs
 33742 000035C7 C606[AC02]20            	mov	byte [sepchr],' '
 33743 000035CC E8AD0D                  	call	getnum
 33744                                  	;mov	byte [cs:sepchr],0
 33745                                  	; 12/12/2022
 33746 000035CF C606[AC02]00            	mov	byte [sepchr],0
 33747 000035D4 5B                      	pop	bx			; restore switches
 33748                                  
 33749                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 33750                                  ; not check for carry set here. if there is an error, it will be detected
 33751                                  ; further on (hopefully).
 33752                                  
 33753 000035D5 E80500                  	call	process_num
 33754                                  
 33755                                  done_swtch:
 33756                                  	;clc
 33757                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33758                                  	; 12/12/2022
 33759                                  	; cf=0
 33760                                  	;clc
 33761 000035D8 C3                      	retn
 33762                                  
 33763                                  err_swtch:
 33764 000035D9 31CB                    	xor	bx,cx			; remove this switch from the records
 33765                                  err_check:
 33766 000035DB F9                      	stc
 33767                                  err_chk:
 33768 000035DC C3                      	retn
 33769                                  
 33770                                  ;----------------------------------------------------------------------------
 33771                                  ;
 33772                                  ; procedure : process_num
 33773                                  ;
 33774                                  ; this routine takes the switch just input, and the number following (if any),
 33775                                  ; and sets the value in the appropriate variable. if the number input is zero
 33776                                  ; then it does nothing - it assumes the default value that is present in the
 33777                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 33778                                  ;
 33779                                  ;----------------------------------------------------------------------------
 33780                                  
 33781                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33782                                  	; (SYSINIT:3156h)
 33783                                  process_num:
 33784 000035DD 850E[034A]              	test	[switches],cx		; if this switch has been done before,
 33785 000035E1 752B                    	jnz	short done_ret		; ignore this one.
 33786                                  	; 12/12/2022
 33787 000035E3 F6C108                  	test	cl,flagdrive ; 8
 33788                                  	;test	cx,flagdrive ; 8
 33789 000035E6 7404                    	jz	short try_f
 33790 000035E8 A2[024A]                	mov	byte [drive],al
 33791                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33792                                  	;jmp	short done_ret
 33793                                  	; 12/12/2022
 33794                                  	; cf=0
 33795 000035EB C3                      	retn	; 13/05/2019
 33796                                  try_f:
 33797                                  	; 12/12/2022
 33798 000035EC F6C180                  	test	cl,flagff ; 80h
 33799                                  	;test	cx,flagff ; 80h
 33800 000035EF 7404                    	jz	short try_t
 33801                                  
 33802                                  ; ensure that we do not get bogus form factors that are not supported
 33803                                  
 33804                                  	;mov	[deviceparameters+1],al
 33805 000035F1 A2[DB48]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 33806                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33807                                  	;jmp	short done_ret
 33808                                  	; 12/12/2022
 33809                                  	; cf=0
 33810 000035F4 C3                      	retn	; 13/05/2019
 33811                                  try_t:
 33812 000035F5 09C0                    	or	ax,ax
 33813 000035F7 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 33814                                  	; 12/12/2022
 33815 000035F9 F6C110                  	test	cl,flagcyln ; 10h
 33816                                  	;test	cx,flagcyln ; 10h
 33817 000035FC 7404                    	jz	short try_s
 33818                                  
 33819                                  	;mov	[deviceparameters+4],ax
 33820 000035FE A3[DE48]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 33821                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33822                                  	;jmp	short done_ret
 33823                                  	; 12/12/2022
 33824                                  	; cf=0
 33825 00003601 C3                      	retn	; 13/05/2019
 33826                                  try_s:
 33827                                  	; 12/12/2022
 33828 00003602 F6C120                  	test	cl,flagseclim ; 20h
 33829                                  	;test	cx,flagseclim ; 20h
 33830 00003605 7404                    	jz	short try_h
 33831 00003607 A3[004A]                	mov	[slim],ax
 33832                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33833                                  	;jmp	short done_ret
 33834                                  	; 12/12/2022
 33835                                  	; cf=0
 33836 0000360A C3                      	retn	; 13/05/2019
 33837                                  
 33838                                  ; must be for number of heads
 33839                                  
 33840                                  try_h:
 33841 0000360B A3[FE49]                	mov	[hlim],ax
 33842                                  done_ret:
 33843                                  	;clc
 33844                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33845                                  	; 12/12/2022
 33846                                  	; cf=0 (test instruction resets cf)
 33847                                  	;clc
 33848 0000360E C3                      	retn
 33849                                  
 33850                                  
 33851                                  ; 03/01/2023 - Retro DOS v4.2
 33852                                  %if 1
 33853                                  
 33854                                  ; 15/04/2019 - Retro DOS v4.0
 33855                                  
 33856                                  ;----------------------------------------------------------------------------
 33857                                  ;
 33858                                  ; procedure : parseline
 33859                                  ;
 33860                                  ; entry point is parseline. al contains the first character in command line.
 33861                                  ;
 33862                                  ;----------------------------------------------------------------------------
 33863                                  
 33864                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 33865                                  	; (SYSINIT:3EDFh)
 33866                                  
 33867                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33868                                  	; (SYSINIT:30ACh)
 33869                                  parseline:
 33870                                  	; 03/01/2023
 33871                                  	; ds = cs ; *
 33872                                  
 33873                                  	;push	ds ; *
 33874                                  
 33875                                  	;push	cs ; *
 33876                                  	;pop	ds ; *
 33877                                  
 33878                                  nextswtch:
 33879 0000360F 3C0D                    	cmp	al,cr			; carriage return?
 33880 00003611 741C                    	je	short done_line
 33881 00003613 3C0A                    	cmp	al,lf			; linefeed?
 33882 00003615 7421                    	je	short put_back		; put it back and done
 33883                                  
 33884                                  ; anything less or equal to a space is ignored.
 33885                                  
 33886 00003617 3C20                    	cmp	al,' '                  ; space?
 33887 00003619 760F                    	jbe	short getnext		; skip over space
 33888 0000361B 3C2F                    	cmp	al,'/'
 33889 0000361D 7402                    	je	short getparm
 33890 0000361F F9                      	stc				; mark error invalid-character-in-input
 33891                                  	;jmp	short exitpl
 33892                                  	; 03/01/2023
 33893                                  swterr:
 33894 00003620 C3                      	retn
 33895                                  
 33896                                  getparm:
 33897 00003621 E865FF                  	call	check_switch
 33898 00003624 891E[034A]              	mov	[switches],bx		; save switches read so far
 33899 00003628 72F6                    	jc	short swterr
 33900                                  getnext:
 33901 0000362A E864F3                  	call	getchr
 33902                                  	;jc	short done_line
 33903                                  	;jmp	short nextswtch
 33904                                  	; 03/01/2023
 33905 0000362D 73E0                    	jnc	short nextswtch
 33906                                  ;swterr:
 33907                                  	;jmp	short exitpl		; exit if error
 33908                                  
 33909                                  done_line:
 33910                                  	; 12/12/2022
 33911 0000362F F606[034A]08            	test	byte [switches],flagdrive ; 8
 33912                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 33913 00003634 750C                    	jnz	short okay
 33914 00003636 F9                      	stc				; mark error no-drive-specified
 33915                                  	;jmp	short exitpl
 33916                                  	; 03/01/2023
 33917 00003637 C3                      	retn
 33918                                  
 33919                                  ;exitpl:
 33920                                  	; 03/01/2023
 33921                                  	; ds = cs
 33922                                  	;;pop	ds ; *
 33923                                  	;retn
 33924                                  
 33925                                  put_back:
 33926 00003638 FF06[5403]              	inc	word [count]		; one more char to scan
 33927 0000363C FF0E[5803]              	dec	word [chrptr]		; back up over linefeed
 33928 00003640 EBED                    	jmp	short done_line
 33929                                  
 33930                                  okay:
 33931 00003642 A1[034A]                	mov	ax,[switches]
 33932 00003645 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 33933 00003648 A3[DC48]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 33934 0000364B C706[0049]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 33935                                  	;clc			    ; everything is fine
 33936                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33937                                  	; 12/12/2022
 33938                                  	; cf=0
 33939                                  	;clc
 33940                                  	;call	setdeviceparameters
 33941                                  	; 03/01/2023
 33942                                  	;jmp	short setdeviceparameters
 33943                                  
 33944                                  %endif
 33945                                  
 33946                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 33947                                  
 33948                                  ;----------------------------------------------------------------------------
 33949                                  ;
 33950                                  ; procedure : setdeviceparameters
 33951                                  ;
 33952                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 33953                                  ; system based on the form factor. it is assumed that the bpbs for the
 33954                                  ; various form factors are present in the bpbtable. for hard files,
 33955                                  ; the recommended bpb is the same as the bpb on the drive.
 33956                                  ; no attempt is made to preserve registers since we are going to jump to
 33957                                  ; sysinit straight after this routine.
 33958                                  ;
 33959                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 33960                                  ;	  we always return no carry
 33961                                  ;
 33962                                  ;	note:  there is a routine by the same name in msdioctl.asm
 33963                                  ;
 33964                                  ;----------------------------------------------------------------------------
 33965                                  
 33966                                  ; 15/04/2019 - Retro DOS v4.0
 33967                                  
 33968                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33969                                  
 33970                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33971                                  	; (SYSINIT:3FC4h)
 33972                                  
 33973                                  setdeviceparameters:
 33974                                  	; 03/01/2023
 33975                                  	; ds = cs
 33976                                  
 33977 00003651 06                      	push	es
 33978                                  
 33979 00003652 0E                      	push	cs
 33980 00003653 07                      	pop	es
 33981                                  
 33982 00003654 31DB                    	xor	bx,bx
 33983 00003656 8A1E[DB48]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 33984 0000365A 80FB00                  	cmp	bl,DEV_5INCH ; 0
 33985 0000365D 7506                    	jne	short got_80
 33986                                  
 33987 0000365F C706[DE48]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 33988                                  							; 48 tpi=40 cyl
 33989                                  got_80:
 33990 00003665 D1E3                    	shl	bx,1			; get index into bpb table
 33991 00003667 8BB7[824A]              	mov	si,[bpbtable+bx]	; get address of bpb
 33992                                  
 33993                                  	;mov	di,deviceparameters+7	
 33994                                  	; 02/11/2022
 33995 0000366B BF[E148]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 33996 0000366E B91F00                  	mov	cx,A_BPB.size ; 31
 33997 00003671 FC                      	cld
 33998                                  	;repe	movsb
 33999                                  	; 02/11/2022
 34000 00003672 F3A4                    	rep	movsb
 34001                                  
 34002 00003674 07                      	pop	es
 34003                                  
 34004                                  	; 12/12/2022
 34005 00003675 F606[034A]20            	test	byte [switches],flagseclim ; 20h
 34006                                  	;tklhhhtgest	word [switches],flagseclim ; 20h
 34007 0000367A 7406                    	jz	short see_heads
 34008                                  
 34009 0000367C A1[004A]                	mov	ax,[slim]
 34010                                  	;mov	[deviceparameters+20],ax
 34011 0000367F A3[EE48]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],ax
 34012                                  
 34013                                  see_heads:
 34014                                  	; 12/12/2022
 34015 00003682 F606[034A]40            	test	byte [switches],flagheads ; 40h
 34016                                  	;test	word [switches],flagheads ; 40h
 34017 00003687 7406                    	jz	short heads_not_altered
 34018                                  
 34019 00003689 A1[FE49]                	mov	ax,[hlim]
 34020                                  	;mov	[deviceparameters+22],ax	
 34021 0000368C A3[F048]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax
 34022                                  
 34023                                  heads_not_altered:
 34024                                  
 34025                                  ; set up correct media descriptor byte and sectors/cluster
 34026                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 34027                                  
 34028                                  	;mov	byte [deviceparameters+9],2
 34029                                  	; 02/11/2022
 34030                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],2
 34031                                  	; 03/01/2023
 34032 0000368F B80200                  	mov	ax,2	
 34033 00003692 A2[E348]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 2
 34034                                  
 34035 00003695 B3F0                    	mov	bl,0F0h			; get default mediabyte
 34036                                  
 34037                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 34038                                  
 34039                                  	;mov	bh,[deviceparameters+17]
 34040                                  	; 02/11/2022
 34041 00003697 8A3E[EB48]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR]
 34042                                  	
 34043                                  	; 03/01/2023
 34044                                  	; ax = 2
 34045 0000369B 3906[F048]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax ; >2 heads?
 34046                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],2 ; >2 heads?
 34047 0000369F 773C                    	ja	short got_correct_mediaid ; just use default if heads>2
 34048                                  
 34049 000036A1 7524                    	jne	short only_one_head	; one head, do one head stuff
 34050                                  
 34051                                  ;	two head drives will use the mediadescriptor from the bpb
 34052                                  
 34053 000036A3 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 34054                                  
 34055                                  ;	two sided drives have two special cases to look for. One is
 34056                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 34057                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 34058                                  ;	   one sector/cluster.
 34059                                  
 34060                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 34061                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 34062                                  ;	   type of 2 headed drive is all set.
 34063                                  
 34064 000036A5 833E[EE48]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],18
 34065 000036AA 7509                    	jne	short not_144m
 34066 000036AC 833E[DE48]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 34067 000036B1 7502                    	jne	short not_144m
 34068                                  
 34069                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 34070                                  
 34071 000036B3 EB24                    	jmp	short got_one_secperclus_drive
 34072                                  
 34073                                  ;	check for 320K
 34074                                  
 34075                                  not_144m:
 34076 000036B5 833E[DE48]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 34077 000036BA 7521                    	jne	short got_correct_mediaid
 34078 000036BC 833E[EE48]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 34079 000036C1 751A                    	jne	short got_correct_mediaid
 34080                                  
 34081 000036C3 B3FC                    	mov	bl,0FCh
 34082 000036C5 EB16                    	jmp	short got_correct_mediaid
 34083                                  
 34084                                  only_one_head:
 34085                                  
 34086                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 34087                                  
 34088 000036C7 803E[DB48]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 34089 000036CC 740B                    	je	short got_one_secperclus_drive
 34090                                  
 34091                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 34092                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 34093                                  ;	  besides 8 will be considered 0fch
 34094                                  
 34095 000036CE B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 34096 000036D0 833E[EE48]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 34097                                  	; 12/12/2022
 34098 000036D5 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 34099                                  
 34100 000036D7 B3FE                    	mov	bl,0FEh			; 160K mediaid
 34101                                  
 34102                                  ;	we've either got a one sided drive, or a 1.44M drive
 34103                                  ;	  either case we'll use 1 sector per cluster instead of 2
 34104                                  
 34105                                  got_one_secperclus_drive:
 34106                                  	; 03/01/2023
 34107                                  	; ax = 2
 34108 000036D9 48                      	dec	ax  ; ax = 1
 34109 000036DA A2[E348]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 1
 34110                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],1
 34111                                  
 34112                                  got_correct_mediaid:
 34113 000036DD 881E[EB48]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR],bl
 34114                                  
 34115                                  ;	 Calculate the correct number of Total Sectors on medium
 34116                                  
 34117 000036E1 A1[DE48]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 34118 000036E4 F726[F048]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS]
 34119 000036E8 F726[EE48]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 34120 000036EC A3[E948]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS],ax
 34121 000036EF F8                      	clc				; we currently return no errors
 34122                                  
 34123 000036F0 C3                      	retn
 34124                                  
 34125                                  ;	M047 -- end rewritten routine
 34126                                  
 34127                                  ;----------------------------------------------------------------------------
 34128                                  ;
 34129                                  ; procedure : organize
 34130                                  ;
 34131                                  ;----------------------------------------------------------------------------
 34132                                  
 34133                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 34134                                  	; (SYSINIT:3234h)
 34135                                  
 34136                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 34137                                  	; (SYSINIT:4067h)
 34138                                  
 34139                                  organize:
 34140                                  	; 03/01/2023
 34141                                  	; ds = cs
 34142 000036F1 8B0E[5403]              	mov	cx,[count]
 34143                                  	;mov	cx,[cs:count]
 34144 000036F5 E323                    	jcxz	nochar1
 34145                                  
 34146                                  ;ifndef	MULTI_CONFIG
 34147                                  ;
 34148                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 34149                                  ;;   because we the case of values in SET commands preserved
 34150                                  ;
 34151                                  ;	call	mapcase
 34152                                  ;endif
 34153                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34154                                  	; 03/01/2023 - Retro DOS v4.2
 34155                                  	;call	mapcase
 34156                                  
 34157 000036F7 31F6                    	xor	si,si
 34158 000036F9 89F7                    	mov	di,si
 34159 000036FB 31C0                    	xor	ax,ax
 34160                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 34161                                  	;;mov	byte [cs:com_level],0
 34162                                  	; 12/12/2022
 34163                                  	;mov	[cs:com_level],al ; 0
 34164                                  	; 03/01/2023
 34165                                  	; ds = cs
 34166 000036FD A2[4E03]                	mov	[com_level],al ; 0
 34167                                  org1:
 34168 00003700 E8FA01                  	call	skip_comment
 34169 00003703 740D                    	jz	short end_commd_line	; found a comment string and skipped.
 34170 00003705 E8DB01                  	call	get2			; not a comment string. then get a char.
 34171 00003708 3C0A                    	cmp	al,lf ; 0Ah
 34172 0000370A 7406                    	je	short end_commd_line	; starts with a blank line.
 34173 0000370C 3C20                    	cmp	al,' ' ; 20h
 34174 0000370E 76F0                    	jbe	short org1		; skip leading control characters
 34175 00003710 EB0A                    	jmp	short findit
 34176                                  
 34177                                  end_commd_line:
 34178 00003712 AA                      	stosb				; store line feed char in buffer for the linecount.
 34179                                  	;mov	byte [cs:com_level],0	; reset the command level.
 34180                                  	; 03/01/2023
 34181                                  	; ds = cs
 34182 00003713 C606[4E03]00            	mov	byte [com_level],0
 34183 00003718 EBE6                    	jmp	short org1
 34184                                  
 34185                                  nochar1:
 34186 0000371A F9                      	stc
 34187 0000371B C3                      	retn
 34188                                  
 34189                                  findit:
 34190 0000371C 51                      	push	cx
 34191 0000371D 56                      	push	si
 34192 0000371E 57                      	push	di
 34193 0000371F 89F5                    	mov	bp,si
 34194 00003721 4D                      	dec	bp
 34195 00003722 BE[F747]                        mov     si,comtab		; prepare to search command table
 34196 00003725 B500                    	mov	ch,0
 34197                                  findcom:
 34198 00003727 89EF                    	mov	di,bp
 34199 00003729 8A0C                    	mov	cl,[si]
 34200 0000372B 46                      	inc	si
 34201 0000372C E345                    	jcxz	nocom
 34202                                  
 34203                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34204                                  
 34205                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 34206                                  
 34207                                  ;ifdef	MULTI_CONFIG
 34208                                  
 34209                                  ;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 34210                                  ;   time skip the upcoming delimiter test (since ";" need not be followed by
 34211                                  ;   anything in particular)
 34212                                  
 34213 0000372E 26803D3B                	cmp	byte [es:di],CONFIG_SEMICOLON  ; ';'
 34214 00003732 7430                    	je	short semicolon
 34215                                  loopcom:
 34216                                  	;mov	al,[es:di]
 34217                                  	;inc	di
 34218                                  	;and	al,~20h ; 0DFh		; force upper case
 34219                                  	;inc	si                      ; compare to byte @es:di
 34220                                  	;cmp	al,[si-1]
 34221                                  	; 28/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 34222 00003734 268A25                  	mov	ah,[es:di]
 34223 00003737 47                      	inc	di
 34224 00003738 80E4DF                  	and	ah,~20h ; 0DFh		
 34225 0000373B AC                      	lodsb			; mov al,[si]
 34226                                  				; inc si
 34227                                  	;cmp	al,ah
 34228                                  	;loope	loopcom
 34229                                  	; 28/07/2023
 34230 0000373C 30C4                    	xor	ah,al		; result: ah = 0 (*) if ah = al
 34231 0000373E E1F4                    	loopz	loopcom
 34232                                  ;else
 34233                                  ;	repe	cmpsb
 34234                                  ;endif
 34235                                  	; 02/11/2022
 34236                                  	; 03/01/2023 - Retro DOS v4.2
 34237                                  	;repe	cmpsb
 34238                                  
 34239                                  	; 28/07/2023
 34240                                  	;lahf
 34241 00003740 01CE                            add     si,cx                   ; bump to next position without affecting flags
 34242                                  	;sahf
 34243 00003742 AC                              lodsb                           ; get indicator letter
 34244                                  	;jnz	short findcom
 34245                                          ; 28/07/2023
 34246 00003743 08E4                    	or	ah,ah			; (*)
 34247 00003745 75E0                    	jnz	short findcom		
 34248                                  	
 34249 00003747 26803D0D                	cmp     byte [es:di],cr		; the next char might be cr,lf
 34250 0000374B 7421                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 34251 0000374D 26803D0A                	cmp	byte [es:di],lf
 34252 00003751 741B                    	je	short gotcom0
 34253                                  
 34254                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34255                                  
 34256                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 34257                                  
 34258                                  ;ifdef	MULTI_CONFIG
 34259                                  
 34260                                  ;   Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 34261                                  
 34262 00003753 3C5B                    	cmp	al,CONFIG_BEGIN  ; '['
 34263 00003755 7417                    	je	short gotcom0
 34264                                  ;endif
 34265 00003757 50                      	push	ax
 34266 00003758 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 34267                                  
 34268                                  ;ifdef	MULTI_CONFIG
 34269                                  
 34270                                  ;   If keyword is *immediately* followed by a question mark (?), then
 34271                                  ;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 34272                                  ;   stored in the CONFIG.SYS memory image.
 34273                                  
 34274 0000375B 3C3F                    	cmp	al,'?'                  ; explicit interactive command?
 34275 0000375D 7509                    	jne	short no_query		; no
 34276 0000375F 58                      	pop	ax                      ; yes, so retrieve the original code
 34277                                  	;or	al,80h ; 03/01/2023
 34278 00003760 0C80                    	or	al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 34279 00003762 EB0A                    	jmp	short gotcom0           ;
 34280                                  semicolon:
 34281 00003764 B030                    	mov	al,CONFIG_REM ; '0'
 34282 00003766 EB06                    	jmp	short gotcom0
 34283                                  no_query:
 34284                                  ;endif  ;MULTI_CONFIG
 34285                                  
 34286                                  	; 02/11/2022
 34287                                  	; 03/01/2023 - Retro DOS v4.2
 34288                                  	;push	ax
 34289                                  	;mov	al,[es:di]		; now the next char. should be a delim.
 34290                                  
 34291 00003768 E8450B                  	call	delim
 34292                                  no_delim:
 34293 0000376B 58                      	pop	ax
 34294 0000376C 75B9                    	jnz	short findcom
 34295                                  gotcom0:
 34296 0000376E 5F                      	pop	di
 34297 0000376F 5E                      	pop	si
 34298 00003770 59                      	pop	cx
 34299 00003771 EB0F                    	jmp	short gotcom
 34300                                  nocom:
 34301 00003773 5F                      	pop	di
 34302 00003774 5E                      	pop	si
 34303 00003775 59                      	pop	cx
 34304 00003776 B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 34305 00003778 AA                      	stosb				; save indicator char.
 34306                                  _skipline:
 34307 00003779 E86701                  	call	get2
 34308 0000377C 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 34309 0000377E 75F9                            jne     short _skipline
 34310 00003780 EB90                    	jmp	short end_commd_line	; handle next command line
 34311                                  gotcom:
 34312 00003782 AA                              stosb                           ; save indicator char in buffer
 34313                                  
 34314                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34315                                  
 34316                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 34317                                  
 34318                                  ;ifdef	MULTI_CONFIG
 34319                                  
 34320                                  ;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 34321                                  ;   it screws up the direct comparisons below.
 34322                                  
 34323 00003783 247F                    	and	al,~CONFIG_OPTION_QUERY ; 7Fh
 34324                                  ;endif
 34325                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 34326                                  	; 03/01/2023
 34327                                  	; ds = cs
 34328 00003785 A2[5203]                	mov	[cmd_indicator],al	; save it for the future use.
 34329                                  
 34330                                  ;ifdef	MULTI_CONFIG
 34331                                  
 34332                                  ;   There is no whitespace/delimiter between the "begin block" character
 34333                                  ;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 34334                                  ;   skipping code
 34335                                  
 34336 00003788 3C5B                    	cmp	al,CONFIG_BEGIN
 34337 0000378A 7455                    	je	short org31
 34338 0000378C 3C4F                    	cmp	al,CONFIG_SUBMENU ; 'O'
 34339 0000378E 740F                    	je	short no_mapcase
 34340 00003790 3C45                    	cmp	al,CONFIG_MENUITEM ; 'E'
 34341 00003792 740B                    	je	short no_mapcase
 34342 00003794 3C41                    	cmp	al,CONFIG_MENUDEFAULT ; 'A'
 34343 00003796 7407                    	je	short no_mapcase
 34344 00003798 3C4A                    	cmp	al,CONFIG_INCLUDE ; 'J'
 34345 0000379A 7403                    	je	short no_mapcase
 34346 0000379C E83A0B                  	call	mapcase			; map case of rest of line to UPPER
 34347                                  no_mapcase:
 34348                                  ;endif
 34349                                  	;; 02/11/2022
 34350                                  	;;mov	[cs:cmd_indicator],al	; save it for the future use.
 34351                                  	;; 03/01/2023
 34352                                  	;; ds = cs
 34353                                  	;mov	[cmd_indicator],al
 34354                                  org2:	
 34355 0000379F E84101                  	call    get2                    ; skip the command name until delimiter
 34356 000037A2 3C0A                            cmp     al,lf 	    ; 0Ah
 34357 000037A4 740F                    	je	short org21
 34358 000037A6 3C0D                    	cmp	al,cr 	    ; 0Dh	
 34359 000037A8 740B                    	je	short org21
 34360                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34361                                  	; 03/01/2023 - Retro DOS v4.2
 34362 000037AA 3C2F                    	cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 34363 000037AC 7407                    	je	short org21		; T-RICHJ: to be parsed properly.
 34364                                  
 34365 000037AE E8FF0A                  	call	delim
 34366 000037B1 75EC                            jnz	short org2
 34367 000037B3 EB02                    	jmp	short org3
 34368                                  org21:					;if cr or lf then
 34369 000037B5 4E                      	dec	si			; undo si, cx register
 34370 000037B6 41                      	inc	cx			;  and continue
 34371                                  org3:	
 34372                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 34373                                  	;je	short get_cmt_token
 34374                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34375                                  	; 03/01/2023 - Retro DOS v4.2	
 34376                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 34377                                  	;je	short org_file
 34378                                  	;cmp	byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 34379                                  	;je	short org_file
 34380                                  	;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 34381                                  	;je	short org_file
 34382                                  	; 02/11/2022
 34383                                  	; 03/01/2023 - Retro DOS v4.2
 34384                                  	;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 34385                                  	;;je	short org_file
 34386                                  	;cmp	byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 34387                                  	;je	short org_file
 34388                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 34389                                  	;je	short org_switch
 34390                                  
 34391                                  	; 03/01/2023
 34392                                  	; ds = cs
 34393                                  
 34394 000037B7 803E[5203]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 34395 000037BC 745D                    	je	short get_cmt_token
 34396                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34397                                  	; 03/01/2023 - Retro DOS v4.2	
 34398 000037BE 803E[5203]44            	cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 34399 000037C3 7430                    	je	short org_file
 34400 000037C5 803E[5203]49            	cmp	byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 34401 000037CA 7429                    	je	short org_file
 34402 000037CC 803E[5203]57            	cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 34403 000037D1 7422                    	je	short org_file
 34404                                  	; 02/11/2022
 34405                                  	; 03/01/2023 - Retro DOS v4.2
 34406                                  	;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 34407                                  	;je	short org_file
 34408 000037D3 803E[5203]53                    cmp	byte [cmd_indicator],CONFIG_SHELL ; 'S'
 34409 000037D8 741B                    	je	short org_file
 34410 000037DA 803E[5203]31                    cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 34411 000037DF 7403                    	je	short org_switch
 34412                                  	
 34413                                  org31:
 34414 000037E1 E99500                  	jmp	org4
 34415                                  
 34416                                  org_switch:
 34417 000037E4 E81601                  	call	skip_comment
 34418 000037E7 7472                    	jz	short end_commd_line_brdg
 34419                                  
 34420 000037E9 E8F700                  	call	get2
 34421 000037EC E8C90A                  	call	org_delim
 34422 000037EF 74F3                    	jz	short org_switch
 34423                                  
 34424 000037F1 AA                      	stosb
 34425 000037F2 E99300                  	jmp	org5
 34426                                  
 34427                                  org_file:			; get the filename and put 0 at end
 34428 000037F5 E80501                  	call	skip_comment
 34429 000037F8 7464                    	jz	short org_put_zero
 34430                                  
 34431 000037FA E8E600                  	call	get2		; not a comment
 34432 000037FD E8B00A                  	call	delim
 34433 00003800 74F3                    	jz	short org_file	; skip the possible delimiters
 34434                                  
 34435 00003802 AA                      	stosb			; copy the first non delim char found in buffer
 34436                                  
 34437                                  org_copy_file:
 34438 00003803 E8F700                  	call	skip_comment	; comment char in the filename?
 34439 00003806 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 34440                                  
 34441 00003808 E8D800                  	call	get2
 34442 0000380B 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 34443 0000380D 7457                    	je	short end_file_slash ; this will be the special case.
 34444                                  
 34445 0000380F AA                      	stosb			; save the char. in buffer
 34446 00003810 E89D0A                  	call	delim
 34447 00003813 7459                    	jz	short end_copy_file
 34448                                  
 34449 00003815 3C20                    	cmp	al, ' '
 34450 00003817 77EA                    	ja	short org_copy_file ; keep copying
 34451 00003819 EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 34452                                  
 34453                                  get_cmt_token:			; get the token. just max. 2 char.
 34454 0000381B E8C500                  	call	get2
 34455 0000381E 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 34456 00003820 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 34457 00003822 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 34458 00003824 74F5                    	je	short get_cmt_token ;  character.)
 34459 00003826 3C3D                    	cmp	al,'='		; = is special in this case.
 34460 00003828 74F1                    	je	short get_cmt_token
 34461 0000382A 3C0D                    	cmp	al,cr
 34462 0000382C 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 34463 0000382E 3C0A                    	cmp	al,lf
 34464 00003830 7422                    	je	short get_cmt_end
 34465                                  
 34466                                  	; 03/01/2023
 34467                                  	; ds = cs
 34468                                  	;mov	[cs:cmmt1],al	; store it
 34469                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 34470 00003832 A2[5003]                	mov	[cmmt1],al	; store it
 34471 00003835 C606[4F03]01            	mov	byte [cmmt],1	; 1 char. so far.
 34472 0000383A E8A600                  	call	get2
 34473 0000383D 3C20                    	cmp	al,' ' ; 20h
 34474 0000383F 7413                    	je	short get_cmt_end
 34475 00003841 3C09                    	cmp	al,tab ; 9
 34476 00003843 740F                    	je	short get_cmt_end
 34477 00003845 3C0D                    	cmp	al,cr  ; 0Dh
 34478 00003847 740B                    	je	short get_cmt_end
 34479 00003849 3C0A                    	cmp	al,lf  ; 0Ah
 34480 0000384B 740E                    	je	short end_commd_line_brdg
 34481                                  
 34482                                  	;mov	[cs:cmmt2],al
 34483                                  	;inc	byte [cs:cmmt]
 34484                                  	; 03/01/2023
 34485 0000384D A2[5103]                	mov	[cmmt2],al
 34486 00003850 FE06[4F03]              	inc	byte [cmmt]
 34487                                  
 34488                                  get_cmt_end:
 34489 00003854 E88C00                  	call	get2
 34490 00003857 3C0A                    	cmp	al,lf
 34491 00003859 75F9                    	jne	short get_cmt_end	; skip it.
 34492                                  end_commd_line_brdg: 
 34493 0000385B E9B4FE                  	jmp	end_commd_line		; else jmp to end_commd_line
 34494                                  
 34495                                  org_put_zero:				; make the filename in front of
 34496 0000385E 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 34497 00003862 47                      	inc	di
 34498 00003863 E9ACFE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 34499                                  
 34500                                  end_file_slash: 			; al = "/" option char.
 34501 00003866 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 34502 0000386A 47                      	inc	di			; and
 34503 0000386B AA                      	stosb				; store "/" after that.
 34504 0000386C EB1A                    	jmp	short org5		; continue with the rest of the line
 34505                                  
 34506                                  end_copy_file:
 34507 0000386E 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 34508 00003873 3C0A                    	cmp	al,lf
 34509 00003875 74E4                    	je	short end_commd_line_brdg
 34510 00003877 EB0F                    	jmp	short org5
 34511                                  
 34512                                  org4:					; org4 skips all delimiters after the command name except for '/'
 34513 00003879 E88100                  	call	skip_comment
 34514 0000387C 74DD                    	jz	short end_commd_line_brdg
 34515                                  
 34516 0000387E E86200                  	call	get2
 34517 00003881 E8340A                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 34518 00003884 74F3                    	jz	short org4
 34519 00003886 EB08                    	jmp	short org51
 34520                                  
 34521                                  org5:					; rest of the line
 34522 00003888 E87200                  	call	skip_comment		; comment?
 34523 0000388B 74CE                    	jz	short end_commd_line_brdg
 34524 0000388D E85300                  	call	get2			; not a comment.
 34525                                  
 34526                                  org51:
 34527 00003890 AA                      	stosb				; copy the character
 34528 00003891 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 34529 00003893 743A                    	je	short at_quote
 34530 00003895 3C20                    	cmp	al,' '  ; 20h
 34531 00003897 77EF                    	ja	short org5
 34532                                  					; M051 - Start
 34533                                  	; 03/01/2023
 34534                                  	; ds = cs
 34535 00003899 803E[5203]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 34536                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 34537 0000389E 7514                    	jne	short not_dh		; N: 
 34538 000038A0 3C0A                    	cmp	al,lf			; Q: is this line feed
 34539 000038A2 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 34540 000038A4 3C0D                    	cmp	al,cr			; Q: is this a cr
 34541 000038A6 75E0                    	jne	short org5		; N: 
 34542 000038A8 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 34543 000038AD AA                      	stosb				; put cr after blank
 34544 000038AE FE06[2735]              	inc	byte [insert_blank]
 34545                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 34546                                  					; inserted
 34547 000038B2 EBD4                    	jmp	short org5
 34548                                  not_dh:					; M051 - End
 34549                                  
 34550 000038B4 3C0A                    	cmp	al,lf			; line feed?
 34551 000038B6 740F                    	je	short org1_brdg		; handles the next command line.
 34552 000038B8 EBCE                    	jmp	short org5		; handles next char in this line.
 34553                                  
 34554                                  org_dhlf:				; M051 - Start
 34555                                  	; 03/01/2023
 34556                                  	; ds = cs
 34557 000038BA 803E[2735]01            	cmp	byte [insert_blank],1
 34558                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 34559 000038BF 7406                    	je	short org1_brdg		; Y:
 34560 000038C1 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 34561 000038C6 AA                      	stosb				; put lf after blank
 34562                                  					; M051 - End
 34563                                  org1_brdg:
 34564 000038C7 C606[2735]00            	mov	byte [insert_blank],0 
 34565                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 34566                                  					; M051: devicehigh
 34567 000038CC E931FE                  	jmp	org1
 34568                                  
 34569                                  at_quote:
 34570 000038CF 803E[4E03]00            	cmp	byte [com_level],0
 34571                                  	;cmp	byte [cs:com_level],0
 34572 000038D4 7407                    	je	short up_level
 34573                                  	;mov	byte [cs:com_level],0	; reset it.
 34574 000038D6 C606[4E03]00            	mov	byte [com_level],0
 34575 000038DB EBAB                    	jmp	short org5
 34576                                  
 34577                                  up_level:
 34578                                  	;inc	byte [cs:com_level]	; set it.
 34579 000038DD FE06[4E03]              	inc	byte [com_level]
 34580 000038E1 EBA5                    	jmp	short org5
 34581                                  
 34582                                  ;----------------------------------------------------------------------------
 34583                                  ;
 34584                                  ; procedure : get2
 34585                                  ;
 34586                                  ;----------------------------------------------------------------------------
 34587                                  
 34588                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 34589                                  	; (SYSINIT:33FAh)
 34590                                  
 34591                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 34592                                  	; (SYSINIT:4270h)
 34593                                  get2:
 34594 000038E3 E304                    	jcxz	noget
 34595                                  	;
 34596                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34597                                  	;;lods	byte ptr es:[si]
 34598                                  	; 12/12/2022
 34599 000038E5 26                      	es	
 34600 000038E6 AC                      	lodsb
 34601                                  	;mov	al, [es:si]
 34602                                  	;inc	si
 34603                                  	;
 34604 000038E7 49                      	dec	cx
 34605 000038E8 C3                      	retn
 34606                                  noget:
 34607 000038E9 59                      	pop	cx
 34608                                  	; 03/01/2023
 34609                                  	; ds = cs
 34610                                  	;mov	[cs:count],di ; 13/05/2019
 34611                                  	;mov	[cs:org_count],di
 34612 000038EA 893E[5403]              	mov	[count],di
 34613 000038EE 893E[5603]              	mov	[org_count],di
 34614 000038F2 31F6                    	xor	si,si
 34615                                  	;mov	[cs:chrptr],si
 34616 000038F4 8936[5803]              	mov	[chrptr],si
 34617                                  
 34618                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34619                                  
 34620                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 34621                                  
 34622                                  ;ifndef MULTI_CONFIG
 34623                                  ;	retn
 34624                                  ;else
 34625                                  
 34626                                  ;   This was the rather kludgy way out of procedure "organize", but instead
 34627                                  ;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 34628                                  ;   and the new boot menu stuff...
 34629                                  
 34630 000038F8 89F9                    	mov     cx,di
 34631 000038FA E9E300                  	jmp     menu_check
 34632                                  
 34633                                  ;endif
 34634                                  	; 02/11/2022
 34635                                  	; 03/01/2023 - Retro DOS v4.2
 34636                                  	;retn
 34637                                  
 34638                                  ;----------------------------------------------------------------------------
 34639                                  ;
 34640                                  ; procedure : skip_comment
 34641                                  ;
 34642                                  ;skip the commented string until lf, if current es:si-> a comment string.
 34643                                  ;in) es:si-> string
 34644                                  ;	 cx -> length.
 34645                                  ;out) zero flag not set if not found a comment string.
 34646                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 34647                                  ;	  the line feed character at this moment when return.
 34648                                  ;	  ax register destroyed.
 34649                                  ;	  if found, si, cx register adjusted accordingly.
 34650                                  ;
 34651                                  ;----------------------------------------------------------------------------
 34652                                  
 34653                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 34654                                  	; (SYSINIT:428Dh)
 34655                                  
 34656                                  skip_comment:
 34657 000038FD E3EA                    	jcxz	noget		; get out of the organize routine.
 34658                                  
 34659                                  	; 03/01/2023
 34660                                  	; ds = cs	
 34661                                  
 34662 000038FF 803E[4E03]00            	cmp	byte [com_level],0
 34663                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 34664 00003904 752C                    	jne	short no_commt	 ; (not inside quotations)
 34665                                  
 34666 00003906 803E[4F03]01            	cmp	byte [cmmt],1
 34667                                  	;cmp	byte [cs:cmmt],1
 34668 0000390B 7225                    	jb	short no_commt
 34669                                  
 34670 0000390D 268A04                  	mov	al,[es:si]
 34671                                  	
 34672 00003910 3806[5003]              	cmp	[cmmt1],al
 34673                                  	;cmp	[cs:cmmt1],al
 34674 00003914 751C                    	jne	short no_commt
 34675                                  
 34676 00003916 803E[4F03]02            	cmp	byte [cmmt],2
 34677                                  	;cmp	byte [cs:cmmt],2
 34678 0000391B 750A                    	jne	short skip_cmmt
 34679                                  
 34680 0000391D 268A4401                	mov	al,[es:si+1]
 34681                                  	
 34682 00003921 3806[5103]              	cmp	[cmmt2],al
 34683                                  	;cmp	[cs:cmmt2],al
 34684 00003925 750B                    	jne	short no_commt
 34685                                  skip_cmmt:
 34686 00003927 E3C0                    	jcxz	noget		; get out of organize routine.
 34687 00003929 268A04                  	mov	al,[es:si]
 34688 0000392C 46                      	inc	si
 34689 0000392D 49                      	dec	cx
 34690 0000392E 3C0A                    	cmp	al,lf		; line feed?
 34691 00003930 75F5                    	jne	short skip_cmmt
 34692                                  no_commt:
 34693 00003932 C3                      	retn
 34694                                  
 34695                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34696                                  ; (SYSINIT:42C8h)
 34697                                  
 34698                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34699                                  ;%if 0
 34700                                  
 34701                                  ;ifdef	MULTI_CONFIG
 34702                                  
 34703                                  ;----------------------------------------------------------------------------
 34704                                  ;
 34705                                  ;   kbd_read: wait for keystroke
 34706                                  ;
 34707                                  ;   INPUT
 34708                                  ;       DS == CS == sysinitseg
 34709                                  ;
 34710                                  ;   OUTPUT
 34711                                  ;       Carry SET to clean boot, CLEAR otherwise
 34712                                  ;
 34713                                  ;   OTHER REGS USED
 34714                                  ;       All
 34715                                  ;
 34716                                  ;   HISTORY
 34717                                  ;       Created 16-Nov-1992 by JeffPar
 34718                                  ;
 34719                                  ;----------------------------------------------------------------------------
 34720                                  
 34721                                  kbd_read:
 34722 00003933 F606[A647]02                    test    byte [bDisableUI],2
 34723 00003938 7520                            jnz     short kbd_nodelay
 34724                                  
 34725 0000393A 1E                              push    ds              ; the bios timer tick count is incremented
 34726 0000393B 29C0                            sub     ax,ax           ; 18.2 times per second;
 34727 0000393D 8ED8                            mov     ds,ax           ; watch the timer tick count for 37 transitions
 34728                                  	;mov	dx,[046Ch]	; get initial value
 34729                                  kbd_loop:
 34730 0000393F B401                            mov     ah,1            ;
 34731 00003941 CD16                            int     16h             ; peek the keyboard
 34732 00003943 7514                            jnz	short kbd_loopdone ; something's there, get out
 34733 00003945 B402                            mov     ah,2            ; peek the shift states
 34734 00003947 CD16                            int     16h             ;
 34735 00003949 A803                            test    al,03h          ; either right or left shift key bits set?
 34736 0000394B 750C                            jnz	short kbd_loopdone ; yes
 34737 0000394D A16C04                          mov     ax,[046Ch]	;
 34738                                  	;sub	ax,dx           ; get difference
 34739                                  	; 15/04/2019 - Retro DOS v4.0
 34740 00003950 2E2B06[8403]            	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 34741                                  
 34742 00003955 3C25                    	cmp     al,37           ; reached limit?  ; (2 seconds)
 34743 00003957 72E6                            jb	short kbd_loop	; not yet
 34744                                  kbd_loopdone:
 34745 00003959 1F                              pop     ds              ; delay complete!
 34746                                  kbd_nodelay:
 34747 0000395A 29DB                            sub     bx,bx           ; assume clean boot
 34748 0000395C B402                            mov     ah,2            ; peek the shift states
 34749 0000395E CD16                            int     16h             ;
 34750 00003960 A803                            test    al,03h          ; either right or left shift key bits set?
 34751 00003962 7407                            jz      short kbd_notshift ; no
 34752 00003964 43                              inc     bx              ; yes
 34753 00003965 43                              inc     bx
 34754                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 34755 00003966 800E[AA47]04            	or	byte [bQueryOpt],4
 34756                                  kbd_notshift:                   ;
 34757 0000396B B401                            mov     ah,1            ; peek the keyboard
 34758 0000396D CD16                            int     16h             ;
 34759 0000396F 743E                            jz	short kbd_test	; no key present
 34760 00003971 08C0                            or      al,al           ; is it a function key?
 34761 00003973 753A                            jnz	short kbd_test	; no
 34762                                  
 34763                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 34764 00003975 80FC62                          cmp     ah,62h          ; CTRL F5
 34765 00003978 7405                            je	short kbd_cfg_bypass
 34766                                  	
 34767 0000397A 80FC3F                          cmp     ah,3Fh          ; F5 function key?
 34768 0000397D 750D                            jne	short kbd_notf5	; no
 34769                                  kbd_cfg_bypass:
 34770 0000397F BA[3D4C]                        mov     dx,_$CleanMsg
 34771 00003982 E8F30B                          call    print
 34772                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 34773 00003985 800E[AA47]04            	or	byte [bQueryOpt],4 
 34774 0000398A EB16                            jmp     short kbd_eat   ; yes, clean boot selected
 34775                                  kbd_notf5:
 34776                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 34777 0000398C 80FC65                          cmp     ah,65h          ; CTRL F8
 34778 0000398F 7405                            je	short kbd_cfg_confirm
 34779                                  
 34780 00003991 80FC42                          cmp     ah,42h          ; F8 function key?
 34781 00003994 7523                            jne	short kbd_exit	; no
 34782                                  kbd_cfg_confirm:
 34783 00003996 BA[7B4C]                        mov     dx,_$InterMsg
 34784 00003999 E8DC0B                          call    print           ;
 34785 0000399C B301                            mov     bl,1            ; yes, interactive-boot option enabled
 34786 0000399E 881E[AA47]                      mov     [bQueryOpt],bl  ; change default setting
 34787                                  kbd_eat:                        ;
 34788 000039A2 B400                            mov     ah,0            ;
 34789 000039A4 CD16                            int     16h             ; eat the key we assumed was a signal
 34790 000039A6 C606[B047]FF                    mov	byte [secElapsed],-1
 34791 000039AB 09DB                            or      bx,bx           ;
 34792 000039AD 7405                            jz	short kbd_clean	;
 34793                                  kbd_test:                       ;
 34794 000039AF 80FB02                          cmp     bl,2            ;
 34795 000039B2 7205                            jb	short kbd_exit	;
 34796                                  kbd_clean:                      ;
 34797 000039B4 E88608                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 34798 000039B7 F9                              stc                     ; set carry to indicate abort
 34799 000039B8 C3                              retn			;
 34800                                  kbd_exit:                       ;
 34801 000039B9 F8                              clc                     ; clear carry to indicate success
 34802 000039BA C3                              retn			;
 34803                                  
 34804                                  ;----------------------------------------------------------------------------
 34805                                  ;
 34806                                  ;   set_numlock: set numlock LED
 34807                                  ;
 34808                                  ;   INPUT
 34809                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 34810                                  ;
 34811                                  ;   OUTPUT
 34812                                  ;       None
 34813                                  ;
 34814                                  ;   OTHER REGS USED
 34815                                  ;       None
 34816                                  ;
 34817                                  ;   HISTORY
 34818                                  ;       Created 16-Nov-1992 by JeffPar
 34819                                  ;
 34820                                  ;----------------------------------------------------------------------------
 34821                                  
 34822                                  	; 04/01/2023 - Retro DOS v4.2
 34823                                  
 34824                                  set_numlock:
 34825                                          ; 04/01/2023
 34826                                  	;push	ax
 34827 000039BB 1E                              push    ds
 34828 000039BC 29C0                            sub     ax,ax
 34829 000039BE 8ED8                            mov     ds,ax
 34830 000039C0 268B04                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 34831 000039C3 2E3B06[184C]                    cmp     ax,[cs:OnOff+2]	; should we turn it off?
 34832 000039C8 7507                            jne	short not_off	; no
 34833 000039CA 80261704DF                      and     byte [0417h],~20h ; 0DFh
 34834 000039CF EB0D                            jmp     short set_done
 34835                                  not_off:
 34836 000039D1 2E3B06[164C]                    cmp     ax,[cs:OnOff]	; should we turn it on?
 34837 000039D6 F9                              stc
 34838 000039D7 7505                            jne	short set_done	; no
 34839 000039D9 800E170420                      or      byte [0417h],20h
 34840                                  set_done:
 34841 000039DE 1F                              pop     ds
 34842                                  	; 04/01/2023
 34843                                  	;pop	ax
 34844 000039DF C3                              retn
 34845                                  
 34846                                  ; 16/04/2019 - Retro DOS v4.0
 34847                                  
 34848                                  ;----------------------------------------------------------------------------
 34849                                  ;
 34850                                  ;   menu_check: check for presence of menu (and other) configuration blocks
 34851                                  ;
 34852                                  ;   INPUT
 34853                                  ;       CX == "organized" config.sys memory image length
 34854                                  ;    ES:SI -> "organized" config.sys memory image
 34855                                  ;       DS == CS == sysinitseg
 34856                                  ;
 34857                                  ;   OUTPUT
 34858                                  ;       Same as above; the idea is that menu_check simply transforms
 34859                                  ;       a block-structured config.sys image into a conventional image,
 34860                                  ;       based on the user's block selection and any other boot-time options
 34861                                  ;       the user may have employed...
 34862                                  ;
 34863                                  ;   OTHER REGS USED
 34864                                  ;       All
 34865                                  ;
 34866                                  ;   NOTES
 34867                                  ;       [count] and [org_count] are set to the new config.sys image length
 34868                                  ;
 34869                                  ;   HISTORY
 34870                                  ;       Created 16-Mar-1992 by JeffPar
 34871                                  ;
 34872                                  ;----------------------------------------------------------------------------
 34873                                  
 34874                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 34875                                  	; (SYSINIT:4378h)
 34876                                  
 34877                                  menu_check:
 34878                                  
 34879                                  ;   Search for SWITCHES, determine if /N or /F are present; if so, then
 34880                                  ;   disable clean/interactive boot options
 34881                                  
 34882 000039E0 51                              push    cx              ;
 34883 000039E1 56                              push    si              ;
 34884 000039E2 29DB                            sub     bx,bx           ; remains ZERO until first block
 34885                                  swchk_loop:                     ;
 34886 000039E4 E84C07                          call    get_char        ; get first char of current line
 34887 000039E7 724C                            jc	short swchk_end	; hit eof
 34888 000039E9 3C5B                            cmp     al,CONFIG_BEGIN ; '['
 34889 000039EB 7503                            jne	short swchk_next1 ;
 34890 000039ED 43                              inc     bx              ; remember that we've seen a block
 34891 000039EE EB40                            jmp     short swchk_nextline
 34892                                  swchk_next1:                    ;
 34893 000039F0 3C4E                            cmp     al,CONFIG_NUMLOCK
 34894 000039F2 750E                            jne	short swchk_next2 ;
 34895 000039F4 09DB                            or      bx,bx           ; only do NUMLOCK commands that exist
 34896 000039F6 7538                            jnz	short swchk_nextline ; before the first block
 34897 000039F8 E8C0FF                          call    set_numlock     ; REM it out so we don't act on it later, too
 34898 000039FB 26C644FF30                      mov     byte [es:si-1],CONFIG_REM
 34899 00003A00 EB2E                            jmp     short swchk_nextline
 34900                                  swchk_next2:                    ;
 34901 00003A02 3C31                            cmp     al,CONFIG_SWITCHES
 34902 00003A04 752A                            jne	short swchk_nextline ; this line ain't it
 34903                                  swchk_scan:                     ;
 34904 00003A06 E82A07                          call    get_char        ; look for /N or /F
 34905                                  swchk_scan1:                    ;
 34906 00003A09 3C0A                            cmp     al,LF           ; end of line?
 34907 00003A0B 7423                            je	short swchk_nextline ; yes
 34908 00003A0D 3C2F                            cmp     al,'/'          ; switch-char?
 34909 00003A0F 75F5                            jne	short swchk_scan ; no
 34910 00003A11 E81F07                          call    get_char        ;
 34911 00003A14 24DF                            and     al,~20h ; 0DFh	; convert to upper case
 34912 00003A16 3A06[051F]                      cmp     al,[swit_n+1]
 34913 00003A1A 7507                            jne	short swchk_scan2 ; no
 34914 00003A1C 800E[A647]01                    or      byte [bDisableUI],1
 34915 00003A21 EBE3                            jmp	short swchk_scan ; continue looking for switches of interest
 34916                                  swchk_scan2:                    ;
 34917 00003A23 3A06[111F]                      cmp     al,[swit_f+1]
 34918 00003A27 75E0                            jne	short swchk_scan1 ; no
 34919 00003A29 800E[A647]02                    or      byte [bDisableUI],2
 34920 00003A2E EBD6                            jmp     short swchk_scan ; continue looking for switches of interest
 34921                                  swchk_nextline:                 ;
 34922 00003A30 E8DA06                          call    skip_opt_line   ;
 34923 00003A33 EBAF                            jmp     short swchk_loop ;
 34924                                  swchk_end:                      ;
 34925 00003A35 5E                              pop     si              ;
 34926 00003A36 59                              pop     cx              ;
 34927                                  
 34928                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 34929                                  ;   the DisableUI flag is still clear
 34930                                  
 34931 00003A37 F606[A647]01                    test    byte [bDisableUI],1
 34932 00003A3C 7508                            jnz	short menu_search
 34933                                  ;
 34934                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 34935                                  ;   there is anything at all in the keyboard buffer
 34936                                  ;
 34937 00003A3E E8F2FE                          call    kbd_read
 34938 00003A41 7303                            jnc	short menu_search
 34939 00003A43 E9F601                          jmp	menu_abort
 34940                                  
 34941                                  ;   Search for MENU block; it is allowed to be anywhere in config.sys
 34942                                  
 34943                                  menu_search:
 34944 00003A46 29DB                            sub     bx,bx           ; if no MENU, default to zero for no_selection
 34945 00003A48 BF[EB47]                        mov     di,szMenu	;
 34946 00003A4B E81804                          call    find_block      ; find the MENU block
 34947 00003A4E 733D                            jnc	short menu_found ;
 34948 00003A50 C606[E347]00                    mov     byte [szBoot],0
 34949 00003A55 E91402                          jmp	no_selection ; not found
 34950                                  
 34951                                  ;   Process the requested menu color(s)
 34952                                  
 34953                                  menu_color:
 34954 00003A58 51                              push    cx              ;
 34955 00003A59 52                              push    dx              ;
 34956 00003A5A BA0700                          mov     dx,0007h        ; default color setting
 34957 00003A5D E8B206                          call    get_number	; get first number
 34958 00003A60 80E30F                          and     bl,0Fh		; first # is foreground color (for low nibble)
 34959 00003A63 88DD                            mov     ch,bl           ; save it in CH
 34960                                  	; 01/08/2023 - Retro DOS v4.2 IO.SYS (optimization) by Erdogan Tan 
 34961                                  	; (high nibble of dl is 0)
 34962                                  	;and	dl,0F0h         ;
 34963 00003A65 08DA                            or      dl,bl           ;
 34964 00003A67 E84608                          call    delim           ; did we hit a delimiter
 34965 00003A6A 7511                            jne	short check_color ; no, all done
 34966 00003A6C E8A306                          call    get_number	; get next number
 34967 00003A6F 80E30F                          and     bl,0Fh		; second # is background color (for high nibble)
 34968 00003A72 88DE                            mov     dh,bl           ; save it in DH
 34969 00003A74 80E20F                          and     dl,0Fh		;
 34970 00003A77 B104                            mov     cl,4            ;
 34971 00003A79 D2E3                            shl     bl,cl           ;
 34972 00003A7B 08DA                            or      dl,bl           ;
 34973                                  check_color:                    ;
 34974 00003A7D 38F5                            cmp     ch,dh           ; are foreground/background the same?
 34975 00003A7F 7503                            jne	short set_color	; no
 34976 00003A81 80F208                          xor     dl,08h          ; yes, so modify the fgnd intensity
 34977                                  set_color:
 34978 00003A84 8816[A147]                      mov     [bMenuColor],dl ;
 34979 00003A88 5A                              pop     dx              ;
 34980 00003A89 59                              pop     cx              ;
 34981 00003A8A E9AB00                          jmp	menu_nextitem
 34982                                  
 34983                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 34984                                  ;   above is there simply to alleviate short jump problems)
 34985                                  
 34986                                  menu_found:
 34987 00003A8D C606[AB47]01                    mov     byte [bDefBlock],1
 34988 00003A92 C706[AD47]0000                  mov     word [offDefBlock],0
 34989 00003A98 C606[AF47]FF                    mov     byte [secTimeOut],-1
 34990 00003A9D 8026[AA47]FD                    and     byte [bQueryOpt],~2 ; 0FDh
 34991                                  
 34992 00003AA2 E86806                          call    skip_opt_line   ; skip to next line
 34993 00003AA5 29D2                            sub     dx,dx           ; initialize total block count (0 => none yet)
 34994                                  
 34995                                  ;   Process the menu block now
 34996                                  
 34997                                  menu_process:
 34998 00003AA7 E88906                          call    get_char        ; get first char of current line
 34999 00003AAA 722E                            jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 35000 00003AAC 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 35001 00003AAE 3C5B                            cmp     al,CONFIG_BEGIN ; BEGIN implies END
 35002 00003AB0 7428                            je	short to_menu_getdefault
 35003 00003AB2 3C4F                            cmp     al,CONFIG_SUBMENU
 35004 00003AB4 744D                            je	short menu_item	; go process sub-menu
 35005 00003AB6 3C45                            cmp     al,CONFIG_MENUITEM
 35006 00003AB8 7449                            je	short menu_item	; go process menu item
 35007 00003ABA 3C41                            cmp     al,CONFIG_MENUDEFAULT
 35008 00003ABC 741E                            je	short menu_default ; go process menu default
 35009 00003ABE 3C52                            cmp     al,CONFIG_MENUCOLOR
 35010 00003AC0 7496                            je	short menu_color ; go process menu color
 35011 00003AC2 3C4E                            cmp     al,CONFIG_NUMLOCK
 35012 00003AC4 740F                            je	short menu_numlock ;
 35013 00003AC6 3C30                            cmp     al,CONFIG_REM   ; allow remarks in menu block
 35014 00003AC8 746E                            je	short menu_nextitem ;
 35015 00003ACA E8D307                          call    any_delim       ; allow blank lines and such
 35016 00003ACD 7469                            je	short menu_nextitem ;
 35017 00003ACF F9                              stc                     ;
 35018 00003AD0 E83607                          call    print_error     ; non-MENU command!
 35019 00003AD3 EB63                            jmp     short menu_nextitem
 35020                                  menu_numlock:
 35021 00003AD5 E8E3FE                          call    set_numlock
 35022 00003AD8 EB5E                            jmp     short menu_nextitem
 35023                                  to_menu_getdefault:
 35024 00003ADA EB62                            jmp     short menu_getdefault
 35025                                  
 35026                                  ;   Save the offset of the default block name, we'll need it later
 35027                                  
 35028                                  menu_default:
 35029 00003ADC 8936[AD47]                      mov     [offDefBlock],si; save address of default block name
 35030 00003AE0 803E[B047]00                    cmp     byte [secElapsed],0
 35031 00003AE5 751A                            jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 35032 00003AE7 E8F905                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 35033 00003AEA 724C                            jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 35034 00003AEC E80A06                          call    skip_delim      ; something is typed
 35035 00003AEF 7247                            jc	short menu_nextitem ;
 35036 00003AF1 89DE                            mov     si,bx           ;
 35037 00003AF3 E81C06                          call    get_number      ; get number (of seconds for timeout)
 35038 00003AF6 80FB5A                          cmp     bl,90           ; limit it to a reasonable number
 35039                                  	;jb	short timeout_ok ; (besides, 99 is the largest # my simple
 35040 00003AF9 7602                            jna	short timeout_ok ; 01/08/2023
 35041 00003AFB B35A                    	mov     bl,90           ;  display function can handle)
 35042                                  timeout_ok:                     ;
 35043 00003AFD 881E[AF47]                      mov     [secTimeOut],bl ;
 35044                                  timeout_skip:
 35045 00003B01 EB35                            jmp     short menu_nextitem
 35046                                  
 35047                                  ;   Verify that this is a valid menu item by searching for the named block
 35048                                  
 35049                                  menu_item:
 35050                                  	;cmp	dl,9	; 04/01/2023
 35051 00003B03 80FA09                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 35052 00003B06 7330                            jae	short menu_nextitem ;
 35053 00003B08 89F7                            mov     di,si           ; DS:DI -> block name to search for
 35054 00003B0A E84003                          call    srch_block      ;
 35055 00003B0D 7406                            je	short menu_itemfound ;
 35056 00003B0F F9                              stc                     ;
 35057 00003B10 E8F606                          call    print_error     ; print error and pause
 35058 00003B13 EB23                            jmp     short menu_nextitem ; if not found, ignore this menu item
 35059                                  
 35060                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 35061                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 35062                                  ;   and CX are unmodified
 35063                                  
 35064                                  menu_itemfound:
 35065 00003B15 42                              inc     dx              ; otherwise, increment total block count
 35066 00003B16 89D3                            mov     bx,dx           ; and use it to index the arrays of offsets
 35067 00003B18 8887[B147]                      mov	[abBlockType+bx],al
 35068 00003B1C 01DB                            add     bx,bx           ; of recorded block names and descriptions
 35069                                  
 35070                                  ;   There should be a description immediately following the block name on
 35071                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 35072                                  ;   description...
 35073                                  
 35074 00003B1E 89B7[BB47]                      mov     [aoffBlockName+bx],si
 35075 00003B22 89B7[CF47]                      mov     [aoffBlockDesc+bx],si
 35076 00003B26 89DF                            mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 35077 00003B28 E8B805                          call    skip_token      ;
 35078 00003B2B 720B                            jc	short menu_nextitem ; hit eol/eof
 35079 00003B2D E8C905                          call    skip_delim      ;
 35080 00003B30 7206                            jc	short menu_nextitem ; hit eol/eof
 35081 00003B32 87DF                            xchg    bx,di           ;
 35082 00003B34 89BF[CF47]                      mov     [aoffBlockDesc+bx],di
 35083                                  
 35084                                  menu_nextitem:
 35085 00003B38 E8D205                          call    skip_opt_line   ;
 35086 00003B3B E969FF                          jmp     menu_process    ; go back for more lines
 35087                                  
 35088                                  ;   Display menu items now, after determining which one is default
 35089                                  
 35090                                  menu_getdefault:
 35091 00003B3E 08D2                            or      dl,dl           ; where there any valid blocks at all?
 35092 00003B40 7505                            jnz	short menu_valid ; yes
 35093 00003B42 29DB                            sub     bx,bx           ; no, so force autoselect of 0
 35094 00003B44 E9ED00                          jmp     menu_autoselect ; (meaning: process common blocks only)
 35095                                  menu_valid:
 35096 00003B47 29DB                            sub     bx,bx           ;
 35097 00003B49 8816[AC47]                      mov     [bMaxBlock],dl  ; first, record how many blocks we found
 35098 00003B4D 8B3E[AD47]                      mov     di,[offDefBlock];
 35099 00003B51 09FF                            or      di,di           ; does a default block exist?
 35100 00003B53 741C                            jz	short menu_nodefault ; no
 35101 00003B55 43                              inc     bx              ; yes, walk name table, looking for default
 35102                                  menu_chkdefault:
 35103 00003B56 53                              push    bx              ;
 35104 00003B57 01DB                            add     bx,bx           ;
 35105 00003B59 8BB7[BB47]                      mov     si,[aoffBlockName+bx]
 35106 00003B5D B98000                          mov     cx,128          ; arbitrary maximum length of a name
 35107 00003B60 1E                              push    ds              ;
 35108 00003B61 06                              push    es              ;
 35109 00003B62 1F                              pop     ds              ;
 35110 00003B63 E82703                          call    comp_names      ; is this block the same as the default?
 35111 00003B66 1F                              pop     ds              ;
 35112 00003B67 5B                              pop     bx              ;
 35113 00003B68 7409                            je	short menu_setdefault ; yes
 35114 00003B6A 43                              inc     bx              ;
 35115 00003B6B 3A1E[AC47]                      cmp     bl,[bMaxBlock]  ; all done searching?
 35116 00003B6F 76E5                            jbe	short menu_chkdefault ; not yet
 35117                                  menu_nodefault:
 35118 00003B71 B301                            mov     bl,1            ; if no default, force default to #1
 35119                                  menu_setdefault:
 35120 00003B73 881E[AB47]                      mov     [bDefBlock],bl  ; yes, this will be the initial current block
 35121                                  
 35122                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 35123                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 35124                                  ;   supposed to skip menu display and run with the specified default block;
 35125                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 35126                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 35127                                  ;   with no timeout)
 35128                                  
 35129 00003B77 803E[AF47]00                    cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 35130 00003B7C 750A                            jne	short menu_display ; no
 35131 00003B7E F606[AA47]01                    test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 35132 00003B83 7503                            jnz	short menu_display ; yes, so *don't* assume default after all
 35133 00003B85 E9C700                          jmp     not_topmenu	;
 35134                                  
 35135                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 35136                                  
 35137                                  menu_display:
 35138 00003B88 B40F                            mov     ah,0Fh          ; get current video mode
 35139 00003B8A CD10                            int     10h             ;
 35140 00003B8C B400                            mov     ah,00h          ; just re-select that mode
 35141 00003B8E CD10                            int     10h             ;
 35142 00003B90 06                              push    es              ;
 35143 00003B91 B84000                          mov     ax,40h          ; reach down into the ROM BIOS data area
 35144 00003B94 8EC0                            mov     es,ax           ; and save the current (default) video page
 35145 00003B96 26A14E00                        mov     ax,[es:004Eh]   ; start address and page #, in case the
 35146 00003B9A A3[A847]                        mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 35147 00003B9D 26A06200                        mov     al,[es:0062h]   ;
 35148 00003BA1 A2[A747]                        mov     [bCRTPage],al   ;
 35149 00003BA4 A1[A247]                        mov     ax,[bMenuPage]	; select new page for menu
 35150 00003BA7 CD10                            int     10h             ;
 35151 00003BA9 B80006                          mov     ax,0600h        ; clear entire screen
 35152 00003BAC 8A3E[A147]                      mov     bh,[bMenuColor] ; using this color
 35153 00003BB0 29C9                            sub     cx,cx           ; upper left row/col
 35154                                          ;mov	dl,[es:CRT_Cols] 
 35155 00003BB2 268A164A00                      mov	dl,[es:4Ah]
 35156 00003BB7 FECA                    	dec     dl              ;
 35157                                          ;mov	dh,[es:CRT_Rows];
 35158 00003BB9 268A368400                      mov	dh,[es:84h]
 35159 00003BBE 08F6                    	or      dh,dh           ; # of rows valid?
 35160 00003BC0 7504                            jnz	short menu_clear ; hopefully
 35161 00003BC2 8A36[A547]                      mov     dh,[bLastRow]   ; no, use a default
 35162                                  menu_clear:
 35163 00003BC6 CD10                            int     10h             ; clear the screen using the req. attribute
 35164 00003BC8 07                              pop     es              ;
 35165 00003BC9 8836[A547]                      mov     [bLastRow],dh   ; save DH
 35166 00003BCD BA[B84C]                        mov     dx,_$MenuHeader
 35167 00003BD0 E8A509                          call    print           ; cursor now on row 3 (numbered from 0)
 35168                                  
 35169 00003BD3 F606[A647]01                    test    byte [bDisableUI],1
 35170 00003BD8 751F                            jnz     short menu_nostatus
 35171 00003BDA 8A3E[A247]                      mov     bh,[bMenuPage]  ;
 35172 00003BDE 8A36[A547]                      mov     dh,[bLastRow]   ; restore DH
 35173 00003BE2 B200                            mov     dl,0            ; print the status line on row DH, col 0,
 35174 00003BE4 B402                            mov     ah,02h          ; now that we can trash the cursor position
 35175 00003BE6 CD10                            int     10h             ;
 35176 00003BE8 BA[044D]                        mov     dx,_$StatusLine
 35177 00003BEB E88A09                          call    print           ;
 35178 00003BEE B403                            mov     ah,3            ; get cursor position
 35179 00003BF0 CD10                            int     10h             ;
 35180 00003BF2 80EA02                          sub     dl,2            ;
 35181 00003BF5 8816[A447]                      mov     [bLastCol],dl   ; save column where status char will go
 35182                                  
 35183                                  menu_nostatus:
 35184 00003BF9 BB0100                          mov     bx,1            ; now prepare to display all the menu items
 35185                                  menu_disploop:
 35186 00003BFC E8BD02                          call    print_item	; print item #BL
 35187 00003BFF 43                              inc     bx              ; why "inc bx"?  because it's a 1-byte opcode
 35188 00003C00 3A1E[AC47]                      cmp     bl,[bMaxBlock]  ; all done?
 35189 00003C04 76F6                            jbe	short menu_disploop ; not yet
 35190                                  
 35191                                  ;   Set cursor position to just below the menu items
 35192                                  
 35193 00003C06 B200                            mov     dl,0            ; select column
 35194 00003C08 88DE                            mov     dh,bl           ;
 35195 00003C0A 80C604                          add     dh,4            ; select row below menu
 35196 00003C0D 8A3E[A247]                      mov     bh,[bMenuPage]  ;
 35197 00003C11 B402                            mov     ah,02h          ; set cursor position beneath the block list
 35198 00003C13 CD10                            int     10h             ;
 35199                                  
 35200 00003C15 BA[F14C]                        mov     dx,_$MenuPrmpt
 35201 00003C18 E85D09                          call    print           ;
 35202 00003C1B E83603                          call    select_item     ; make a selection, return # in BX
 35203 00003C1E BA[C44A]                        mov     dx,crlfm	
 35204 00003C21 E85409                          call    print           ;
 35205 00003C24 FF36[A647]                      push    word [bDisableUI]
 35206 00003C28 800E[A647]01                    or      byte [bDisableUI],1
 35207 00003C2D E87404                          call    show_status     ; clear the status line now
 35208 00003C30 8F06[A647]                      pop     word [bDisableUI]
 35209                                  
 35210                                  ;   Now begins the "re-organization" process...
 35211                                  
 35212                                  menu_autoselect:
 35213 00003C34 83FBFF                          cmp     bx,-1           ; clean boot requested?
 35214 00003C37 7508                            jne	short normal_boot ; no
 35215 00003C39 E80106                          call    disable_autoexec; basically, add a /D to the command.com line
 35216                                  menu_abort:
 35217 00003C3C 29C9                            sub     cx,cx           ; then immediately exit with 0 config.sys image
 35218 00003C3E E9EE00                          jmp	menu_exit	;
 35219                                  
 35220                                  normal_boot:
 35221 00003C41 83FBFE                          cmp     bx,-2           ; back to top-level menu?
 35222 00003C44 7509                            jne	short not_topmenu ; no
 35223 00003C46 8B0E[5403]                      mov     cx,[count]      ; yes, start all over
 35224 00003C4A 29F6                            sub     si,si           ;
 35225 00003C4C E9F7FD                          jmp     menu_search
 35226                                  
 35227                                  not_topmenu:
 35228 00003C4F 80BF[B147]4F                    cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 35229 00003C54 7510                            jne	short not_submenu
 35230 00003C56 01DB                            add     bx,bx           ;
 35231 00003C58 8BBF[BB47]                      mov     di,[aoffBlockName+bx]
 35232 00003C5C E8EE01                          call    srch_block      ; THIS CANNOT FAIL!
 35233 00003C5F 89FE                            mov     si,di           ;
 35234 00003C61 89D9                            mov     cx,bx           ; ES:SI and CX are ready for another round
 35235 00003C63 E927FE                          jmp     menu_found
 35236                                  
 35237                                  not_submenu:
 35238 00003C66 01DB                            add     bx,bx           ; get BX -> name of selected block
 35239 00003C68 8B9F[BB47]                      mov     bx,[aoffBlockName+bx]
 35240                                  
 35241                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 35242                                  ;   the offset relative to ES of the block name to be processed (along with
 35243                                  ;   all the "common" lines of course)
 35244                                  
 35245                                  no_selection:
 35246 00003C6C 891E[AD47]                      mov     [offDefBlock],bx; save selection
 35247 00003C70 8B0E[5403]                      mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 35248 00003C74 29F6                            sub     si,si           ;
 35249 00003C76 1E                              push    ds              ;
 35250 00003C77 8E1E[DB14]                      mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 35251 00003C7B 29FF                            sub     di,di           ;
 35252                                  
 35253                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 35254                                  ;
 35255                                  ;   Work our way through the config.sys image again, this time copying
 35256                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 35257                                  ;   within the requested block. Lines inside INCLUDEd blocks are transparently
 35258                                  ;   copied by copy_block in a recursive fashion; the amount of recursion is
 35259                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 35260                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 35261                                  ;
 35262                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 35263                                  ;   stack we're running on, then we should check it inside copy_block
 35264                                  
 35265                                  copyblock_loop:
 35266 00003C7D 53                              push    bx              ; save selected block name
 35267 00003C7E E83C01                          call    copy_block      ; process (named or common) block
 35268 00003C81 5B                              pop     bx              ;
 35269 00003C82 723C                            jc	short move_config ; hit eof
 35270                                  
 35271                                  ;   copy_block can only return for two reasons: it hit eof or a new block
 35272                                  
 35273                                  copyblock_begin:
 35274 00003C84 50                              push    ax              ;
 35275 00003C85 51                              push    cx              ;
 35276 00003C86 56                              push    si              ;
 35277 00003C87 57                              push    di              ; always do "common" blocks
 35278 00003C88 BF[F047]                        mov     di,szCommon
 35279 00003C8B 1E                              push    ds              ;
 35280 00003C8C 0E                              push    cs              ;
 35281 00003C8D 1F                              pop     ds              ;
 35282 00003C8E E8FC01                          call    comp_names      ;
 35283 00003C91 1F                              pop     ds              ;
 35284 00003C92 5F                              pop     di              ;
 35285 00003C93 5E                              pop     si              ;
 35286 00003C94 59                              pop     cx              ;
 35287 00003C95 58                              pop     ax              ;
 35288 00003C96 740F                            je	short copyblock_check
 35289 00003C98 09DB                            or      bx,bx           ; is there a block name to check?
 35290 00003C9A 7414                            jz	short copyblock_skip ; no
 35291 00003C9C 57                              push    di              ;
 35292 00003C9D 89DF                            mov     di,bx           ; check block against given block name
 35293 00003C9F 1E                              push    ds              ;
 35294 00003CA0 06                              push    es              ;
 35295 00003CA1 1F                              pop     ds              ;
 35296 00003CA2 E8E801                          call    comp_names      ; is this the block we really want to do?
 35297 00003CA5 1F                              pop     ds              ;
 35298 00003CA6 5F                              pop     di              ;
 35299                                  copyblock_check:
 35300 00003CA7 7217                            jc	short move_config ; hit eof
 35301 00003CA9 7505                            jne	short copyblock_skip  ;
 35302 00003CAB E85F04                          call    skip_opt_line   ;
 35303 00003CAE EBCD                            jmp	short copyblock_loop 
 35304                                  
 35305                                  copyblock_skip:                 ;
 35306 00003CB0 E85A04                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 35307 00003CB3 E87D04                          call    get_char        ;
 35308 00003CB6 7208                            jc	short move_config ; hit eof
 35309 00003CB8 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 35310 00003CBA 3C5B                            cmp     al,CONFIG_BEGIN ;
 35311 00003CBC 74C6                            je	short copyblock_begin
 35312 00003CBE EBF0                            jmp     short copyblock_skip ; anything else is just skipped
 35313                                  ;
 35314                                  ;   To create as little risk to the rest of SysInit as little as possible,
 35315                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 35316                                  ;   copy the new config.sys image to "confbot"
 35317                                  ;
 35318                                  move_config:
 35319 00003CC0 89F9                            mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 35320 00003CC2 51                              push    cx              ;
 35321                                  ;
 35322                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 35323                                  ;   since the configuration name only currently exists in the "confbot" area
 35324                                  ;
 35325                                   	;mov	cx,7
 35326 00003CC3 B90700                  	mov     cx,szMenu-szBoot-1
 35327 00003CC6 BE[E347]                        mov     si,szBoot	; first copy the CONFIG= part
 35328 00003CC9 47                              inc     di              ; skip a byte, in case absolutely nothing
 35329                                                                  ; was copied to the workspace, because we always
 35330                                                                  ; zero the first byte of the workspace (below)
 35331                                  copy_boot: 
 35332                                  	;lods    byte ptr cs:[si];
 35333 00003CCA 2E                              cs
 35334 00003CCB AC                      	lodsb
 35335 00003CCC 8805                    	mov     [di],al         ;
 35336 00003CCE 47                              inc     di              ;
 35337 00003CCF E2F9                            loop    copy_boot       ;
 35338                                  
 35339 00003CD1 06                              push    es              ; then copy the configuration name
 35340                                          ;mov	cx,128-7	; put an upper limit on the name, to be safe
 35341                                  	; 04/01/2023
 35342 00003CD2 B179                    	mov	cl,128-7
 35343 00003CD4 2E8B36[AD47]            	mov     si,[cs:offDefBlock]; ES:SI -> default block name
 35344 00003CD9 09F6                            or      si,si           ; valid?
 35345 00003CDB 7505                            jnz	short l1	; yes
 35346 00003CDD 0E                              push    cs              ;
 35347 00003CDE 07                              pop     es              ;
 35348 00003CDF BE[F047]                        mov     si,szCommon
 35349 00003CE2 268A04                  l1:     mov     al,[es:si]      ;
 35350 00003CE5 E8B805                          call    any_delim       ;
 35351 00003CE8 7406                            je	short l2	;
 35352 00003CEA 8805                            mov     [di],al         ;
 35353 00003CEC 46                              inc     si              ;
 35354 00003CED 47                              inc     di              ;
 35355 00003CEE E2F2                            loop    l1              ;
 35356 00003CF0 C6050A                  l2:     mov     byte [di],lf	; terminate the configuration string
 35357 00003CF3 07                              pop     es              ;
 35358                                  
 35359                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 35360                                  
 35361 00003CF4 29FF                            sub     di,di           ;
 35362 00003CF6 2E893E[D914]                    mov     [cs:config_envlen],di
 35363 00003CFB 29F6                            sub     si,si           ;
 35364 00003CFD 59                              pop     cx              ; recover the size of "config_wrkseg"
 35365                                  
 35366 00003CFE 51                              push    cx              ;
 35367 00003CFF F3A4                            rep     movsb           ; moved!
 35368 00003D01 59                              pop     cx              ;
 35369 00003D02 8CD8                            mov     ax,ds           ;
 35370 00003D04 1F                              pop     ds              ;
 35371                                  
 35372                                  ;   Now that the config_wrkseg is available once again, we shall
 35373                                  ;   use it to create an environment. The first thing to go in will be
 35374                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 35375                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 35376                                  ;   is empty.
 35377                                  
 35378 00003D05 06                              push    es              ;
 35379 00003D06 8EC0                            mov     es,ax           ;
 35380 00003D08 46                              inc     si              ; ES:SI -> "CONFIG=configuration"
 35381 00003D09 26C606000000                    mov     byte [es:0],0	; empty the environment block
 35382 00003D0F E82800                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 35383 00003D12 07                              pop     es
 35384                                  
 35385                                  ;   Before returning, restore the default video page setting but do NOT
 35386                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 35387                                  ;   displayed on a different page, then it's because we don't want to see
 35388                                  ;   all the device driver/TSR goop (which goes to the default page)
 35389                                  
 35390                                  menu_done:
 35391 00003D13 803E[A247]00                    cmp     byte [bMenuPage],0
 35392 00003D18 7415                            je	short menu_exit	;
 35393 00003D1A 06                              push    es              ;
 35394 00003D1B B84000                          mov     ax,40h          ;
 35395 00003D1E 8EC0                            mov     es,ax           ;
 35396 00003D20 A1[A847]                        mov     ax,[wCRTStart]  ;
 35397 00003D23 26A34E00                        mov     [es:004Eh],ax   ;
 35398 00003D27 A0[A747]                        mov     al,[bCRTPage]   ;
 35399 00003D2A 26A26200                        mov     [es:0062h],al   ;
 35400 00003D2E 07                              pop     es              ;
 35401                                  menu_exit:
 35402 00003D2F 890E[5403]                      mov     [count],cx      ; set new counts
 35403 00003D33 890E[5603]                      mov     [org_count],cx  ;
 35404 00003D37 29F6                            sub     si,si           ; always return ES:SI pointing to config.sys
 35405 00003D39 C3                              retn
 35406                                  
 35407                                  ;----------------------------------------------------------------------------
 35408                                  ;
 35409                                  ;   copy_envvar: copy the envvar at ES:SI to "config_wrkseg"
 35410                                  ;
 35411                                  ;   INPUT
 35412                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 35413                                  ;
 35414                                  ;   OUTPUT
 35415                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 35416                                  ;       carry set if error (eg, missing =); clear otherwise
 35417                                  ;
 35418                                  ;   OTHER REGS USED
 35419                                  ;       None
 35420                                  ;
 35421                                  ;   NOTES
 35422                                  ;       None
 35423                                  ;
 35424                                  ;   HISTORY
 35425                                  ;       Created 29-Mar-1992 by JeffPar
 35426                                  ;
 35427                                  ;----------------------------------------------------------------------------
 35428                                  
 35429                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 35430                                  	; (SYSINIT:46D4h)
 35431                                  
 35432                                  copy_envvar:
 35433 00003D3A 51                              push    cx              ;
 35434 00003D3B 56                              push    si              ;
 35435 00003D3C 1E                              push    ds              ;
 35436 00003D3D 06                              push    es              ;
 35437 00003D3E 06                              push    es              ;
 35438 00003D3F 8E06[DB14]                      mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 35439 00003D43 1F                              pop     ds                 ; DS:SI to point to envvar
 35440                                  
 35441                                  ;   Have to calculate the length of the variable name (and if we hit
 35442                                  ;   the end of the line before we hit '=', then it's curtains for this
 35443                                  ;   config.sys line)
 35444                                  ;
 35445                                  ;   The check for NULL is important because copy_envvar is also used to copy
 35446                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 35447                                  ;   menu block existed (in order to prevent the creation of an environment)
 35448                                  
 35449 00003D44 29C9                            sub     cx,cx           ;
 35450                                  copy_varlen:                    ;
 35451 00003D46 AC                              lodsb                   ;
 35452 00003D47 08C0                            or      al,al           ; NULL?
 35453 00003D49 F9                              stc                     ;
 35454 00003D4A 746C                            jz	short copy_envexit ; yes, abort
 35455 00003D4C 3C0D                            cmp     al,cr          ;
 35456 00003D4E F9                              stc                     ;
 35457 00003D4F 7467                            je	short copy_envexit
 35458 00003D51 3C0A                            cmp     al,lf          ;
 35459 00003D53 F9                              stc                     ;
 35460 00003D54 7462                            je	short copy_envexit
 35461 00003D56 41                              inc     cx              ;
 35462 00003D57 3C3D                            cmp     al,'='          ;
 35463 00003D59 75EB                            jne	short copy_varlen
 35464 00003D5B B000                            mov     al,0            ;
 35465 00003D5D 8A24                            mov     ah,[si]         ; save char after '='
 35466 00003D5F 29CE                            sub     si,cx           ; back up to given varname
 35467 00003D61 49                              dec     cx              ; CX == # of bytes in varname
 35468 00003D62 29FF                            sub     di,di           ; start looking for DS:SI at ES:0
 35469                                  copy_varsrch:
 35470 00003D64 263805                          cmp     byte [es:di],al
 35471 00003D67 7425                            je	short copy_envprep ; search failed, just copy var
 35472 00003D69 89FB                            mov     bx,di           ; ES:BX -> start of this varname
 35473 00003D6B 51                              push    cx              ;
 35474 00003D6C 56                              push    si              ;
 35475 00003D6D F3A6                            repe    cmpsb           ;
 35476 00003D6F 5E                              pop     si              ;
 35477 00003D70 59                              pop     cx              ;
 35478 00003D71 7531                            jne	short copy_varnext ; no match, skip to next varname
 35479 00003D73 26803D3D                        cmp     byte [es:di],'='
 35480 00003D77 752B                            jne     short copy_varnext ; no match, there's more characters
 35481                                  
 35482                                  ;   Previous occurrence of variable has been found; determine the
 35483                                  ;   entire length and then destroy it
 35484                                  
 35485 00003D79 B9FFFF                          mov     cx,-1           ;
 35486 00003D7C F2AE                            repne   scasb           ; guaranteed to get null (since we put it there)
 35487 00003D7E 56                              push    si              ;
 35488 00003D7F 89FE                            mov     si,di           ;
 35489 00003D81 89DF                            mov     di,bx           ;
 35490 00003D83 2E8B0E[D914]                    mov     cx,[cs:config_envlen]
 35491 00003D88 29F1                            sub     cx,si           ; destroy variable now
 35492                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 35493                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO:SYS - SYSINIT:4724h
 35494                                  
 35495 00003D8A F3                      	rep	; 0F3h
 35496 00003D8B 26                      	es	; 26h
 35497 00003D8C A4                      	movsb	; 0A4h
 35498                                  
 35499 00003D8D 5E                      	pop     si
 35500                                  copy_envprep:
 35501 00003D8E 80FC0D                          cmp     ah,cr          ; if there is nothing after the '='
 35502 00003D91 741D                            je	short copy_envdel ; then just exit with variable deleted
 35503 00003D93 80FC0A                          cmp     ah,lf           ;
 35504 00003D96 7418                            je	short copy_envdel
 35505                                          ;jmp	short copy_envloop
 35506                                  	; 04/01/2023
 35507                                  copy_envloop:                  ;
 35508 00003D98 AC                      	lodsb                   ;
 35509 00003D99 3C0D                    	cmp	al,cr           ;
 35510 00003D9B 7410                    	je	short copy_envdone
 35511 00003D9D 3C0A                    	cmp	al,lf           ;
 35512 00003D9F 740C                    	je	short copy_envdone
 35513 00003DA1 AA                      	stosb                   ;
 35514 00003DA2 EBF4                    	jmp	short copy_envloop
 35515                                  
 35516                                  copy_varnext:                   ;
 35517 00003DA4 51                              push    cx              ;
 35518 00003DA5 B9FFFF                          mov     cx,-1           ;
 35519 00003DA8 F2AE                            repne   scasb           ;
 35520 00003DAA 59                              pop     cx              ;
 35521 00003DAB EBB7                            jmp	short copy_varsrch
 35522                                  
 35523                                  	; 04/01/2023
 35524                                  ;copy_envloop:                  ;
 35525                                  ;	lodsb                   ;
 35526                                  ;	cmp	al,cr           ;
 35527                                  ;	je	short copy_envdone
 35528                                  ;	cmp	al,lf           ;
 35529                                  ;	je	short copy_envdone
 35530                                  ;	stosb                   ;
 35531                                  ;	jmp	short copy_envloop
 35532                                  
 35533                                  copy_envdone:                   ;
 35534 00003DAD 28C0                            sub     al,al           ; do SUB to clear carry as well
 35535 00003DAF AA                              stosb                   ; always null-terminate these puppies
 35536                                  copy_envdel:                    ;
 35537 00003DB0 268805                          mov     [es:di],al      ; and stick another null to terminate the env.
 35538 00003DB3 2E893E[D914]                    mov     [cs:config_envlen],di
 35539                                  
 35540                                  copy_envexit:                   ;
 35541 00003DB8 07                              pop     es              ;
 35542 00003DB9 1F                              pop     ds              ;
 35543 00003DBA 5E                              pop     si              ;
 35544 00003DBB 59                              pop     cx              ;
 35545                                  
 35546                                  copy_done:	; 18/12/2022
 35547 00003DBC C3                              retn
 35548                                  
 35549                                  ;----------------------------------------------------------------------------
 35550                                  ;
 35551                                  ;   copy_block: copy the current block to the new config.sys workspace
 35552                                  ;
 35553                                  ;   INPUT
 35554                                  ;       CX == remaining bytes in "organized" config.sys memory image
 35555                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 35556                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 35557                                  ;             config.sys image) where the current block is to be copied
 35558                                  ;
 35559                                  ;   OUTPUT
 35560                                  ;       Same as above
 35561                                  ;       AL also equals the last character read from the organized image
 35562                                  ;
 35563                                  ;   OTHER REGS USED
 35564                                  ;       All
 35565                                  ;
 35566                                  ;   NOTES
 35567                                  ;       None
 35568                                  ;
 35569                                  ;   HISTORY
 35570                                  ;       Created 16-Mar-1992 by JeffPar
 35571                                  ;
 35572                                  ;----------------------------------------------------------------------------
 35573                                  
 35574                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 35575                                  	; (SYSINIT:4759h)
 35576                                  
 35577                                  copy_block:
 35578 00003DBD E87303                          call    get_char        ; check for include
 35579 00003DC0 72FA                            jc	short copy_done	;
 35580 00003DC2 247F                    	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 35581 00003DC4 3C5B                    	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 35582 00003DC6 74F4                            je	short copy_done ;
 35583                                  
 35584 00003DC8 3C4A                            cmp     al,CONFIG_INCLUDE ; 'J'
 35585 00003DCA 88E0                            mov     al,ah           ; AL == the original line code
 35586 00003DCC 753A                            jne	short copy_line	; not an "include" line
 35587                                  
 35588                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 35589                                  ;   never try to include the block again (no infinite include loops please),
 35590                                  ;   then search for the named block and call copy_block again.
 35591                                  
 35592 00003DCE 26C644FF30                      mov     byte [es:si-1],CONFIG_REM ; '0'
 35593 00003DD3 57                              push    di              ;
 35594                                  
 35595 00003DD4 BF[EB47]                        mov     di,szMenu
 35596 00003DD7 E8D400                          call    comp_names_safe ; don't allow INCLUDE MENU
 35597 00003DDA 7425                            je	short copy_skip	;
 35598                                  
 35599 00003DDC BF[F047]                        mov     di,szCommon
 35600 00003DDF E8CC00                          call    comp_names_safe ; don't allow INCLUDE COMMON
 35601 00003DE2 741D                            je	short copy_skip	;
 35602                                  
 35603 00003DE4 89F7                            mov     di,si           ; try to find the block
 35604 00003DE6 E86400                          call    srch_block      ;
 35605 00003DE9 89FA                            mov     dx,di           ;
 35606 00003DEB 5F                              pop     di              ;
 35607 00003DEC 7514                            jne	short copy_error ; no such block
 35608 00003DEE 51                              push    cx              ;
 35609 00003DEF 89D9                            mov     cx,bx           ;
 35610 00003DF1 56                              push    si              ;
 35611 00003DF2 4A                              dec     dx              ;
 35612 00003DF3 89D6                            mov     si,dx           ;
 35613 00003DF5 E81003                          call    skip_line       ; skip the rest of the "block name" line
 35614 00003DF8 E8C2FF                          call    copy_block      ; and copy in the rest of that block
 35615 00003DFB 5E                              pop     si              ;
 35616 00003DFC 59                              pop     cx              ;
 35617 00003DFD 28C0                            sub     al,al           ; force skip_opt_line to skip...
 35618 00003DFF EB2B                            jmp     short copy_nextline
 35619                                  
 35620                                  copy_skip:
 35621 00003E01 5F                              pop     di
 35622                                  copy_error:
 35623 00003E02 F8                              clc                     ;
 35624 00003E03 E80304                          call    print_error     ; note that carry is clear, no pause
 35625 00003E06 EB24                            jmp     short copy_nextline
 35626                                  
 35627                                  ;   Copy the line at ES:SI to the current location at DS:DI
 35628                                  
 35629                                  copy_line:
 35630 00003E08 8805                            mov     [di],al         ;
 35631 00003E0A 47                              inc     di              ;
 35632 00003E0B 3C20                            cmp     al,' '          ; is this is a "real" line with a "real" code?
 35633 00003E0D 721D                            jb	short copy_nextline ; no
 35634 00003E0F 2E803E[DE14]00                  cmp     byte [cs:config_multi],0
 35635 00003E15 7409                            je	short copy_loop	; not a multi-config config.sys, don't embed #s
 35636 00003E17 E81700                          call    get_linenum	; BX == line # of line @ES:SI
 35637 00003E1A 891D                            mov     [di],bx         ; stash it immediately following the line code
 35638 00003E1C 47                              inc     di              ;
 35639 00003E1D 47                              inc     di              ;
 35640 00003E1E EB08                            jmp     short copy_next ;
 35641                                  copy_loop:                      ;
 35642 00003E20 E81003                          call    get_char        ;
 35643 00003E23 7297                            jc	short copy_done ; end of file
 35644 00003E25 8805                            mov     [di],al         ;
 35645 00003E27 47                              inc     di              ;
 35646                                  copy_next:
 35647 00003E28 3C0A                            cmp     al,lf ; 0Ah	; done with line?
 35648 00003E2A 75F4                            jne	short copy_loop	; nope
 35649                                  
 35650                                  copy_nextline:
 35651 00003E2C E8DE02                          call    skip_opt_line   ;
 35652 00003E2F EB8C                            jmp     short copy_block
 35653                                  
 35654                                  	; 18/12/2022
 35655                                  ;copy_done:
 35656                                          ;retn
 35657                                  
 35658                                  ;----------------------------------------------------------------------------
 35659                                  ;
 35660                                  ;   get_linenum: return line # (in BX) of current line (@ES:SI)
 35661                                  ;
 35662                                  ;   INPUT
 35663                                  ;    ES:SI -> some line in the config.sys memory image
 35664                                  ;
 35665                                  ;   OUTPUT
 35666                                  ;       BX == line # (relative to 1)
 35667                                  ;
 35668                                  ;   OTHER REGS USED
 35669                                  ;       DX
 35670                                  ;
 35671                                  ;   NOTES
 35672                                  ;       None
 35673                                  ;
 35674                                  ;   HISTORY
 35675                                  ;       Created 16-Mar-1992 by JeffPar
 35676                                  ;
 35677                                  ;----------------------------------------------------------------------------
 35678                                  
 35679                                  get_linenum:
 35680 00003E31 50                              push    ax              ;
 35681 00003E32 29DB                            sub     bx,bx           ; BX == line # (to be returned)
 35682 00003E34 51                              push    cx              ;
 35683 00003E35 89F2                            mov     dx,si           ; DX == the offset we're looking for
 35684 00003E37 56                              push    si              ;
 35685 00003E38 2E8B0E[5403]                    mov     cx,[cs:count]   ;
 35686 00003E3D 29F6                            sub     si,si           ; prepare to scan entire file
 35687                                  get_linenum_loop:               ;
 35688 00003E3F E8C602                          call    skip_line       ;
 35689 00003E42 7205                            jc	short get_linenum_done
 35690 00003E44 43                              inc     bx              ;
 35691 00003E45 39D6                            cmp     si,dx           ; have we exceeded the desired offset yet?
 35692 00003E47 72F6                            jb	short get_linenum_loop ; no
 35693                                  get_linenum_done:               ;
 35694 00003E49 5E                              pop     si              ;
 35695 00003E4A 59                              pop     cx              ;
 35696 00003E4B 58                              pop     ax              ;
 35697 00003E4C C3                              retn
 35698                                  
 35699                                  ;----------------------------------------------------------------------------
 35700                                  ;
 35701                                  ;   srch_block: searches entire config.sys for block name @ES:DI
 35702                                  ;
 35703                                  ;   INPUT
 35704                                  ;       ES -> config.sys image
 35705                                  ;    ES:DI -> block name to find
 35706                                  ;
 35707                                  ;   OUTPUT
 35708                                  ;       ZF flag set, if found
 35709                                  ;    ES:DI -> just past the name in the block heading, if found
 35710                                  ;       BX == # bytes remaining from that point, if found
 35711                                  ;
 35712                                  ;   OTHER REGS USED
 35713                                  ;       None
 35714                                  ;
 35715                                  ;   NOTES
 35716                                  ;       This differs from "find_block" in that it searches the ENTIRE
 35717                                  ;       config.sys image, not merely the remaining portion, and that it
 35718                                  ;       takes a pointer to block name that is *elsewhere* in the image
 35719                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 35720                                  ;
 35721                                  ;   HISTORY
 35722                                  ;       Created 16-Mar-1992 by JeffPar
 35723                                  ;
 35724                                  ;----------------------------------------------------------------------------
 35725                                  
 35726                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 35727 00003E4D 50                              push    ax              ;
 35728 00003E4E 51                              push    cx              ;
 35729 00003E4F 2E8B0E[5403]                    mov     cx,[cs:count]   ;
 35730 00003E54 56                              push    si              ;
 35731 00003E55 29F6                            sub     si,si           ;
 35732 00003E57 1E                              push    ds              ;
 35733 00003E58 06                              push    es              ;
 35734 00003E59 1F                              pop     ds              ;
 35735 00003E5A E80900                          call    find_block      ;
 35736 00003E5D 89F7                            mov     di,si           ;
 35737 00003E5F 89CB                            mov     bx,cx           ;
 35738 00003E61 1F                              pop     ds              ;
 35739 00003E62 5E                              pop     si              ;
 35740 00003E63 59                              pop     cx              ;
 35741 00003E64 58                              pop     ax              ;
 35742                                  find_exit: ; 16/04/2019
 35743 00003E65 C3                              retn			;
 35744                                  
 35745                                  ;----------------------------------------------------------------------------
 35746                                  ;
 35747                                  ;   find_block: searches rest of config.sys for block name @DS:DI
 35748                                  ;
 35749                                  ;   INPUT
 35750                                  ;    DS:DI -> block name to find
 35751                                  ;    ES:SI -> remainder of config.sys image
 35752                                  ;       CX == remaining size of config.sys image
 35753                                  ;
 35754                                  ;   OUTPUT
 35755                                  ;       ZF flag set, if found (also, CF set if EOF)
 35756                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 35757                                  ;       CX == # bytes remaining from that point
 35758                                  ;
 35759                                  ;   OTHER REGS USED
 35760                                  ;       AX
 35761                                  ;
 35762                                  ;   NOTES
 35763                                  ;       This differs from "srch_block" in that it searches only the
 35764                                  ;       remaining portion of the config.sys image and leaves SI and CX
 35765                                  ;       pointing to where the search left off, and that it takes a pointer
 35766                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 35767                                  ;
 35768                                  ;   HISTORY
 35769                                  ;       Created 16-Mar-1992 by JeffPar
 35770                                  ;
 35771                                  ;----------------------------------------------------------------------------
 35772                                  
 35773                                  find_block:
 35774 00003E66 E8CA02                          call    get_char        ; get line code
 35775 00003E69 72FA                            jc	short find_exit	; end of file
 35776 00003E6B 247F                            and     al,~CONFIG_OPTION_QUERY
 35777 00003E6D 3C5B                            cmp     al,CONFIG_BEGIN ; beginning of a block?
 35778 00003E6F 740C                            je	short check_line ; no
 35779 00003E71 3C4A                            cmp     al,CONFIG_INCLUDE
 35780 00003E73 7513                            jne	short next_line	;
 35781 00003E75 2E800E[DE14]01                  or	byte [cs:config_multi],1
 35782 00003E7B EB0B                            jmp     short next_line ;
 35783                                  check_line:
 35784 00003E7D 2E800E[DE14]01                  or      byte [cs:config_multi],1
 35785 00003E83 E80700                          call    comp_names      ; compare block names
 35786 00003E86 76DD                            jbe	short find_exit	; end of file, or names matched
 35787                                  next_line:
 35788 00003E88 E88202                          call    skip_opt_line   ; no, so skip to next line
 35789 00003E8B EBD9                            jmp	short find_block  ;
 35790                                  ;find_exit:
 35791                                  ;	retn
 35792                                  
 35793                                  ;----------------------------------------------------------------------------
 35794                                  ;
 35795                                  ;   comp_names: compares keyword @DS:DI to position in config.sys @ES:SI
 35796                                  ;
 35797                                  ;   INPUT
 35798                                  ;    DS:DI -> keyword to compare
 35799                                  ;    ES:SI -> position in config.sys
 35800                                  ;       CX == remaining bytes in config.sys
 35801                                  ;
 35802                                  ;   OUTPUT
 35803                                  ;       ZF flag set, if match (also, CF set if EOF)
 35804                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 35805                                  ;       CX == # bytes remaining from that point
 35806                                  ;
 35807                                  ;   OTHER REGS USED
 35808                                  ;       AX
 35809                                  ;
 35810                                  ;   NOTES
 35811                                  ;       None
 35812                                  ;
 35813                                  ;   HISTORY
 35814                                  ;       Created 16-Mar-1992 by JeffPar
 35815                                  ;
 35816                                  ;----------------------------------------------------------------------------
 35817                                  
 35818                                  comp_names:
 35819 00003E8D 57                              push    di              ;
 35820                                  comp_loop:                      ;
 35821 00003E8E E8A202                          call    get_char        ;
 35822 00003E91 7210                            jc	short comp_exit	;
 35823 00003E93 E80A04                          call    any_delim       ; is next character a delimiter?
 35824 00003E96 8A25                            mov     ah,[di]         ; (get next character we're supposed to match)
 35825 00003E98 740B                            je	short comp_almost ; yes, it *could* be a match
 35826 00003E9A 47                              inc     di              ;
 35827 00003E9B 25DFDF                          and     ax,~2020h ; 0DFDFh 
 35828                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 35829 00003E9E 38E0                            cmp     al,ah           ; match?
 35830 00003EA0 74EC                            je	short comp_loop ; yes, keep looking at the characters
 35831 00003EA2 F8                              clc                     ; prevent erroneous eof indication: clear carry
 35832                                  comp_exit:                      ;
 35833 00003EA3 5F                              pop     di              ;
 35834 00003EA4 C3                              retn			;
 35835                                  comp_almost:                    ;
 35836 00003EA5 86C4                            xchg    al,ah           ; we don't know for sure if it's a match
 35837 00003EA7 E8F603                          call    any_delim       ; until we verify that the second string has
 35838 00003EAA 86C4                            xchg    al,ah           ; been exhausted also...
 35839 00003EAC EBF5                            jmp     short comp_exit ; if we are, this call to any_delim will tell...
 35840                                  
 35841                                  ;----------------------------------------------------------------------------
 35842                                  
 35843                                  comp_names_safe:
 35844 00003EAE 50                              push    ax
 35845 00003EAF 51                              push    cx
 35846 00003EB0 56                              push	si
 35847 00003EB1 1E                              push    ds
 35848 00003EB2 0E                              push    cs
 35849 00003EB3 1F                              pop     ds
 35850 00003EB4 E8D6FF                          call    comp_names
 35851 00003EB7 1F                              pop     ds
 35852 00003EB8 5E                      	pop	si
 35853 00003EB9 59                              pop     cx
 35854 00003EBA 58                              pop     ax
 35855 00003EBB C3                              retn
 35856                                  
 35857                                  ;----------------------------------------------------------------------------
 35858                                  ;
 35859                                  ;   print_item: display menu item #BL
 35860                                  ;
 35861                                  ;   INPUT
 35862                                  ;       BL == menu item # to display
 35863                                  ;
 35864                                  ;   OUTPUT
 35865                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 35866                                  ;
 35867                                  ;   OTHER REGS USED
 35868                                  ;       None
 35869                                  ;
 35870                                  ;   NOTES
 35871                                  ;       This function saves/restores the current cursor position, so you
 35872                                  ;       needn't worry about it.
 35873                                  ;
 35874                                  ;   HISTORY
 35875                                  ;       Created 16-Mar-1992 by JeffPar
 35876                                  ;
 35877                                  ;----------------------------------------------------------------------------
 35878                                  
 35879                                  	; 04/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35880                                  	; (SYSINIT:485Ah)
 35881                                  
 35882                                  print_item:		; prints menu item #BL (1 to N)
 35883 00003EBC 50                              push    ax              ;
 35884 00003EBD 53                              push    bx              ;
 35885 00003EBE 51                              push    cx              ;
 35886 00003EBF 52                              push    dx              ;
 35887 00003EC0 56                              push    si              ;
 35888 00003EC1 B403                            mov     ah,03h          ; get cursor position
 35889 00003EC3 8A3E[A247]                      mov     bh,[bMenuPage]  ; always page zero
 35890 00003EC7 CD10                            int     10h             ; DH/DL = row/column
 35891 00003EC9 52                              push    dx              ; save it
 35892 00003ECA B402                            mov     ah,02h          ; set cursor position
 35893 00003ECC 88DE                            mov     dh,bl           ;
 35894 00003ECE 80C603                          add     dh,3            ;
 35895 00003ED1 B205                            mov     dl,5            ;
 35896 00003ED3 CD10                            int     10h             ; set cursor position for correct row/col
 35897 00003ED5 88D8                            mov     al,bl           ;
 35898 00003ED7 0430                            add     al,'0'          ; convert menu item # to ASCII digit
 35899 00003ED9 8A26[A147]                      mov     ah,[bMenuColor] ; normal attribute
 35900 00003EDD 3A1E[AB47]                      cmp     bl,[bDefBlock]  ; are we printing the current block?
 35901 00003EE1 7510                            jne	short print_other ; no
 35902 00003EE3 80CC70                          or      ah,70h          ; yes, set bgnd color to white
 35903 00003EE6 88E5                            mov     ch,ah           ;
 35904 00003EE8 B104                            mov     cl,4            ;
 35905 00003EEA D2C5                            rol     ch,cl           ;
 35906 00003EEC 38E5                            cmp     ch,ah           ; are fgnd/bgnd the same?
 35907 00003EEE 7503                            jne	short print_other ; no
 35908 00003EF0 80F408                          xor     ah,08h          ; yes, so modify the fgnd intensity
 35909                                  print_other:                    ;
 35910 00003EF3 B700                            mov     bh,0            ;
 35911 00003EF5 01DB                            add     bx,bx           ;
 35912 00003EF7 8BBF[CF47]                      mov     di,[aoffBlockDesc+bx]
 35913 00003EFB 88E3                            mov     bl,ah           ; put the attribute in the correct register now
 35914 00003EFD 8A3E[A247]                      mov     bh,[bMenuPage]  ; get correct video page #
 35915 00003F01 B409                            mov     ah,09h          ; write char/attr
 35916 00003F03 B90100                          mov     cx,1            ;
 35917 00003F06 CD10                            int     10h             ;
 35918 00003F08 FEC2                            inc     dl              ; increment column
 35919 00003F0A B402                            mov     ah,02h          ;
 35920 00003F0C CD10                            int     10h             ;
 35921                                          ;mov	ax,0900h+'.'    ;
 35922 00003F0E B82E09                          mov	ax,092Eh
 35923 00003F11 CD10                    	int     10h             ; display '.'
 35924 00003F13 FEC2                            inc     dl              ; increment column
 35925 00003F15 B402                            mov     ah,02h          ;
 35926 00003F17 CD10                            int     10h             ;
 35927                                          ;mov	ax,0900h+' '    ;
 35928 00003F19 B82009                          mov	ax,0920h
 35929 00003F1C CD10                    	int     10h             ; display ' '
 35930 00003F1E FEC2                            inc     dl              ; increment column
 35931 00003F20 B402                            mov     ah,02h          ;
 35932 00003F22 CD10                            int     10h             ;
 35933 00003F24 06                              push    es              ;
 35934                                  print_loop:                     ;
 35935 00003F25 268A05                          mov     al,[es:di]	; get a character of the description
 35936 00003F28 47                              inc     di              ;
 35937 00003F29 3C09                            cmp     al,TAB ; 9	; substitute spaces for tabs
 35938 00003F2B 7502                            jne	short print_nontab ;
 35939 00003F2D B020                            mov     al,' '          ;
 35940                                  print_nontab:                   ;
 35941 00003F2F 3C20                            cmp     al,' '          ;
 35942 00003F31 7215                            jb	short print_done ; stop at the 1st character < space
 35943 00003F33 3C24                            cmp     al,'$'          ;
 35944 00003F35 7411                            je	short print_done ; also stop on $
 35945 00003F37 B409                            mov     ah,09h          ; display function #
 35946 00003F39 CD10                            int     10h             ;
 35947 00003F3B FEC2                            inc     dl              ; increment column
 35948 00003F3D 80FA4E                          cmp     dl,78           ; far enough?
 35949 00003F40 7306                            jae	short print_done ; yes
 35950 00003F42 B402                            mov     ah,02h          ;
 35951 00003F44 CD10                            int     10h             ;
 35952 00003F46 EBDD                            jmp	short  print_loop
 35953                                  print_done:                     ;
 35954 00003F48 07                              pop     es              ;
 35955 00003F49 5A                              pop     dx              ;
 35956 00003F4A B402                            mov     ah,02h          ;
 35957 00003F4C CD10                            int     10h             ; restore previous row/col
 35958 00003F4E 5E                              pop     si              ;
 35959 00003F4F 5A                              pop     dx              ;
 35960 00003F50 59                              pop     cx              ;
 35961 00003F51 5B                              pop     bx              ;
 35962 00003F52 58                              pop     ax              ;
 35963 00003F53 C3                              retn			;
 35964                                  
 35965                                  ;----------------------------------------------------------------------------
 35966                                  ;
 35967                                  ;   select_item: wait for user to select menu item, with time-out
 35968                                  ;
 35969                                  ;   INPUT
 35970                                  ;       None
 35971                                  ;
 35972                                  ;   OUTPUT
 35973                                  ;       BX == menu item # (1-N), or -1 for clean boot
 35974                                  ;       Selected menu item highlighted
 35975                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 35976                                  ;
 35977                                  ;   OTHER REGS USED
 35978                                  ;       None
 35979                                  ;
 35980                                  ;   NOTES
 35981                                  ;       None
 35982                                  ;
 35983                                  ;   HISTORY
 35984                                  ;       Created 16-Mar-1992 by JeffPar
 35985                                  ;
 35986                                  ;----------------------------------------------------------------------------
 35987                                  
 35988                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 35989 00003F54 8A1E[AB47]                      mov     bl,[bDefBlock]  ; BL will be the default block #
 35990 00003F58 88D8                            mov     al,bl           ;
 35991 00003F5A E83701                          call    disp_num        ;
 35992 00003F5D E84401                          call    show_status     ; display current interactive status
 35993 00003F60 803E[AF47]FF                    cmp     byte [secTimeOut],-1
 35994 00003F65 7452                            je	short input_key	; no time-out, just go to input
 35995 00003F67 B42C                            mov     ah,GET_TIME ; 2Ch
 35996 00003F69 CD21                            int     21h             ;
 35997 00003F6B 88F7                            mov     bh,dh           ; BH = initial # of seconds
 35998                                  check_time:
 35999 00003F6D A0[AF47]                        mov     al,[secTimeOut] ;
 36000 00003F70 2A06[B047]                      sub     al,[secElapsed] ;
 36001 00003F74 730D                            jae	short show_time	;
 36002 00003F76 800E[AA47]02                    or      byte [bQueryOpt],2 ; disable all further prompting
 36003 00003F7B C606[B047]00                    mov     byte [secElapsed],0
 36004 00003F80 E9F600                          jmp	select_done	; time's up!
 36005                                  show_time:
 36006 00003F83 53                              push    bx              ;
 36007 00003F84 88C3                            mov     bl,al           ; save # in BL
 36008 00003F86 8A3E[A247]                      mov     bh,[bMenuPage]  ;
 36009 00003F8A B403                            mov     ah,03h          ; get cursor position
 36010 00003F8C CD10                            int     10h             ;
 36011 00003F8E 52                              push    dx              ;
 36012 00003F8F 80C208                  	add	dl,8		; move cursor to the right
 36013 00003F92 B402                            mov     ah,02h          ; set cursor position
 36014 00003F94 CD10                            int     10h             ;
 36015 00003F96 BA[644D]                        mov     dx,_$TimeOut
 36016 00003F99 E8DC05                          call    print           ; print the "Time remaining: " prompt
 36017 00003F9C 88D8                            mov     al,bl           ; recover # from BL
 36018 00003F9E 98                              cbw                     ; this works because AL is always <= 90
 36019 00003F9F B10A                            mov     cl,10           ;
 36020 00003FA1 F6F1                            div     cl              ; AL = tens digit, AH = ones digit
 36021 00003FA3 88E1                            mov     cl,ah           ;
 36022 00003FA5 0430                            add     al,'0'          ;
 36023 00003FA7 B40E                            mov     ah,0Eh          ;
 36024 00003FA9 CD10                            int     10h             ; write TTY tens digit
 36025 00003FAB 88C8                            mov     al,cl           ;
 36026 00003FAD 0430                            add     al,'0'          ;
 36027 00003FAF B40E                            mov     ah,0Eh          ;
 36028 00003FB1 CD10                            int     10h             ; write TTY ones digit
 36029 00003FB3 5A                              pop     dx
 36030 00003FB4 B402                            mov     ah,02h          ; set cursor position back to where it was
 36031 00003FB6 CD10                            int     10h             ;
 36032 00003FB8 5B                              pop     bx              ;
 36033                                  input_key:
 36034 00003FB9 B406                            mov     ah,RAW_CON_IO ; 6
 36035 00003FBB B2FF                            mov     dl,0FFh         ; input request
 36036 00003FBD CD21                            int     21h             ;
 36037 00003FBF 751F                            jnz	short got_key	;
 36038 00003FC1 803E[AF47]FF                    cmp     byte [secTimeOut],-1; is there a time-out?
 36039 00003FC6 74F1                            je	short input_key	; no, just go back to input
 36040 00003FC8 B42C                            mov     ah,GET_TIME     ;
 36041 00003FCA CD21                            int     21h             ; DH = seconds
 36042 00003FCC 88F4                            mov     ah,dh           ;
 36043 00003FCE 28FE                            sub     dh,bh           ; should generally be zero or one
 36044 00003FD0 88E7                            mov     bh,ah           ;
 36045 00003FD2 7302                            jnc	short got_time	;
 36046 00003FD4 B601                            mov     dh,1            ; it wrapped back to zero, so assume one
 36047                                  got_time:
 36048 00003FD6 08F6                            or      dh,dh           ; any change?
 36049 00003FD8 74DF                            jz	short input_key	; no
 36050 00003FDA 0036[B047]                      add     [secElapsed],dh ;
 36051 00003FDE EB8D                            jmp	short check_time ;
 36052                                  got_key:
 36053 00003FE0 50                              push    ax              ;
 36054 00003FE1 B8FFFF                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 36055 00003FE4 8706[AF47]                      xchg    [secTimeOut],ax
 36056 00003FE8 3CFF                            cmp     al,-1           ; was time-out already disabled?
 36057 00003FEA 740E                            je	short timeout_disabled ; yes
 36058 00003FEC 53                              push    bx              ; let's disable # seconds display
 36059 00003FED B8200A                          mov     ax,0A20h        ; write multiple spaces
 36060 00003FF0 8B1E[A147]                      mov     bx,[bMenuColor]
 36061 00003FF4 B95000                          mov     cx,80           ; 80 of them, to be safe
 36062 00003FF7 CD10                            int     10h             ; to completely obliterate # seconds display
 36063 00003FF9 5B                              pop     bx   		;
 36064                                  
 36065                                  timeout_disabled:
 36066 00003FFA 58                              pop     ax              ;
 36067 00003FFB 08C0                            or      al,al           ; extended key pressed?
 36068 00003FFD 755A                            jnz	short normal_key ; no
 36069 00003FFF CD21                            int     21h             ; get the next part of the key then
 36070 00004001 74B6                            jz	short input_key	; hmmm, what happened to the second part?
 36071                                  
 36072 00004003 3C48                            cmp     al,48h          ; up arrow?
 36073 00004005 7510                            jne	short not_up	; no
 36074 00004007 80FB01                          cmp     bl,1            ; are we as up as up can get?
 36075 0000400A 76AD                            jbe	short input_key	; yes, ignore it
 36076 0000400C FE0E[AB47]                      dec     byte [bDefBlock] ;
 36077 00004010 E8A9FE                          call    print_item      ; re-print the current item
 36078 00004013 FECB                            dec     bl              ; and then print the new current item
 36079 00004015 EB12                            jmp     short print1
 36080                                  not_up:
 36081 00004017 3C50                            cmp     al,50h          ; down arrow?
 36082 00004019 7518                            jne	short not_down	; no
 36083 0000401B 3A1E[AC47]                      cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 36084 0000401F 7310                            jae	short to_input_key ; yes, ignore it
 36085 00004021 FE06[AB47]                      inc     byte [bDefBlock] ;
 36086 00004025 E894FE                          call    print_item      ; re-print the current item
 36087 00004028 43                              inc     bx              ; and then print the new current item
 36088                                  print1: 
 36089 00004029 88D8                    	mov     al,bl           ;
 36090                                  print2: 
 36091 0000402B E88EFE                  	call    print_item      ;
 36092 0000402E E86300                          call    disp_num        ;
 36093                                  to_input_key:
 36094 00004031 EB86                            jmp     input_key       ;
 36095                                  not_down:
 36096 00004033 F606[A647]01                    test    byte [bDisableUI],1
 36097 00004038 75F7                            jnz	short to_input_key ; don't allow F8 or F5
 36098 0000403A 3C42                            cmp     al,42h          ; F8 function key?
 36099 0000403C 750B                            jne	short not_f8	; no
 36100 0000403E 8036[AA47]01                    xor     byte [bQueryOpt],1
 36101 00004043 E85E00                          call    show_status     ;
 36102 00004046 E970FF                          jmp     input_key	;
 36103                                  not_f8:
 36104 00004049 3C3F                            cmp     al,3Fh          ; F5 function key?
 36105 0000404B 75E4                            jne	short to_input_key ; no
 36106                                  	; 02/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 36107                                  	; MSDOS 6.21 IO.SYS - SYSINIT:49EBh
 36108                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4C32h)
 36109 0000404D 800E[AA47]04            	or	byte [bQueryOpt],4 ; no more queries
 36110 00004052 BBFFFF                          mov     bx,-1           ; special return code (-1) indicating clean boot
 36111 00004055 B020                            mov     al,' '          ; don't want to display anything really;
 36112 00004057 EB26                            jmp     short disp_input ; just want to display the cr/lf sequence...
 36113                                  
 36114                                  normal_key:
 36115 00004059 3C0D                            cmp     al,0Dh          ; Enter?
 36116 0000405B 741C                            je	short select_done ; yes
 36117 0000405D 3C08                            cmp     al,08h          ; backspace?
 36118 0000405F 7504                            jne	short not_backspace ; no
 36119 00004061 BBFEFF                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 36120 00004064 C3                              retn			;
 36121                                  not_backspace:
 36122 00004065 2C30                            sub     al,'0'          ; is greater than '0'?
 36123 00004067 76C8                            jbe	short to_input_key ; no
 36124 00004069 3A06[AC47]                      cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 36125 0000406D 77C2                            ja	short to_input_key ; no
 36126 0000406F A2[AB47]                        mov	[bDefBlock],al  ;
 36127 00004072 E847FE                          call    print_item      ; redisplay the current selection
 36128 00004075 88C3                            mov     bl,al           ; set new selection
 36129 00004077 EBB2                            jmp	short print2
 36130                                  
 36131                                  select_done:
 36132 00004079 B700                            mov     bh,0            ; return a full 16-bit value (for indexing)
 36133 0000407B 88D8                            mov     al,bl           ;
 36134 0000407D 0430                            add     al,'0'          ; convert it into a digit, then display it
 36135                                  
 36136                                  	; fall into disp_input
 36137                                  
 36138                                  ; 16/04/2019 - Retro DOS v4.0
 36139                                  
 36140                                  ;----------------------------------------------------------------------------
 36141                                  ;
 36142                                  ;   disp_input: display a single character + cr/lf
 36143                                  ;
 36144                                  ;   INPUT
 36145                                  ;       AL == character to display
 36146                                  ;
 36147                                  ;   OUTPUT
 36148                                  ;       None
 36149                                  ;
 36150                                  ;   OTHER REGS USED
 36151                                  ;       None
 36152                                  ;
 36153                                  ;   NOTES
 36154                                  ;       This function is used not only for the menu input selection but
 36155                                  ;       also for the interactive line prompting (the y/n/a thing).
 36156                                  ;
 36157                                  ;   HISTORY
 36158                                  ;       Created 16-Mar-1992 by JeffPar
 36159                                  ;
 36160                                  ;----------------------------------------------------------------------------
 36161                                  
 36162                                  disp_input:
 36163 0000407F 50                              push    ax
 36164 00004080 3C20                            cmp     al,' '
 36165 00004082 7302                            jae	short disp_ok
 36166 00004084 B020                            mov     al,' '
 36167                                  disp_ok:
 36168 00004086 88C2                            mov     dl,al
 36169 00004088 B402                            mov     ah,STD_CON_OUTPUT ; 2
 36170 0000408A CD21                            int     21h
 36171 0000408C BA[C44A]                        mov     dx,crlfm
 36172 0000408F E8E604                          call    print
 36173 00004092 58                              pop     ax
 36174 00004093 C3                              retn
 36175                                  
 36176                                  ;----------------------------------------------------------------------------
 36177                                  
 36178                                  disp_num:
 36179 00004094 53                              push    bx
 36180 00004095 0430                            add     al,'0'
 36181 00004097 B40A                            mov     ah,0Ah
 36182 00004099 8B1E[A147]                      mov     bx,[bMenuColor]
 36183 0000409D B90100                          mov     cx,1
 36184 000040A0 CD10                            int     10h
 36185 000040A2 5B                              pop     bx
 36186 000040A3 C3                              retn
 36187                                  
 36188                                  ;----------------------------------------------------------------------------
 36189                                  ;
 36190                                  ;   show_status: display current interactive mode setting (on/off/none)
 36191                                  ;
 36192                                  ;   INPUT
 36193                                  ;       None
 36194                                  ;
 36195                                  ;   OUTPUT
 36196                                  ;       None
 36197                                  ;
 36198                                  ;   OTHER REGS USED
 36199                                  ;       None
 36200                                  ;
 36201                                  ;   NOTES
 36202                                  ;       None
 36203                                  ;
 36204                                  ;   HISTORY
 36205                                  ;       Created 16-Mar-1992 by JeffPar
 36206                                  ;
 36207                                  ;----------------------------------------------------------------------------
 36208                                  
 36209                                  show_status:
 36210 000040A4 53                              push    bx              ; BL = video page #
 36211 000040A5 8B1E[A147]                      mov     bx,[bMenuColor]
 36212 000040A9 B403                            mov     ah,03h          ; get cursor position
 36213 000040AB CD10                            int     10h             ;
 36214 000040AD 52                              push    dx              ; save it
 36215 000040AE B402                            mov     ah,02h          ; set cursor position
 36216 000040B0 8B16[A447]                      mov     dx,[bLastCol]   ; set correct row/col
 36217 000040B4 F606[A647]01                    test    byte [bDisableUI],1
 36218 000040B9 740E                            jz	short show_onoff ; just show on/off
 36219 000040BB B200                            mov     dl,0            ;
 36220 000040BD CD10                            int     10h             ;
 36221 000040BF B8200A                          mov     ax,0A20h        ; write multiple spaces
 36222 000040C2 B95000                          mov     cx,80           ; 80 of them, to be exact
 36223 000040C5 CD10                            int     10h             ; to obliterate the status line
 36224 000040C7 EB13                            jmp     short show_done ;
 36225                                  show_onoff: 
 36226 000040C9 CD10                            int     10h
 36227                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 36228                                  		; AL = character, BH = display page - alpha mode
 36229                                  		; BL = color of character (graphics mode, PCjr only)
 36230                                  		; CX = number of times to write character
 36231                                  
 36232 000040CB A0[604D]                        mov     al,[_$NO]	; assume OFF
 36233 000040CE 803E[AA47]01                    cmp     byte [bQueryOpt],1 ; is interactive mode on?
 36234 000040D3 7503                            jne	short show_noton ; no
 36235 000040D5 A0[5C4D]                        mov     al,[_$YES]	; yes
 36236                                  show_noton:                     ;
 36237 000040D8 B40E                            mov     ah,0Eh          ; write TTY
 36238 000040DA CD10                            int     10h             ;
 36239                                  show_done:                      ;
 36240 000040DC 5A                              pop     dx              ;
 36241 000040DD B402                            mov     ah,02h          ;
 36242 000040DF CD10                            int     10h             ; restore original cursor position
 36243 000040E1 5B                              pop     bx              ;
 36244 000040E2 C3                              retn			;
 36245                                  
 36246                                  ; 16/04/2019 - Retro DOS v4.0
 36247                                  
 36248                                  ;----------------------------------------------------------------------------
 36249                                  ;
 36250                                  ;   skip_token: advances ES:SI/CX past the current token
 36251                                  ;
 36252                                  ;   INPUT
 36253                                  ;    ES:SI -> position in config.sys
 36254                                  ;       CX == remaining bytes in config.sys
 36255                                  ;
 36256                                  ;   OUTPUT
 36257                                  ;       CF set if EOL/EOF hit
 36258                                  ;       AL == 1st char of delimiter
 36259                                  ;    ES:SI -> just past the delimiter
 36260                                  ;       CX == # bytes remaining from that point
 36261                                  ;
 36262                                  ;   OTHER REGS USED
 36263                                  ;       AX
 36264                                  ;
 36265                                  ;   NOTES
 36266                                  ;       None
 36267                                  ;
 36268                                  ;   HISTORY
 36269                                  ;       Created 16-Mar-1992 by JeffPar
 36270                                  ;
 36271                                  ;----------------------------------------------------------------------------
 36272                                  
 36273                                  skip_token:
 36274 000040E3 E84D00                          call    get_char
 36275 000040E6 7210                            jc	short skip_token_done
 36276 000040E8 E8B501                          call    any_delim
 36277 000040EB 75F6                            jne	short skip_token
 36278                                  skip_check_eol:
 36279 000040ED 3C0D                            cmp     al,cr ; 0Dh
 36280 000040EF 7406                            je	short skip_token_eol
 36281 000040F1 3C0A                            cmp     al,lf ; 0Ah
 36282 000040F3 7402                            je	short skip_token_eol
 36283 000040F5 F8                              clc
 36284                                          ;jmp	short skip_token_done
 36285 000040F6 C3                      	retn
 36286                                  skip_token_eol:
 36287 000040F7 F9                              stc
 36288                                  skip_token_done:
 36289 000040F8 C3                              retn
 36290                                  
 36291                                  ;----------------------------------------------------------------------------
 36292                                  ;
 36293                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 36294                                  ;
 36295                                  ;   INPUT
 36296                                  ;    ES:SI -> position in config.sys
 36297                                  ;       CX == remaining bytes in config.sys
 36298                                  ;
 36299                                  ;   OUTPUT
 36300                                  ;       CF set if EOF hit
 36301                                  ;       AL == 1st char of token
 36302                                  ;    ES:SI -> just past the token
 36303                                  ;       CX == # bytes remaining from that point
 36304                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 36305                                  ;
 36306                                  ;   OTHER REGS USED
 36307                                  ;       AX
 36308                                  ;
 36309                                  ;   NOTES
 36310                                  ;       None
 36311                                  ;
 36312                                  ;   HISTORY
 36313                                  ;       Created 16-Mar-1992 by JeffPar
 36314                                  ;
 36315                                  ;----------------------------------------------------------------------------
 36316                                  
 36317                                  skip_delim:	; returns carry set if eol/eof
 36318 000040F9 E83700                          call    get_char        ;
 36319 000040FC 8D5CFF                          lea     bx,[si-1]       ; also returns BX -> next token
 36320 000040FF 72F7                            jc	short skip_token_done ;
 36321 00004101 E8AC01                          call    delim           ;
 36322 00004104 74F3                            je	short skip_delim ;
 36323 00004106 EBE5                            jmp	short skip_check_eol  ; 13/05/2019
 36324                                  
 36325                                  ;----------------------------------------------------------------------------
 36326                                  ;
 36327                                  ;   skip_opt_line: same as skip_line provided AL != LF
 36328                                  ;
 36329                                  ;   INPUT
 36330                                  ;       AL == last character read
 36331                                  ;    ES:SI -> position in config.sys
 36332                                  ;       CX == remaining bytes in config.sys
 36333                                  ;
 36334                                  ;   OUTPUT
 36335                                  ;       CF set if EOF hit
 36336                                  ;       AL == 1st char of new line
 36337                                  ;    ES:SI -> just past 1st char of new line
 36338                                  ;       CX == # bytes remaining from that point
 36339                                  ;
 36340                                  ;   OTHER REGS USED
 36341                                  ;       AX
 36342                                  ;
 36343                                  ;   NOTES
 36344                                  ;       In other words, the purpose here is to skip to the next line,
 36345                                  ;       unless ES:SI is already sitting at the front of the next line (which
 36346                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 36347                                  ;
 36348                                  ;   HISTORY
 36349                                  ;       Created 16-Mar-1992 by JeffPar
 36350                                  ;
 36351                                  ;----------------------------------------------------------------------------
 36352                                  
 36353                                  ; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 36354                                  ;skip_opt_line:
 36355                                  ;	cmp     al,lf ; 0Ah
 36356                                  ;	je	short skip_line_done
 36357                                       
 36358                                  	; fall into skip_line
 36359                                  
 36360                                  ;----------------------------------------------------------------------------
 36361                                  ;
 36362                                  ;   skip_line: skip to the next line
 36363                                  ;
 36364                                  ;   INPUT
 36365                                  ;    ES:SI -> position in config.sys
 36366                                  ;       CX == remaining bytes in config.sys
 36367                                  ;
 36368                                  ;   OUTPUT
 36369                                  ;       CF set if EOF hit
 36370                                  ;    ES:SI -> just past 1st char of new line
 36371                                  ;       CX == # bytes remaining from that point
 36372                                  ;
 36373                                  ;   OTHER REGS USED
 36374                                  ;       AX
 36375                                  ;
 36376                                  ;   NOTES
 36377                                  ;       None
 36378                                  ;
 36379                                  ;   HISTORY
 36380                                  ;       Created 16-Mar-1992 by JeffPar
 36381                                  ;
 36382                                  ;----------------------------------------------------------------------------
 36383                                  
 36384                                  skip_line:
 36385 00004108 E82800                          call    get_char
 36386 0000410B 7204                            jc	short skip_line_done
 36387                                  skip_opt_line:	; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 36388 0000410D 3C0A                            cmp     al,lf ; 0Ah
 36389 0000410F 75F7                            jne	short skip_line
 36390                                  skip_line_done:
 36391                                  num_done:	; 18/12/2022
 36392 00004111 C3                              retn
 36393                                  
 36394                                  ;----------------------------------------------------------------------------
 36395                                  ;
 36396                                  ;   get_number: return binary equivalent of numeric string
 36397                                  ;
 36398                                  ;   INPUT
 36399                                  ;    ES:SI -> position in config.sys
 36400                                  ;       CX == remaining bytes in config.sys
 36401                                  ;
 36402                                  ;   OUTPUT
 36403                                  ;       AL == non-digit encountered
 36404                                  ;       BX == binary #
 36405                                  ;    ES:SI -> just past 1st non-digit
 36406                                  ;       CX == # bytes remaining from that point
 36407                                  ;
 36408                                  ;   OTHER REGS USED
 36409                                  ;       AX
 36410                                  ;
 36411                                  ;   NOTES
 36412                                  ;       None
 36413                                  ;
 36414                                  ;   HISTORY
 36415                                  ;       Created 16-Mar-1992 by JeffPar
 36416                                  ;
 36417                                  ;----------------------------------------------------------------------------
 36418                                  
 36419                                  ; 13/05/2019
 36420                                  
 36421                                  get_number:
 36422 00004112 29DB                            sub     bx,bx           ; BX = result
 36423                                  num_loop:
 36424 00004114 E81C00                          call    get_char        ;
 36425 00004117 72F8                            jc	short num_done	;
 36426 00004119 3C30                            cmp     al,'0'          ; convert to value
 36427 0000411B 72F4                            jb	short num_done	; no more number
 36428 0000411D 3C39                            cmp     al,'9'          ;
 36429 0000411F 77F0                            ja	short num_done	;
 36430 00004121 50                              push    ax              ;
 36431 00004122 B80A00                          mov     ax,10           ;
 36432 00004125 52                              push    dx              ;
 36433 00004126 F7E3                            mul     bx              ;
 36434 00004128 5A                              pop     dx              ;
 36435 00004129 89C3                            mov     bx,ax           ;
 36436 0000412B 58                              pop     ax              ;
 36437 0000412C 2C30                            sub     al,'0'          ;
 36438 0000412E 98                              cbw                     ;
 36439 0000412F 01C3                            add     bx,ax           ;
 36440 00004131 EBE1                            jmp	short num_loop	;
 36441                                  
 36442                                  	; 18/12/2022
 36443                                  ;num_done:
 36444                                          ;retn
 36445                                  
 36446                                  ;----------------------------------------------------------------------------
 36447                                  ;
 36448                                  ;   get_char: return next character, advance ES:SI, and decrement CX
 36449                                  ;
 36450                                  ;   INPUT
 36451                                  ;    ES:SI -> position in config.sys
 36452                                  ;       CX == remaining bytes in config.sys
 36453                                  ;
 36454                                  ;   OUTPUT
 36455                                  ;       AL == next character
 36456                                  ;    ES:SI -> just past next character
 36457                                  ;       CX == # bytes remaining from that point
 36458                                  ;
 36459                                  ;   OTHER REGS USED
 36460                                  ;       AX
 36461                                  ;
 36462                                  ;   NOTES
 36463                                  ;       None
 36464                                  ;
 36465                                  ;   HISTORY
 36466                                  ;       Created 16-Mar-1992 by JeffPar
 36467                                  ;
 36468                                  ;----------------------------------------------------------------------------
 36469                                  
 36470                                  get_char:
 36471 00004133 83E901                          sub     cx,1            ; use SUB to set carry,zero
 36472 00004136 7205                            jb	short get_fail	; out of data
 36473                                          ;lods	byte ptr es:[si] ;
 36474 00004138 26                      	es	
 36475 00004139 AC                      	lodsb
 36476 0000413A 88C4                            mov     ah,al           ;
 36477 0000413C C3                              retn			;
 36478                                  get_fail:                       ; restore CX to zero
 36479 0000413D B90000                          mov     cx,0            ; leave carry set, zero not set
 36480                                  nearby_ret:
 36481 00004140 C3                              retn
 36482                                  
 36483                                  ;----------------------------------------------------------------------------
 36484                                  ;
 36485                                  ;   query_user: ask user whether to execute current config.sys command
 36486                                  ;
 36487                                  ;   INPUT
 36488                                  ;       AL == current command code
 36489                                  ;    ES:SI -> current command line in config.sys
 36490                                  ;    config_cmd == current command code, but with QUERY bit intact
 36491                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 36492                                  ;
 36493                                  ;   OUTPUT
 36494                                  ;       CF set if command should be ignored (it is also REM'ed out)
 36495                                  ;
 36496                                  ;   OTHER REGS USED
 36497                                  ;       BX, CX, DX, DI
 36498                                  ;
 36499                                  ;   NOTES
 36500                                  ;       None
 36501                                  ;
 36502                                  ;   HISTORY
 36503                                  ;       Created 16-Mar-1992 by JeffPar
 36504                                  ;
 36505                                  ;----------------------------------------------------------------------------
 36506                                  
 36507                                  	; 31/12/2022 - Retro UNIX 386 v4.2 (Modified MSDOS 6.21 IO.SYS)
 36508                                  	; (SYSINIT:4AE5h)
 36509                                  
 36510                                  	; 12/12/2022
 36511                                  query_user:
 36512 00004141 F606[AA47]04                    test    byte [bQueryOpt],4	; answer no to everything?
 36513                                  	; 01/01/2023
 36514 00004146 7403                    	jz	short qu_1		;
 36515 00004148 E9BA00                  	jmp	skip_all
 36516                                  	; 12/12/2022
 36517                                  	;;jmp	short skip_all		;
 36518                                  	;jnz	short skip_all
 36519                                  qu_1:
 36520 0000414B F606[AA47]02            	test    byte [bQueryOpt],2	; answer yes to everything?
 36521 00004150 75EE                            jnz	short nearby_ret	; yes (and return carry clear!)
 36522 00004152 50                              push    ax                      ;
 36523 00004153 A0[DD14]                        mov     al,[config_cmd]         ;
 36524 00004156 F606[AA47]01                    test    byte [bQueryOpt],1	; query every command?
 36525 0000415B 7506                            jnz	short query_all		; yes
 36526 0000415D A880                            test    al,CONFIG_OPTION_QUERY  ;
 36527                                  	; 01/01/2023
 36528 0000415F 7502                    	jnz	short query_all		;
 36529                                  	; 12/12/2022
 36530                                  	;;jmp	short do_cmd		;
 36531                                  	;jz	short do_cmd ; cf=0
 36532                                  
 36533                                  	; 01/01/2023
 36534 00004161 58                      	pop	ax
 36535 00004162 C3                      	retn
 36536                                  
 36537                                  query_all:
 36538                                  
 36539                                  ;   Search for the command code (AL) in "comtab", and then print
 36540                                  ;   out the corresponding keyword, followed by the rest of the actual
 36541                                  ;   line pointed to by ES:SI
 36542                                  
 36543 00004163 56                              push    si                      ; save pointer to rest of CONFIG.SYS line
 36544 00004164 BA[B64D]                        mov     dx,_$AutoPrmpt    	;
 36545 00004167 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 36546 00004169 7451                            jz	short generic_prompt	; config_cmd must have been 0
 36547                                  
 36548 0000416B 88C6                            mov     dh,al                   ; save config_cmd in DH
 36549 0000416D 29DB                            sub     bx,bx                   ;
 36550 0000416F BF[F747]                        mov     di,comtab		;
 36551                                  find_match:                             ;
 36552 00004172 8A1D                            mov     bl,[di]                 ; get size of current keyword
 36553 00004174 08DB                            or      bl,bl                   ;
 36554 00004176 7425                            jz	short line_print	; end of table
 36555 00004178 47                              inc     di                      ;
 36556 00004179 3A01                            cmp     al,[di+bx]              ; match?
 36557 0000417B 7405                            je	short cmd_match		; yes
 36558 0000417D 8D7901                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 36559                                  	; 13/05/2019	
 36560 00004180 EBF0                            jmp	short find_match	; loop
 36561                                  cmd_match:                              ;
 36562 00004182 8A4DFF                          mov     cl,[di-1]               ;
 36563 00004185 B500                            mov	ch,0                    ;
 36564 00004187 B402                            mov     ah,STD_CON_OUTPUT ; 2
 36565                                  cmd_print:                              ;
 36566 00004189 8A05                            mov     al,[di]                 ;
 36567 0000418B 47                              inc     di                      ;
 36568 0000418C 88C2                            mov     dl,al                   ;
 36569 0000418E CD21                            int     21h                     ;
 36570 00004190 E2F7                            loop    cmd_print               ;
 36571 00004192 B23D                            mov     dl,'='                  ;
 36572 00004194 80FE56                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 36573 00004197 7502                            jne	short cmd_notset	;
 36574 00004199 B220                            mov     dl,' '                  ;
 36575                                  cmd_notset:
 36576 0000419B CD21                            int     21h                     ; '=' looks funny on SET commands
 36577                                  line_print:                             ;
 36578                                  	;lods	byte ptr es:[si]        ;
 36579 0000419D 26                              es
 36580 0000419E AC                      	lodsb
 36581 0000419F 08C0                    	or      al,al                   ;
 36582 000041A1 7502                            jnz	short non_null		;
 36583 000041A3 B020                            mov     al,' '                  ;
 36584                                  non_null:                               ;
 36585 000041A5 3C20                            cmp     al,' '                  ; control code?
 36586 000041A7 7210                            jb	short prompt_user	; yes, assume end of line
 36587 000041A9 7506                            jne	short non_space		;
 36588 000041AB 26803C20                        cmp     byte [es:si],' '	;
 36589 000041AF 7208                            jb	short prompt_user	;
 36590                                  non_space:                              ;
 36591 000041B1 88C2                            mov     dl,al                   ;
 36592 000041B3 B402                            mov     ah,STD_CON_OUTPUT ; 2	;
 36593 000041B5 CD21                            int     21h                     ;
 36594 000041B7 EBE4                            jmp	short line_print	;
 36595                                  prompt_user:                            ;
 36596 000041B9 BA[544D]                        mov     dx,_$InterPrmpt		;
 36597                                  
 36598                                  generic_prompt:
 36599 000041BC E8B903                          call    print                   ;
 36600                                  input_loop:                             ;
 36601 000041BF B400                            mov     ah,0                    ; read a key
 36602 000041C1 CD16                            int     16h                     ;
 36603 000041C3 08C0                            or      al,al                   ; is it a function key?
 36604 000041C5 750F                            jnz	short not_func		; no
 36605 000041C7 80FC3F                          cmp     ah,3Fh                  ; F5 function key?
 36606 000041CA 75F3                            jne	short input_loop	; no
 36607 000041CC A0[604D]                        mov     al,[_$NO] 		;
 36608 000041CF 800E[AA47]04                    or      byte [bQueryOpt],4	; no more queries
 36609 000041D4 EB21                            jmp     short legal_char        ;
 36610                                  not_func:
 36611 000041D6 24DF                            and     al,~20h ; 0DFh		; converting to upper case
 36612 000041D8 3A06[604D]                      cmp     al,[_$NO]		; verify character is legal
 36613 000041DC 7419                            je	short legal_char	;
 36614 000041DE 3A06[5C4D]                      cmp     al,[_$YES]		;
 36615 000041E2 7413                            je	short legal_char	;
 36616 000041E4 803E[DD14]00                    cmp     byte [config_cmd],0	;
 36617 000041E9 74D4                            je	short input_loop	; don't allow Esc on this query
 36618 000041EB 3C1B                            cmp     al,1Bh                  ; Esc?
 36619 000041ED 75D0                            jne	short input_loop	;
 36620 000041EF 800E[AA47]02                    or      byte [bQueryOpt],2	; no more interactive boot prompts
 36621 000041F4 A0[5C4D]                        mov     al,[_$YES]
 36622                                  legal_char:                             ;
 36623 000041F7 E885FE                          call    disp_input              ;
 36624 000041FA 5E                              pop     si                      ; restore pointer to rest of CONFIG.SYS line
 36625                                  
 36626 000041FB 3A06[604D]                      cmp     al,[_$NO]		; process line?
 36627 000041FF 7403                            je	short skip_cmd		; no
 36628                                  	; 12/12/2022
 36629 00004201 F8                      	clc
 36630                                  do_cmd:
 36631 00004202 58                      	pop     ax			;
 36632                                  	; 12/12/2022
 36633                                  	; cf=0
 36634                                  	;clc				; just do the command
 36635 00004203 C3                      	retn
 36636                                  
 36637                                  skip_cmd:
 36638 00004204 58                      	pop     ax			;
 36639                                  skip_all:
 36640 00004205 B430                    	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 36641 00004207 F9                      	stc
 36642 00004208 C3                      	retn
 36643                                  
 36644                                  ;----------------------------------------------------------------------------
 36645                                  ;
 36646                                  ;   print_error: displays multi-config error conditions
 36647                                  ;
 36648                                  ;   INPUT
 36649                                  ;    Carry set to pause, clear to not
 36650                                  ;    ES:SI -> current command line in config.sys
 36651                                  ;
 36652                                  ;   OUTPUT
 36653                                  ;       None
 36654                                  ;
 36655                                  ;   OTHER REGS USED
 36656                                  ;       None
 36657                                  ;
 36658                                  ;   NOTES
 36659                                  ;       None
 36660                                  ;
 36661                                  ;   HISTORY
 36662                                  ;       Created 16-Mar-1992 by JeffPar
 36663                                  ;
 36664                                  ;----------------------------------------------------------------------------
 36665                                  
 36666                                  print_error:
 36667 00004209 50                              push    ax
 36668 0000420A 53                              push    bx
 36669 0000420B 51                              push    cx
 36670 0000420C 52                              push    dx
 36671 0000420D 1E                              push    ds
 36672 0000420E 0E                              push    cs
 36673 0000420F 1F                              pop     ds
 36674 00004210 9C                              pushf
 36675 00004211 E81DFC                          call    get_linenum
 36676 00004214 891E[AD02]                      mov     [linecount],bx
 36677 00004218 E88DE7                          call    error_line
 36678 0000421B 9D                              popf
 36679 0000421C 7319                            jnc	short pe_ret
 36680 0000421E BA[1B4C]                        mov     dx,_$PauseMsg
 36681 00004221 E85403                          call    print
 36682 00004224 B8070C                          mov     ax,0C07h		; flush input buffer, then wait for key
 36683 00004227 CD21                            int     21h			; wait for a key
 36684 00004229 08C0                            or      al,al			; extended key?
 36685 0000422B 7504                            jnz	short pe_1		; no
 36686 0000422D B407                            mov     ah,07h			; yes
 36687 0000422F CD21                            int     21h			; eat it too
 36688                                  pe_1:     
 36689 00004231 BA[C44A]                	mov     dx,crlfm
 36690 00004234 E84103                          call    print
 36691                                  pe_ret: 
 36692 00004237 1F                      	pop     ds
 36693 00004238 5A                              pop     dx
 36694 00004239 59                              pop     cx
 36695 0000423A 5B                              pop     bx
 36696 0000423B 58                              pop     ax
 36697 0000423C C3                      	retn
 36698                                  
 36699                                  ;----------------------------------------------------------------------------
 36700                                  
 36701                                  ;   This function is very simple: it merely prepends a "/D" to the
 36702                                  ;   command-line for the shell; this (undocumented) switch disables
 36703                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 36704                                  ;   displayed when there's no AUTOEXEC.BAT.
 36705                                  
 36706                                  disable_autoexec:
 36707                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 36708                                  	; 17/04/2019 - Retro DOS v4.0
 36709                                  
 36710 0000423D F606[AA47]04            	test	byte [bQueryOpt],4
 36711 00004242 7443                    	jz	short disable_exit
 36712 00004244 F606[A047]01            	test	byte [dae_flag],1
 36713 00004249 753C                    	jnz	short disable_exit
 36714 0000424B 800E[A047]01            	or	byte [dae_flag],1
 36715                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 36716 00004250 810E[AA47]0201          	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 36717 00004256 BA4420                  	mov     dx,'D ' ; 2044h
 36718                                  dae_1:
 36719                                  	; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 36720 00004259 A0[DF46]                        mov	al,[def_swchr]
 36721                                  	;mov	al,[command_line-1]     ; get default switchchar
 36722 0000425C 08C0                            or      al,al                   ; anything there?
 36723 0000425E 7427                            jz	short disable_exit	; no, disable_autoexec already called
 36724 00004260 8A1E[E046]                      mov     bl,[command_line]       ;
 36725 00004264 B700                            mov     bh,0                    ; BX == command-line length
 36726 00004266 89D9                            mov     cx,bx                   ;
 36727 00004268 80C303                          add     bl,3                    ;
 36728 0000426B 80FB7E                          cmp     bl,126                  ;
 36729 0000426E 7717                            ja	short disable_exit	;
 36730 00004270 881E[E046]                      mov     [command_line],bl       ; update length
 36731 00004274 81C3[E146]                      add     bx,command_line+1	; make sure we move the NULL too
 36732 00004278 41                              inc     cx                      ; (just for consistency sake)
 36733                                  disable_loop:                           ;
 36734 00004279 8A67FD                          mov     ah,[bx-3]               ;
 36735 0000427C 8827                            mov     [bx],ah                 ;
 36736 0000427E 4B                              dec     bx                      ;
 36737 0000427F E2F8                            loop    disable_loop            ;
 36738 00004281 8847FE                          mov     [bx-2],al               ;
 36739                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 36740 00004284 8957FF                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 36741                                          ;mov	byte [command_line-1],0 ;
 36742                                  disable_exit:                           ;
 36743 00004287 C3                              retn
 36744                                  
 36745                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 36746 00004288 803E[AA47]01            	cmp     byte [bQueryOpt],1
 36747 0000428D 75F8                    	jnz     short disable_exit
 36748 0000428F F606[A047]02            	test	byte [dae_flag],2
 36749 00004294 75F1                    	jnz     short disable_exit
 36750 00004296 800E[A047]02            	or      byte [dae_flag],2
 36751 0000429B BA2059                  	mov     dx,' Y'		; 2059h
 36752 0000429E EBB9                    	jmp     short dae_1
 36753                                  
 36754                                  ;endif  ;MULTI_CONFIG
 36755                                  
 36756                                  ;%endif	; 02/11/2022
 36757                                  
 36758                                  
 36759                                  ; 19/04/2019 - Retro DOS v4.0
 36760                                  
 36761                                  ;----------------------------------------------------------------------------
 36762                                  ;
 36763                                  ; procedure : delim
 36764                                  ;
 36765                                  ;----------------------------------------------------------------------------
 36766                                  
 36767                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36768                                  ; (SYSINIT:4C45h)
 36769                                  
 36770                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36771                                  ;%if 0
 36772                                  ;;ifdef	MULTI_CONFIG
 36773                                  ;
 36774                                  any_delim:
 36775 000042A0 3C0D                    	cmp	al,cr
 36776 000042A2 7427                    	je	short delim_ret
 36777 000042A4 3C0A                    	cmp	al,lf
 36778 000042A6 7423                    	je	short delim_ret
 36779 000042A8 3C5B                    	cmp	al,'['
 36780 000042AA 741F                    	je	short delim_ret
 36781 000042AC 3C5D                    	cmp	al,']'
 36782 000042AE 741B                    	je	short delim_ret
 36783                                  ;
 36784                                  ;;endif ;MULTI_CONFIG
 36785                                  ;%endif ; 02/11/2022
 36786                                  
 36787                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 36788                                  	; (SYSINIT:3450h)	
 36789                                  delim:
 36790 000042B0 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 36791 000042B2 7417                    	je	short delim_ret
 36792                                  
 36793 000042B4 3C00                    	cmp	al,0		; special case for sysinit!!!
 36794 000042B6 7413                    	je	short delim_ret
 36795                                  
 36796                                  org_delim:			; used by organize routine except for getting
 36797 000042B8 3C20                    	cmp	al,' '          ; the filename.
 36798 000042BA 740F                    	je	short delim_ret
 36799 000042BC 3C09                            cmp     al,tab ; 9
 36800 000042BE 740B                    	je	short delim_ret
 36801 000042C0 3C3D                    	cmp	al,'='
 36802 000042C2 7407                    	je	short delim_ret
 36803 000042C4 3C2C                    	cmp	al,','
 36804 000042C6 7403                    	je	short delim_ret
 36805 000042C8 3C3B                    	cmp	al,';'
 36806                                  
 36807                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36808                                  
 36809                                  ; 04/01/2023 - Retro DOS v4.2
 36810                                  ;ifdef	MULTI_CONFIG
 36811                                  ;   Make sure there's no chance of a false EOF indication
 36812 000042CA F8                      	clc
 36813                                  ;endif
 36814                                  	; 02/11/2022
 36815                                  delim_ret:
 36816                                  	; 04/01/2023
 36817                                  	; cf = 0
 36818 000042CB C3                      	retn
 36819                                  
 36820                                  ;----------------------------------------------------------------------------
 36821                                  ;
 36822                                  ; procedure : newline
 36823                                  ;
 36824                                  ;  newline returns with first character of next line
 36825                                  ;
 36826                                  ;----------------------------------------------------------------------------
 36827                                  
 36828                                  newline:
 36829 000042CC E8C2E6                  	call	getchr			;skip non-control characters
 36830 000042CF 7207                    	jc	short nl_ret
 36831 000042D1 3C0A                    	cmp	al,lf			;look for line feed
 36832 000042D3 75F7                    	jne	short newline
 36833 000042D5 E8B9E6                  	call	getchr
 36834                                  nl_ret:
 36835 000042D8 C3                      	retn
 36836                                  
 36837                                  ;----------------------------------------------------------------------------
 36838                                  ; 
 36839                                  ; procedure : mapcase
 36840                                  ;
 36841                                  ;----------------------------------------------------------------------------
 36842                                  
 36843                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 36844                                  
 36845                                  	; 04/01/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 36846                                  	; (SYSINIT:4C7Eh)
 36847                                  mapcase:
 36848 000042D9 51                      	push	cx
 36849 000042DA 56                      	push	si
 36850 000042DB 1E                      	push	ds
 36851                                  
 36852 000042DC 06                      	push	es
 36853 000042DD 1F                      	pop	ds
 36854                                  
 36855                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36856                                  
 36857                                  ; 04/01/2023 - Retro DOS 4.2
 36858                                  
 36859                                  ;ifdef	MULTI_CONFIG
 36860 000042DE 88C3                    	mov	bl,al			; same cmd code this line
 36861                                  ;else
 36862                                  ;	xor	si,si
 36863                                  ;endif
 36864                                  	; 02/11/2022
 36865                                  	; 04/01/2023 - Retro DOS 4.2
 36866                                  	;xor	si, si
 36867                                  
 36868                                  convloop:
 36869 000042E0 AC                      	lodsb
 36870 000042E1 3C61                    	cmp	al,'a'
 36871 000042E3 7209                    	jb	short noconv
 36872 000042E5 3C7A                    	cmp	al,'z'
 36873 000042E7 7705                    	ja	short noconv
 36874 000042E9 2C20                    	sub	al,20h
 36875 000042EB 8844FF                  	mov	[si-1],al
 36876                                  noconv:
 36877                                  
 36878                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36879                                  
 36880                                  ; 04/01/2023 - Retro DOS 4.2
 36881                                  ;ifdef	MULTI_CONFIG
 36882                                  
 36883                                  ;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 36884                                  ;   upper-case a line at a time, after we've been able to figure out whether
 36885                                  ;   the line is a SET command or not (since we don't want to upper-case
 36886                                  ;   anything after the "=" in a SET)
 36887                                  ;
 36888 000042EE 80FB56                  	cmp	bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 36889 000042F1 7504                    	jne	short check_eol		; no, just check for end-of-line
 36890 000042F3 3C3D                    	cmp	al,'='                  ; separator between SET var and value?
 36891 000042F5 740A                    	je	short convdone		; yes
 36892                                  check_eol:
 36893 000042F7 3C0D                    	cmp	al,cr
 36894 000042F9 7406                    	je	short convdone
 36895 000042FB 3C0A                    	cmp	al,lf
 36896 000042FD 7402                    	je	short convdone
 36897                                  ;endif
 36898                                  	; 02/11/2022
 36899 000042FF E2DF                    	loop	convloop
 36900                                  convdone:
 36901 00004301 1F                      	pop	ds
 36902 00004302 5E                      	pop	si
 36903 00004303 59                      	pop	cx
 36904 00004304 C3                      	retn
 36905                                  
 36906                                  ;----------------------------------------------------------------------------
 36907                                  ;
 36908                                  ; procedure : round
 36909                                  ;
 36910                                  ; round the values in memlo and memhi to paragraph boundary.
 36911                                  ; perform bounds check.
 36912                                  ;
 36913                                  ;----------------------------------------------------------------------------
 36914                                  
 36915                                  round:
 36916 00004305 50                      	push	ax
 36917 00004306 2EA1[6003]              	mov	ax,[cs:memlo]
 36918                                  
 36919 0000430A E85BCE                  	call	ParaRound		; para round up
 36920                                  
 36921 0000430D 2E0106[6203]            	add	[cs:memhi],ax
 36922 00004312 2EC706[6003]0000        	mov	word [cs:memlo],0
 36923 00004319 2EA1[6203]              	mov	ax,[cs:memhi]		; ax = new memhi
 36924 0000431D 2E3B06[A302]            	cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 36925 00004322 7322                    	jae	short mem_err
 36926 00004324 2EF606[E214]02          	test	byte [cs:setdevmarkflag],for_devmark ; 2
 36927 0000432A 7418                    	jz	short skip_set_devmarksize
 36928 0000432C 06                      	push	es
 36929 0000432D 56                      	push	si
 36930 0000432E 2E8B36[E014]            	mov	si,[cs:devmark_addr]
 36931 00004333 8EC6                    	mov	es,si
 36932 00004335 29F0                    	sub	ax,si
 36933 00004337 48                      	dec	ax
 36934                                  	;mov	[es:3],ax
 36935 00004338 26A30300                	mov	[es:devmark.size],ax	; paragraph
 36936 0000433C 2E8026[E214]FD          	and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 36937 00004342 5E                      	pop	si
 36938 00004343 07                      	pop	es
 36939                                  skip_set_devmarksize:
 36940 00004344 58                      	pop	ax
 36941                                  	; 11/12/2022
 36942                                  	; cf = 0
 36943                                  	; 02/11/2022
 36944                                  	;clc	; ? (not needed here)	; clear carry
 36945 00004345 C3                      	retn
 36946                                  
 36947                                  ;----------------------------------------------------------------------------
 36948                                  
 36949                                  mem_err:
 36950                                  	; 11/12/2022
 36951 00004346 0E                      	push	cs
 36952 00004347 1F                      	pop	ds
 36953                                  mem_err2:
 36954 00004348 BA[9D4B]                	mov	dx,badmem
 36955                                  	;push	cs
 36956                                  	;pop	ds
 36957 0000434B E82A02                  	call	print
 36958 0000434E E950CE                  	jmp	stall
 36959                                  
 36960                                  ;----------------------------------------------------------------------------
 36961                                  ;
 36962                                  ; procedure : calldev
 36963                                  ;
 36964                                  ;----------------------------------------------------------------------------
 36965                                  
 36966                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 36967                                  	; (SYSINIT:34E0h)
 36968                                  calldev:
 36969 00004351 2E8E1E[B11F]            	mov	ds,[cs:DevEntry+2]
 36970 00004356 2E031E[AF1F]            	add	bx,[cs:DevEntry]	; do a little relocation
 36971 0000435B 8B07                    	mov	ax,[bx]
 36972                                  
 36973 0000435D 2EFF36[AF1F]            	push	word [cs:DevEntry]
 36974 00004362 2EA3[AF1F]              	mov	word [cs:DevEntry],ax
 36975 00004366 BB[6803]                	mov	bx,packet
 36976 00004369 2EFF1E[AF1F]            	call	far [cs:DevEntry]
 36977 0000436E 2E8F06[AF1F]            	pop	word [cs:DevEntry]
 36978 00004373 C3                      	retn
 36979                                  
 36980                                  ;----------------------------------------------------------------------------
 36981                                  ;
 36982                                  ; procedure : todigit
 36983                                  ;
 36984                                  ;----------------------------------------------------------------------------
 36985                                  
 36986                                  todigit:
 36987 00004374 2C30                    	sub	al,'0'
 36988                                  	;jb	short notdig  ; 02/11/2022
 36989                                  	; 12/12/2022
 36990 00004376 7203                    	jb	short notdig2
 36991                                  	;cmp	al,9
 36992                                  	;ja	short notdig
 36993                                  	;clc
 36994                                  	;retn
 36995                                  	; 12/12/2022
 36996 00004378 3C0A                    	cmp	al,10
 36997 0000437A F5                      	cmc
 36998                                  notdig:
 36999                                  	;stc
 37000                                  notdig2:
 37001 0000437B C3                      	retn
 37002                                  
 37003                                  ;----------------------------------------------------------------------------
 37004                                  ;
 37005                                  ; procedure : getnum
 37006                                  ;
 37007                                  ; getnum parses a decimal number.
 37008                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 37009                                  ; error), if number is bad carry is set, zero is set, ax=0.
 37010                                  ;
 37011                                  ;----------------------------------------------------------------------------
 37012                                  
 37013                                  getnum:
 37014 0000437C 53                      	push	bx
 37015 0000437D 31DB                    	xor	bx,bx			; running count is zero
 37016                                  b2:
 37017 0000437F E8F2FF                  	call	todigit 		; do we have a digit ?
 37018 00004382 7247                    	jc	short badnum		; no, bomb
 37019                                  
 37020 00004384 93                      	xchg	ax,bx			; put total in ax
 37021 00004385 53                      	push	bx			; save digit (0 to 9)
 37022                                  	;mov	bx,10			; base of arithmetic
 37023                                  	; 12/12/2022
 37024 00004386 B30A                    	mov	bl,10
 37025 00004388 F7E3                    	mul	bx			; shift by one decimal digit
 37026 0000438A 5B                      	pop	bx			; get back digit (0 to 9)
 37027 0000438B 00D8                    	add	al,bl			; get total
 37028 0000438D 80D400                  	adc	ah,0			; make that 16 bits
 37029 00004390 7239                    	jc	short badnum		; too big a number
 37030                                  
 37031 00004392 93                      	xchg	ax,bx			; stash total
 37032                                  
 37033 00004393 E8FBE5                  	call	getchr			; get next digit
 37034 00004396 722D                    	jc	short b1		; no more characters
 37035 00004398 3C20                    	cmp	al,' ' 			; space?
 37036 0000439A 741F                    	je	short b15		; then end of digits
 37037 0000439C 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 37038 0000439E 741B                    	je	short b15		; then end of digits.
 37039 000043A0 3C09                    	cmp	al, tab ; 9		; tab
 37040 000043A2 7417                    	je	short b15
 37041 000043A4 2E3A06[AC02]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 37042 000043A9 7410                    	je	short b15
 37043 000043AB 3C2F                    	cmp	al,'/'			; see if another switch follows
 37044                                  	; 12/12/2022
 37045                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37046                                  	;nop				; cas - remnant of old bad code
 37047                                  	;nop
 37048 000043AD 740C                    	je	short b15
 37049 000043AF 3C0A                    	cmp	al,lf			; line-feed?
 37050 000043B1 7408                    	je	short b15
 37051 000043B3 3C0D                    	cmp	al,cr			; carriage return?
 37052 000043B5 7404                    	je	short b15
 37053 000043B7 08C0                    	or	al,al			; end of line separator?
 37054 000043B9 75C4                    	jnz	short b2		; no, try as a valid char...
 37055                                  b15:
 37056 000043BB 2EFF06[5403]            	inc	word [cs:count]		; one more character to s...
 37057 000043C0 2EFF0E[5803]            	dec	word [cs:chrptr]	; back up over separator
 37058                                  b1:
 37059 000043C5 89D8                    	mov	ax,bx			; get proper count
 37060 000043C7 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 37061 000043C9 5B                      	pop	bx
 37062 000043CA C3                      	retn
 37063                                  badnum:
 37064                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37065                                  	;mov	byte [cs:sepchr],0
 37066 000043CB 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 37067                                  	; 12 /12/2022
 37068 000043CD 2EA2[AC02]              	mov	[cs:sepchr],al ; 0
 37069 000043D1 5B                      	pop	bx
 37070 000043D2 F9                      	stc				; and carry set
 37071 000043D3 C3                      	retn
 37072                                  
 37073                                  ;****************************************************************************
 37074                                  
 37075                                  setdoscountryinfo:
 37076                                  
 37077                                  ;----------------------------------------------------------------------------
 37078                                  ;input: es:di -> pointer to dos_country_cdpg_info
 37079                                  ;	ds:0  -> buffer.
 37080                                  ;	si = 0
 37081                                  ;	ax = country id
 37082                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 37083                                  ;	bx = file handle
 37084                                  ;	this routine can handle maximum 438 country_data entries.
 37085                                  ;
 37086                                  ;output: dos_country_cdpg_info set.
 37087                                  ;	 carry set if any file read failure or wrong information in the file.
 37088                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 37089                                  ;	 codepage_id in the file.
 37090                                  ;----------------------------------------------------------------------------
 37091                                  
 37092                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 37093                                  	; (SYSINIT:4D83h)
 37094                                  
 37095 000043D4 57                      	push	di
 37096 000043D5 50                      	push	ax
 37097 000043D6 52                      	push	dx
 37098                                  
 37099 000043D7 31C9                    	xor	cx,cx
 37100 000043D9 31D2                    	xor	dx,dx
 37101 000043DB B80002                  	mov	ax,512			;read 512 bytes
 37102 000043DE E84F01                  	call	readincontrolbuffer	;read the file header
 37103 000043E1 724D                    	jc	short setdosdata_fail
 37104                                  
 37105 000043E3 06                      	push	es
 37106 000043E4 56                      	push	si
 37107                                  
 37108 000043E5 0E                      	push	cs
 37109 000043E6 07                      	pop	es
 37110                                  
 37111 000043E7 BF[4546]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 37112 000043EA B90800                  	mov	cx,8			;length of the signature
 37113 000043ED F3A6                    	repz	cmpsb
 37114                                  
 37115 000043EF 5E                      	pop	si
 37116 000043F0 07                      	pop	es
 37117 000043F1 753D                    	jnz	short setdosdata_fail 	;signature mismatch
 37118                                  
 37119 000043F3 83C612                  	add	si,18			;si -> county info type
 37120 000043F6 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 37121 000043F9 7535                    	jne	short setdosdata_fail 	;cannot proceed. error return
 37122                                  
 37123 000043FB 46                      	inc	si			;si -> file offset
 37124 000043FC 8B14                    	mov	dx,[si]			;get the info file offset.
 37125 000043FE 8B4C02                  	mov	cx,[si+2]
 37126 00004401 B80018                  	mov	ax,6144			;read 6144 bytes.
 37127 00004404 E82901                  	call	readincontrolbuffer	;read info
 37128 00004407 7227                    	jc	short setdosdata_fail
 37129                                  
 37130 00004409 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 37131 0000440B 81F9B601                	cmp	cx, 438			;cannot handle more than 438 entries.
 37132 0000440F 771F                    	ja	short setdosdata_fail
 37133                                  
 37134 00004411 46                      	inc	si
 37135 00004412 46                      	inc	si			;si -> entry information packet
 37136 00004413 5A                      	pop	dx			;restore code page id
 37137 00004414 58                      	pop	ax			;restore country id
 37138 00004415 5F                      	pop	di
 37139                                  
 37140                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 37141 00004416 3B4402                  	cmp	ax,[si+2]		;compare country_id
 37142 00004419 750A                    	jne	short setdoscntry_next
 37143                                  
 37144 0000441B 83FA00                  	cmp	dx,0			;no user specified code page ?
 37145 0000441E 7415                    	je	short setdoscntry_any_codepage ;then no need to match code page id.
 37146 00004420 3B5404                  	cmp	dx,[si+4]		;compare code page id
 37147 00004423 7413                    	je	short setdoscntry_got_it
 37148                                  
 37149                                  setdoscntry_next:
 37150 00004425 0334                    	add	si,[si]			;next entry
 37151 00004427 46                      	inc	si
 37152 00004428 46                      	inc	si			;take a word for size of entry itself
 37153 00004429 E2EB                    	loop	setdoscntry_find
 37154                                  
 37155 0000442B B9FFFF                  	mov	cx,-1			;signals that bad country id entered.
 37156                                  setdoscntry_fail:
 37157 0000442E F9                      	stc
 37158 0000442F C3                      	retn
 37159                                  
 37160                                  setdosdata_fail:
 37161 00004430 5E                      	pop	si
 37162 00004431 59                      	pop	cx
 37163 00004432 5F                      	pop	di
 37164 00004433 EBF9                    	jmp	short setdoscntry_fail
 37165                                  
 37166                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 37167 00004435 8B5404                  	mov	dx,[si+4]
 37168                                  
 37169                                  setdoscntry_got_it:			;found the matching entry
 37170 00004438 2E8916[4D46]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 37171 0000443D 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 37172 00004440 8B4C0C                  	mov	cx,[si+12]
 37173 00004443 B80002                  	mov	ax,512 			;read 512 bytes
 37174 00004446 E8E700                  	call	readincontrolbuffer
 37175 00004449 72E3                    	jc	short setdoscntry_fail
 37176                                  
 37177 0000444B 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 37178 0000444D 46                      	inc	si
 37179 0000444E 46                      	inc	si			;si -> first entry
 37180                                  
 37181                                  setdoscntry_data:
 37182 0000444F 57                      	push	di			;es:di -> dos_country_cdpg_info
 37183 00004450 51                      	push	cx			;save # of entry left
 37184 00004451 56                      	push	si			;si -> current entry in control buffer
 37185                                  
 37186 00004452 8A4402                  	mov	al,[si+2]		;get data entry id
 37187 00004455 E8AA00                  	call	getcountrydestination	;get the address of destination in es:di
 37188 00004458 727D                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 37189                                  
 37190 0000445A 8B5404                  	mov	dx,[si+4]		;get offset of data
 37191 0000445D 8B4C06                  	mov	cx,[si+6]
 37192 00004460 B80042                  	mov	ax,4200h
 37193 00004463 F9                      	stc
 37194 00004464 CD21                    	int	21h			;move pointer
 37195 00004466 72C8                    	jc	short setdosdata_fail
 37196                                  
 37197 00004468 BA0002                  	mov	dx,512			;start of data buffer
 37198 0000446B B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 37199 0000446E B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 37200 00004470 F9                      	stc
 37201 00004471 CD21                    	int	21h			;read the country.sys data
 37202 00004473 72BB                    	jc	short setdosdata_fail 	;read failure
 37203                                  
 37204 00004475 39C8                    	cmp	ax,cx
 37205 00004477 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 37206                                  
 37207 00004479 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 37208 0000447C 8B4C06                  	mov	cx,[si+6]
 37209 0000447F B80042                  	mov	ax,4200h
 37210 00004482 F9                      	stc
 37211 00004483 CD21                    	int	21h			;move pointer back again
 37212 00004485 72A9                    	jc	short setdosdata_fail
 37213                                  
 37214 00004487 56                      	push	si
 37215 00004488 BE0802                  	mov	si,(512+8)		;get length of the data from the file
 37216 0000448B 8B0C                    	mov	cx,[si]
 37217 0000448D 5E                      	pop	si
 37218 0000448E BA0002                  	mov	dx,512			;start of data buffer
 37219 00004491 83C10A                  	add	cx,10			;signature + a word for the length itself
 37220 00004494 B43F                    	mov	ah,3Fh			;read the data from the file.
 37221 00004496 F9                      	stc
 37222 00004497 CD21                    	int	21h
 37223 00004499 7295                    	jc	short setdosdata_fail
 37224                                  
 37225 0000449B 39C8                    	cmp	ax,cx
 37226 0000449D 7591                    	jne	short setdosdata_fail
 37227                                  
 37228 0000449F 8A4402                  	mov	al,[si+2]		;save data id for future use.
 37229 000044A2 BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 37230 000044A5 8B0C                    	mov	cx,[si]			;get the length of the file
 37231 000044A7 41                      	inc	cx			;take care of a word for lenght of tab
 37232 000044A8 41                      	inc	cx			;itself.
 37233 000044A9 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 37234 000044AD 7781                    	ja	short setdosdata_fail
 37235                                  
 37236                                  	;if	bugfix
 37237 000044AF E83500                  	call	setdbcs_before_copy
 37238                                  	;endif
 37239                                  
 37240 000044B2 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 37241 000044B4 7512                    	jne	short setdoscntry_mov 	;no, don't worry
 37242                                  
 37243 000044B6 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 37244                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 37245 000044BA 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 37246                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 37247                                  	
 37248 000044BE 57                      	push	di			;save di
 37249                                  
 37250 000044BF 50                      	push	ax
 37251 000044C0 2EA1[4D46]              	mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 37252 000044C4 894404                  	mov	[si+4],ax		;use the saved one for this !!!!
 37253 000044C7 58                      	pop	ax
 37254                                  
 37255                                  setdoscntry_mov:
 37256 000044C8 F3A4                    	rep	movsb			;copy the table into dos
 37257 000044CA 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 37258 000044CC 7509                    	jne	short setdoscntry_data_next
 37259                                  
 37260 000044CE 5F                      	pop	di			;restore di
 37261 000044CF 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 37262                                  	;pop	word [es:di+26]		;restore
 37263 000044D3 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 37264                                  	;pop	word [es:di+24]
 37265                                  
 37266                                  setdoscntry_data_next:
 37267 000044D7 5E                      	pop	si			;restore control buffer pointer
 37268 000044D8 59                      	pop	cx			;restore # of entries left
 37269 000044D9 5F                      	pop	di			;restore pointer to dso_country_cdpg
 37270 000044DA 0334                    	add	si,[si]			;try to get the next entry
 37271 000044DC 46                      	inc	si
 37272 000044DD 46                      	inc	si			;take a word of entry length itself
 37273 000044DE 49                      	dec	cx
 37274 000044DF 83F900                  	cmp	cx,0
 37275 000044E2 741D                    	je	short setdoscntry_ok
 37276 000044E4 E968FF                  	jmp	setdoscntry_data
 37277                                  
 37278                                  	; 18/12/2022
 37279                                  ;setdoscntry_ok:
 37280                                  	;retn
 37281                                  
 37282                                  ;----------------------------------------------------------------------------
 37283                                  
 37284                                  	;if	bugfix
 37285                                  
 37286                                  setdbcs_before_copy:
 37287 000044E7 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 37288 000044E9 7516                    	jne	short sdbcsbc		; jump if not
 37289 000044EB 26833D00                	cmp	word [es:di],0		; zero byte data block?
 37290 000044EF 7410                    	je	short sdbcsbc		; jump if so
 37291                                  
 37292 000044F1 57                      	push	di
 37293 000044F2 50                      	push	ax
 37294 000044F3 51                      	push	cx
 37295 000044F4 268B0D                  	mov	cx,[es:di]		; load block length
 37296 000044F7 83C702                  	add	di,2			; points actual data
 37297 000044FA 30C0                    	xor	al,al			; fill bytes
 37298 000044FC F3AA                    	rep	stosb			; clear data block
 37299 000044FE 59                      	pop	cx
 37300 000044FF 58                      	pop	ax
 37301 00004500 5F                      	pop	di
 37302                                  sdbcsbc:
 37303                                  setdoscntry_ok:	; 18/12/2022	
 37304 00004501 C3                      	retn
 37305                                  
 37306                                  	;endif
 37307                                  
 37308                                  ;----------------------------------------------------------------------------
 37309                                  
 37310                                  getcountrydestination:
 37311                                  
 37312                                  ;----------------------------------------------------------------------------
 37313                                  ;get the destination address in the dos country info table.
 37314                                  ;
 37315                                  ;input: al - data id
 37316                                  ;	es:di -> dos_country_cdpg_info
 37317                                  ;on return:
 37318                                  ;	es:di -> destination address of the matching data id
 37319                                  ;	carry set if no matching data id found in dos.
 37320                                  ;----------------------------------------------------------------------------
 37321                                  
 37322                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 37323                                  	; (SYSINIT:4EB2h)
 37324                                  
 37325 00004502 51                      	push	cx
 37326                                  	;add	di,74
 37327 00004503 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 37328                                  					;skip the reserved area, syscodepage etc.
 37329 00004506 268B0D                  	mov	cx,[es:di]		;get the number of entries
 37330 00004509 47                      	inc	di
 37331 0000450A 47                      	inc	di			;si -> the first start entry id
 37332                                  
 37333                                  getcntrydest:
 37334 0000450B 263805                  	cmp	byte [es:di],al
 37335 0000450E 7413                    	je	short getcntrydest_ok
 37336 00004510 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 37337 00004514 7405                    	je	short getcntrydest_1
 37338                                  
 37339 00004516 83C705                  	add	di,5			;next data id
 37340 00004519 EB03                    	jmp	short getcntrydest_loop
 37341                                  
 37342                                  getcntrydest_1:
 37343                                  	;add	di,41
 37344 0000451B 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 37345                                  getcntrydest_loop:
 37346 0000451E E2EB                    	loop	getcntrydest
 37347 00004520 F9                      	stc
 37348 00004521 EB0B                    	jmp	short getcntrydest_exit
 37349                                  
 37350                                  getcntrydest_ok:
 37351 00004523 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 37352 00004525 7503                    	jne	short getcntrydest_ok1
 37353                                  
 37354 00004527 47                      	inc	di			;now di -> cccountryinfolen
 37355 00004528 EB04                    	jmp	short getcntrydest_exit
 37356                                  
 37357                                  getcntrydest_ok1:
 37358 0000452A 26C47D01                	les	di,[es:di+1]		;get the destination in es:di
 37359                                  
 37360                                  getcntrydest_exit:
 37361 0000452E 59                      	pop	cx
 37362 0000452F C3                      	retn
 37363                                  
 37364                                  ;----------------------------------------------------------------------------
 37365                                  
 37366                                  readincontrolbuffer:
 37367                                  
 37368                                  ;----------------------------------------------------------------------------
 37369                                  ;move file pointer to cx:dx
 37370                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 37371                                  ;si will be set to 0 hence ds:si points to the control buffer.
 37372                                  ;
 37373                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 37374                                  ;	 be moved.
 37375                                  ;	 ax - # of bytes to read
 37376                                  ;	 bx - file handle
 37377                                  ;	 ds - buffer seg.
 37378                                  ;return: the control data information is read into ds:0 - ds:0200.
 37379                                  ;	 cx,dx value destroyed.
 37380                                  ;	 carry set if error in reading file.
 37381                                  ;----------------------------------------------------------------------------
 37382                                  
 37383 00004530 50                      	push	ax			;# of bytes to read
 37384 00004531 B80042                  	mov	ax,4200h
 37385 00004534 F9                      	stc
 37386 00004535 CD21                    	int	21h			;move pointer
 37387 00004537 59                      	pop	cx			;# of bytes to read
 37388 00004538 7209                    	jc	short ricb_exit
 37389                                  
 37390 0000453A 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 37391 0000453C 31F6                    	xor	si,si
 37392 0000453E B43F                    	mov	ah,3Fh			;read into the buffer
 37393 00004540 F9                      	stc
 37394 00004541 CD21                    	int	21h			;should be less than 1024 bytes.
 37395                                  ricb_exit:
 37396 00004543 C3                      	retn
 37397                                  
 37398                                  ;----------------------------------------------------------------------------
 37399                                  
 37400                                  ;! set_country_path procedure is not called from anywhere !
 37401                                  ; Erdogan Tan - 04/08/2023
 37402                                  %if 0
 37403                                  
 37404                                  set_country_path:
 37405                                  
 37406                                  ;----------------------------------------------------------------------------
 37407                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 37408                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 37409                                  ;     assumes current directory is the root directory.
 37410                                  ;out: ds:di -> full path (cntry_drv).
 37411                                  ;     set the cntry_drv string from the country=,,path command.
 37412                                  ;     ds, es, si value saved.
 37413                                  ;----------------------------------------------------------------------------
 37414                                  
 37415                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 37416                                  	; (SYSINIT:4EF4h)
 37417                                  
 37418                                  	push	si
 37419                                  
 37420                                  	push	ds			;switch ds, es
 37421                                  	push	es
 37422                                  	pop	ds
 37423                                  	pop	es			;now ds -> confbot, es -> sysinitseg
 37424                                  
 37425                                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 37426                                  	jc	short scp_default_drv 	;no, use current default drive.
 37427                                  
 37428                                  	mov	al,[si]
 37429                                  	inc	si
 37430                                  	inc	si			;si -> next char after ":"
 37431                                  	jmp	short scp_setdrv
 37432                                  
 37433                                  scp_default_drv:
 37434                                  	mov	ah,19h
 37435                                  	int	21h
 37436                                  	add	al,"A"			;convert it to a character.
 37437                                  
 37438                                  scp_setdrv:
 37439                                  	mov	[cs:cntry_drv],al	;set the drive letter.
 37440                                  	mov	di,cntry_path
 37441                                  	mov	al,[si]
 37442                                  	cmp	al, "\"
 37443                                  	je	short scp_root_dir
 37444                                  
 37445                                  	cmp	al,"/"			;let's accept "/" as an directory delim
 37446                                  	;je	short scp_root_dir
 37447                                  	;jmp	short scp_path
 37448                                  	; 04/01/2023
 37449                                  	jne	short scp_path
 37450                                  
 37451                                  scp_root_dir:
 37452                                  	dec	di			;di -> cntry_root
 37453                                  scp_path:
 37454                                  	call	move_asciiz		;copy it
 37455                                  
 37456                                  	mov	di,cntry_drv
 37457                                  scpath_exit:
 37458                                  
 37459                                  	push	ds			;switch ds, es
 37460                                  	push	es
 37461                                  	pop	ds
 37462                                  	pop	es			;ds, es value restored
 37463                                  
 37464                                  	pop	si
 37465                                  	retn
 37466                                  
 37467                                  ;----------------------------------------------------------------------------
 37468                                  
 37469                                  chk_drive_letter:
 37470                                  
 37471                                  ;check if ds:[si] is a drive letter followed by ":".
 37472                                  ;assume that every alpha character is already converted to upper case.
 37473                                  ;carry set if not.
 37474                                  
 37475                                  	; 04/01/2023 - Retrodos v4.2
 37476                                  
 37477                                  	push	ax
 37478                                  	cmp	byte [si],"A"
 37479                                  	;jb	short cdletter_no
 37480                                  	jb	short cdletter_exit
 37481                                  	cmp	byte [si],"Z"
 37482                                  	ja	short cdletter_no
 37483                                  	cmp	byte [si+1],":"
 37484                                  	;jne	short cdletter_no
 37485                                  	;jmp	short cdletter_exit
 37486                                  	; 04/01/2023
 37487                                  	je	short cdletter_exit
 37488                                  
 37489                                  cdletter_no:
 37490                                  	stc
 37491                                  cdletter_exit:
 37492                                  	pop	ax
 37493                                  	retn
 37494                                  
 37495                                  %endif
 37496                                  
 37497                                  ;----------------------------------------------------------------------------
 37498                                  
 37499                                  move_asciiz:
 37500                                  
 37501                                  ;in: ds:si -> source es:di -> target
 37502                                  ;out: copy the string until 0.
 37503                                  ;assumes there exists a 0.
 37504                                  
 37505                                  masciiz_loop:
 37506 00004544 A4                      	movsb
 37507 00004545 807CFF00                	cmp	byte [si-1],0	; was it 0?
 37508 00004549 75F9                    	jne	short masciiz_loop
 37509 0000454B C3                      	retn
 37510                                  
 37511                                  ;----------------------------------------------------------------------------
 37512                                  
 37513                                  ;	ds:dx points to string to output (asciz)
 37514                                  ;
 37515                                  ;	prints <badld_pre> <string> <badld_post>
 37516                                  
 37517                                  badfil:
 37518 0000454C 0E                      	push	cs
 37519 0000454D 07                      	pop	es
 37520                                  
 37521 0000454E 89D6                    	mov	si,dx
 37522                                  badload:
 37523 00004550 BA[074B]                	mov	dx,badld_pre	; want to print config error
 37524 00004553 BB[C44A]                	mov	bx,crlfm
 37525                                  prnerr:
 37526 00004556 0E                      	push	cs
 37527 00004557 1F                      	pop	ds ; *
 37528 00004558 E81D00                  	call	print
 37529                                  prn1:
 37530 0000455B 268A14                  	mov	dl,[es:si]
 37531 0000455E 08D2                    	or	dl,dl
 37532 00004560 7407                    	jz	short prn2
 37533 00004562 B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 37534 00004564 CD21                    	int	21h
 37535 00004566 46                      	inc	si
 37536 00004567 EBF2                    	jmp	short prn1
 37537                                  prn2:
 37538 00004569 89DA                    	mov	dx,bx
 37539 0000456B E80A00                  	call	print
 37540                                  	; 11/12/2022
 37541                                  	; ds = cs ; *
 37542 0000456E 803E[5303]01            	cmp	byte [donotshownum],1
 37543                                  				; suppress line number when handling command.com
 37544                                  	;cmp	byte [cs:donotshownum],1 
 37545 00004573 7407                    	je	short prnexit
 37546                                  	
 37547                                  	; 18/12/2022
 37548                                  	;call	error_line
 37549 00004575 E930E4                  	jmp	error_line
 37550                                  ;prnexit:
 37551                                  	;retn
 37552                                  
 37553                                  ;----------------------------------------------------------------------------
 37554                                  
 37555                                  print:
 37556 00004578 B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 37557 0000457A CD21                    	int	21h
 37558                                  prnexit:	; 18/12/2022
 37559 0000457C C3                      	retn
 37560                                  
 37561                                  ;----------------------------------------------------------------------------
 37562                                  
 37563                                  ;  open device pointed to by dx, al has access code
 37564                                  ;   if unable to open do a device open null device instead
 37565                                  
 37566                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 37567                                  	; (SYSINIT:3764h)
 37568                                  open_dev:
 37569 0000457D E80500                  	call	open_file
 37570 00004580 7309                    	jnc	short open_dev3
 37571                                  
 37572                                  open_dev1:
 37573 00004582 BA[E645]                	mov	dx,nuldev
 37574                                  	; 18/12/2022
 37575                                  	;call	open_file
 37576                                  ;of_retn:
 37577                                  	;retn
 37578                                  	; 18/12/2022
 37579                                  	;jmp	short open_file
 37580                                  open_file:
 37581 00004585 B43D                    	mov	ah,OPEN	; 3Dh
 37582 00004587 F9                      	stc
 37583 00004588 CD21                    	int	21h
 37584                                  of_retn:	; 18/12/2022
 37585 0000458A C3                      	retn
 37586                                  
 37587                                  open_dev3:
 37588 0000458B 89C3                    	mov	bx,ax			; handle from open to bx
 37589                                  	;;xor	ax,ax			; get device info
 37590                                  	;;mov	ah,IOCTL ; 44h
 37591                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 37592                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37593                                  	;xor	ax,ax
 37594                                  	;mov	ah,44h	; IOCTL
 37595                                  	; 11/12/2022
 37596 0000458D B80044                  	mov	ax,4400h ; IOCTL<<8 
 37597                                  
 37598 00004590 CD21                    	int	21h
 37599                                  
 37600 00004592 F6C280                  	test	dl,10000000b ; 80h
 37601 00004595 75F3                    	jnz	short of_retn
 37602                                  
 37603 00004597 B43E                    	mov	ah,CLOSE ; 3Eh
 37604 00004599 CD21                    	int	21h
 37605 0000459B EBE5                    	jmp	short open_dev1
 37606                                  
 37607                                  ;----------------------------------------------------------------------------
 37608                                  
 37609                                  ; 18/12/2022
 37610                                  %if 0
 37611                                  open_file:
 37612                                  	mov	ah,OPEN	; 3Dh
 37613                                  	stc
 37614                                  	int	21h
 37615                                  	retn
 37616                                  %endif
 37617                                  
 37618                                  ;----------------------------------------------------------------------------
 37619                                  
 37620                                  ; test int24. return back to dos with the fake user response of "fail"
 37621                                  
 37622                                  int24:
 37623 0000459D B003                    	mov	al,3			; fail the system call
 37624 0000459F CF                      	iret				; return back to dos.
 37625                                  
 37626                                  ; 19/04/2019 - Retro DOS v4.0
 37627                                  
 37628                                  ;----------------------------------------------------------------------------
 37629                                  ; DATA
 37630                                  ;----------------------------------------------------------------------------
 37631                                  
 37632                                  ;include copyrigh.inc			; copyright statement
 37633                                  
 37634                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 37635                                  
 37636                                  ;MsDosVersion6Copyr:
 37637                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 37638                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 37639                                  
 37640                                  ; 22/10/2022
 37641                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 37642                                  
 37643                                  ; 28/12/2022
 37644                                  %if 0
 37645                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37646                                  MsDosVersion5Copyr:
 37647                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 37648                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 37649                                  %endif
 37650                                  
 37651                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37652                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37653                                  ; 20/04/2019 - Retro DOS v4.0
 37654                                  ;BOOTMES:
 37655                                  ;	db      13
 37656                                  ;	db      10
 37657                                  ;	db      "MS-DOS version "
 37658                                  ;	db      MAJOR_VERSION + "0"
 37659                                  ;	db      "."
 37660                                  ;	db      (MINOR_VERSION / 10) + "0"
 37661                                  ;	db      (MINOR_VERSION % 10) + "0"
 37662                                  ;	db      13,10
 37663                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 37664                                  ;	; 22/10/2022
 37665                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 37666                                  ;	;
 37667                                  ;	db	0
 37668                                  
 37669                                  	; 01/01/2023 - Retro DOS v4.2
 37670                                  
 37671                                  	; 28/12/2022 - Retro DOS v4.1
 37672                                  ;MsDosVersion5Copyr:
 37673                                  ;  	db	13,10,"MS DOS Version 5.0"
 37674                                  ;	db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
 37675                                  
 37676                                  	; 12/12/2022
 37677 000045A0 00                      	db	0
 37678                                  ; 12/12/2022
 37679                                  BOOTMES:
 37680 000045A1 0D0A                    	db	13,10
 37681                                  	;;db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 37682                                  	; 28/12/2022
 37683                                  	;db 	"Retro DOS v4.1 (Modified MSDOS 5.0) "
 37684                                  	; 01/01/2023
 37685 000045A3 526574726F20444F53-     	db 	"Retro DOS v4.2 (Modified MSDOS 6.22) "
 37685 000045AC 2076342E3220284D6F-
 37685 000045B5 646966696564204D53-
 37685 000045BE 444F5320362E323229-
 37685 000045C7 20                 
 37686                                  	
 37687 000045C8 0D0A                    	db	13,10
 37688 000045CA 6279204572646F6761-     	db	"by Erdogan Tan [2023] "
 37688 000045D3 6E2054616E205B3230-
 37688 000045DC 32335D20           
 37689 000045E0 0D0A                    	db	13,10
 37690 000045E2 0D0A2400                	db	13,10,"$",0
 37691                                  
 37692 000045E6 4E554C00                nuldev:	db	"NUL",0
 37693 000045EA 434F4E00                condev:	db	"CON",0
 37694 000045EE 41555800                auxdev:	db	"AUX",0
 37695 000045F2 50524E00                prndev:	db	"PRN",0
 37696                                  
 37697                                  ;IFDEF	CONFIGPROC
 37698 000045F6 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 37698 000045FF 595300             
 37699                                  
 37700 00004602 413A                    cntry_drv:  db	"A:"
 37701 00004604 5C                      cntry_root: db	"\"
 37702 00004605 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 37702 0000460E 595300             
 37703                                  	    ;db	52 dup (0)
 37704 00004611 00<rep 34h>             	    times 52 db 0	
 37705                                  
 37706                                  country_file_signature:
 37707 00004645 FF434F554E545259        	db	0FFh,'COUNTRY'
 37708                                  
 37709                                  cntrycodepage_id: 
 37710 0000464D 0000                    	dw	0 	
 37711                                  
 37712                                  ;ENDIF ; CONFIGPROC
 37713                                  
 37714                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37715                                  ; (SYSINIT:5081h)
 37716                                  
 37717                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37718                                  ;ifdef	MULTI_CONFIG
 37719 0000464F 00                      newcmd:  db	0			; non-zero if non-std shell specified
 37720 00004650 40                      tmplate: db	64                      ; must precede commnd
 37721                                  ;endif
 37722                                  
 37723                                  ;ifdef ROMEXEC
 37724                                  ;	db      7                       ; size of commnd line (excl. null)
 37725                                  ;commnd: db	"COMMAND",0
 37726                                  ;	db	56 dup (0)
 37727                                  ;else
 37728                                  	; 02/11/2022
 37729 00004651 0C                      	db	12                      ; size of commnd line (excl. null)
 37730 00004652 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 37730 0000465B 434F4D00           
 37731                                  	;db	51 dup (0)
 37732 0000465F 00<rep 33h>             	times	51 db 0
 37733                                  ;endif
 37734                                  
 37735                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37736                                  ;ifdef	MULTI_CONFIG
 37737 00004692 5C434F4D4D414E442E-     commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 37737 0000469B 434F4D00           
 37738 0000469F 022F5000                	 db	2,"/P",0 		; followed by their respective alternate
 37739 000046A3 5C4D53444F535C434F-     commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 37739 000046AC 4D4D414E442E434F4D-
 37739 000046B5 00                 
 37740 000046B6 0B413A5C4D53444F53-     	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 37740 000046BF 202F5000           
 37741 000046C3 5C444F535C434F4D4D-     commnd4: db	"\DOS\COMMAND.COM",0 	;
 37741 000046CC 414E442E434F4D00   
 37742 000046D4 09413A5C444F53202F-     	 db	9,"A:\DOS /P",0		;
 37742 000046DD 5000               
 37743                                  def_swchr:	
 37744 000046DF 00                      	 db	0			; default switchchar (referenced as command_line-1)
 37745                                  ;endif
 37746                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37747                                  command_line:
 37748 000046E0 022F50                  	db	2,"/P"			; default command.com args
 37749                                  	;db	125 dup (0)
 37750 000046E3 00<rep 7Dh>             	times	125 db 0
 37751                                  
 37752                                  pathstring:
 37753                                  	;db	64 dup (0)
 37754 00004760 00<rep 40h>             	times	64 db 0
 37755                                  
 37756                                  
 37757                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37758                                  ; (SYSINIT:51D3h)
 37759                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37760                                  ;%if 0
 37761                                  
 37762                                  dae_flag:
 37763 000047A0 00                      	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 37764                                  
 37765                                  ;ifdef	MULTI_CONFIG
 37766                                  
 37767                                  ; 04/03/2022- Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 37768                                  MAX_MULTI_CONFIG equ 9	; max # of multi-config menu items supported
 37769                                  
 37770                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 37771                                  
 37772 000047A1 07                      bMenuColor:	db      07h ; 1Fh       ; default fgnd/bgnd color
 37773 000047A2 00                      bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 37774 000047A3 05                      		db      5               ; video page function # (KEEP AFTER bMenuPage)
 37775 000047A4 00                      bLastCol:	db      0               ; ending column on status line
 37776 000047A5 18                      bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 37777 000047A6 00                      bDisableUI:	db      0               ; 1=disable clean/interactive
 37778                                                                          ; 2=disable default 2-second delay
 37779 000047A7 00                      bCRTPage:	db      0               ; value saved from BIOS data area
 37780 000047A8 0000                    wCRTStart:	dw      0               ; value saved from BIOS data area
 37781 000047AA 00                      bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 37782 000047AB 01                      bDefBlock:	db      1               ; default block #
 37783 000047AC 00                      bMaxBlock:	db      0               ; maximum block #
 37784 000047AD 0000                    offDefBlock:	dw      0               ; offset of name of default block (if any)
 37785 000047AF FF                      secTimeOut:	db      -1 ; 0FFh       ; # of seconds for timeout (-1 == indefinite)
 37786 000047B0 00                      secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 37787 000047B1 00<rep Ah>              abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 37788 000047BB 0000<rep Ah>            aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 37789 000047CF 0000<rep Ah>            aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 37790                                  
 37791 000047E3 434F4E4649473D00        szBoot:		db      "CONFIG=",0
 37792 000047EB 4D454E5500              szMenu:		db      "MENU",0
 37793 000047F0 434F4D4D4F4E00          szCommon:	db      "COMMON",0
 37794                                  
 37795                                  ;endif	;MULTI_CONFIG
 37796                                  
 37797                                  comtab:	 ; label byte
 37798                                  
 37799                                  ;            cmd len    command         cmd code
 37800                                  ;            -------    -------         --------
 37801                                  
 37802                                  ;ifdef MULTI_CONFIG
 37803 000047F7 015B5B                          db      1,      "[",            CONFIG_BEGIN
 37804                                  ;endif
 37805 000047FA 05425245414B43                  db      5,      "BREAK",        CONFIG_BREAK
 37806 00004801 074255464645525342              db      7,      "BUFFERS",      CONFIG_BUFFERS
 37807 0000480A 07434F4D4D454E5459              db      7,      "COMMENT",      CONFIG_COMMENT
 37808 00004813 07434F554E54525951              db      7,      "COUNTRY",      CONFIG_COUNTRY
 37809 0000481C 0644455649434544                db      6,      "DEVICE",       CONFIG_DEVICE
 37810 00004824 0A4445564943454849-             db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 37810 0000482D 474855             
 37811 00004830 03444F5348                      db      3,      "DOS",          CONFIG_DOS
 37812 00004835 08445249565041524D-             db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 37812 0000483E 50                 
 37813 0000483F 044643425358                    db      4,      "FCBS",         CONFIG_FCBS
 37814 00004845 0546494C455346                  db      5,      "FILES",        CONFIG_FILES
 37815                                  ;ifdef MULTI_CONFIG
 37816 0000484C 07494E434C5544454A              db      7,      "INCLUDE",      CONFIG_INCLUDE
 37817                                  ;endif
 37818 00004855 07494E5354414C4C49              db      7,      "INSTALL",      CONFIG_INSTALL
 37819 0000485E 0B494E5354414C4C48-             db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 37819 00004867 49474857           
 37820 0000486B 094C41535444524956-             db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 37820 00004874 454C               
 37821                                  ;ifdef MULTI_CONFIG
 37822 00004876 075355424D454E554F              db      7,      "SUBMENU",      CONFIG_SUBMENU
 37823 0000487F 094D454E55434F4C4F-             db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 37823 00004888 5252               
 37824 0000488A 0B4D454E5544454641-             db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 37824 00004893 554C5441           
 37825 00004897 084D454E554954454D-             db      8,      "MENUITEM",     CONFIG_MENUITEM
 37825 000048A0 45                 
 37826                                  ;endif
 37827 000048A1 0A4D554C5449545241-             db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 37827 000048AA 434B4D             
 37828                                  ;ifdef MULTI_CONFIG
 37829 000048AD 074E554D4C4F434B4E              db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 37830                                  ;endif
 37831 000048B6 0352454D30                      db      3,      "REM",          CONFIG_REM
 37832                                  ;ifdef MULTI_CONFIG
 37833 000048BB 0353455456                      db      3,      "SET",          CONFIG_SET
 37834                                  ;endif
 37835 000048C0 055348454C4C53                  db      5,      "SHELL",        CONFIG_SHELL
 37836                                  ;if    STACKSW
 37837 000048C7 06535441434B534B                db      6,      "STACKS",       CONFIG_STACKS
 37838                                  ;endif
 37839 000048CF 085357495443484553-             db      8,      "SWITCHES",     CONFIG_SWITCHES
 37839 000048D8 31                 
 37840 000048D9 00                      	db	0
 37841                                  
 37842                                  ;%endif ; 02/11/2022
 37843                                  
 37844                                  ; 01/01/2023 - Retro DOS v4.2
 37845                                  %if 0
 37846                                  
 37847                                  comtab:
 37848                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37849                                  	; (SYSINIT:38EDh)
 37850                                  	db      7,      "BUFFERS",      CONFIG_BUFFERS
 37851                                  	db      5,      "BREAK",        CONFIG_BREAK
 37852                                  	db      6,      "DEVICE",       CONFIG_DEVICE
 37853                                  	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 37854                                  	db      5,      "FILES",        CONFIG_FILES
 37855                                  	db      4,      "FCBS",         CONFIG_FCBS
 37856                                  	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 37857                                  	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 37858                                  	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 37859                                  	db      6,      "STACKS",       CONFIG_STACKS
 37860                                  	db      7,      "COUNTRY",      CONFIG_COUNTRY
 37861                                  	db      5,      "SHELL",        CONFIG_SHELL
 37862                                  	db      7,      "INSTALL",      CONFIG_INSTALL
 37863                                  	db      7,      "COMMENT",      CONFIG_COMMENT
 37864                                  	db      3,      "REM",          CONFIG_REM
 37865                                  	db      8,      "SWITCHES",     CONFIG_SWITCHES
 37866                                  	db      3,      "DOS",          CONFIG_DOS
 37867                                  	db	0
 37868                                  
 37869                                  %endif
 37870                                  
 37871                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37872                                  ; (SYSINIT:530Ch)
 37873                                  
 37874                                  deviceparameters:	
 37875                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 37876                                  devp.specialfunc:	; deviceparameters +
 37877 000048DA 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 37878                                  devp.devtype:
 37879 000048DB 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 37880                                  devp.devattr:
 37881 000048DC 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 37882                                  devp.cylinders:
 37883 000048DE 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 37884                                  
 37885                                  ; 04/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 37886                                  
 37887                                  	;times	286	db 0
 37888                                  devp.mediatype:		; A_DEVICEPARAMETERS.DP_MEDIATYPE
 37889 000048E0 00                      	db	0
 37890                                  devp.bpb:		; A_DEVICEPARAMETERS.DP_BPB
 37891                                  devp.bps:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR
 37892 000048E1 0000                    	dw	0
 37893                                  devp.secperclus:	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER	
 37894 000048E3 00                      	db	0	
 37895 000048E4 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_RESERVEDSECTORS
 37896 000048E6 00                      	db	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_NUMBEROFFATS
 37897 000048E7 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_ROOTENTRIES
 37898                                  devp.totalsecs:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS
 37899 000048E9 0000                    	dw	0
 37900                                  devp.mediaid:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR
 37901 000048EB 00                      	db	0
 37902 000048EC 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERFAT
 37903                                  devp.spt:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK
 37904 000048EE 0000                    	dw	0
 37905                                  devp.heads:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS
 37906 000048F0 0000                    	dw	0	
 37907                                  
 37908                                  	;times	68 db 0	; PCDOS 7.1  (FAT32 BPB)
 37909                                  	;times	14 db 0	; MSDOS 6.21
 37910 000048F2 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HIDDENSECTORS
 37911 000048F4 0000                    	dw	0
 37912 000048F6 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BIGTOTALSECTORS
 37913 000048F8 0000                    	dw	0
 37914 000048FA 00<rep 6h>              	times	6 db 0	
 37915                                  
 37916                                  devp.trktblents:
 37917 00004900 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES
 37918                                  devp.sectbl:		; A_DEVICEPARAMETERS.DP_SECTORTABLE
 37919 00004902 00<rep FCh>             	times	252 db 0 ; MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 37920                                  			; 63*4 bytes		
 37921                                  
 37922                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37923                                  ; (SYSINIT:5430h)
 37924                                  	
 37925 000049FE 0200                    hlim:	dw	2
 37926 00004A00 0900                    slim:	dw	9
 37927                                  
 37928 00004A02 00                      drive:	db	0
 37929                                  
 37930                                  switches:
 37931 00004A03 0000                    	dw	0
 37932                                  
 37933                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37934                                  ; (SYSINIT:5437h)
 37935                                  
 37936                                  ; the following are the recommended bpbs for the media that
 37937                                  ; we know of so far.
 37938                                  
 37939                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37940                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 37941                                  
 37942                                  ; 48 tpi diskettes
 37943                                  
 37944 00004A05 0002                    bpb48t	dw	512
 37945 00004A07 02                      	db	2
 37946 00004A08 0100                    	dw	1
 37947 00004A0A 02                      	db	2
 37948 00004A0B 7000                    	dw	112
 37949 00004A0D D002                    	dw	2*9*40 ; 720
 37950 00004A0F FD                      	db	0FDh
 37951 00004A10 0200                    	dw	2
 37952 00004A12 0900                    	dw	9
 37953 00004A14 0200                    	dw	2
 37954 00004A16 00000000                	dd	0
 37955 00004A1A 00000000                        dd      0
 37956                                  
 37957                                  ; 96tpi diskettes
 37958                                  
 37959 00004A1E 0002                    bpb96t:	dw	512
 37960 00004A20 01                      	db	1
 37961 00004A21 0100                    	dw	1
 37962 00004A23 02                      	db	2
 37963 00004A24 E000                    	dw	224
 37964 00004A26 6009                    	dw	2*15*80 ; 2400
 37965 00004A28 F9                      	db	0F9h
 37966 00004A29 0700                    	dw	7
 37967 00004A2B 0F00                    	dw	15
 37968 00004A2D 0200                    	dw	2
 37969 00004A2F 00000000                	dd	0
 37970 00004A33 00000000                        dd      0
 37971                                  
 37972                                  ; 3 1/2 inch diskette bpb
 37973                                  
 37974 00004A37 0002                    bpb35:	dw	512
 37975 00004A39 02                      	db	2
 37976 00004A3A 0100                    	dw	1
 37977 00004A3C 02                      	db	2
 37978 00004A3D 7000                    	dw	112
 37979 00004A3F A005                    	dw	2*9*80 ; 1440
 37980 00004A41 F9                      	db	0F9h
 37981 00004A42 0300                    	dw	3
 37982 00004A44 0900                    	dw	9
 37983 00004A46 0200                    	dw	2
 37984 00004A48 00000000                	dd	0
 37985 00004A4C 00000000                        dd      0
 37986                                        
 37987 00004A50 0002                    bpb35h:	dw	512
 37988 00004A52 01                      	db	1
 37989 00004A53 0100                    	dw	1
 37990 00004A55 02                      	db	2
 37991 00004A56 E000                    	dw	224
 37992 00004A58 400B                    	dw	2*18*80 ; 2880
 37993 00004A5A F0                      	db	0F0h
 37994 00004A5B 0900                    	dw	9
 37995 00004A5D 1200                    	dw	18
 37996 00004A5F 0200                    	dw	2
 37997 00004A61 00000000                	dd	0
 37998 00004A65 00000000                        dd      0
 37999                                  
 38000                                  ; m037 - BEGIN
 38001                                  
 38002 00004A69 0002                    bpb288:	dw	512
 38003 00004A6B 02                      	db	2
 38004 00004A6C 0100                    	dw	1
 38005 00004A6E 02                      	db	2
 38006 00004A6F F000                    	dw	240
 38007 00004A71 8016                    	dw	2*36*80 ; 5760
 38008 00004A73 F0                      	db	0F0h
 38009 00004A74 0900                    	dw	9
 38010 00004A76 2400                    	dw	36
 38011 00004A78 0200                    	dw	2
 38012 00004A7A 00000000                	dd	0
 38013 00004A7E 00000000                        dd      0
 38014                                  
 38015                                  ; m037 - END
 38016                                  
 38017                                  ; 12/05/2019
 38018                                  
 38019                                  align 2
 38020                                  
 38021                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38022                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 38023                                  
 38024 00004A82 [054A]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 38025 00004A84 [1E4A]                  	    dw	    bpb96t		; 96tpi drives
 38026 00004A86 [374A]                  	    dw	    bpb35		; 3.5" drives
 38027                                  ; the following are not supported, so default to 3.5" media layout
 38028 00004A88 [374A]                  	    dw	    bpb35		; not used - 8" drives
 38029 00004A8A [374A]                  	    dw	    bpb35		; not used - 8" drives
 38030 00004A8C [374A]                  	    dw	    bpb35		; not used - hard files
 38031 00004A8E [374A]                  	    dw	    bpb35		; not used - tape drives
 38032 00004A90 [504A]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 38033 00004A92 [374A]                  	    dw	    bpb35		; ERIMO				m037
 38034 00004A94 [694A]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 38035                                  
 38036                                  switchlist: 
 38037 00004A96 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 38038                                  
 38039                                  ;----------------------------------------------------------------------------
 38040                                  ; Messages
 38041                                  ;----------------------------------------------------------------------------
 38042                                  
 38043                                  ; 19/04/2019 - Retro DOS v4.0
 38044                                  
 38045                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 38046                                  
 38047 00004A9F 00                      	db 	0
 38048                                  
 38049                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38050                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 38051                                  
 38052                                  badopm:
 38053 00004AA0 0D0A                    	db	0Dh,0Ah 
 38054 00004AA2 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 38054 00004AAB 7A656420636F6D6D61-
 38054 00004AB4 6E6420696E20434F4E-
 38054 00004ABD 4649472E535953     
 38055                                  crlfm:
 38056 00004AC4 0D0A24                  	db	0Dh,0Ah,'$'
 38057                                  badparm:
 38058 00004AC7 0D0A                    	db	0Dh,0Ah
 38059 00004AC9 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 38059 00004AD2 6E64206F7220706172-
 38059 00004ADB 616D6574657273202D-
 38059 00004AE4 2024               
 38060                                  badsiz_pre:
 38061 00004AE6 0D0A                    	db	0Dh,0Ah
 38062 00004AE8 536563746F72207369-     	db	'Sector size too large in file $'
 38062 00004AF1 7A6520746F6F206C61-
 38062 00004AFA 72676520696E206669-
 38062 00004B03 6C652024           
 38063                                  badld_pre:
 38064 00004B07 0D0A                    	db	0Dh,0Ah
 38065 00004B09 426164206F72206D69-     	db	'Bad or missing $'
 38065 00004B12 7373696E672024     
 38066                                  badcom:
 38067 00004B19 436F6D6D616E642049-     	db	'Command Interpreter',0
 38067 00004B22 6E7465727072657465-
 38067 00004B2B 7200               
 38068                                  badcountry:
 38069 00004B2D 0D0A                    	db	0Dh,0Ah
 38070 00004B2F 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 38070 00004B38 6F756E74727920636F-
 38070 00004B41 6465206F7220636F64-
 38070 00004B4A 6520706167650D0A24 
 38071                                  badcountrycom:
 38072 00004B53 0D0A                    	db	0Dh,0Ah
 38073 00004B55 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 38073 00004B5E 434F554E5452592063-
 38073 00004B67 6F6D6D616E640D0A24 
 38074                                  insufmemory:
 38075 00004B70 0D0A                    	db	0Dh,0Ah
 38076 00004B72 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 38076 00004B7B 656E74206D656D6F72-
 38076 00004B84 7920666F7220434F55-
 38076 00004B8D 4E5452592E53595320-
 38076 00004B96 66696C650D0A24     
 38077                                  badmem:
 38078 00004B9D 0D0A                    	db	0Dh,0Ah
 38079 00004B9F 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 38079 00004BA8 74696F6E20746F6F20-
 38079 00004BB1 6C6172676520666F72-
 38079 00004BBA 206D656D6F72790D0A-
 38079 00004BC3 24                 
 38080                                  badblock:
 38081 00004BC4 0D0A                    	db	0Dh,0Ah
 38082 00004BC6 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 38082 00004BCF 626C6F636B20646576-
 38082 00004BD8 696365730D0A24     
 38083                                  badstack:
 38084 00004BDF 0D0A                    	db	0Dh,0Ah
 38085 00004BE1 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 38085 00004BEA 5441434B2070617261-
 38085 00004BF3 6D65746572730D0A24 
 38086                                  	; 18/12/2022
 38087                                  ;badorder:
 38088                                  	;db	0Dh,0Ah
 38089                                  	;db	'Incorrect order in CONFIG.SYS line $'
 38090                                  errorcmd:
 38091 00004BFC 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 38091 00004C05 434F4E4649472E5359-
 38091 00004C0E 53206C696E652024   
 38092                                  
 38093                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38094                                  ; (SYSINIT:566Eh)
 38095                                  
 38096                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38097                                  ;%if 0
 38098                                  
 38099 00004C16 4F4E                    OnOff:	db	'ON'
 38100 00004C18 4F4646                  OnOff2:	db	'OFF'
 38101                                  
 38102                                  	; 04/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38103                                  	; (SYSINIT:5673h)
 38104                                  ;StartMsg:
 38105                                  ;	db	'Starting MS-DOS...',0Dh,0Ah
 38106                                  ;	db	0Ah,0
 38107                                  
 38108                                  _$PauseMsg:
 38109 00004C1B 507265737320616E79-     	db	'Press any key to continue . . .',0Dh,0Ah,'$'
 38109 00004C24 206B657920746F2063-
 38109 00004C2D 6F6E74696E7565202E-
 38109 00004C36 202E202E0D0A24     
 38110                                  	; 04/08/2023 (PCDOS 7.10 - IBMBIO.COM SYSINIT:590Dh)
 38111                                  	;db	'Press any key to continue...',0Dh,0Ah,'$'
 38112                                  _$CleanMsg:
 38113 00004C3D 4D532D444F53206973-     	db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 38113 00004C46 20627970617373696E-
 38113 00004C4F 6720796F757220434F-
 38113 00004C58 4E4649472E53595320-
 38113 00004C61 616E64204155544F45-
 38113 00004C6A 5845432E4241542066-
 38113 00004C73 696C65732E0D0A24   
 38114                                  _$InterMsg:
 38115 00004C7B 4D532D444F53207769-     	db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 38115 00004C84 6C6C2070726F6D7074-
 38115 00004C8D 20796F7520746F2063-
 38115 00004C96 6F6E6669726D206561-
 38115 00004C9F 636820434F4E464947-
 38115 00004CA8 2E53595320636F6D6D-
 38115 00004CB1 616E642E0D0A24     
 38116                                  _$MenuHeader:
 38117 00004CB8 0D0A                    	db	0Dh,0Ah
 38118 00004CBA 20204D532D444F5320-     	db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 38118 00004CC3 362E32205374617274-
 38118 00004CCC 7570204D656E750D0A 
 38119 00004CD5 2020                    	db	'  '
 38120 00004CD7 CD<rep 17h>             	times	23 db (0CDh)  ; ALT 205 ; '=======================' ; 06/08/2023
 38121 00004CEE 0D0A24                  	db 	0Dh,0Ah,'$'
 38122                                  	; 04/08/2023 (PCDOS 7.10 - IBMBIO.COM SYSINIT:59A7h)
 38123                                  	;db	'  PC DOS 7.1 Startup Menu',0Dh,0Ah
 38124                                  	;db	'  '
 38125                                  	;times	23 db (0CDh)  ; ALT 205 ; '=======================' ; 06/08/2023
 38126                                  	;db 	0Dh,0Ah,'$'
 38127                                  _$MenuPrmpt:
 38128 00004CF1 2020456E7465722061-     	db	'  Enter a choice: $'
 38128 00004CFA 2063686F6963653A20-
 38128 00004D03 24                 
 38129                                  _$StatusLine:
 38130 00004D04 46353D427970617373-     	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS '
 38130 00004D0D 207374617274757020-
 38130 00004D16 66696C65732046383D-
 38130 00004D1F 436F6E6669726D2065-
 38130 00004D28 616368206C696E6520-
 38130 00004D31 6F6620434F4E464947-
 38130 00004D3A 2E53595320         
 38131 00004D3F 616E64204155544F45-     	db	'and AUTOEXEC.BAT [ ]$'
 38131 00004D48 5845432E424154205B-
 38131 00004D51 205D24             
 38132                                  _$InterPrmpt:
 38133 00004D54 205B592C4E5D3F24        	db	' [Y,N]?$'
 38134                                  	; 04/08/2023
 38135                                  	;db	' [Y,N,ESC]?$' ; PCDOS 7.1 - IBMBIO.COM 
 38136 00004D5C 59455324                _$YES:	db	'YES$'
 38137 00004D60 4E4F2024                _$NO:	db	'NO $'
 38138                                  _$TimeOut:
 38139 00004D64 54696D652072656D61-     	db	'Time remaining: $'
 38139 00004D6D 696E696E673A2024   
 38140                                  badcomprmpt:
 38141 00004D75 456E74657220636F72-     	db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 38141 00004D7E 72656374206E616D65-
 38141 00004D87 206F6620436F6D6D61-
 38141 00004D90 6E6420496E74657270-
 38141 00004D99 726574657220286567-
 38141 00004DA2 2C20433A5C434F4D4D-
 38141 00004DAB 414E442E434F4D29   
 38142 00004DB3 0D0A24                  	db	0Dh,0Ah,'$'
 38143                                  _$AutoPrmpt:
 38144 00004DB6 50726F636573732041-     	db	'Process AUTOEXEC.BAT [Y,N]?$'
 38144 00004DBF 55544F455845432E42-
 38144 00004DC8 4154205B592C4E5D3F-
 38144 00004DD1 24                 
 38145                                  
 38146                                  ;%endif ; 02/11/2022
 38147                                  
 38148                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38149                                  ; (SYSINIT:5840h)
 38150                                  
 38151                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38152                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 38153                                  
 38154                                  TooManyDrivesMsg:
 38155 00004DD2 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 38155 00004DDB 4C6F676963616C2064-
 38155 00004DE4 726976657320706173-
 38155 00004DED 74205A3A2065786973-
 38155 00004DF6 7420616E642077696C-
 38155 00004DFF 6C2062652069676E6F-
 38155 00004E08 7265640D0A24       
 38156                                  
 38157                                  ;MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 38158                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 38159                                  	;db	7 dup(0)
 38160                                  
 38161                                  	;times	7 db 0
 38162                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38163                                  ;MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 38164                                  	; 09/12/2022
 38165                                  	;times 4 db 0
 38166                                  
 38167                                  ;----------------------------------------------------------------------------
 38168                                  		; 09/12/2022
 38169                                  		;db 0
 38170                                  
 38171                                  number3div	equ ($-SYSINIT$)
 38172                                  number3mod	equ (number3div % 16)
 38173                                  
 38174                                  %if number3mod>0 & number3mod<16
 38175 00004E0E 00<rep 2h>              		times (16-number3mod) db 0
 38176                                  %endif
 38177                                  
 38178                                  ;---------------------------------------------------------------------------- 
 38179                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS 
 38180                                  ;---------------------------------------------------------------------------- 
 38181                                  
 38182                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 38183                                  
 38184                                  ;----------------------------------------------------------------------------
 38185                                  ; 20/04/2019 - Retro DOS v4.0
 38186                                  
 38187                                  ; 09/12/2022
 38188                                  ;
 38189                                  ;bss_start:
 38190                                  ;
 38191                                  ;ABSOLUTE bss_start
 38192                                  ;
 38193                                  ;alignb 16
 38194                                  
 38195                                  SI_end:  ; SI_end equ $
 38196                                  
 38197                                  ;----------------------------------------------------------------------------
 38198                                  
 38199                                  ;sysinitseg	ends
 38200                                  
 38201                                  ; ***************************************************************************
 38202                                  
 38203                                  ; 04/01/2023 - MSDOS 6.21 SYSINIT:SI_end = SYSINIT:58A0h (IOSYS:9F46h)
 38204                                  ; 09/12/2022 - MSDOS 5.0 SYSINIT:SI_end = SYSINIT:3D20h
 38205                                  
 38206                                  SYSINITSIZE	equ SI_end - SYSINIT$
 38207                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 38208                                  
 38209                                  ;----------------------------------------------------------------------------
 38210                                  ; End of Retro DOS v4.2 IO.SYS source by Erdogan Tan - 04/01/2023 -
 38211                                  ;----------------------------------------------------------------------------
 38212                                  
 38213                                  ; 21/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 38214                                  ;----------------------------------------------------------------------------
 38215                                  ;----------------------------------------------------------------------------
 38216                                  
 38217                                  ; ----------------------------------------------------------------------------
 38218                                  ; START OF MSDOS 6.0 -IBMDOS.COM- KERNEL CODE (MSDOS.SYS) -will be relocated-
 38219                                  ; ----------------------------------------------------------------------------
 38220                                  ; 04/01/2023 - Retro DOS v4.2
 38221                                  ; 29/12/2022 - Retro DOS v4.1
 38222                                  ; 18/03/2019 - Retro DOS v4.0 
 38223                                  ; 11/06/2018 - Retro DOS v3.0 
 38224                                  
 38225                                  MSDOS_BIN_OFFSET: ; this offset must be paragraph aligned
 38226                                  		;; 28/06/2019 ('msdos6.s') 
 38227                                  		;incbin	'MSDOS6.BIN' ; Retro DOS 4.0 - MSDOS 6.21 KERNEL
 38228                                  		
 38229                                  		; 29/12/2022
 38230                                  		;incbin	'MSDOS51.BIN' ; Retro DOS 4.1 - MSDOS 5.0+ KERNEL
 38231                                  
 38232                                  		; 04/01/2023
 38233 00004E10 <bin 8EFAh>             		incbin	'MSDOS6.BIN' ; Retro DOS 4.2 - MSDOS 6.21+ KERNEL		
 38234                                  		
 38235                                  		;; 28/12/2022 (BugFix)
 38236                                  		;; 22/12/2022
 38237                                  		;; 21/12/2022 ('msdos5.s')
 38238                                  		;incbin 'MSDOS5.BIN'  ; Retro DOS 4.0 - MSDOS 5.0+ KERNEL
 38239                                  	
 38240                                  msdos_bin_size equ $ - MSDOS_BIN_OFFSET
 38241                                  
 38242                                  align 2
 38243                                  
 38244                                  ; 21/12/2022
 38245                                  ;END_OF_KERNEL:
 38246                                  END_OF_KERNEL equ $
 38247                                  
 38248                                  ;=============================================================================
 38249                                  ;	END
 38250                                  ;=============================================================================
 38251                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 38252                                  ; ------------------------------
 38253                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
